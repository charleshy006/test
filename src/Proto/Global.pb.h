// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Global.proto

#ifndef PROTOBUF_Global_2eproto__INCLUDED
#define PROTOBUF_Global_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Global {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Global_2eproto();
void protobuf_AssignDesc_Global_2eproto();
void protobuf_ShutdownFile_Global_2eproto();

class stLoginGlobal;
class stCreateRole;
class stCreateRoleResult;
class stReqSnapData;
class stSnapData;
class stRetSnapData;
class stReqLoadData;
class stGateForwardProto;
class stForwardProto2Me;
class stBroadcastProto2AllUser;
class stLoginGlobalFail;
class stNotifyLoginOut;
class stGameSvrStartUp;
class stKillUserOut;
class stServerCfgPair;
class stNotifyGateSvrCfg;
class stReloginGlobal;
class stPlayerAutoConnect;
class stClientLostConnect;
class stAskIsNewAccount;
class stIsNewAccount;
class stSaveRoleInfo;
class stRetRoleInfo;
class stUserEnterMapSuccess;
class stRechargeInfo;
class stUserRecharge;
class stProcessGM;
class stSynFetchLilianNum;
class stSynGuildID;
class stCreateGuild;
class stCreateGuildDecMoney;
class stForwardJoininGuild;
class stAddGuildContribute;
class stBroadcastGuildChatInfo;
class stGuildPray;
class stSynUserLevel;
class stSynCopymapStarNum;
class stSynUserBattlePower;
class stSendTeamChatInfo;
class stTeamLeaveCopyMap;
class stTreasureCombine;
class stTreasureCombineSuccess;
class stBuyPeaceModubleTime;
class stReqChangeGameSvr;
class stConfirmChangeGameSvr;
class stRetOtherUserData2Me;
class stMailAttach;
class stObtainItemFromMail;
class stSynAddTreasure;
class stBeginPKWithOther;
class stUserLeitaiChallenge;
class stArenaPKResult;
class stSynDrawHeroScore;
class stUpLeitaiUseTime;
class stUserLeaveGuild;
class stEnterCopymapMemInfo;
class stTeamEnterCopyMap;
class stOne2OnePVPEnterCopyMap;
class stForwardCapture;
class stCaptureRewardItem;
class stCaptureReward;
class stRealTimeBattleEnterCopymap;
class stNotifyAddLilian;
class stEnterGuildCopymap;
class stSynMyContribyte;
class stOnlineUserGMType;
class stForbidOnlineUser;
class stOne2OnePVPFinish;
class stActivityConfig;
class stSynActivityConfig;
class stCaptureTreasureFail;
class stCharID2Rank;
class stRankModuleInfo;
class stSynRankModuleInfo;
class stGiftBagReward;
class stGiveGiftBagReward;
class stNotifyGameSvrCfg;
class stNotifyCurEquipInfo;
class stReloginGame;
class stFirstKillBaseInfo;
class stTeamCopyMapFinish;
class stUserOnlineSendFirstKillInfo;
class stTeamFinishFirstKill;
class stSetClearWorldBossTime;
class stSetWorldBossBuyNum;
class stUserDecSP;
class stUsreDecLilian;
class stUserDamagePair;
class stGuildCopymapFail;
class stGuildCopymapKillBoss;
class stWorldBossCopymapFail;
class stKillWorldBoss;
class stDrawHeroScoreReward;
class stDrawHeroRankReward;
class stCompensantionItem;
class stSetCompensationID;
class stSetOpenServerDay;
class stSynGuildLv2AllMember;
class stForwardChgBadge;
class stWorldBossBuyDecDiamond;
class stGuildDonateSuccess;
class stUserLeaveWorldBoss;
class stNotifyGameAutoConnect;
class stForwardDrawHeroScoreReward;
class stNotifyArenaReward;
class stForwardInvestgateAnswer;
class ForwardInvestgateResult;
class stGMModifyUserInfo;
class stSynMyArenaRank;
class stSynVipLv;
class stNotifyClearArenaCD;
class stReqResetArenaChallengeNum;
class stNotfiyResetChallengeNum;
class stReqResetInterceptNum;
class stNotifyClearInterceptCD;
class stNotifyResetInterceptNum;
class stNotifyGuardQuality;
class stNotifyGuardInspiredSuccess;
class stReqRefreshGuardQuality;
class stNotifyClearOne2OneScore;
class stClearOne2OneScoreSuccess;
class stInterceptReward;
class stQuickFinishDecDiamond;
class stQuickFinishDiamondSuccess;
class stOne2OnePkWithRobot;
class stNotifyUserBeginGuard;
class stNotifyUserInterceptResult;
class stNotifyCloseBetaReward;
class stEnterManorFightMapUserInfo;
class stEnterManorFightMap;
class stManorFightBattleProp;
class stFinishManorFight;
class stExistName;
class stSynName;
class stSynGloryfashionCharID;
class stDevilCallItem;
class stAllDevilCall;
class stDevilCallReward;
class stDevilCallRewardRet;
class stDevilCall;
class stDevilCallRet;
class stDevilCallSummary;
class stExpeditionItem;
class stExpeditionInfo;
class stExpedition;
class stExpeditionHero;
class stExpeditionRet;
class stExpeditionReward;
class stExpeditionRewardRet;
class stFastExpedition;
class stFastExpeditionRet;
class stCancelExpedition;
class stCancelExpeditionRet;
class stExpeditionSummary;
class stGiveLilianDayTaskCb;
class stUpdateDamageRank;
class stNoticeSendRankInfo;
class stOperateActivityCb;
class stOperateActivityReward;
class stOperateActivityRewardCb;
class stOperateActivityLotteryReward;
class stOperateActivityLotteryRewardCb;
class stReqPayTypeCb;
class stReqUserRankInfo;
class userSortInfo;
class stUserRankInfoResult;
class stEmeraldDreamCopymapFail;
class stKillEmeraldDreamBoss;
class strRemoveNum;
class stCopyMapInfo;
class stCopyMapInfoResult;
class stRealTimeTeamMatch;
class stOnPubLeaveTeam;
class stDeductMoney;
class stDeductMoneyResult;
class stGiveReward;
class stGiveRewardResult;
class stReqCheckMission;
class stReqCheckTask;
class stReqEnterTaskLv;
class stReqDisbandTeam;
class stReqDrawInviteReward;
class stReqDrawInviteRewardCb;
class stReqDrawUseInviteReward;
class stRoleInfo;
class stHeroLeagueEnterCopyMap;
class stHeroLeaguePkWithRobot;
class stReqHeroLeagueCheck;
class stHeroLeagueMatch;
class stPubRoleInfo;
class stHeroLeagueResult;
class stSynRoleList;
class stTeam;
class stSynRoleListResult;
class stSynChampionInfo;
class stReqSynChampionInfo;
class stReqWorskip;
class stWorskipResult;
class stReqRedPoint;
class stRedPointResult;
class stInterceptResultToGlobal;
class stSynMemberInfo;
class stRetRoomInfo;
class stRetAddTeamMember;
class MarryObjInfo;
class stReqPropose;
class stReqAgreeMarry;
class stReqQuitWedding;
class stReqReEnterWedding;
class stReqBuyFireWork;
class stReqAgreeInvite;
class stReqTakeCandy;
class stNotifyCoupleMarry;
class stSendWeedingRing;
class stMarryInfoCb;
class stUseFireWork;
class stRetMarryInfoToCouple;
class stNotifyCoupleMarryCb;
class stRetForceDivorce;
class stRetForceDivorceCb;
class stRetRejectDivorce;
class stRetDelUserOnlineMarryInfo;
class stReqSynGuildBlackMarketLv;
class stSynGuildBlackMarketLvResult;
class stGloryUserPart;
class stGloryUserDetail;
class stGloryUser;
class stEnterResBattle;
class stBroadResBattleInvite;
class stPubOffline;
class stDiscoverConsume;
class stSynCoupleInfo;
class stSynResBattleUserData;
class stSynResBattleTop50;
class stSynResBattleKing;
class stReplyInviteResBattle;
class stSynGloryKingTitle;
class stPubOnline;
class stResBattleSend2Pub;
class stServerParamItem;
class stServerParamSend2Game;
class stSynUserPhotoID;
class stUseLvlBox;
class stUseLvlBoxRes;
class stRechangeStatistics;
class stNftItem;
class stGlobal2GameQueryUserNft;
class stGame2GlobalQueryUserNftResult;
class stGlobal2GameChangeNftItem;
class stGame2GlobalChangeNftItemResult;
class stGame2GlobalNftVipGift;
class stRetNftOfflineUserData;
class stRetChangeNftOfflineUserData;
class stSendUserLog;
class stReqKillUserOut;
class stKillUserOutResult;
class stReqSetUserGMType;
class stSetUserGMTypeResult;
class stReqBanUser;
class stBanUserResult;
class stSendMailAttach;
class stSendMail2User;
class stSendMail2UserResult;
class stWebMotifyUserInfo;
class stWebMotifyUserInfoRet;
class stAddOrUpdateNotice;
class stDelNotice;
class stWebNotifyRechargeInfo;
class stAddGiftBagCfg;
class stDelGiftBagCfg;
class stAddBlackAndWhite;
class stSetServerMaintenanceTime;
class stGetSvrConfig;
class stRetSvrConfig;
class stUpdateSvrCfg;
class stNotifyWebOnlineNum;
class stEnterSelectPage;
class stNotifyWebCreateRole;
class stSendGuildLog;
class sstSendGuildResLog;
class stSendModuleLog;
class stReqGetTxGiftBag;
class stRetGetTxGiftBag;
class stUpdateSvrOpenTime;
class stResourceChgLog;
class stUseInviteCode;
class stUseInviteCodeCb;
class stReqLimitPetActivityData;
class stAcitivityLimitPetItem;
class stSendLimitPetActivityData;
class stSendShutDown;
class stWeb2GlobalQueryUserNft;
class stGlobal2WebQueryUserNftResult;
class stWeb2GlobalChangeNftItem;
class stGlobal2WebChangeNftItemResult;

enum stLoginGlobal_ProtoModID {
  stLoginGlobal_ProtoModID_ModID = 1
};
bool stLoginGlobal_ProtoModID_IsValid(int value);
const stLoginGlobal_ProtoModID stLoginGlobal_ProtoModID_ProtoModID_MIN = stLoginGlobal_ProtoModID_ModID;
const stLoginGlobal_ProtoModID stLoginGlobal_ProtoModID_ProtoModID_MAX = stLoginGlobal_ProtoModID_ModID;
const int stLoginGlobal_ProtoModID_ProtoModID_ARRAYSIZE = stLoginGlobal_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLoginGlobal_ProtoModID_descriptor();
inline const ::std::string& stLoginGlobal_ProtoModID_Name(stLoginGlobal_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLoginGlobal_ProtoModID_descriptor(), value);
}
inline bool stLoginGlobal_ProtoModID_Parse(
    const ::std::string& name, stLoginGlobal_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLoginGlobal_ProtoModID>(
    stLoginGlobal_ProtoModID_descriptor(), name, value);
}
enum stLoginGlobal_ProtoFunID {
  stLoginGlobal_ProtoFunID_FunID = 1
};
bool stLoginGlobal_ProtoFunID_IsValid(int value);
const stLoginGlobal_ProtoFunID stLoginGlobal_ProtoFunID_ProtoFunID_MIN = stLoginGlobal_ProtoFunID_FunID;
const stLoginGlobal_ProtoFunID stLoginGlobal_ProtoFunID_ProtoFunID_MAX = stLoginGlobal_ProtoFunID_FunID;
const int stLoginGlobal_ProtoFunID_ProtoFunID_ARRAYSIZE = stLoginGlobal_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLoginGlobal_ProtoFunID_descriptor();
inline const ::std::string& stLoginGlobal_ProtoFunID_Name(stLoginGlobal_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLoginGlobal_ProtoFunID_descriptor(), value);
}
inline bool stLoginGlobal_ProtoFunID_Parse(
    const ::std::string& name, stLoginGlobal_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLoginGlobal_ProtoFunID>(
    stLoginGlobal_ProtoFunID_descriptor(), name, value);
}
enum stCreateRole_ProtoModID {
  stCreateRole_ProtoModID_ModID = 2
};
bool stCreateRole_ProtoModID_IsValid(int value);
const stCreateRole_ProtoModID stCreateRole_ProtoModID_ProtoModID_MIN = stCreateRole_ProtoModID_ModID;
const stCreateRole_ProtoModID stCreateRole_ProtoModID_ProtoModID_MAX = stCreateRole_ProtoModID_ModID;
const int stCreateRole_ProtoModID_ProtoModID_ARRAYSIZE = stCreateRole_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateRole_ProtoModID_descriptor();
inline const ::std::string& stCreateRole_ProtoModID_Name(stCreateRole_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateRole_ProtoModID_descriptor(), value);
}
inline bool stCreateRole_ProtoModID_Parse(
    const ::std::string& name, stCreateRole_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateRole_ProtoModID>(
    stCreateRole_ProtoModID_descriptor(), name, value);
}
enum stCreateRole_ProtoFunID {
  stCreateRole_ProtoFunID_FunID = 1
};
bool stCreateRole_ProtoFunID_IsValid(int value);
const stCreateRole_ProtoFunID stCreateRole_ProtoFunID_ProtoFunID_MIN = stCreateRole_ProtoFunID_FunID;
const stCreateRole_ProtoFunID stCreateRole_ProtoFunID_ProtoFunID_MAX = stCreateRole_ProtoFunID_FunID;
const int stCreateRole_ProtoFunID_ProtoFunID_ARRAYSIZE = stCreateRole_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateRole_ProtoFunID_descriptor();
inline const ::std::string& stCreateRole_ProtoFunID_Name(stCreateRole_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateRole_ProtoFunID_descriptor(), value);
}
inline bool stCreateRole_ProtoFunID_Parse(
    const ::std::string& name, stCreateRole_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateRole_ProtoFunID>(
    stCreateRole_ProtoFunID_descriptor(), name, value);
}
enum stCreateRoleResult_ProtoModID {
  stCreateRoleResult_ProtoModID_ModID = 2
};
bool stCreateRoleResult_ProtoModID_IsValid(int value);
const stCreateRoleResult_ProtoModID stCreateRoleResult_ProtoModID_ProtoModID_MIN = stCreateRoleResult_ProtoModID_ModID;
const stCreateRoleResult_ProtoModID stCreateRoleResult_ProtoModID_ProtoModID_MAX = stCreateRoleResult_ProtoModID_ModID;
const int stCreateRoleResult_ProtoModID_ProtoModID_ARRAYSIZE = stCreateRoleResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateRoleResult_ProtoModID_descriptor();
inline const ::std::string& stCreateRoleResult_ProtoModID_Name(stCreateRoleResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateRoleResult_ProtoModID_descriptor(), value);
}
inline bool stCreateRoleResult_ProtoModID_Parse(
    const ::std::string& name, stCreateRoleResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateRoleResult_ProtoModID>(
    stCreateRoleResult_ProtoModID_descriptor(), name, value);
}
enum stCreateRoleResult_ProtoFunID {
  stCreateRoleResult_ProtoFunID_FunID = 2
};
bool stCreateRoleResult_ProtoFunID_IsValid(int value);
const stCreateRoleResult_ProtoFunID stCreateRoleResult_ProtoFunID_ProtoFunID_MIN = stCreateRoleResult_ProtoFunID_FunID;
const stCreateRoleResult_ProtoFunID stCreateRoleResult_ProtoFunID_ProtoFunID_MAX = stCreateRoleResult_ProtoFunID_FunID;
const int stCreateRoleResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCreateRoleResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateRoleResult_ProtoFunID_descriptor();
inline const ::std::string& stCreateRoleResult_ProtoFunID_Name(stCreateRoleResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateRoleResult_ProtoFunID_descriptor(), value);
}
inline bool stCreateRoleResult_ProtoFunID_Parse(
    const ::std::string& name, stCreateRoleResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateRoleResult_ProtoFunID>(
    stCreateRoleResult_ProtoFunID_descriptor(), name, value);
}
enum stReqSnapData_ProtoModID {
  stReqSnapData_ProtoModID_ModID = 2
};
bool stReqSnapData_ProtoModID_IsValid(int value);
const stReqSnapData_ProtoModID stReqSnapData_ProtoModID_ProtoModID_MIN = stReqSnapData_ProtoModID_ModID;
const stReqSnapData_ProtoModID stReqSnapData_ProtoModID_ProtoModID_MAX = stReqSnapData_ProtoModID_ModID;
const int stReqSnapData_ProtoModID_ProtoModID_ARRAYSIZE = stReqSnapData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSnapData_ProtoModID_descriptor();
inline const ::std::string& stReqSnapData_ProtoModID_Name(stReqSnapData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSnapData_ProtoModID_descriptor(), value);
}
inline bool stReqSnapData_ProtoModID_Parse(
    const ::std::string& name, stReqSnapData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSnapData_ProtoModID>(
    stReqSnapData_ProtoModID_descriptor(), name, value);
}
enum stReqSnapData_ProtoFunID {
  stReqSnapData_ProtoFunID_FunID = 3
};
bool stReqSnapData_ProtoFunID_IsValid(int value);
const stReqSnapData_ProtoFunID stReqSnapData_ProtoFunID_ProtoFunID_MIN = stReqSnapData_ProtoFunID_FunID;
const stReqSnapData_ProtoFunID stReqSnapData_ProtoFunID_ProtoFunID_MAX = stReqSnapData_ProtoFunID_FunID;
const int stReqSnapData_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSnapData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSnapData_ProtoFunID_descriptor();
inline const ::std::string& stReqSnapData_ProtoFunID_Name(stReqSnapData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSnapData_ProtoFunID_descriptor(), value);
}
inline bool stReqSnapData_ProtoFunID_Parse(
    const ::std::string& name, stReqSnapData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSnapData_ProtoFunID>(
    stReqSnapData_ProtoFunID_descriptor(), name, value);
}
enum stRetSnapData_ProtoModID {
  stRetSnapData_ProtoModID_ModID = 2
};
bool stRetSnapData_ProtoModID_IsValid(int value);
const stRetSnapData_ProtoModID stRetSnapData_ProtoModID_ProtoModID_MIN = stRetSnapData_ProtoModID_ModID;
const stRetSnapData_ProtoModID stRetSnapData_ProtoModID_ProtoModID_MAX = stRetSnapData_ProtoModID_ModID;
const int stRetSnapData_ProtoModID_ProtoModID_ARRAYSIZE = stRetSnapData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetSnapData_ProtoModID_descriptor();
inline const ::std::string& stRetSnapData_ProtoModID_Name(stRetSnapData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetSnapData_ProtoModID_descriptor(), value);
}
inline bool stRetSnapData_ProtoModID_Parse(
    const ::std::string& name, stRetSnapData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetSnapData_ProtoModID>(
    stRetSnapData_ProtoModID_descriptor(), name, value);
}
enum stRetSnapData_ProtoFunID {
  stRetSnapData_ProtoFunID_FunID = 4
};
bool stRetSnapData_ProtoFunID_IsValid(int value);
const stRetSnapData_ProtoFunID stRetSnapData_ProtoFunID_ProtoFunID_MIN = stRetSnapData_ProtoFunID_FunID;
const stRetSnapData_ProtoFunID stRetSnapData_ProtoFunID_ProtoFunID_MAX = stRetSnapData_ProtoFunID_FunID;
const int stRetSnapData_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetSnapData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetSnapData_ProtoFunID_descriptor();
inline const ::std::string& stRetSnapData_ProtoFunID_Name(stRetSnapData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetSnapData_ProtoFunID_descriptor(), value);
}
inline bool stRetSnapData_ProtoFunID_Parse(
    const ::std::string& name, stRetSnapData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetSnapData_ProtoFunID>(
    stRetSnapData_ProtoFunID_descriptor(), name, value);
}
enum stReqLoadData_ProtoModID {
  stReqLoadData_ProtoModID_ModID = 2
};
bool stReqLoadData_ProtoModID_IsValid(int value);
const stReqLoadData_ProtoModID stReqLoadData_ProtoModID_ProtoModID_MIN = stReqLoadData_ProtoModID_ModID;
const stReqLoadData_ProtoModID stReqLoadData_ProtoModID_ProtoModID_MAX = stReqLoadData_ProtoModID_ModID;
const int stReqLoadData_ProtoModID_ProtoModID_ARRAYSIZE = stReqLoadData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLoadData_ProtoModID_descriptor();
inline const ::std::string& stReqLoadData_ProtoModID_Name(stReqLoadData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLoadData_ProtoModID_descriptor(), value);
}
inline bool stReqLoadData_ProtoModID_Parse(
    const ::std::string& name, stReqLoadData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLoadData_ProtoModID>(
    stReqLoadData_ProtoModID_descriptor(), name, value);
}
enum stReqLoadData_ProtoFunID {
  stReqLoadData_ProtoFunID_FunID = 5
};
bool stReqLoadData_ProtoFunID_IsValid(int value);
const stReqLoadData_ProtoFunID stReqLoadData_ProtoFunID_ProtoFunID_MIN = stReqLoadData_ProtoFunID_FunID;
const stReqLoadData_ProtoFunID stReqLoadData_ProtoFunID_ProtoFunID_MAX = stReqLoadData_ProtoFunID_FunID;
const int stReqLoadData_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLoadData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLoadData_ProtoFunID_descriptor();
inline const ::std::string& stReqLoadData_ProtoFunID_Name(stReqLoadData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLoadData_ProtoFunID_descriptor(), value);
}
inline bool stReqLoadData_ProtoFunID_Parse(
    const ::std::string& name, stReqLoadData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLoadData_ProtoFunID>(
    stReqLoadData_ProtoFunID_descriptor(), name, value);
}
enum stGateForwardProto_ProtoModID {
  stGateForwardProto_ProtoModID_ModID = 2
};
bool stGateForwardProto_ProtoModID_IsValid(int value);
const stGateForwardProto_ProtoModID stGateForwardProto_ProtoModID_ProtoModID_MIN = stGateForwardProto_ProtoModID_ModID;
const stGateForwardProto_ProtoModID stGateForwardProto_ProtoModID_ProtoModID_MAX = stGateForwardProto_ProtoModID_ModID;
const int stGateForwardProto_ProtoModID_ProtoModID_ARRAYSIZE = stGateForwardProto_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGateForwardProto_ProtoModID_descriptor();
inline const ::std::string& stGateForwardProto_ProtoModID_Name(stGateForwardProto_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGateForwardProto_ProtoModID_descriptor(), value);
}
inline bool stGateForwardProto_ProtoModID_Parse(
    const ::std::string& name, stGateForwardProto_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGateForwardProto_ProtoModID>(
    stGateForwardProto_ProtoModID_descriptor(), name, value);
}
enum stGateForwardProto_ProtoFunID {
  stGateForwardProto_ProtoFunID_FunID = 6
};
bool stGateForwardProto_ProtoFunID_IsValid(int value);
const stGateForwardProto_ProtoFunID stGateForwardProto_ProtoFunID_ProtoFunID_MIN = stGateForwardProto_ProtoFunID_FunID;
const stGateForwardProto_ProtoFunID stGateForwardProto_ProtoFunID_ProtoFunID_MAX = stGateForwardProto_ProtoFunID_FunID;
const int stGateForwardProto_ProtoFunID_ProtoFunID_ARRAYSIZE = stGateForwardProto_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGateForwardProto_ProtoFunID_descriptor();
inline const ::std::string& stGateForwardProto_ProtoFunID_Name(stGateForwardProto_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGateForwardProto_ProtoFunID_descriptor(), value);
}
inline bool stGateForwardProto_ProtoFunID_Parse(
    const ::std::string& name, stGateForwardProto_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGateForwardProto_ProtoFunID>(
    stGateForwardProto_ProtoFunID_descriptor(), name, value);
}
enum stForwardProto2Me_ProtoModID {
  stForwardProto2Me_ProtoModID_ModID = 2
};
bool stForwardProto2Me_ProtoModID_IsValid(int value);
const stForwardProto2Me_ProtoModID stForwardProto2Me_ProtoModID_ProtoModID_MIN = stForwardProto2Me_ProtoModID_ModID;
const stForwardProto2Me_ProtoModID stForwardProto2Me_ProtoModID_ProtoModID_MAX = stForwardProto2Me_ProtoModID_ModID;
const int stForwardProto2Me_ProtoModID_ProtoModID_ARRAYSIZE = stForwardProto2Me_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stForwardProto2Me_ProtoModID_descriptor();
inline const ::std::string& stForwardProto2Me_ProtoModID_Name(stForwardProto2Me_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stForwardProto2Me_ProtoModID_descriptor(), value);
}
inline bool stForwardProto2Me_ProtoModID_Parse(
    const ::std::string& name, stForwardProto2Me_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stForwardProto2Me_ProtoModID>(
    stForwardProto2Me_ProtoModID_descriptor(), name, value);
}
enum stForwardProto2Me_ProtoFunID {
  stForwardProto2Me_ProtoFunID_FunID = 7
};
bool stForwardProto2Me_ProtoFunID_IsValid(int value);
const stForwardProto2Me_ProtoFunID stForwardProto2Me_ProtoFunID_ProtoFunID_MIN = stForwardProto2Me_ProtoFunID_FunID;
const stForwardProto2Me_ProtoFunID stForwardProto2Me_ProtoFunID_ProtoFunID_MAX = stForwardProto2Me_ProtoFunID_FunID;
const int stForwardProto2Me_ProtoFunID_ProtoFunID_ARRAYSIZE = stForwardProto2Me_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stForwardProto2Me_ProtoFunID_descriptor();
inline const ::std::string& stForwardProto2Me_ProtoFunID_Name(stForwardProto2Me_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stForwardProto2Me_ProtoFunID_descriptor(), value);
}
inline bool stForwardProto2Me_ProtoFunID_Parse(
    const ::std::string& name, stForwardProto2Me_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stForwardProto2Me_ProtoFunID>(
    stForwardProto2Me_ProtoFunID_descriptor(), name, value);
}
enum stBroadcastProto2AllUser_ProtoModID {
  stBroadcastProto2AllUser_ProtoModID_ModID = 2
};
bool stBroadcastProto2AllUser_ProtoModID_IsValid(int value);
const stBroadcastProto2AllUser_ProtoModID stBroadcastProto2AllUser_ProtoModID_ProtoModID_MIN = stBroadcastProto2AllUser_ProtoModID_ModID;
const stBroadcastProto2AllUser_ProtoModID stBroadcastProto2AllUser_ProtoModID_ProtoModID_MAX = stBroadcastProto2AllUser_ProtoModID_ModID;
const int stBroadcastProto2AllUser_ProtoModID_ProtoModID_ARRAYSIZE = stBroadcastProto2AllUser_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadcastProto2AllUser_ProtoModID_descriptor();
inline const ::std::string& stBroadcastProto2AllUser_ProtoModID_Name(stBroadcastProto2AllUser_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadcastProto2AllUser_ProtoModID_descriptor(), value);
}
inline bool stBroadcastProto2AllUser_ProtoModID_Parse(
    const ::std::string& name, stBroadcastProto2AllUser_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadcastProto2AllUser_ProtoModID>(
    stBroadcastProto2AllUser_ProtoModID_descriptor(), name, value);
}
enum stBroadcastProto2AllUser_ProtoFunID {
  stBroadcastProto2AllUser_ProtoFunID_FunID = 8
};
bool stBroadcastProto2AllUser_ProtoFunID_IsValid(int value);
const stBroadcastProto2AllUser_ProtoFunID stBroadcastProto2AllUser_ProtoFunID_ProtoFunID_MIN = stBroadcastProto2AllUser_ProtoFunID_FunID;
const stBroadcastProto2AllUser_ProtoFunID stBroadcastProto2AllUser_ProtoFunID_ProtoFunID_MAX = stBroadcastProto2AllUser_ProtoFunID_FunID;
const int stBroadcastProto2AllUser_ProtoFunID_ProtoFunID_ARRAYSIZE = stBroadcastProto2AllUser_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadcastProto2AllUser_ProtoFunID_descriptor();
inline const ::std::string& stBroadcastProto2AllUser_ProtoFunID_Name(stBroadcastProto2AllUser_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadcastProto2AllUser_ProtoFunID_descriptor(), value);
}
inline bool stBroadcastProto2AllUser_ProtoFunID_Parse(
    const ::std::string& name, stBroadcastProto2AllUser_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadcastProto2AllUser_ProtoFunID>(
    stBroadcastProto2AllUser_ProtoFunID_descriptor(), name, value);
}
enum stLoginGlobalFail_FailReason {
  stLoginGlobalFail_FailReason_HAS_LOGIN_IN = 1,
  stLoginGlobalFail_FailReason_CREATE_FAIL = 2,
  stLoginGlobalFail_FailReason_LOAD_DATA_FAIL = 3,
  stLoginGlobalFail_FailReason_FORBID_LOGIN = 4,
  stLoginGlobalFail_FailReason_OTHER = 5
};
bool stLoginGlobalFail_FailReason_IsValid(int value);
const stLoginGlobalFail_FailReason stLoginGlobalFail_FailReason_FailReason_MIN = stLoginGlobalFail_FailReason_HAS_LOGIN_IN;
const stLoginGlobalFail_FailReason stLoginGlobalFail_FailReason_FailReason_MAX = stLoginGlobalFail_FailReason_OTHER;
const int stLoginGlobalFail_FailReason_FailReason_ARRAYSIZE = stLoginGlobalFail_FailReason_FailReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLoginGlobalFail_FailReason_descriptor();
inline const ::std::string& stLoginGlobalFail_FailReason_Name(stLoginGlobalFail_FailReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLoginGlobalFail_FailReason_descriptor(), value);
}
inline bool stLoginGlobalFail_FailReason_Parse(
    const ::std::string& name, stLoginGlobalFail_FailReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLoginGlobalFail_FailReason>(
    stLoginGlobalFail_FailReason_descriptor(), name, value);
}
enum stLoginGlobalFail_ProtoModID {
  stLoginGlobalFail_ProtoModID_ModID = 2
};
bool stLoginGlobalFail_ProtoModID_IsValid(int value);
const stLoginGlobalFail_ProtoModID stLoginGlobalFail_ProtoModID_ProtoModID_MIN = stLoginGlobalFail_ProtoModID_ModID;
const stLoginGlobalFail_ProtoModID stLoginGlobalFail_ProtoModID_ProtoModID_MAX = stLoginGlobalFail_ProtoModID_ModID;
const int stLoginGlobalFail_ProtoModID_ProtoModID_ARRAYSIZE = stLoginGlobalFail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLoginGlobalFail_ProtoModID_descriptor();
inline const ::std::string& stLoginGlobalFail_ProtoModID_Name(stLoginGlobalFail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLoginGlobalFail_ProtoModID_descriptor(), value);
}
inline bool stLoginGlobalFail_ProtoModID_Parse(
    const ::std::string& name, stLoginGlobalFail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLoginGlobalFail_ProtoModID>(
    stLoginGlobalFail_ProtoModID_descriptor(), name, value);
}
enum stLoginGlobalFail_ProtoFunID {
  stLoginGlobalFail_ProtoFunID_FunID = 9
};
bool stLoginGlobalFail_ProtoFunID_IsValid(int value);
const stLoginGlobalFail_ProtoFunID stLoginGlobalFail_ProtoFunID_ProtoFunID_MIN = stLoginGlobalFail_ProtoFunID_FunID;
const stLoginGlobalFail_ProtoFunID stLoginGlobalFail_ProtoFunID_ProtoFunID_MAX = stLoginGlobalFail_ProtoFunID_FunID;
const int stLoginGlobalFail_ProtoFunID_ProtoFunID_ARRAYSIZE = stLoginGlobalFail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLoginGlobalFail_ProtoFunID_descriptor();
inline const ::std::string& stLoginGlobalFail_ProtoFunID_Name(stLoginGlobalFail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLoginGlobalFail_ProtoFunID_descriptor(), value);
}
inline bool stLoginGlobalFail_ProtoFunID_Parse(
    const ::std::string& name, stLoginGlobalFail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLoginGlobalFail_ProtoFunID>(
    stLoginGlobalFail_ProtoFunID_descriptor(), name, value);
}
enum stNotifyLoginOut_ProtoModID {
  stNotifyLoginOut_ProtoModID_ModID = 2
};
bool stNotifyLoginOut_ProtoModID_IsValid(int value);
const stNotifyLoginOut_ProtoModID stNotifyLoginOut_ProtoModID_ProtoModID_MIN = stNotifyLoginOut_ProtoModID_ModID;
const stNotifyLoginOut_ProtoModID stNotifyLoginOut_ProtoModID_ProtoModID_MAX = stNotifyLoginOut_ProtoModID_ModID;
const int stNotifyLoginOut_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyLoginOut_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyLoginOut_ProtoModID_descriptor();
inline const ::std::string& stNotifyLoginOut_ProtoModID_Name(stNotifyLoginOut_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyLoginOut_ProtoModID_descriptor(), value);
}
inline bool stNotifyLoginOut_ProtoModID_Parse(
    const ::std::string& name, stNotifyLoginOut_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyLoginOut_ProtoModID>(
    stNotifyLoginOut_ProtoModID_descriptor(), name, value);
}
enum stNotifyLoginOut_ProtoFunID {
  stNotifyLoginOut_ProtoFunID_FunID = 10
};
bool stNotifyLoginOut_ProtoFunID_IsValid(int value);
const stNotifyLoginOut_ProtoFunID stNotifyLoginOut_ProtoFunID_ProtoFunID_MIN = stNotifyLoginOut_ProtoFunID_FunID;
const stNotifyLoginOut_ProtoFunID stNotifyLoginOut_ProtoFunID_ProtoFunID_MAX = stNotifyLoginOut_ProtoFunID_FunID;
const int stNotifyLoginOut_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyLoginOut_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyLoginOut_ProtoFunID_descriptor();
inline const ::std::string& stNotifyLoginOut_ProtoFunID_Name(stNotifyLoginOut_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyLoginOut_ProtoFunID_descriptor(), value);
}
inline bool stNotifyLoginOut_ProtoFunID_Parse(
    const ::std::string& name, stNotifyLoginOut_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyLoginOut_ProtoFunID>(
    stNotifyLoginOut_ProtoFunID_descriptor(), name, value);
}
enum stGameSvrStartUp_ProtoModID {
  stGameSvrStartUp_ProtoModID_ModID = 2
};
bool stGameSvrStartUp_ProtoModID_IsValid(int value);
const stGameSvrStartUp_ProtoModID stGameSvrStartUp_ProtoModID_ProtoModID_MIN = stGameSvrStartUp_ProtoModID_ModID;
const stGameSvrStartUp_ProtoModID stGameSvrStartUp_ProtoModID_ProtoModID_MAX = stGameSvrStartUp_ProtoModID_ModID;
const int stGameSvrStartUp_ProtoModID_ProtoModID_ARRAYSIZE = stGameSvrStartUp_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGameSvrStartUp_ProtoModID_descriptor();
inline const ::std::string& stGameSvrStartUp_ProtoModID_Name(stGameSvrStartUp_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGameSvrStartUp_ProtoModID_descriptor(), value);
}
inline bool stGameSvrStartUp_ProtoModID_Parse(
    const ::std::string& name, stGameSvrStartUp_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGameSvrStartUp_ProtoModID>(
    stGameSvrStartUp_ProtoModID_descriptor(), name, value);
}
enum stGameSvrStartUp_ProtoFunID {
  stGameSvrStartUp_ProtoFunID_FunID = 10
};
bool stGameSvrStartUp_ProtoFunID_IsValid(int value);
const stGameSvrStartUp_ProtoFunID stGameSvrStartUp_ProtoFunID_ProtoFunID_MIN = stGameSvrStartUp_ProtoFunID_FunID;
const stGameSvrStartUp_ProtoFunID stGameSvrStartUp_ProtoFunID_ProtoFunID_MAX = stGameSvrStartUp_ProtoFunID_FunID;
const int stGameSvrStartUp_ProtoFunID_ProtoFunID_ARRAYSIZE = stGameSvrStartUp_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGameSvrStartUp_ProtoFunID_descriptor();
inline const ::std::string& stGameSvrStartUp_ProtoFunID_Name(stGameSvrStartUp_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGameSvrStartUp_ProtoFunID_descriptor(), value);
}
inline bool stGameSvrStartUp_ProtoFunID_Parse(
    const ::std::string& name, stGameSvrStartUp_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGameSvrStartUp_ProtoFunID>(
    stGameSvrStartUp_ProtoFunID_descriptor(), name, value);
}
enum stKillUserOut_ProtoModID {
  stKillUserOut_ProtoModID_ModID = 2
};
bool stKillUserOut_ProtoModID_IsValid(int value);
const stKillUserOut_ProtoModID stKillUserOut_ProtoModID_ProtoModID_MIN = stKillUserOut_ProtoModID_ModID;
const stKillUserOut_ProtoModID stKillUserOut_ProtoModID_ProtoModID_MAX = stKillUserOut_ProtoModID_ModID;
const int stKillUserOut_ProtoModID_ProtoModID_ARRAYSIZE = stKillUserOut_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillUserOut_ProtoModID_descriptor();
inline const ::std::string& stKillUserOut_ProtoModID_Name(stKillUserOut_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillUserOut_ProtoModID_descriptor(), value);
}
inline bool stKillUserOut_ProtoModID_Parse(
    const ::std::string& name, stKillUserOut_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillUserOut_ProtoModID>(
    stKillUserOut_ProtoModID_descriptor(), name, value);
}
enum stKillUserOut_ProtoFunID {
  stKillUserOut_ProtoFunID_FunID = 11
};
bool stKillUserOut_ProtoFunID_IsValid(int value);
const stKillUserOut_ProtoFunID stKillUserOut_ProtoFunID_ProtoFunID_MIN = stKillUserOut_ProtoFunID_FunID;
const stKillUserOut_ProtoFunID stKillUserOut_ProtoFunID_ProtoFunID_MAX = stKillUserOut_ProtoFunID_FunID;
const int stKillUserOut_ProtoFunID_ProtoFunID_ARRAYSIZE = stKillUserOut_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillUserOut_ProtoFunID_descriptor();
inline const ::std::string& stKillUserOut_ProtoFunID_Name(stKillUserOut_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillUserOut_ProtoFunID_descriptor(), value);
}
inline bool stKillUserOut_ProtoFunID_Parse(
    const ::std::string& name, stKillUserOut_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillUserOut_ProtoFunID>(
    stKillUserOut_ProtoFunID_descriptor(), name, value);
}
enum stNotifyGateSvrCfg_ProtoModID {
  stNotifyGateSvrCfg_ProtoModID_ModID = 2
};
bool stNotifyGateSvrCfg_ProtoModID_IsValid(int value);
const stNotifyGateSvrCfg_ProtoModID stNotifyGateSvrCfg_ProtoModID_ProtoModID_MIN = stNotifyGateSvrCfg_ProtoModID_ModID;
const stNotifyGateSvrCfg_ProtoModID stNotifyGateSvrCfg_ProtoModID_ProtoModID_MAX = stNotifyGateSvrCfg_ProtoModID_ModID;
const int stNotifyGateSvrCfg_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyGateSvrCfg_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGateSvrCfg_ProtoModID_descriptor();
inline const ::std::string& stNotifyGateSvrCfg_ProtoModID_Name(stNotifyGateSvrCfg_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGateSvrCfg_ProtoModID_descriptor(), value);
}
inline bool stNotifyGateSvrCfg_ProtoModID_Parse(
    const ::std::string& name, stNotifyGateSvrCfg_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGateSvrCfg_ProtoModID>(
    stNotifyGateSvrCfg_ProtoModID_descriptor(), name, value);
}
enum stNotifyGateSvrCfg_ProtoFunID {
  stNotifyGateSvrCfg_ProtoFunID_FunID = 12
};
bool stNotifyGateSvrCfg_ProtoFunID_IsValid(int value);
const stNotifyGateSvrCfg_ProtoFunID stNotifyGateSvrCfg_ProtoFunID_ProtoFunID_MIN = stNotifyGateSvrCfg_ProtoFunID_FunID;
const stNotifyGateSvrCfg_ProtoFunID stNotifyGateSvrCfg_ProtoFunID_ProtoFunID_MAX = stNotifyGateSvrCfg_ProtoFunID_FunID;
const int stNotifyGateSvrCfg_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyGateSvrCfg_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGateSvrCfg_ProtoFunID_descriptor();
inline const ::std::string& stNotifyGateSvrCfg_ProtoFunID_Name(stNotifyGateSvrCfg_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGateSvrCfg_ProtoFunID_descriptor(), value);
}
inline bool stNotifyGateSvrCfg_ProtoFunID_Parse(
    const ::std::string& name, stNotifyGateSvrCfg_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGateSvrCfg_ProtoFunID>(
    stNotifyGateSvrCfg_ProtoFunID_descriptor(), name, value);
}
enum stReloginGlobal_ProtoModID {
  stReloginGlobal_ProtoModID_ModID = 2
};
bool stReloginGlobal_ProtoModID_IsValid(int value);
const stReloginGlobal_ProtoModID stReloginGlobal_ProtoModID_ProtoModID_MIN = stReloginGlobal_ProtoModID_ModID;
const stReloginGlobal_ProtoModID stReloginGlobal_ProtoModID_ProtoModID_MAX = stReloginGlobal_ProtoModID_ModID;
const int stReloginGlobal_ProtoModID_ProtoModID_ARRAYSIZE = stReloginGlobal_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReloginGlobal_ProtoModID_descriptor();
inline const ::std::string& stReloginGlobal_ProtoModID_Name(stReloginGlobal_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReloginGlobal_ProtoModID_descriptor(), value);
}
inline bool stReloginGlobal_ProtoModID_Parse(
    const ::std::string& name, stReloginGlobal_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReloginGlobal_ProtoModID>(
    stReloginGlobal_ProtoModID_descriptor(), name, value);
}
enum stReloginGlobal_ProtoFunID {
  stReloginGlobal_ProtoFunID_FunID = 13
};
bool stReloginGlobal_ProtoFunID_IsValid(int value);
const stReloginGlobal_ProtoFunID stReloginGlobal_ProtoFunID_ProtoFunID_MIN = stReloginGlobal_ProtoFunID_FunID;
const stReloginGlobal_ProtoFunID stReloginGlobal_ProtoFunID_ProtoFunID_MAX = stReloginGlobal_ProtoFunID_FunID;
const int stReloginGlobal_ProtoFunID_ProtoFunID_ARRAYSIZE = stReloginGlobal_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReloginGlobal_ProtoFunID_descriptor();
inline const ::std::string& stReloginGlobal_ProtoFunID_Name(stReloginGlobal_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReloginGlobal_ProtoFunID_descriptor(), value);
}
inline bool stReloginGlobal_ProtoFunID_Parse(
    const ::std::string& name, stReloginGlobal_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReloginGlobal_ProtoFunID>(
    stReloginGlobal_ProtoFunID_descriptor(), name, value);
}
enum stPlayerAutoConnect_ProtoModID {
  stPlayerAutoConnect_ProtoModID_ModID = 2
};
bool stPlayerAutoConnect_ProtoModID_IsValid(int value);
const stPlayerAutoConnect_ProtoModID stPlayerAutoConnect_ProtoModID_ProtoModID_MIN = stPlayerAutoConnect_ProtoModID_ModID;
const stPlayerAutoConnect_ProtoModID stPlayerAutoConnect_ProtoModID_ProtoModID_MAX = stPlayerAutoConnect_ProtoModID_ModID;
const int stPlayerAutoConnect_ProtoModID_ProtoModID_ARRAYSIZE = stPlayerAutoConnect_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPlayerAutoConnect_ProtoModID_descriptor();
inline const ::std::string& stPlayerAutoConnect_ProtoModID_Name(stPlayerAutoConnect_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPlayerAutoConnect_ProtoModID_descriptor(), value);
}
inline bool stPlayerAutoConnect_ProtoModID_Parse(
    const ::std::string& name, stPlayerAutoConnect_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPlayerAutoConnect_ProtoModID>(
    stPlayerAutoConnect_ProtoModID_descriptor(), name, value);
}
enum stPlayerAutoConnect_ProtoFunID {
  stPlayerAutoConnect_ProtoFunID_FunID = 14
};
bool stPlayerAutoConnect_ProtoFunID_IsValid(int value);
const stPlayerAutoConnect_ProtoFunID stPlayerAutoConnect_ProtoFunID_ProtoFunID_MIN = stPlayerAutoConnect_ProtoFunID_FunID;
const stPlayerAutoConnect_ProtoFunID stPlayerAutoConnect_ProtoFunID_ProtoFunID_MAX = stPlayerAutoConnect_ProtoFunID_FunID;
const int stPlayerAutoConnect_ProtoFunID_ProtoFunID_ARRAYSIZE = stPlayerAutoConnect_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPlayerAutoConnect_ProtoFunID_descriptor();
inline const ::std::string& stPlayerAutoConnect_ProtoFunID_Name(stPlayerAutoConnect_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPlayerAutoConnect_ProtoFunID_descriptor(), value);
}
inline bool stPlayerAutoConnect_ProtoFunID_Parse(
    const ::std::string& name, stPlayerAutoConnect_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPlayerAutoConnect_ProtoFunID>(
    stPlayerAutoConnect_ProtoFunID_descriptor(), name, value);
}
enum stClientLostConnect_ProtoModID {
  stClientLostConnect_ProtoModID_ModID = 2
};
bool stClientLostConnect_ProtoModID_IsValid(int value);
const stClientLostConnect_ProtoModID stClientLostConnect_ProtoModID_ProtoModID_MIN = stClientLostConnect_ProtoModID_ModID;
const stClientLostConnect_ProtoModID stClientLostConnect_ProtoModID_ProtoModID_MAX = stClientLostConnect_ProtoModID_ModID;
const int stClientLostConnect_ProtoModID_ProtoModID_ARRAYSIZE = stClientLostConnect_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stClientLostConnect_ProtoModID_descriptor();
inline const ::std::string& stClientLostConnect_ProtoModID_Name(stClientLostConnect_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stClientLostConnect_ProtoModID_descriptor(), value);
}
inline bool stClientLostConnect_ProtoModID_Parse(
    const ::std::string& name, stClientLostConnect_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stClientLostConnect_ProtoModID>(
    stClientLostConnect_ProtoModID_descriptor(), name, value);
}
enum stClientLostConnect_ProtoFunID {
  stClientLostConnect_ProtoFunID_FunID = 15
};
bool stClientLostConnect_ProtoFunID_IsValid(int value);
const stClientLostConnect_ProtoFunID stClientLostConnect_ProtoFunID_ProtoFunID_MIN = stClientLostConnect_ProtoFunID_FunID;
const stClientLostConnect_ProtoFunID stClientLostConnect_ProtoFunID_ProtoFunID_MAX = stClientLostConnect_ProtoFunID_FunID;
const int stClientLostConnect_ProtoFunID_ProtoFunID_ARRAYSIZE = stClientLostConnect_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stClientLostConnect_ProtoFunID_descriptor();
inline const ::std::string& stClientLostConnect_ProtoFunID_Name(stClientLostConnect_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stClientLostConnect_ProtoFunID_descriptor(), value);
}
inline bool stClientLostConnect_ProtoFunID_Parse(
    const ::std::string& name, stClientLostConnect_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stClientLostConnect_ProtoFunID>(
    stClientLostConnect_ProtoFunID_descriptor(), name, value);
}
enum stAskIsNewAccount_ProtoModID {
  stAskIsNewAccount_ProtoModID_ModID = 2
};
bool stAskIsNewAccount_ProtoModID_IsValid(int value);
const stAskIsNewAccount_ProtoModID stAskIsNewAccount_ProtoModID_ProtoModID_MIN = stAskIsNewAccount_ProtoModID_ModID;
const stAskIsNewAccount_ProtoModID stAskIsNewAccount_ProtoModID_ProtoModID_MAX = stAskIsNewAccount_ProtoModID_ModID;
const int stAskIsNewAccount_ProtoModID_ProtoModID_ARRAYSIZE = stAskIsNewAccount_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAskIsNewAccount_ProtoModID_descriptor();
inline const ::std::string& stAskIsNewAccount_ProtoModID_Name(stAskIsNewAccount_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAskIsNewAccount_ProtoModID_descriptor(), value);
}
inline bool stAskIsNewAccount_ProtoModID_Parse(
    const ::std::string& name, stAskIsNewAccount_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAskIsNewAccount_ProtoModID>(
    stAskIsNewAccount_ProtoModID_descriptor(), name, value);
}
enum stAskIsNewAccount_ProtoFunID {
  stAskIsNewAccount_ProtoFunID_FunID = 16
};
bool stAskIsNewAccount_ProtoFunID_IsValid(int value);
const stAskIsNewAccount_ProtoFunID stAskIsNewAccount_ProtoFunID_ProtoFunID_MIN = stAskIsNewAccount_ProtoFunID_FunID;
const stAskIsNewAccount_ProtoFunID stAskIsNewAccount_ProtoFunID_ProtoFunID_MAX = stAskIsNewAccount_ProtoFunID_FunID;
const int stAskIsNewAccount_ProtoFunID_ProtoFunID_ARRAYSIZE = stAskIsNewAccount_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAskIsNewAccount_ProtoFunID_descriptor();
inline const ::std::string& stAskIsNewAccount_ProtoFunID_Name(stAskIsNewAccount_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAskIsNewAccount_ProtoFunID_descriptor(), value);
}
inline bool stAskIsNewAccount_ProtoFunID_Parse(
    const ::std::string& name, stAskIsNewAccount_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAskIsNewAccount_ProtoFunID>(
    stAskIsNewAccount_ProtoFunID_descriptor(), name, value);
}
enum stIsNewAccount_ProtoModID {
  stIsNewAccount_ProtoModID_ModID = 2
};
bool stIsNewAccount_ProtoModID_IsValid(int value);
const stIsNewAccount_ProtoModID stIsNewAccount_ProtoModID_ProtoModID_MIN = stIsNewAccount_ProtoModID_ModID;
const stIsNewAccount_ProtoModID stIsNewAccount_ProtoModID_ProtoModID_MAX = stIsNewAccount_ProtoModID_ModID;
const int stIsNewAccount_ProtoModID_ProtoModID_ARRAYSIZE = stIsNewAccount_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stIsNewAccount_ProtoModID_descriptor();
inline const ::std::string& stIsNewAccount_ProtoModID_Name(stIsNewAccount_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stIsNewAccount_ProtoModID_descriptor(), value);
}
inline bool stIsNewAccount_ProtoModID_Parse(
    const ::std::string& name, stIsNewAccount_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stIsNewAccount_ProtoModID>(
    stIsNewAccount_ProtoModID_descriptor(), name, value);
}
enum stIsNewAccount_ProtoFunID {
  stIsNewAccount_ProtoFunID_FunID = 17
};
bool stIsNewAccount_ProtoFunID_IsValid(int value);
const stIsNewAccount_ProtoFunID stIsNewAccount_ProtoFunID_ProtoFunID_MIN = stIsNewAccount_ProtoFunID_FunID;
const stIsNewAccount_ProtoFunID stIsNewAccount_ProtoFunID_ProtoFunID_MAX = stIsNewAccount_ProtoFunID_FunID;
const int stIsNewAccount_ProtoFunID_ProtoFunID_ARRAYSIZE = stIsNewAccount_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stIsNewAccount_ProtoFunID_descriptor();
inline const ::std::string& stIsNewAccount_ProtoFunID_Name(stIsNewAccount_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stIsNewAccount_ProtoFunID_descriptor(), value);
}
inline bool stIsNewAccount_ProtoFunID_Parse(
    const ::std::string& name, stIsNewAccount_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stIsNewAccount_ProtoFunID>(
    stIsNewAccount_ProtoFunID_descriptor(), name, value);
}
enum stSaveRoleInfo_ProtoModID {
  stSaveRoleInfo_ProtoModID_ModID = 3
};
bool stSaveRoleInfo_ProtoModID_IsValid(int value);
const stSaveRoleInfo_ProtoModID stSaveRoleInfo_ProtoModID_ProtoModID_MIN = stSaveRoleInfo_ProtoModID_ModID;
const stSaveRoleInfo_ProtoModID stSaveRoleInfo_ProtoModID_ProtoModID_MAX = stSaveRoleInfo_ProtoModID_ModID;
const int stSaveRoleInfo_ProtoModID_ProtoModID_ARRAYSIZE = stSaveRoleInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSaveRoleInfo_ProtoModID_descriptor();
inline const ::std::string& stSaveRoleInfo_ProtoModID_Name(stSaveRoleInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSaveRoleInfo_ProtoModID_descriptor(), value);
}
inline bool stSaveRoleInfo_ProtoModID_Parse(
    const ::std::string& name, stSaveRoleInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSaveRoleInfo_ProtoModID>(
    stSaveRoleInfo_ProtoModID_descriptor(), name, value);
}
enum stSaveRoleInfo_ProtoFunID {
  stSaveRoleInfo_ProtoFunID_FunID = 1
};
bool stSaveRoleInfo_ProtoFunID_IsValid(int value);
const stSaveRoleInfo_ProtoFunID stSaveRoleInfo_ProtoFunID_ProtoFunID_MIN = stSaveRoleInfo_ProtoFunID_FunID;
const stSaveRoleInfo_ProtoFunID stSaveRoleInfo_ProtoFunID_ProtoFunID_MAX = stSaveRoleInfo_ProtoFunID_FunID;
const int stSaveRoleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stSaveRoleInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSaveRoleInfo_ProtoFunID_descriptor();
inline const ::std::string& stSaveRoleInfo_ProtoFunID_Name(stSaveRoleInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSaveRoleInfo_ProtoFunID_descriptor(), value);
}
inline bool stSaveRoleInfo_ProtoFunID_Parse(
    const ::std::string& name, stSaveRoleInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSaveRoleInfo_ProtoFunID>(
    stSaveRoleInfo_ProtoFunID_descriptor(), name, value);
}
enum stRetRoleInfo_ProtoModID {
  stRetRoleInfo_ProtoModID_ModID = 3
};
bool stRetRoleInfo_ProtoModID_IsValid(int value);
const stRetRoleInfo_ProtoModID stRetRoleInfo_ProtoModID_ProtoModID_MIN = stRetRoleInfo_ProtoModID_ModID;
const stRetRoleInfo_ProtoModID stRetRoleInfo_ProtoModID_ProtoModID_MAX = stRetRoleInfo_ProtoModID_ModID;
const int stRetRoleInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetRoleInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRoleInfo_ProtoModID_descriptor();
inline const ::std::string& stRetRoleInfo_ProtoModID_Name(stRetRoleInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRoleInfo_ProtoModID_descriptor(), value);
}
inline bool stRetRoleInfo_ProtoModID_Parse(
    const ::std::string& name, stRetRoleInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRoleInfo_ProtoModID>(
    stRetRoleInfo_ProtoModID_descriptor(), name, value);
}
enum stRetRoleInfo_ProtoFunID {
  stRetRoleInfo_ProtoFunID_FunID = 2
};
bool stRetRoleInfo_ProtoFunID_IsValid(int value);
const stRetRoleInfo_ProtoFunID stRetRoleInfo_ProtoFunID_ProtoFunID_MIN = stRetRoleInfo_ProtoFunID_FunID;
const stRetRoleInfo_ProtoFunID stRetRoleInfo_ProtoFunID_ProtoFunID_MAX = stRetRoleInfo_ProtoFunID_FunID;
const int stRetRoleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRoleInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRoleInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetRoleInfo_ProtoFunID_Name(stRetRoleInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRoleInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetRoleInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetRoleInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRoleInfo_ProtoFunID>(
    stRetRoleInfo_ProtoFunID_descriptor(), name, value);
}
enum stUserEnterMapSuccess_ProtoModID {
  stUserEnterMapSuccess_ProtoModID_ModID = 3
};
bool stUserEnterMapSuccess_ProtoModID_IsValid(int value);
const stUserEnterMapSuccess_ProtoModID stUserEnterMapSuccess_ProtoModID_ProtoModID_MIN = stUserEnterMapSuccess_ProtoModID_ModID;
const stUserEnterMapSuccess_ProtoModID stUserEnterMapSuccess_ProtoModID_ProtoModID_MAX = stUserEnterMapSuccess_ProtoModID_ModID;
const int stUserEnterMapSuccess_ProtoModID_ProtoModID_ARRAYSIZE = stUserEnterMapSuccess_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserEnterMapSuccess_ProtoModID_descriptor();
inline const ::std::string& stUserEnterMapSuccess_ProtoModID_Name(stUserEnterMapSuccess_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserEnterMapSuccess_ProtoModID_descriptor(), value);
}
inline bool stUserEnterMapSuccess_ProtoModID_Parse(
    const ::std::string& name, stUserEnterMapSuccess_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserEnterMapSuccess_ProtoModID>(
    stUserEnterMapSuccess_ProtoModID_descriptor(), name, value);
}
enum stUserEnterMapSuccess_ProtoFunID {
  stUserEnterMapSuccess_ProtoFunID_FunID = 3
};
bool stUserEnterMapSuccess_ProtoFunID_IsValid(int value);
const stUserEnterMapSuccess_ProtoFunID stUserEnterMapSuccess_ProtoFunID_ProtoFunID_MIN = stUserEnterMapSuccess_ProtoFunID_FunID;
const stUserEnterMapSuccess_ProtoFunID stUserEnterMapSuccess_ProtoFunID_ProtoFunID_MAX = stUserEnterMapSuccess_ProtoFunID_FunID;
const int stUserEnterMapSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserEnterMapSuccess_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserEnterMapSuccess_ProtoFunID_descriptor();
inline const ::std::string& stUserEnterMapSuccess_ProtoFunID_Name(stUserEnterMapSuccess_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserEnterMapSuccess_ProtoFunID_descriptor(), value);
}
inline bool stUserEnterMapSuccess_ProtoFunID_Parse(
    const ::std::string& name, stUserEnterMapSuccess_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserEnterMapSuccess_ProtoFunID>(
    stUserEnterMapSuccess_ProtoFunID_descriptor(), name, value);
}
enum stUserRecharge_ProtoModID {
  stUserRecharge_ProtoModID_ModID = 3
};
bool stUserRecharge_ProtoModID_IsValid(int value);
const stUserRecharge_ProtoModID stUserRecharge_ProtoModID_ProtoModID_MIN = stUserRecharge_ProtoModID_ModID;
const stUserRecharge_ProtoModID stUserRecharge_ProtoModID_ProtoModID_MAX = stUserRecharge_ProtoModID_ModID;
const int stUserRecharge_ProtoModID_ProtoModID_ARRAYSIZE = stUserRecharge_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserRecharge_ProtoModID_descriptor();
inline const ::std::string& stUserRecharge_ProtoModID_Name(stUserRecharge_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserRecharge_ProtoModID_descriptor(), value);
}
inline bool stUserRecharge_ProtoModID_Parse(
    const ::std::string& name, stUserRecharge_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserRecharge_ProtoModID>(
    stUserRecharge_ProtoModID_descriptor(), name, value);
}
enum stUserRecharge_ProtoFunID {
  stUserRecharge_ProtoFunID_FunID = 4
};
bool stUserRecharge_ProtoFunID_IsValid(int value);
const stUserRecharge_ProtoFunID stUserRecharge_ProtoFunID_ProtoFunID_MIN = stUserRecharge_ProtoFunID_FunID;
const stUserRecharge_ProtoFunID stUserRecharge_ProtoFunID_ProtoFunID_MAX = stUserRecharge_ProtoFunID_FunID;
const int stUserRecharge_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserRecharge_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserRecharge_ProtoFunID_descriptor();
inline const ::std::string& stUserRecharge_ProtoFunID_Name(stUserRecharge_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserRecharge_ProtoFunID_descriptor(), value);
}
inline bool stUserRecharge_ProtoFunID_Parse(
    const ::std::string& name, stUserRecharge_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserRecharge_ProtoFunID>(
    stUserRecharge_ProtoFunID_descriptor(), name, value);
}
enum stProcessGM_ProtoModID {
  stProcessGM_ProtoModID_ModID = 3
};
bool stProcessGM_ProtoModID_IsValid(int value);
const stProcessGM_ProtoModID stProcessGM_ProtoModID_ProtoModID_MIN = stProcessGM_ProtoModID_ModID;
const stProcessGM_ProtoModID stProcessGM_ProtoModID_ProtoModID_MAX = stProcessGM_ProtoModID_ModID;
const int stProcessGM_ProtoModID_ProtoModID_ARRAYSIZE = stProcessGM_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stProcessGM_ProtoModID_descriptor();
inline const ::std::string& stProcessGM_ProtoModID_Name(stProcessGM_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stProcessGM_ProtoModID_descriptor(), value);
}
inline bool stProcessGM_ProtoModID_Parse(
    const ::std::string& name, stProcessGM_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stProcessGM_ProtoModID>(
    stProcessGM_ProtoModID_descriptor(), name, value);
}
enum stProcessGM_ProtoFunID {
  stProcessGM_ProtoFunID_FunID = 5
};
bool stProcessGM_ProtoFunID_IsValid(int value);
const stProcessGM_ProtoFunID stProcessGM_ProtoFunID_ProtoFunID_MIN = stProcessGM_ProtoFunID_FunID;
const stProcessGM_ProtoFunID stProcessGM_ProtoFunID_ProtoFunID_MAX = stProcessGM_ProtoFunID_FunID;
const int stProcessGM_ProtoFunID_ProtoFunID_ARRAYSIZE = stProcessGM_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stProcessGM_ProtoFunID_descriptor();
inline const ::std::string& stProcessGM_ProtoFunID_Name(stProcessGM_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stProcessGM_ProtoFunID_descriptor(), value);
}
inline bool stProcessGM_ProtoFunID_Parse(
    const ::std::string& name, stProcessGM_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stProcessGM_ProtoFunID>(
    stProcessGM_ProtoFunID_descriptor(), name, value);
}
enum stSynFetchLilianNum_ProtoModID {
  stSynFetchLilianNum_ProtoModID_ModID = 3
};
bool stSynFetchLilianNum_ProtoModID_IsValid(int value);
const stSynFetchLilianNum_ProtoModID stSynFetchLilianNum_ProtoModID_ProtoModID_MIN = stSynFetchLilianNum_ProtoModID_ModID;
const stSynFetchLilianNum_ProtoModID stSynFetchLilianNum_ProtoModID_ProtoModID_MAX = stSynFetchLilianNum_ProtoModID_ModID;
const int stSynFetchLilianNum_ProtoModID_ProtoModID_ARRAYSIZE = stSynFetchLilianNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynFetchLilianNum_ProtoModID_descriptor();
inline const ::std::string& stSynFetchLilianNum_ProtoModID_Name(stSynFetchLilianNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynFetchLilianNum_ProtoModID_descriptor(), value);
}
inline bool stSynFetchLilianNum_ProtoModID_Parse(
    const ::std::string& name, stSynFetchLilianNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynFetchLilianNum_ProtoModID>(
    stSynFetchLilianNum_ProtoModID_descriptor(), name, value);
}
enum stSynFetchLilianNum_ProtoFunID {
  stSynFetchLilianNum_ProtoFunID_FunID = 6
};
bool stSynFetchLilianNum_ProtoFunID_IsValid(int value);
const stSynFetchLilianNum_ProtoFunID stSynFetchLilianNum_ProtoFunID_ProtoFunID_MIN = stSynFetchLilianNum_ProtoFunID_FunID;
const stSynFetchLilianNum_ProtoFunID stSynFetchLilianNum_ProtoFunID_ProtoFunID_MAX = stSynFetchLilianNum_ProtoFunID_FunID;
const int stSynFetchLilianNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynFetchLilianNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynFetchLilianNum_ProtoFunID_descriptor();
inline const ::std::string& stSynFetchLilianNum_ProtoFunID_Name(stSynFetchLilianNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynFetchLilianNum_ProtoFunID_descriptor(), value);
}
inline bool stSynFetchLilianNum_ProtoFunID_Parse(
    const ::std::string& name, stSynFetchLilianNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynFetchLilianNum_ProtoFunID>(
    stSynFetchLilianNum_ProtoFunID_descriptor(), name, value);
}
enum stSynGuildID_ProtoModID {
  stSynGuildID_ProtoModID_ModID = 3
};
bool stSynGuildID_ProtoModID_IsValid(int value);
const stSynGuildID_ProtoModID stSynGuildID_ProtoModID_ProtoModID_MIN = stSynGuildID_ProtoModID_ModID;
const stSynGuildID_ProtoModID stSynGuildID_ProtoModID_ProtoModID_MAX = stSynGuildID_ProtoModID_ModID;
const int stSynGuildID_ProtoModID_ProtoModID_ARRAYSIZE = stSynGuildID_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGuildID_ProtoModID_descriptor();
inline const ::std::string& stSynGuildID_ProtoModID_Name(stSynGuildID_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGuildID_ProtoModID_descriptor(), value);
}
inline bool stSynGuildID_ProtoModID_Parse(
    const ::std::string& name, stSynGuildID_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGuildID_ProtoModID>(
    stSynGuildID_ProtoModID_descriptor(), name, value);
}
enum stSynGuildID_ProtoFunID {
  stSynGuildID_ProtoFunID_FunID = 7
};
bool stSynGuildID_ProtoFunID_IsValid(int value);
const stSynGuildID_ProtoFunID stSynGuildID_ProtoFunID_ProtoFunID_MIN = stSynGuildID_ProtoFunID_FunID;
const stSynGuildID_ProtoFunID stSynGuildID_ProtoFunID_ProtoFunID_MAX = stSynGuildID_ProtoFunID_FunID;
const int stSynGuildID_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynGuildID_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGuildID_ProtoFunID_descriptor();
inline const ::std::string& stSynGuildID_ProtoFunID_Name(stSynGuildID_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGuildID_ProtoFunID_descriptor(), value);
}
inline bool stSynGuildID_ProtoFunID_Parse(
    const ::std::string& name, stSynGuildID_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGuildID_ProtoFunID>(
    stSynGuildID_ProtoFunID_descriptor(), name, value);
}
enum stCreateGuild_ProtoModID {
  stCreateGuild_ProtoModID_ModID = 3
};
bool stCreateGuild_ProtoModID_IsValid(int value);
const stCreateGuild_ProtoModID stCreateGuild_ProtoModID_ProtoModID_MIN = stCreateGuild_ProtoModID_ModID;
const stCreateGuild_ProtoModID stCreateGuild_ProtoModID_ProtoModID_MAX = stCreateGuild_ProtoModID_ModID;
const int stCreateGuild_ProtoModID_ProtoModID_ARRAYSIZE = stCreateGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateGuild_ProtoModID_descriptor();
inline const ::std::string& stCreateGuild_ProtoModID_Name(stCreateGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateGuild_ProtoModID_descriptor(), value);
}
inline bool stCreateGuild_ProtoModID_Parse(
    const ::std::string& name, stCreateGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateGuild_ProtoModID>(
    stCreateGuild_ProtoModID_descriptor(), name, value);
}
enum stCreateGuild_ProtoFunID {
  stCreateGuild_ProtoFunID_FunID = 8
};
bool stCreateGuild_ProtoFunID_IsValid(int value);
const stCreateGuild_ProtoFunID stCreateGuild_ProtoFunID_ProtoFunID_MIN = stCreateGuild_ProtoFunID_FunID;
const stCreateGuild_ProtoFunID stCreateGuild_ProtoFunID_ProtoFunID_MAX = stCreateGuild_ProtoFunID_FunID;
const int stCreateGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stCreateGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateGuild_ProtoFunID_descriptor();
inline const ::std::string& stCreateGuild_ProtoFunID_Name(stCreateGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateGuild_ProtoFunID_descriptor(), value);
}
inline bool stCreateGuild_ProtoFunID_Parse(
    const ::std::string& name, stCreateGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateGuild_ProtoFunID>(
    stCreateGuild_ProtoFunID_descriptor(), name, value);
}
enum stCreateGuildDecMoney_ProtoModID {
  stCreateGuildDecMoney_ProtoModID_ModID = 3
};
bool stCreateGuildDecMoney_ProtoModID_IsValid(int value);
const stCreateGuildDecMoney_ProtoModID stCreateGuildDecMoney_ProtoModID_ProtoModID_MIN = stCreateGuildDecMoney_ProtoModID_ModID;
const stCreateGuildDecMoney_ProtoModID stCreateGuildDecMoney_ProtoModID_ProtoModID_MAX = stCreateGuildDecMoney_ProtoModID_ModID;
const int stCreateGuildDecMoney_ProtoModID_ProtoModID_ARRAYSIZE = stCreateGuildDecMoney_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateGuildDecMoney_ProtoModID_descriptor();
inline const ::std::string& stCreateGuildDecMoney_ProtoModID_Name(stCreateGuildDecMoney_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateGuildDecMoney_ProtoModID_descriptor(), value);
}
inline bool stCreateGuildDecMoney_ProtoModID_Parse(
    const ::std::string& name, stCreateGuildDecMoney_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateGuildDecMoney_ProtoModID>(
    stCreateGuildDecMoney_ProtoModID_descriptor(), name, value);
}
enum stCreateGuildDecMoney_ProtoFunID {
  stCreateGuildDecMoney_ProtoFunID_FunID = 9
};
bool stCreateGuildDecMoney_ProtoFunID_IsValid(int value);
const stCreateGuildDecMoney_ProtoFunID stCreateGuildDecMoney_ProtoFunID_ProtoFunID_MIN = stCreateGuildDecMoney_ProtoFunID_FunID;
const stCreateGuildDecMoney_ProtoFunID stCreateGuildDecMoney_ProtoFunID_ProtoFunID_MAX = stCreateGuildDecMoney_ProtoFunID_FunID;
const int stCreateGuildDecMoney_ProtoFunID_ProtoFunID_ARRAYSIZE = stCreateGuildDecMoney_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateGuildDecMoney_ProtoFunID_descriptor();
inline const ::std::string& stCreateGuildDecMoney_ProtoFunID_Name(stCreateGuildDecMoney_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateGuildDecMoney_ProtoFunID_descriptor(), value);
}
inline bool stCreateGuildDecMoney_ProtoFunID_Parse(
    const ::std::string& name, stCreateGuildDecMoney_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateGuildDecMoney_ProtoFunID>(
    stCreateGuildDecMoney_ProtoFunID_descriptor(), name, value);
}
enum stForwardJoininGuild_ProtoModID {
  stForwardJoininGuild_ProtoModID_ModID = 3
};
bool stForwardJoininGuild_ProtoModID_IsValid(int value);
const stForwardJoininGuild_ProtoModID stForwardJoininGuild_ProtoModID_ProtoModID_MIN = stForwardJoininGuild_ProtoModID_ModID;
const stForwardJoininGuild_ProtoModID stForwardJoininGuild_ProtoModID_ProtoModID_MAX = stForwardJoininGuild_ProtoModID_ModID;
const int stForwardJoininGuild_ProtoModID_ProtoModID_ARRAYSIZE = stForwardJoininGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stForwardJoininGuild_ProtoModID_descriptor();
inline const ::std::string& stForwardJoininGuild_ProtoModID_Name(stForwardJoininGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stForwardJoininGuild_ProtoModID_descriptor(), value);
}
inline bool stForwardJoininGuild_ProtoModID_Parse(
    const ::std::string& name, stForwardJoininGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stForwardJoininGuild_ProtoModID>(
    stForwardJoininGuild_ProtoModID_descriptor(), name, value);
}
enum stForwardJoininGuild_ProtoFunID {
  stForwardJoininGuild_ProtoFunID_FunID = 10
};
bool stForwardJoininGuild_ProtoFunID_IsValid(int value);
const stForwardJoininGuild_ProtoFunID stForwardJoininGuild_ProtoFunID_ProtoFunID_MIN = stForwardJoininGuild_ProtoFunID_FunID;
const stForwardJoininGuild_ProtoFunID stForwardJoininGuild_ProtoFunID_ProtoFunID_MAX = stForwardJoininGuild_ProtoFunID_FunID;
const int stForwardJoininGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stForwardJoininGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stForwardJoininGuild_ProtoFunID_descriptor();
inline const ::std::string& stForwardJoininGuild_ProtoFunID_Name(stForwardJoininGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stForwardJoininGuild_ProtoFunID_descriptor(), value);
}
inline bool stForwardJoininGuild_ProtoFunID_Parse(
    const ::std::string& name, stForwardJoininGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stForwardJoininGuild_ProtoFunID>(
    stForwardJoininGuild_ProtoFunID_descriptor(), name, value);
}
enum stAddGuildContribute_ProtoModID {
  stAddGuildContribute_ProtoModID_ModID = 3
};
bool stAddGuildContribute_ProtoModID_IsValid(int value);
const stAddGuildContribute_ProtoModID stAddGuildContribute_ProtoModID_ProtoModID_MIN = stAddGuildContribute_ProtoModID_ModID;
const stAddGuildContribute_ProtoModID stAddGuildContribute_ProtoModID_ProtoModID_MAX = stAddGuildContribute_ProtoModID_ModID;
const int stAddGuildContribute_ProtoModID_ProtoModID_ARRAYSIZE = stAddGuildContribute_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddGuildContribute_ProtoModID_descriptor();
inline const ::std::string& stAddGuildContribute_ProtoModID_Name(stAddGuildContribute_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddGuildContribute_ProtoModID_descriptor(), value);
}
inline bool stAddGuildContribute_ProtoModID_Parse(
    const ::std::string& name, stAddGuildContribute_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddGuildContribute_ProtoModID>(
    stAddGuildContribute_ProtoModID_descriptor(), name, value);
}
enum stAddGuildContribute_ProtoFunID {
  stAddGuildContribute_ProtoFunID_FunID = 11
};
bool stAddGuildContribute_ProtoFunID_IsValid(int value);
const stAddGuildContribute_ProtoFunID stAddGuildContribute_ProtoFunID_ProtoFunID_MIN = stAddGuildContribute_ProtoFunID_FunID;
const stAddGuildContribute_ProtoFunID stAddGuildContribute_ProtoFunID_ProtoFunID_MAX = stAddGuildContribute_ProtoFunID_FunID;
const int stAddGuildContribute_ProtoFunID_ProtoFunID_ARRAYSIZE = stAddGuildContribute_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddGuildContribute_ProtoFunID_descriptor();
inline const ::std::string& stAddGuildContribute_ProtoFunID_Name(stAddGuildContribute_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddGuildContribute_ProtoFunID_descriptor(), value);
}
inline bool stAddGuildContribute_ProtoFunID_Parse(
    const ::std::string& name, stAddGuildContribute_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddGuildContribute_ProtoFunID>(
    stAddGuildContribute_ProtoFunID_descriptor(), name, value);
}
enum stBroadcastGuildChatInfo_ProtoModID {
  stBroadcastGuildChatInfo_ProtoModID_ModID = 3
};
bool stBroadcastGuildChatInfo_ProtoModID_IsValid(int value);
const stBroadcastGuildChatInfo_ProtoModID stBroadcastGuildChatInfo_ProtoModID_ProtoModID_MIN = stBroadcastGuildChatInfo_ProtoModID_ModID;
const stBroadcastGuildChatInfo_ProtoModID stBroadcastGuildChatInfo_ProtoModID_ProtoModID_MAX = stBroadcastGuildChatInfo_ProtoModID_ModID;
const int stBroadcastGuildChatInfo_ProtoModID_ProtoModID_ARRAYSIZE = stBroadcastGuildChatInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadcastGuildChatInfo_ProtoModID_descriptor();
inline const ::std::string& stBroadcastGuildChatInfo_ProtoModID_Name(stBroadcastGuildChatInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadcastGuildChatInfo_ProtoModID_descriptor(), value);
}
inline bool stBroadcastGuildChatInfo_ProtoModID_Parse(
    const ::std::string& name, stBroadcastGuildChatInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadcastGuildChatInfo_ProtoModID>(
    stBroadcastGuildChatInfo_ProtoModID_descriptor(), name, value);
}
enum stBroadcastGuildChatInfo_ProtoFunID {
  stBroadcastGuildChatInfo_ProtoFunID_FunID = 12
};
bool stBroadcastGuildChatInfo_ProtoFunID_IsValid(int value);
const stBroadcastGuildChatInfo_ProtoFunID stBroadcastGuildChatInfo_ProtoFunID_ProtoFunID_MIN = stBroadcastGuildChatInfo_ProtoFunID_FunID;
const stBroadcastGuildChatInfo_ProtoFunID stBroadcastGuildChatInfo_ProtoFunID_ProtoFunID_MAX = stBroadcastGuildChatInfo_ProtoFunID_FunID;
const int stBroadcastGuildChatInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stBroadcastGuildChatInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadcastGuildChatInfo_ProtoFunID_descriptor();
inline const ::std::string& stBroadcastGuildChatInfo_ProtoFunID_Name(stBroadcastGuildChatInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadcastGuildChatInfo_ProtoFunID_descriptor(), value);
}
inline bool stBroadcastGuildChatInfo_ProtoFunID_Parse(
    const ::std::string& name, stBroadcastGuildChatInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadcastGuildChatInfo_ProtoFunID>(
    stBroadcastGuildChatInfo_ProtoFunID_descriptor(), name, value);
}
enum stGuildPray_ProtoModID {
  stGuildPray_ProtoModID_ModID = 3
};
bool stGuildPray_ProtoModID_IsValid(int value);
const stGuildPray_ProtoModID stGuildPray_ProtoModID_ProtoModID_MIN = stGuildPray_ProtoModID_ModID;
const stGuildPray_ProtoModID stGuildPray_ProtoModID_ProtoModID_MAX = stGuildPray_ProtoModID_ModID;
const int stGuildPray_ProtoModID_ProtoModID_ARRAYSIZE = stGuildPray_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildPray_ProtoModID_descriptor();
inline const ::std::string& stGuildPray_ProtoModID_Name(stGuildPray_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildPray_ProtoModID_descriptor(), value);
}
inline bool stGuildPray_ProtoModID_Parse(
    const ::std::string& name, stGuildPray_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildPray_ProtoModID>(
    stGuildPray_ProtoModID_descriptor(), name, value);
}
enum stGuildPray_ProtoFunID {
  stGuildPray_ProtoFunID_FunID = 13
};
bool stGuildPray_ProtoFunID_IsValid(int value);
const stGuildPray_ProtoFunID stGuildPray_ProtoFunID_ProtoFunID_MIN = stGuildPray_ProtoFunID_FunID;
const stGuildPray_ProtoFunID stGuildPray_ProtoFunID_ProtoFunID_MAX = stGuildPray_ProtoFunID_FunID;
const int stGuildPray_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuildPray_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildPray_ProtoFunID_descriptor();
inline const ::std::string& stGuildPray_ProtoFunID_Name(stGuildPray_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildPray_ProtoFunID_descriptor(), value);
}
inline bool stGuildPray_ProtoFunID_Parse(
    const ::std::string& name, stGuildPray_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildPray_ProtoFunID>(
    stGuildPray_ProtoFunID_descriptor(), name, value);
}
enum stSynUserLevel_ProtoModID {
  stSynUserLevel_ProtoModID_ModID = 3
};
bool stSynUserLevel_ProtoModID_IsValid(int value);
const stSynUserLevel_ProtoModID stSynUserLevel_ProtoModID_ProtoModID_MIN = stSynUserLevel_ProtoModID_ModID;
const stSynUserLevel_ProtoModID stSynUserLevel_ProtoModID_ProtoModID_MAX = stSynUserLevel_ProtoModID_ModID;
const int stSynUserLevel_ProtoModID_ProtoModID_ARRAYSIZE = stSynUserLevel_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynUserLevel_ProtoModID_descriptor();
inline const ::std::string& stSynUserLevel_ProtoModID_Name(stSynUserLevel_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynUserLevel_ProtoModID_descriptor(), value);
}
inline bool stSynUserLevel_ProtoModID_Parse(
    const ::std::string& name, stSynUserLevel_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynUserLevel_ProtoModID>(
    stSynUserLevel_ProtoModID_descriptor(), name, value);
}
enum stSynUserLevel_ProtoFunID {
  stSynUserLevel_ProtoFunID_FunID = 14
};
bool stSynUserLevel_ProtoFunID_IsValid(int value);
const stSynUserLevel_ProtoFunID stSynUserLevel_ProtoFunID_ProtoFunID_MIN = stSynUserLevel_ProtoFunID_FunID;
const stSynUserLevel_ProtoFunID stSynUserLevel_ProtoFunID_ProtoFunID_MAX = stSynUserLevel_ProtoFunID_FunID;
const int stSynUserLevel_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynUserLevel_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynUserLevel_ProtoFunID_descriptor();
inline const ::std::string& stSynUserLevel_ProtoFunID_Name(stSynUserLevel_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynUserLevel_ProtoFunID_descriptor(), value);
}
inline bool stSynUserLevel_ProtoFunID_Parse(
    const ::std::string& name, stSynUserLevel_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynUserLevel_ProtoFunID>(
    stSynUserLevel_ProtoFunID_descriptor(), name, value);
}
enum stSynCopymapStarNum_ProtoModID {
  stSynCopymapStarNum_ProtoModID_ModID = 3
};
bool stSynCopymapStarNum_ProtoModID_IsValid(int value);
const stSynCopymapStarNum_ProtoModID stSynCopymapStarNum_ProtoModID_ProtoModID_MIN = stSynCopymapStarNum_ProtoModID_ModID;
const stSynCopymapStarNum_ProtoModID stSynCopymapStarNum_ProtoModID_ProtoModID_MAX = stSynCopymapStarNum_ProtoModID_ModID;
const int stSynCopymapStarNum_ProtoModID_ProtoModID_ARRAYSIZE = stSynCopymapStarNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynCopymapStarNum_ProtoModID_descriptor();
inline const ::std::string& stSynCopymapStarNum_ProtoModID_Name(stSynCopymapStarNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynCopymapStarNum_ProtoModID_descriptor(), value);
}
inline bool stSynCopymapStarNum_ProtoModID_Parse(
    const ::std::string& name, stSynCopymapStarNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynCopymapStarNum_ProtoModID>(
    stSynCopymapStarNum_ProtoModID_descriptor(), name, value);
}
enum stSynCopymapStarNum_ProtoFunID {
  stSynCopymapStarNum_ProtoFunID_FunID = 15
};
bool stSynCopymapStarNum_ProtoFunID_IsValid(int value);
const stSynCopymapStarNum_ProtoFunID stSynCopymapStarNum_ProtoFunID_ProtoFunID_MIN = stSynCopymapStarNum_ProtoFunID_FunID;
const stSynCopymapStarNum_ProtoFunID stSynCopymapStarNum_ProtoFunID_ProtoFunID_MAX = stSynCopymapStarNum_ProtoFunID_FunID;
const int stSynCopymapStarNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynCopymapStarNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynCopymapStarNum_ProtoFunID_descriptor();
inline const ::std::string& stSynCopymapStarNum_ProtoFunID_Name(stSynCopymapStarNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynCopymapStarNum_ProtoFunID_descriptor(), value);
}
inline bool stSynCopymapStarNum_ProtoFunID_Parse(
    const ::std::string& name, stSynCopymapStarNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynCopymapStarNum_ProtoFunID>(
    stSynCopymapStarNum_ProtoFunID_descriptor(), name, value);
}
enum stSynUserBattlePower_ProtoModID {
  stSynUserBattlePower_ProtoModID_ModID = 3
};
bool stSynUserBattlePower_ProtoModID_IsValid(int value);
const stSynUserBattlePower_ProtoModID stSynUserBattlePower_ProtoModID_ProtoModID_MIN = stSynUserBattlePower_ProtoModID_ModID;
const stSynUserBattlePower_ProtoModID stSynUserBattlePower_ProtoModID_ProtoModID_MAX = stSynUserBattlePower_ProtoModID_ModID;
const int stSynUserBattlePower_ProtoModID_ProtoModID_ARRAYSIZE = stSynUserBattlePower_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynUserBattlePower_ProtoModID_descriptor();
inline const ::std::string& stSynUserBattlePower_ProtoModID_Name(stSynUserBattlePower_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynUserBattlePower_ProtoModID_descriptor(), value);
}
inline bool stSynUserBattlePower_ProtoModID_Parse(
    const ::std::string& name, stSynUserBattlePower_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynUserBattlePower_ProtoModID>(
    stSynUserBattlePower_ProtoModID_descriptor(), name, value);
}
enum stSynUserBattlePower_ProtoFunID {
  stSynUserBattlePower_ProtoFunID_FunID = 16
};
bool stSynUserBattlePower_ProtoFunID_IsValid(int value);
const stSynUserBattlePower_ProtoFunID stSynUserBattlePower_ProtoFunID_ProtoFunID_MIN = stSynUserBattlePower_ProtoFunID_FunID;
const stSynUserBattlePower_ProtoFunID stSynUserBattlePower_ProtoFunID_ProtoFunID_MAX = stSynUserBattlePower_ProtoFunID_FunID;
const int stSynUserBattlePower_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynUserBattlePower_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynUserBattlePower_ProtoFunID_descriptor();
inline const ::std::string& stSynUserBattlePower_ProtoFunID_Name(stSynUserBattlePower_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynUserBattlePower_ProtoFunID_descriptor(), value);
}
inline bool stSynUserBattlePower_ProtoFunID_Parse(
    const ::std::string& name, stSynUserBattlePower_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynUserBattlePower_ProtoFunID>(
    stSynUserBattlePower_ProtoFunID_descriptor(), name, value);
}
enum stSendTeamChatInfo_ProtoModID {
  stSendTeamChatInfo_ProtoModID_ModID = 3
};
bool stSendTeamChatInfo_ProtoModID_IsValid(int value);
const stSendTeamChatInfo_ProtoModID stSendTeamChatInfo_ProtoModID_ProtoModID_MIN = stSendTeamChatInfo_ProtoModID_ModID;
const stSendTeamChatInfo_ProtoModID stSendTeamChatInfo_ProtoModID_ProtoModID_MAX = stSendTeamChatInfo_ProtoModID_ModID;
const int stSendTeamChatInfo_ProtoModID_ProtoModID_ARRAYSIZE = stSendTeamChatInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendTeamChatInfo_ProtoModID_descriptor();
inline const ::std::string& stSendTeamChatInfo_ProtoModID_Name(stSendTeamChatInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendTeamChatInfo_ProtoModID_descriptor(), value);
}
inline bool stSendTeamChatInfo_ProtoModID_Parse(
    const ::std::string& name, stSendTeamChatInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendTeamChatInfo_ProtoModID>(
    stSendTeamChatInfo_ProtoModID_descriptor(), name, value);
}
enum stSendTeamChatInfo_ProtoFunID {
  stSendTeamChatInfo_ProtoFunID_FunID = 17
};
bool stSendTeamChatInfo_ProtoFunID_IsValid(int value);
const stSendTeamChatInfo_ProtoFunID stSendTeamChatInfo_ProtoFunID_ProtoFunID_MIN = stSendTeamChatInfo_ProtoFunID_FunID;
const stSendTeamChatInfo_ProtoFunID stSendTeamChatInfo_ProtoFunID_ProtoFunID_MAX = stSendTeamChatInfo_ProtoFunID_FunID;
const int stSendTeamChatInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendTeamChatInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendTeamChatInfo_ProtoFunID_descriptor();
inline const ::std::string& stSendTeamChatInfo_ProtoFunID_Name(stSendTeamChatInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendTeamChatInfo_ProtoFunID_descriptor(), value);
}
inline bool stSendTeamChatInfo_ProtoFunID_Parse(
    const ::std::string& name, stSendTeamChatInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendTeamChatInfo_ProtoFunID>(
    stSendTeamChatInfo_ProtoFunID_descriptor(), name, value);
}
enum stTeamLeaveCopyMap_ProtoModID {
  stTeamLeaveCopyMap_ProtoModID_ModID = 3
};
bool stTeamLeaveCopyMap_ProtoModID_IsValid(int value);
const stTeamLeaveCopyMap_ProtoModID stTeamLeaveCopyMap_ProtoModID_ProtoModID_MIN = stTeamLeaveCopyMap_ProtoModID_ModID;
const stTeamLeaveCopyMap_ProtoModID stTeamLeaveCopyMap_ProtoModID_ProtoModID_MAX = stTeamLeaveCopyMap_ProtoModID_ModID;
const int stTeamLeaveCopyMap_ProtoModID_ProtoModID_ARRAYSIZE = stTeamLeaveCopyMap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTeamLeaveCopyMap_ProtoModID_descriptor();
inline const ::std::string& stTeamLeaveCopyMap_ProtoModID_Name(stTeamLeaveCopyMap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTeamLeaveCopyMap_ProtoModID_descriptor(), value);
}
inline bool stTeamLeaveCopyMap_ProtoModID_Parse(
    const ::std::string& name, stTeamLeaveCopyMap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTeamLeaveCopyMap_ProtoModID>(
    stTeamLeaveCopyMap_ProtoModID_descriptor(), name, value);
}
enum stTeamLeaveCopyMap_ProtoFunID {
  stTeamLeaveCopyMap_ProtoFunID_FunID = 18
};
bool stTeamLeaveCopyMap_ProtoFunID_IsValid(int value);
const stTeamLeaveCopyMap_ProtoFunID stTeamLeaveCopyMap_ProtoFunID_ProtoFunID_MIN = stTeamLeaveCopyMap_ProtoFunID_FunID;
const stTeamLeaveCopyMap_ProtoFunID stTeamLeaveCopyMap_ProtoFunID_ProtoFunID_MAX = stTeamLeaveCopyMap_ProtoFunID_FunID;
const int stTeamLeaveCopyMap_ProtoFunID_ProtoFunID_ARRAYSIZE = stTeamLeaveCopyMap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTeamLeaveCopyMap_ProtoFunID_descriptor();
inline const ::std::string& stTeamLeaveCopyMap_ProtoFunID_Name(stTeamLeaveCopyMap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTeamLeaveCopyMap_ProtoFunID_descriptor(), value);
}
inline bool stTeamLeaveCopyMap_ProtoFunID_Parse(
    const ::std::string& name, stTeamLeaveCopyMap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTeamLeaveCopyMap_ProtoFunID>(
    stTeamLeaveCopyMap_ProtoFunID_descriptor(), name, value);
}
enum stTreasureCombine_ProtoModID {
  stTreasureCombine_ProtoModID_ModID = 3
};
bool stTreasureCombine_ProtoModID_IsValid(int value);
const stTreasureCombine_ProtoModID stTreasureCombine_ProtoModID_ProtoModID_MIN = stTreasureCombine_ProtoModID_ModID;
const stTreasureCombine_ProtoModID stTreasureCombine_ProtoModID_ProtoModID_MAX = stTreasureCombine_ProtoModID_ModID;
const int stTreasureCombine_ProtoModID_ProtoModID_ARRAYSIZE = stTreasureCombine_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTreasureCombine_ProtoModID_descriptor();
inline const ::std::string& stTreasureCombine_ProtoModID_Name(stTreasureCombine_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTreasureCombine_ProtoModID_descriptor(), value);
}
inline bool stTreasureCombine_ProtoModID_Parse(
    const ::std::string& name, stTreasureCombine_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTreasureCombine_ProtoModID>(
    stTreasureCombine_ProtoModID_descriptor(), name, value);
}
enum stTreasureCombine_ProtoFunID {
  stTreasureCombine_ProtoFunID_FunID = 19
};
bool stTreasureCombine_ProtoFunID_IsValid(int value);
const stTreasureCombine_ProtoFunID stTreasureCombine_ProtoFunID_ProtoFunID_MIN = stTreasureCombine_ProtoFunID_FunID;
const stTreasureCombine_ProtoFunID stTreasureCombine_ProtoFunID_ProtoFunID_MAX = stTreasureCombine_ProtoFunID_FunID;
const int stTreasureCombine_ProtoFunID_ProtoFunID_ARRAYSIZE = stTreasureCombine_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTreasureCombine_ProtoFunID_descriptor();
inline const ::std::string& stTreasureCombine_ProtoFunID_Name(stTreasureCombine_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTreasureCombine_ProtoFunID_descriptor(), value);
}
inline bool stTreasureCombine_ProtoFunID_Parse(
    const ::std::string& name, stTreasureCombine_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTreasureCombine_ProtoFunID>(
    stTreasureCombine_ProtoFunID_descriptor(), name, value);
}
enum stTreasureCombineSuccess_ProtoModID {
  stTreasureCombineSuccess_ProtoModID_ModID = 3
};
bool stTreasureCombineSuccess_ProtoModID_IsValid(int value);
const stTreasureCombineSuccess_ProtoModID stTreasureCombineSuccess_ProtoModID_ProtoModID_MIN = stTreasureCombineSuccess_ProtoModID_ModID;
const stTreasureCombineSuccess_ProtoModID stTreasureCombineSuccess_ProtoModID_ProtoModID_MAX = stTreasureCombineSuccess_ProtoModID_ModID;
const int stTreasureCombineSuccess_ProtoModID_ProtoModID_ARRAYSIZE = stTreasureCombineSuccess_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTreasureCombineSuccess_ProtoModID_descriptor();
inline const ::std::string& stTreasureCombineSuccess_ProtoModID_Name(stTreasureCombineSuccess_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTreasureCombineSuccess_ProtoModID_descriptor(), value);
}
inline bool stTreasureCombineSuccess_ProtoModID_Parse(
    const ::std::string& name, stTreasureCombineSuccess_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTreasureCombineSuccess_ProtoModID>(
    stTreasureCombineSuccess_ProtoModID_descriptor(), name, value);
}
enum stTreasureCombineSuccess_ProtoFunID {
  stTreasureCombineSuccess_ProtoFunID_FunID = 20
};
bool stTreasureCombineSuccess_ProtoFunID_IsValid(int value);
const stTreasureCombineSuccess_ProtoFunID stTreasureCombineSuccess_ProtoFunID_ProtoFunID_MIN = stTreasureCombineSuccess_ProtoFunID_FunID;
const stTreasureCombineSuccess_ProtoFunID stTreasureCombineSuccess_ProtoFunID_ProtoFunID_MAX = stTreasureCombineSuccess_ProtoFunID_FunID;
const int stTreasureCombineSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE = stTreasureCombineSuccess_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTreasureCombineSuccess_ProtoFunID_descriptor();
inline const ::std::string& stTreasureCombineSuccess_ProtoFunID_Name(stTreasureCombineSuccess_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTreasureCombineSuccess_ProtoFunID_descriptor(), value);
}
inline bool stTreasureCombineSuccess_ProtoFunID_Parse(
    const ::std::string& name, stTreasureCombineSuccess_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTreasureCombineSuccess_ProtoFunID>(
    stTreasureCombineSuccess_ProtoFunID_descriptor(), name, value);
}
enum stBuyPeaceModubleTime_ProtoModID {
  stBuyPeaceModubleTime_ProtoModID_ModID = 3
};
bool stBuyPeaceModubleTime_ProtoModID_IsValid(int value);
const stBuyPeaceModubleTime_ProtoModID stBuyPeaceModubleTime_ProtoModID_ProtoModID_MIN = stBuyPeaceModubleTime_ProtoModID_ModID;
const stBuyPeaceModubleTime_ProtoModID stBuyPeaceModubleTime_ProtoModID_ProtoModID_MAX = stBuyPeaceModubleTime_ProtoModID_ModID;
const int stBuyPeaceModubleTime_ProtoModID_ProtoModID_ARRAYSIZE = stBuyPeaceModubleTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyPeaceModubleTime_ProtoModID_descriptor();
inline const ::std::string& stBuyPeaceModubleTime_ProtoModID_Name(stBuyPeaceModubleTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyPeaceModubleTime_ProtoModID_descriptor(), value);
}
inline bool stBuyPeaceModubleTime_ProtoModID_Parse(
    const ::std::string& name, stBuyPeaceModubleTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyPeaceModubleTime_ProtoModID>(
    stBuyPeaceModubleTime_ProtoModID_descriptor(), name, value);
}
enum stBuyPeaceModubleTime_ProtoFunID {
  stBuyPeaceModubleTime_ProtoFunID_FunID = 21
};
bool stBuyPeaceModubleTime_ProtoFunID_IsValid(int value);
const stBuyPeaceModubleTime_ProtoFunID stBuyPeaceModubleTime_ProtoFunID_ProtoFunID_MIN = stBuyPeaceModubleTime_ProtoFunID_FunID;
const stBuyPeaceModubleTime_ProtoFunID stBuyPeaceModubleTime_ProtoFunID_ProtoFunID_MAX = stBuyPeaceModubleTime_ProtoFunID_FunID;
const int stBuyPeaceModubleTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuyPeaceModubleTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyPeaceModubleTime_ProtoFunID_descriptor();
inline const ::std::string& stBuyPeaceModubleTime_ProtoFunID_Name(stBuyPeaceModubleTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyPeaceModubleTime_ProtoFunID_descriptor(), value);
}
inline bool stBuyPeaceModubleTime_ProtoFunID_Parse(
    const ::std::string& name, stBuyPeaceModubleTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyPeaceModubleTime_ProtoFunID>(
    stBuyPeaceModubleTime_ProtoFunID_descriptor(), name, value);
}
enum stReqChangeGameSvr_ProtoModID {
  stReqChangeGameSvr_ProtoModID_ModID = 3
};
bool stReqChangeGameSvr_ProtoModID_IsValid(int value);
const stReqChangeGameSvr_ProtoModID stReqChangeGameSvr_ProtoModID_ProtoModID_MIN = stReqChangeGameSvr_ProtoModID_ModID;
const stReqChangeGameSvr_ProtoModID stReqChangeGameSvr_ProtoModID_ProtoModID_MAX = stReqChangeGameSvr_ProtoModID_ModID;
const int stReqChangeGameSvr_ProtoModID_ProtoModID_ARRAYSIZE = stReqChangeGameSvr_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChangeGameSvr_ProtoModID_descriptor();
inline const ::std::string& stReqChangeGameSvr_ProtoModID_Name(stReqChangeGameSvr_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChangeGameSvr_ProtoModID_descriptor(), value);
}
inline bool stReqChangeGameSvr_ProtoModID_Parse(
    const ::std::string& name, stReqChangeGameSvr_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChangeGameSvr_ProtoModID>(
    stReqChangeGameSvr_ProtoModID_descriptor(), name, value);
}
enum stReqChangeGameSvr_ProtoFunID {
  stReqChangeGameSvr_ProtoFunID_FunID = 22
};
bool stReqChangeGameSvr_ProtoFunID_IsValid(int value);
const stReqChangeGameSvr_ProtoFunID stReqChangeGameSvr_ProtoFunID_ProtoFunID_MIN = stReqChangeGameSvr_ProtoFunID_FunID;
const stReqChangeGameSvr_ProtoFunID stReqChangeGameSvr_ProtoFunID_ProtoFunID_MAX = stReqChangeGameSvr_ProtoFunID_FunID;
const int stReqChangeGameSvr_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqChangeGameSvr_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChangeGameSvr_ProtoFunID_descriptor();
inline const ::std::string& stReqChangeGameSvr_ProtoFunID_Name(stReqChangeGameSvr_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChangeGameSvr_ProtoFunID_descriptor(), value);
}
inline bool stReqChangeGameSvr_ProtoFunID_Parse(
    const ::std::string& name, stReqChangeGameSvr_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChangeGameSvr_ProtoFunID>(
    stReqChangeGameSvr_ProtoFunID_descriptor(), name, value);
}
enum stConfirmChangeGameSvr_ProtoModID {
  stConfirmChangeGameSvr_ProtoModID_ModID = 3
};
bool stConfirmChangeGameSvr_ProtoModID_IsValid(int value);
const stConfirmChangeGameSvr_ProtoModID stConfirmChangeGameSvr_ProtoModID_ProtoModID_MIN = stConfirmChangeGameSvr_ProtoModID_ModID;
const stConfirmChangeGameSvr_ProtoModID stConfirmChangeGameSvr_ProtoModID_ProtoModID_MAX = stConfirmChangeGameSvr_ProtoModID_ModID;
const int stConfirmChangeGameSvr_ProtoModID_ProtoModID_ARRAYSIZE = stConfirmChangeGameSvr_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stConfirmChangeGameSvr_ProtoModID_descriptor();
inline const ::std::string& stConfirmChangeGameSvr_ProtoModID_Name(stConfirmChangeGameSvr_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stConfirmChangeGameSvr_ProtoModID_descriptor(), value);
}
inline bool stConfirmChangeGameSvr_ProtoModID_Parse(
    const ::std::string& name, stConfirmChangeGameSvr_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stConfirmChangeGameSvr_ProtoModID>(
    stConfirmChangeGameSvr_ProtoModID_descriptor(), name, value);
}
enum stConfirmChangeGameSvr_ProtoFunID {
  stConfirmChangeGameSvr_ProtoFunID_FunID = 23
};
bool stConfirmChangeGameSvr_ProtoFunID_IsValid(int value);
const stConfirmChangeGameSvr_ProtoFunID stConfirmChangeGameSvr_ProtoFunID_ProtoFunID_MIN = stConfirmChangeGameSvr_ProtoFunID_FunID;
const stConfirmChangeGameSvr_ProtoFunID stConfirmChangeGameSvr_ProtoFunID_ProtoFunID_MAX = stConfirmChangeGameSvr_ProtoFunID_FunID;
const int stConfirmChangeGameSvr_ProtoFunID_ProtoFunID_ARRAYSIZE = stConfirmChangeGameSvr_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stConfirmChangeGameSvr_ProtoFunID_descriptor();
inline const ::std::string& stConfirmChangeGameSvr_ProtoFunID_Name(stConfirmChangeGameSvr_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stConfirmChangeGameSvr_ProtoFunID_descriptor(), value);
}
inline bool stConfirmChangeGameSvr_ProtoFunID_Parse(
    const ::std::string& name, stConfirmChangeGameSvr_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stConfirmChangeGameSvr_ProtoFunID>(
    stConfirmChangeGameSvr_ProtoFunID_descriptor(), name, value);
}
enum stRetOtherUserData2Me_ProtoModID {
  stRetOtherUserData2Me_ProtoModID_ModID = 3
};
bool stRetOtherUserData2Me_ProtoModID_IsValid(int value);
const stRetOtherUserData2Me_ProtoModID stRetOtherUserData2Me_ProtoModID_ProtoModID_MIN = stRetOtherUserData2Me_ProtoModID_ModID;
const stRetOtherUserData2Me_ProtoModID stRetOtherUserData2Me_ProtoModID_ProtoModID_MAX = stRetOtherUserData2Me_ProtoModID_ModID;
const int stRetOtherUserData2Me_ProtoModID_ProtoModID_ARRAYSIZE = stRetOtherUserData2Me_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOtherUserData2Me_ProtoModID_descriptor();
inline const ::std::string& stRetOtherUserData2Me_ProtoModID_Name(stRetOtherUserData2Me_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOtherUserData2Me_ProtoModID_descriptor(), value);
}
inline bool stRetOtherUserData2Me_ProtoModID_Parse(
    const ::std::string& name, stRetOtherUserData2Me_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOtherUserData2Me_ProtoModID>(
    stRetOtherUserData2Me_ProtoModID_descriptor(), name, value);
}
enum stRetOtherUserData2Me_ProtoFunID {
  stRetOtherUserData2Me_ProtoFunID_FunID = 24
};
bool stRetOtherUserData2Me_ProtoFunID_IsValid(int value);
const stRetOtherUserData2Me_ProtoFunID stRetOtherUserData2Me_ProtoFunID_ProtoFunID_MIN = stRetOtherUserData2Me_ProtoFunID_FunID;
const stRetOtherUserData2Me_ProtoFunID stRetOtherUserData2Me_ProtoFunID_ProtoFunID_MAX = stRetOtherUserData2Me_ProtoFunID_FunID;
const int stRetOtherUserData2Me_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetOtherUserData2Me_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOtherUserData2Me_ProtoFunID_descriptor();
inline const ::std::string& stRetOtherUserData2Me_ProtoFunID_Name(stRetOtherUserData2Me_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOtherUserData2Me_ProtoFunID_descriptor(), value);
}
inline bool stRetOtherUserData2Me_ProtoFunID_Parse(
    const ::std::string& name, stRetOtherUserData2Me_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOtherUserData2Me_ProtoFunID>(
    stRetOtherUserData2Me_ProtoFunID_descriptor(), name, value);
}
enum stObtainItemFromMail_ProtoModID {
  stObtainItemFromMail_ProtoModID_ModID = 3
};
bool stObtainItemFromMail_ProtoModID_IsValid(int value);
const stObtainItemFromMail_ProtoModID stObtainItemFromMail_ProtoModID_ProtoModID_MIN = stObtainItemFromMail_ProtoModID_ModID;
const stObtainItemFromMail_ProtoModID stObtainItemFromMail_ProtoModID_ProtoModID_MAX = stObtainItemFromMail_ProtoModID_ModID;
const int stObtainItemFromMail_ProtoModID_ProtoModID_ARRAYSIZE = stObtainItemFromMail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stObtainItemFromMail_ProtoModID_descriptor();
inline const ::std::string& stObtainItemFromMail_ProtoModID_Name(stObtainItemFromMail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stObtainItemFromMail_ProtoModID_descriptor(), value);
}
inline bool stObtainItemFromMail_ProtoModID_Parse(
    const ::std::string& name, stObtainItemFromMail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stObtainItemFromMail_ProtoModID>(
    stObtainItemFromMail_ProtoModID_descriptor(), name, value);
}
enum stObtainItemFromMail_ProtoFunID {
  stObtainItemFromMail_ProtoFunID_FunID = 25
};
bool stObtainItemFromMail_ProtoFunID_IsValid(int value);
const stObtainItemFromMail_ProtoFunID stObtainItemFromMail_ProtoFunID_ProtoFunID_MIN = stObtainItemFromMail_ProtoFunID_FunID;
const stObtainItemFromMail_ProtoFunID stObtainItemFromMail_ProtoFunID_ProtoFunID_MAX = stObtainItemFromMail_ProtoFunID_FunID;
const int stObtainItemFromMail_ProtoFunID_ProtoFunID_ARRAYSIZE = stObtainItemFromMail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stObtainItemFromMail_ProtoFunID_descriptor();
inline const ::std::string& stObtainItemFromMail_ProtoFunID_Name(stObtainItemFromMail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stObtainItemFromMail_ProtoFunID_descriptor(), value);
}
inline bool stObtainItemFromMail_ProtoFunID_Parse(
    const ::std::string& name, stObtainItemFromMail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stObtainItemFromMail_ProtoFunID>(
    stObtainItemFromMail_ProtoFunID_descriptor(), name, value);
}
enum stSynAddTreasure_ProtoModID {
  stSynAddTreasure_ProtoModID_ModID = 3
};
bool stSynAddTreasure_ProtoModID_IsValid(int value);
const stSynAddTreasure_ProtoModID stSynAddTreasure_ProtoModID_ProtoModID_MIN = stSynAddTreasure_ProtoModID_ModID;
const stSynAddTreasure_ProtoModID stSynAddTreasure_ProtoModID_ProtoModID_MAX = stSynAddTreasure_ProtoModID_ModID;
const int stSynAddTreasure_ProtoModID_ProtoModID_ARRAYSIZE = stSynAddTreasure_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAddTreasure_ProtoModID_descriptor();
inline const ::std::string& stSynAddTreasure_ProtoModID_Name(stSynAddTreasure_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAddTreasure_ProtoModID_descriptor(), value);
}
inline bool stSynAddTreasure_ProtoModID_Parse(
    const ::std::string& name, stSynAddTreasure_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAddTreasure_ProtoModID>(
    stSynAddTreasure_ProtoModID_descriptor(), name, value);
}
enum stSynAddTreasure_ProtoFunID {
  stSynAddTreasure_ProtoFunID_FunID = 26
};
bool stSynAddTreasure_ProtoFunID_IsValid(int value);
const stSynAddTreasure_ProtoFunID stSynAddTreasure_ProtoFunID_ProtoFunID_MIN = stSynAddTreasure_ProtoFunID_FunID;
const stSynAddTreasure_ProtoFunID stSynAddTreasure_ProtoFunID_ProtoFunID_MAX = stSynAddTreasure_ProtoFunID_FunID;
const int stSynAddTreasure_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynAddTreasure_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAddTreasure_ProtoFunID_descriptor();
inline const ::std::string& stSynAddTreasure_ProtoFunID_Name(stSynAddTreasure_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAddTreasure_ProtoFunID_descriptor(), value);
}
inline bool stSynAddTreasure_ProtoFunID_Parse(
    const ::std::string& name, stSynAddTreasure_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAddTreasure_ProtoFunID>(
    stSynAddTreasure_ProtoFunID_descriptor(), name, value);
}
enum stBeginPKWithOther_ePKType {
  stBeginPKWithOther_ePKType_eArena_PK = 1,
  stBeginPKWithOther_ePKType_eLeitai_PK = 2,
  stBeginPKWithOther_ePKType_eIntercept_PK = 3
};
bool stBeginPKWithOther_ePKType_IsValid(int value);
const stBeginPKWithOther_ePKType stBeginPKWithOther_ePKType_ePKType_MIN = stBeginPKWithOther_ePKType_eArena_PK;
const stBeginPKWithOther_ePKType stBeginPKWithOther_ePKType_ePKType_MAX = stBeginPKWithOther_ePKType_eIntercept_PK;
const int stBeginPKWithOther_ePKType_ePKType_ARRAYSIZE = stBeginPKWithOther_ePKType_ePKType_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeginPKWithOther_ePKType_descriptor();
inline const ::std::string& stBeginPKWithOther_ePKType_Name(stBeginPKWithOther_ePKType value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeginPKWithOther_ePKType_descriptor(), value);
}
inline bool stBeginPKWithOther_ePKType_Parse(
    const ::std::string& name, stBeginPKWithOther_ePKType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeginPKWithOther_ePKType>(
    stBeginPKWithOther_ePKType_descriptor(), name, value);
}
enum stBeginPKWithOther_ProtoModID {
  stBeginPKWithOther_ProtoModID_ModID = 3
};
bool stBeginPKWithOther_ProtoModID_IsValid(int value);
const stBeginPKWithOther_ProtoModID stBeginPKWithOther_ProtoModID_ProtoModID_MIN = stBeginPKWithOther_ProtoModID_ModID;
const stBeginPKWithOther_ProtoModID stBeginPKWithOther_ProtoModID_ProtoModID_MAX = stBeginPKWithOther_ProtoModID_ModID;
const int stBeginPKWithOther_ProtoModID_ProtoModID_ARRAYSIZE = stBeginPKWithOther_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeginPKWithOther_ProtoModID_descriptor();
inline const ::std::string& stBeginPKWithOther_ProtoModID_Name(stBeginPKWithOther_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeginPKWithOther_ProtoModID_descriptor(), value);
}
inline bool stBeginPKWithOther_ProtoModID_Parse(
    const ::std::string& name, stBeginPKWithOther_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeginPKWithOther_ProtoModID>(
    stBeginPKWithOther_ProtoModID_descriptor(), name, value);
}
enum stBeginPKWithOther_ProtoFunID {
  stBeginPKWithOther_ProtoFunID_FunID = 27
};
bool stBeginPKWithOther_ProtoFunID_IsValid(int value);
const stBeginPKWithOther_ProtoFunID stBeginPKWithOther_ProtoFunID_ProtoFunID_MIN = stBeginPKWithOther_ProtoFunID_FunID;
const stBeginPKWithOther_ProtoFunID stBeginPKWithOther_ProtoFunID_ProtoFunID_MAX = stBeginPKWithOther_ProtoFunID_FunID;
const int stBeginPKWithOther_ProtoFunID_ProtoFunID_ARRAYSIZE = stBeginPKWithOther_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeginPKWithOther_ProtoFunID_descriptor();
inline const ::std::string& stBeginPKWithOther_ProtoFunID_Name(stBeginPKWithOther_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeginPKWithOther_ProtoFunID_descriptor(), value);
}
inline bool stBeginPKWithOther_ProtoFunID_Parse(
    const ::std::string& name, stBeginPKWithOther_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeginPKWithOther_ProtoFunID>(
    stBeginPKWithOther_ProtoFunID_descriptor(), name, value);
}
enum stUserLeitaiChallenge_ProtoModID {
  stUserLeitaiChallenge_ProtoModID_ModID = 3
};
bool stUserLeitaiChallenge_ProtoModID_IsValid(int value);
const stUserLeitaiChallenge_ProtoModID stUserLeitaiChallenge_ProtoModID_ProtoModID_MIN = stUserLeitaiChallenge_ProtoModID_ModID;
const stUserLeitaiChallenge_ProtoModID stUserLeitaiChallenge_ProtoModID_ProtoModID_MAX = stUserLeitaiChallenge_ProtoModID_ModID;
const int stUserLeitaiChallenge_ProtoModID_ProtoModID_ARRAYSIZE = stUserLeitaiChallenge_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserLeitaiChallenge_ProtoModID_descriptor();
inline const ::std::string& stUserLeitaiChallenge_ProtoModID_Name(stUserLeitaiChallenge_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserLeitaiChallenge_ProtoModID_descriptor(), value);
}
inline bool stUserLeitaiChallenge_ProtoModID_Parse(
    const ::std::string& name, stUserLeitaiChallenge_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserLeitaiChallenge_ProtoModID>(
    stUserLeitaiChallenge_ProtoModID_descriptor(), name, value);
}
enum stUserLeitaiChallenge_ProtoFunID {
  stUserLeitaiChallenge_ProtoFunID_FunID = 28
};
bool stUserLeitaiChallenge_ProtoFunID_IsValid(int value);
const stUserLeitaiChallenge_ProtoFunID stUserLeitaiChallenge_ProtoFunID_ProtoFunID_MIN = stUserLeitaiChallenge_ProtoFunID_FunID;
const stUserLeitaiChallenge_ProtoFunID stUserLeitaiChallenge_ProtoFunID_ProtoFunID_MAX = stUserLeitaiChallenge_ProtoFunID_FunID;
const int stUserLeitaiChallenge_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserLeitaiChallenge_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserLeitaiChallenge_ProtoFunID_descriptor();
inline const ::std::string& stUserLeitaiChallenge_ProtoFunID_Name(stUserLeitaiChallenge_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserLeitaiChallenge_ProtoFunID_descriptor(), value);
}
inline bool stUserLeitaiChallenge_ProtoFunID_Parse(
    const ::std::string& name, stUserLeitaiChallenge_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserLeitaiChallenge_ProtoFunID>(
    stUserLeitaiChallenge_ProtoFunID_descriptor(), name, value);
}
enum stArenaPKResult_ProtoModID {
  stArenaPKResult_ProtoModID_ModID = 3
};
bool stArenaPKResult_ProtoModID_IsValid(int value);
const stArenaPKResult_ProtoModID stArenaPKResult_ProtoModID_ProtoModID_MIN = stArenaPKResult_ProtoModID_ModID;
const stArenaPKResult_ProtoModID stArenaPKResult_ProtoModID_ProtoModID_MAX = stArenaPKResult_ProtoModID_ModID;
const int stArenaPKResult_ProtoModID_ProtoModID_ARRAYSIZE = stArenaPKResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stArenaPKResult_ProtoModID_descriptor();
inline const ::std::string& stArenaPKResult_ProtoModID_Name(stArenaPKResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stArenaPKResult_ProtoModID_descriptor(), value);
}
inline bool stArenaPKResult_ProtoModID_Parse(
    const ::std::string& name, stArenaPKResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stArenaPKResult_ProtoModID>(
    stArenaPKResult_ProtoModID_descriptor(), name, value);
}
enum stArenaPKResult_ProtoFunID {
  stArenaPKResult_ProtoFunID_FunID = 29
};
bool stArenaPKResult_ProtoFunID_IsValid(int value);
const stArenaPKResult_ProtoFunID stArenaPKResult_ProtoFunID_ProtoFunID_MIN = stArenaPKResult_ProtoFunID_FunID;
const stArenaPKResult_ProtoFunID stArenaPKResult_ProtoFunID_ProtoFunID_MAX = stArenaPKResult_ProtoFunID_FunID;
const int stArenaPKResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stArenaPKResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stArenaPKResult_ProtoFunID_descriptor();
inline const ::std::string& stArenaPKResult_ProtoFunID_Name(stArenaPKResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stArenaPKResult_ProtoFunID_descriptor(), value);
}
inline bool stArenaPKResult_ProtoFunID_Parse(
    const ::std::string& name, stArenaPKResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stArenaPKResult_ProtoFunID>(
    stArenaPKResult_ProtoFunID_descriptor(), name, value);
}
enum stSynDrawHeroScore_ProtoModID {
  stSynDrawHeroScore_ProtoModID_ModID = 3
};
bool stSynDrawHeroScore_ProtoModID_IsValid(int value);
const stSynDrawHeroScore_ProtoModID stSynDrawHeroScore_ProtoModID_ProtoModID_MIN = stSynDrawHeroScore_ProtoModID_ModID;
const stSynDrawHeroScore_ProtoModID stSynDrawHeroScore_ProtoModID_ProtoModID_MAX = stSynDrawHeroScore_ProtoModID_ModID;
const int stSynDrawHeroScore_ProtoModID_ProtoModID_ARRAYSIZE = stSynDrawHeroScore_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynDrawHeroScore_ProtoModID_descriptor();
inline const ::std::string& stSynDrawHeroScore_ProtoModID_Name(stSynDrawHeroScore_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynDrawHeroScore_ProtoModID_descriptor(), value);
}
inline bool stSynDrawHeroScore_ProtoModID_Parse(
    const ::std::string& name, stSynDrawHeroScore_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynDrawHeroScore_ProtoModID>(
    stSynDrawHeroScore_ProtoModID_descriptor(), name, value);
}
enum stSynDrawHeroScore_ProtoFunID {
  stSynDrawHeroScore_ProtoFunID_FunID = 30
};
bool stSynDrawHeroScore_ProtoFunID_IsValid(int value);
const stSynDrawHeroScore_ProtoFunID stSynDrawHeroScore_ProtoFunID_ProtoFunID_MIN = stSynDrawHeroScore_ProtoFunID_FunID;
const stSynDrawHeroScore_ProtoFunID stSynDrawHeroScore_ProtoFunID_ProtoFunID_MAX = stSynDrawHeroScore_ProtoFunID_FunID;
const int stSynDrawHeroScore_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynDrawHeroScore_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynDrawHeroScore_ProtoFunID_descriptor();
inline const ::std::string& stSynDrawHeroScore_ProtoFunID_Name(stSynDrawHeroScore_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynDrawHeroScore_ProtoFunID_descriptor(), value);
}
inline bool stSynDrawHeroScore_ProtoFunID_Parse(
    const ::std::string& name, stSynDrawHeroScore_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynDrawHeroScore_ProtoFunID>(
    stSynDrawHeroScore_ProtoFunID_descriptor(), name, value);
}
enum stUpLeitaiUseTime_ProtoModID {
  stUpLeitaiUseTime_ProtoModID_ModID = 3
};
bool stUpLeitaiUseTime_ProtoModID_IsValid(int value);
const stUpLeitaiUseTime_ProtoModID stUpLeitaiUseTime_ProtoModID_ProtoModID_MIN = stUpLeitaiUseTime_ProtoModID_ModID;
const stUpLeitaiUseTime_ProtoModID stUpLeitaiUseTime_ProtoModID_ProtoModID_MAX = stUpLeitaiUseTime_ProtoModID_ModID;
const int stUpLeitaiUseTime_ProtoModID_ProtoModID_ARRAYSIZE = stUpLeitaiUseTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpLeitaiUseTime_ProtoModID_descriptor();
inline const ::std::string& stUpLeitaiUseTime_ProtoModID_Name(stUpLeitaiUseTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpLeitaiUseTime_ProtoModID_descriptor(), value);
}
inline bool stUpLeitaiUseTime_ProtoModID_Parse(
    const ::std::string& name, stUpLeitaiUseTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpLeitaiUseTime_ProtoModID>(
    stUpLeitaiUseTime_ProtoModID_descriptor(), name, value);
}
enum stUpLeitaiUseTime_ProtoFunID {
  stUpLeitaiUseTime_ProtoFunID_FunID = 31
};
bool stUpLeitaiUseTime_ProtoFunID_IsValid(int value);
const stUpLeitaiUseTime_ProtoFunID stUpLeitaiUseTime_ProtoFunID_ProtoFunID_MIN = stUpLeitaiUseTime_ProtoFunID_FunID;
const stUpLeitaiUseTime_ProtoFunID stUpLeitaiUseTime_ProtoFunID_ProtoFunID_MAX = stUpLeitaiUseTime_ProtoFunID_FunID;
const int stUpLeitaiUseTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stUpLeitaiUseTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpLeitaiUseTime_ProtoFunID_descriptor();
inline const ::std::string& stUpLeitaiUseTime_ProtoFunID_Name(stUpLeitaiUseTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpLeitaiUseTime_ProtoFunID_descriptor(), value);
}
inline bool stUpLeitaiUseTime_ProtoFunID_Parse(
    const ::std::string& name, stUpLeitaiUseTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpLeitaiUseTime_ProtoFunID>(
    stUpLeitaiUseTime_ProtoFunID_descriptor(), name, value);
}
enum stUserLeaveGuild_ProtoModID {
  stUserLeaveGuild_ProtoModID_ModID = 3
};
bool stUserLeaveGuild_ProtoModID_IsValid(int value);
const stUserLeaveGuild_ProtoModID stUserLeaveGuild_ProtoModID_ProtoModID_MIN = stUserLeaveGuild_ProtoModID_ModID;
const stUserLeaveGuild_ProtoModID stUserLeaveGuild_ProtoModID_ProtoModID_MAX = stUserLeaveGuild_ProtoModID_ModID;
const int stUserLeaveGuild_ProtoModID_ProtoModID_ARRAYSIZE = stUserLeaveGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserLeaveGuild_ProtoModID_descriptor();
inline const ::std::string& stUserLeaveGuild_ProtoModID_Name(stUserLeaveGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserLeaveGuild_ProtoModID_descriptor(), value);
}
inline bool stUserLeaveGuild_ProtoModID_Parse(
    const ::std::string& name, stUserLeaveGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserLeaveGuild_ProtoModID>(
    stUserLeaveGuild_ProtoModID_descriptor(), name, value);
}
enum stUserLeaveGuild_ProtoFunID {
  stUserLeaveGuild_ProtoFunID_FunID = 32
};
bool stUserLeaveGuild_ProtoFunID_IsValid(int value);
const stUserLeaveGuild_ProtoFunID stUserLeaveGuild_ProtoFunID_ProtoFunID_MIN = stUserLeaveGuild_ProtoFunID_FunID;
const stUserLeaveGuild_ProtoFunID stUserLeaveGuild_ProtoFunID_ProtoFunID_MAX = stUserLeaveGuild_ProtoFunID_FunID;
const int stUserLeaveGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserLeaveGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserLeaveGuild_ProtoFunID_descriptor();
inline const ::std::string& stUserLeaveGuild_ProtoFunID_Name(stUserLeaveGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserLeaveGuild_ProtoFunID_descriptor(), value);
}
inline bool stUserLeaveGuild_ProtoFunID_Parse(
    const ::std::string& name, stUserLeaveGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserLeaveGuild_ProtoFunID>(
    stUserLeaveGuild_ProtoFunID_descriptor(), name, value);
}
enum stTeamEnterCopyMap_ProtoModID {
  stTeamEnterCopyMap_ProtoModID_ModID = 3
};
bool stTeamEnterCopyMap_ProtoModID_IsValid(int value);
const stTeamEnterCopyMap_ProtoModID stTeamEnterCopyMap_ProtoModID_ProtoModID_MIN = stTeamEnterCopyMap_ProtoModID_ModID;
const stTeamEnterCopyMap_ProtoModID stTeamEnterCopyMap_ProtoModID_ProtoModID_MAX = stTeamEnterCopyMap_ProtoModID_ModID;
const int stTeamEnterCopyMap_ProtoModID_ProtoModID_ARRAYSIZE = stTeamEnterCopyMap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTeamEnterCopyMap_ProtoModID_descriptor();
inline const ::std::string& stTeamEnterCopyMap_ProtoModID_Name(stTeamEnterCopyMap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTeamEnterCopyMap_ProtoModID_descriptor(), value);
}
inline bool stTeamEnterCopyMap_ProtoModID_Parse(
    const ::std::string& name, stTeamEnterCopyMap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTeamEnterCopyMap_ProtoModID>(
    stTeamEnterCopyMap_ProtoModID_descriptor(), name, value);
}
enum stTeamEnterCopyMap_ProtoFunID {
  stTeamEnterCopyMap_ProtoFunID_FunID = 33
};
bool stTeamEnterCopyMap_ProtoFunID_IsValid(int value);
const stTeamEnterCopyMap_ProtoFunID stTeamEnterCopyMap_ProtoFunID_ProtoFunID_MIN = stTeamEnterCopyMap_ProtoFunID_FunID;
const stTeamEnterCopyMap_ProtoFunID stTeamEnterCopyMap_ProtoFunID_ProtoFunID_MAX = stTeamEnterCopyMap_ProtoFunID_FunID;
const int stTeamEnterCopyMap_ProtoFunID_ProtoFunID_ARRAYSIZE = stTeamEnterCopyMap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTeamEnterCopyMap_ProtoFunID_descriptor();
inline const ::std::string& stTeamEnterCopyMap_ProtoFunID_Name(stTeamEnterCopyMap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTeamEnterCopyMap_ProtoFunID_descriptor(), value);
}
inline bool stTeamEnterCopyMap_ProtoFunID_Parse(
    const ::std::string& name, stTeamEnterCopyMap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTeamEnterCopyMap_ProtoFunID>(
    stTeamEnterCopyMap_ProtoFunID_descriptor(), name, value);
}
enum stOne2OnePVPEnterCopyMap_ProtoModID {
  stOne2OnePVPEnterCopyMap_ProtoModID_ModID = 3
};
bool stOne2OnePVPEnterCopyMap_ProtoModID_IsValid(int value);
const stOne2OnePVPEnterCopyMap_ProtoModID stOne2OnePVPEnterCopyMap_ProtoModID_ProtoModID_MIN = stOne2OnePVPEnterCopyMap_ProtoModID_ModID;
const stOne2OnePVPEnterCopyMap_ProtoModID stOne2OnePVPEnterCopyMap_ProtoModID_ProtoModID_MAX = stOne2OnePVPEnterCopyMap_ProtoModID_ModID;
const int stOne2OnePVPEnterCopyMap_ProtoModID_ProtoModID_ARRAYSIZE = stOne2OnePVPEnterCopyMap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePVPEnterCopyMap_ProtoModID_descriptor();
inline const ::std::string& stOne2OnePVPEnterCopyMap_ProtoModID_Name(stOne2OnePVPEnterCopyMap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePVPEnterCopyMap_ProtoModID_descriptor(), value);
}
inline bool stOne2OnePVPEnterCopyMap_ProtoModID_Parse(
    const ::std::string& name, stOne2OnePVPEnterCopyMap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePVPEnterCopyMap_ProtoModID>(
    stOne2OnePVPEnterCopyMap_ProtoModID_descriptor(), name, value);
}
enum stOne2OnePVPEnterCopyMap_ProtoFunID {
  stOne2OnePVPEnterCopyMap_ProtoFunID_FunID = 34
};
bool stOne2OnePVPEnterCopyMap_ProtoFunID_IsValid(int value);
const stOne2OnePVPEnterCopyMap_ProtoFunID stOne2OnePVPEnterCopyMap_ProtoFunID_ProtoFunID_MIN = stOne2OnePVPEnterCopyMap_ProtoFunID_FunID;
const stOne2OnePVPEnterCopyMap_ProtoFunID stOne2OnePVPEnterCopyMap_ProtoFunID_ProtoFunID_MAX = stOne2OnePVPEnterCopyMap_ProtoFunID_FunID;
const int stOne2OnePVPEnterCopyMap_ProtoFunID_ProtoFunID_ARRAYSIZE = stOne2OnePVPEnterCopyMap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePVPEnterCopyMap_ProtoFunID_descriptor();
inline const ::std::string& stOne2OnePVPEnterCopyMap_ProtoFunID_Name(stOne2OnePVPEnterCopyMap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePVPEnterCopyMap_ProtoFunID_descriptor(), value);
}
inline bool stOne2OnePVPEnterCopyMap_ProtoFunID_Parse(
    const ::std::string& name, stOne2OnePVPEnterCopyMap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePVPEnterCopyMap_ProtoFunID>(
    stOne2OnePVPEnterCopyMap_ProtoFunID_descriptor(), name, value);
}
enum stForwardCapture_ProtoModID {
  stForwardCapture_ProtoModID_ModID = 3
};
bool stForwardCapture_ProtoModID_IsValid(int value);
const stForwardCapture_ProtoModID stForwardCapture_ProtoModID_ProtoModID_MIN = stForwardCapture_ProtoModID_ModID;
const stForwardCapture_ProtoModID stForwardCapture_ProtoModID_ProtoModID_MAX = stForwardCapture_ProtoModID_ModID;
const int stForwardCapture_ProtoModID_ProtoModID_ARRAYSIZE = stForwardCapture_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stForwardCapture_ProtoModID_descriptor();
inline const ::std::string& stForwardCapture_ProtoModID_Name(stForwardCapture_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stForwardCapture_ProtoModID_descriptor(), value);
}
inline bool stForwardCapture_ProtoModID_Parse(
    const ::std::string& name, stForwardCapture_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stForwardCapture_ProtoModID>(
    stForwardCapture_ProtoModID_descriptor(), name, value);
}
enum stForwardCapture_ProtoFunID {
  stForwardCapture_ProtoFunID_FunID = 34
};
bool stForwardCapture_ProtoFunID_IsValid(int value);
const stForwardCapture_ProtoFunID stForwardCapture_ProtoFunID_ProtoFunID_MIN = stForwardCapture_ProtoFunID_FunID;
const stForwardCapture_ProtoFunID stForwardCapture_ProtoFunID_ProtoFunID_MAX = stForwardCapture_ProtoFunID_FunID;
const int stForwardCapture_ProtoFunID_ProtoFunID_ARRAYSIZE = stForwardCapture_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stForwardCapture_ProtoFunID_descriptor();
inline const ::std::string& stForwardCapture_ProtoFunID_Name(stForwardCapture_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stForwardCapture_ProtoFunID_descriptor(), value);
}
inline bool stForwardCapture_ProtoFunID_Parse(
    const ::std::string& name, stForwardCapture_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stForwardCapture_ProtoFunID>(
    stForwardCapture_ProtoFunID_descriptor(), name, value);
}
enum stCaptureReward_ProtoModID {
  stCaptureReward_ProtoModID_ModID = 3
};
bool stCaptureReward_ProtoModID_IsValid(int value);
const stCaptureReward_ProtoModID stCaptureReward_ProtoModID_ProtoModID_MIN = stCaptureReward_ProtoModID_ModID;
const stCaptureReward_ProtoModID stCaptureReward_ProtoModID_ProtoModID_MAX = stCaptureReward_ProtoModID_ModID;
const int stCaptureReward_ProtoModID_ProtoModID_ARRAYSIZE = stCaptureReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCaptureReward_ProtoModID_descriptor();
inline const ::std::string& stCaptureReward_ProtoModID_Name(stCaptureReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCaptureReward_ProtoModID_descriptor(), value);
}
inline bool stCaptureReward_ProtoModID_Parse(
    const ::std::string& name, stCaptureReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCaptureReward_ProtoModID>(
    stCaptureReward_ProtoModID_descriptor(), name, value);
}
enum stCaptureReward_ProtoFunID {
  stCaptureReward_ProtoFunID_FunID = 36
};
bool stCaptureReward_ProtoFunID_IsValid(int value);
const stCaptureReward_ProtoFunID stCaptureReward_ProtoFunID_ProtoFunID_MIN = stCaptureReward_ProtoFunID_FunID;
const stCaptureReward_ProtoFunID stCaptureReward_ProtoFunID_ProtoFunID_MAX = stCaptureReward_ProtoFunID_FunID;
const int stCaptureReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stCaptureReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCaptureReward_ProtoFunID_descriptor();
inline const ::std::string& stCaptureReward_ProtoFunID_Name(stCaptureReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCaptureReward_ProtoFunID_descriptor(), value);
}
inline bool stCaptureReward_ProtoFunID_Parse(
    const ::std::string& name, stCaptureReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCaptureReward_ProtoFunID>(
    stCaptureReward_ProtoFunID_descriptor(), name, value);
}
enum stRealTimeBattleEnterCopymap_ProtoModID {
  stRealTimeBattleEnterCopymap_ProtoModID_ModID = 3
};
bool stRealTimeBattleEnterCopymap_ProtoModID_IsValid(int value);
const stRealTimeBattleEnterCopymap_ProtoModID stRealTimeBattleEnterCopymap_ProtoModID_ProtoModID_MIN = stRealTimeBattleEnterCopymap_ProtoModID_ModID;
const stRealTimeBattleEnterCopymap_ProtoModID stRealTimeBattleEnterCopymap_ProtoModID_ProtoModID_MAX = stRealTimeBattleEnterCopymap_ProtoModID_ModID;
const int stRealTimeBattleEnterCopymap_ProtoModID_ProtoModID_ARRAYSIZE = stRealTimeBattleEnterCopymap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimeBattleEnterCopymap_ProtoModID_descriptor();
inline const ::std::string& stRealTimeBattleEnterCopymap_ProtoModID_Name(stRealTimeBattleEnterCopymap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimeBattleEnterCopymap_ProtoModID_descriptor(), value);
}
inline bool stRealTimeBattleEnterCopymap_ProtoModID_Parse(
    const ::std::string& name, stRealTimeBattleEnterCopymap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimeBattleEnterCopymap_ProtoModID>(
    stRealTimeBattleEnterCopymap_ProtoModID_descriptor(), name, value);
}
enum stRealTimeBattleEnterCopymap_ProtoFunID {
  stRealTimeBattleEnterCopymap_ProtoFunID_FunID = 37
};
bool stRealTimeBattleEnterCopymap_ProtoFunID_IsValid(int value);
const stRealTimeBattleEnterCopymap_ProtoFunID stRealTimeBattleEnterCopymap_ProtoFunID_ProtoFunID_MIN = stRealTimeBattleEnterCopymap_ProtoFunID_FunID;
const stRealTimeBattleEnterCopymap_ProtoFunID stRealTimeBattleEnterCopymap_ProtoFunID_ProtoFunID_MAX = stRealTimeBattleEnterCopymap_ProtoFunID_FunID;
const int stRealTimeBattleEnterCopymap_ProtoFunID_ProtoFunID_ARRAYSIZE = stRealTimeBattleEnterCopymap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimeBattleEnterCopymap_ProtoFunID_descriptor();
inline const ::std::string& stRealTimeBattleEnterCopymap_ProtoFunID_Name(stRealTimeBattleEnterCopymap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimeBattleEnterCopymap_ProtoFunID_descriptor(), value);
}
inline bool stRealTimeBattleEnterCopymap_ProtoFunID_Parse(
    const ::std::string& name, stRealTimeBattleEnterCopymap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimeBattleEnterCopymap_ProtoFunID>(
    stRealTimeBattleEnterCopymap_ProtoFunID_descriptor(), name, value);
}
enum stNotifyAddLilian_ProtoModID {
  stNotifyAddLilian_ProtoModID_ModID = 3
};
bool stNotifyAddLilian_ProtoModID_IsValid(int value);
const stNotifyAddLilian_ProtoModID stNotifyAddLilian_ProtoModID_ProtoModID_MIN = stNotifyAddLilian_ProtoModID_ModID;
const stNotifyAddLilian_ProtoModID stNotifyAddLilian_ProtoModID_ProtoModID_MAX = stNotifyAddLilian_ProtoModID_ModID;
const int stNotifyAddLilian_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyAddLilian_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyAddLilian_ProtoModID_descriptor();
inline const ::std::string& stNotifyAddLilian_ProtoModID_Name(stNotifyAddLilian_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyAddLilian_ProtoModID_descriptor(), value);
}
inline bool stNotifyAddLilian_ProtoModID_Parse(
    const ::std::string& name, stNotifyAddLilian_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyAddLilian_ProtoModID>(
    stNotifyAddLilian_ProtoModID_descriptor(), name, value);
}
enum stNotifyAddLilian_ProtoFunID {
  stNotifyAddLilian_ProtoFunID_FunID = 38
};
bool stNotifyAddLilian_ProtoFunID_IsValid(int value);
const stNotifyAddLilian_ProtoFunID stNotifyAddLilian_ProtoFunID_ProtoFunID_MIN = stNotifyAddLilian_ProtoFunID_FunID;
const stNotifyAddLilian_ProtoFunID stNotifyAddLilian_ProtoFunID_ProtoFunID_MAX = stNotifyAddLilian_ProtoFunID_FunID;
const int stNotifyAddLilian_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyAddLilian_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyAddLilian_ProtoFunID_descriptor();
inline const ::std::string& stNotifyAddLilian_ProtoFunID_Name(stNotifyAddLilian_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyAddLilian_ProtoFunID_descriptor(), value);
}
inline bool stNotifyAddLilian_ProtoFunID_Parse(
    const ::std::string& name, stNotifyAddLilian_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyAddLilian_ProtoFunID>(
    stNotifyAddLilian_ProtoFunID_descriptor(), name, value);
}
enum stEnterGuildCopymap_ProtoModID {
  stEnterGuildCopymap_ProtoModID_ModID = 3
};
bool stEnterGuildCopymap_ProtoModID_IsValid(int value);
const stEnterGuildCopymap_ProtoModID stEnterGuildCopymap_ProtoModID_ProtoModID_MIN = stEnterGuildCopymap_ProtoModID_ModID;
const stEnterGuildCopymap_ProtoModID stEnterGuildCopymap_ProtoModID_ProtoModID_MAX = stEnterGuildCopymap_ProtoModID_ModID;
const int stEnterGuildCopymap_ProtoModID_ProtoModID_ARRAYSIZE = stEnterGuildCopymap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterGuildCopymap_ProtoModID_descriptor();
inline const ::std::string& stEnterGuildCopymap_ProtoModID_Name(stEnterGuildCopymap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterGuildCopymap_ProtoModID_descriptor(), value);
}
inline bool stEnterGuildCopymap_ProtoModID_Parse(
    const ::std::string& name, stEnterGuildCopymap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterGuildCopymap_ProtoModID>(
    stEnterGuildCopymap_ProtoModID_descriptor(), name, value);
}
enum stEnterGuildCopymap_ProtoFunID {
  stEnterGuildCopymap_ProtoFunID_FunID = 39
};
bool stEnterGuildCopymap_ProtoFunID_IsValid(int value);
const stEnterGuildCopymap_ProtoFunID stEnterGuildCopymap_ProtoFunID_ProtoFunID_MIN = stEnterGuildCopymap_ProtoFunID_FunID;
const stEnterGuildCopymap_ProtoFunID stEnterGuildCopymap_ProtoFunID_ProtoFunID_MAX = stEnterGuildCopymap_ProtoFunID_FunID;
const int stEnterGuildCopymap_ProtoFunID_ProtoFunID_ARRAYSIZE = stEnterGuildCopymap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterGuildCopymap_ProtoFunID_descriptor();
inline const ::std::string& stEnterGuildCopymap_ProtoFunID_Name(stEnterGuildCopymap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterGuildCopymap_ProtoFunID_descriptor(), value);
}
inline bool stEnterGuildCopymap_ProtoFunID_Parse(
    const ::std::string& name, stEnterGuildCopymap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterGuildCopymap_ProtoFunID>(
    stEnterGuildCopymap_ProtoFunID_descriptor(), name, value);
}
enum stSynMyContribyte_ProtoModID {
  stSynMyContribyte_ProtoModID_ModID = 3
};
bool stSynMyContribyte_ProtoModID_IsValid(int value);
const stSynMyContribyte_ProtoModID stSynMyContribyte_ProtoModID_ProtoModID_MIN = stSynMyContribyte_ProtoModID_ModID;
const stSynMyContribyte_ProtoModID stSynMyContribyte_ProtoModID_ProtoModID_MAX = stSynMyContribyte_ProtoModID_ModID;
const int stSynMyContribyte_ProtoModID_ProtoModID_ARRAYSIZE = stSynMyContribyte_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynMyContribyte_ProtoModID_descriptor();
inline const ::std::string& stSynMyContribyte_ProtoModID_Name(stSynMyContribyte_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynMyContribyte_ProtoModID_descriptor(), value);
}
inline bool stSynMyContribyte_ProtoModID_Parse(
    const ::std::string& name, stSynMyContribyte_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynMyContribyte_ProtoModID>(
    stSynMyContribyte_ProtoModID_descriptor(), name, value);
}
enum stSynMyContribyte_ProtoFunID {
  stSynMyContribyte_ProtoFunID_FunID = 40
};
bool stSynMyContribyte_ProtoFunID_IsValid(int value);
const stSynMyContribyte_ProtoFunID stSynMyContribyte_ProtoFunID_ProtoFunID_MIN = stSynMyContribyte_ProtoFunID_FunID;
const stSynMyContribyte_ProtoFunID stSynMyContribyte_ProtoFunID_ProtoFunID_MAX = stSynMyContribyte_ProtoFunID_FunID;
const int stSynMyContribyte_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynMyContribyte_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynMyContribyte_ProtoFunID_descriptor();
inline const ::std::string& stSynMyContribyte_ProtoFunID_Name(stSynMyContribyte_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynMyContribyte_ProtoFunID_descriptor(), value);
}
inline bool stSynMyContribyte_ProtoFunID_Parse(
    const ::std::string& name, stSynMyContribyte_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynMyContribyte_ProtoFunID>(
    stSynMyContribyte_ProtoFunID_descriptor(), name, value);
}
enum stOnlineUserGMType_ProtoModID {
  stOnlineUserGMType_ProtoModID_ModID = 3
};
bool stOnlineUserGMType_ProtoModID_IsValid(int value);
const stOnlineUserGMType_ProtoModID stOnlineUserGMType_ProtoModID_ProtoModID_MIN = stOnlineUserGMType_ProtoModID_ModID;
const stOnlineUserGMType_ProtoModID stOnlineUserGMType_ProtoModID_ProtoModID_MAX = stOnlineUserGMType_ProtoModID_ModID;
const int stOnlineUserGMType_ProtoModID_ProtoModID_ARRAYSIZE = stOnlineUserGMType_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOnlineUserGMType_ProtoModID_descriptor();
inline const ::std::string& stOnlineUserGMType_ProtoModID_Name(stOnlineUserGMType_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOnlineUserGMType_ProtoModID_descriptor(), value);
}
inline bool stOnlineUserGMType_ProtoModID_Parse(
    const ::std::string& name, stOnlineUserGMType_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOnlineUserGMType_ProtoModID>(
    stOnlineUserGMType_ProtoModID_descriptor(), name, value);
}
enum stOnlineUserGMType_ProtoFunID {
  stOnlineUserGMType_ProtoFunID_FunID = 41
};
bool stOnlineUserGMType_ProtoFunID_IsValid(int value);
const stOnlineUserGMType_ProtoFunID stOnlineUserGMType_ProtoFunID_ProtoFunID_MIN = stOnlineUserGMType_ProtoFunID_FunID;
const stOnlineUserGMType_ProtoFunID stOnlineUserGMType_ProtoFunID_ProtoFunID_MAX = stOnlineUserGMType_ProtoFunID_FunID;
const int stOnlineUserGMType_ProtoFunID_ProtoFunID_ARRAYSIZE = stOnlineUserGMType_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOnlineUserGMType_ProtoFunID_descriptor();
inline const ::std::string& stOnlineUserGMType_ProtoFunID_Name(stOnlineUserGMType_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOnlineUserGMType_ProtoFunID_descriptor(), value);
}
inline bool stOnlineUserGMType_ProtoFunID_Parse(
    const ::std::string& name, stOnlineUserGMType_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOnlineUserGMType_ProtoFunID>(
    stOnlineUserGMType_ProtoFunID_descriptor(), name, value);
}
enum stForbidOnlineUser_ProtoModID {
  stForbidOnlineUser_ProtoModID_ModID = 3
};
bool stForbidOnlineUser_ProtoModID_IsValid(int value);
const stForbidOnlineUser_ProtoModID stForbidOnlineUser_ProtoModID_ProtoModID_MIN = stForbidOnlineUser_ProtoModID_ModID;
const stForbidOnlineUser_ProtoModID stForbidOnlineUser_ProtoModID_ProtoModID_MAX = stForbidOnlineUser_ProtoModID_ModID;
const int stForbidOnlineUser_ProtoModID_ProtoModID_ARRAYSIZE = stForbidOnlineUser_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stForbidOnlineUser_ProtoModID_descriptor();
inline const ::std::string& stForbidOnlineUser_ProtoModID_Name(stForbidOnlineUser_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stForbidOnlineUser_ProtoModID_descriptor(), value);
}
inline bool stForbidOnlineUser_ProtoModID_Parse(
    const ::std::string& name, stForbidOnlineUser_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stForbidOnlineUser_ProtoModID>(
    stForbidOnlineUser_ProtoModID_descriptor(), name, value);
}
enum stForbidOnlineUser_ProtoFunID {
  stForbidOnlineUser_ProtoFunID_FunID = 42
};
bool stForbidOnlineUser_ProtoFunID_IsValid(int value);
const stForbidOnlineUser_ProtoFunID stForbidOnlineUser_ProtoFunID_ProtoFunID_MIN = stForbidOnlineUser_ProtoFunID_FunID;
const stForbidOnlineUser_ProtoFunID stForbidOnlineUser_ProtoFunID_ProtoFunID_MAX = stForbidOnlineUser_ProtoFunID_FunID;
const int stForbidOnlineUser_ProtoFunID_ProtoFunID_ARRAYSIZE = stForbidOnlineUser_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stForbidOnlineUser_ProtoFunID_descriptor();
inline const ::std::string& stForbidOnlineUser_ProtoFunID_Name(stForbidOnlineUser_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stForbidOnlineUser_ProtoFunID_descriptor(), value);
}
inline bool stForbidOnlineUser_ProtoFunID_Parse(
    const ::std::string& name, stForbidOnlineUser_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stForbidOnlineUser_ProtoFunID>(
    stForbidOnlineUser_ProtoFunID_descriptor(), name, value);
}
enum stOne2OnePVPFinish_ProtoModID {
  stOne2OnePVPFinish_ProtoModID_ModID = 3
};
bool stOne2OnePVPFinish_ProtoModID_IsValid(int value);
const stOne2OnePVPFinish_ProtoModID stOne2OnePVPFinish_ProtoModID_ProtoModID_MIN = stOne2OnePVPFinish_ProtoModID_ModID;
const stOne2OnePVPFinish_ProtoModID stOne2OnePVPFinish_ProtoModID_ProtoModID_MAX = stOne2OnePVPFinish_ProtoModID_ModID;
const int stOne2OnePVPFinish_ProtoModID_ProtoModID_ARRAYSIZE = stOne2OnePVPFinish_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePVPFinish_ProtoModID_descriptor();
inline const ::std::string& stOne2OnePVPFinish_ProtoModID_Name(stOne2OnePVPFinish_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePVPFinish_ProtoModID_descriptor(), value);
}
inline bool stOne2OnePVPFinish_ProtoModID_Parse(
    const ::std::string& name, stOne2OnePVPFinish_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePVPFinish_ProtoModID>(
    stOne2OnePVPFinish_ProtoModID_descriptor(), name, value);
}
enum stOne2OnePVPFinish_ProtoFunID {
  stOne2OnePVPFinish_ProtoFunID_FunID = 43
};
bool stOne2OnePVPFinish_ProtoFunID_IsValid(int value);
const stOne2OnePVPFinish_ProtoFunID stOne2OnePVPFinish_ProtoFunID_ProtoFunID_MIN = stOne2OnePVPFinish_ProtoFunID_FunID;
const stOne2OnePVPFinish_ProtoFunID stOne2OnePVPFinish_ProtoFunID_ProtoFunID_MAX = stOne2OnePVPFinish_ProtoFunID_FunID;
const int stOne2OnePVPFinish_ProtoFunID_ProtoFunID_ARRAYSIZE = stOne2OnePVPFinish_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePVPFinish_ProtoFunID_descriptor();
inline const ::std::string& stOne2OnePVPFinish_ProtoFunID_Name(stOne2OnePVPFinish_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePVPFinish_ProtoFunID_descriptor(), value);
}
inline bool stOne2OnePVPFinish_ProtoFunID_Parse(
    const ::std::string& name, stOne2OnePVPFinish_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePVPFinish_ProtoFunID>(
    stOne2OnePVPFinish_ProtoFunID_descriptor(), name, value);
}
enum stSynActivityConfig_ProtoModID {
  stSynActivityConfig_ProtoModID_ModID = 3
};
bool stSynActivityConfig_ProtoModID_IsValid(int value);
const stSynActivityConfig_ProtoModID stSynActivityConfig_ProtoModID_ProtoModID_MIN = stSynActivityConfig_ProtoModID_ModID;
const stSynActivityConfig_ProtoModID stSynActivityConfig_ProtoModID_ProtoModID_MAX = stSynActivityConfig_ProtoModID_ModID;
const int stSynActivityConfig_ProtoModID_ProtoModID_ARRAYSIZE = stSynActivityConfig_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynActivityConfig_ProtoModID_descriptor();
inline const ::std::string& stSynActivityConfig_ProtoModID_Name(stSynActivityConfig_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynActivityConfig_ProtoModID_descriptor(), value);
}
inline bool stSynActivityConfig_ProtoModID_Parse(
    const ::std::string& name, stSynActivityConfig_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynActivityConfig_ProtoModID>(
    stSynActivityConfig_ProtoModID_descriptor(), name, value);
}
enum stSynActivityConfig_ProtoFunID {
  stSynActivityConfig_ProtoFunID_FunID = 44
};
bool stSynActivityConfig_ProtoFunID_IsValid(int value);
const stSynActivityConfig_ProtoFunID stSynActivityConfig_ProtoFunID_ProtoFunID_MIN = stSynActivityConfig_ProtoFunID_FunID;
const stSynActivityConfig_ProtoFunID stSynActivityConfig_ProtoFunID_ProtoFunID_MAX = stSynActivityConfig_ProtoFunID_FunID;
const int stSynActivityConfig_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynActivityConfig_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynActivityConfig_ProtoFunID_descriptor();
inline const ::std::string& stSynActivityConfig_ProtoFunID_Name(stSynActivityConfig_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynActivityConfig_ProtoFunID_descriptor(), value);
}
inline bool stSynActivityConfig_ProtoFunID_Parse(
    const ::std::string& name, stSynActivityConfig_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynActivityConfig_ProtoFunID>(
    stSynActivityConfig_ProtoFunID_descriptor(), name, value);
}
enum stCaptureTreasureFail_ProtoModID {
  stCaptureTreasureFail_ProtoModID_ModID = 3
};
bool stCaptureTreasureFail_ProtoModID_IsValid(int value);
const stCaptureTreasureFail_ProtoModID stCaptureTreasureFail_ProtoModID_ProtoModID_MIN = stCaptureTreasureFail_ProtoModID_ModID;
const stCaptureTreasureFail_ProtoModID stCaptureTreasureFail_ProtoModID_ProtoModID_MAX = stCaptureTreasureFail_ProtoModID_ModID;
const int stCaptureTreasureFail_ProtoModID_ProtoModID_ARRAYSIZE = stCaptureTreasureFail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCaptureTreasureFail_ProtoModID_descriptor();
inline const ::std::string& stCaptureTreasureFail_ProtoModID_Name(stCaptureTreasureFail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCaptureTreasureFail_ProtoModID_descriptor(), value);
}
inline bool stCaptureTreasureFail_ProtoModID_Parse(
    const ::std::string& name, stCaptureTreasureFail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCaptureTreasureFail_ProtoModID>(
    stCaptureTreasureFail_ProtoModID_descriptor(), name, value);
}
enum stCaptureTreasureFail_ProtoFunID {
  stCaptureTreasureFail_ProtoFunID_FunID = 45
};
bool stCaptureTreasureFail_ProtoFunID_IsValid(int value);
const stCaptureTreasureFail_ProtoFunID stCaptureTreasureFail_ProtoFunID_ProtoFunID_MIN = stCaptureTreasureFail_ProtoFunID_FunID;
const stCaptureTreasureFail_ProtoFunID stCaptureTreasureFail_ProtoFunID_ProtoFunID_MAX = stCaptureTreasureFail_ProtoFunID_FunID;
const int stCaptureTreasureFail_ProtoFunID_ProtoFunID_ARRAYSIZE = stCaptureTreasureFail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCaptureTreasureFail_ProtoFunID_descriptor();
inline const ::std::string& stCaptureTreasureFail_ProtoFunID_Name(stCaptureTreasureFail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCaptureTreasureFail_ProtoFunID_descriptor(), value);
}
inline bool stCaptureTreasureFail_ProtoFunID_Parse(
    const ::std::string& name, stCaptureTreasureFail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCaptureTreasureFail_ProtoFunID>(
    stCaptureTreasureFail_ProtoFunID_descriptor(), name, value);
}
enum stSynRankModuleInfo_ProtoModID {
  stSynRankModuleInfo_ProtoModID_ModID = 3
};
bool stSynRankModuleInfo_ProtoModID_IsValid(int value);
const stSynRankModuleInfo_ProtoModID stSynRankModuleInfo_ProtoModID_ProtoModID_MIN = stSynRankModuleInfo_ProtoModID_ModID;
const stSynRankModuleInfo_ProtoModID stSynRankModuleInfo_ProtoModID_ProtoModID_MAX = stSynRankModuleInfo_ProtoModID_ModID;
const int stSynRankModuleInfo_ProtoModID_ProtoModID_ARRAYSIZE = stSynRankModuleInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRankModuleInfo_ProtoModID_descriptor();
inline const ::std::string& stSynRankModuleInfo_ProtoModID_Name(stSynRankModuleInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRankModuleInfo_ProtoModID_descriptor(), value);
}
inline bool stSynRankModuleInfo_ProtoModID_Parse(
    const ::std::string& name, stSynRankModuleInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRankModuleInfo_ProtoModID>(
    stSynRankModuleInfo_ProtoModID_descriptor(), name, value);
}
enum stSynRankModuleInfo_ProtoFunID {
  stSynRankModuleInfo_ProtoFunID_FunID = 46
};
bool stSynRankModuleInfo_ProtoFunID_IsValid(int value);
const stSynRankModuleInfo_ProtoFunID stSynRankModuleInfo_ProtoFunID_ProtoFunID_MIN = stSynRankModuleInfo_ProtoFunID_FunID;
const stSynRankModuleInfo_ProtoFunID stSynRankModuleInfo_ProtoFunID_ProtoFunID_MAX = stSynRankModuleInfo_ProtoFunID_FunID;
const int stSynRankModuleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynRankModuleInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRankModuleInfo_ProtoFunID_descriptor();
inline const ::std::string& stSynRankModuleInfo_ProtoFunID_Name(stSynRankModuleInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRankModuleInfo_ProtoFunID_descriptor(), value);
}
inline bool stSynRankModuleInfo_ProtoFunID_Parse(
    const ::std::string& name, stSynRankModuleInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRankModuleInfo_ProtoFunID>(
    stSynRankModuleInfo_ProtoFunID_descriptor(), name, value);
}
enum stGiveGiftBagReward_ProtoModID {
  stGiveGiftBagReward_ProtoModID_ModID = 3
};
bool stGiveGiftBagReward_ProtoModID_IsValid(int value);
const stGiveGiftBagReward_ProtoModID stGiveGiftBagReward_ProtoModID_ProtoModID_MIN = stGiveGiftBagReward_ProtoModID_ModID;
const stGiveGiftBagReward_ProtoModID stGiveGiftBagReward_ProtoModID_ProtoModID_MAX = stGiveGiftBagReward_ProtoModID_ModID;
const int stGiveGiftBagReward_ProtoModID_ProtoModID_ARRAYSIZE = stGiveGiftBagReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveGiftBagReward_ProtoModID_descriptor();
inline const ::std::string& stGiveGiftBagReward_ProtoModID_Name(stGiveGiftBagReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveGiftBagReward_ProtoModID_descriptor(), value);
}
inline bool stGiveGiftBagReward_ProtoModID_Parse(
    const ::std::string& name, stGiveGiftBagReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveGiftBagReward_ProtoModID>(
    stGiveGiftBagReward_ProtoModID_descriptor(), name, value);
}
enum stGiveGiftBagReward_ProtoFunID {
  stGiveGiftBagReward_ProtoFunID_FunID = 47
};
bool stGiveGiftBagReward_ProtoFunID_IsValid(int value);
const stGiveGiftBagReward_ProtoFunID stGiveGiftBagReward_ProtoFunID_ProtoFunID_MIN = stGiveGiftBagReward_ProtoFunID_FunID;
const stGiveGiftBagReward_ProtoFunID stGiveGiftBagReward_ProtoFunID_ProtoFunID_MAX = stGiveGiftBagReward_ProtoFunID_FunID;
const int stGiveGiftBagReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stGiveGiftBagReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveGiftBagReward_ProtoFunID_descriptor();
inline const ::std::string& stGiveGiftBagReward_ProtoFunID_Name(stGiveGiftBagReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveGiftBagReward_ProtoFunID_descriptor(), value);
}
inline bool stGiveGiftBagReward_ProtoFunID_Parse(
    const ::std::string& name, stGiveGiftBagReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveGiftBagReward_ProtoFunID>(
    stGiveGiftBagReward_ProtoFunID_descriptor(), name, value);
}
enum stNotifyGameSvrCfg_ProtoModID {
  stNotifyGameSvrCfg_ProtoModID_ModID = 3
};
bool stNotifyGameSvrCfg_ProtoModID_IsValid(int value);
const stNotifyGameSvrCfg_ProtoModID stNotifyGameSvrCfg_ProtoModID_ProtoModID_MIN = stNotifyGameSvrCfg_ProtoModID_ModID;
const stNotifyGameSvrCfg_ProtoModID stNotifyGameSvrCfg_ProtoModID_ProtoModID_MAX = stNotifyGameSvrCfg_ProtoModID_ModID;
const int stNotifyGameSvrCfg_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyGameSvrCfg_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGameSvrCfg_ProtoModID_descriptor();
inline const ::std::string& stNotifyGameSvrCfg_ProtoModID_Name(stNotifyGameSvrCfg_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGameSvrCfg_ProtoModID_descriptor(), value);
}
inline bool stNotifyGameSvrCfg_ProtoModID_Parse(
    const ::std::string& name, stNotifyGameSvrCfg_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGameSvrCfg_ProtoModID>(
    stNotifyGameSvrCfg_ProtoModID_descriptor(), name, value);
}
enum stNotifyGameSvrCfg_ProtoFunID {
  stNotifyGameSvrCfg_ProtoFunID_FunID = 48
};
bool stNotifyGameSvrCfg_ProtoFunID_IsValid(int value);
const stNotifyGameSvrCfg_ProtoFunID stNotifyGameSvrCfg_ProtoFunID_ProtoFunID_MIN = stNotifyGameSvrCfg_ProtoFunID_FunID;
const stNotifyGameSvrCfg_ProtoFunID stNotifyGameSvrCfg_ProtoFunID_ProtoFunID_MAX = stNotifyGameSvrCfg_ProtoFunID_FunID;
const int stNotifyGameSvrCfg_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyGameSvrCfg_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGameSvrCfg_ProtoFunID_descriptor();
inline const ::std::string& stNotifyGameSvrCfg_ProtoFunID_Name(stNotifyGameSvrCfg_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGameSvrCfg_ProtoFunID_descriptor(), value);
}
inline bool stNotifyGameSvrCfg_ProtoFunID_Parse(
    const ::std::string& name, stNotifyGameSvrCfg_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGameSvrCfg_ProtoFunID>(
    stNotifyGameSvrCfg_ProtoFunID_descriptor(), name, value);
}
enum stNotifyCurEquipInfo_ProtoModID {
  stNotifyCurEquipInfo_ProtoModID_ModID = 3
};
bool stNotifyCurEquipInfo_ProtoModID_IsValid(int value);
const stNotifyCurEquipInfo_ProtoModID stNotifyCurEquipInfo_ProtoModID_ProtoModID_MIN = stNotifyCurEquipInfo_ProtoModID_ModID;
const stNotifyCurEquipInfo_ProtoModID stNotifyCurEquipInfo_ProtoModID_ProtoModID_MAX = stNotifyCurEquipInfo_ProtoModID_ModID;
const int stNotifyCurEquipInfo_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyCurEquipInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyCurEquipInfo_ProtoModID_descriptor();
inline const ::std::string& stNotifyCurEquipInfo_ProtoModID_Name(stNotifyCurEquipInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyCurEquipInfo_ProtoModID_descriptor(), value);
}
inline bool stNotifyCurEquipInfo_ProtoModID_Parse(
    const ::std::string& name, stNotifyCurEquipInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyCurEquipInfo_ProtoModID>(
    stNotifyCurEquipInfo_ProtoModID_descriptor(), name, value);
}
enum stNotifyCurEquipInfo_ProtoFunID {
  stNotifyCurEquipInfo_ProtoFunID_FunID = 49
};
bool stNotifyCurEquipInfo_ProtoFunID_IsValid(int value);
const stNotifyCurEquipInfo_ProtoFunID stNotifyCurEquipInfo_ProtoFunID_ProtoFunID_MIN = stNotifyCurEquipInfo_ProtoFunID_FunID;
const stNotifyCurEquipInfo_ProtoFunID stNotifyCurEquipInfo_ProtoFunID_ProtoFunID_MAX = stNotifyCurEquipInfo_ProtoFunID_FunID;
const int stNotifyCurEquipInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyCurEquipInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyCurEquipInfo_ProtoFunID_descriptor();
inline const ::std::string& stNotifyCurEquipInfo_ProtoFunID_Name(stNotifyCurEquipInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyCurEquipInfo_ProtoFunID_descriptor(), value);
}
inline bool stNotifyCurEquipInfo_ProtoFunID_Parse(
    const ::std::string& name, stNotifyCurEquipInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyCurEquipInfo_ProtoFunID>(
    stNotifyCurEquipInfo_ProtoFunID_descriptor(), name, value);
}
enum stReloginGame_ProtoModID {
  stReloginGame_ProtoModID_ModID = 3
};
bool stReloginGame_ProtoModID_IsValid(int value);
const stReloginGame_ProtoModID stReloginGame_ProtoModID_ProtoModID_MIN = stReloginGame_ProtoModID_ModID;
const stReloginGame_ProtoModID stReloginGame_ProtoModID_ProtoModID_MAX = stReloginGame_ProtoModID_ModID;
const int stReloginGame_ProtoModID_ProtoModID_ARRAYSIZE = stReloginGame_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReloginGame_ProtoModID_descriptor();
inline const ::std::string& stReloginGame_ProtoModID_Name(stReloginGame_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReloginGame_ProtoModID_descriptor(), value);
}
inline bool stReloginGame_ProtoModID_Parse(
    const ::std::string& name, stReloginGame_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReloginGame_ProtoModID>(
    stReloginGame_ProtoModID_descriptor(), name, value);
}
enum stReloginGame_ProtoFunID {
  stReloginGame_ProtoFunID_FunID = 50
};
bool stReloginGame_ProtoFunID_IsValid(int value);
const stReloginGame_ProtoFunID stReloginGame_ProtoFunID_ProtoFunID_MIN = stReloginGame_ProtoFunID_FunID;
const stReloginGame_ProtoFunID stReloginGame_ProtoFunID_ProtoFunID_MAX = stReloginGame_ProtoFunID_FunID;
const int stReloginGame_ProtoFunID_ProtoFunID_ARRAYSIZE = stReloginGame_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReloginGame_ProtoFunID_descriptor();
inline const ::std::string& stReloginGame_ProtoFunID_Name(stReloginGame_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReloginGame_ProtoFunID_descriptor(), value);
}
inline bool stReloginGame_ProtoFunID_Parse(
    const ::std::string& name, stReloginGame_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReloginGame_ProtoFunID>(
    stReloginGame_ProtoFunID_descriptor(), name, value);
}
enum stTeamCopyMapFinish_ProtoModID {
  stTeamCopyMapFinish_ProtoModID_ModID = 3
};
bool stTeamCopyMapFinish_ProtoModID_IsValid(int value);
const stTeamCopyMapFinish_ProtoModID stTeamCopyMapFinish_ProtoModID_ProtoModID_MIN = stTeamCopyMapFinish_ProtoModID_ModID;
const stTeamCopyMapFinish_ProtoModID stTeamCopyMapFinish_ProtoModID_ProtoModID_MAX = stTeamCopyMapFinish_ProtoModID_ModID;
const int stTeamCopyMapFinish_ProtoModID_ProtoModID_ARRAYSIZE = stTeamCopyMapFinish_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTeamCopyMapFinish_ProtoModID_descriptor();
inline const ::std::string& stTeamCopyMapFinish_ProtoModID_Name(stTeamCopyMapFinish_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTeamCopyMapFinish_ProtoModID_descriptor(), value);
}
inline bool stTeamCopyMapFinish_ProtoModID_Parse(
    const ::std::string& name, stTeamCopyMapFinish_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTeamCopyMapFinish_ProtoModID>(
    stTeamCopyMapFinish_ProtoModID_descriptor(), name, value);
}
enum stTeamCopyMapFinish_ProtoFunID {
  stTeamCopyMapFinish_ProtoFunID_FunID = 51
};
bool stTeamCopyMapFinish_ProtoFunID_IsValid(int value);
const stTeamCopyMapFinish_ProtoFunID stTeamCopyMapFinish_ProtoFunID_ProtoFunID_MIN = stTeamCopyMapFinish_ProtoFunID_FunID;
const stTeamCopyMapFinish_ProtoFunID stTeamCopyMapFinish_ProtoFunID_ProtoFunID_MAX = stTeamCopyMapFinish_ProtoFunID_FunID;
const int stTeamCopyMapFinish_ProtoFunID_ProtoFunID_ARRAYSIZE = stTeamCopyMapFinish_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTeamCopyMapFinish_ProtoFunID_descriptor();
inline const ::std::string& stTeamCopyMapFinish_ProtoFunID_Name(stTeamCopyMapFinish_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTeamCopyMapFinish_ProtoFunID_descriptor(), value);
}
inline bool stTeamCopyMapFinish_ProtoFunID_Parse(
    const ::std::string& name, stTeamCopyMapFinish_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTeamCopyMapFinish_ProtoFunID>(
    stTeamCopyMapFinish_ProtoFunID_descriptor(), name, value);
}
enum stUserOnlineSendFirstKillInfo_ProtoModID {
  stUserOnlineSendFirstKillInfo_ProtoModID_ModID = 3
};
bool stUserOnlineSendFirstKillInfo_ProtoModID_IsValid(int value);
const stUserOnlineSendFirstKillInfo_ProtoModID stUserOnlineSendFirstKillInfo_ProtoModID_ProtoModID_MIN = stUserOnlineSendFirstKillInfo_ProtoModID_ModID;
const stUserOnlineSendFirstKillInfo_ProtoModID stUserOnlineSendFirstKillInfo_ProtoModID_ProtoModID_MAX = stUserOnlineSendFirstKillInfo_ProtoModID_ModID;
const int stUserOnlineSendFirstKillInfo_ProtoModID_ProtoModID_ARRAYSIZE = stUserOnlineSendFirstKillInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserOnlineSendFirstKillInfo_ProtoModID_descriptor();
inline const ::std::string& stUserOnlineSendFirstKillInfo_ProtoModID_Name(stUserOnlineSendFirstKillInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserOnlineSendFirstKillInfo_ProtoModID_descriptor(), value);
}
inline bool stUserOnlineSendFirstKillInfo_ProtoModID_Parse(
    const ::std::string& name, stUserOnlineSendFirstKillInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserOnlineSendFirstKillInfo_ProtoModID>(
    stUserOnlineSendFirstKillInfo_ProtoModID_descriptor(), name, value);
}
enum stUserOnlineSendFirstKillInfo_ProtoFunID {
  stUserOnlineSendFirstKillInfo_ProtoFunID_FunID = 52
};
bool stUserOnlineSendFirstKillInfo_ProtoFunID_IsValid(int value);
const stUserOnlineSendFirstKillInfo_ProtoFunID stUserOnlineSendFirstKillInfo_ProtoFunID_ProtoFunID_MIN = stUserOnlineSendFirstKillInfo_ProtoFunID_FunID;
const stUserOnlineSendFirstKillInfo_ProtoFunID stUserOnlineSendFirstKillInfo_ProtoFunID_ProtoFunID_MAX = stUserOnlineSendFirstKillInfo_ProtoFunID_FunID;
const int stUserOnlineSendFirstKillInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserOnlineSendFirstKillInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserOnlineSendFirstKillInfo_ProtoFunID_descriptor();
inline const ::std::string& stUserOnlineSendFirstKillInfo_ProtoFunID_Name(stUserOnlineSendFirstKillInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserOnlineSendFirstKillInfo_ProtoFunID_descriptor(), value);
}
inline bool stUserOnlineSendFirstKillInfo_ProtoFunID_Parse(
    const ::std::string& name, stUserOnlineSendFirstKillInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserOnlineSendFirstKillInfo_ProtoFunID>(
    stUserOnlineSendFirstKillInfo_ProtoFunID_descriptor(), name, value);
}
enum stTeamFinishFirstKill_ProtoModID {
  stTeamFinishFirstKill_ProtoModID_ModID = 3
};
bool stTeamFinishFirstKill_ProtoModID_IsValid(int value);
const stTeamFinishFirstKill_ProtoModID stTeamFinishFirstKill_ProtoModID_ProtoModID_MIN = stTeamFinishFirstKill_ProtoModID_ModID;
const stTeamFinishFirstKill_ProtoModID stTeamFinishFirstKill_ProtoModID_ProtoModID_MAX = stTeamFinishFirstKill_ProtoModID_ModID;
const int stTeamFinishFirstKill_ProtoModID_ProtoModID_ARRAYSIZE = stTeamFinishFirstKill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTeamFinishFirstKill_ProtoModID_descriptor();
inline const ::std::string& stTeamFinishFirstKill_ProtoModID_Name(stTeamFinishFirstKill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTeamFinishFirstKill_ProtoModID_descriptor(), value);
}
inline bool stTeamFinishFirstKill_ProtoModID_Parse(
    const ::std::string& name, stTeamFinishFirstKill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTeamFinishFirstKill_ProtoModID>(
    stTeamFinishFirstKill_ProtoModID_descriptor(), name, value);
}
enum stTeamFinishFirstKill_ProtoFunID {
  stTeamFinishFirstKill_ProtoFunID_FunID = 53
};
bool stTeamFinishFirstKill_ProtoFunID_IsValid(int value);
const stTeamFinishFirstKill_ProtoFunID stTeamFinishFirstKill_ProtoFunID_ProtoFunID_MIN = stTeamFinishFirstKill_ProtoFunID_FunID;
const stTeamFinishFirstKill_ProtoFunID stTeamFinishFirstKill_ProtoFunID_ProtoFunID_MAX = stTeamFinishFirstKill_ProtoFunID_FunID;
const int stTeamFinishFirstKill_ProtoFunID_ProtoFunID_ARRAYSIZE = stTeamFinishFirstKill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTeamFinishFirstKill_ProtoFunID_descriptor();
inline const ::std::string& stTeamFinishFirstKill_ProtoFunID_Name(stTeamFinishFirstKill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTeamFinishFirstKill_ProtoFunID_descriptor(), value);
}
inline bool stTeamFinishFirstKill_ProtoFunID_Parse(
    const ::std::string& name, stTeamFinishFirstKill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTeamFinishFirstKill_ProtoFunID>(
    stTeamFinishFirstKill_ProtoFunID_descriptor(), name, value);
}
enum stSetClearWorldBossTime_ProtoModID {
  stSetClearWorldBossTime_ProtoModID_ModID = 3
};
bool stSetClearWorldBossTime_ProtoModID_IsValid(int value);
const stSetClearWorldBossTime_ProtoModID stSetClearWorldBossTime_ProtoModID_ProtoModID_MIN = stSetClearWorldBossTime_ProtoModID_ModID;
const stSetClearWorldBossTime_ProtoModID stSetClearWorldBossTime_ProtoModID_ProtoModID_MAX = stSetClearWorldBossTime_ProtoModID_ModID;
const int stSetClearWorldBossTime_ProtoModID_ProtoModID_ARRAYSIZE = stSetClearWorldBossTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSetClearWorldBossTime_ProtoModID_descriptor();
inline const ::std::string& stSetClearWorldBossTime_ProtoModID_Name(stSetClearWorldBossTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSetClearWorldBossTime_ProtoModID_descriptor(), value);
}
inline bool stSetClearWorldBossTime_ProtoModID_Parse(
    const ::std::string& name, stSetClearWorldBossTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSetClearWorldBossTime_ProtoModID>(
    stSetClearWorldBossTime_ProtoModID_descriptor(), name, value);
}
enum stSetClearWorldBossTime_ProtoFunID {
  stSetClearWorldBossTime_ProtoFunID_FunID = 54
};
bool stSetClearWorldBossTime_ProtoFunID_IsValid(int value);
const stSetClearWorldBossTime_ProtoFunID stSetClearWorldBossTime_ProtoFunID_ProtoFunID_MIN = stSetClearWorldBossTime_ProtoFunID_FunID;
const stSetClearWorldBossTime_ProtoFunID stSetClearWorldBossTime_ProtoFunID_ProtoFunID_MAX = stSetClearWorldBossTime_ProtoFunID_FunID;
const int stSetClearWorldBossTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stSetClearWorldBossTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSetClearWorldBossTime_ProtoFunID_descriptor();
inline const ::std::string& stSetClearWorldBossTime_ProtoFunID_Name(stSetClearWorldBossTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSetClearWorldBossTime_ProtoFunID_descriptor(), value);
}
inline bool stSetClearWorldBossTime_ProtoFunID_Parse(
    const ::std::string& name, stSetClearWorldBossTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSetClearWorldBossTime_ProtoFunID>(
    stSetClearWorldBossTime_ProtoFunID_descriptor(), name, value);
}
enum stSetWorldBossBuyNum_ProtoModID {
  stSetWorldBossBuyNum_ProtoModID_ModID = 3
};
bool stSetWorldBossBuyNum_ProtoModID_IsValid(int value);
const stSetWorldBossBuyNum_ProtoModID stSetWorldBossBuyNum_ProtoModID_ProtoModID_MIN = stSetWorldBossBuyNum_ProtoModID_ModID;
const stSetWorldBossBuyNum_ProtoModID stSetWorldBossBuyNum_ProtoModID_ProtoModID_MAX = stSetWorldBossBuyNum_ProtoModID_ModID;
const int stSetWorldBossBuyNum_ProtoModID_ProtoModID_ARRAYSIZE = stSetWorldBossBuyNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSetWorldBossBuyNum_ProtoModID_descriptor();
inline const ::std::string& stSetWorldBossBuyNum_ProtoModID_Name(stSetWorldBossBuyNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSetWorldBossBuyNum_ProtoModID_descriptor(), value);
}
inline bool stSetWorldBossBuyNum_ProtoModID_Parse(
    const ::std::string& name, stSetWorldBossBuyNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSetWorldBossBuyNum_ProtoModID>(
    stSetWorldBossBuyNum_ProtoModID_descriptor(), name, value);
}
enum stSetWorldBossBuyNum_ProtoFunID {
  stSetWorldBossBuyNum_ProtoFunID_FunID = 55
};
bool stSetWorldBossBuyNum_ProtoFunID_IsValid(int value);
const stSetWorldBossBuyNum_ProtoFunID stSetWorldBossBuyNum_ProtoFunID_ProtoFunID_MIN = stSetWorldBossBuyNum_ProtoFunID_FunID;
const stSetWorldBossBuyNum_ProtoFunID stSetWorldBossBuyNum_ProtoFunID_ProtoFunID_MAX = stSetWorldBossBuyNum_ProtoFunID_FunID;
const int stSetWorldBossBuyNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stSetWorldBossBuyNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSetWorldBossBuyNum_ProtoFunID_descriptor();
inline const ::std::string& stSetWorldBossBuyNum_ProtoFunID_Name(stSetWorldBossBuyNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSetWorldBossBuyNum_ProtoFunID_descriptor(), value);
}
inline bool stSetWorldBossBuyNum_ProtoFunID_Parse(
    const ::std::string& name, stSetWorldBossBuyNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSetWorldBossBuyNum_ProtoFunID>(
    stSetWorldBossBuyNum_ProtoFunID_descriptor(), name, value);
}
enum stUserDecSP_ProtoModID {
  stUserDecSP_ProtoModID_ModID = 3
};
bool stUserDecSP_ProtoModID_IsValid(int value);
const stUserDecSP_ProtoModID stUserDecSP_ProtoModID_ProtoModID_MIN = stUserDecSP_ProtoModID_ModID;
const stUserDecSP_ProtoModID stUserDecSP_ProtoModID_ProtoModID_MAX = stUserDecSP_ProtoModID_ModID;
const int stUserDecSP_ProtoModID_ProtoModID_ARRAYSIZE = stUserDecSP_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserDecSP_ProtoModID_descriptor();
inline const ::std::string& stUserDecSP_ProtoModID_Name(stUserDecSP_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserDecSP_ProtoModID_descriptor(), value);
}
inline bool stUserDecSP_ProtoModID_Parse(
    const ::std::string& name, stUserDecSP_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserDecSP_ProtoModID>(
    stUserDecSP_ProtoModID_descriptor(), name, value);
}
enum stUserDecSP_ProtoFunID {
  stUserDecSP_ProtoFunID_FunID = 56
};
bool stUserDecSP_ProtoFunID_IsValid(int value);
const stUserDecSP_ProtoFunID stUserDecSP_ProtoFunID_ProtoFunID_MIN = stUserDecSP_ProtoFunID_FunID;
const stUserDecSP_ProtoFunID stUserDecSP_ProtoFunID_ProtoFunID_MAX = stUserDecSP_ProtoFunID_FunID;
const int stUserDecSP_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserDecSP_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserDecSP_ProtoFunID_descriptor();
inline const ::std::string& stUserDecSP_ProtoFunID_Name(stUserDecSP_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserDecSP_ProtoFunID_descriptor(), value);
}
inline bool stUserDecSP_ProtoFunID_Parse(
    const ::std::string& name, stUserDecSP_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserDecSP_ProtoFunID>(
    stUserDecSP_ProtoFunID_descriptor(), name, value);
}
enum stUsreDecLilian_ProtoModID {
  stUsreDecLilian_ProtoModID_ModID = 3
};
bool stUsreDecLilian_ProtoModID_IsValid(int value);
const stUsreDecLilian_ProtoModID stUsreDecLilian_ProtoModID_ProtoModID_MIN = stUsreDecLilian_ProtoModID_ModID;
const stUsreDecLilian_ProtoModID stUsreDecLilian_ProtoModID_ProtoModID_MAX = stUsreDecLilian_ProtoModID_ModID;
const int stUsreDecLilian_ProtoModID_ProtoModID_ARRAYSIZE = stUsreDecLilian_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUsreDecLilian_ProtoModID_descriptor();
inline const ::std::string& stUsreDecLilian_ProtoModID_Name(stUsreDecLilian_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUsreDecLilian_ProtoModID_descriptor(), value);
}
inline bool stUsreDecLilian_ProtoModID_Parse(
    const ::std::string& name, stUsreDecLilian_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUsreDecLilian_ProtoModID>(
    stUsreDecLilian_ProtoModID_descriptor(), name, value);
}
enum stUsreDecLilian_ProtoFunID {
  stUsreDecLilian_ProtoFunID_FunID = 57
};
bool stUsreDecLilian_ProtoFunID_IsValid(int value);
const stUsreDecLilian_ProtoFunID stUsreDecLilian_ProtoFunID_ProtoFunID_MIN = stUsreDecLilian_ProtoFunID_FunID;
const stUsreDecLilian_ProtoFunID stUsreDecLilian_ProtoFunID_ProtoFunID_MAX = stUsreDecLilian_ProtoFunID_FunID;
const int stUsreDecLilian_ProtoFunID_ProtoFunID_ARRAYSIZE = stUsreDecLilian_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUsreDecLilian_ProtoFunID_descriptor();
inline const ::std::string& stUsreDecLilian_ProtoFunID_Name(stUsreDecLilian_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUsreDecLilian_ProtoFunID_descriptor(), value);
}
inline bool stUsreDecLilian_ProtoFunID_Parse(
    const ::std::string& name, stUsreDecLilian_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUsreDecLilian_ProtoFunID>(
    stUsreDecLilian_ProtoFunID_descriptor(), name, value);
}
enum stGuildCopymapFail_ProtoModID {
  stGuildCopymapFail_ProtoModID_ModID = 3
};
bool stGuildCopymapFail_ProtoModID_IsValid(int value);
const stGuildCopymapFail_ProtoModID stGuildCopymapFail_ProtoModID_ProtoModID_MIN = stGuildCopymapFail_ProtoModID_ModID;
const stGuildCopymapFail_ProtoModID stGuildCopymapFail_ProtoModID_ProtoModID_MAX = stGuildCopymapFail_ProtoModID_ModID;
const int stGuildCopymapFail_ProtoModID_ProtoModID_ARRAYSIZE = stGuildCopymapFail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildCopymapFail_ProtoModID_descriptor();
inline const ::std::string& stGuildCopymapFail_ProtoModID_Name(stGuildCopymapFail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildCopymapFail_ProtoModID_descriptor(), value);
}
inline bool stGuildCopymapFail_ProtoModID_Parse(
    const ::std::string& name, stGuildCopymapFail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildCopymapFail_ProtoModID>(
    stGuildCopymapFail_ProtoModID_descriptor(), name, value);
}
enum stGuildCopymapFail_ProtoFunID {
  stGuildCopymapFail_ProtoFunID_FunID = 58
};
bool stGuildCopymapFail_ProtoFunID_IsValid(int value);
const stGuildCopymapFail_ProtoFunID stGuildCopymapFail_ProtoFunID_ProtoFunID_MIN = stGuildCopymapFail_ProtoFunID_FunID;
const stGuildCopymapFail_ProtoFunID stGuildCopymapFail_ProtoFunID_ProtoFunID_MAX = stGuildCopymapFail_ProtoFunID_FunID;
const int stGuildCopymapFail_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuildCopymapFail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildCopymapFail_ProtoFunID_descriptor();
inline const ::std::string& stGuildCopymapFail_ProtoFunID_Name(stGuildCopymapFail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildCopymapFail_ProtoFunID_descriptor(), value);
}
inline bool stGuildCopymapFail_ProtoFunID_Parse(
    const ::std::string& name, stGuildCopymapFail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildCopymapFail_ProtoFunID>(
    stGuildCopymapFail_ProtoFunID_descriptor(), name, value);
}
enum stGuildCopymapKillBoss_ProtoModID {
  stGuildCopymapKillBoss_ProtoModID_ModID = 3
};
bool stGuildCopymapKillBoss_ProtoModID_IsValid(int value);
const stGuildCopymapKillBoss_ProtoModID stGuildCopymapKillBoss_ProtoModID_ProtoModID_MIN = stGuildCopymapKillBoss_ProtoModID_ModID;
const stGuildCopymapKillBoss_ProtoModID stGuildCopymapKillBoss_ProtoModID_ProtoModID_MAX = stGuildCopymapKillBoss_ProtoModID_ModID;
const int stGuildCopymapKillBoss_ProtoModID_ProtoModID_ARRAYSIZE = stGuildCopymapKillBoss_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildCopymapKillBoss_ProtoModID_descriptor();
inline const ::std::string& stGuildCopymapKillBoss_ProtoModID_Name(stGuildCopymapKillBoss_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildCopymapKillBoss_ProtoModID_descriptor(), value);
}
inline bool stGuildCopymapKillBoss_ProtoModID_Parse(
    const ::std::string& name, stGuildCopymapKillBoss_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildCopymapKillBoss_ProtoModID>(
    stGuildCopymapKillBoss_ProtoModID_descriptor(), name, value);
}
enum stGuildCopymapKillBoss_ProtoFunID {
  stGuildCopymapKillBoss_ProtoFunID_FunID = 59
};
bool stGuildCopymapKillBoss_ProtoFunID_IsValid(int value);
const stGuildCopymapKillBoss_ProtoFunID stGuildCopymapKillBoss_ProtoFunID_ProtoFunID_MIN = stGuildCopymapKillBoss_ProtoFunID_FunID;
const stGuildCopymapKillBoss_ProtoFunID stGuildCopymapKillBoss_ProtoFunID_ProtoFunID_MAX = stGuildCopymapKillBoss_ProtoFunID_FunID;
const int stGuildCopymapKillBoss_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuildCopymapKillBoss_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildCopymapKillBoss_ProtoFunID_descriptor();
inline const ::std::string& stGuildCopymapKillBoss_ProtoFunID_Name(stGuildCopymapKillBoss_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildCopymapKillBoss_ProtoFunID_descriptor(), value);
}
inline bool stGuildCopymapKillBoss_ProtoFunID_Parse(
    const ::std::string& name, stGuildCopymapKillBoss_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildCopymapKillBoss_ProtoFunID>(
    stGuildCopymapKillBoss_ProtoFunID_descriptor(), name, value);
}
enum stWorldBossCopymapFail_ProtoModID {
  stWorldBossCopymapFail_ProtoModID_ModID = 3
};
bool stWorldBossCopymapFail_ProtoModID_IsValid(int value);
const stWorldBossCopymapFail_ProtoModID stWorldBossCopymapFail_ProtoModID_ProtoModID_MIN = stWorldBossCopymapFail_ProtoModID_ModID;
const stWorldBossCopymapFail_ProtoModID stWorldBossCopymapFail_ProtoModID_ProtoModID_MAX = stWorldBossCopymapFail_ProtoModID_ModID;
const int stWorldBossCopymapFail_ProtoModID_ProtoModID_ARRAYSIZE = stWorldBossCopymapFail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWorldBossCopymapFail_ProtoModID_descriptor();
inline const ::std::string& stWorldBossCopymapFail_ProtoModID_Name(stWorldBossCopymapFail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWorldBossCopymapFail_ProtoModID_descriptor(), value);
}
inline bool stWorldBossCopymapFail_ProtoModID_Parse(
    const ::std::string& name, stWorldBossCopymapFail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWorldBossCopymapFail_ProtoModID>(
    stWorldBossCopymapFail_ProtoModID_descriptor(), name, value);
}
enum stWorldBossCopymapFail_ProtoFunID {
  stWorldBossCopymapFail_ProtoFunID_FunID = 60
};
bool stWorldBossCopymapFail_ProtoFunID_IsValid(int value);
const stWorldBossCopymapFail_ProtoFunID stWorldBossCopymapFail_ProtoFunID_ProtoFunID_MIN = stWorldBossCopymapFail_ProtoFunID_FunID;
const stWorldBossCopymapFail_ProtoFunID stWorldBossCopymapFail_ProtoFunID_ProtoFunID_MAX = stWorldBossCopymapFail_ProtoFunID_FunID;
const int stWorldBossCopymapFail_ProtoFunID_ProtoFunID_ARRAYSIZE = stWorldBossCopymapFail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWorldBossCopymapFail_ProtoFunID_descriptor();
inline const ::std::string& stWorldBossCopymapFail_ProtoFunID_Name(stWorldBossCopymapFail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWorldBossCopymapFail_ProtoFunID_descriptor(), value);
}
inline bool stWorldBossCopymapFail_ProtoFunID_Parse(
    const ::std::string& name, stWorldBossCopymapFail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWorldBossCopymapFail_ProtoFunID>(
    stWorldBossCopymapFail_ProtoFunID_descriptor(), name, value);
}
enum stKillWorldBoss_ProtoModID {
  stKillWorldBoss_ProtoModID_ModID = 3
};
bool stKillWorldBoss_ProtoModID_IsValid(int value);
const stKillWorldBoss_ProtoModID stKillWorldBoss_ProtoModID_ProtoModID_MIN = stKillWorldBoss_ProtoModID_ModID;
const stKillWorldBoss_ProtoModID stKillWorldBoss_ProtoModID_ProtoModID_MAX = stKillWorldBoss_ProtoModID_ModID;
const int stKillWorldBoss_ProtoModID_ProtoModID_ARRAYSIZE = stKillWorldBoss_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillWorldBoss_ProtoModID_descriptor();
inline const ::std::string& stKillWorldBoss_ProtoModID_Name(stKillWorldBoss_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillWorldBoss_ProtoModID_descriptor(), value);
}
inline bool stKillWorldBoss_ProtoModID_Parse(
    const ::std::string& name, stKillWorldBoss_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillWorldBoss_ProtoModID>(
    stKillWorldBoss_ProtoModID_descriptor(), name, value);
}
enum stKillWorldBoss_ProtoFunID {
  stKillWorldBoss_ProtoFunID_FunID = 61
};
bool stKillWorldBoss_ProtoFunID_IsValid(int value);
const stKillWorldBoss_ProtoFunID stKillWorldBoss_ProtoFunID_ProtoFunID_MIN = stKillWorldBoss_ProtoFunID_FunID;
const stKillWorldBoss_ProtoFunID stKillWorldBoss_ProtoFunID_ProtoFunID_MAX = stKillWorldBoss_ProtoFunID_FunID;
const int stKillWorldBoss_ProtoFunID_ProtoFunID_ARRAYSIZE = stKillWorldBoss_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillWorldBoss_ProtoFunID_descriptor();
inline const ::std::string& stKillWorldBoss_ProtoFunID_Name(stKillWorldBoss_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillWorldBoss_ProtoFunID_descriptor(), value);
}
inline bool stKillWorldBoss_ProtoFunID_Parse(
    const ::std::string& name, stKillWorldBoss_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillWorldBoss_ProtoFunID>(
    stKillWorldBoss_ProtoFunID_descriptor(), name, value);
}
enum stDrawHeroScoreReward_ProtoModID {
  stDrawHeroScoreReward_ProtoModID_ModID = 3
};
bool stDrawHeroScoreReward_ProtoModID_IsValid(int value);
const stDrawHeroScoreReward_ProtoModID stDrawHeroScoreReward_ProtoModID_ProtoModID_MIN = stDrawHeroScoreReward_ProtoModID_ModID;
const stDrawHeroScoreReward_ProtoModID stDrawHeroScoreReward_ProtoModID_ProtoModID_MAX = stDrawHeroScoreReward_ProtoModID_ModID;
const int stDrawHeroScoreReward_ProtoModID_ProtoModID_ARRAYSIZE = stDrawHeroScoreReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawHeroScoreReward_ProtoModID_descriptor();
inline const ::std::string& stDrawHeroScoreReward_ProtoModID_Name(stDrawHeroScoreReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawHeroScoreReward_ProtoModID_descriptor(), value);
}
inline bool stDrawHeroScoreReward_ProtoModID_Parse(
    const ::std::string& name, stDrawHeroScoreReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawHeroScoreReward_ProtoModID>(
    stDrawHeroScoreReward_ProtoModID_descriptor(), name, value);
}
enum stDrawHeroScoreReward_ProtoFunID {
  stDrawHeroScoreReward_ProtoFunID_FunID = 62
};
bool stDrawHeroScoreReward_ProtoFunID_IsValid(int value);
const stDrawHeroScoreReward_ProtoFunID stDrawHeroScoreReward_ProtoFunID_ProtoFunID_MIN = stDrawHeroScoreReward_ProtoFunID_FunID;
const stDrawHeroScoreReward_ProtoFunID stDrawHeroScoreReward_ProtoFunID_ProtoFunID_MAX = stDrawHeroScoreReward_ProtoFunID_FunID;
const int stDrawHeroScoreReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stDrawHeroScoreReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawHeroScoreReward_ProtoFunID_descriptor();
inline const ::std::string& stDrawHeroScoreReward_ProtoFunID_Name(stDrawHeroScoreReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawHeroScoreReward_ProtoFunID_descriptor(), value);
}
inline bool stDrawHeroScoreReward_ProtoFunID_Parse(
    const ::std::string& name, stDrawHeroScoreReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawHeroScoreReward_ProtoFunID>(
    stDrawHeroScoreReward_ProtoFunID_descriptor(), name, value);
}
enum stDrawHeroRankReward_ProtoModID {
  stDrawHeroRankReward_ProtoModID_ModID = 3
};
bool stDrawHeroRankReward_ProtoModID_IsValid(int value);
const stDrawHeroRankReward_ProtoModID stDrawHeroRankReward_ProtoModID_ProtoModID_MIN = stDrawHeroRankReward_ProtoModID_ModID;
const stDrawHeroRankReward_ProtoModID stDrawHeroRankReward_ProtoModID_ProtoModID_MAX = stDrawHeroRankReward_ProtoModID_ModID;
const int stDrawHeroRankReward_ProtoModID_ProtoModID_ARRAYSIZE = stDrawHeroRankReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_ProtoModID_descriptor();
inline const ::std::string& stDrawHeroRankReward_ProtoModID_Name(stDrawHeroRankReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawHeroRankReward_ProtoModID_descriptor(), value);
}
inline bool stDrawHeroRankReward_ProtoModID_Parse(
    const ::std::string& name, stDrawHeroRankReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawHeroRankReward_ProtoModID>(
    stDrawHeroRankReward_ProtoModID_descriptor(), name, value);
}
enum stDrawHeroRankReward_ProtoFunID {
  stDrawHeroRankReward_ProtoFunID_FunID = 63
};
bool stDrawHeroRankReward_ProtoFunID_IsValid(int value);
const stDrawHeroRankReward_ProtoFunID stDrawHeroRankReward_ProtoFunID_ProtoFunID_MIN = stDrawHeroRankReward_ProtoFunID_FunID;
const stDrawHeroRankReward_ProtoFunID stDrawHeroRankReward_ProtoFunID_ProtoFunID_MAX = stDrawHeroRankReward_ProtoFunID_FunID;
const int stDrawHeroRankReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stDrawHeroRankReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_ProtoFunID_descriptor();
inline const ::std::string& stDrawHeroRankReward_ProtoFunID_Name(stDrawHeroRankReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawHeroRankReward_ProtoFunID_descriptor(), value);
}
inline bool stDrawHeroRankReward_ProtoFunID_Parse(
    const ::std::string& name, stDrawHeroRankReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawHeroRankReward_ProtoFunID>(
    stDrawHeroRankReward_ProtoFunID_descriptor(), name, value);
}
enum stSetCompensationID_ProtoModID {
  stSetCompensationID_ProtoModID_ModID = 3
};
bool stSetCompensationID_ProtoModID_IsValid(int value);
const stSetCompensationID_ProtoModID stSetCompensationID_ProtoModID_ProtoModID_MIN = stSetCompensationID_ProtoModID_ModID;
const stSetCompensationID_ProtoModID stSetCompensationID_ProtoModID_ProtoModID_MAX = stSetCompensationID_ProtoModID_ModID;
const int stSetCompensationID_ProtoModID_ProtoModID_ARRAYSIZE = stSetCompensationID_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSetCompensationID_ProtoModID_descriptor();
inline const ::std::string& stSetCompensationID_ProtoModID_Name(stSetCompensationID_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSetCompensationID_ProtoModID_descriptor(), value);
}
inline bool stSetCompensationID_ProtoModID_Parse(
    const ::std::string& name, stSetCompensationID_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSetCompensationID_ProtoModID>(
    stSetCompensationID_ProtoModID_descriptor(), name, value);
}
enum stSetCompensationID_ProtoFunID {
  stSetCompensationID_ProtoFunID_FunID = 64
};
bool stSetCompensationID_ProtoFunID_IsValid(int value);
const stSetCompensationID_ProtoFunID stSetCompensationID_ProtoFunID_ProtoFunID_MIN = stSetCompensationID_ProtoFunID_FunID;
const stSetCompensationID_ProtoFunID stSetCompensationID_ProtoFunID_ProtoFunID_MAX = stSetCompensationID_ProtoFunID_FunID;
const int stSetCompensationID_ProtoFunID_ProtoFunID_ARRAYSIZE = stSetCompensationID_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSetCompensationID_ProtoFunID_descriptor();
inline const ::std::string& stSetCompensationID_ProtoFunID_Name(stSetCompensationID_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSetCompensationID_ProtoFunID_descriptor(), value);
}
inline bool stSetCompensationID_ProtoFunID_Parse(
    const ::std::string& name, stSetCompensationID_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSetCompensationID_ProtoFunID>(
    stSetCompensationID_ProtoFunID_descriptor(), name, value);
}
enum stSetOpenServerDay_ProtoModID {
  stSetOpenServerDay_ProtoModID_ModID = 3
};
bool stSetOpenServerDay_ProtoModID_IsValid(int value);
const stSetOpenServerDay_ProtoModID stSetOpenServerDay_ProtoModID_ProtoModID_MIN = stSetOpenServerDay_ProtoModID_ModID;
const stSetOpenServerDay_ProtoModID stSetOpenServerDay_ProtoModID_ProtoModID_MAX = stSetOpenServerDay_ProtoModID_ModID;
const int stSetOpenServerDay_ProtoModID_ProtoModID_ARRAYSIZE = stSetOpenServerDay_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSetOpenServerDay_ProtoModID_descriptor();
inline const ::std::string& stSetOpenServerDay_ProtoModID_Name(stSetOpenServerDay_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSetOpenServerDay_ProtoModID_descriptor(), value);
}
inline bool stSetOpenServerDay_ProtoModID_Parse(
    const ::std::string& name, stSetOpenServerDay_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSetOpenServerDay_ProtoModID>(
    stSetOpenServerDay_ProtoModID_descriptor(), name, value);
}
enum stSetOpenServerDay_ProtoFunID {
  stSetOpenServerDay_ProtoFunID_FunID = 65
};
bool stSetOpenServerDay_ProtoFunID_IsValid(int value);
const stSetOpenServerDay_ProtoFunID stSetOpenServerDay_ProtoFunID_ProtoFunID_MIN = stSetOpenServerDay_ProtoFunID_FunID;
const stSetOpenServerDay_ProtoFunID stSetOpenServerDay_ProtoFunID_ProtoFunID_MAX = stSetOpenServerDay_ProtoFunID_FunID;
const int stSetOpenServerDay_ProtoFunID_ProtoFunID_ARRAYSIZE = stSetOpenServerDay_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSetOpenServerDay_ProtoFunID_descriptor();
inline const ::std::string& stSetOpenServerDay_ProtoFunID_Name(stSetOpenServerDay_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSetOpenServerDay_ProtoFunID_descriptor(), value);
}
inline bool stSetOpenServerDay_ProtoFunID_Parse(
    const ::std::string& name, stSetOpenServerDay_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSetOpenServerDay_ProtoFunID>(
    stSetOpenServerDay_ProtoFunID_descriptor(), name, value);
}
enum stSynGuildLv2AllMember_ProtoModID {
  stSynGuildLv2AllMember_ProtoModID_ModID = 3
};
bool stSynGuildLv2AllMember_ProtoModID_IsValid(int value);
const stSynGuildLv2AllMember_ProtoModID stSynGuildLv2AllMember_ProtoModID_ProtoModID_MIN = stSynGuildLv2AllMember_ProtoModID_ModID;
const stSynGuildLv2AllMember_ProtoModID stSynGuildLv2AllMember_ProtoModID_ProtoModID_MAX = stSynGuildLv2AllMember_ProtoModID_ModID;
const int stSynGuildLv2AllMember_ProtoModID_ProtoModID_ARRAYSIZE = stSynGuildLv2AllMember_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGuildLv2AllMember_ProtoModID_descriptor();
inline const ::std::string& stSynGuildLv2AllMember_ProtoModID_Name(stSynGuildLv2AllMember_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGuildLv2AllMember_ProtoModID_descriptor(), value);
}
inline bool stSynGuildLv2AllMember_ProtoModID_Parse(
    const ::std::string& name, stSynGuildLv2AllMember_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGuildLv2AllMember_ProtoModID>(
    stSynGuildLv2AllMember_ProtoModID_descriptor(), name, value);
}
enum stSynGuildLv2AllMember_ProtoFunID {
  stSynGuildLv2AllMember_ProtoFunID_FunID = 66
};
bool stSynGuildLv2AllMember_ProtoFunID_IsValid(int value);
const stSynGuildLv2AllMember_ProtoFunID stSynGuildLv2AllMember_ProtoFunID_ProtoFunID_MIN = stSynGuildLv2AllMember_ProtoFunID_FunID;
const stSynGuildLv2AllMember_ProtoFunID stSynGuildLv2AllMember_ProtoFunID_ProtoFunID_MAX = stSynGuildLv2AllMember_ProtoFunID_FunID;
const int stSynGuildLv2AllMember_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynGuildLv2AllMember_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGuildLv2AllMember_ProtoFunID_descriptor();
inline const ::std::string& stSynGuildLv2AllMember_ProtoFunID_Name(stSynGuildLv2AllMember_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGuildLv2AllMember_ProtoFunID_descriptor(), value);
}
inline bool stSynGuildLv2AllMember_ProtoFunID_Parse(
    const ::std::string& name, stSynGuildLv2AllMember_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGuildLv2AllMember_ProtoFunID>(
    stSynGuildLv2AllMember_ProtoFunID_descriptor(), name, value);
}
enum stForwardChgBadge_ProtoModID {
  stForwardChgBadge_ProtoModID_ModID = 3
};
bool stForwardChgBadge_ProtoModID_IsValid(int value);
const stForwardChgBadge_ProtoModID stForwardChgBadge_ProtoModID_ProtoModID_MIN = stForwardChgBadge_ProtoModID_ModID;
const stForwardChgBadge_ProtoModID stForwardChgBadge_ProtoModID_ProtoModID_MAX = stForwardChgBadge_ProtoModID_ModID;
const int stForwardChgBadge_ProtoModID_ProtoModID_ARRAYSIZE = stForwardChgBadge_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stForwardChgBadge_ProtoModID_descriptor();
inline const ::std::string& stForwardChgBadge_ProtoModID_Name(stForwardChgBadge_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stForwardChgBadge_ProtoModID_descriptor(), value);
}
inline bool stForwardChgBadge_ProtoModID_Parse(
    const ::std::string& name, stForwardChgBadge_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stForwardChgBadge_ProtoModID>(
    stForwardChgBadge_ProtoModID_descriptor(), name, value);
}
enum stForwardChgBadge_ProtoFunID {
  stForwardChgBadge_ProtoFunID_FunID = 67
};
bool stForwardChgBadge_ProtoFunID_IsValid(int value);
const stForwardChgBadge_ProtoFunID stForwardChgBadge_ProtoFunID_ProtoFunID_MIN = stForwardChgBadge_ProtoFunID_FunID;
const stForwardChgBadge_ProtoFunID stForwardChgBadge_ProtoFunID_ProtoFunID_MAX = stForwardChgBadge_ProtoFunID_FunID;
const int stForwardChgBadge_ProtoFunID_ProtoFunID_ARRAYSIZE = stForwardChgBadge_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stForwardChgBadge_ProtoFunID_descriptor();
inline const ::std::string& stForwardChgBadge_ProtoFunID_Name(stForwardChgBadge_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stForwardChgBadge_ProtoFunID_descriptor(), value);
}
inline bool stForwardChgBadge_ProtoFunID_Parse(
    const ::std::string& name, stForwardChgBadge_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stForwardChgBadge_ProtoFunID>(
    stForwardChgBadge_ProtoFunID_descriptor(), name, value);
}
enum stWorldBossBuyDecDiamond_ProtoModID {
  stWorldBossBuyDecDiamond_ProtoModID_ModID = 3
};
bool stWorldBossBuyDecDiamond_ProtoModID_IsValid(int value);
const stWorldBossBuyDecDiamond_ProtoModID stWorldBossBuyDecDiamond_ProtoModID_ProtoModID_MIN = stWorldBossBuyDecDiamond_ProtoModID_ModID;
const stWorldBossBuyDecDiamond_ProtoModID stWorldBossBuyDecDiamond_ProtoModID_ProtoModID_MAX = stWorldBossBuyDecDiamond_ProtoModID_ModID;
const int stWorldBossBuyDecDiamond_ProtoModID_ProtoModID_ARRAYSIZE = stWorldBossBuyDecDiamond_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWorldBossBuyDecDiamond_ProtoModID_descriptor();
inline const ::std::string& stWorldBossBuyDecDiamond_ProtoModID_Name(stWorldBossBuyDecDiamond_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWorldBossBuyDecDiamond_ProtoModID_descriptor(), value);
}
inline bool stWorldBossBuyDecDiamond_ProtoModID_Parse(
    const ::std::string& name, stWorldBossBuyDecDiamond_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWorldBossBuyDecDiamond_ProtoModID>(
    stWorldBossBuyDecDiamond_ProtoModID_descriptor(), name, value);
}
enum stWorldBossBuyDecDiamond_ProtoFunID {
  stWorldBossBuyDecDiamond_ProtoFunID_FunID = 68
};
bool stWorldBossBuyDecDiamond_ProtoFunID_IsValid(int value);
const stWorldBossBuyDecDiamond_ProtoFunID stWorldBossBuyDecDiamond_ProtoFunID_ProtoFunID_MIN = stWorldBossBuyDecDiamond_ProtoFunID_FunID;
const stWorldBossBuyDecDiamond_ProtoFunID stWorldBossBuyDecDiamond_ProtoFunID_ProtoFunID_MAX = stWorldBossBuyDecDiamond_ProtoFunID_FunID;
const int stWorldBossBuyDecDiamond_ProtoFunID_ProtoFunID_ARRAYSIZE = stWorldBossBuyDecDiamond_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWorldBossBuyDecDiamond_ProtoFunID_descriptor();
inline const ::std::string& stWorldBossBuyDecDiamond_ProtoFunID_Name(stWorldBossBuyDecDiamond_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWorldBossBuyDecDiamond_ProtoFunID_descriptor(), value);
}
inline bool stWorldBossBuyDecDiamond_ProtoFunID_Parse(
    const ::std::string& name, stWorldBossBuyDecDiamond_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWorldBossBuyDecDiamond_ProtoFunID>(
    stWorldBossBuyDecDiamond_ProtoFunID_descriptor(), name, value);
}
enum stGuildDonateSuccess_ProtoModID {
  stGuildDonateSuccess_ProtoModID_ModID = 3
};
bool stGuildDonateSuccess_ProtoModID_IsValid(int value);
const stGuildDonateSuccess_ProtoModID stGuildDonateSuccess_ProtoModID_ProtoModID_MIN = stGuildDonateSuccess_ProtoModID_ModID;
const stGuildDonateSuccess_ProtoModID stGuildDonateSuccess_ProtoModID_ProtoModID_MAX = stGuildDonateSuccess_ProtoModID_ModID;
const int stGuildDonateSuccess_ProtoModID_ProtoModID_ARRAYSIZE = stGuildDonateSuccess_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildDonateSuccess_ProtoModID_descriptor();
inline const ::std::string& stGuildDonateSuccess_ProtoModID_Name(stGuildDonateSuccess_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildDonateSuccess_ProtoModID_descriptor(), value);
}
inline bool stGuildDonateSuccess_ProtoModID_Parse(
    const ::std::string& name, stGuildDonateSuccess_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildDonateSuccess_ProtoModID>(
    stGuildDonateSuccess_ProtoModID_descriptor(), name, value);
}
enum stGuildDonateSuccess_ProtoFunID {
  stGuildDonateSuccess_ProtoFunID_FunID = 69
};
bool stGuildDonateSuccess_ProtoFunID_IsValid(int value);
const stGuildDonateSuccess_ProtoFunID stGuildDonateSuccess_ProtoFunID_ProtoFunID_MIN = stGuildDonateSuccess_ProtoFunID_FunID;
const stGuildDonateSuccess_ProtoFunID stGuildDonateSuccess_ProtoFunID_ProtoFunID_MAX = stGuildDonateSuccess_ProtoFunID_FunID;
const int stGuildDonateSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuildDonateSuccess_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildDonateSuccess_ProtoFunID_descriptor();
inline const ::std::string& stGuildDonateSuccess_ProtoFunID_Name(stGuildDonateSuccess_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildDonateSuccess_ProtoFunID_descriptor(), value);
}
inline bool stGuildDonateSuccess_ProtoFunID_Parse(
    const ::std::string& name, stGuildDonateSuccess_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildDonateSuccess_ProtoFunID>(
    stGuildDonateSuccess_ProtoFunID_descriptor(), name, value);
}
enum stUserLeaveWorldBoss_ProtoModID {
  stUserLeaveWorldBoss_ProtoModID_ModID = 3
};
bool stUserLeaveWorldBoss_ProtoModID_IsValid(int value);
const stUserLeaveWorldBoss_ProtoModID stUserLeaveWorldBoss_ProtoModID_ProtoModID_MIN = stUserLeaveWorldBoss_ProtoModID_ModID;
const stUserLeaveWorldBoss_ProtoModID stUserLeaveWorldBoss_ProtoModID_ProtoModID_MAX = stUserLeaveWorldBoss_ProtoModID_ModID;
const int stUserLeaveWorldBoss_ProtoModID_ProtoModID_ARRAYSIZE = stUserLeaveWorldBoss_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserLeaveWorldBoss_ProtoModID_descriptor();
inline const ::std::string& stUserLeaveWorldBoss_ProtoModID_Name(stUserLeaveWorldBoss_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserLeaveWorldBoss_ProtoModID_descriptor(), value);
}
inline bool stUserLeaveWorldBoss_ProtoModID_Parse(
    const ::std::string& name, stUserLeaveWorldBoss_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserLeaveWorldBoss_ProtoModID>(
    stUserLeaveWorldBoss_ProtoModID_descriptor(), name, value);
}
enum stUserLeaveWorldBoss_ProtoFunID {
  stUserLeaveWorldBoss_ProtoFunID_FunID = 70
};
bool stUserLeaveWorldBoss_ProtoFunID_IsValid(int value);
const stUserLeaveWorldBoss_ProtoFunID stUserLeaveWorldBoss_ProtoFunID_ProtoFunID_MIN = stUserLeaveWorldBoss_ProtoFunID_FunID;
const stUserLeaveWorldBoss_ProtoFunID stUserLeaveWorldBoss_ProtoFunID_ProtoFunID_MAX = stUserLeaveWorldBoss_ProtoFunID_FunID;
const int stUserLeaveWorldBoss_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserLeaveWorldBoss_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserLeaveWorldBoss_ProtoFunID_descriptor();
inline const ::std::string& stUserLeaveWorldBoss_ProtoFunID_Name(stUserLeaveWorldBoss_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserLeaveWorldBoss_ProtoFunID_descriptor(), value);
}
inline bool stUserLeaveWorldBoss_ProtoFunID_Parse(
    const ::std::string& name, stUserLeaveWorldBoss_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserLeaveWorldBoss_ProtoFunID>(
    stUserLeaveWorldBoss_ProtoFunID_descriptor(), name, value);
}
enum stNotifyGameAutoConnect_ProtoModID {
  stNotifyGameAutoConnect_ProtoModID_ModID = 3
};
bool stNotifyGameAutoConnect_ProtoModID_IsValid(int value);
const stNotifyGameAutoConnect_ProtoModID stNotifyGameAutoConnect_ProtoModID_ProtoModID_MIN = stNotifyGameAutoConnect_ProtoModID_ModID;
const stNotifyGameAutoConnect_ProtoModID stNotifyGameAutoConnect_ProtoModID_ProtoModID_MAX = stNotifyGameAutoConnect_ProtoModID_ModID;
const int stNotifyGameAutoConnect_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyGameAutoConnect_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGameAutoConnect_ProtoModID_descriptor();
inline const ::std::string& stNotifyGameAutoConnect_ProtoModID_Name(stNotifyGameAutoConnect_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGameAutoConnect_ProtoModID_descriptor(), value);
}
inline bool stNotifyGameAutoConnect_ProtoModID_Parse(
    const ::std::string& name, stNotifyGameAutoConnect_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGameAutoConnect_ProtoModID>(
    stNotifyGameAutoConnect_ProtoModID_descriptor(), name, value);
}
enum stNotifyGameAutoConnect_ProtoFunID {
  stNotifyGameAutoConnect_ProtoFunID_FunID = 71
};
bool stNotifyGameAutoConnect_ProtoFunID_IsValid(int value);
const stNotifyGameAutoConnect_ProtoFunID stNotifyGameAutoConnect_ProtoFunID_ProtoFunID_MIN = stNotifyGameAutoConnect_ProtoFunID_FunID;
const stNotifyGameAutoConnect_ProtoFunID stNotifyGameAutoConnect_ProtoFunID_ProtoFunID_MAX = stNotifyGameAutoConnect_ProtoFunID_FunID;
const int stNotifyGameAutoConnect_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyGameAutoConnect_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGameAutoConnect_ProtoFunID_descriptor();
inline const ::std::string& stNotifyGameAutoConnect_ProtoFunID_Name(stNotifyGameAutoConnect_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGameAutoConnect_ProtoFunID_descriptor(), value);
}
inline bool stNotifyGameAutoConnect_ProtoFunID_Parse(
    const ::std::string& name, stNotifyGameAutoConnect_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGameAutoConnect_ProtoFunID>(
    stNotifyGameAutoConnect_ProtoFunID_descriptor(), name, value);
}
enum stForwardDrawHeroScoreReward_ProtoModID {
  stForwardDrawHeroScoreReward_ProtoModID_ModID = 3
};
bool stForwardDrawHeroScoreReward_ProtoModID_IsValid(int value);
const stForwardDrawHeroScoreReward_ProtoModID stForwardDrawHeroScoreReward_ProtoModID_ProtoModID_MIN = stForwardDrawHeroScoreReward_ProtoModID_ModID;
const stForwardDrawHeroScoreReward_ProtoModID stForwardDrawHeroScoreReward_ProtoModID_ProtoModID_MAX = stForwardDrawHeroScoreReward_ProtoModID_ModID;
const int stForwardDrawHeroScoreReward_ProtoModID_ProtoModID_ARRAYSIZE = stForwardDrawHeroScoreReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stForwardDrawHeroScoreReward_ProtoModID_descriptor();
inline const ::std::string& stForwardDrawHeroScoreReward_ProtoModID_Name(stForwardDrawHeroScoreReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stForwardDrawHeroScoreReward_ProtoModID_descriptor(), value);
}
inline bool stForwardDrawHeroScoreReward_ProtoModID_Parse(
    const ::std::string& name, stForwardDrawHeroScoreReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stForwardDrawHeroScoreReward_ProtoModID>(
    stForwardDrawHeroScoreReward_ProtoModID_descriptor(), name, value);
}
enum stForwardDrawHeroScoreReward_ProtoFunID {
  stForwardDrawHeroScoreReward_ProtoFunID_FunID = 72
};
bool stForwardDrawHeroScoreReward_ProtoFunID_IsValid(int value);
const stForwardDrawHeroScoreReward_ProtoFunID stForwardDrawHeroScoreReward_ProtoFunID_ProtoFunID_MIN = stForwardDrawHeroScoreReward_ProtoFunID_FunID;
const stForwardDrawHeroScoreReward_ProtoFunID stForwardDrawHeroScoreReward_ProtoFunID_ProtoFunID_MAX = stForwardDrawHeroScoreReward_ProtoFunID_FunID;
const int stForwardDrawHeroScoreReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stForwardDrawHeroScoreReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stForwardDrawHeroScoreReward_ProtoFunID_descriptor();
inline const ::std::string& stForwardDrawHeroScoreReward_ProtoFunID_Name(stForwardDrawHeroScoreReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stForwardDrawHeroScoreReward_ProtoFunID_descriptor(), value);
}
inline bool stForwardDrawHeroScoreReward_ProtoFunID_Parse(
    const ::std::string& name, stForwardDrawHeroScoreReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stForwardDrawHeroScoreReward_ProtoFunID>(
    stForwardDrawHeroScoreReward_ProtoFunID_descriptor(), name, value);
}
enum stNotifyArenaReward_ProtoModID {
  stNotifyArenaReward_ProtoModID_ModID = 3
};
bool stNotifyArenaReward_ProtoModID_IsValid(int value);
const stNotifyArenaReward_ProtoModID stNotifyArenaReward_ProtoModID_ProtoModID_MIN = stNotifyArenaReward_ProtoModID_ModID;
const stNotifyArenaReward_ProtoModID stNotifyArenaReward_ProtoModID_ProtoModID_MAX = stNotifyArenaReward_ProtoModID_ModID;
const int stNotifyArenaReward_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyArenaReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyArenaReward_ProtoModID_descriptor();
inline const ::std::string& stNotifyArenaReward_ProtoModID_Name(stNotifyArenaReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyArenaReward_ProtoModID_descriptor(), value);
}
inline bool stNotifyArenaReward_ProtoModID_Parse(
    const ::std::string& name, stNotifyArenaReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyArenaReward_ProtoModID>(
    stNotifyArenaReward_ProtoModID_descriptor(), name, value);
}
enum stNotifyArenaReward_ProtoFunID {
  stNotifyArenaReward_ProtoFunID_FunID = 73
};
bool stNotifyArenaReward_ProtoFunID_IsValid(int value);
const stNotifyArenaReward_ProtoFunID stNotifyArenaReward_ProtoFunID_ProtoFunID_MIN = stNotifyArenaReward_ProtoFunID_FunID;
const stNotifyArenaReward_ProtoFunID stNotifyArenaReward_ProtoFunID_ProtoFunID_MAX = stNotifyArenaReward_ProtoFunID_FunID;
const int stNotifyArenaReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyArenaReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyArenaReward_ProtoFunID_descriptor();
inline const ::std::string& stNotifyArenaReward_ProtoFunID_Name(stNotifyArenaReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyArenaReward_ProtoFunID_descriptor(), value);
}
inline bool stNotifyArenaReward_ProtoFunID_Parse(
    const ::std::string& name, stNotifyArenaReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyArenaReward_ProtoFunID>(
    stNotifyArenaReward_ProtoFunID_descriptor(), name, value);
}
enum ForwardInvestgateResult_ProtoModID {
  ForwardInvestgateResult_ProtoModID_ModID = 3
};
bool ForwardInvestgateResult_ProtoModID_IsValid(int value);
const ForwardInvestgateResult_ProtoModID ForwardInvestgateResult_ProtoModID_ProtoModID_MIN = ForwardInvestgateResult_ProtoModID_ModID;
const ForwardInvestgateResult_ProtoModID ForwardInvestgateResult_ProtoModID_ProtoModID_MAX = ForwardInvestgateResult_ProtoModID_ModID;
const int ForwardInvestgateResult_ProtoModID_ProtoModID_ARRAYSIZE = ForwardInvestgateResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ForwardInvestgateResult_ProtoModID_descriptor();
inline const ::std::string& ForwardInvestgateResult_ProtoModID_Name(ForwardInvestgateResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ForwardInvestgateResult_ProtoModID_descriptor(), value);
}
inline bool ForwardInvestgateResult_ProtoModID_Parse(
    const ::std::string& name, ForwardInvestgateResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ForwardInvestgateResult_ProtoModID>(
    ForwardInvestgateResult_ProtoModID_descriptor(), name, value);
}
enum ForwardInvestgateResult_ProtoFunID {
  ForwardInvestgateResult_ProtoFunID_FunID = 74
};
bool ForwardInvestgateResult_ProtoFunID_IsValid(int value);
const ForwardInvestgateResult_ProtoFunID ForwardInvestgateResult_ProtoFunID_ProtoFunID_MIN = ForwardInvestgateResult_ProtoFunID_FunID;
const ForwardInvestgateResult_ProtoFunID ForwardInvestgateResult_ProtoFunID_ProtoFunID_MAX = ForwardInvestgateResult_ProtoFunID_FunID;
const int ForwardInvestgateResult_ProtoFunID_ProtoFunID_ARRAYSIZE = ForwardInvestgateResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ForwardInvestgateResult_ProtoFunID_descriptor();
inline const ::std::string& ForwardInvestgateResult_ProtoFunID_Name(ForwardInvestgateResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ForwardInvestgateResult_ProtoFunID_descriptor(), value);
}
inline bool ForwardInvestgateResult_ProtoFunID_Parse(
    const ::std::string& name, ForwardInvestgateResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ForwardInvestgateResult_ProtoFunID>(
    ForwardInvestgateResult_ProtoFunID_descriptor(), name, value);
}
enum stGMModifyUserInfo_ProtoModID {
  stGMModifyUserInfo_ProtoModID_ModID = 3
};
bool stGMModifyUserInfo_ProtoModID_IsValid(int value);
const stGMModifyUserInfo_ProtoModID stGMModifyUserInfo_ProtoModID_ProtoModID_MIN = stGMModifyUserInfo_ProtoModID_ModID;
const stGMModifyUserInfo_ProtoModID stGMModifyUserInfo_ProtoModID_ProtoModID_MAX = stGMModifyUserInfo_ProtoModID_ModID;
const int stGMModifyUserInfo_ProtoModID_ProtoModID_ARRAYSIZE = stGMModifyUserInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGMModifyUserInfo_ProtoModID_descriptor();
inline const ::std::string& stGMModifyUserInfo_ProtoModID_Name(stGMModifyUserInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGMModifyUserInfo_ProtoModID_descriptor(), value);
}
inline bool stGMModifyUserInfo_ProtoModID_Parse(
    const ::std::string& name, stGMModifyUserInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGMModifyUserInfo_ProtoModID>(
    stGMModifyUserInfo_ProtoModID_descriptor(), name, value);
}
enum stGMModifyUserInfo_ProtoFunID {
  stGMModifyUserInfo_ProtoFunID_FunID = 75
};
bool stGMModifyUserInfo_ProtoFunID_IsValid(int value);
const stGMModifyUserInfo_ProtoFunID stGMModifyUserInfo_ProtoFunID_ProtoFunID_MIN = stGMModifyUserInfo_ProtoFunID_FunID;
const stGMModifyUserInfo_ProtoFunID stGMModifyUserInfo_ProtoFunID_ProtoFunID_MAX = stGMModifyUserInfo_ProtoFunID_FunID;
const int stGMModifyUserInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stGMModifyUserInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGMModifyUserInfo_ProtoFunID_descriptor();
inline const ::std::string& stGMModifyUserInfo_ProtoFunID_Name(stGMModifyUserInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGMModifyUserInfo_ProtoFunID_descriptor(), value);
}
inline bool stGMModifyUserInfo_ProtoFunID_Parse(
    const ::std::string& name, stGMModifyUserInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGMModifyUserInfo_ProtoFunID>(
    stGMModifyUserInfo_ProtoFunID_descriptor(), name, value);
}
enum stSynMyArenaRank_ProtoModID {
  stSynMyArenaRank_ProtoModID_ModID = 3
};
bool stSynMyArenaRank_ProtoModID_IsValid(int value);
const stSynMyArenaRank_ProtoModID stSynMyArenaRank_ProtoModID_ProtoModID_MIN = stSynMyArenaRank_ProtoModID_ModID;
const stSynMyArenaRank_ProtoModID stSynMyArenaRank_ProtoModID_ProtoModID_MAX = stSynMyArenaRank_ProtoModID_ModID;
const int stSynMyArenaRank_ProtoModID_ProtoModID_ARRAYSIZE = stSynMyArenaRank_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynMyArenaRank_ProtoModID_descriptor();
inline const ::std::string& stSynMyArenaRank_ProtoModID_Name(stSynMyArenaRank_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynMyArenaRank_ProtoModID_descriptor(), value);
}
inline bool stSynMyArenaRank_ProtoModID_Parse(
    const ::std::string& name, stSynMyArenaRank_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynMyArenaRank_ProtoModID>(
    stSynMyArenaRank_ProtoModID_descriptor(), name, value);
}
enum stSynMyArenaRank_ProtoFunID {
  stSynMyArenaRank_ProtoFunID_FunID = 76
};
bool stSynMyArenaRank_ProtoFunID_IsValid(int value);
const stSynMyArenaRank_ProtoFunID stSynMyArenaRank_ProtoFunID_ProtoFunID_MIN = stSynMyArenaRank_ProtoFunID_FunID;
const stSynMyArenaRank_ProtoFunID stSynMyArenaRank_ProtoFunID_ProtoFunID_MAX = stSynMyArenaRank_ProtoFunID_FunID;
const int stSynMyArenaRank_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynMyArenaRank_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynMyArenaRank_ProtoFunID_descriptor();
inline const ::std::string& stSynMyArenaRank_ProtoFunID_Name(stSynMyArenaRank_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynMyArenaRank_ProtoFunID_descriptor(), value);
}
inline bool stSynMyArenaRank_ProtoFunID_Parse(
    const ::std::string& name, stSynMyArenaRank_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynMyArenaRank_ProtoFunID>(
    stSynMyArenaRank_ProtoFunID_descriptor(), name, value);
}
enum stSynVipLv_ProtoModID {
  stSynVipLv_ProtoModID_ModID = 3
};
bool stSynVipLv_ProtoModID_IsValid(int value);
const stSynVipLv_ProtoModID stSynVipLv_ProtoModID_ProtoModID_MIN = stSynVipLv_ProtoModID_ModID;
const stSynVipLv_ProtoModID stSynVipLv_ProtoModID_ProtoModID_MAX = stSynVipLv_ProtoModID_ModID;
const int stSynVipLv_ProtoModID_ProtoModID_ARRAYSIZE = stSynVipLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynVipLv_ProtoModID_descriptor();
inline const ::std::string& stSynVipLv_ProtoModID_Name(stSynVipLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynVipLv_ProtoModID_descriptor(), value);
}
inline bool stSynVipLv_ProtoModID_Parse(
    const ::std::string& name, stSynVipLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynVipLv_ProtoModID>(
    stSynVipLv_ProtoModID_descriptor(), name, value);
}
enum stSynVipLv_ProtoFunID {
  stSynVipLv_ProtoFunID_FunID = 77
};
bool stSynVipLv_ProtoFunID_IsValid(int value);
const stSynVipLv_ProtoFunID stSynVipLv_ProtoFunID_ProtoFunID_MIN = stSynVipLv_ProtoFunID_FunID;
const stSynVipLv_ProtoFunID stSynVipLv_ProtoFunID_ProtoFunID_MAX = stSynVipLv_ProtoFunID_FunID;
const int stSynVipLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynVipLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynVipLv_ProtoFunID_descriptor();
inline const ::std::string& stSynVipLv_ProtoFunID_Name(stSynVipLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynVipLv_ProtoFunID_descriptor(), value);
}
inline bool stSynVipLv_ProtoFunID_Parse(
    const ::std::string& name, stSynVipLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynVipLv_ProtoFunID>(
    stSynVipLv_ProtoFunID_descriptor(), name, value);
}
enum stNotifyClearArenaCD_ProtoModID {
  stNotifyClearArenaCD_ProtoModID_ModID = 3
};
bool stNotifyClearArenaCD_ProtoModID_IsValid(int value);
const stNotifyClearArenaCD_ProtoModID stNotifyClearArenaCD_ProtoModID_ProtoModID_MIN = stNotifyClearArenaCD_ProtoModID_ModID;
const stNotifyClearArenaCD_ProtoModID stNotifyClearArenaCD_ProtoModID_ProtoModID_MAX = stNotifyClearArenaCD_ProtoModID_ModID;
const int stNotifyClearArenaCD_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyClearArenaCD_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyClearArenaCD_ProtoModID_descriptor();
inline const ::std::string& stNotifyClearArenaCD_ProtoModID_Name(stNotifyClearArenaCD_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyClearArenaCD_ProtoModID_descriptor(), value);
}
inline bool stNotifyClearArenaCD_ProtoModID_Parse(
    const ::std::string& name, stNotifyClearArenaCD_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyClearArenaCD_ProtoModID>(
    stNotifyClearArenaCD_ProtoModID_descriptor(), name, value);
}
enum stNotifyClearArenaCD_ProtoFunID {
  stNotifyClearArenaCD_ProtoFunID_FunID = 78
};
bool stNotifyClearArenaCD_ProtoFunID_IsValid(int value);
const stNotifyClearArenaCD_ProtoFunID stNotifyClearArenaCD_ProtoFunID_ProtoFunID_MIN = stNotifyClearArenaCD_ProtoFunID_FunID;
const stNotifyClearArenaCD_ProtoFunID stNotifyClearArenaCD_ProtoFunID_ProtoFunID_MAX = stNotifyClearArenaCD_ProtoFunID_FunID;
const int stNotifyClearArenaCD_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyClearArenaCD_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyClearArenaCD_ProtoFunID_descriptor();
inline const ::std::string& stNotifyClearArenaCD_ProtoFunID_Name(stNotifyClearArenaCD_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyClearArenaCD_ProtoFunID_descriptor(), value);
}
inline bool stNotifyClearArenaCD_ProtoFunID_Parse(
    const ::std::string& name, stNotifyClearArenaCD_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyClearArenaCD_ProtoFunID>(
    stNotifyClearArenaCD_ProtoFunID_descriptor(), name, value);
}
enum stReqResetArenaChallengeNum_ProtoModID {
  stReqResetArenaChallengeNum_ProtoModID_ModID = 3
};
bool stReqResetArenaChallengeNum_ProtoModID_IsValid(int value);
const stReqResetArenaChallengeNum_ProtoModID stReqResetArenaChallengeNum_ProtoModID_ProtoModID_MIN = stReqResetArenaChallengeNum_ProtoModID_ModID;
const stReqResetArenaChallengeNum_ProtoModID stReqResetArenaChallengeNum_ProtoModID_ProtoModID_MAX = stReqResetArenaChallengeNum_ProtoModID_ModID;
const int stReqResetArenaChallengeNum_ProtoModID_ProtoModID_ARRAYSIZE = stReqResetArenaChallengeNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetArenaChallengeNum_ProtoModID_descriptor();
inline const ::std::string& stReqResetArenaChallengeNum_ProtoModID_Name(stReqResetArenaChallengeNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetArenaChallengeNum_ProtoModID_descriptor(), value);
}
inline bool stReqResetArenaChallengeNum_ProtoModID_Parse(
    const ::std::string& name, stReqResetArenaChallengeNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetArenaChallengeNum_ProtoModID>(
    stReqResetArenaChallengeNum_ProtoModID_descriptor(), name, value);
}
enum stReqResetArenaChallengeNum_ProtoFunID {
  stReqResetArenaChallengeNum_ProtoFunID_FunID = 79
};
bool stReqResetArenaChallengeNum_ProtoFunID_IsValid(int value);
const stReqResetArenaChallengeNum_ProtoFunID stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_MIN = stReqResetArenaChallengeNum_ProtoFunID_FunID;
const stReqResetArenaChallengeNum_ProtoFunID stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_MAX = stReqResetArenaChallengeNum_ProtoFunID_FunID;
const int stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetArenaChallengeNum_ProtoFunID_descriptor();
inline const ::std::string& stReqResetArenaChallengeNum_ProtoFunID_Name(stReqResetArenaChallengeNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetArenaChallengeNum_ProtoFunID_descriptor(), value);
}
inline bool stReqResetArenaChallengeNum_ProtoFunID_Parse(
    const ::std::string& name, stReqResetArenaChallengeNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetArenaChallengeNum_ProtoFunID>(
    stReqResetArenaChallengeNum_ProtoFunID_descriptor(), name, value);
}
enum stNotfiyResetChallengeNum_ProtoModID {
  stNotfiyResetChallengeNum_ProtoModID_ModID = 3
};
bool stNotfiyResetChallengeNum_ProtoModID_IsValid(int value);
const stNotfiyResetChallengeNum_ProtoModID stNotfiyResetChallengeNum_ProtoModID_ProtoModID_MIN = stNotfiyResetChallengeNum_ProtoModID_ModID;
const stNotfiyResetChallengeNum_ProtoModID stNotfiyResetChallengeNum_ProtoModID_ProtoModID_MAX = stNotfiyResetChallengeNum_ProtoModID_ModID;
const int stNotfiyResetChallengeNum_ProtoModID_ProtoModID_ARRAYSIZE = stNotfiyResetChallengeNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotfiyResetChallengeNum_ProtoModID_descriptor();
inline const ::std::string& stNotfiyResetChallengeNum_ProtoModID_Name(stNotfiyResetChallengeNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotfiyResetChallengeNum_ProtoModID_descriptor(), value);
}
inline bool stNotfiyResetChallengeNum_ProtoModID_Parse(
    const ::std::string& name, stNotfiyResetChallengeNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotfiyResetChallengeNum_ProtoModID>(
    stNotfiyResetChallengeNum_ProtoModID_descriptor(), name, value);
}
enum stNotfiyResetChallengeNum_ProtoFunID {
  stNotfiyResetChallengeNum_ProtoFunID_FunID = 80
};
bool stNotfiyResetChallengeNum_ProtoFunID_IsValid(int value);
const stNotfiyResetChallengeNum_ProtoFunID stNotfiyResetChallengeNum_ProtoFunID_ProtoFunID_MIN = stNotfiyResetChallengeNum_ProtoFunID_FunID;
const stNotfiyResetChallengeNum_ProtoFunID stNotfiyResetChallengeNum_ProtoFunID_ProtoFunID_MAX = stNotfiyResetChallengeNum_ProtoFunID_FunID;
const int stNotfiyResetChallengeNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotfiyResetChallengeNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotfiyResetChallengeNum_ProtoFunID_descriptor();
inline const ::std::string& stNotfiyResetChallengeNum_ProtoFunID_Name(stNotfiyResetChallengeNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotfiyResetChallengeNum_ProtoFunID_descriptor(), value);
}
inline bool stNotfiyResetChallengeNum_ProtoFunID_Parse(
    const ::std::string& name, stNotfiyResetChallengeNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotfiyResetChallengeNum_ProtoFunID>(
    stNotfiyResetChallengeNum_ProtoFunID_descriptor(), name, value);
}
enum stReqResetInterceptNum_ProtoModID {
  stReqResetInterceptNum_ProtoModID_ModID = 3
};
bool stReqResetInterceptNum_ProtoModID_IsValid(int value);
const stReqResetInterceptNum_ProtoModID stReqResetInterceptNum_ProtoModID_ProtoModID_MIN = stReqResetInterceptNum_ProtoModID_ModID;
const stReqResetInterceptNum_ProtoModID stReqResetInterceptNum_ProtoModID_ProtoModID_MAX = stReqResetInterceptNum_ProtoModID_ModID;
const int stReqResetInterceptNum_ProtoModID_ProtoModID_ARRAYSIZE = stReqResetInterceptNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetInterceptNum_ProtoModID_descriptor();
inline const ::std::string& stReqResetInterceptNum_ProtoModID_Name(stReqResetInterceptNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetInterceptNum_ProtoModID_descriptor(), value);
}
inline bool stReqResetInterceptNum_ProtoModID_Parse(
    const ::std::string& name, stReqResetInterceptNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetInterceptNum_ProtoModID>(
    stReqResetInterceptNum_ProtoModID_descriptor(), name, value);
}
enum stReqResetInterceptNum_ProtoFunID {
  stReqResetInterceptNum_ProtoFunID_FunID = 81
};
bool stReqResetInterceptNum_ProtoFunID_IsValid(int value);
const stReqResetInterceptNum_ProtoFunID stReqResetInterceptNum_ProtoFunID_ProtoFunID_MIN = stReqResetInterceptNum_ProtoFunID_FunID;
const stReqResetInterceptNum_ProtoFunID stReqResetInterceptNum_ProtoFunID_ProtoFunID_MAX = stReqResetInterceptNum_ProtoFunID_FunID;
const int stReqResetInterceptNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqResetInterceptNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetInterceptNum_ProtoFunID_descriptor();
inline const ::std::string& stReqResetInterceptNum_ProtoFunID_Name(stReqResetInterceptNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetInterceptNum_ProtoFunID_descriptor(), value);
}
inline bool stReqResetInterceptNum_ProtoFunID_Parse(
    const ::std::string& name, stReqResetInterceptNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetInterceptNum_ProtoFunID>(
    stReqResetInterceptNum_ProtoFunID_descriptor(), name, value);
}
enum stNotifyClearInterceptCD_ProtoModID {
  stNotifyClearInterceptCD_ProtoModID_ModID = 3
};
bool stNotifyClearInterceptCD_ProtoModID_IsValid(int value);
const stNotifyClearInterceptCD_ProtoModID stNotifyClearInterceptCD_ProtoModID_ProtoModID_MIN = stNotifyClearInterceptCD_ProtoModID_ModID;
const stNotifyClearInterceptCD_ProtoModID stNotifyClearInterceptCD_ProtoModID_ProtoModID_MAX = stNotifyClearInterceptCD_ProtoModID_ModID;
const int stNotifyClearInterceptCD_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyClearInterceptCD_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyClearInterceptCD_ProtoModID_descriptor();
inline const ::std::string& stNotifyClearInterceptCD_ProtoModID_Name(stNotifyClearInterceptCD_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyClearInterceptCD_ProtoModID_descriptor(), value);
}
inline bool stNotifyClearInterceptCD_ProtoModID_Parse(
    const ::std::string& name, stNotifyClearInterceptCD_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyClearInterceptCD_ProtoModID>(
    stNotifyClearInterceptCD_ProtoModID_descriptor(), name, value);
}
enum stNotifyClearInterceptCD_ProtoFunID {
  stNotifyClearInterceptCD_ProtoFunID_FunID = 82
};
bool stNotifyClearInterceptCD_ProtoFunID_IsValid(int value);
const stNotifyClearInterceptCD_ProtoFunID stNotifyClearInterceptCD_ProtoFunID_ProtoFunID_MIN = stNotifyClearInterceptCD_ProtoFunID_FunID;
const stNotifyClearInterceptCD_ProtoFunID stNotifyClearInterceptCD_ProtoFunID_ProtoFunID_MAX = stNotifyClearInterceptCD_ProtoFunID_FunID;
const int stNotifyClearInterceptCD_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyClearInterceptCD_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyClearInterceptCD_ProtoFunID_descriptor();
inline const ::std::string& stNotifyClearInterceptCD_ProtoFunID_Name(stNotifyClearInterceptCD_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyClearInterceptCD_ProtoFunID_descriptor(), value);
}
inline bool stNotifyClearInterceptCD_ProtoFunID_Parse(
    const ::std::string& name, stNotifyClearInterceptCD_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyClearInterceptCD_ProtoFunID>(
    stNotifyClearInterceptCD_ProtoFunID_descriptor(), name, value);
}
enum stNotifyResetInterceptNum_ProtoModID {
  stNotifyResetInterceptNum_ProtoModID_ModID = 3
};
bool stNotifyResetInterceptNum_ProtoModID_IsValid(int value);
const stNotifyResetInterceptNum_ProtoModID stNotifyResetInterceptNum_ProtoModID_ProtoModID_MIN = stNotifyResetInterceptNum_ProtoModID_ModID;
const stNotifyResetInterceptNum_ProtoModID stNotifyResetInterceptNum_ProtoModID_ProtoModID_MAX = stNotifyResetInterceptNum_ProtoModID_ModID;
const int stNotifyResetInterceptNum_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyResetInterceptNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyResetInterceptNum_ProtoModID_descriptor();
inline const ::std::string& stNotifyResetInterceptNum_ProtoModID_Name(stNotifyResetInterceptNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyResetInterceptNum_ProtoModID_descriptor(), value);
}
inline bool stNotifyResetInterceptNum_ProtoModID_Parse(
    const ::std::string& name, stNotifyResetInterceptNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyResetInterceptNum_ProtoModID>(
    stNotifyResetInterceptNum_ProtoModID_descriptor(), name, value);
}
enum stNotifyResetInterceptNum_ProtoFunID {
  stNotifyResetInterceptNum_ProtoFunID_FunID = 83
};
bool stNotifyResetInterceptNum_ProtoFunID_IsValid(int value);
const stNotifyResetInterceptNum_ProtoFunID stNotifyResetInterceptNum_ProtoFunID_ProtoFunID_MIN = stNotifyResetInterceptNum_ProtoFunID_FunID;
const stNotifyResetInterceptNum_ProtoFunID stNotifyResetInterceptNum_ProtoFunID_ProtoFunID_MAX = stNotifyResetInterceptNum_ProtoFunID_FunID;
const int stNotifyResetInterceptNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyResetInterceptNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyResetInterceptNum_ProtoFunID_descriptor();
inline const ::std::string& stNotifyResetInterceptNum_ProtoFunID_Name(stNotifyResetInterceptNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyResetInterceptNum_ProtoFunID_descriptor(), value);
}
inline bool stNotifyResetInterceptNum_ProtoFunID_Parse(
    const ::std::string& name, stNotifyResetInterceptNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyResetInterceptNum_ProtoFunID>(
    stNotifyResetInterceptNum_ProtoFunID_descriptor(), name, value);
}
enum stNotifyGuardQuality_ProtoModID {
  stNotifyGuardQuality_ProtoModID_ModID = 3
};
bool stNotifyGuardQuality_ProtoModID_IsValid(int value);
const stNotifyGuardQuality_ProtoModID stNotifyGuardQuality_ProtoModID_ProtoModID_MIN = stNotifyGuardQuality_ProtoModID_ModID;
const stNotifyGuardQuality_ProtoModID stNotifyGuardQuality_ProtoModID_ProtoModID_MAX = stNotifyGuardQuality_ProtoModID_ModID;
const int stNotifyGuardQuality_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyGuardQuality_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGuardQuality_ProtoModID_descriptor();
inline const ::std::string& stNotifyGuardQuality_ProtoModID_Name(stNotifyGuardQuality_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGuardQuality_ProtoModID_descriptor(), value);
}
inline bool stNotifyGuardQuality_ProtoModID_Parse(
    const ::std::string& name, stNotifyGuardQuality_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGuardQuality_ProtoModID>(
    stNotifyGuardQuality_ProtoModID_descriptor(), name, value);
}
enum stNotifyGuardQuality_ProtoFunID {
  stNotifyGuardQuality_ProtoFunID_FunID = 84
};
bool stNotifyGuardQuality_ProtoFunID_IsValid(int value);
const stNotifyGuardQuality_ProtoFunID stNotifyGuardQuality_ProtoFunID_ProtoFunID_MIN = stNotifyGuardQuality_ProtoFunID_FunID;
const stNotifyGuardQuality_ProtoFunID stNotifyGuardQuality_ProtoFunID_ProtoFunID_MAX = stNotifyGuardQuality_ProtoFunID_FunID;
const int stNotifyGuardQuality_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyGuardQuality_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGuardQuality_ProtoFunID_descriptor();
inline const ::std::string& stNotifyGuardQuality_ProtoFunID_Name(stNotifyGuardQuality_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGuardQuality_ProtoFunID_descriptor(), value);
}
inline bool stNotifyGuardQuality_ProtoFunID_Parse(
    const ::std::string& name, stNotifyGuardQuality_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGuardQuality_ProtoFunID>(
    stNotifyGuardQuality_ProtoFunID_descriptor(), name, value);
}
enum stNotifyGuardInspiredSuccess_ProtoModID {
  stNotifyGuardInspiredSuccess_ProtoModID_ModID = 3
};
bool stNotifyGuardInspiredSuccess_ProtoModID_IsValid(int value);
const stNotifyGuardInspiredSuccess_ProtoModID stNotifyGuardInspiredSuccess_ProtoModID_ProtoModID_MIN = stNotifyGuardInspiredSuccess_ProtoModID_ModID;
const stNotifyGuardInspiredSuccess_ProtoModID stNotifyGuardInspiredSuccess_ProtoModID_ProtoModID_MAX = stNotifyGuardInspiredSuccess_ProtoModID_ModID;
const int stNotifyGuardInspiredSuccess_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyGuardInspiredSuccess_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGuardInspiredSuccess_ProtoModID_descriptor();
inline const ::std::string& stNotifyGuardInspiredSuccess_ProtoModID_Name(stNotifyGuardInspiredSuccess_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGuardInspiredSuccess_ProtoModID_descriptor(), value);
}
inline bool stNotifyGuardInspiredSuccess_ProtoModID_Parse(
    const ::std::string& name, stNotifyGuardInspiredSuccess_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGuardInspiredSuccess_ProtoModID>(
    stNotifyGuardInspiredSuccess_ProtoModID_descriptor(), name, value);
}
enum stNotifyGuardInspiredSuccess_ProtoFunID {
  stNotifyGuardInspiredSuccess_ProtoFunID_FunID = 85
};
bool stNotifyGuardInspiredSuccess_ProtoFunID_IsValid(int value);
const stNotifyGuardInspiredSuccess_ProtoFunID stNotifyGuardInspiredSuccess_ProtoFunID_ProtoFunID_MIN = stNotifyGuardInspiredSuccess_ProtoFunID_FunID;
const stNotifyGuardInspiredSuccess_ProtoFunID stNotifyGuardInspiredSuccess_ProtoFunID_ProtoFunID_MAX = stNotifyGuardInspiredSuccess_ProtoFunID_FunID;
const int stNotifyGuardInspiredSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyGuardInspiredSuccess_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGuardInspiredSuccess_ProtoFunID_descriptor();
inline const ::std::string& stNotifyGuardInspiredSuccess_ProtoFunID_Name(stNotifyGuardInspiredSuccess_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGuardInspiredSuccess_ProtoFunID_descriptor(), value);
}
inline bool stNotifyGuardInspiredSuccess_ProtoFunID_Parse(
    const ::std::string& name, stNotifyGuardInspiredSuccess_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGuardInspiredSuccess_ProtoFunID>(
    stNotifyGuardInspiredSuccess_ProtoFunID_descriptor(), name, value);
}
enum stReqRefreshGuardQuality_ProtoModID {
  stReqRefreshGuardQuality_ProtoModID_ModID = 3
};
bool stReqRefreshGuardQuality_ProtoModID_IsValid(int value);
const stReqRefreshGuardQuality_ProtoModID stReqRefreshGuardQuality_ProtoModID_ProtoModID_MIN = stReqRefreshGuardQuality_ProtoModID_ModID;
const stReqRefreshGuardQuality_ProtoModID stReqRefreshGuardQuality_ProtoModID_ProtoModID_MAX = stReqRefreshGuardQuality_ProtoModID_ModID;
const int stReqRefreshGuardQuality_ProtoModID_ProtoModID_ARRAYSIZE = stReqRefreshGuardQuality_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefreshGuardQuality_ProtoModID_descriptor();
inline const ::std::string& stReqRefreshGuardQuality_ProtoModID_Name(stReqRefreshGuardQuality_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefreshGuardQuality_ProtoModID_descriptor(), value);
}
inline bool stReqRefreshGuardQuality_ProtoModID_Parse(
    const ::std::string& name, stReqRefreshGuardQuality_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefreshGuardQuality_ProtoModID>(
    stReqRefreshGuardQuality_ProtoModID_descriptor(), name, value);
}
enum stReqRefreshGuardQuality_ProtoFunID {
  stReqRefreshGuardQuality_ProtoFunID_FunID = 86
};
bool stReqRefreshGuardQuality_ProtoFunID_IsValid(int value);
const stReqRefreshGuardQuality_ProtoFunID stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_MIN = stReqRefreshGuardQuality_ProtoFunID_FunID;
const stReqRefreshGuardQuality_ProtoFunID stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_MAX = stReqRefreshGuardQuality_ProtoFunID_FunID;
const int stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefreshGuardQuality_ProtoFunID_descriptor();
inline const ::std::string& stReqRefreshGuardQuality_ProtoFunID_Name(stReqRefreshGuardQuality_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefreshGuardQuality_ProtoFunID_descriptor(), value);
}
inline bool stReqRefreshGuardQuality_ProtoFunID_Parse(
    const ::std::string& name, stReqRefreshGuardQuality_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefreshGuardQuality_ProtoFunID>(
    stReqRefreshGuardQuality_ProtoFunID_descriptor(), name, value);
}
enum stNotifyClearOne2OneScore_ProtoModID {
  stNotifyClearOne2OneScore_ProtoModID_ModID = 3
};
bool stNotifyClearOne2OneScore_ProtoModID_IsValid(int value);
const stNotifyClearOne2OneScore_ProtoModID stNotifyClearOne2OneScore_ProtoModID_ProtoModID_MIN = stNotifyClearOne2OneScore_ProtoModID_ModID;
const stNotifyClearOne2OneScore_ProtoModID stNotifyClearOne2OneScore_ProtoModID_ProtoModID_MAX = stNotifyClearOne2OneScore_ProtoModID_ModID;
const int stNotifyClearOne2OneScore_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyClearOne2OneScore_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyClearOne2OneScore_ProtoModID_descriptor();
inline const ::std::string& stNotifyClearOne2OneScore_ProtoModID_Name(stNotifyClearOne2OneScore_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyClearOne2OneScore_ProtoModID_descriptor(), value);
}
inline bool stNotifyClearOne2OneScore_ProtoModID_Parse(
    const ::std::string& name, stNotifyClearOne2OneScore_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyClearOne2OneScore_ProtoModID>(
    stNotifyClearOne2OneScore_ProtoModID_descriptor(), name, value);
}
enum stNotifyClearOne2OneScore_ProtoFunID {
  stNotifyClearOne2OneScore_ProtoFunID_FunID = 87
};
bool stNotifyClearOne2OneScore_ProtoFunID_IsValid(int value);
const stNotifyClearOne2OneScore_ProtoFunID stNotifyClearOne2OneScore_ProtoFunID_ProtoFunID_MIN = stNotifyClearOne2OneScore_ProtoFunID_FunID;
const stNotifyClearOne2OneScore_ProtoFunID stNotifyClearOne2OneScore_ProtoFunID_ProtoFunID_MAX = stNotifyClearOne2OneScore_ProtoFunID_FunID;
const int stNotifyClearOne2OneScore_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyClearOne2OneScore_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyClearOne2OneScore_ProtoFunID_descriptor();
inline const ::std::string& stNotifyClearOne2OneScore_ProtoFunID_Name(stNotifyClearOne2OneScore_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyClearOne2OneScore_ProtoFunID_descriptor(), value);
}
inline bool stNotifyClearOne2OneScore_ProtoFunID_Parse(
    const ::std::string& name, stNotifyClearOne2OneScore_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyClearOne2OneScore_ProtoFunID>(
    stNotifyClearOne2OneScore_ProtoFunID_descriptor(), name, value);
}
enum stClearOne2OneScoreSuccess_ProtoModID {
  stClearOne2OneScoreSuccess_ProtoModID_ModID = 3
};
bool stClearOne2OneScoreSuccess_ProtoModID_IsValid(int value);
const stClearOne2OneScoreSuccess_ProtoModID stClearOne2OneScoreSuccess_ProtoModID_ProtoModID_MIN = stClearOne2OneScoreSuccess_ProtoModID_ModID;
const stClearOne2OneScoreSuccess_ProtoModID stClearOne2OneScoreSuccess_ProtoModID_ProtoModID_MAX = stClearOne2OneScoreSuccess_ProtoModID_ModID;
const int stClearOne2OneScoreSuccess_ProtoModID_ProtoModID_ARRAYSIZE = stClearOne2OneScoreSuccess_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stClearOne2OneScoreSuccess_ProtoModID_descriptor();
inline const ::std::string& stClearOne2OneScoreSuccess_ProtoModID_Name(stClearOne2OneScoreSuccess_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stClearOne2OneScoreSuccess_ProtoModID_descriptor(), value);
}
inline bool stClearOne2OneScoreSuccess_ProtoModID_Parse(
    const ::std::string& name, stClearOne2OneScoreSuccess_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stClearOne2OneScoreSuccess_ProtoModID>(
    stClearOne2OneScoreSuccess_ProtoModID_descriptor(), name, value);
}
enum stClearOne2OneScoreSuccess_ProtoFunID {
  stClearOne2OneScoreSuccess_ProtoFunID_FunID = 88
};
bool stClearOne2OneScoreSuccess_ProtoFunID_IsValid(int value);
const stClearOne2OneScoreSuccess_ProtoFunID stClearOne2OneScoreSuccess_ProtoFunID_ProtoFunID_MIN = stClearOne2OneScoreSuccess_ProtoFunID_FunID;
const stClearOne2OneScoreSuccess_ProtoFunID stClearOne2OneScoreSuccess_ProtoFunID_ProtoFunID_MAX = stClearOne2OneScoreSuccess_ProtoFunID_FunID;
const int stClearOne2OneScoreSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE = stClearOne2OneScoreSuccess_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stClearOne2OneScoreSuccess_ProtoFunID_descriptor();
inline const ::std::string& stClearOne2OneScoreSuccess_ProtoFunID_Name(stClearOne2OneScoreSuccess_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stClearOne2OneScoreSuccess_ProtoFunID_descriptor(), value);
}
inline bool stClearOne2OneScoreSuccess_ProtoFunID_Parse(
    const ::std::string& name, stClearOne2OneScoreSuccess_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stClearOne2OneScoreSuccess_ProtoFunID>(
    stClearOne2OneScoreSuccess_ProtoFunID_descriptor(), name, value);
}
enum stInterceptReward_ProtoModID {
  stInterceptReward_ProtoModID_ModID = 3
};
bool stInterceptReward_ProtoModID_IsValid(int value);
const stInterceptReward_ProtoModID stInterceptReward_ProtoModID_ProtoModID_MIN = stInterceptReward_ProtoModID_ModID;
const stInterceptReward_ProtoModID stInterceptReward_ProtoModID_ProtoModID_MAX = stInterceptReward_ProtoModID_ModID;
const int stInterceptReward_ProtoModID_ProtoModID_ARRAYSIZE = stInterceptReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInterceptReward_ProtoModID_descriptor();
inline const ::std::string& stInterceptReward_ProtoModID_Name(stInterceptReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInterceptReward_ProtoModID_descriptor(), value);
}
inline bool stInterceptReward_ProtoModID_Parse(
    const ::std::string& name, stInterceptReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInterceptReward_ProtoModID>(
    stInterceptReward_ProtoModID_descriptor(), name, value);
}
enum stInterceptReward_ProtoFunID {
  stInterceptReward_ProtoFunID_FunID = 89
};
bool stInterceptReward_ProtoFunID_IsValid(int value);
const stInterceptReward_ProtoFunID stInterceptReward_ProtoFunID_ProtoFunID_MIN = stInterceptReward_ProtoFunID_FunID;
const stInterceptReward_ProtoFunID stInterceptReward_ProtoFunID_ProtoFunID_MAX = stInterceptReward_ProtoFunID_FunID;
const int stInterceptReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stInterceptReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInterceptReward_ProtoFunID_descriptor();
inline const ::std::string& stInterceptReward_ProtoFunID_Name(stInterceptReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInterceptReward_ProtoFunID_descriptor(), value);
}
inline bool stInterceptReward_ProtoFunID_Parse(
    const ::std::string& name, stInterceptReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInterceptReward_ProtoFunID>(
    stInterceptReward_ProtoFunID_descriptor(), name, value);
}
enum stQuickFinishDecDiamond_ProtoModID {
  stQuickFinishDecDiamond_ProtoModID_ModID = 3
};
bool stQuickFinishDecDiamond_ProtoModID_IsValid(int value);
const stQuickFinishDecDiamond_ProtoModID stQuickFinishDecDiamond_ProtoModID_ProtoModID_MIN = stQuickFinishDecDiamond_ProtoModID_ModID;
const stQuickFinishDecDiamond_ProtoModID stQuickFinishDecDiamond_ProtoModID_ProtoModID_MAX = stQuickFinishDecDiamond_ProtoModID_ModID;
const int stQuickFinishDecDiamond_ProtoModID_ProtoModID_ARRAYSIZE = stQuickFinishDecDiamond_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQuickFinishDecDiamond_ProtoModID_descriptor();
inline const ::std::string& stQuickFinishDecDiamond_ProtoModID_Name(stQuickFinishDecDiamond_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQuickFinishDecDiamond_ProtoModID_descriptor(), value);
}
inline bool stQuickFinishDecDiamond_ProtoModID_Parse(
    const ::std::string& name, stQuickFinishDecDiamond_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQuickFinishDecDiamond_ProtoModID>(
    stQuickFinishDecDiamond_ProtoModID_descriptor(), name, value);
}
enum stQuickFinishDecDiamond_ProtoFunID {
  stQuickFinishDecDiamond_ProtoFunID_FunID = 90
};
bool stQuickFinishDecDiamond_ProtoFunID_IsValid(int value);
const stQuickFinishDecDiamond_ProtoFunID stQuickFinishDecDiamond_ProtoFunID_ProtoFunID_MIN = stQuickFinishDecDiamond_ProtoFunID_FunID;
const stQuickFinishDecDiamond_ProtoFunID stQuickFinishDecDiamond_ProtoFunID_ProtoFunID_MAX = stQuickFinishDecDiamond_ProtoFunID_FunID;
const int stQuickFinishDecDiamond_ProtoFunID_ProtoFunID_ARRAYSIZE = stQuickFinishDecDiamond_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQuickFinishDecDiamond_ProtoFunID_descriptor();
inline const ::std::string& stQuickFinishDecDiamond_ProtoFunID_Name(stQuickFinishDecDiamond_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQuickFinishDecDiamond_ProtoFunID_descriptor(), value);
}
inline bool stQuickFinishDecDiamond_ProtoFunID_Parse(
    const ::std::string& name, stQuickFinishDecDiamond_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQuickFinishDecDiamond_ProtoFunID>(
    stQuickFinishDecDiamond_ProtoFunID_descriptor(), name, value);
}
enum stQuickFinishDiamondSuccess_ProtoModID {
  stQuickFinishDiamondSuccess_ProtoModID_ModID = 3
};
bool stQuickFinishDiamondSuccess_ProtoModID_IsValid(int value);
const stQuickFinishDiamondSuccess_ProtoModID stQuickFinishDiamondSuccess_ProtoModID_ProtoModID_MIN = stQuickFinishDiamondSuccess_ProtoModID_ModID;
const stQuickFinishDiamondSuccess_ProtoModID stQuickFinishDiamondSuccess_ProtoModID_ProtoModID_MAX = stQuickFinishDiamondSuccess_ProtoModID_ModID;
const int stQuickFinishDiamondSuccess_ProtoModID_ProtoModID_ARRAYSIZE = stQuickFinishDiamondSuccess_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQuickFinishDiamondSuccess_ProtoModID_descriptor();
inline const ::std::string& stQuickFinishDiamondSuccess_ProtoModID_Name(stQuickFinishDiamondSuccess_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQuickFinishDiamondSuccess_ProtoModID_descriptor(), value);
}
inline bool stQuickFinishDiamondSuccess_ProtoModID_Parse(
    const ::std::string& name, stQuickFinishDiamondSuccess_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQuickFinishDiamondSuccess_ProtoModID>(
    stQuickFinishDiamondSuccess_ProtoModID_descriptor(), name, value);
}
enum stQuickFinishDiamondSuccess_ProtoFunID {
  stQuickFinishDiamondSuccess_ProtoFunID_FunID = 91
};
bool stQuickFinishDiamondSuccess_ProtoFunID_IsValid(int value);
const stQuickFinishDiamondSuccess_ProtoFunID stQuickFinishDiamondSuccess_ProtoFunID_ProtoFunID_MIN = stQuickFinishDiamondSuccess_ProtoFunID_FunID;
const stQuickFinishDiamondSuccess_ProtoFunID stQuickFinishDiamondSuccess_ProtoFunID_ProtoFunID_MAX = stQuickFinishDiamondSuccess_ProtoFunID_FunID;
const int stQuickFinishDiamondSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE = stQuickFinishDiamondSuccess_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQuickFinishDiamondSuccess_ProtoFunID_descriptor();
inline const ::std::string& stQuickFinishDiamondSuccess_ProtoFunID_Name(stQuickFinishDiamondSuccess_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQuickFinishDiamondSuccess_ProtoFunID_descriptor(), value);
}
inline bool stQuickFinishDiamondSuccess_ProtoFunID_Parse(
    const ::std::string& name, stQuickFinishDiamondSuccess_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQuickFinishDiamondSuccess_ProtoFunID>(
    stQuickFinishDiamondSuccess_ProtoFunID_descriptor(), name, value);
}
enum stOne2OnePkWithRobot_ProtoModID {
  stOne2OnePkWithRobot_ProtoModID_ModID = 3
};
bool stOne2OnePkWithRobot_ProtoModID_IsValid(int value);
const stOne2OnePkWithRobot_ProtoModID stOne2OnePkWithRobot_ProtoModID_ProtoModID_MIN = stOne2OnePkWithRobot_ProtoModID_ModID;
const stOne2OnePkWithRobot_ProtoModID stOne2OnePkWithRobot_ProtoModID_ProtoModID_MAX = stOne2OnePkWithRobot_ProtoModID_ModID;
const int stOne2OnePkWithRobot_ProtoModID_ProtoModID_ARRAYSIZE = stOne2OnePkWithRobot_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePkWithRobot_ProtoModID_descriptor();
inline const ::std::string& stOne2OnePkWithRobot_ProtoModID_Name(stOne2OnePkWithRobot_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePkWithRobot_ProtoModID_descriptor(), value);
}
inline bool stOne2OnePkWithRobot_ProtoModID_Parse(
    const ::std::string& name, stOne2OnePkWithRobot_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePkWithRobot_ProtoModID>(
    stOne2OnePkWithRobot_ProtoModID_descriptor(), name, value);
}
enum stOne2OnePkWithRobot_ProtoFunID {
  stOne2OnePkWithRobot_ProtoFunID_FunID = 92
};
bool stOne2OnePkWithRobot_ProtoFunID_IsValid(int value);
const stOne2OnePkWithRobot_ProtoFunID stOne2OnePkWithRobot_ProtoFunID_ProtoFunID_MIN = stOne2OnePkWithRobot_ProtoFunID_FunID;
const stOne2OnePkWithRobot_ProtoFunID stOne2OnePkWithRobot_ProtoFunID_ProtoFunID_MAX = stOne2OnePkWithRobot_ProtoFunID_FunID;
const int stOne2OnePkWithRobot_ProtoFunID_ProtoFunID_ARRAYSIZE = stOne2OnePkWithRobot_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePkWithRobot_ProtoFunID_descriptor();
inline const ::std::string& stOne2OnePkWithRobot_ProtoFunID_Name(stOne2OnePkWithRobot_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePkWithRobot_ProtoFunID_descriptor(), value);
}
inline bool stOne2OnePkWithRobot_ProtoFunID_Parse(
    const ::std::string& name, stOne2OnePkWithRobot_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePkWithRobot_ProtoFunID>(
    stOne2OnePkWithRobot_ProtoFunID_descriptor(), name, value);
}
enum stNotifyUserBeginGuard_ProtoModID {
  stNotifyUserBeginGuard_ProtoModID_ModID = 3
};
bool stNotifyUserBeginGuard_ProtoModID_IsValid(int value);
const stNotifyUserBeginGuard_ProtoModID stNotifyUserBeginGuard_ProtoModID_ProtoModID_MIN = stNotifyUserBeginGuard_ProtoModID_ModID;
const stNotifyUserBeginGuard_ProtoModID stNotifyUserBeginGuard_ProtoModID_ProtoModID_MAX = stNotifyUserBeginGuard_ProtoModID_ModID;
const int stNotifyUserBeginGuard_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyUserBeginGuard_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyUserBeginGuard_ProtoModID_descriptor();
inline const ::std::string& stNotifyUserBeginGuard_ProtoModID_Name(stNotifyUserBeginGuard_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyUserBeginGuard_ProtoModID_descriptor(), value);
}
inline bool stNotifyUserBeginGuard_ProtoModID_Parse(
    const ::std::string& name, stNotifyUserBeginGuard_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyUserBeginGuard_ProtoModID>(
    stNotifyUserBeginGuard_ProtoModID_descriptor(), name, value);
}
enum stNotifyUserBeginGuard_ProtoFunID {
  stNotifyUserBeginGuard_ProtoFunID_FunID = 93
};
bool stNotifyUserBeginGuard_ProtoFunID_IsValid(int value);
const stNotifyUserBeginGuard_ProtoFunID stNotifyUserBeginGuard_ProtoFunID_ProtoFunID_MIN = stNotifyUserBeginGuard_ProtoFunID_FunID;
const stNotifyUserBeginGuard_ProtoFunID stNotifyUserBeginGuard_ProtoFunID_ProtoFunID_MAX = stNotifyUserBeginGuard_ProtoFunID_FunID;
const int stNotifyUserBeginGuard_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyUserBeginGuard_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyUserBeginGuard_ProtoFunID_descriptor();
inline const ::std::string& stNotifyUserBeginGuard_ProtoFunID_Name(stNotifyUserBeginGuard_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyUserBeginGuard_ProtoFunID_descriptor(), value);
}
inline bool stNotifyUserBeginGuard_ProtoFunID_Parse(
    const ::std::string& name, stNotifyUserBeginGuard_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyUserBeginGuard_ProtoFunID>(
    stNotifyUserBeginGuard_ProtoFunID_descriptor(), name, value);
}
enum stNotifyUserInterceptResult_ProtoModID {
  stNotifyUserInterceptResult_ProtoModID_ModID = 3
};
bool stNotifyUserInterceptResult_ProtoModID_IsValid(int value);
const stNotifyUserInterceptResult_ProtoModID stNotifyUserInterceptResult_ProtoModID_ProtoModID_MIN = stNotifyUserInterceptResult_ProtoModID_ModID;
const stNotifyUserInterceptResult_ProtoModID stNotifyUserInterceptResult_ProtoModID_ProtoModID_MAX = stNotifyUserInterceptResult_ProtoModID_ModID;
const int stNotifyUserInterceptResult_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyUserInterceptResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyUserInterceptResult_ProtoModID_descriptor();
inline const ::std::string& stNotifyUserInterceptResult_ProtoModID_Name(stNotifyUserInterceptResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyUserInterceptResult_ProtoModID_descriptor(), value);
}
inline bool stNotifyUserInterceptResult_ProtoModID_Parse(
    const ::std::string& name, stNotifyUserInterceptResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyUserInterceptResult_ProtoModID>(
    stNotifyUserInterceptResult_ProtoModID_descriptor(), name, value);
}
enum stNotifyUserInterceptResult_ProtoFunID {
  stNotifyUserInterceptResult_ProtoFunID_FunID = 94
};
bool stNotifyUserInterceptResult_ProtoFunID_IsValid(int value);
const stNotifyUserInterceptResult_ProtoFunID stNotifyUserInterceptResult_ProtoFunID_ProtoFunID_MIN = stNotifyUserInterceptResult_ProtoFunID_FunID;
const stNotifyUserInterceptResult_ProtoFunID stNotifyUserInterceptResult_ProtoFunID_ProtoFunID_MAX = stNotifyUserInterceptResult_ProtoFunID_FunID;
const int stNotifyUserInterceptResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyUserInterceptResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyUserInterceptResult_ProtoFunID_descriptor();
inline const ::std::string& stNotifyUserInterceptResult_ProtoFunID_Name(stNotifyUserInterceptResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyUserInterceptResult_ProtoFunID_descriptor(), value);
}
inline bool stNotifyUserInterceptResult_ProtoFunID_Parse(
    const ::std::string& name, stNotifyUserInterceptResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyUserInterceptResult_ProtoFunID>(
    stNotifyUserInterceptResult_ProtoFunID_descriptor(), name, value);
}
enum stNotifyCloseBetaReward_ProtoModID {
  stNotifyCloseBetaReward_ProtoModID_ModID = 3
};
bool stNotifyCloseBetaReward_ProtoModID_IsValid(int value);
const stNotifyCloseBetaReward_ProtoModID stNotifyCloseBetaReward_ProtoModID_ProtoModID_MIN = stNotifyCloseBetaReward_ProtoModID_ModID;
const stNotifyCloseBetaReward_ProtoModID stNotifyCloseBetaReward_ProtoModID_ProtoModID_MAX = stNotifyCloseBetaReward_ProtoModID_ModID;
const int stNotifyCloseBetaReward_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyCloseBetaReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyCloseBetaReward_ProtoModID_descriptor();
inline const ::std::string& stNotifyCloseBetaReward_ProtoModID_Name(stNotifyCloseBetaReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyCloseBetaReward_ProtoModID_descriptor(), value);
}
inline bool stNotifyCloseBetaReward_ProtoModID_Parse(
    const ::std::string& name, stNotifyCloseBetaReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyCloseBetaReward_ProtoModID>(
    stNotifyCloseBetaReward_ProtoModID_descriptor(), name, value);
}
enum stNotifyCloseBetaReward_ProtoFunID {
  stNotifyCloseBetaReward_ProtoFunID_FunID = 95
};
bool stNotifyCloseBetaReward_ProtoFunID_IsValid(int value);
const stNotifyCloseBetaReward_ProtoFunID stNotifyCloseBetaReward_ProtoFunID_ProtoFunID_MIN = stNotifyCloseBetaReward_ProtoFunID_FunID;
const stNotifyCloseBetaReward_ProtoFunID stNotifyCloseBetaReward_ProtoFunID_ProtoFunID_MAX = stNotifyCloseBetaReward_ProtoFunID_FunID;
const int stNotifyCloseBetaReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyCloseBetaReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyCloseBetaReward_ProtoFunID_descriptor();
inline const ::std::string& stNotifyCloseBetaReward_ProtoFunID_Name(stNotifyCloseBetaReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyCloseBetaReward_ProtoFunID_descriptor(), value);
}
inline bool stNotifyCloseBetaReward_ProtoFunID_Parse(
    const ::std::string& name, stNotifyCloseBetaReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyCloseBetaReward_ProtoFunID>(
    stNotifyCloseBetaReward_ProtoFunID_descriptor(), name, value);
}
enum stEnterManorFightMap_ProtoModID {
  stEnterManorFightMap_ProtoModID_ModID = 3
};
bool stEnterManorFightMap_ProtoModID_IsValid(int value);
const stEnterManorFightMap_ProtoModID stEnterManorFightMap_ProtoModID_ProtoModID_MIN = stEnterManorFightMap_ProtoModID_ModID;
const stEnterManorFightMap_ProtoModID stEnterManorFightMap_ProtoModID_ProtoModID_MAX = stEnterManorFightMap_ProtoModID_ModID;
const int stEnterManorFightMap_ProtoModID_ProtoModID_ARRAYSIZE = stEnterManorFightMap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterManorFightMap_ProtoModID_descriptor();
inline const ::std::string& stEnterManorFightMap_ProtoModID_Name(stEnterManorFightMap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterManorFightMap_ProtoModID_descriptor(), value);
}
inline bool stEnterManorFightMap_ProtoModID_Parse(
    const ::std::string& name, stEnterManorFightMap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterManorFightMap_ProtoModID>(
    stEnterManorFightMap_ProtoModID_descriptor(), name, value);
}
enum stEnterManorFightMap_ProtoFunID {
  stEnterManorFightMap_ProtoFunID_FunID = 96
};
bool stEnterManorFightMap_ProtoFunID_IsValid(int value);
const stEnterManorFightMap_ProtoFunID stEnterManorFightMap_ProtoFunID_ProtoFunID_MIN = stEnterManorFightMap_ProtoFunID_FunID;
const stEnterManorFightMap_ProtoFunID stEnterManorFightMap_ProtoFunID_ProtoFunID_MAX = stEnterManorFightMap_ProtoFunID_FunID;
const int stEnterManorFightMap_ProtoFunID_ProtoFunID_ARRAYSIZE = stEnterManorFightMap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterManorFightMap_ProtoFunID_descriptor();
inline const ::std::string& stEnterManorFightMap_ProtoFunID_Name(stEnterManorFightMap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterManorFightMap_ProtoFunID_descriptor(), value);
}
inline bool stEnterManorFightMap_ProtoFunID_Parse(
    const ::std::string& name, stEnterManorFightMap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterManorFightMap_ProtoFunID>(
    stEnterManorFightMap_ProtoFunID_descriptor(), name, value);
}
enum stFinishManorFight_ProtoModID {
  stFinishManorFight_ProtoModID_ModID = 3
};
bool stFinishManorFight_ProtoModID_IsValid(int value);
const stFinishManorFight_ProtoModID stFinishManorFight_ProtoModID_ProtoModID_MIN = stFinishManorFight_ProtoModID_ModID;
const stFinishManorFight_ProtoModID stFinishManorFight_ProtoModID_ProtoModID_MAX = stFinishManorFight_ProtoModID_ModID;
const int stFinishManorFight_ProtoModID_ProtoModID_ARRAYSIZE = stFinishManorFight_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFinishManorFight_ProtoModID_descriptor();
inline const ::std::string& stFinishManorFight_ProtoModID_Name(stFinishManorFight_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFinishManorFight_ProtoModID_descriptor(), value);
}
inline bool stFinishManorFight_ProtoModID_Parse(
    const ::std::string& name, stFinishManorFight_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFinishManorFight_ProtoModID>(
    stFinishManorFight_ProtoModID_descriptor(), name, value);
}
enum stFinishManorFight_ProtoFunID {
  stFinishManorFight_ProtoFunID_FunID = 97
};
bool stFinishManorFight_ProtoFunID_IsValid(int value);
const stFinishManorFight_ProtoFunID stFinishManorFight_ProtoFunID_ProtoFunID_MIN = stFinishManorFight_ProtoFunID_FunID;
const stFinishManorFight_ProtoFunID stFinishManorFight_ProtoFunID_ProtoFunID_MAX = stFinishManorFight_ProtoFunID_FunID;
const int stFinishManorFight_ProtoFunID_ProtoFunID_ARRAYSIZE = stFinishManorFight_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFinishManorFight_ProtoFunID_descriptor();
inline const ::std::string& stFinishManorFight_ProtoFunID_Name(stFinishManorFight_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFinishManorFight_ProtoFunID_descriptor(), value);
}
inline bool stFinishManorFight_ProtoFunID_Parse(
    const ::std::string& name, stFinishManorFight_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFinishManorFight_ProtoFunID>(
    stFinishManorFight_ProtoFunID_descriptor(), name, value);
}
enum stExistName_eResult {
  stExistName_eResult_eSuccess = 1,
  stExistName_eResult_eName_Repetition = 2
};
bool stExistName_eResult_IsValid(int value);
const stExistName_eResult stExistName_eResult_eResult_MIN = stExistName_eResult_eSuccess;
const stExistName_eResult stExistName_eResult_eResult_MAX = stExistName_eResult_eName_Repetition;
const int stExistName_eResult_eResult_ARRAYSIZE = stExistName_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExistName_eResult_descriptor();
inline const ::std::string& stExistName_eResult_Name(stExistName_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExistName_eResult_descriptor(), value);
}
inline bool stExistName_eResult_Parse(
    const ::std::string& name, stExistName_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExistName_eResult>(
    stExistName_eResult_descriptor(), name, value);
}
enum stExistName_ProtoModID {
  stExistName_ProtoModID_ModID = 3
};
bool stExistName_ProtoModID_IsValid(int value);
const stExistName_ProtoModID stExistName_ProtoModID_ProtoModID_MIN = stExistName_ProtoModID_ModID;
const stExistName_ProtoModID stExistName_ProtoModID_ProtoModID_MAX = stExistName_ProtoModID_ModID;
const int stExistName_ProtoModID_ProtoModID_ARRAYSIZE = stExistName_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExistName_ProtoModID_descriptor();
inline const ::std::string& stExistName_ProtoModID_Name(stExistName_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExistName_ProtoModID_descriptor(), value);
}
inline bool stExistName_ProtoModID_Parse(
    const ::std::string& name, stExistName_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExistName_ProtoModID>(
    stExistName_ProtoModID_descriptor(), name, value);
}
enum stExistName_ProtoFunID {
  stExistName_ProtoFunID_FunID = 98
};
bool stExistName_ProtoFunID_IsValid(int value);
const stExistName_ProtoFunID stExistName_ProtoFunID_ProtoFunID_MIN = stExistName_ProtoFunID_FunID;
const stExistName_ProtoFunID stExistName_ProtoFunID_ProtoFunID_MAX = stExistName_ProtoFunID_FunID;
const int stExistName_ProtoFunID_ProtoFunID_ARRAYSIZE = stExistName_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExistName_ProtoFunID_descriptor();
inline const ::std::string& stExistName_ProtoFunID_Name(stExistName_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExistName_ProtoFunID_descriptor(), value);
}
inline bool stExistName_ProtoFunID_Parse(
    const ::std::string& name, stExistName_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExistName_ProtoFunID>(
    stExistName_ProtoFunID_descriptor(), name, value);
}
enum stSynName_ProtoModID {
  stSynName_ProtoModID_ModID = 3
};
bool stSynName_ProtoModID_IsValid(int value);
const stSynName_ProtoModID stSynName_ProtoModID_ProtoModID_MIN = stSynName_ProtoModID_ModID;
const stSynName_ProtoModID stSynName_ProtoModID_ProtoModID_MAX = stSynName_ProtoModID_ModID;
const int stSynName_ProtoModID_ProtoModID_ARRAYSIZE = stSynName_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynName_ProtoModID_descriptor();
inline const ::std::string& stSynName_ProtoModID_Name(stSynName_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynName_ProtoModID_descriptor(), value);
}
inline bool stSynName_ProtoModID_Parse(
    const ::std::string& name, stSynName_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynName_ProtoModID>(
    stSynName_ProtoModID_descriptor(), name, value);
}
enum stSynName_ProtoFunID {
  stSynName_ProtoFunID_FunID = 99
};
bool stSynName_ProtoFunID_IsValid(int value);
const stSynName_ProtoFunID stSynName_ProtoFunID_ProtoFunID_MIN = stSynName_ProtoFunID_FunID;
const stSynName_ProtoFunID stSynName_ProtoFunID_ProtoFunID_MAX = stSynName_ProtoFunID_FunID;
const int stSynName_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynName_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynName_ProtoFunID_descriptor();
inline const ::std::string& stSynName_ProtoFunID_Name(stSynName_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynName_ProtoFunID_descriptor(), value);
}
inline bool stSynName_ProtoFunID_Parse(
    const ::std::string& name, stSynName_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynName_ProtoFunID>(
    stSynName_ProtoFunID_descriptor(), name, value);
}
enum stSynGloryfashionCharID_ProtoModID {
  stSynGloryfashionCharID_ProtoModID_ModID = 3
};
bool stSynGloryfashionCharID_ProtoModID_IsValid(int value);
const stSynGloryfashionCharID_ProtoModID stSynGloryfashionCharID_ProtoModID_ProtoModID_MIN = stSynGloryfashionCharID_ProtoModID_ModID;
const stSynGloryfashionCharID_ProtoModID stSynGloryfashionCharID_ProtoModID_ProtoModID_MAX = stSynGloryfashionCharID_ProtoModID_ModID;
const int stSynGloryfashionCharID_ProtoModID_ProtoModID_ARRAYSIZE = stSynGloryfashionCharID_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGloryfashionCharID_ProtoModID_descriptor();
inline const ::std::string& stSynGloryfashionCharID_ProtoModID_Name(stSynGloryfashionCharID_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGloryfashionCharID_ProtoModID_descriptor(), value);
}
inline bool stSynGloryfashionCharID_ProtoModID_Parse(
    const ::std::string& name, stSynGloryfashionCharID_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGloryfashionCharID_ProtoModID>(
    stSynGloryfashionCharID_ProtoModID_descriptor(), name, value);
}
enum stSynGloryfashionCharID_ProtoFunID {
  stSynGloryfashionCharID_ProtoFunID_FunID = 100
};
bool stSynGloryfashionCharID_ProtoFunID_IsValid(int value);
const stSynGloryfashionCharID_ProtoFunID stSynGloryfashionCharID_ProtoFunID_ProtoFunID_MIN = stSynGloryfashionCharID_ProtoFunID_FunID;
const stSynGloryfashionCharID_ProtoFunID stSynGloryfashionCharID_ProtoFunID_ProtoFunID_MAX = stSynGloryfashionCharID_ProtoFunID_FunID;
const int stSynGloryfashionCharID_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynGloryfashionCharID_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGloryfashionCharID_ProtoFunID_descriptor();
inline const ::std::string& stSynGloryfashionCharID_ProtoFunID_Name(stSynGloryfashionCharID_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGloryfashionCharID_ProtoFunID_descriptor(), value);
}
inline bool stSynGloryfashionCharID_ProtoFunID_Parse(
    const ::std::string& name, stSynGloryfashionCharID_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGloryfashionCharID_ProtoFunID>(
    stSynGloryfashionCharID_ProtoFunID_descriptor(), name, value);
}
enum stAllDevilCall_ProtoModID {
  stAllDevilCall_ProtoModID_ModID = 3
};
bool stAllDevilCall_ProtoModID_IsValid(int value);
const stAllDevilCall_ProtoModID stAllDevilCall_ProtoModID_ProtoModID_MIN = stAllDevilCall_ProtoModID_ModID;
const stAllDevilCall_ProtoModID stAllDevilCall_ProtoModID_ProtoModID_MAX = stAllDevilCall_ProtoModID_ModID;
const int stAllDevilCall_ProtoModID_ProtoModID_ARRAYSIZE = stAllDevilCall_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAllDevilCall_ProtoModID_descriptor();
inline const ::std::string& stAllDevilCall_ProtoModID_Name(stAllDevilCall_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAllDevilCall_ProtoModID_descriptor(), value);
}
inline bool stAllDevilCall_ProtoModID_Parse(
    const ::std::string& name, stAllDevilCall_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAllDevilCall_ProtoModID>(
    stAllDevilCall_ProtoModID_descriptor(), name, value);
}
enum stAllDevilCall_ProtoFunID {
  stAllDevilCall_ProtoFunID_FunID = 101
};
bool stAllDevilCall_ProtoFunID_IsValid(int value);
const stAllDevilCall_ProtoFunID stAllDevilCall_ProtoFunID_ProtoFunID_MIN = stAllDevilCall_ProtoFunID_FunID;
const stAllDevilCall_ProtoFunID stAllDevilCall_ProtoFunID_ProtoFunID_MAX = stAllDevilCall_ProtoFunID_FunID;
const int stAllDevilCall_ProtoFunID_ProtoFunID_ARRAYSIZE = stAllDevilCall_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAllDevilCall_ProtoFunID_descriptor();
inline const ::std::string& stAllDevilCall_ProtoFunID_Name(stAllDevilCall_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAllDevilCall_ProtoFunID_descriptor(), value);
}
inline bool stAllDevilCall_ProtoFunID_Parse(
    const ::std::string& name, stAllDevilCall_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAllDevilCall_ProtoFunID>(
    stAllDevilCall_ProtoFunID_descriptor(), name, value);
}
enum stDevilCallReward_ProtoModID {
  stDevilCallReward_ProtoModID_ModID = 3
};
bool stDevilCallReward_ProtoModID_IsValid(int value);
const stDevilCallReward_ProtoModID stDevilCallReward_ProtoModID_ProtoModID_MIN = stDevilCallReward_ProtoModID_ModID;
const stDevilCallReward_ProtoModID stDevilCallReward_ProtoModID_ProtoModID_MAX = stDevilCallReward_ProtoModID_ModID;
const int stDevilCallReward_ProtoModID_ProtoModID_ARRAYSIZE = stDevilCallReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDevilCallReward_ProtoModID_descriptor();
inline const ::std::string& stDevilCallReward_ProtoModID_Name(stDevilCallReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDevilCallReward_ProtoModID_descriptor(), value);
}
inline bool stDevilCallReward_ProtoModID_Parse(
    const ::std::string& name, stDevilCallReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDevilCallReward_ProtoModID>(
    stDevilCallReward_ProtoModID_descriptor(), name, value);
}
enum stDevilCallReward_ProtoFunID {
  stDevilCallReward_ProtoFunID_FunID = 102
};
bool stDevilCallReward_ProtoFunID_IsValid(int value);
const stDevilCallReward_ProtoFunID stDevilCallReward_ProtoFunID_ProtoFunID_MIN = stDevilCallReward_ProtoFunID_FunID;
const stDevilCallReward_ProtoFunID stDevilCallReward_ProtoFunID_ProtoFunID_MAX = stDevilCallReward_ProtoFunID_FunID;
const int stDevilCallReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stDevilCallReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDevilCallReward_ProtoFunID_descriptor();
inline const ::std::string& stDevilCallReward_ProtoFunID_Name(stDevilCallReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDevilCallReward_ProtoFunID_descriptor(), value);
}
inline bool stDevilCallReward_ProtoFunID_Parse(
    const ::std::string& name, stDevilCallReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDevilCallReward_ProtoFunID>(
    stDevilCallReward_ProtoFunID_descriptor(), name, value);
}
enum stDevilCallRewardRet_ProtoModID {
  stDevilCallRewardRet_ProtoModID_ModID = 3
};
bool stDevilCallRewardRet_ProtoModID_IsValid(int value);
const stDevilCallRewardRet_ProtoModID stDevilCallRewardRet_ProtoModID_ProtoModID_MIN = stDevilCallRewardRet_ProtoModID_ModID;
const stDevilCallRewardRet_ProtoModID stDevilCallRewardRet_ProtoModID_ProtoModID_MAX = stDevilCallRewardRet_ProtoModID_ModID;
const int stDevilCallRewardRet_ProtoModID_ProtoModID_ARRAYSIZE = stDevilCallRewardRet_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDevilCallRewardRet_ProtoModID_descriptor();
inline const ::std::string& stDevilCallRewardRet_ProtoModID_Name(stDevilCallRewardRet_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDevilCallRewardRet_ProtoModID_descriptor(), value);
}
inline bool stDevilCallRewardRet_ProtoModID_Parse(
    const ::std::string& name, stDevilCallRewardRet_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDevilCallRewardRet_ProtoModID>(
    stDevilCallRewardRet_ProtoModID_descriptor(), name, value);
}
enum stDevilCallRewardRet_ProtoFunID {
  stDevilCallRewardRet_ProtoFunID_FunID = 103
};
bool stDevilCallRewardRet_ProtoFunID_IsValid(int value);
const stDevilCallRewardRet_ProtoFunID stDevilCallRewardRet_ProtoFunID_ProtoFunID_MIN = stDevilCallRewardRet_ProtoFunID_FunID;
const stDevilCallRewardRet_ProtoFunID stDevilCallRewardRet_ProtoFunID_ProtoFunID_MAX = stDevilCallRewardRet_ProtoFunID_FunID;
const int stDevilCallRewardRet_ProtoFunID_ProtoFunID_ARRAYSIZE = stDevilCallRewardRet_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDevilCallRewardRet_ProtoFunID_descriptor();
inline const ::std::string& stDevilCallRewardRet_ProtoFunID_Name(stDevilCallRewardRet_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDevilCallRewardRet_ProtoFunID_descriptor(), value);
}
inline bool stDevilCallRewardRet_ProtoFunID_Parse(
    const ::std::string& name, stDevilCallRewardRet_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDevilCallRewardRet_ProtoFunID>(
    stDevilCallRewardRet_ProtoFunID_descriptor(), name, value);
}
enum stDevilCall_ProtoModID {
  stDevilCall_ProtoModID_ModID = 3
};
bool stDevilCall_ProtoModID_IsValid(int value);
const stDevilCall_ProtoModID stDevilCall_ProtoModID_ProtoModID_MIN = stDevilCall_ProtoModID_ModID;
const stDevilCall_ProtoModID stDevilCall_ProtoModID_ProtoModID_MAX = stDevilCall_ProtoModID_ModID;
const int stDevilCall_ProtoModID_ProtoModID_ARRAYSIZE = stDevilCall_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDevilCall_ProtoModID_descriptor();
inline const ::std::string& stDevilCall_ProtoModID_Name(stDevilCall_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDevilCall_ProtoModID_descriptor(), value);
}
inline bool stDevilCall_ProtoModID_Parse(
    const ::std::string& name, stDevilCall_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDevilCall_ProtoModID>(
    stDevilCall_ProtoModID_descriptor(), name, value);
}
enum stDevilCall_ProtoFunID {
  stDevilCall_ProtoFunID_FunID = 104
};
bool stDevilCall_ProtoFunID_IsValid(int value);
const stDevilCall_ProtoFunID stDevilCall_ProtoFunID_ProtoFunID_MIN = stDevilCall_ProtoFunID_FunID;
const stDevilCall_ProtoFunID stDevilCall_ProtoFunID_ProtoFunID_MAX = stDevilCall_ProtoFunID_FunID;
const int stDevilCall_ProtoFunID_ProtoFunID_ARRAYSIZE = stDevilCall_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDevilCall_ProtoFunID_descriptor();
inline const ::std::string& stDevilCall_ProtoFunID_Name(stDevilCall_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDevilCall_ProtoFunID_descriptor(), value);
}
inline bool stDevilCall_ProtoFunID_Parse(
    const ::std::string& name, stDevilCall_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDevilCall_ProtoFunID>(
    stDevilCall_ProtoFunID_descriptor(), name, value);
}
enum stDevilCallRet_ProtoModID {
  stDevilCallRet_ProtoModID_ModID = 3
};
bool stDevilCallRet_ProtoModID_IsValid(int value);
const stDevilCallRet_ProtoModID stDevilCallRet_ProtoModID_ProtoModID_MIN = stDevilCallRet_ProtoModID_ModID;
const stDevilCallRet_ProtoModID stDevilCallRet_ProtoModID_ProtoModID_MAX = stDevilCallRet_ProtoModID_ModID;
const int stDevilCallRet_ProtoModID_ProtoModID_ARRAYSIZE = stDevilCallRet_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDevilCallRet_ProtoModID_descriptor();
inline const ::std::string& stDevilCallRet_ProtoModID_Name(stDevilCallRet_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDevilCallRet_ProtoModID_descriptor(), value);
}
inline bool stDevilCallRet_ProtoModID_Parse(
    const ::std::string& name, stDevilCallRet_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDevilCallRet_ProtoModID>(
    stDevilCallRet_ProtoModID_descriptor(), name, value);
}
enum stDevilCallRet_ProtoFunID {
  stDevilCallRet_ProtoFunID_FunID = 105
};
bool stDevilCallRet_ProtoFunID_IsValid(int value);
const stDevilCallRet_ProtoFunID stDevilCallRet_ProtoFunID_ProtoFunID_MIN = stDevilCallRet_ProtoFunID_FunID;
const stDevilCallRet_ProtoFunID stDevilCallRet_ProtoFunID_ProtoFunID_MAX = stDevilCallRet_ProtoFunID_FunID;
const int stDevilCallRet_ProtoFunID_ProtoFunID_ARRAYSIZE = stDevilCallRet_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDevilCallRet_ProtoFunID_descriptor();
inline const ::std::string& stDevilCallRet_ProtoFunID_Name(stDevilCallRet_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDevilCallRet_ProtoFunID_descriptor(), value);
}
inline bool stDevilCallRet_ProtoFunID_Parse(
    const ::std::string& name, stDevilCallRet_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDevilCallRet_ProtoFunID>(
    stDevilCallRet_ProtoFunID_descriptor(), name, value);
}
enum stDevilCallSummary_ProtoModID {
  stDevilCallSummary_ProtoModID_ModID = 3
};
bool stDevilCallSummary_ProtoModID_IsValid(int value);
const stDevilCallSummary_ProtoModID stDevilCallSummary_ProtoModID_ProtoModID_MIN = stDevilCallSummary_ProtoModID_ModID;
const stDevilCallSummary_ProtoModID stDevilCallSummary_ProtoModID_ProtoModID_MAX = stDevilCallSummary_ProtoModID_ModID;
const int stDevilCallSummary_ProtoModID_ProtoModID_ARRAYSIZE = stDevilCallSummary_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDevilCallSummary_ProtoModID_descriptor();
inline const ::std::string& stDevilCallSummary_ProtoModID_Name(stDevilCallSummary_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDevilCallSummary_ProtoModID_descriptor(), value);
}
inline bool stDevilCallSummary_ProtoModID_Parse(
    const ::std::string& name, stDevilCallSummary_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDevilCallSummary_ProtoModID>(
    stDevilCallSummary_ProtoModID_descriptor(), name, value);
}
enum stDevilCallSummary_ProtoFunID {
  stDevilCallSummary_ProtoFunID_FunID = 106
};
bool stDevilCallSummary_ProtoFunID_IsValid(int value);
const stDevilCallSummary_ProtoFunID stDevilCallSummary_ProtoFunID_ProtoFunID_MIN = stDevilCallSummary_ProtoFunID_FunID;
const stDevilCallSummary_ProtoFunID stDevilCallSummary_ProtoFunID_ProtoFunID_MAX = stDevilCallSummary_ProtoFunID_FunID;
const int stDevilCallSummary_ProtoFunID_ProtoFunID_ARRAYSIZE = stDevilCallSummary_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDevilCallSummary_ProtoFunID_descriptor();
inline const ::std::string& stDevilCallSummary_ProtoFunID_Name(stDevilCallSummary_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDevilCallSummary_ProtoFunID_descriptor(), value);
}
inline bool stDevilCallSummary_ProtoFunID_Parse(
    const ::std::string& name, stDevilCallSummary_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDevilCallSummary_ProtoFunID>(
    stDevilCallSummary_ProtoFunID_descriptor(), name, value);
}
enum stExpeditionInfo_ProtoModID {
  stExpeditionInfo_ProtoModID_ModID = 3
};
bool stExpeditionInfo_ProtoModID_IsValid(int value);
const stExpeditionInfo_ProtoModID stExpeditionInfo_ProtoModID_ProtoModID_MIN = stExpeditionInfo_ProtoModID_ModID;
const stExpeditionInfo_ProtoModID stExpeditionInfo_ProtoModID_ProtoModID_MAX = stExpeditionInfo_ProtoModID_ModID;
const int stExpeditionInfo_ProtoModID_ProtoModID_ARRAYSIZE = stExpeditionInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpeditionInfo_ProtoModID_descriptor();
inline const ::std::string& stExpeditionInfo_ProtoModID_Name(stExpeditionInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpeditionInfo_ProtoModID_descriptor(), value);
}
inline bool stExpeditionInfo_ProtoModID_Parse(
    const ::std::string& name, stExpeditionInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpeditionInfo_ProtoModID>(
    stExpeditionInfo_ProtoModID_descriptor(), name, value);
}
enum stExpeditionInfo_ProtoFunID {
  stExpeditionInfo_ProtoFunID_FunID = 107
};
bool stExpeditionInfo_ProtoFunID_IsValid(int value);
const stExpeditionInfo_ProtoFunID stExpeditionInfo_ProtoFunID_ProtoFunID_MIN = stExpeditionInfo_ProtoFunID_FunID;
const stExpeditionInfo_ProtoFunID stExpeditionInfo_ProtoFunID_ProtoFunID_MAX = stExpeditionInfo_ProtoFunID_FunID;
const int stExpeditionInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stExpeditionInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpeditionInfo_ProtoFunID_descriptor();
inline const ::std::string& stExpeditionInfo_ProtoFunID_Name(stExpeditionInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpeditionInfo_ProtoFunID_descriptor(), value);
}
inline bool stExpeditionInfo_ProtoFunID_Parse(
    const ::std::string& name, stExpeditionInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpeditionInfo_ProtoFunID>(
    stExpeditionInfo_ProtoFunID_descriptor(), name, value);
}
enum stExpedition_ProtoModID {
  stExpedition_ProtoModID_ModID = 3
};
bool stExpedition_ProtoModID_IsValid(int value);
const stExpedition_ProtoModID stExpedition_ProtoModID_ProtoModID_MIN = stExpedition_ProtoModID_ModID;
const stExpedition_ProtoModID stExpedition_ProtoModID_ProtoModID_MAX = stExpedition_ProtoModID_ModID;
const int stExpedition_ProtoModID_ProtoModID_ARRAYSIZE = stExpedition_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpedition_ProtoModID_descriptor();
inline const ::std::string& stExpedition_ProtoModID_Name(stExpedition_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpedition_ProtoModID_descriptor(), value);
}
inline bool stExpedition_ProtoModID_Parse(
    const ::std::string& name, stExpedition_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpedition_ProtoModID>(
    stExpedition_ProtoModID_descriptor(), name, value);
}
enum stExpedition_ProtoFunID {
  stExpedition_ProtoFunID_FunID = 108
};
bool stExpedition_ProtoFunID_IsValid(int value);
const stExpedition_ProtoFunID stExpedition_ProtoFunID_ProtoFunID_MIN = stExpedition_ProtoFunID_FunID;
const stExpedition_ProtoFunID stExpedition_ProtoFunID_ProtoFunID_MAX = stExpedition_ProtoFunID_FunID;
const int stExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE = stExpedition_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpedition_ProtoFunID_descriptor();
inline const ::std::string& stExpedition_ProtoFunID_Name(stExpedition_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpedition_ProtoFunID_descriptor(), value);
}
inline bool stExpedition_ProtoFunID_Parse(
    const ::std::string& name, stExpedition_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpedition_ProtoFunID>(
    stExpedition_ProtoFunID_descriptor(), name, value);
}
enum stExpeditionRet_ProtoModID {
  stExpeditionRet_ProtoModID_ModID = 3
};
bool stExpeditionRet_ProtoModID_IsValid(int value);
const stExpeditionRet_ProtoModID stExpeditionRet_ProtoModID_ProtoModID_MIN = stExpeditionRet_ProtoModID_ModID;
const stExpeditionRet_ProtoModID stExpeditionRet_ProtoModID_ProtoModID_MAX = stExpeditionRet_ProtoModID_ModID;
const int stExpeditionRet_ProtoModID_ProtoModID_ARRAYSIZE = stExpeditionRet_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpeditionRet_ProtoModID_descriptor();
inline const ::std::string& stExpeditionRet_ProtoModID_Name(stExpeditionRet_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpeditionRet_ProtoModID_descriptor(), value);
}
inline bool stExpeditionRet_ProtoModID_Parse(
    const ::std::string& name, stExpeditionRet_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpeditionRet_ProtoModID>(
    stExpeditionRet_ProtoModID_descriptor(), name, value);
}
enum stExpeditionRet_ProtoFunID {
  stExpeditionRet_ProtoFunID_FunID = 109
};
bool stExpeditionRet_ProtoFunID_IsValid(int value);
const stExpeditionRet_ProtoFunID stExpeditionRet_ProtoFunID_ProtoFunID_MIN = stExpeditionRet_ProtoFunID_FunID;
const stExpeditionRet_ProtoFunID stExpeditionRet_ProtoFunID_ProtoFunID_MAX = stExpeditionRet_ProtoFunID_FunID;
const int stExpeditionRet_ProtoFunID_ProtoFunID_ARRAYSIZE = stExpeditionRet_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpeditionRet_ProtoFunID_descriptor();
inline const ::std::string& stExpeditionRet_ProtoFunID_Name(stExpeditionRet_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpeditionRet_ProtoFunID_descriptor(), value);
}
inline bool stExpeditionRet_ProtoFunID_Parse(
    const ::std::string& name, stExpeditionRet_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpeditionRet_ProtoFunID>(
    stExpeditionRet_ProtoFunID_descriptor(), name, value);
}
enum stExpeditionReward_ProtoModID {
  stExpeditionReward_ProtoModID_ModID = 3
};
bool stExpeditionReward_ProtoModID_IsValid(int value);
const stExpeditionReward_ProtoModID stExpeditionReward_ProtoModID_ProtoModID_MIN = stExpeditionReward_ProtoModID_ModID;
const stExpeditionReward_ProtoModID stExpeditionReward_ProtoModID_ProtoModID_MAX = stExpeditionReward_ProtoModID_ModID;
const int stExpeditionReward_ProtoModID_ProtoModID_ARRAYSIZE = stExpeditionReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpeditionReward_ProtoModID_descriptor();
inline const ::std::string& stExpeditionReward_ProtoModID_Name(stExpeditionReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpeditionReward_ProtoModID_descriptor(), value);
}
inline bool stExpeditionReward_ProtoModID_Parse(
    const ::std::string& name, stExpeditionReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpeditionReward_ProtoModID>(
    stExpeditionReward_ProtoModID_descriptor(), name, value);
}
enum stExpeditionReward_ProtoFunID {
  stExpeditionReward_ProtoFunID_FunID = 110
};
bool stExpeditionReward_ProtoFunID_IsValid(int value);
const stExpeditionReward_ProtoFunID stExpeditionReward_ProtoFunID_ProtoFunID_MIN = stExpeditionReward_ProtoFunID_FunID;
const stExpeditionReward_ProtoFunID stExpeditionReward_ProtoFunID_ProtoFunID_MAX = stExpeditionReward_ProtoFunID_FunID;
const int stExpeditionReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stExpeditionReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpeditionReward_ProtoFunID_descriptor();
inline const ::std::string& stExpeditionReward_ProtoFunID_Name(stExpeditionReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpeditionReward_ProtoFunID_descriptor(), value);
}
inline bool stExpeditionReward_ProtoFunID_Parse(
    const ::std::string& name, stExpeditionReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpeditionReward_ProtoFunID>(
    stExpeditionReward_ProtoFunID_descriptor(), name, value);
}
enum stExpeditionRewardRet_ProtoModID {
  stExpeditionRewardRet_ProtoModID_ModID = 3
};
bool stExpeditionRewardRet_ProtoModID_IsValid(int value);
const stExpeditionRewardRet_ProtoModID stExpeditionRewardRet_ProtoModID_ProtoModID_MIN = stExpeditionRewardRet_ProtoModID_ModID;
const stExpeditionRewardRet_ProtoModID stExpeditionRewardRet_ProtoModID_ProtoModID_MAX = stExpeditionRewardRet_ProtoModID_ModID;
const int stExpeditionRewardRet_ProtoModID_ProtoModID_ARRAYSIZE = stExpeditionRewardRet_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpeditionRewardRet_ProtoModID_descriptor();
inline const ::std::string& stExpeditionRewardRet_ProtoModID_Name(stExpeditionRewardRet_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpeditionRewardRet_ProtoModID_descriptor(), value);
}
inline bool stExpeditionRewardRet_ProtoModID_Parse(
    const ::std::string& name, stExpeditionRewardRet_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpeditionRewardRet_ProtoModID>(
    stExpeditionRewardRet_ProtoModID_descriptor(), name, value);
}
enum stExpeditionRewardRet_ProtoFunID {
  stExpeditionRewardRet_ProtoFunID_FunID = 111
};
bool stExpeditionRewardRet_ProtoFunID_IsValid(int value);
const stExpeditionRewardRet_ProtoFunID stExpeditionRewardRet_ProtoFunID_ProtoFunID_MIN = stExpeditionRewardRet_ProtoFunID_FunID;
const stExpeditionRewardRet_ProtoFunID stExpeditionRewardRet_ProtoFunID_ProtoFunID_MAX = stExpeditionRewardRet_ProtoFunID_FunID;
const int stExpeditionRewardRet_ProtoFunID_ProtoFunID_ARRAYSIZE = stExpeditionRewardRet_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpeditionRewardRet_ProtoFunID_descriptor();
inline const ::std::string& stExpeditionRewardRet_ProtoFunID_Name(stExpeditionRewardRet_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpeditionRewardRet_ProtoFunID_descriptor(), value);
}
inline bool stExpeditionRewardRet_ProtoFunID_Parse(
    const ::std::string& name, stExpeditionRewardRet_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpeditionRewardRet_ProtoFunID>(
    stExpeditionRewardRet_ProtoFunID_descriptor(), name, value);
}
enum stFastExpedition_ProtoModID {
  stFastExpedition_ProtoModID_ModID = 3
};
bool stFastExpedition_ProtoModID_IsValid(int value);
const stFastExpedition_ProtoModID stFastExpedition_ProtoModID_ProtoModID_MIN = stFastExpedition_ProtoModID_ModID;
const stFastExpedition_ProtoModID stFastExpedition_ProtoModID_ProtoModID_MAX = stFastExpedition_ProtoModID_ModID;
const int stFastExpedition_ProtoModID_ProtoModID_ARRAYSIZE = stFastExpedition_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFastExpedition_ProtoModID_descriptor();
inline const ::std::string& stFastExpedition_ProtoModID_Name(stFastExpedition_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFastExpedition_ProtoModID_descriptor(), value);
}
inline bool stFastExpedition_ProtoModID_Parse(
    const ::std::string& name, stFastExpedition_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFastExpedition_ProtoModID>(
    stFastExpedition_ProtoModID_descriptor(), name, value);
}
enum stFastExpedition_ProtoFunID {
  stFastExpedition_ProtoFunID_FunID = 112
};
bool stFastExpedition_ProtoFunID_IsValid(int value);
const stFastExpedition_ProtoFunID stFastExpedition_ProtoFunID_ProtoFunID_MIN = stFastExpedition_ProtoFunID_FunID;
const stFastExpedition_ProtoFunID stFastExpedition_ProtoFunID_ProtoFunID_MAX = stFastExpedition_ProtoFunID_FunID;
const int stFastExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE = stFastExpedition_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFastExpedition_ProtoFunID_descriptor();
inline const ::std::string& stFastExpedition_ProtoFunID_Name(stFastExpedition_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFastExpedition_ProtoFunID_descriptor(), value);
}
inline bool stFastExpedition_ProtoFunID_Parse(
    const ::std::string& name, stFastExpedition_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFastExpedition_ProtoFunID>(
    stFastExpedition_ProtoFunID_descriptor(), name, value);
}
enum stFastExpeditionRet_ProtoModID {
  stFastExpeditionRet_ProtoModID_ModID = 3
};
bool stFastExpeditionRet_ProtoModID_IsValid(int value);
const stFastExpeditionRet_ProtoModID stFastExpeditionRet_ProtoModID_ProtoModID_MIN = stFastExpeditionRet_ProtoModID_ModID;
const stFastExpeditionRet_ProtoModID stFastExpeditionRet_ProtoModID_ProtoModID_MAX = stFastExpeditionRet_ProtoModID_ModID;
const int stFastExpeditionRet_ProtoModID_ProtoModID_ARRAYSIZE = stFastExpeditionRet_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFastExpeditionRet_ProtoModID_descriptor();
inline const ::std::string& stFastExpeditionRet_ProtoModID_Name(stFastExpeditionRet_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFastExpeditionRet_ProtoModID_descriptor(), value);
}
inline bool stFastExpeditionRet_ProtoModID_Parse(
    const ::std::string& name, stFastExpeditionRet_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFastExpeditionRet_ProtoModID>(
    stFastExpeditionRet_ProtoModID_descriptor(), name, value);
}
enum stFastExpeditionRet_ProtoFunID {
  stFastExpeditionRet_ProtoFunID_FunID = 113
};
bool stFastExpeditionRet_ProtoFunID_IsValid(int value);
const stFastExpeditionRet_ProtoFunID stFastExpeditionRet_ProtoFunID_ProtoFunID_MIN = stFastExpeditionRet_ProtoFunID_FunID;
const stFastExpeditionRet_ProtoFunID stFastExpeditionRet_ProtoFunID_ProtoFunID_MAX = stFastExpeditionRet_ProtoFunID_FunID;
const int stFastExpeditionRet_ProtoFunID_ProtoFunID_ARRAYSIZE = stFastExpeditionRet_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFastExpeditionRet_ProtoFunID_descriptor();
inline const ::std::string& stFastExpeditionRet_ProtoFunID_Name(stFastExpeditionRet_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFastExpeditionRet_ProtoFunID_descriptor(), value);
}
inline bool stFastExpeditionRet_ProtoFunID_Parse(
    const ::std::string& name, stFastExpeditionRet_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFastExpeditionRet_ProtoFunID>(
    stFastExpeditionRet_ProtoFunID_descriptor(), name, value);
}
enum stCancelExpedition_ProtoModID {
  stCancelExpedition_ProtoModID_ModID = 3
};
bool stCancelExpedition_ProtoModID_IsValid(int value);
const stCancelExpedition_ProtoModID stCancelExpedition_ProtoModID_ProtoModID_MIN = stCancelExpedition_ProtoModID_ModID;
const stCancelExpedition_ProtoModID stCancelExpedition_ProtoModID_ProtoModID_MAX = stCancelExpedition_ProtoModID_ModID;
const int stCancelExpedition_ProtoModID_ProtoModID_ARRAYSIZE = stCancelExpedition_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelExpedition_ProtoModID_descriptor();
inline const ::std::string& stCancelExpedition_ProtoModID_Name(stCancelExpedition_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelExpedition_ProtoModID_descriptor(), value);
}
inline bool stCancelExpedition_ProtoModID_Parse(
    const ::std::string& name, stCancelExpedition_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelExpedition_ProtoModID>(
    stCancelExpedition_ProtoModID_descriptor(), name, value);
}
enum stCancelExpedition_ProtoFunID {
  stCancelExpedition_ProtoFunID_FunID = 114
};
bool stCancelExpedition_ProtoFunID_IsValid(int value);
const stCancelExpedition_ProtoFunID stCancelExpedition_ProtoFunID_ProtoFunID_MIN = stCancelExpedition_ProtoFunID_FunID;
const stCancelExpedition_ProtoFunID stCancelExpedition_ProtoFunID_ProtoFunID_MAX = stCancelExpedition_ProtoFunID_FunID;
const int stCancelExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelExpedition_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelExpedition_ProtoFunID_descriptor();
inline const ::std::string& stCancelExpedition_ProtoFunID_Name(stCancelExpedition_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelExpedition_ProtoFunID_descriptor(), value);
}
inline bool stCancelExpedition_ProtoFunID_Parse(
    const ::std::string& name, stCancelExpedition_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelExpedition_ProtoFunID>(
    stCancelExpedition_ProtoFunID_descriptor(), name, value);
}
enum stCancelExpeditionRet_ProtoModID {
  stCancelExpeditionRet_ProtoModID_ModID = 3
};
bool stCancelExpeditionRet_ProtoModID_IsValid(int value);
const stCancelExpeditionRet_ProtoModID stCancelExpeditionRet_ProtoModID_ProtoModID_MIN = stCancelExpeditionRet_ProtoModID_ModID;
const stCancelExpeditionRet_ProtoModID stCancelExpeditionRet_ProtoModID_ProtoModID_MAX = stCancelExpeditionRet_ProtoModID_ModID;
const int stCancelExpeditionRet_ProtoModID_ProtoModID_ARRAYSIZE = stCancelExpeditionRet_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelExpeditionRet_ProtoModID_descriptor();
inline const ::std::string& stCancelExpeditionRet_ProtoModID_Name(stCancelExpeditionRet_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelExpeditionRet_ProtoModID_descriptor(), value);
}
inline bool stCancelExpeditionRet_ProtoModID_Parse(
    const ::std::string& name, stCancelExpeditionRet_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelExpeditionRet_ProtoModID>(
    stCancelExpeditionRet_ProtoModID_descriptor(), name, value);
}
enum stCancelExpeditionRet_ProtoFunID {
  stCancelExpeditionRet_ProtoFunID_FunID = 115
};
bool stCancelExpeditionRet_ProtoFunID_IsValid(int value);
const stCancelExpeditionRet_ProtoFunID stCancelExpeditionRet_ProtoFunID_ProtoFunID_MIN = stCancelExpeditionRet_ProtoFunID_FunID;
const stCancelExpeditionRet_ProtoFunID stCancelExpeditionRet_ProtoFunID_ProtoFunID_MAX = stCancelExpeditionRet_ProtoFunID_FunID;
const int stCancelExpeditionRet_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelExpeditionRet_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelExpeditionRet_ProtoFunID_descriptor();
inline const ::std::string& stCancelExpeditionRet_ProtoFunID_Name(stCancelExpeditionRet_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelExpeditionRet_ProtoFunID_descriptor(), value);
}
inline bool stCancelExpeditionRet_ProtoFunID_Parse(
    const ::std::string& name, stCancelExpeditionRet_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelExpeditionRet_ProtoFunID>(
    stCancelExpeditionRet_ProtoFunID_descriptor(), name, value);
}
enum stExpeditionSummary_ProtoModID {
  stExpeditionSummary_ProtoModID_ModID = 3
};
bool stExpeditionSummary_ProtoModID_IsValid(int value);
const stExpeditionSummary_ProtoModID stExpeditionSummary_ProtoModID_ProtoModID_MIN = stExpeditionSummary_ProtoModID_ModID;
const stExpeditionSummary_ProtoModID stExpeditionSummary_ProtoModID_ProtoModID_MAX = stExpeditionSummary_ProtoModID_ModID;
const int stExpeditionSummary_ProtoModID_ProtoModID_ARRAYSIZE = stExpeditionSummary_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpeditionSummary_ProtoModID_descriptor();
inline const ::std::string& stExpeditionSummary_ProtoModID_Name(stExpeditionSummary_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpeditionSummary_ProtoModID_descriptor(), value);
}
inline bool stExpeditionSummary_ProtoModID_Parse(
    const ::std::string& name, stExpeditionSummary_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpeditionSummary_ProtoModID>(
    stExpeditionSummary_ProtoModID_descriptor(), name, value);
}
enum stExpeditionSummary_ProtoFunID {
  stExpeditionSummary_ProtoFunID_FunID = 116
};
bool stExpeditionSummary_ProtoFunID_IsValid(int value);
const stExpeditionSummary_ProtoFunID stExpeditionSummary_ProtoFunID_ProtoFunID_MIN = stExpeditionSummary_ProtoFunID_FunID;
const stExpeditionSummary_ProtoFunID stExpeditionSummary_ProtoFunID_ProtoFunID_MAX = stExpeditionSummary_ProtoFunID_FunID;
const int stExpeditionSummary_ProtoFunID_ProtoFunID_ARRAYSIZE = stExpeditionSummary_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpeditionSummary_ProtoFunID_descriptor();
inline const ::std::string& stExpeditionSummary_ProtoFunID_Name(stExpeditionSummary_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpeditionSummary_ProtoFunID_descriptor(), value);
}
inline bool stExpeditionSummary_ProtoFunID_Parse(
    const ::std::string& name, stExpeditionSummary_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpeditionSummary_ProtoFunID>(
    stExpeditionSummary_ProtoFunID_descriptor(), name, value);
}
enum stGiveLilianDayTaskCb_ProtoModID {
  stGiveLilianDayTaskCb_ProtoModID_ModID = 3
};
bool stGiveLilianDayTaskCb_ProtoModID_IsValid(int value);
const stGiveLilianDayTaskCb_ProtoModID stGiveLilianDayTaskCb_ProtoModID_ProtoModID_MIN = stGiveLilianDayTaskCb_ProtoModID_ModID;
const stGiveLilianDayTaskCb_ProtoModID stGiveLilianDayTaskCb_ProtoModID_ProtoModID_MAX = stGiveLilianDayTaskCb_ProtoModID_ModID;
const int stGiveLilianDayTaskCb_ProtoModID_ProtoModID_ARRAYSIZE = stGiveLilianDayTaskCb_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveLilianDayTaskCb_ProtoModID_descriptor();
inline const ::std::string& stGiveLilianDayTaskCb_ProtoModID_Name(stGiveLilianDayTaskCb_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveLilianDayTaskCb_ProtoModID_descriptor(), value);
}
inline bool stGiveLilianDayTaskCb_ProtoModID_Parse(
    const ::std::string& name, stGiveLilianDayTaskCb_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveLilianDayTaskCb_ProtoModID>(
    stGiveLilianDayTaskCb_ProtoModID_descriptor(), name, value);
}
enum stGiveLilianDayTaskCb_ProtoFunID {
  stGiveLilianDayTaskCb_ProtoFunID_FunID = 117
};
bool stGiveLilianDayTaskCb_ProtoFunID_IsValid(int value);
const stGiveLilianDayTaskCb_ProtoFunID stGiveLilianDayTaskCb_ProtoFunID_ProtoFunID_MIN = stGiveLilianDayTaskCb_ProtoFunID_FunID;
const stGiveLilianDayTaskCb_ProtoFunID stGiveLilianDayTaskCb_ProtoFunID_ProtoFunID_MAX = stGiveLilianDayTaskCb_ProtoFunID_FunID;
const int stGiveLilianDayTaskCb_ProtoFunID_ProtoFunID_ARRAYSIZE = stGiveLilianDayTaskCb_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveLilianDayTaskCb_ProtoFunID_descriptor();
inline const ::std::string& stGiveLilianDayTaskCb_ProtoFunID_Name(stGiveLilianDayTaskCb_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveLilianDayTaskCb_ProtoFunID_descriptor(), value);
}
inline bool stGiveLilianDayTaskCb_ProtoFunID_Parse(
    const ::std::string& name, stGiveLilianDayTaskCb_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveLilianDayTaskCb_ProtoFunID>(
    stGiveLilianDayTaskCb_ProtoFunID_descriptor(), name, value);
}
enum stUpdateDamageRank_ProtoModID {
  stUpdateDamageRank_ProtoModID_ModID = 3
};
bool stUpdateDamageRank_ProtoModID_IsValid(int value);
const stUpdateDamageRank_ProtoModID stUpdateDamageRank_ProtoModID_ProtoModID_MIN = stUpdateDamageRank_ProtoModID_ModID;
const stUpdateDamageRank_ProtoModID stUpdateDamageRank_ProtoModID_ProtoModID_MAX = stUpdateDamageRank_ProtoModID_ModID;
const int stUpdateDamageRank_ProtoModID_ProtoModID_ARRAYSIZE = stUpdateDamageRank_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpdateDamageRank_ProtoModID_descriptor();
inline const ::std::string& stUpdateDamageRank_ProtoModID_Name(stUpdateDamageRank_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpdateDamageRank_ProtoModID_descriptor(), value);
}
inline bool stUpdateDamageRank_ProtoModID_Parse(
    const ::std::string& name, stUpdateDamageRank_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpdateDamageRank_ProtoModID>(
    stUpdateDamageRank_ProtoModID_descriptor(), name, value);
}
enum stUpdateDamageRank_ProtoFunID {
  stUpdateDamageRank_ProtoFunID_FunID = 118
};
bool stUpdateDamageRank_ProtoFunID_IsValid(int value);
const stUpdateDamageRank_ProtoFunID stUpdateDamageRank_ProtoFunID_ProtoFunID_MIN = stUpdateDamageRank_ProtoFunID_FunID;
const stUpdateDamageRank_ProtoFunID stUpdateDamageRank_ProtoFunID_ProtoFunID_MAX = stUpdateDamageRank_ProtoFunID_FunID;
const int stUpdateDamageRank_ProtoFunID_ProtoFunID_ARRAYSIZE = stUpdateDamageRank_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpdateDamageRank_ProtoFunID_descriptor();
inline const ::std::string& stUpdateDamageRank_ProtoFunID_Name(stUpdateDamageRank_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpdateDamageRank_ProtoFunID_descriptor(), value);
}
inline bool stUpdateDamageRank_ProtoFunID_Parse(
    const ::std::string& name, stUpdateDamageRank_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpdateDamageRank_ProtoFunID>(
    stUpdateDamageRank_ProtoFunID_descriptor(), name, value);
}
enum stNoticeSendRankInfo_ProtoModID {
  stNoticeSendRankInfo_ProtoModID_ModID = 3
};
bool stNoticeSendRankInfo_ProtoModID_IsValid(int value);
const stNoticeSendRankInfo_ProtoModID stNoticeSendRankInfo_ProtoModID_ProtoModID_MIN = stNoticeSendRankInfo_ProtoModID_ModID;
const stNoticeSendRankInfo_ProtoModID stNoticeSendRankInfo_ProtoModID_ProtoModID_MAX = stNoticeSendRankInfo_ProtoModID_ModID;
const int stNoticeSendRankInfo_ProtoModID_ProtoModID_ARRAYSIZE = stNoticeSendRankInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNoticeSendRankInfo_ProtoModID_descriptor();
inline const ::std::string& stNoticeSendRankInfo_ProtoModID_Name(stNoticeSendRankInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNoticeSendRankInfo_ProtoModID_descriptor(), value);
}
inline bool stNoticeSendRankInfo_ProtoModID_Parse(
    const ::std::string& name, stNoticeSendRankInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNoticeSendRankInfo_ProtoModID>(
    stNoticeSendRankInfo_ProtoModID_descriptor(), name, value);
}
enum stNoticeSendRankInfo_ProtoFunID {
  stNoticeSendRankInfo_ProtoFunID_FunID = 119
};
bool stNoticeSendRankInfo_ProtoFunID_IsValid(int value);
const stNoticeSendRankInfo_ProtoFunID stNoticeSendRankInfo_ProtoFunID_ProtoFunID_MIN = stNoticeSendRankInfo_ProtoFunID_FunID;
const stNoticeSendRankInfo_ProtoFunID stNoticeSendRankInfo_ProtoFunID_ProtoFunID_MAX = stNoticeSendRankInfo_ProtoFunID_FunID;
const int stNoticeSendRankInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stNoticeSendRankInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNoticeSendRankInfo_ProtoFunID_descriptor();
inline const ::std::string& stNoticeSendRankInfo_ProtoFunID_Name(stNoticeSendRankInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNoticeSendRankInfo_ProtoFunID_descriptor(), value);
}
inline bool stNoticeSendRankInfo_ProtoFunID_Parse(
    const ::std::string& name, stNoticeSendRankInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNoticeSendRankInfo_ProtoFunID>(
    stNoticeSendRankInfo_ProtoFunID_descriptor(), name, value);
}
enum stOperateActivityCb_ProtoModID {
  stOperateActivityCb_ProtoModID_ModID = 3
};
bool stOperateActivityCb_ProtoModID_IsValid(int value);
const stOperateActivityCb_ProtoModID stOperateActivityCb_ProtoModID_ProtoModID_MIN = stOperateActivityCb_ProtoModID_ModID;
const stOperateActivityCb_ProtoModID stOperateActivityCb_ProtoModID_ProtoModID_MAX = stOperateActivityCb_ProtoModID_ModID;
const int stOperateActivityCb_ProtoModID_ProtoModID_ARRAYSIZE = stOperateActivityCb_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOperateActivityCb_ProtoModID_descriptor();
inline const ::std::string& stOperateActivityCb_ProtoModID_Name(stOperateActivityCb_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOperateActivityCb_ProtoModID_descriptor(), value);
}
inline bool stOperateActivityCb_ProtoModID_Parse(
    const ::std::string& name, stOperateActivityCb_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOperateActivityCb_ProtoModID>(
    stOperateActivityCb_ProtoModID_descriptor(), name, value);
}
enum stOperateActivityCb_ProtoFunID {
  stOperateActivityCb_ProtoFunID_FunID = 120
};
bool stOperateActivityCb_ProtoFunID_IsValid(int value);
const stOperateActivityCb_ProtoFunID stOperateActivityCb_ProtoFunID_ProtoFunID_MIN = stOperateActivityCb_ProtoFunID_FunID;
const stOperateActivityCb_ProtoFunID stOperateActivityCb_ProtoFunID_ProtoFunID_MAX = stOperateActivityCb_ProtoFunID_FunID;
const int stOperateActivityCb_ProtoFunID_ProtoFunID_ARRAYSIZE = stOperateActivityCb_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOperateActivityCb_ProtoFunID_descriptor();
inline const ::std::string& stOperateActivityCb_ProtoFunID_Name(stOperateActivityCb_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOperateActivityCb_ProtoFunID_descriptor(), value);
}
inline bool stOperateActivityCb_ProtoFunID_Parse(
    const ::std::string& name, stOperateActivityCb_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOperateActivityCb_ProtoFunID>(
    stOperateActivityCb_ProtoFunID_descriptor(), name, value);
}
enum stOperateActivityReward_ProtoModID {
  stOperateActivityReward_ProtoModID_ModID = 3
};
bool stOperateActivityReward_ProtoModID_IsValid(int value);
const stOperateActivityReward_ProtoModID stOperateActivityReward_ProtoModID_ProtoModID_MIN = stOperateActivityReward_ProtoModID_ModID;
const stOperateActivityReward_ProtoModID stOperateActivityReward_ProtoModID_ProtoModID_MAX = stOperateActivityReward_ProtoModID_ModID;
const int stOperateActivityReward_ProtoModID_ProtoModID_ARRAYSIZE = stOperateActivityReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOperateActivityReward_ProtoModID_descriptor();
inline const ::std::string& stOperateActivityReward_ProtoModID_Name(stOperateActivityReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOperateActivityReward_ProtoModID_descriptor(), value);
}
inline bool stOperateActivityReward_ProtoModID_Parse(
    const ::std::string& name, stOperateActivityReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOperateActivityReward_ProtoModID>(
    stOperateActivityReward_ProtoModID_descriptor(), name, value);
}
enum stOperateActivityReward_ProtoFunID {
  stOperateActivityReward_ProtoFunID_FunID = 121
};
bool stOperateActivityReward_ProtoFunID_IsValid(int value);
const stOperateActivityReward_ProtoFunID stOperateActivityReward_ProtoFunID_ProtoFunID_MIN = stOperateActivityReward_ProtoFunID_FunID;
const stOperateActivityReward_ProtoFunID stOperateActivityReward_ProtoFunID_ProtoFunID_MAX = stOperateActivityReward_ProtoFunID_FunID;
const int stOperateActivityReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stOperateActivityReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOperateActivityReward_ProtoFunID_descriptor();
inline const ::std::string& stOperateActivityReward_ProtoFunID_Name(stOperateActivityReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOperateActivityReward_ProtoFunID_descriptor(), value);
}
inline bool stOperateActivityReward_ProtoFunID_Parse(
    const ::std::string& name, stOperateActivityReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOperateActivityReward_ProtoFunID>(
    stOperateActivityReward_ProtoFunID_descriptor(), name, value);
}
enum stOperateActivityRewardCb_ProtoModID {
  stOperateActivityRewardCb_ProtoModID_ModID = 3
};
bool stOperateActivityRewardCb_ProtoModID_IsValid(int value);
const stOperateActivityRewardCb_ProtoModID stOperateActivityRewardCb_ProtoModID_ProtoModID_MIN = stOperateActivityRewardCb_ProtoModID_ModID;
const stOperateActivityRewardCb_ProtoModID stOperateActivityRewardCb_ProtoModID_ProtoModID_MAX = stOperateActivityRewardCb_ProtoModID_ModID;
const int stOperateActivityRewardCb_ProtoModID_ProtoModID_ARRAYSIZE = stOperateActivityRewardCb_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOperateActivityRewardCb_ProtoModID_descriptor();
inline const ::std::string& stOperateActivityRewardCb_ProtoModID_Name(stOperateActivityRewardCb_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOperateActivityRewardCb_ProtoModID_descriptor(), value);
}
inline bool stOperateActivityRewardCb_ProtoModID_Parse(
    const ::std::string& name, stOperateActivityRewardCb_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOperateActivityRewardCb_ProtoModID>(
    stOperateActivityRewardCb_ProtoModID_descriptor(), name, value);
}
enum stOperateActivityRewardCb_ProtoFunID {
  stOperateActivityRewardCb_ProtoFunID_FunID = 122
};
bool stOperateActivityRewardCb_ProtoFunID_IsValid(int value);
const stOperateActivityRewardCb_ProtoFunID stOperateActivityRewardCb_ProtoFunID_ProtoFunID_MIN = stOperateActivityRewardCb_ProtoFunID_FunID;
const stOperateActivityRewardCb_ProtoFunID stOperateActivityRewardCb_ProtoFunID_ProtoFunID_MAX = stOperateActivityRewardCb_ProtoFunID_FunID;
const int stOperateActivityRewardCb_ProtoFunID_ProtoFunID_ARRAYSIZE = stOperateActivityRewardCb_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOperateActivityRewardCb_ProtoFunID_descriptor();
inline const ::std::string& stOperateActivityRewardCb_ProtoFunID_Name(stOperateActivityRewardCb_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOperateActivityRewardCb_ProtoFunID_descriptor(), value);
}
inline bool stOperateActivityRewardCb_ProtoFunID_Parse(
    const ::std::string& name, stOperateActivityRewardCb_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOperateActivityRewardCb_ProtoFunID>(
    stOperateActivityRewardCb_ProtoFunID_descriptor(), name, value);
}
enum stOperateActivityLotteryReward_ProtoModID {
  stOperateActivityLotteryReward_ProtoModID_ModID = 3
};
bool stOperateActivityLotteryReward_ProtoModID_IsValid(int value);
const stOperateActivityLotteryReward_ProtoModID stOperateActivityLotteryReward_ProtoModID_ProtoModID_MIN = stOperateActivityLotteryReward_ProtoModID_ModID;
const stOperateActivityLotteryReward_ProtoModID stOperateActivityLotteryReward_ProtoModID_ProtoModID_MAX = stOperateActivityLotteryReward_ProtoModID_ModID;
const int stOperateActivityLotteryReward_ProtoModID_ProtoModID_ARRAYSIZE = stOperateActivityLotteryReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOperateActivityLotteryReward_ProtoModID_descriptor();
inline const ::std::string& stOperateActivityLotteryReward_ProtoModID_Name(stOperateActivityLotteryReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOperateActivityLotteryReward_ProtoModID_descriptor(), value);
}
inline bool stOperateActivityLotteryReward_ProtoModID_Parse(
    const ::std::string& name, stOperateActivityLotteryReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOperateActivityLotteryReward_ProtoModID>(
    stOperateActivityLotteryReward_ProtoModID_descriptor(), name, value);
}
enum stOperateActivityLotteryReward_ProtoFunID {
  stOperateActivityLotteryReward_ProtoFunID_FunID = 123
};
bool stOperateActivityLotteryReward_ProtoFunID_IsValid(int value);
const stOperateActivityLotteryReward_ProtoFunID stOperateActivityLotteryReward_ProtoFunID_ProtoFunID_MIN = stOperateActivityLotteryReward_ProtoFunID_FunID;
const stOperateActivityLotteryReward_ProtoFunID stOperateActivityLotteryReward_ProtoFunID_ProtoFunID_MAX = stOperateActivityLotteryReward_ProtoFunID_FunID;
const int stOperateActivityLotteryReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stOperateActivityLotteryReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOperateActivityLotteryReward_ProtoFunID_descriptor();
inline const ::std::string& stOperateActivityLotteryReward_ProtoFunID_Name(stOperateActivityLotteryReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOperateActivityLotteryReward_ProtoFunID_descriptor(), value);
}
inline bool stOperateActivityLotteryReward_ProtoFunID_Parse(
    const ::std::string& name, stOperateActivityLotteryReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOperateActivityLotteryReward_ProtoFunID>(
    stOperateActivityLotteryReward_ProtoFunID_descriptor(), name, value);
}
enum stOperateActivityLotteryRewardCb_ProtoModID {
  stOperateActivityLotteryRewardCb_ProtoModID_ModID = 3
};
bool stOperateActivityLotteryRewardCb_ProtoModID_IsValid(int value);
const stOperateActivityLotteryRewardCb_ProtoModID stOperateActivityLotteryRewardCb_ProtoModID_ProtoModID_MIN = stOperateActivityLotteryRewardCb_ProtoModID_ModID;
const stOperateActivityLotteryRewardCb_ProtoModID stOperateActivityLotteryRewardCb_ProtoModID_ProtoModID_MAX = stOperateActivityLotteryRewardCb_ProtoModID_ModID;
const int stOperateActivityLotteryRewardCb_ProtoModID_ProtoModID_ARRAYSIZE = stOperateActivityLotteryRewardCb_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOperateActivityLotteryRewardCb_ProtoModID_descriptor();
inline const ::std::string& stOperateActivityLotteryRewardCb_ProtoModID_Name(stOperateActivityLotteryRewardCb_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOperateActivityLotteryRewardCb_ProtoModID_descriptor(), value);
}
inline bool stOperateActivityLotteryRewardCb_ProtoModID_Parse(
    const ::std::string& name, stOperateActivityLotteryRewardCb_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOperateActivityLotteryRewardCb_ProtoModID>(
    stOperateActivityLotteryRewardCb_ProtoModID_descriptor(), name, value);
}
enum stOperateActivityLotteryRewardCb_ProtoFunID {
  stOperateActivityLotteryRewardCb_ProtoFunID_FunID = 124
};
bool stOperateActivityLotteryRewardCb_ProtoFunID_IsValid(int value);
const stOperateActivityLotteryRewardCb_ProtoFunID stOperateActivityLotteryRewardCb_ProtoFunID_ProtoFunID_MIN = stOperateActivityLotteryRewardCb_ProtoFunID_FunID;
const stOperateActivityLotteryRewardCb_ProtoFunID stOperateActivityLotteryRewardCb_ProtoFunID_ProtoFunID_MAX = stOperateActivityLotteryRewardCb_ProtoFunID_FunID;
const int stOperateActivityLotteryRewardCb_ProtoFunID_ProtoFunID_ARRAYSIZE = stOperateActivityLotteryRewardCb_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOperateActivityLotteryRewardCb_ProtoFunID_descriptor();
inline const ::std::string& stOperateActivityLotteryRewardCb_ProtoFunID_Name(stOperateActivityLotteryRewardCb_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOperateActivityLotteryRewardCb_ProtoFunID_descriptor(), value);
}
inline bool stOperateActivityLotteryRewardCb_ProtoFunID_Parse(
    const ::std::string& name, stOperateActivityLotteryRewardCb_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOperateActivityLotteryRewardCb_ProtoFunID>(
    stOperateActivityLotteryRewardCb_ProtoFunID_descriptor(), name, value);
}
enum stReqPayTypeCb_ProtoModID {
  stReqPayTypeCb_ProtoModID_ModID = 3
};
bool stReqPayTypeCb_ProtoModID_IsValid(int value);
const stReqPayTypeCb_ProtoModID stReqPayTypeCb_ProtoModID_ProtoModID_MIN = stReqPayTypeCb_ProtoModID_ModID;
const stReqPayTypeCb_ProtoModID stReqPayTypeCb_ProtoModID_ProtoModID_MAX = stReqPayTypeCb_ProtoModID_ModID;
const int stReqPayTypeCb_ProtoModID_ProtoModID_ARRAYSIZE = stReqPayTypeCb_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPayTypeCb_ProtoModID_descriptor();
inline const ::std::string& stReqPayTypeCb_ProtoModID_Name(stReqPayTypeCb_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPayTypeCb_ProtoModID_descriptor(), value);
}
inline bool stReqPayTypeCb_ProtoModID_Parse(
    const ::std::string& name, stReqPayTypeCb_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPayTypeCb_ProtoModID>(
    stReqPayTypeCb_ProtoModID_descriptor(), name, value);
}
enum stReqPayTypeCb_ProtoFunID {
  stReqPayTypeCb_ProtoFunID_FunID = 125
};
bool stReqPayTypeCb_ProtoFunID_IsValid(int value);
const stReqPayTypeCb_ProtoFunID stReqPayTypeCb_ProtoFunID_ProtoFunID_MIN = stReqPayTypeCb_ProtoFunID_FunID;
const stReqPayTypeCb_ProtoFunID stReqPayTypeCb_ProtoFunID_ProtoFunID_MAX = stReqPayTypeCb_ProtoFunID_FunID;
const int stReqPayTypeCb_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqPayTypeCb_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPayTypeCb_ProtoFunID_descriptor();
inline const ::std::string& stReqPayTypeCb_ProtoFunID_Name(stReqPayTypeCb_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPayTypeCb_ProtoFunID_descriptor(), value);
}
inline bool stReqPayTypeCb_ProtoFunID_Parse(
    const ::std::string& name, stReqPayTypeCb_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPayTypeCb_ProtoFunID>(
    stReqPayTypeCb_ProtoFunID_descriptor(), name, value);
}
enum stReqUserRankInfo_ProtoModID {
  stReqUserRankInfo_ProtoModID_ModID = 3
};
bool stReqUserRankInfo_ProtoModID_IsValid(int value);
const stReqUserRankInfo_ProtoModID stReqUserRankInfo_ProtoModID_ProtoModID_MIN = stReqUserRankInfo_ProtoModID_ModID;
const stReqUserRankInfo_ProtoModID stReqUserRankInfo_ProtoModID_ProtoModID_MAX = stReqUserRankInfo_ProtoModID_ModID;
const int stReqUserRankInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqUserRankInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUserRankInfo_ProtoModID_descriptor();
inline const ::std::string& stReqUserRankInfo_ProtoModID_Name(stReqUserRankInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUserRankInfo_ProtoModID_descriptor(), value);
}
inline bool stReqUserRankInfo_ProtoModID_Parse(
    const ::std::string& name, stReqUserRankInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUserRankInfo_ProtoModID>(
    stReqUserRankInfo_ProtoModID_descriptor(), name, value);
}
enum stReqUserRankInfo_ProtoFunID {
  stReqUserRankInfo_ProtoFunID_FunID = 126
};
bool stReqUserRankInfo_ProtoFunID_IsValid(int value);
const stReqUserRankInfo_ProtoFunID stReqUserRankInfo_ProtoFunID_ProtoFunID_MIN = stReqUserRankInfo_ProtoFunID_FunID;
const stReqUserRankInfo_ProtoFunID stReqUserRankInfo_ProtoFunID_ProtoFunID_MAX = stReqUserRankInfo_ProtoFunID_FunID;
const int stReqUserRankInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqUserRankInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUserRankInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqUserRankInfo_ProtoFunID_Name(stReqUserRankInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUserRankInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqUserRankInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqUserRankInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUserRankInfo_ProtoFunID>(
    stReqUserRankInfo_ProtoFunID_descriptor(), name, value);
}
enum stUserRankInfoResult_ProtoModID {
  stUserRankInfoResult_ProtoModID_ModID = 3
};
bool stUserRankInfoResult_ProtoModID_IsValid(int value);
const stUserRankInfoResult_ProtoModID stUserRankInfoResult_ProtoModID_ProtoModID_MIN = stUserRankInfoResult_ProtoModID_ModID;
const stUserRankInfoResult_ProtoModID stUserRankInfoResult_ProtoModID_ProtoModID_MAX = stUserRankInfoResult_ProtoModID_ModID;
const int stUserRankInfoResult_ProtoModID_ProtoModID_ARRAYSIZE = stUserRankInfoResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserRankInfoResult_ProtoModID_descriptor();
inline const ::std::string& stUserRankInfoResult_ProtoModID_Name(stUserRankInfoResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserRankInfoResult_ProtoModID_descriptor(), value);
}
inline bool stUserRankInfoResult_ProtoModID_Parse(
    const ::std::string& name, stUserRankInfoResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserRankInfoResult_ProtoModID>(
    stUserRankInfoResult_ProtoModID_descriptor(), name, value);
}
enum stUserRankInfoResult_ProtoFunID {
  stUserRankInfoResult_ProtoFunID_FunID = 127
};
bool stUserRankInfoResult_ProtoFunID_IsValid(int value);
const stUserRankInfoResult_ProtoFunID stUserRankInfoResult_ProtoFunID_ProtoFunID_MIN = stUserRankInfoResult_ProtoFunID_FunID;
const stUserRankInfoResult_ProtoFunID stUserRankInfoResult_ProtoFunID_ProtoFunID_MAX = stUserRankInfoResult_ProtoFunID_FunID;
const int stUserRankInfoResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserRankInfoResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserRankInfoResult_ProtoFunID_descriptor();
inline const ::std::string& stUserRankInfoResult_ProtoFunID_Name(stUserRankInfoResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserRankInfoResult_ProtoFunID_descriptor(), value);
}
inline bool stUserRankInfoResult_ProtoFunID_Parse(
    const ::std::string& name, stUserRankInfoResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserRankInfoResult_ProtoFunID>(
    stUserRankInfoResult_ProtoFunID_descriptor(), name, value);
}
enum stEmeraldDreamCopymapFail_ProtoModID {
  stEmeraldDreamCopymapFail_ProtoModID_ModID = 3
};
bool stEmeraldDreamCopymapFail_ProtoModID_IsValid(int value);
const stEmeraldDreamCopymapFail_ProtoModID stEmeraldDreamCopymapFail_ProtoModID_ProtoModID_MIN = stEmeraldDreamCopymapFail_ProtoModID_ModID;
const stEmeraldDreamCopymapFail_ProtoModID stEmeraldDreamCopymapFail_ProtoModID_ProtoModID_MAX = stEmeraldDreamCopymapFail_ProtoModID_ModID;
const int stEmeraldDreamCopymapFail_ProtoModID_ProtoModID_ARRAYSIZE = stEmeraldDreamCopymapFail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEmeraldDreamCopymapFail_ProtoModID_descriptor();
inline const ::std::string& stEmeraldDreamCopymapFail_ProtoModID_Name(stEmeraldDreamCopymapFail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEmeraldDreamCopymapFail_ProtoModID_descriptor(), value);
}
inline bool stEmeraldDreamCopymapFail_ProtoModID_Parse(
    const ::std::string& name, stEmeraldDreamCopymapFail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEmeraldDreamCopymapFail_ProtoModID>(
    stEmeraldDreamCopymapFail_ProtoModID_descriptor(), name, value);
}
enum stEmeraldDreamCopymapFail_ProtoFunID {
  stEmeraldDreamCopymapFail_ProtoFunID_FunID = 128
};
bool stEmeraldDreamCopymapFail_ProtoFunID_IsValid(int value);
const stEmeraldDreamCopymapFail_ProtoFunID stEmeraldDreamCopymapFail_ProtoFunID_ProtoFunID_MIN = stEmeraldDreamCopymapFail_ProtoFunID_FunID;
const stEmeraldDreamCopymapFail_ProtoFunID stEmeraldDreamCopymapFail_ProtoFunID_ProtoFunID_MAX = stEmeraldDreamCopymapFail_ProtoFunID_FunID;
const int stEmeraldDreamCopymapFail_ProtoFunID_ProtoFunID_ARRAYSIZE = stEmeraldDreamCopymapFail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEmeraldDreamCopymapFail_ProtoFunID_descriptor();
inline const ::std::string& stEmeraldDreamCopymapFail_ProtoFunID_Name(stEmeraldDreamCopymapFail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEmeraldDreamCopymapFail_ProtoFunID_descriptor(), value);
}
inline bool stEmeraldDreamCopymapFail_ProtoFunID_Parse(
    const ::std::string& name, stEmeraldDreamCopymapFail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEmeraldDreamCopymapFail_ProtoFunID>(
    stEmeraldDreamCopymapFail_ProtoFunID_descriptor(), name, value);
}
enum stKillEmeraldDreamBoss_ProtoModID {
  stKillEmeraldDreamBoss_ProtoModID_ModID = 3
};
bool stKillEmeraldDreamBoss_ProtoModID_IsValid(int value);
const stKillEmeraldDreamBoss_ProtoModID stKillEmeraldDreamBoss_ProtoModID_ProtoModID_MIN = stKillEmeraldDreamBoss_ProtoModID_ModID;
const stKillEmeraldDreamBoss_ProtoModID stKillEmeraldDreamBoss_ProtoModID_ProtoModID_MAX = stKillEmeraldDreamBoss_ProtoModID_ModID;
const int stKillEmeraldDreamBoss_ProtoModID_ProtoModID_ARRAYSIZE = stKillEmeraldDreamBoss_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillEmeraldDreamBoss_ProtoModID_descriptor();
inline const ::std::string& stKillEmeraldDreamBoss_ProtoModID_Name(stKillEmeraldDreamBoss_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillEmeraldDreamBoss_ProtoModID_descriptor(), value);
}
inline bool stKillEmeraldDreamBoss_ProtoModID_Parse(
    const ::std::string& name, stKillEmeraldDreamBoss_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillEmeraldDreamBoss_ProtoModID>(
    stKillEmeraldDreamBoss_ProtoModID_descriptor(), name, value);
}
enum stKillEmeraldDreamBoss_ProtoFunID {
  stKillEmeraldDreamBoss_ProtoFunID_FunID = 129
};
bool stKillEmeraldDreamBoss_ProtoFunID_IsValid(int value);
const stKillEmeraldDreamBoss_ProtoFunID stKillEmeraldDreamBoss_ProtoFunID_ProtoFunID_MIN = stKillEmeraldDreamBoss_ProtoFunID_FunID;
const stKillEmeraldDreamBoss_ProtoFunID stKillEmeraldDreamBoss_ProtoFunID_ProtoFunID_MAX = stKillEmeraldDreamBoss_ProtoFunID_FunID;
const int stKillEmeraldDreamBoss_ProtoFunID_ProtoFunID_ARRAYSIZE = stKillEmeraldDreamBoss_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillEmeraldDreamBoss_ProtoFunID_descriptor();
inline const ::std::string& stKillEmeraldDreamBoss_ProtoFunID_Name(stKillEmeraldDreamBoss_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillEmeraldDreamBoss_ProtoFunID_descriptor(), value);
}
inline bool stKillEmeraldDreamBoss_ProtoFunID_Parse(
    const ::std::string& name, stKillEmeraldDreamBoss_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillEmeraldDreamBoss_ProtoFunID>(
    stKillEmeraldDreamBoss_ProtoFunID_descriptor(), name, value);
}
enum strRemoveNum_ProtoModID {
  strRemoveNum_ProtoModID_ModID = 3
};
bool strRemoveNum_ProtoModID_IsValid(int value);
const strRemoveNum_ProtoModID strRemoveNum_ProtoModID_ProtoModID_MIN = strRemoveNum_ProtoModID_ModID;
const strRemoveNum_ProtoModID strRemoveNum_ProtoModID_ProtoModID_MAX = strRemoveNum_ProtoModID_ModID;
const int strRemoveNum_ProtoModID_ProtoModID_ARRAYSIZE = strRemoveNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* strRemoveNum_ProtoModID_descriptor();
inline const ::std::string& strRemoveNum_ProtoModID_Name(strRemoveNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    strRemoveNum_ProtoModID_descriptor(), value);
}
inline bool strRemoveNum_ProtoModID_Parse(
    const ::std::string& name, strRemoveNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<strRemoveNum_ProtoModID>(
    strRemoveNum_ProtoModID_descriptor(), name, value);
}
enum strRemoveNum_ProtoFunID {
  strRemoveNum_ProtoFunID_FunID = 130
};
bool strRemoveNum_ProtoFunID_IsValid(int value);
const strRemoveNum_ProtoFunID strRemoveNum_ProtoFunID_ProtoFunID_MIN = strRemoveNum_ProtoFunID_FunID;
const strRemoveNum_ProtoFunID strRemoveNum_ProtoFunID_ProtoFunID_MAX = strRemoveNum_ProtoFunID_FunID;
const int strRemoveNum_ProtoFunID_ProtoFunID_ARRAYSIZE = strRemoveNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* strRemoveNum_ProtoFunID_descriptor();
inline const ::std::string& strRemoveNum_ProtoFunID_Name(strRemoveNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    strRemoveNum_ProtoFunID_descriptor(), value);
}
inline bool strRemoveNum_ProtoFunID_Parse(
    const ::std::string& name, strRemoveNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<strRemoveNum_ProtoFunID>(
    strRemoveNum_ProtoFunID_descriptor(), name, value);
}
enum stCopyMapInfo_ProtoModID {
  stCopyMapInfo_ProtoModID_ModID = 3
};
bool stCopyMapInfo_ProtoModID_IsValid(int value);
const stCopyMapInfo_ProtoModID stCopyMapInfo_ProtoModID_ProtoModID_MIN = stCopyMapInfo_ProtoModID_ModID;
const stCopyMapInfo_ProtoModID stCopyMapInfo_ProtoModID_ProtoModID_MAX = stCopyMapInfo_ProtoModID_ModID;
const int stCopyMapInfo_ProtoModID_ProtoModID_ARRAYSIZE = stCopyMapInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCopyMapInfo_ProtoModID_descriptor();
inline const ::std::string& stCopyMapInfo_ProtoModID_Name(stCopyMapInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCopyMapInfo_ProtoModID_descriptor(), value);
}
inline bool stCopyMapInfo_ProtoModID_Parse(
    const ::std::string& name, stCopyMapInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCopyMapInfo_ProtoModID>(
    stCopyMapInfo_ProtoModID_descriptor(), name, value);
}
enum stCopyMapInfo_ProtoFunID {
  stCopyMapInfo_ProtoFunID_FunID = 131
};
bool stCopyMapInfo_ProtoFunID_IsValid(int value);
const stCopyMapInfo_ProtoFunID stCopyMapInfo_ProtoFunID_ProtoFunID_MIN = stCopyMapInfo_ProtoFunID_FunID;
const stCopyMapInfo_ProtoFunID stCopyMapInfo_ProtoFunID_ProtoFunID_MAX = stCopyMapInfo_ProtoFunID_FunID;
const int stCopyMapInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stCopyMapInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCopyMapInfo_ProtoFunID_descriptor();
inline const ::std::string& stCopyMapInfo_ProtoFunID_Name(stCopyMapInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCopyMapInfo_ProtoFunID_descriptor(), value);
}
inline bool stCopyMapInfo_ProtoFunID_Parse(
    const ::std::string& name, stCopyMapInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCopyMapInfo_ProtoFunID>(
    stCopyMapInfo_ProtoFunID_descriptor(), name, value);
}
enum stCopyMapInfoResult_ProtoModID {
  stCopyMapInfoResult_ProtoModID_ModID = 3
};
bool stCopyMapInfoResult_ProtoModID_IsValid(int value);
const stCopyMapInfoResult_ProtoModID stCopyMapInfoResult_ProtoModID_ProtoModID_MIN = stCopyMapInfoResult_ProtoModID_ModID;
const stCopyMapInfoResult_ProtoModID stCopyMapInfoResult_ProtoModID_ProtoModID_MAX = stCopyMapInfoResult_ProtoModID_ModID;
const int stCopyMapInfoResult_ProtoModID_ProtoModID_ARRAYSIZE = stCopyMapInfoResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCopyMapInfoResult_ProtoModID_descriptor();
inline const ::std::string& stCopyMapInfoResult_ProtoModID_Name(stCopyMapInfoResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCopyMapInfoResult_ProtoModID_descriptor(), value);
}
inline bool stCopyMapInfoResult_ProtoModID_Parse(
    const ::std::string& name, stCopyMapInfoResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCopyMapInfoResult_ProtoModID>(
    stCopyMapInfoResult_ProtoModID_descriptor(), name, value);
}
enum stCopyMapInfoResult_ProtoFunID {
  stCopyMapInfoResult_ProtoFunID_FunID = 132
};
bool stCopyMapInfoResult_ProtoFunID_IsValid(int value);
const stCopyMapInfoResult_ProtoFunID stCopyMapInfoResult_ProtoFunID_ProtoFunID_MIN = stCopyMapInfoResult_ProtoFunID_FunID;
const stCopyMapInfoResult_ProtoFunID stCopyMapInfoResult_ProtoFunID_ProtoFunID_MAX = stCopyMapInfoResult_ProtoFunID_FunID;
const int stCopyMapInfoResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCopyMapInfoResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCopyMapInfoResult_ProtoFunID_descriptor();
inline const ::std::string& stCopyMapInfoResult_ProtoFunID_Name(stCopyMapInfoResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCopyMapInfoResult_ProtoFunID_descriptor(), value);
}
inline bool stCopyMapInfoResult_ProtoFunID_Parse(
    const ::std::string& name, stCopyMapInfoResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCopyMapInfoResult_ProtoFunID>(
    stCopyMapInfoResult_ProtoFunID_descriptor(), name, value);
}
enum stRealTimeTeamMatch_ProtoModID {
  stRealTimeTeamMatch_ProtoModID_ModID = 3
};
bool stRealTimeTeamMatch_ProtoModID_IsValid(int value);
const stRealTimeTeamMatch_ProtoModID stRealTimeTeamMatch_ProtoModID_ProtoModID_MIN = stRealTimeTeamMatch_ProtoModID_ModID;
const stRealTimeTeamMatch_ProtoModID stRealTimeTeamMatch_ProtoModID_ProtoModID_MAX = stRealTimeTeamMatch_ProtoModID_ModID;
const int stRealTimeTeamMatch_ProtoModID_ProtoModID_ARRAYSIZE = stRealTimeTeamMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatch_ProtoModID_descriptor();
inline const ::std::string& stRealTimeTeamMatch_ProtoModID_Name(stRealTimeTeamMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimeTeamMatch_ProtoModID_descriptor(), value);
}
inline bool stRealTimeTeamMatch_ProtoModID_Parse(
    const ::std::string& name, stRealTimeTeamMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimeTeamMatch_ProtoModID>(
    stRealTimeTeamMatch_ProtoModID_descriptor(), name, value);
}
enum stRealTimeTeamMatch_ProtoFunID {
  stRealTimeTeamMatch_ProtoFunID_FunID = 133
};
bool stRealTimeTeamMatch_ProtoFunID_IsValid(int value);
const stRealTimeTeamMatch_ProtoFunID stRealTimeTeamMatch_ProtoFunID_ProtoFunID_MIN = stRealTimeTeamMatch_ProtoFunID_FunID;
const stRealTimeTeamMatch_ProtoFunID stRealTimeTeamMatch_ProtoFunID_ProtoFunID_MAX = stRealTimeTeamMatch_ProtoFunID_FunID;
const int stRealTimeTeamMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stRealTimeTeamMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatch_ProtoFunID_descriptor();
inline const ::std::string& stRealTimeTeamMatch_ProtoFunID_Name(stRealTimeTeamMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimeTeamMatch_ProtoFunID_descriptor(), value);
}
inline bool stRealTimeTeamMatch_ProtoFunID_Parse(
    const ::std::string& name, stRealTimeTeamMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimeTeamMatch_ProtoFunID>(
    stRealTimeTeamMatch_ProtoFunID_descriptor(), name, value);
}
enum stOnPubLeaveTeam_ProtoModID {
  stOnPubLeaveTeam_ProtoModID_ModID = 3
};
bool stOnPubLeaveTeam_ProtoModID_IsValid(int value);
const stOnPubLeaveTeam_ProtoModID stOnPubLeaveTeam_ProtoModID_ProtoModID_MIN = stOnPubLeaveTeam_ProtoModID_ModID;
const stOnPubLeaveTeam_ProtoModID stOnPubLeaveTeam_ProtoModID_ProtoModID_MAX = stOnPubLeaveTeam_ProtoModID_ModID;
const int stOnPubLeaveTeam_ProtoModID_ProtoModID_ARRAYSIZE = stOnPubLeaveTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOnPubLeaveTeam_ProtoModID_descriptor();
inline const ::std::string& stOnPubLeaveTeam_ProtoModID_Name(stOnPubLeaveTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOnPubLeaveTeam_ProtoModID_descriptor(), value);
}
inline bool stOnPubLeaveTeam_ProtoModID_Parse(
    const ::std::string& name, stOnPubLeaveTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOnPubLeaveTeam_ProtoModID>(
    stOnPubLeaveTeam_ProtoModID_descriptor(), name, value);
}
enum stOnPubLeaveTeam_ProtoFunID {
  stOnPubLeaveTeam_ProtoFunID_FunID = 134
};
bool stOnPubLeaveTeam_ProtoFunID_IsValid(int value);
const stOnPubLeaveTeam_ProtoFunID stOnPubLeaveTeam_ProtoFunID_ProtoFunID_MIN = stOnPubLeaveTeam_ProtoFunID_FunID;
const stOnPubLeaveTeam_ProtoFunID stOnPubLeaveTeam_ProtoFunID_ProtoFunID_MAX = stOnPubLeaveTeam_ProtoFunID_FunID;
const int stOnPubLeaveTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stOnPubLeaveTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOnPubLeaveTeam_ProtoFunID_descriptor();
inline const ::std::string& stOnPubLeaveTeam_ProtoFunID_Name(stOnPubLeaveTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOnPubLeaveTeam_ProtoFunID_descriptor(), value);
}
inline bool stOnPubLeaveTeam_ProtoFunID_Parse(
    const ::std::string& name, stOnPubLeaveTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOnPubLeaveTeam_ProtoFunID>(
    stOnPubLeaveTeam_ProtoFunID_descriptor(), name, value);
}
enum stDeductMoney_ProtoModID {
  stDeductMoney_ProtoModID_ModID = 3
};
bool stDeductMoney_ProtoModID_IsValid(int value);
const stDeductMoney_ProtoModID stDeductMoney_ProtoModID_ProtoModID_MIN = stDeductMoney_ProtoModID_ModID;
const stDeductMoney_ProtoModID stDeductMoney_ProtoModID_ProtoModID_MAX = stDeductMoney_ProtoModID_ModID;
const int stDeductMoney_ProtoModID_ProtoModID_ARRAYSIZE = stDeductMoney_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDeductMoney_ProtoModID_descriptor();
inline const ::std::string& stDeductMoney_ProtoModID_Name(stDeductMoney_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDeductMoney_ProtoModID_descriptor(), value);
}
inline bool stDeductMoney_ProtoModID_Parse(
    const ::std::string& name, stDeductMoney_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDeductMoney_ProtoModID>(
    stDeductMoney_ProtoModID_descriptor(), name, value);
}
enum stDeductMoney_ProtoFunID {
  stDeductMoney_ProtoFunID_FunID = 135
};
bool stDeductMoney_ProtoFunID_IsValid(int value);
const stDeductMoney_ProtoFunID stDeductMoney_ProtoFunID_ProtoFunID_MIN = stDeductMoney_ProtoFunID_FunID;
const stDeductMoney_ProtoFunID stDeductMoney_ProtoFunID_ProtoFunID_MAX = stDeductMoney_ProtoFunID_FunID;
const int stDeductMoney_ProtoFunID_ProtoFunID_ARRAYSIZE = stDeductMoney_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDeductMoney_ProtoFunID_descriptor();
inline const ::std::string& stDeductMoney_ProtoFunID_Name(stDeductMoney_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDeductMoney_ProtoFunID_descriptor(), value);
}
inline bool stDeductMoney_ProtoFunID_Parse(
    const ::std::string& name, stDeductMoney_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDeductMoney_ProtoFunID>(
    stDeductMoney_ProtoFunID_descriptor(), name, value);
}
enum stDeductMoneyResult_eResult {
  stDeductMoneyResult_eResult_eSuccess = 1,
  stDeductMoneyResult_eResult_DIAMOND_NOT_ENOUGH = 2
};
bool stDeductMoneyResult_eResult_IsValid(int value);
const stDeductMoneyResult_eResult stDeductMoneyResult_eResult_eResult_MIN = stDeductMoneyResult_eResult_eSuccess;
const stDeductMoneyResult_eResult stDeductMoneyResult_eResult_eResult_MAX = stDeductMoneyResult_eResult_DIAMOND_NOT_ENOUGH;
const int stDeductMoneyResult_eResult_eResult_ARRAYSIZE = stDeductMoneyResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDeductMoneyResult_eResult_descriptor();
inline const ::std::string& stDeductMoneyResult_eResult_Name(stDeductMoneyResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDeductMoneyResult_eResult_descriptor(), value);
}
inline bool stDeductMoneyResult_eResult_Parse(
    const ::std::string& name, stDeductMoneyResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDeductMoneyResult_eResult>(
    stDeductMoneyResult_eResult_descriptor(), name, value);
}
enum stDeductMoneyResult_ProtoModID {
  stDeductMoneyResult_ProtoModID_ModID = 3
};
bool stDeductMoneyResult_ProtoModID_IsValid(int value);
const stDeductMoneyResult_ProtoModID stDeductMoneyResult_ProtoModID_ProtoModID_MIN = stDeductMoneyResult_ProtoModID_ModID;
const stDeductMoneyResult_ProtoModID stDeductMoneyResult_ProtoModID_ProtoModID_MAX = stDeductMoneyResult_ProtoModID_ModID;
const int stDeductMoneyResult_ProtoModID_ProtoModID_ARRAYSIZE = stDeductMoneyResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDeductMoneyResult_ProtoModID_descriptor();
inline const ::std::string& stDeductMoneyResult_ProtoModID_Name(stDeductMoneyResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDeductMoneyResult_ProtoModID_descriptor(), value);
}
inline bool stDeductMoneyResult_ProtoModID_Parse(
    const ::std::string& name, stDeductMoneyResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDeductMoneyResult_ProtoModID>(
    stDeductMoneyResult_ProtoModID_descriptor(), name, value);
}
enum stDeductMoneyResult_ProtoFunID {
  stDeductMoneyResult_ProtoFunID_FunID = 136
};
bool stDeductMoneyResult_ProtoFunID_IsValid(int value);
const stDeductMoneyResult_ProtoFunID stDeductMoneyResult_ProtoFunID_ProtoFunID_MIN = stDeductMoneyResult_ProtoFunID_FunID;
const stDeductMoneyResult_ProtoFunID stDeductMoneyResult_ProtoFunID_ProtoFunID_MAX = stDeductMoneyResult_ProtoFunID_FunID;
const int stDeductMoneyResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stDeductMoneyResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDeductMoneyResult_ProtoFunID_descriptor();
inline const ::std::string& stDeductMoneyResult_ProtoFunID_Name(stDeductMoneyResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDeductMoneyResult_ProtoFunID_descriptor(), value);
}
inline bool stDeductMoneyResult_ProtoFunID_Parse(
    const ::std::string& name, stDeductMoneyResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDeductMoneyResult_ProtoFunID>(
    stDeductMoneyResult_ProtoFunID_descriptor(), name, value);
}
enum stGiveReward_ProtoModID {
  stGiveReward_ProtoModID_ModID = 3
};
bool stGiveReward_ProtoModID_IsValid(int value);
const stGiveReward_ProtoModID stGiveReward_ProtoModID_ProtoModID_MIN = stGiveReward_ProtoModID_ModID;
const stGiveReward_ProtoModID stGiveReward_ProtoModID_ProtoModID_MAX = stGiveReward_ProtoModID_ModID;
const int stGiveReward_ProtoModID_ProtoModID_ARRAYSIZE = stGiveReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveReward_ProtoModID_descriptor();
inline const ::std::string& stGiveReward_ProtoModID_Name(stGiveReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveReward_ProtoModID_descriptor(), value);
}
inline bool stGiveReward_ProtoModID_Parse(
    const ::std::string& name, stGiveReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveReward_ProtoModID>(
    stGiveReward_ProtoModID_descriptor(), name, value);
}
enum stGiveReward_ProtoFunID {
  stGiveReward_ProtoFunID_FunID = 137
};
bool stGiveReward_ProtoFunID_IsValid(int value);
const stGiveReward_ProtoFunID stGiveReward_ProtoFunID_ProtoFunID_MIN = stGiveReward_ProtoFunID_FunID;
const stGiveReward_ProtoFunID stGiveReward_ProtoFunID_ProtoFunID_MAX = stGiveReward_ProtoFunID_FunID;
const int stGiveReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stGiveReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveReward_ProtoFunID_descriptor();
inline const ::std::string& stGiveReward_ProtoFunID_Name(stGiveReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveReward_ProtoFunID_descriptor(), value);
}
inline bool stGiveReward_ProtoFunID_Parse(
    const ::std::string& name, stGiveReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveReward_ProtoFunID>(
    stGiveReward_ProtoFunID_descriptor(), name, value);
}
enum stGiveRewardResult_eResult {
  stGiveRewardResult_eResult_eSuccess = 1,
  stGiveRewardResult_eResult_eBAG_SLOT_NOT_ENOUGH = 2
};
bool stGiveRewardResult_eResult_IsValid(int value);
const stGiveRewardResult_eResult stGiveRewardResult_eResult_eResult_MIN = stGiveRewardResult_eResult_eSuccess;
const stGiveRewardResult_eResult stGiveRewardResult_eResult_eResult_MAX = stGiveRewardResult_eResult_eBAG_SLOT_NOT_ENOUGH;
const int stGiveRewardResult_eResult_eResult_ARRAYSIZE = stGiveRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveRewardResult_eResult_descriptor();
inline const ::std::string& stGiveRewardResult_eResult_Name(stGiveRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveRewardResult_eResult_descriptor(), value);
}
inline bool stGiveRewardResult_eResult_Parse(
    const ::std::string& name, stGiveRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveRewardResult_eResult>(
    stGiveRewardResult_eResult_descriptor(), name, value);
}
enum stGiveRewardResult_ProtoModID {
  stGiveRewardResult_ProtoModID_ModID = 3
};
bool stGiveRewardResult_ProtoModID_IsValid(int value);
const stGiveRewardResult_ProtoModID stGiveRewardResult_ProtoModID_ProtoModID_MIN = stGiveRewardResult_ProtoModID_ModID;
const stGiveRewardResult_ProtoModID stGiveRewardResult_ProtoModID_ProtoModID_MAX = stGiveRewardResult_ProtoModID_ModID;
const int stGiveRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stGiveRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveRewardResult_ProtoModID_descriptor();
inline const ::std::string& stGiveRewardResult_ProtoModID_Name(stGiveRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveRewardResult_ProtoModID_descriptor(), value);
}
inline bool stGiveRewardResult_ProtoModID_Parse(
    const ::std::string& name, stGiveRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveRewardResult_ProtoModID>(
    stGiveRewardResult_ProtoModID_descriptor(), name, value);
}
enum stGiveRewardResult_ProtoFunID {
  stGiveRewardResult_ProtoFunID_FunID = 138
};
bool stGiveRewardResult_ProtoFunID_IsValid(int value);
const stGiveRewardResult_ProtoFunID stGiveRewardResult_ProtoFunID_ProtoFunID_MIN = stGiveRewardResult_ProtoFunID_FunID;
const stGiveRewardResult_ProtoFunID stGiveRewardResult_ProtoFunID_ProtoFunID_MAX = stGiveRewardResult_ProtoFunID_FunID;
const int stGiveRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGiveRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stGiveRewardResult_ProtoFunID_Name(stGiveRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stGiveRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stGiveRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveRewardResult_ProtoFunID>(
    stGiveRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqCheckMission_ProtoModID {
  stReqCheckMission_ProtoModID_ModID = 3
};
bool stReqCheckMission_ProtoModID_IsValid(int value);
const stReqCheckMission_ProtoModID stReqCheckMission_ProtoModID_ProtoModID_MIN = stReqCheckMission_ProtoModID_ModID;
const stReqCheckMission_ProtoModID stReqCheckMission_ProtoModID_ProtoModID_MAX = stReqCheckMission_ProtoModID_ModID;
const int stReqCheckMission_ProtoModID_ProtoModID_ARRAYSIZE = stReqCheckMission_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCheckMission_ProtoModID_descriptor();
inline const ::std::string& stReqCheckMission_ProtoModID_Name(stReqCheckMission_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCheckMission_ProtoModID_descriptor(), value);
}
inline bool stReqCheckMission_ProtoModID_Parse(
    const ::std::string& name, stReqCheckMission_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCheckMission_ProtoModID>(
    stReqCheckMission_ProtoModID_descriptor(), name, value);
}
enum stReqCheckMission_ProtoFunID {
  stReqCheckMission_ProtoFunID_FunID = 139
};
bool stReqCheckMission_ProtoFunID_IsValid(int value);
const stReqCheckMission_ProtoFunID stReqCheckMission_ProtoFunID_ProtoFunID_MIN = stReqCheckMission_ProtoFunID_FunID;
const stReqCheckMission_ProtoFunID stReqCheckMission_ProtoFunID_ProtoFunID_MAX = stReqCheckMission_ProtoFunID_FunID;
const int stReqCheckMission_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCheckMission_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCheckMission_ProtoFunID_descriptor();
inline const ::std::string& stReqCheckMission_ProtoFunID_Name(stReqCheckMission_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCheckMission_ProtoFunID_descriptor(), value);
}
inline bool stReqCheckMission_ProtoFunID_Parse(
    const ::std::string& name, stReqCheckMission_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCheckMission_ProtoFunID>(
    stReqCheckMission_ProtoFunID_descriptor(), name, value);
}
enum stReqCheckTask_ProtoModID {
  stReqCheckTask_ProtoModID_ModID = 3
};
bool stReqCheckTask_ProtoModID_IsValid(int value);
const stReqCheckTask_ProtoModID stReqCheckTask_ProtoModID_ProtoModID_MIN = stReqCheckTask_ProtoModID_ModID;
const stReqCheckTask_ProtoModID stReqCheckTask_ProtoModID_ProtoModID_MAX = stReqCheckTask_ProtoModID_ModID;
const int stReqCheckTask_ProtoModID_ProtoModID_ARRAYSIZE = stReqCheckTask_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCheckTask_ProtoModID_descriptor();
inline const ::std::string& stReqCheckTask_ProtoModID_Name(stReqCheckTask_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCheckTask_ProtoModID_descriptor(), value);
}
inline bool stReqCheckTask_ProtoModID_Parse(
    const ::std::string& name, stReqCheckTask_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCheckTask_ProtoModID>(
    stReqCheckTask_ProtoModID_descriptor(), name, value);
}
enum stReqCheckTask_ProtoFunID {
  stReqCheckTask_ProtoFunID_FunID = 140
};
bool stReqCheckTask_ProtoFunID_IsValid(int value);
const stReqCheckTask_ProtoFunID stReqCheckTask_ProtoFunID_ProtoFunID_MIN = stReqCheckTask_ProtoFunID_FunID;
const stReqCheckTask_ProtoFunID stReqCheckTask_ProtoFunID_ProtoFunID_MAX = stReqCheckTask_ProtoFunID_FunID;
const int stReqCheckTask_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCheckTask_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCheckTask_ProtoFunID_descriptor();
inline const ::std::string& stReqCheckTask_ProtoFunID_Name(stReqCheckTask_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCheckTask_ProtoFunID_descriptor(), value);
}
inline bool stReqCheckTask_ProtoFunID_Parse(
    const ::std::string& name, stReqCheckTask_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCheckTask_ProtoFunID>(
    stReqCheckTask_ProtoFunID_descriptor(), name, value);
}
enum stReqEnterTaskLv_ProtoModID {
  stReqEnterTaskLv_ProtoModID_ModID = 3
};
bool stReqEnterTaskLv_ProtoModID_IsValid(int value);
const stReqEnterTaskLv_ProtoModID stReqEnterTaskLv_ProtoModID_ProtoModID_MIN = stReqEnterTaskLv_ProtoModID_ModID;
const stReqEnterTaskLv_ProtoModID stReqEnterTaskLv_ProtoModID_ProtoModID_MAX = stReqEnterTaskLv_ProtoModID_ModID;
const int stReqEnterTaskLv_ProtoModID_ProtoModID_ARRAYSIZE = stReqEnterTaskLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterTaskLv_ProtoModID_descriptor();
inline const ::std::string& stReqEnterTaskLv_ProtoModID_Name(stReqEnterTaskLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterTaskLv_ProtoModID_descriptor(), value);
}
inline bool stReqEnterTaskLv_ProtoModID_Parse(
    const ::std::string& name, stReqEnterTaskLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterTaskLv_ProtoModID>(
    stReqEnterTaskLv_ProtoModID_descriptor(), name, value);
}
enum stReqEnterTaskLv_ProtoFunID {
  stReqEnterTaskLv_ProtoFunID_FunID = 141
};
bool stReqEnterTaskLv_ProtoFunID_IsValid(int value);
const stReqEnterTaskLv_ProtoFunID stReqEnterTaskLv_ProtoFunID_ProtoFunID_MIN = stReqEnterTaskLv_ProtoFunID_FunID;
const stReqEnterTaskLv_ProtoFunID stReqEnterTaskLv_ProtoFunID_ProtoFunID_MAX = stReqEnterTaskLv_ProtoFunID_FunID;
const int stReqEnterTaskLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqEnterTaskLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterTaskLv_ProtoFunID_descriptor();
inline const ::std::string& stReqEnterTaskLv_ProtoFunID_Name(stReqEnterTaskLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterTaskLv_ProtoFunID_descriptor(), value);
}
inline bool stReqEnterTaskLv_ProtoFunID_Parse(
    const ::std::string& name, stReqEnterTaskLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterTaskLv_ProtoFunID>(
    stReqEnterTaskLv_ProtoFunID_descriptor(), name, value);
}
enum stReqDisbandTeam_ProtoModID {
  stReqDisbandTeam_ProtoModID_ModID = 3
};
bool stReqDisbandTeam_ProtoModID_IsValid(int value);
const stReqDisbandTeam_ProtoModID stReqDisbandTeam_ProtoModID_ProtoModID_MIN = stReqDisbandTeam_ProtoModID_ModID;
const stReqDisbandTeam_ProtoModID stReqDisbandTeam_ProtoModID_ProtoModID_MAX = stReqDisbandTeam_ProtoModID_ModID;
const int stReqDisbandTeam_ProtoModID_ProtoModID_ARRAYSIZE = stReqDisbandTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDisbandTeam_ProtoModID_descriptor();
inline const ::std::string& stReqDisbandTeam_ProtoModID_Name(stReqDisbandTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDisbandTeam_ProtoModID_descriptor(), value);
}
inline bool stReqDisbandTeam_ProtoModID_Parse(
    const ::std::string& name, stReqDisbandTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDisbandTeam_ProtoModID>(
    stReqDisbandTeam_ProtoModID_descriptor(), name, value);
}
enum stReqDisbandTeam_ProtoFunID {
  stReqDisbandTeam_ProtoFunID_FunID = 142
};
bool stReqDisbandTeam_ProtoFunID_IsValid(int value);
const stReqDisbandTeam_ProtoFunID stReqDisbandTeam_ProtoFunID_ProtoFunID_MIN = stReqDisbandTeam_ProtoFunID_FunID;
const stReqDisbandTeam_ProtoFunID stReqDisbandTeam_ProtoFunID_ProtoFunID_MAX = stReqDisbandTeam_ProtoFunID_FunID;
const int stReqDisbandTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDisbandTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDisbandTeam_ProtoFunID_descriptor();
inline const ::std::string& stReqDisbandTeam_ProtoFunID_Name(stReqDisbandTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDisbandTeam_ProtoFunID_descriptor(), value);
}
inline bool stReqDisbandTeam_ProtoFunID_Parse(
    const ::std::string& name, stReqDisbandTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDisbandTeam_ProtoFunID>(
    stReqDisbandTeam_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawInviteReward_ProtoModID {
  stReqDrawInviteReward_ProtoModID_ModID = 3
};
bool stReqDrawInviteReward_ProtoModID_IsValid(int value);
const stReqDrawInviteReward_ProtoModID stReqDrawInviteReward_ProtoModID_ProtoModID_MIN = stReqDrawInviteReward_ProtoModID_ModID;
const stReqDrawInviteReward_ProtoModID stReqDrawInviteReward_ProtoModID_ProtoModID_MAX = stReqDrawInviteReward_ProtoModID_ModID;
const int stReqDrawInviteReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawInviteReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawInviteReward_ProtoModID_descriptor();
inline const ::std::string& stReqDrawInviteReward_ProtoModID_Name(stReqDrawInviteReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawInviteReward_ProtoModID_descriptor(), value);
}
inline bool stReqDrawInviteReward_ProtoModID_Parse(
    const ::std::string& name, stReqDrawInviteReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawInviteReward_ProtoModID>(
    stReqDrawInviteReward_ProtoModID_descriptor(), name, value);
}
enum stReqDrawInviteReward_ProtoFunID {
  stReqDrawInviteReward_ProtoFunID_FunID = 143
};
bool stReqDrawInviteReward_ProtoFunID_IsValid(int value);
const stReqDrawInviteReward_ProtoFunID stReqDrawInviteReward_ProtoFunID_ProtoFunID_MIN = stReqDrawInviteReward_ProtoFunID_FunID;
const stReqDrawInviteReward_ProtoFunID stReqDrawInviteReward_ProtoFunID_ProtoFunID_MAX = stReqDrawInviteReward_ProtoFunID_FunID;
const int stReqDrawInviteReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawInviteReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawInviteReward_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawInviteReward_ProtoFunID_Name(stReqDrawInviteReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawInviteReward_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawInviteReward_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawInviteReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawInviteReward_ProtoFunID>(
    stReqDrawInviteReward_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawInviteRewardCb_ProtoModID {
  stReqDrawInviteRewardCb_ProtoModID_ModID = 3
};
bool stReqDrawInviteRewardCb_ProtoModID_IsValid(int value);
const stReqDrawInviteRewardCb_ProtoModID stReqDrawInviteRewardCb_ProtoModID_ProtoModID_MIN = stReqDrawInviteRewardCb_ProtoModID_ModID;
const stReqDrawInviteRewardCb_ProtoModID stReqDrawInviteRewardCb_ProtoModID_ProtoModID_MAX = stReqDrawInviteRewardCb_ProtoModID_ModID;
const int stReqDrawInviteRewardCb_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawInviteRewardCb_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawInviteRewardCb_ProtoModID_descriptor();
inline const ::std::string& stReqDrawInviteRewardCb_ProtoModID_Name(stReqDrawInviteRewardCb_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawInviteRewardCb_ProtoModID_descriptor(), value);
}
inline bool stReqDrawInviteRewardCb_ProtoModID_Parse(
    const ::std::string& name, stReqDrawInviteRewardCb_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawInviteRewardCb_ProtoModID>(
    stReqDrawInviteRewardCb_ProtoModID_descriptor(), name, value);
}
enum stReqDrawInviteRewardCb_ProtoFunID {
  stReqDrawInviteRewardCb_ProtoFunID_FunID = 144
};
bool stReqDrawInviteRewardCb_ProtoFunID_IsValid(int value);
const stReqDrawInviteRewardCb_ProtoFunID stReqDrawInviteRewardCb_ProtoFunID_ProtoFunID_MIN = stReqDrawInviteRewardCb_ProtoFunID_FunID;
const stReqDrawInviteRewardCb_ProtoFunID stReqDrawInviteRewardCb_ProtoFunID_ProtoFunID_MAX = stReqDrawInviteRewardCb_ProtoFunID_FunID;
const int stReqDrawInviteRewardCb_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawInviteRewardCb_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawInviteRewardCb_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawInviteRewardCb_ProtoFunID_Name(stReqDrawInviteRewardCb_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawInviteRewardCb_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawInviteRewardCb_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawInviteRewardCb_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawInviteRewardCb_ProtoFunID>(
    stReqDrawInviteRewardCb_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawUseInviteReward_ProtoModID {
  stReqDrawUseInviteReward_ProtoModID_ModID = 3
};
bool stReqDrawUseInviteReward_ProtoModID_IsValid(int value);
const stReqDrawUseInviteReward_ProtoModID stReqDrawUseInviteReward_ProtoModID_ProtoModID_MIN = stReqDrawUseInviteReward_ProtoModID_ModID;
const stReqDrawUseInviteReward_ProtoModID stReqDrawUseInviteReward_ProtoModID_ProtoModID_MAX = stReqDrawUseInviteReward_ProtoModID_ModID;
const int stReqDrawUseInviteReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawUseInviteReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawUseInviteReward_ProtoModID_descriptor();
inline const ::std::string& stReqDrawUseInviteReward_ProtoModID_Name(stReqDrawUseInviteReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawUseInviteReward_ProtoModID_descriptor(), value);
}
inline bool stReqDrawUseInviteReward_ProtoModID_Parse(
    const ::std::string& name, stReqDrawUseInviteReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawUseInviteReward_ProtoModID>(
    stReqDrawUseInviteReward_ProtoModID_descriptor(), name, value);
}
enum stReqDrawUseInviteReward_ProtoFunID {
  stReqDrawUseInviteReward_ProtoFunID_FunID = 145
};
bool stReqDrawUseInviteReward_ProtoFunID_IsValid(int value);
const stReqDrawUseInviteReward_ProtoFunID stReqDrawUseInviteReward_ProtoFunID_ProtoFunID_MIN = stReqDrawUseInviteReward_ProtoFunID_FunID;
const stReqDrawUseInviteReward_ProtoFunID stReqDrawUseInviteReward_ProtoFunID_ProtoFunID_MAX = stReqDrawUseInviteReward_ProtoFunID_FunID;
const int stReqDrawUseInviteReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawUseInviteReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawUseInviteReward_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawUseInviteReward_ProtoFunID_Name(stReqDrawUseInviteReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawUseInviteReward_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawUseInviteReward_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawUseInviteReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawUseInviteReward_ProtoFunID>(
    stReqDrawUseInviteReward_ProtoFunID_descriptor(), name, value);
}
enum stRoleInfo_ProtoModID {
  stRoleInfo_ProtoModID_ModID = 3
};
bool stRoleInfo_ProtoModID_IsValid(int value);
const stRoleInfo_ProtoModID stRoleInfo_ProtoModID_ProtoModID_MIN = stRoleInfo_ProtoModID_ModID;
const stRoleInfo_ProtoModID stRoleInfo_ProtoModID_ProtoModID_MAX = stRoleInfo_ProtoModID_ModID;
const int stRoleInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRoleInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRoleInfo_ProtoModID_descriptor();
inline const ::std::string& stRoleInfo_ProtoModID_Name(stRoleInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRoleInfo_ProtoModID_descriptor(), value);
}
inline bool stRoleInfo_ProtoModID_Parse(
    const ::std::string& name, stRoleInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRoleInfo_ProtoModID>(
    stRoleInfo_ProtoModID_descriptor(), name, value);
}
enum stRoleInfo_ProtoFunID {
  stRoleInfo_ProtoFunID_FunID = 146
};
bool stRoleInfo_ProtoFunID_IsValid(int value);
const stRoleInfo_ProtoFunID stRoleInfo_ProtoFunID_ProtoFunID_MIN = stRoleInfo_ProtoFunID_FunID;
const stRoleInfo_ProtoFunID stRoleInfo_ProtoFunID_ProtoFunID_MAX = stRoleInfo_ProtoFunID_FunID;
const int stRoleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRoleInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRoleInfo_ProtoFunID_descriptor();
inline const ::std::string& stRoleInfo_ProtoFunID_Name(stRoleInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRoleInfo_ProtoFunID_descriptor(), value);
}
inline bool stRoleInfo_ProtoFunID_Parse(
    const ::std::string& name, stRoleInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRoleInfo_ProtoFunID>(
    stRoleInfo_ProtoFunID_descriptor(), name, value);
}
enum stHeroLeagueEnterCopyMap_ProtoModID {
  stHeroLeagueEnterCopyMap_ProtoModID_ModID = 3
};
bool stHeroLeagueEnterCopyMap_ProtoModID_IsValid(int value);
const stHeroLeagueEnterCopyMap_ProtoModID stHeroLeagueEnterCopyMap_ProtoModID_ProtoModID_MIN = stHeroLeagueEnterCopyMap_ProtoModID_ModID;
const stHeroLeagueEnterCopyMap_ProtoModID stHeroLeagueEnterCopyMap_ProtoModID_ProtoModID_MAX = stHeroLeagueEnterCopyMap_ProtoModID_ModID;
const int stHeroLeagueEnterCopyMap_ProtoModID_ProtoModID_ARRAYSIZE = stHeroLeagueEnterCopyMap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueEnterCopyMap_ProtoModID_descriptor();
inline const ::std::string& stHeroLeagueEnterCopyMap_ProtoModID_Name(stHeroLeagueEnterCopyMap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueEnterCopyMap_ProtoModID_descriptor(), value);
}
inline bool stHeroLeagueEnterCopyMap_ProtoModID_Parse(
    const ::std::string& name, stHeroLeagueEnterCopyMap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueEnterCopyMap_ProtoModID>(
    stHeroLeagueEnterCopyMap_ProtoModID_descriptor(), name, value);
}
enum stHeroLeagueEnterCopyMap_ProtoFunID {
  stHeroLeagueEnterCopyMap_ProtoFunID_FunID = 147
};
bool stHeroLeagueEnterCopyMap_ProtoFunID_IsValid(int value);
const stHeroLeagueEnterCopyMap_ProtoFunID stHeroLeagueEnterCopyMap_ProtoFunID_ProtoFunID_MIN = stHeroLeagueEnterCopyMap_ProtoFunID_FunID;
const stHeroLeagueEnterCopyMap_ProtoFunID stHeroLeagueEnterCopyMap_ProtoFunID_ProtoFunID_MAX = stHeroLeagueEnterCopyMap_ProtoFunID_FunID;
const int stHeroLeagueEnterCopyMap_ProtoFunID_ProtoFunID_ARRAYSIZE = stHeroLeagueEnterCopyMap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueEnterCopyMap_ProtoFunID_descriptor();
inline const ::std::string& stHeroLeagueEnterCopyMap_ProtoFunID_Name(stHeroLeagueEnterCopyMap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueEnterCopyMap_ProtoFunID_descriptor(), value);
}
inline bool stHeroLeagueEnterCopyMap_ProtoFunID_Parse(
    const ::std::string& name, stHeroLeagueEnterCopyMap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueEnterCopyMap_ProtoFunID>(
    stHeroLeagueEnterCopyMap_ProtoFunID_descriptor(), name, value);
}
enum stHeroLeaguePkWithRobot_ProtoModID {
  stHeroLeaguePkWithRobot_ProtoModID_ModID = 3
};
bool stHeroLeaguePkWithRobot_ProtoModID_IsValid(int value);
const stHeroLeaguePkWithRobot_ProtoModID stHeroLeaguePkWithRobot_ProtoModID_ProtoModID_MIN = stHeroLeaguePkWithRobot_ProtoModID_ModID;
const stHeroLeaguePkWithRobot_ProtoModID stHeroLeaguePkWithRobot_ProtoModID_ProtoModID_MAX = stHeroLeaguePkWithRobot_ProtoModID_ModID;
const int stHeroLeaguePkWithRobot_ProtoModID_ProtoModID_ARRAYSIZE = stHeroLeaguePkWithRobot_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeaguePkWithRobot_ProtoModID_descriptor();
inline const ::std::string& stHeroLeaguePkWithRobot_ProtoModID_Name(stHeroLeaguePkWithRobot_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeaguePkWithRobot_ProtoModID_descriptor(), value);
}
inline bool stHeroLeaguePkWithRobot_ProtoModID_Parse(
    const ::std::string& name, stHeroLeaguePkWithRobot_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeaguePkWithRobot_ProtoModID>(
    stHeroLeaguePkWithRobot_ProtoModID_descriptor(), name, value);
}
enum stHeroLeaguePkWithRobot_ProtoFunID {
  stHeroLeaguePkWithRobot_ProtoFunID_FunID = 148
};
bool stHeroLeaguePkWithRobot_ProtoFunID_IsValid(int value);
const stHeroLeaguePkWithRobot_ProtoFunID stHeroLeaguePkWithRobot_ProtoFunID_ProtoFunID_MIN = stHeroLeaguePkWithRobot_ProtoFunID_FunID;
const stHeroLeaguePkWithRobot_ProtoFunID stHeroLeaguePkWithRobot_ProtoFunID_ProtoFunID_MAX = stHeroLeaguePkWithRobot_ProtoFunID_FunID;
const int stHeroLeaguePkWithRobot_ProtoFunID_ProtoFunID_ARRAYSIZE = stHeroLeaguePkWithRobot_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeaguePkWithRobot_ProtoFunID_descriptor();
inline const ::std::string& stHeroLeaguePkWithRobot_ProtoFunID_Name(stHeroLeaguePkWithRobot_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeaguePkWithRobot_ProtoFunID_descriptor(), value);
}
inline bool stHeroLeaguePkWithRobot_ProtoFunID_Parse(
    const ::std::string& name, stHeroLeaguePkWithRobot_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeaguePkWithRobot_ProtoFunID>(
    stHeroLeaguePkWithRobot_ProtoFunID_descriptor(), name, value);
}
enum stReqHeroLeagueCheck_eResult {
  stReqHeroLeagueCheck_eResult_eSuccess = 1,
  stReqHeroLeagueCheck_eResult_eRegister_Num_Lack = 2
};
bool stReqHeroLeagueCheck_eResult_IsValid(int value);
const stReqHeroLeagueCheck_eResult stReqHeroLeagueCheck_eResult_eResult_MIN = stReqHeroLeagueCheck_eResult_eSuccess;
const stReqHeroLeagueCheck_eResult stReqHeroLeagueCheck_eResult_eResult_MAX = stReqHeroLeagueCheck_eResult_eRegister_Num_Lack;
const int stReqHeroLeagueCheck_eResult_eResult_ARRAYSIZE = stReqHeroLeagueCheck_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroLeagueCheck_eResult_descriptor();
inline const ::std::string& stReqHeroLeagueCheck_eResult_Name(stReqHeroLeagueCheck_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroLeagueCheck_eResult_descriptor(), value);
}
inline bool stReqHeroLeagueCheck_eResult_Parse(
    const ::std::string& name, stReqHeroLeagueCheck_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroLeagueCheck_eResult>(
    stReqHeroLeagueCheck_eResult_descriptor(), name, value);
}
enum stReqHeroLeagueCheck_ProtoModID {
  stReqHeroLeagueCheck_ProtoModID_ModID = 3
};
bool stReqHeroLeagueCheck_ProtoModID_IsValid(int value);
const stReqHeroLeagueCheck_ProtoModID stReqHeroLeagueCheck_ProtoModID_ProtoModID_MIN = stReqHeroLeagueCheck_ProtoModID_ModID;
const stReqHeroLeagueCheck_ProtoModID stReqHeroLeagueCheck_ProtoModID_ProtoModID_MAX = stReqHeroLeagueCheck_ProtoModID_ModID;
const int stReqHeroLeagueCheck_ProtoModID_ProtoModID_ARRAYSIZE = stReqHeroLeagueCheck_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroLeagueCheck_ProtoModID_descriptor();
inline const ::std::string& stReqHeroLeagueCheck_ProtoModID_Name(stReqHeroLeagueCheck_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroLeagueCheck_ProtoModID_descriptor(), value);
}
inline bool stReqHeroLeagueCheck_ProtoModID_Parse(
    const ::std::string& name, stReqHeroLeagueCheck_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroLeagueCheck_ProtoModID>(
    stReqHeroLeagueCheck_ProtoModID_descriptor(), name, value);
}
enum stReqHeroLeagueCheck_ProtoFunID {
  stReqHeroLeagueCheck_ProtoFunID_FunID = 150
};
bool stReqHeroLeagueCheck_ProtoFunID_IsValid(int value);
const stReqHeroLeagueCheck_ProtoFunID stReqHeroLeagueCheck_ProtoFunID_ProtoFunID_MIN = stReqHeroLeagueCheck_ProtoFunID_FunID;
const stReqHeroLeagueCheck_ProtoFunID stReqHeroLeagueCheck_ProtoFunID_ProtoFunID_MAX = stReqHeroLeagueCheck_ProtoFunID_FunID;
const int stReqHeroLeagueCheck_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqHeroLeagueCheck_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroLeagueCheck_ProtoFunID_descriptor();
inline const ::std::string& stReqHeroLeagueCheck_ProtoFunID_Name(stReqHeroLeagueCheck_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroLeagueCheck_ProtoFunID_descriptor(), value);
}
inline bool stReqHeroLeagueCheck_ProtoFunID_Parse(
    const ::std::string& name, stReqHeroLeagueCheck_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroLeagueCheck_ProtoFunID>(
    stReqHeroLeagueCheck_ProtoFunID_descriptor(), name, value);
}
enum stHeroLeagueMatch_ProtoModID {
  stHeroLeagueMatch_ProtoModID_ModID = 3
};
bool stHeroLeagueMatch_ProtoModID_IsValid(int value);
const stHeroLeagueMatch_ProtoModID stHeroLeagueMatch_ProtoModID_ProtoModID_MIN = stHeroLeagueMatch_ProtoModID_ModID;
const stHeroLeagueMatch_ProtoModID stHeroLeagueMatch_ProtoModID_ProtoModID_MAX = stHeroLeagueMatch_ProtoModID_ModID;
const int stHeroLeagueMatch_ProtoModID_ProtoModID_ARRAYSIZE = stHeroLeagueMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueMatch_ProtoModID_descriptor();
inline const ::std::string& stHeroLeagueMatch_ProtoModID_Name(stHeroLeagueMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueMatch_ProtoModID_descriptor(), value);
}
inline bool stHeroLeagueMatch_ProtoModID_Parse(
    const ::std::string& name, stHeroLeagueMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueMatch_ProtoModID>(
    stHeroLeagueMatch_ProtoModID_descriptor(), name, value);
}
enum stHeroLeagueMatch_ProtoFunID {
  stHeroLeagueMatch_ProtoFunID_FunID = 151
};
bool stHeroLeagueMatch_ProtoFunID_IsValid(int value);
const stHeroLeagueMatch_ProtoFunID stHeroLeagueMatch_ProtoFunID_ProtoFunID_MIN = stHeroLeagueMatch_ProtoFunID_FunID;
const stHeroLeagueMatch_ProtoFunID stHeroLeagueMatch_ProtoFunID_ProtoFunID_MAX = stHeroLeagueMatch_ProtoFunID_FunID;
const int stHeroLeagueMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stHeroLeagueMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueMatch_ProtoFunID_descriptor();
inline const ::std::string& stHeroLeagueMatch_ProtoFunID_Name(stHeroLeagueMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueMatch_ProtoFunID_descriptor(), value);
}
inline bool stHeroLeagueMatch_ProtoFunID_Parse(
    const ::std::string& name, stHeroLeagueMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueMatch_ProtoFunID>(
    stHeroLeagueMatch_ProtoFunID_descriptor(), name, value);
}
enum stHeroLeagueResult_ProtoModID {
  stHeroLeagueResult_ProtoModID_ModID = 3
};
bool stHeroLeagueResult_ProtoModID_IsValid(int value);
const stHeroLeagueResult_ProtoModID stHeroLeagueResult_ProtoModID_ProtoModID_MIN = stHeroLeagueResult_ProtoModID_ModID;
const stHeroLeagueResult_ProtoModID stHeroLeagueResult_ProtoModID_ProtoModID_MAX = stHeroLeagueResult_ProtoModID_ModID;
const int stHeroLeagueResult_ProtoModID_ProtoModID_ARRAYSIZE = stHeroLeagueResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueResult_ProtoModID_descriptor();
inline const ::std::string& stHeroLeagueResult_ProtoModID_Name(stHeroLeagueResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueResult_ProtoModID_descriptor(), value);
}
inline bool stHeroLeagueResult_ProtoModID_Parse(
    const ::std::string& name, stHeroLeagueResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueResult_ProtoModID>(
    stHeroLeagueResult_ProtoModID_descriptor(), name, value);
}
enum stHeroLeagueResult_ProtoFunID {
  stHeroLeagueResult_ProtoFunID_FunID = 152
};
bool stHeroLeagueResult_ProtoFunID_IsValid(int value);
const stHeroLeagueResult_ProtoFunID stHeroLeagueResult_ProtoFunID_ProtoFunID_MIN = stHeroLeagueResult_ProtoFunID_FunID;
const stHeroLeagueResult_ProtoFunID stHeroLeagueResult_ProtoFunID_ProtoFunID_MAX = stHeroLeagueResult_ProtoFunID_FunID;
const int stHeroLeagueResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stHeroLeagueResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueResult_ProtoFunID_descriptor();
inline const ::std::string& stHeroLeagueResult_ProtoFunID_Name(stHeroLeagueResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueResult_ProtoFunID_descriptor(), value);
}
inline bool stHeroLeagueResult_ProtoFunID_Parse(
    const ::std::string& name, stHeroLeagueResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueResult_ProtoFunID>(
    stHeroLeagueResult_ProtoFunID_descriptor(), name, value);
}
enum stSynRoleList_ProtoModID {
  stSynRoleList_ProtoModID_ModID = 3
};
bool stSynRoleList_ProtoModID_IsValid(int value);
const stSynRoleList_ProtoModID stSynRoleList_ProtoModID_ProtoModID_MIN = stSynRoleList_ProtoModID_ModID;
const stSynRoleList_ProtoModID stSynRoleList_ProtoModID_ProtoModID_MAX = stSynRoleList_ProtoModID_ModID;
const int stSynRoleList_ProtoModID_ProtoModID_ARRAYSIZE = stSynRoleList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRoleList_ProtoModID_descriptor();
inline const ::std::string& stSynRoleList_ProtoModID_Name(stSynRoleList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRoleList_ProtoModID_descriptor(), value);
}
inline bool stSynRoleList_ProtoModID_Parse(
    const ::std::string& name, stSynRoleList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRoleList_ProtoModID>(
    stSynRoleList_ProtoModID_descriptor(), name, value);
}
enum stSynRoleList_ProtoFunID {
  stSynRoleList_ProtoFunID_FunID = 153
};
bool stSynRoleList_ProtoFunID_IsValid(int value);
const stSynRoleList_ProtoFunID stSynRoleList_ProtoFunID_ProtoFunID_MIN = stSynRoleList_ProtoFunID_FunID;
const stSynRoleList_ProtoFunID stSynRoleList_ProtoFunID_ProtoFunID_MAX = stSynRoleList_ProtoFunID_FunID;
const int stSynRoleList_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynRoleList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRoleList_ProtoFunID_descriptor();
inline const ::std::string& stSynRoleList_ProtoFunID_Name(stSynRoleList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRoleList_ProtoFunID_descriptor(), value);
}
inline bool stSynRoleList_ProtoFunID_Parse(
    const ::std::string& name, stSynRoleList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRoleList_ProtoFunID>(
    stSynRoleList_ProtoFunID_descriptor(), name, value);
}
enum stSynRoleListResult_ProtoModID {
  stSynRoleListResult_ProtoModID_ModID = 3
};
bool stSynRoleListResult_ProtoModID_IsValid(int value);
const stSynRoleListResult_ProtoModID stSynRoleListResult_ProtoModID_ProtoModID_MIN = stSynRoleListResult_ProtoModID_ModID;
const stSynRoleListResult_ProtoModID stSynRoleListResult_ProtoModID_ProtoModID_MAX = stSynRoleListResult_ProtoModID_ModID;
const int stSynRoleListResult_ProtoModID_ProtoModID_ARRAYSIZE = stSynRoleListResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRoleListResult_ProtoModID_descriptor();
inline const ::std::string& stSynRoleListResult_ProtoModID_Name(stSynRoleListResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRoleListResult_ProtoModID_descriptor(), value);
}
inline bool stSynRoleListResult_ProtoModID_Parse(
    const ::std::string& name, stSynRoleListResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRoleListResult_ProtoModID>(
    stSynRoleListResult_ProtoModID_descriptor(), name, value);
}
enum stSynRoleListResult_ProtoFunID {
  stSynRoleListResult_ProtoFunID_FunID = 154
};
bool stSynRoleListResult_ProtoFunID_IsValid(int value);
const stSynRoleListResult_ProtoFunID stSynRoleListResult_ProtoFunID_ProtoFunID_MIN = stSynRoleListResult_ProtoFunID_FunID;
const stSynRoleListResult_ProtoFunID stSynRoleListResult_ProtoFunID_ProtoFunID_MAX = stSynRoleListResult_ProtoFunID_FunID;
const int stSynRoleListResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynRoleListResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRoleListResult_ProtoFunID_descriptor();
inline const ::std::string& stSynRoleListResult_ProtoFunID_Name(stSynRoleListResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRoleListResult_ProtoFunID_descriptor(), value);
}
inline bool stSynRoleListResult_ProtoFunID_Parse(
    const ::std::string& name, stSynRoleListResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRoleListResult_ProtoFunID>(
    stSynRoleListResult_ProtoFunID_descriptor(), name, value);
}
enum stReqSynChampionInfo_ProtoModID {
  stReqSynChampionInfo_ProtoModID_ModID = 3
};
bool stReqSynChampionInfo_ProtoModID_IsValid(int value);
const stReqSynChampionInfo_ProtoModID stReqSynChampionInfo_ProtoModID_ProtoModID_MIN = stReqSynChampionInfo_ProtoModID_ModID;
const stReqSynChampionInfo_ProtoModID stReqSynChampionInfo_ProtoModID_ProtoModID_MAX = stReqSynChampionInfo_ProtoModID_ModID;
const int stReqSynChampionInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqSynChampionInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSynChampionInfo_ProtoModID_descriptor();
inline const ::std::string& stReqSynChampionInfo_ProtoModID_Name(stReqSynChampionInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSynChampionInfo_ProtoModID_descriptor(), value);
}
inline bool stReqSynChampionInfo_ProtoModID_Parse(
    const ::std::string& name, stReqSynChampionInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSynChampionInfo_ProtoModID>(
    stReqSynChampionInfo_ProtoModID_descriptor(), name, value);
}
enum stReqSynChampionInfo_ProtoFunID {
  stReqSynChampionInfo_ProtoFunID_FunID = 155
};
bool stReqSynChampionInfo_ProtoFunID_IsValid(int value);
const stReqSynChampionInfo_ProtoFunID stReqSynChampionInfo_ProtoFunID_ProtoFunID_MIN = stReqSynChampionInfo_ProtoFunID_FunID;
const stReqSynChampionInfo_ProtoFunID stReqSynChampionInfo_ProtoFunID_ProtoFunID_MAX = stReqSynChampionInfo_ProtoFunID_FunID;
const int stReqSynChampionInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSynChampionInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSynChampionInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqSynChampionInfo_ProtoFunID_Name(stReqSynChampionInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSynChampionInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqSynChampionInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqSynChampionInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSynChampionInfo_ProtoFunID>(
    stReqSynChampionInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqWorskip_ProtoModID {
  stReqWorskip_ProtoModID_ModID = 3
};
bool stReqWorskip_ProtoModID_IsValid(int value);
const stReqWorskip_ProtoModID stReqWorskip_ProtoModID_ProtoModID_MIN = stReqWorskip_ProtoModID_ModID;
const stReqWorskip_ProtoModID stReqWorskip_ProtoModID_ProtoModID_MAX = stReqWorskip_ProtoModID_ModID;
const int stReqWorskip_ProtoModID_ProtoModID_ARRAYSIZE = stReqWorskip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqWorskip_ProtoModID_descriptor();
inline const ::std::string& stReqWorskip_ProtoModID_Name(stReqWorskip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqWorskip_ProtoModID_descriptor(), value);
}
inline bool stReqWorskip_ProtoModID_Parse(
    const ::std::string& name, stReqWorskip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqWorskip_ProtoModID>(
    stReqWorskip_ProtoModID_descriptor(), name, value);
}
enum stReqWorskip_ProtoFunID {
  stReqWorskip_ProtoFunID_FunID = 156
};
bool stReqWorskip_ProtoFunID_IsValid(int value);
const stReqWorskip_ProtoFunID stReqWorskip_ProtoFunID_ProtoFunID_MIN = stReqWorskip_ProtoFunID_FunID;
const stReqWorskip_ProtoFunID stReqWorskip_ProtoFunID_ProtoFunID_MAX = stReqWorskip_ProtoFunID_FunID;
const int stReqWorskip_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqWorskip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqWorskip_ProtoFunID_descriptor();
inline const ::std::string& stReqWorskip_ProtoFunID_Name(stReqWorskip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqWorskip_ProtoFunID_descriptor(), value);
}
inline bool stReqWorskip_ProtoFunID_Parse(
    const ::std::string& name, stReqWorskip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqWorskip_ProtoFunID>(
    stReqWorskip_ProtoFunID_descriptor(), name, value);
}
enum stWorskipResult_eResult {
  stWorskipResult_eResult_eInner_Error = 1,
  stWorskipResult_eResult_eNoBody = 2
};
bool stWorskipResult_eResult_IsValid(int value);
const stWorskipResult_eResult stWorskipResult_eResult_eResult_MIN = stWorskipResult_eResult_eInner_Error;
const stWorskipResult_eResult stWorskipResult_eResult_eResult_MAX = stWorskipResult_eResult_eNoBody;
const int stWorskipResult_eResult_eResult_ARRAYSIZE = stWorskipResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWorskipResult_eResult_descriptor();
inline const ::std::string& stWorskipResult_eResult_Name(stWorskipResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWorskipResult_eResult_descriptor(), value);
}
inline bool stWorskipResult_eResult_Parse(
    const ::std::string& name, stWorskipResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWorskipResult_eResult>(
    stWorskipResult_eResult_descriptor(), name, value);
}
enum stWorskipResult_ProtoModID {
  stWorskipResult_ProtoModID_ModID = 3
};
bool stWorskipResult_ProtoModID_IsValid(int value);
const stWorskipResult_ProtoModID stWorskipResult_ProtoModID_ProtoModID_MIN = stWorskipResult_ProtoModID_ModID;
const stWorskipResult_ProtoModID stWorskipResult_ProtoModID_ProtoModID_MAX = stWorskipResult_ProtoModID_ModID;
const int stWorskipResult_ProtoModID_ProtoModID_ARRAYSIZE = stWorskipResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWorskipResult_ProtoModID_descriptor();
inline const ::std::string& stWorskipResult_ProtoModID_Name(stWorskipResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWorskipResult_ProtoModID_descriptor(), value);
}
inline bool stWorskipResult_ProtoModID_Parse(
    const ::std::string& name, stWorskipResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWorskipResult_ProtoModID>(
    stWorskipResult_ProtoModID_descriptor(), name, value);
}
enum stWorskipResult_ProtoFunID {
  stWorskipResult_ProtoFunID_FunID = 157
};
bool stWorskipResult_ProtoFunID_IsValid(int value);
const stWorskipResult_ProtoFunID stWorskipResult_ProtoFunID_ProtoFunID_MIN = stWorskipResult_ProtoFunID_FunID;
const stWorskipResult_ProtoFunID stWorskipResult_ProtoFunID_ProtoFunID_MAX = stWorskipResult_ProtoFunID_FunID;
const int stWorskipResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stWorskipResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWorskipResult_ProtoFunID_descriptor();
inline const ::std::string& stWorskipResult_ProtoFunID_Name(stWorskipResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWorskipResult_ProtoFunID_descriptor(), value);
}
inline bool stWorskipResult_ProtoFunID_Parse(
    const ::std::string& name, stWorskipResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWorskipResult_ProtoFunID>(
    stWorskipResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRedPoint_ProtoModID {
  stReqRedPoint_ProtoModID_ModID = 3
};
bool stReqRedPoint_ProtoModID_IsValid(int value);
const stReqRedPoint_ProtoModID stReqRedPoint_ProtoModID_ProtoModID_MIN = stReqRedPoint_ProtoModID_ModID;
const stReqRedPoint_ProtoModID stReqRedPoint_ProtoModID_ProtoModID_MAX = stReqRedPoint_ProtoModID_ModID;
const int stReqRedPoint_ProtoModID_ProtoModID_ARRAYSIZE = stReqRedPoint_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRedPoint_ProtoModID_descriptor();
inline const ::std::string& stReqRedPoint_ProtoModID_Name(stReqRedPoint_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRedPoint_ProtoModID_descriptor(), value);
}
inline bool stReqRedPoint_ProtoModID_Parse(
    const ::std::string& name, stReqRedPoint_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRedPoint_ProtoModID>(
    stReqRedPoint_ProtoModID_descriptor(), name, value);
}
enum stReqRedPoint_ProtoFunID {
  stReqRedPoint_ProtoFunID_FunID = 158
};
bool stReqRedPoint_ProtoFunID_IsValid(int value);
const stReqRedPoint_ProtoFunID stReqRedPoint_ProtoFunID_ProtoFunID_MIN = stReqRedPoint_ProtoFunID_FunID;
const stReqRedPoint_ProtoFunID stReqRedPoint_ProtoFunID_ProtoFunID_MAX = stReqRedPoint_ProtoFunID_FunID;
const int stReqRedPoint_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRedPoint_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRedPoint_ProtoFunID_descriptor();
inline const ::std::string& stReqRedPoint_ProtoFunID_Name(stReqRedPoint_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRedPoint_ProtoFunID_descriptor(), value);
}
inline bool stReqRedPoint_ProtoFunID_Parse(
    const ::std::string& name, stReqRedPoint_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRedPoint_ProtoFunID>(
    stReqRedPoint_ProtoFunID_descriptor(), name, value);
}
enum stRedPointResult_ProtoModID {
  stRedPointResult_ProtoModID_ModID = 3
};
bool stRedPointResult_ProtoModID_IsValid(int value);
const stRedPointResult_ProtoModID stRedPointResult_ProtoModID_ProtoModID_MIN = stRedPointResult_ProtoModID_ModID;
const stRedPointResult_ProtoModID stRedPointResult_ProtoModID_ProtoModID_MAX = stRedPointResult_ProtoModID_ModID;
const int stRedPointResult_ProtoModID_ProtoModID_ARRAYSIZE = stRedPointResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRedPointResult_ProtoModID_descriptor();
inline const ::std::string& stRedPointResult_ProtoModID_Name(stRedPointResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRedPointResult_ProtoModID_descriptor(), value);
}
inline bool stRedPointResult_ProtoModID_Parse(
    const ::std::string& name, stRedPointResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRedPointResult_ProtoModID>(
    stRedPointResult_ProtoModID_descriptor(), name, value);
}
enum stRedPointResult_ProtoFunID {
  stRedPointResult_ProtoFunID_FunID = 159
};
bool stRedPointResult_ProtoFunID_IsValid(int value);
const stRedPointResult_ProtoFunID stRedPointResult_ProtoFunID_ProtoFunID_MIN = stRedPointResult_ProtoFunID_FunID;
const stRedPointResult_ProtoFunID stRedPointResult_ProtoFunID_ProtoFunID_MAX = stRedPointResult_ProtoFunID_FunID;
const int stRedPointResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRedPointResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRedPointResult_ProtoFunID_descriptor();
inline const ::std::string& stRedPointResult_ProtoFunID_Name(stRedPointResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRedPointResult_ProtoFunID_descriptor(), value);
}
inline bool stRedPointResult_ProtoFunID_Parse(
    const ::std::string& name, stRedPointResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRedPointResult_ProtoFunID>(
    stRedPointResult_ProtoFunID_descriptor(), name, value);
}
enum stInterceptResultToGlobal_ProtoModID {
  stInterceptResultToGlobal_ProtoModID_ModID = 3
};
bool stInterceptResultToGlobal_ProtoModID_IsValid(int value);
const stInterceptResultToGlobal_ProtoModID stInterceptResultToGlobal_ProtoModID_ProtoModID_MIN = stInterceptResultToGlobal_ProtoModID_ModID;
const stInterceptResultToGlobal_ProtoModID stInterceptResultToGlobal_ProtoModID_ProtoModID_MAX = stInterceptResultToGlobal_ProtoModID_ModID;
const int stInterceptResultToGlobal_ProtoModID_ProtoModID_ARRAYSIZE = stInterceptResultToGlobal_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInterceptResultToGlobal_ProtoModID_descriptor();
inline const ::std::string& stInterceptResultToGlobal_ProtoModID_Name(stInterceptResultToGlobal_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInterceptResultToGlobal_ProtoModID_descriptor(), value);
}
inline bool stInterceptResultToGlobal_ProtoModID_Parse(
    const ::std::string& name, stInterceptResultToGlobal_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInterceptResultToGlobal_ProtoModID>(
    stInterceptResultToGlobal_ProtoModID_descriptor(), name, value);
}
enum stInterceptResultToGlobal_ProtoFunID {
  stInterceptResultToGlobal_ProtoFunID_FunID = 160
};
bool stInterceptResultToGlobal_ProtoFunID_IsValid(int value);
const stInterceptResultToGlobal_ProtoFunID stInterceptResultToGlobal_ProtoFunID_ProtoFunID_MIN = stInterceptResultToGlobal_ProtoFunID_FunID;
const stInterceptResultToGlobal_ProtoFunID stInterceptResultToGlobal_ProtoFunID_ProtoFunID_MAX = stInterceptResultToGlobal_ProtoFunID_FunID;
const int stInterceptResultToGlobal_ProtoFunID_ProtoFunID_ARRAYSIZE = stInterceptResultToGlobal_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInterceptResultToGlobal_ProtoFunID_descriptor();
inline const ::std::string& stInterceptResultToGlobal_ProtoFunID_Name(stInterceptResultToGlobal_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInterceptResultToGlobal_ProtoFunID_descriptor(), value);
}
inline bool stInterceptResultToGlobal_ProtoFunID_Parse(
    const ::std::string& name, stInterceptResultToGlobal_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInterceptResultToGlobal_ProtoFunID>(
    stInterceptResultToGlobal_ProtoFunID_descriptor(), name, value);
}
enum stRetRoomInfo_ProtoModID {
  stRetRoomInfo_ProtoModID_ModID = 3
};
bool stRetRoomInfo_ProtoModID_IsValid(int value);
const stRetRoomInfo_ProtoModID stRetRoomInfo_ProtoModID_ProtoModID_MIN = stRetRoomInfo_ProtoModID_ModID;
const stRetRoomInfo_ProtoModID stRetRoomInfo_ProtoModID_ProtoModID_MAX = stRetRoomInfo_ProtoModID_ModID;
const int stRetRoomInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetRoomInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRoomInfo_ProtoModID_descriptor();
inline const ::std::string& stRetRoomInfo_ProtoModID_Name(stRetRoomInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRoomInfo_ProtoModID_descriptor(), value);
}
inline bool stRetRoomInfo_ProtoModID_Parse(
    const ::std::string& name, stRetRoomInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRoomInfo_ProtoModID>(
    stRetRoomInfo_ProtoModID_descriptor(), name, value);
}
enum stRetRoomInfo_ProtoFunID {
  stRetRoomInfo_ProtoFunID_FunID = 161
};
bool stRetRoomInfo_ProtoFunID_IsValid(int value);
const stRetRoomInfo_ProtoFunID stRetRoomInfo_ProtoFunID_ProtoFunID_MIN = stRetRoomInfo_ProtoFunID_FunID;
const stRetRoomInfo_ProtoFunID stRetRoomInfo_ProtoFunID_ProtoFunID_MAX = stRetRoomInfo_ProtoFunID_FunID;
const int stRetRoomInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRoomInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRoomInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetRoomInfo_ProtoFunID_Name(stRetRoomInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRoomInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetRoomInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetRoomInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRoomInfo_ProtoFunID>(
    stRetRoomInfo_ProtoFunID_descriptor(), name, value);
}
enum stRetAddTeamMember_ProtoModID {
  stRetAddTeamMember_ProtoModID_ModID = 3
};
bool stRetAddTeamMember_ProtoModID_IsValid(int value);
const stRetAddTeamMember_ProtoModID stRetAddTeamMember_ProtoModID_ProtoModID_MIN = stRetAddTeamMember_ProtoModID_ModID;
const stRetAddTeamMember_ProtoModID stRetAddTeamMember_ProtoModID_ProtoModID_MAX = stRetAddTeamMember_ProtoModID_ModID;
const int stRetAddTeamMember_ProtoModID_ProtoModID_ARRAYSIZE = stRetAddTeamMember_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetAddTeamMember_ProtoModID_descriptor();
inline const ::std::string& stRetAddTeamMember_ProtoModID_Name(stRetAddTeamMember_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetAddTeamMember_ProtoModID_descriptor(), value);
}
inline bool stRetAddTeamMember_ProtoModID_Parse(
    const ::std::string& name, stRetAddTeamMember_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetAddTeamMember_ProtoModID>(
    stRetAddTeamMember_ProtoModID_descriptor(), name, value);
}
enum stRetAddTeamMember_ProtoFunID {
  stRetAddTeamMember_ProtoFunID_FunID = 162
};
bool stRetAddTeamMember_ProtoFunID_IsValid(int value);
const stRetAddTeamMember_ProtoFunID stRetAddTeamMember_ProtoFunID_ProtoFunID_MIN = stRetAddTeamMember_ProtoFunID_FunID;
const stRetAddTeamMember_ProtoFunID stRetAddTeamMember_ProtoFunID_ProtoFunID_MAX = stRetAddTeamMember_ProtoFunID_FunID;
const int stRetAddTeamMember_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetAddTeamMember_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetAddTeamMember_ProtoFunID_descriptor();
inline const ::std::string& stRetAddTeamMember_ProtoFunID_Name(stRetAddTeamMember_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetAddTeamMember_ProtoFunID_descriptor(), value);
}
inline bool stRetAddTeamMember_ProtoFunID_Parse(
    const ::std::string& name, stRetAddTeamMember_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetAddTeamMember_ProtoFunID>(
    stRetAddTeamMember_ProtoFunID_descriptor(), name, value);
}
enum stReqPropose_ProtoModID {
  stReqPropose_ProtoModID_ModID = 3
};
bool stReqPropose_ProtoModID_IsValid(int value);
const stReqPropose_ProtoModID stReqPropose_ProtoModID_ProtoModID_MIN = stReqPropose_ProtoModID_ModID;
const stReqPropose_ProtoModID stReqPropose_ProtoModID_ProtoModID_MAX = stReqPropose_ProtoModID_ModID;
const int stReqPropose_ProtoModID_ProtoModID_ARRAYSIZE = stReqPropose_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPropose_ProtoModID_descriptor();
inline const ::std::string& stReqPropose_ProtoModID_Name(stReqPropose_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPropose_ProtoModID_descriptor(), value);
}
inline bool stReqPropose_ProtoModID_Parse(
    const ::std::string& name, stReqPropose_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPropose_ProtoModID>(
    stReqPropose_ProtoModID_descriptor(), name, value);
}
enum stReqPropose_ProtoFunID {
  stReqPropose_ProtoFunID_FunID = 163
};
bool stReqPropose_ProtoFunID_IsValid(int value);
const stReqPropose_ProtoFunID stReqPropose_ProtoFunID_ProtoFunID_MIN = stReqPropose_ProtoFunID_FunID;
const stReqPropose_ProtoFunID stReqPropose_ProtoFunID_ProtoFunID_MAX = stReqPropose_ProtoFunID_FunID;
const int stReqPropose_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqPropose_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPropose_ProtoFunID_descriptor();
inline const ::std::string& stReqPropose_ProtoFunID_Name(stReqPropose_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPropose_ProtoFunID_descriptor(), value);
}
inline bool stReqPropose_ProtoFunID_Parse(
    const ::std::string& name, stReqPropose_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPropose_ProtoFunID>(
    stReqPropose_ProtoFunID_descriptor(), name, value);
}
enum stReqAgreeMarry_ProtoModID {
  stReqAgreeMarry_ProtoModID_ModID = 3
};
bool stReqAgreeMarry_ProtoModID_IsValid(int value);
const stReqAgreeMarry_ProtoModID stReqAgreeMarry_ProtoModID_ProtoModID_MIN = stReqAgreeMarry_ProtoModID_ModID;
const stReqAgreeMarry_ProtoModID stReqAgreeMarry_ProtoModID_ProtoModID_MAX = stReqAgreeMarry_ProtoModID_ModID;
const int stReqAgreeMarry_ProtoModID_ProtoModID_ARRAYSIZE = stReqAgreeMarry_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_ProtoModID_descriptor();
inline const ::std::string& stReqAgreeMarry_ProtoModID_Name(stReqAgreeMarry_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAgreeMarry_ProtoModID_descriptor(), value);
}
inline bool stReqAgreeMarry_ProtoModID_Parse(
    const ::std::string& name, stReqAgreeMarry_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAgreeMarry_ProtoModID>(
    stReqAgreeMarry_ProtoModID_descriptor(), name, value);
}
enum stReqAgreeMarry_ProtoFunID {
  stReqAgreeMarry_ProtoFunID_FunID = 164
};
bool stReqAgreeMarry_ProtoFunID_IsValid(int value);
const stReqAgreeMarry_ProtoFunID stReqAgreeMarry_ProtoFunID_ProtoFunID_MIN = stReqAgreeMarry_ProtoFunID_FunID;
const stReqAgreeMarry_ProtoFunID stReqAgreeMarry_ProtoFunID_ProtoFunID_MAX = stReqAgreeMarry_ProtoFunID_FunID;
const int stReqAgreeMarry_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAgreeMarry_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_ProtoFunID_descriptor();
inline const ::std::string& stReqAgreeMarry_ProtoFunID_Name(stReqAgreeMarry_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAgreeMarry_ProtoFunID_descriptor(), value);
}
inline bool stReqAgreeMarry_ProtoFunID_Parse(
    const ::std::string& name, stReqAgreeMarry_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAgreeMarry_ProtoFunID>(
    stReqAgreeMarry_ProtoFunID_descriptor(), name, value);
}
enum stReqQuitWedding_ProtoModID {
  stReqQuitWedding_ProtoModID_ModID = 3
};
bool stReqQuitWedding_ProtoModID_IsValid(int value);
const stReqQuitWedding_ProtoModID stReqQuitWedding_ProtoModID_ProtoModID_MIN = stReqQuitWedding_ProtoModID_ModID;
const stReqQuitWedding_ProtoModID stReqQuitWedding_ProtoModID_ProtoModID_MAX = stReqQuitWedding_ProtoModID_ModID;
const int stReqQuitWedding_ProtoModID_ProtoModID_ARRAYSIZE = stReqQuitWedding_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqQuitWedding_ProtoModID_descriptor();
inline const ::std::string& stReqQuitWedding_ProtoModID_Name(stReqQuitWedding_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqQuitWedding_ProtoModID_descriptor(), value);
}
inline bool stReqQuitWedding_ProtoModID_Parse(
    const ::std::string& name, stReqQuitWedding_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqQuitWedding_ProtoModID>(
    stReqQuitWedding_ProtoModID_descriptor(), name, value);
}
enum stReqQuitWedding_ProtoFunID {
  stReqQuitWedding_ProtoFunID_FunID = 165
};
bool stReqQuitWedding_ProtoFunID_IsValid(int value);
const stReqQuitWedding_ProtoFunID stReqQuitWedding_ProtoFunID_ProtoFunID_MIN = stReqQuitWedding_ProtoFunID_FunID;
const stReqQuitWedding_ProtoFunID stReqQuitWedding_ProtoFunID_ProtoFunID_MAX = stReqQuitWedding_ProtoFunID_FunID;
const int stReqQuitWedding_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqQuitWedding_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqQuitWedding_ProtoFunID_descriptor();
inline const ::std::string& stReqQuitWedding_ProtoFunID_Name(stReqQuitWedding_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqQuitWedding_ProtoFunID_descriptor(), value);
}
inline bool stReqQuitWedding_ProtoFunID_Parse(
    const ::std::string& name, stReqQuitWedding_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqQuitWedding_ProtoFunID>(
    stReqQuitWedding_ProtoFunID_descriptor(), name, value);
}
enum stReqReEnterWedding_ProtoModID {
  stReqReEnterWedding_ProtoModID_ModID = 3
};
bool stReqReEnterWedding_ProtoModID_IsValid(int value);
const stReqReEnterWedding_ProtoModID stReqReEnterWedding_ProtoModID_ProtoModID_MIN = stReqReEnterWedding_ProtoModID_ModID;
const stReqReEnterWedding_ProtoModID stReqReEnterWedding_ProtoModID_ProtoModID_MAX = stReqReEnterWedding_ProtoModID_ModID;
const int stReqReEnterWedding_ProtoModID_ProtoModID_ARRAYSIZE = stReqReEnterWedding_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReEnterWedding_ProtoModID_descriptor();
inline const ::std::string& stReqReEnterWedding_ProtoModID_Name(stReqReEnterWedding_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReEnterWedding_ProtoModID_descriptor(), value);
}
inline bool stReqReEnterWedding_ProtoModID_Parse(
    const ::std::string& name, stReqReEnterWedding_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReEnterWedding_ProtoModID>(
    stReqReEnterWedding_ProtoModID_descriptor(), name, value);
}
enum stReqReEnterWedding_ProtoFunID {
  stReqReEnterWedding_ProtoFunID_FunID = 166
};
bool stReqReEnterWedding_ProtoFunID_IsValid(int value);
const stReqReEnterWedding_ProtoFunID stReqReEnterWedding_ProtoFunID_ProtoFunID_MIN = stReqReEnterWedding_ProtoFunID_FunID;
const stReqReEnterWedding_ProtoFunID stReqReEnterWedding_ProtoFunID_ProtoFunID_MAX = stReqReEnterWedding_ProtoFunID_FunID;
const int stReqReEnterWedding_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqReEnterWedding_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReEnterWedding_ProtoFunID_descriptor();
inline const ::std::string& stReqReEnterWedding_ProtoFunID_Name(stReqReEnterWedding_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReEnterWedding_ProtoFunID_descriptor(), value);
}
inline bool stReqReEnterWedding_ProtoFunID_Parse(
    const ::std::string& name, stReqReEnterWedding_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReEnterWedding_ProtoFunID>(
    stReqReEnterWedding_ProtoFunID_descriptor(), name, value);
}
enum stReqBuyFireWork_ProtoModID {
  stReqBuyFireWork_ProtoModID_ModID = 3
};
bool stReqBuyFireWork_ProtoModID_IsValid(int value);
const stReqBuyFireWork_ProtoModID stReqBuyFireWork_ProtoModID_ProtoModID_MIN = stReqBuyFireWork_ProtoModID_ModID;
const stReqBuyFireWork_ProtoModID stReqBuyFireWork_ProtoModID_ProtoModID_MAX = stReqBuyFireWork_ProtoModID_ModID;
const int stReqBuyFireWork_ProtoModID_ProtoModID_ARRAYSIZE = stReqBuyFireWork_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyFireWork_ProtoModID_descriptor();
inline const ::std::string& stReqBuyFireWork_ProtoModID_Name(stReqBuyFireWork_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyFireWork_ProtoModID_descriptor(), value);
}
inline bool stReqBuyFireWork_ProtoModID_Parse(
    const ::std::string& name, stReqBuyFireWork_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyFireWork_ProtoModID>(
    stReqBuyFireWork_ProtoModID_descriptor(), name, value);
}
enum stReqBuyFireWork_ProtoFunID {
  stReqBuyFireWork_ProtoFunID_FunID = 167
};
bool stReqBuyFireWork_ProtoFunID_IsValid(int value);
const stReqBuyFireWork_ProtoFunID stReqBuyFireWork_ProtoFunID_ProtoFunID_MIN = stReqBuyFireWork_ProtoFunID_FunID;
const stReqBuyFireWork_ProtoFunID stReqBuyFireWork_ProtoFunID_ProtoFunID_MAX = stReqBuyFireWork_ProtoFunID_FunID;
const int stReqBuyFireWork_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBuyFireWork_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyFireWork_ProtoFunID_descriptor();
inline const ::std::string& stReqBuyFireWork_ProtoFunID_Name(stReqBuyFireWork_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyFireWork_ProtoFunID_descriptor(), value);
}
inline bool stReqBuyFireWork_ProtoFunID_Parse(
    const ::std::string& name, stReqBuyFireWork_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyFireWork_ProtoFunID>(
    stReqBuyFireWork_ProtoFunID_descriptor(), name, value);
}
enum stReqAgreeInvite_ProtoModID {
  stReqAgreeInvite_ProtoModID_ModID = 3
};
bool stReqAgreeInvite_ProtoModID_IsValid(int value);
const stReqAgreeInvite_ProtoModID stReqAgreeInvite_ProtoModID_ProtoModID_MIN = stReqAgreeInvite_ProtoModID_ModID;
const stReqAgreeInvite_ProtoModID stReqAgreeInvite_ProtoModID_ProtoModID_MAX = stReqAgreeInvite_ProtoModID_ModID;
const int stReqAgreeInvite_ProtoModID_ProtoModID_ARRAYSIZE = stReqAgreeInvite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAgreeInvite_ProtoModID_descriptor();
inline const ::std::string& stReqAgreeInvite_ProtoModID_Name(stReqAgreeInvite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAgreeInvite_ProtoModID_descriptor(), value);
}
inline bool stReqAgreeInvite_ProtoModID_Parse(
    const ::std::string& name, stReqAgreeInvite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAgreeInvite_ProtoModID>(
    stReqAgreeInvite_ProtoModID_descriptor(), name, value);
}
enum stReqAgreeInvite_ProtoFunID {
  stReqAgreeInvite_ProtoFunID_FunID = 168
};
bool stReqAgreeInvite_ProtoFunID_IsValid(int value);
const stReqAgreeInvite_ProtoFunID stReqAgreeInvite_ProtoFunID_ProtoFunID_MIN = stReqAgreeInvite_ProtoFunID_FunID;
const stReqAgreeInvite_ProtoFunID stReqAgreeInvite_ProtoFunID_ProtoFunID_MAX = stReqAgreeInvite_ProtoFunID_FunID;
const int stReqAgreeInvite_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAgreeInvite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAgreeInvite_ProtoFunID_descriptor();
inline const ::std::string& stReqAgreeInvite_ProtoFunID_Name(stReqAgreeInvite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAgreeInvite_ProtoFunID_descriptor(), value);
}
inline bool stReqAgreeInvite_ProtoFunID_Parse(
    const ::std::string& name, stReqAgreeInvite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAgreeInvite_ProtoFunID>(
    stReqAgreeInvite_ProtoFunID_descriptor(), name, value);
}
enum stReqTakeCandy_ProtoModID {
  stReqTakeCandy_ProtoModID_ModID = 3
};
bool stReqTakeCandy_ProtoModID_IsValid(int value);
const stReqTakeCandy_ProtoModID stReqTakeCandy_ProtoModID_ProtoModID_MIN = stReqTakeCandy_ProtoModID_ModID;
const stReqTakeCandy_ProtoModID stReqTakeCandy_ProtoModID_ProtoModID_MAX = stReqTakeCandy_ProtoModID_ModID;
const int stReqTakeCandy_ProtoModID_ProtoModID_ARRAYSIZE = stReqTakeCandy_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqTakeCandy_ProtoModID_descriptor();
inline const ::std::string& stReqTakeCandy_ProtoModID_Name(stReqTakeCandy_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqTakeCandy_ProtoModID_descriptor(), value);
}
inline bool stReqTakeCandy_ProtoModID_Parse(
    const ::std::string& name, stReqTakeCandy_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqTakeCandy_ProtoModID>(
    stReqTakeCandy_ProtoModID_descriptor(), name, value);
}
enum stReqTakeCandy_ProtoFunID {
  stReqTakeCandy_ProtoFunID_FunID = 169
};
bool stReqTakeCandy_ProtoFunID_IsValid(int value);
const stReqTakeCandy_ProtoFunID stReqTakeCandy_ProtoFunID_ProtoFunID_MIN = stReqTakeCandy_ProtoFunID_FunID;
const stReqTakeCandy_ProtoFunID stReqTakeCandy_ProtoFunID_ProtoFunID_MAX = stReqTakeCandy_ProtoFunID_FunID;
const int stReqTakeCandy_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqTakeCandy_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqTakeCandy_ProtoFunID_descriptor();
inline const ::std::string& stReqTakeCandy_ProtoFunID_Name(stReqTakeCandy_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqTakeCandy_ProtoFunID_descriptor(), value);
}
inline bool stReqTakeCandy_ProtoFunID_Parse(
    const ::std::string& name, stReqTakeCandy_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqTakeCandy_ProtoFunID>(
    stReqTakeCandy_ProtoFunID_descriptor(), name, value);
}
enum stNotifyCoupleMarry_ProtoModID {
  stNotifyCoupleMarry_ProtoModID_ModID = 3
};
bool stNotifyCoupleMarry_ProtoModID_IsValid(int value);
const stNotifyCoupleMarry_ProtoModID stNotifyCoupleMarry_ProtoModID_ProtoModID_MIN = stNotifyCoupleMarry_ProtoModID_ModID;
const stNotifyCoupleMarry_ProtoModID stNotifyCoupleMarry_ProtoModID_ProtoModID_MAX = stNotifyCoupleMarry_ProtoModID_ModID;
const int stNotifyCoupleMarry_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyCoupleMarry_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyCoupleMarry_ProtoModID_descriptor();
inline const ::std::string& stNotifyCoupleMarry_ProtoModID_Name(stNotifyCoupleMarry_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyCoupleMarry_ProtoModID_descriptor(), value);
}
inline bool stNotifyCoupleMarry_ProtoModID_Parse(
    const ::std::string& name, stNotifyCoupleMarry_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyCoupleMarry_ProtoModID>(
    stNotifyCoupleMarry_ProtoModID_descriptor(), name, value);
}
enum stNotifyCoupleMarry_ProtoFunID {
  stNotifyCoupleMarry_ProtoFunID_FunID = 170
};
bool stNotifyCoupleMarry_ProtoFunID_IsValid(int value);
const stNotifyCoupleMarry_ProtoFunID stNotifyCoupleMarry_ProtoFunID_ProtoFunID_MIN = stNotifyCoupleMarry_ProtoFunID_FunID;
const stNotifyCoupleMarry_ProtoFunID stNotifyCoupleMarry_ProtoFunID_ProtoFunID_MAX = stNotifyCoupleMarry_ProtoFunID_FunID;
const int stNotifyCoupleMarry_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyCoupleMarry_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyCoupleMarry_ProtoFunID_descriptor();
inline const ::std::string& stNotifyCoupleMarry_ProtoFunID_Name(stNotifyCoupleMarry_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyCoupleMarry_ProtoFunID_descriptor(), value);
}
inline bool stNotifyCoupleMarry_ProtoFunID_Parse(
    const ::std::string& name, stNotifyCoupleMarry_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyCoupleMarry_ProtoFunID>(
    stNotifyCoupleMarry_ProtoFunID_descriptor(), name, value);
}
enum stSendWeedingRing_ProtoModID {
  stSendWeedingRing_ProtoModID_ModID = 3
};
bool stSendWeedingRing_ProtoModID_IsValid(int value);
const stSendWeedingRing_ProtoModID stSendWeedingRing_ProtoModID_ProtoModID_MIN = stSendWeedingRing_ProtoModID_ModID;
const stSendWeedingRing_ProtoModID stSendWeedingRing_ProtoModID_ProtoModID_MAX = stSendWeedingRing_ProtoModID_ModID;
const int stSendWeedingRing_ProtoModID_ProtoModID_ARRAYSIZE = stSendWeedingRing_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendWeedingRing_ProtoModID_descriptor();
inline const ::std::string& stSendWeedingRing_ProtoModID_Name(stSendWeedingRing_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendWeedingRing_ProtoModID_descriptor(), value);
}
inline bool stSendWeedingRing_ProtoModID_Parse(
    const ::std::string& name, stSendWeedingRing_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendWeedingRing_ProtoModID>(
    stSendWeedingRing_ProtoModID_descriptor(), name, value);
}
enum stSendWeedingRing_ProtoFunID {
  stSendWeedingRing_ProtoFunID_FunID = 171
};
bool stSendWeedingRing_ProtoFunID_IsValid(int value);
const stSendWeedingRing_ProtoFunID stSendWeedingRing_ProtoFunID_ProtoFunID_MIN = stSendWeedingRing_ProtoFunID_FunID;
const stSendWeedingRing_ProtoFunID stSendWeedingRing_ProtoFunID_ProtoFunID_MAX = stSendWeedingRing_ProtoFunID_FunID;
const int stSendWeedingRing_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendWeedingRing_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendWeedingRing_ProtoFunID_descriptor();
inline const ::std::string& stSendWeedingRing_ProtoFunID_Name(stSendWeedingRing_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendWeedingRing_ProtoFunID_descriptor(), value);
}
inline bool stSendWeedingRing_ProtoFunID_Parse(
    const ::std::string& name, stSendWeedingRing_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendWeedingRing_ProtoFunID>(
    stSendWeedingRing_ProtoFunID_descriptor(), name, value);
}
enum stMarryInfoCb_ProtoModID {
  stMarryInfoCb_ProtoModID_ModID = 3
};
bool stMarryInfoCb_ProtoModID_IsValid(int value);
const stMarryInfoCb_ProtoModID stMarryInfoCb_ProtoModID_ProtoModID_MIN = stMarryInfoCb_ProtoModID_ModID;
const stMarryInfoCb_ProtoModID stMarryInfoCb_ProtoModID_ProtoModID_MAX = stMarryInfoCb_ProtoModID_ModID;
const int stMarryInfoCb_ProtoModID_ProtoModID_ARRAYSIZE = stMarryInfoCb_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMarryInfoCb_ProtoModID_descriptor();
inline const ::std::string& stMarryInfoCb_ProtoModID_Name(stMarryInfoCb_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMarryInfoCb_ProtoModID_descriptor(), value);
}
inline bool stMarryInfoCb_ProtoModID_Parse(
    const ::std::string& name, stMarryInfoCb_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMarryInfoCb_ProtoModID>(
    stMarryInfoCb_ProtoModID_descriptor(), name, value);
}
enum stMarryInfoCb_ProtoFunID {
  stMarryInfoCb_ProtoFunID_FunID = 171
};
bool stMarryInfoCb_ProtoFunID_IsValid(int value);
const stMarryInfoCb_ProtoFunID stMarryInfoCb_ProtoFunID_ProtoFunID_MIN = stMarryInfoCb_ProtoFunID_FunID;
const stMarryInfoCb_ProtoFunID stMarryInfoCb_ProtoFunID_ProtoFunID_MAX = stMarryInfoCb_ProtoFunID_FunID;
const int stMarryInfoCb_ProtoFunID_ProtoFunID_ARRAYSIZE = stMarryInfoCb_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMarryInfoCb_ProtoFunID_descriptor();
inline const ::std::string& stMarryInfoCb_ProtoFunID_Name(stMarryInfoCb_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMarryInfoCb_ProtoFunID_descriptor(), value);
}
inline bool stMarryInfoCb_ProtoFunID_Parse(
    const ::std::string& name, stMarryInfoCb_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMarryInfoCb_ProtoFunID>(
    stMarryInfoCb_ProtoFunID_descriptor(), name, value);
}
enum stUseFireWork_ProtoModID {
  stUseFireWork_ProtoModID_ModID = 3
};
bool stUseFireWork_ProtoModID_IsValid(int value);
const stUseFireWork_ProtoModID stUseFireWork_ProtoModID_ProtoModID_MIN = stUseFireWork_ProtoModID_ModID;
const stUseFireWork_ProtoModID stUseFireWork_ProtoModID_ProtoModID_MAX = stUseFireWork_ProtoModID_ModID;
const int stUseFireWork_ProtoModID_ProtoModID_ARRAYSIZE = stUseFireWork_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseFireWork_ProtoModID_descriptor();
inline const ::std::string& stUseFireWork_ProtoModID_Name(stUseFireWork_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseFireWork_ProtoModID_descriptor(), value);
}
inline bool stUseFireWork_ProtoModID_Parse(
    const ::std::string& name, stUseFireWork_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseFireWork_ProtoModID>(
    stUseFireWork_ProtoModID_descriptor(), name, value);
}
enum stUseFireWork_ProtoFunID {
  stUseFireWork_ProtoFunID_FunID = 172
};
bool stUseFireWork_ProtoFunID_IsValid(int value);
const stUseFireWork_ProtoFunID stUseFireWork_ProtoFunID_ProtoFunID_MIN = stUseFireWork_ProtoFunID_FunID;
const stUseFireWork_ProtoFunID stUseFireWork_ProtoFunID_ProtoFunID_MAX = stUseFireWork_ProtoFunID_FunID;
const int stUseFireWork_ProtoFunID_ProtoFunID_ARRAYSIZE = stUseFireWork_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseFireWork_ProtoFunID_descriptor();
inline const ::std::string& stUseFireWork_ProtoFunID_Name(stUseFireWork_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseFireWork_ProtoFunID_descriptor(), value);
}
inline bool stUseFireWork_ProtoFunID_Parse(
    const ::std::string& name, stUseFireWork_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseFireWork_ProtoFunID>(
    stUseFireWork_ProtoFunID_descriptor(), name, value);
}
enum stRetMarryInfoToCouple_ProtoModID {
  stRetMarryInfoToCouple_ProtoModID_ModID = 3
};
bool stRetMarryInfoToCouple_ProtoModID_IsValid(int value);
const stRetMarryInfoToCouple_ProtoModID stRetMarryInfoToCouple_ProtoModID_ProtoModID_MIN = stRetMarryInfoToCouple_ProtoModID_ModID;
const stRetMarryInfoToCouple_ProtoModID stRetMarryInfoToCouple_ProtoModID_ProtoModID_MAX = stRetMarryInfoToCouple_ProtoModID_ModID;
const int stRetMarryInfoToCouple_ProtoModID_ProtoModID_ARRAYSIZE = stRetMarryInfoToCouple_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetMarryInfoToCouple_ProtoModID_descriptor();
inline const ::std::string& stRetMarryInfoToCouple_ProtoModID_Name(stRetMarryInfoToCouple_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetMarryInfoToCouple_ProtoModID_descriptor(), value);
}
inline bool stRetMarryInfoToCouple_ProtoModID_Parse(
    const ::std::string& name, stRetMarryInfoToCouple_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetMarryInfoToCouple_ProtoModID>(
    stRetMarryInfoToCouple_ProtoModID_descriptor(), name, value);
}
enum stRetMarryInfoToCouple_ProtoFunID {
  stRetMarryInfoToCouple_ProtoFunID_FunID = 173
};
bool stRetMarryInfoToCouple_ProtoFunID_IsValid(int value);
const stRetMarryInfoToCouple_ProtoFunID stRetMarryInfoToCouple_ProtoFunID_ProtoFunID_MIN = stRetMarryInfoToCouple_ProtoFunID_FunID;
const stRetMarryInfoToCouple_ProtoFunID stRetMarryInfoToCouple_ProtoFunID_ProtoFunID_MAX = stRetMarryInfoToCouple_ProtoFunID_FunID;
const int stRetMarryInfoToCouple_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetMarryInfoToCouple_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetMarryInfoToCouple_ProtoFunID_descriptor();
inline const ::std::string& stRetMarryInfoToCouple_ProtoFunID_Name(stRetMarryInfoToCouple_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetMarryInfoToCouple_ProtoFunID_descriptor(), value);
}
inline bool stRetMarryInfoToCouple_ProtoFunID_Parse(
    const ::std::string& name, stRetMarryInfoToCouple_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetMarryInfoToCouple_ProtoFunID>(
    stRetMarryInfoToCouple_ProtoFunID_descriptor(), name, value);
}
enum stNotifyCoupleMarryCb_ProtoModID {
  stNotifyCoupleMarryCb_ProtoModID_ModID = 3
};
bool stNotifyCoupleMarryCb_ProtoModID_IsValid(int value);
const stNotifyCoupleMarryCb_ProtoModID stNotifyCoupleMarryCb_ProtoModID_ProtoModID_MIN = stNotifyCoupleMarryCb_ProtoModID_ModID;
const stNotifyCoupleMarryCb_ProtoModID stNotifyCoupleMarryCb_ProtoModID_ProtoModID_MAX = stNotifyCoupleMarryCb_ProtoModID_ModID;
const int stNotifyCoupleMarryCb_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyCoupleMarryCb_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyCoupleMarryCb_ProtoModID_descriptor();
inline const ::std::string& stNotifyCoupleMarryCb_ProtoModID_Name(stNotifyCoupleMarryCb_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyCoupleMarryCb_ProtoModID_descriptor(), value);
}
inline bool stNotifyCoupleMarryCb_ProtoModID_Parse(
    const ::std::string& name, stNotifyCoupleMarryCb_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyCoupleMarryCb_ProtoModID>(
    stNotifyCoupleMarryCb_ProtoModID_descriptor(), name, value);
}
enum stNotifyCoupleMarryCb_ProtoFunID {
  stNotifyCoupleMarryCb_ProtoFunID_FunID = 174
};
bool stNotifyCoupleMarryCb_ProtoFunID_IsValid(int value);
const stNotifyCoupleMarryCb_ProtoFunID stNotifyCoupleMarryCb_ProtoFunID_ProtoFunID_MIN = stNotifyCoupleMarryCb_ProtoFunID_FunID;
const stNotifyCoupleMarryCb_ProtoFunID stNotifyCoupleMarryCb_ProtoFunID_ProtoFunID_MAX = stNotifyCoupleMarryCb_ProtoFunID_FunID;
const int stNotifyCoupleMarryCb_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyCoupleMarryCb_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyCoupleMarryCb_ProtoFunID_descriptor();
inline const ::std::string& stNotifyCoupleMarryCb_ProtoFunID_Name(stNotifyCoupleMarryCb_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyCoupleMarryCb_ProtoFunID_descriptor(), value);
}
inline bool stNotifyCoupleMarryCb_ProtoFunID_Parse(
    const ::std::string& name, stNotifyCoupleMarryCb_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyCoupleMarryCb_ProtoFunID>(
    stNotifyCoupleMarryCb_ProtoFunID_descriptor(), name, value);
}
enum stRetForceDivorce_ProtoModID {
  stRetForceDivorce_ProtoModID_ModID = 3
};
bool stRetForceDivorce_ProtoModID_IsValid(int value);
const stRetForceDivorce_ProtoModID stRetForceDivorce_ProtoModID_ProtoModID_MIN = stRetForceDivorce_ProtoModID_ModID;
const stRetForceDivorce_ProtoModID stRetForceDivorce_ProtoModID_ProtoModID_MAX = stRetForceDivorce_ProtoModID_ModID;
const int stRetForceDivorce_ProtoModID_ProtoModID_ARRAYSIZE = stRetForceDivorce_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetForceDivorce_ProtoModID_descriptor();
inline const ::std::string& stRetForceDivorce_ProtoModID_Name(stRetForceDivorce_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetForceDivorce_ProtoModID_descriptor(), value);
}
inline bool stRetForceDivorce_ProtoModID_Parse(
    const ::std::string& name, stRetForceDivorce_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetForceDivorce_ProtoModID>(
    stRetForceDivorce_ProtoModID_descriptor(), name, value);
}
enum stRetForceDivorce_ProtoFunID {
  stRetForceDivorce_ProtoFunID_FunID = 175
};
bool stRetForceDivorce_ProtoFunID_IsValid(int value);
const stRetForceDivorce_ProtoFunID stRetForceDivorce_ProtoFunID_ProtoFunID_MIN = stRetForceDivorce_ProtoFunID_FunID;
const stRetForceDivorce_ProtoFunID stRetForceDivorce_ProtoFunID_ProtoFunID_MAX = stRetForceDivorce_ProtoFunID_FunID;
const int stRetForceDivorce_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetForceDivorce_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetForceDivorce_ProtoFunID_descriptor();
inline const ::std::string& stRetForceDivorce_ProtoFunID_Name(stRetForceDivorce_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetForceDivorce_ProtoFunID_descriptor(), value);
}
inline bool stRetForceDivorce_ProtoFunID_Parse(
    const ::std::string& name, stRetForceDivorce_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetForceDivorce_ProtoFunID>(
    stRetForceDivorce_ProtoFunID_descriptor(), name, value);
}
enum stRetForceDivorceCb_ProtoModID {
  stRetForceDivorceCb_ProtoModID_ModID = 3
};
bool stRetForceDivorceCb_ProtoModID_IsValid(int value);
const stRetForceDivorceCb_ProtoModID stRetForceDivorceCb_ProtoModID_ProtoModID_MIN = stRetForceDivorceCb_ProtoModID_ModID;
const stRetForceDivorceCb_ProtoModID stRetForceDivorceCb_ProtoModID_ProtoModID_MAX = stRetForceDivorceCb_ProtoModID_ModID;
const int stRetForceDivorceCb_ProtoModID_ProtoModID_ARRAYSIZE = stRetForceDivorceCb_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetForceDivorceCb_ProtoModID_descriptor();
inline const ::std::string& stRetForceDivorceCb_ProtoModID_Name(stRetForceDivorceCb_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetForceDivorceCb_ProtoModID_descriptor(), value);
}
inline bool stRetForceDivorceCb_ProtoModID_Parse(
    const ::std::string& name, stRetForceDivorceCb_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetForceDivorceCb_ProtoModID>(
    stRetForceDivorceCb_ProtoModID_descriptor(), name, value);
}
enum stRetForceDivorceCb_ProtoFunID {
  stRetForceDivorceCb_ProtoFunID_FunID = 176
};
bool stRetForceDivorceCb_ProtoFunID_IsValid(int value);
const stRetForceDivorceCb_ProtoFunID stRetForceDivorceCb_ProtoFunID_ProtoFunID_MIN = stRetForceDivorceCb_ProtoFunID_FunID;
const stRetForceDivorceCb_ProtoFunID stRetForceDivorceCb_ProtoFunID_ProtoFunID_MAX = stRetForceDivorceCb_ProtoFunID_FunID;
const int stRetForceDivorceCb_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetForceDivorceCb_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetForceDivorceCb_ProtoFunID_descriptor();
inline const ::std::string& stRetForceDivorceCb_ProtoFunID_Name(stRetForceDivorceCb_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetForceDivorceCb_ProtoFunID_descriptor(), value);
}
inline bool stRetForceDivorceCb_ProtoFunID_Parse(
    const ::std::string& name, stRetForceDivorceCb_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetForceDivorceCb_ProtoFunID>(
    stRetForceDivorceCb_ProtoFunID_descriptor(), name, value);
}
enum stRetRejectDivorce_ProtoModID {
  stRetRejectDivorce_ProtoModID_ModID = 3
};
bool stRetRejectDivorce_ProtoModID_IsValid(int value);
const stRetRejectDivorce_ProtoModID stRetRejectDivorce_ProtoModID_ProtoModID_MIN = stRetRejectDivorce_ProtoModID_ModID;
const stRetRejectDivorce_ProtoModID stRetRejectDivorce_ProtoModID_ProtoModID_MAX = stRetRejectDivorce_ProtoModID_ModID;
const int stRetRejectDivorce_ProtoModID_ProtoModID_ARRAYSIZE = stRetRejectDivorce_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_ProtoModID_descriptor();
inline const ::std::string& stRetRejectDivorce_ProtoModID_Name(stRetRejectDivorce_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRejectDivorce_ProtoModID_descriptor(), value);
}
inline bool stRetRejectDivorce_ProtoModID_Parse(
    const ::std::string& name, stRetRejectDivorce_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRejectDivorce_ProtoModID>(
    stRetRejectDivorce_ProtoModID_descriptor(), name, value);
}
enum stRetRejectDivorce_ProtoFunID {
  stRetRejectDivorce_ProtoFunID_FunID = 177
};
bool stRetRejectDivorce_ProtoFunID_IsValid(int value);
const stRetRejectDivorce_ProtoFunID stRetRejectDivorce_ProtoFunID_ProtoFunID_MIN = stRetRejectDivorce_ProtoFunID_FunID;
const stRetRejectDivorce_ProtoFunID stRetRejectDivorce_ProtoFunID_ProtoFunID_MAX = stRetRejectDivorce_ProtoFunID_FunID;
const int stRetRejectDivorce_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRejectDivorce_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_ProtoFunID_descriptor();
inline const ::std::string& stRetRejectDivorce_ProtoFunID_Name(stRetRejectDivorce_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRejectDivorce_ProtoFunID_descriptor(), value);
}
inline bool stRetRejectDivorce_ProtoFunID_Parse(
    const ::std::string& name, stRetRejectDivorce_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRejectDivorce_ProtoFunID>(
    stRetRejectDivorce_ProtoFunID_descriptor(), name, value);
}
enum stRetDelUserOnlineMarryInfo_ProtoModID {
  stRetDelUserOnlineMarryInfo_ProtoModID_ModID = 3
};
bool stRetDelUserOnlineMarryInfo_ProtoModID_IsValid(int value);
const stRetDelUserOnlineMarryInfo_ProtoModID stRetDelUserOnlineMarryInfo_ProtoModID_ProtoModID_MIN = stRetDelUserOnlineMarryInfo_ProtoModID_ModID;
const stRetDelUserOnlineMarryInfo_ProtoModID stRetDelUserOnlineMarryInfo_ProtoModID_ProtoModID_MAX = stRetDelUserOnlineMarryInfo_ProtoModID_ModID;
const int stRetDelUserOnlineMarryInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetDelUserOnlineMarryInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDelUserOnlineMarryInfo_ProtoModID_descriptor();
inline const ::std::string& stRetDelUserOnlineMarryInfo_ProtoModID_Name(stRetDelUserOnlineMarryInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDelUserOnlineMarryInfo_ProtoModID_descriptor(), value);
}
inline bool stRetDelUserOnlineMarryInfo_ProtoModID_Parse(
    const ::std::string& name, stRetDelUserOnlineMarryInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDelUserOnlineMarryInfo_ProtoModID>(
    stRetDelUserOnlineMarryInfo_ProtoModID_descriptor(), name, value);
}
enum stRetDelUserOnlineMarryInfo_ProtoFunID {
  stRetDelUserOnlineMarryInfo_ProtoFunID_FunID = 178
};
bool stRetDelUserOnlineMarryInfo_ProtoFunID_IsValid(int value);
const stRetDelUserOnlineMarryInfo_ProtoFunID stRetDelUserOnlineMarryInfo_ProtoFunID_ProtoFunID_MIN = stRetDelUserOnlineMarryInfo_ProtoFunID_FunID;
const stRetDelUserOnlineMarryInfo_ProtoFunID stRetDelUserOnlineMarryInfo_ProtoFunID_ProtoFunID_MAX = stRetDelUserOnlineMarryInfo_ProtoFunID_FunID;
const int stRetDelUserOnlineMarryInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDelUserOnlineMarryInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDelUserOnlineMarryInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetDelUserOnlineMarryInfo_ProtoFunID_Name(stRetDelUserOnlineMarryInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDelUserOnlineMarryInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetDelUserOnlineMarryInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetDelUserOnlineMarryInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDelUserOnlineMarryInfo_ProtoFunID>(
    stRetDelUserOnlineMarryInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqSynGuildBlackMarketLv_ProtoModID {
  stReqSynGuildBlackMarketLv_ProtoModID_ModID = 3
};
bool stReqSynGuildBlackMarketLv_ProtoModID_IsValid(int value);
const stReqSynGuildBlackMarketLv_ProtoModID stReqSynGuildBlackMarketLv_ProtoModID_ProtoModID_MIN = stReqSynGuildBlackMarketLv_ProtoModID_ModID;
const stReqSynGuildBlackMarketLv_ProtoModID stReqSynGuildBlackMarketLv_ProtoModID_ProtoModID_MAX = stReqSynGuildBlackMarketLv_ProtoModID_ModID;
const int stReqSynGuildBlackMarketLv_ProtoModID_ProtoModID_ARRAYSIZE = stReqSynGuildBlackMarketLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSynGuildBlackMarketLv_ProtoModID_descriptor();
inline const ::std::string& stReqSynGuildBlackMarketLv_ProtoModID_Name(stReqSynGuildBlackMarketLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSynGuildBlackMarketLv_ProtoModID_descriptor(), value);
}
inline bool stReqSynGuildBlackMarketLv_ProtoModID_Parse(
    const ::std::string& name, stReqSynGuildBlackMarketLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSynGuildBlackMarketLv_ProtoModID>(
    stReqSynGuildBlackMarketLv_ProtoModID_descriptor(), name, value);
}
enum stReqSynGuildBlackMarketLv_ProtoFunID {
  stReqSynGuildBlackMarketLv_ProtoFunID_FunID = 179
};
bool stReqSynGuildBlackMarketLv_ProtoFunID_IsValid(int value);
const stReqSynGuildBlackMarketLv_ProtoFunID stReqSynGuildBlackMarketLv_ProtoFunID_ProtoFunID_MIN = stReqSynGuildBlackMarketLv_ProtoFunID_FunID;
const stReqSynGuildBlackMarketLv_ProtoFunID stReqSynGuildBlackMarketLv_ProtoFunID_ProtoFunID_MAX = stReqSynGuildBlackMarketLv_ProtoFunID_FunID;
const int stReqSynGuildBlackMarketLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSynGuildBlackMarketLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSynGuildBlackMarketLv_ProtoFunID_descriptor();
inline const ::std::string& stReqSynGuildBlackMarketLv_ProtoFunID_Name(stReqSynGuildBlackMarketLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSynGuildBlackMarketLv_ProtoFunID_descriptor(), value);
}
inline bool stReqSynGuildBlackMarketLv_ProtoFunID_Parse(
    const ::std::string& name, stReqSynGuildBlackMarketLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSynGuildBlackMarketLv_ProtoFunID>(
    stReqSynGuildBlackMarketLv_ProtoFunID_descriptor(), name, value);
}
enum stSynGuildBlackMarketLvResult_ProtoModID {
  stSynGuildBlackMarketLvResult_ProtoModID_ModID = 3
};
bool stSynGuildBlackMarketLvResult_ProtoModID_IsValid(int value);
const stSynGuildBlackMarketLvResult_ProtoModID stSynGuildBlackMarketLvResult_ProtoModID_ProtoModID_MIN = stSynGuildBlackMarketLvResult_ProtoModID_ModID;
const stSynGuildBlackMarketLvResult_ProtoModID stSynGuildBlackMarketLvResult_ProtoModID_ProtoModID_MAX = stSynGuildBlackMarketLvResult_ProtoModID_ModID;
const int stSynGuildBlackMarketLvResult_ProtoModID_ProtoModID_ARRAYSIZE = stSynGuildBlackMarketLvResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGuildBlackMarketLvResult_ProtoModID_descriptor();
inline const ::std::string& stSynGuildBlackMarketLvResult_ProtoModID_Name(stSynGuildBlackMarketLvResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGuildBlackMarketLvResult_ProtoModID_descriptor(), value);
}
inline bool stSynGuildBlackMarketLvResult_ProtoModID_Parse(
    const ::std::string& name, stSynGuildBlackMarketLvResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGuildBlackMarketLvResult_ProtoModID>(
    stSynGuildBlackMarketLvResult_ProtoModID_descriptor(), name, value);
}
enum stSynGuildBlackMarketLvResult_ProtoFunID {
  stSynGuildBlackMarketLvResult_ProtoFunID_FunID = 180
};
bool stSynGuildBlackMarketLvResult_ProtoFunID_IsValid(int value);
const stSynGuildBlackMarketLvResult_ProtoFunID stSynGuildBlackMarketLvResult_ProtoFunID_ProtoFunID_MIN = stSynGuildBlackMarketLvResult_ProtoFunID_FunID;
const stSynGuildBlackMarketLvResult_ProtoFunID stSynGuildBlackMarketLvResult_ProtoFunID_ProtoFunID_MAX = stSynGuildBlackMarketLvResult_ProtoFunID_FunID;
const int stSynGuildBlackMarketLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynGuildBlackMarketLvResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGuildBlackMarketLvResult_ProtoFunID_descriptor();
inline const ::std::string& stSynGuildBlackMarketLvResult_ProtoFunID_Name(stSynGuildBlackMarketLvResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGuildBlackMarketLvResult_ProtoFunID_descriptor(), value);
}
inline bool stSynGuildBlackMarketLvResult_ProtoFunID_Parse(
    const ::std::string& name, stSynGuildBlackMarketLvResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGuildBlackMarketLvResult_ProtoFunID>(
    stSynGuildBlackMarketLvResult_ProtoFunID_descriptor(), name, value);
}
enum stEnterResBattle_ProtoModID {
  stEnterResBattle_ProtoModID_ModID = 3
};
bool stEnterResBattle_ProtoModID_IsValid(int value);
const stEnterResBattle_ProtoModID stEnterResBattle_ProtoModID_ProtoModID_MIN = stEnterResBattle_ProtoModID_ModID;
const stEnterResBattle_ProtoModID stEnterResBattle_ProtoModID_ProtoModID_MAX = stEnterResBattle_ProtoModID_ModID;
const int stEnterResBattle_ProtoModID_ProtoModID_ARRAYSIZE = stEnterResBattle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterResBattle_ProtoModID_descriptor();
inline const ::std::string& stEnterResBattle_ProtoModID_Name(stEnterResBattle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterResBattle_ProtoModID_descriptor(), value);
}
inline bool stEnterResBattle_ProtoModID_Parse(
    const ::std::string& name, stEnterResBattle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterResBattle_ProtoModID>(
    stEnterResBattle_ProtoModID_descriptor(), name, value);
}
enum stEnterResBattle_ProtoFunID {
  stEnterResBattle_ProtoFunID_FunID = 181
};
bool stEnterResBattle_ProtoFunID_IsValid(int value);
const stEnterResBattle_ProtoFunID stEnterResBattle_ProtoFunID_ProtoFunID_MIN = stEnterResBattle_ProtoFunID_FunID;
const stEnterResBattle_ProtoFunID stEnterResBattle_ProtoFunID_ProtoFunID_MAX = stEnterResBattle_ProtoFunID_FunID;
const int stEnterResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE = stEnterResBattle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterResBattle_ProtoFunID_descriptor();
inline const ::std::string& stEnterResBattle_ProtoFunID_Name(stEnterResBattle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterResBattle_ProtoFunID_descriptor(), value);
}
inline bool stEnterResBattle_ProtoFunID_Parse(
    const ::std::string& name, stEnterResBattle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterResBattle_ProtoFunID>(
    stEnterResBattle_ProtoFunID_descriptor(), name, value);
}
enum stBroadResBattleInvite_ProtoModID {
  stBroadResBattleInvite_ProtoModID_ModID = 3
};
bool stBroadResBattleInvite_ProtoModID_IsValid(int value);
const stBroadResBattleInvite_ProtoModID stBroadResBattleInvite_ProtoModID_ProtoModID_MIN = stBroadResBattleInvite_ProtoModID_ModID;
const stBroadResBattleInvite_ProtoModID stBroadResBattleInvite_ProtoModID_ProtoModID_MAX = stBroadResBattleInvite_ProtoModID_ModID;
const int stBroadResBattleInvite_ProtoModID_ProtoModID_ARRAYSIZE = stBroadResBattleInvite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadResBattleInvite_ProtoModID_descriptor();
inline const ::std::string& stBroadResBattleInvite_ProtoModID_Name(stBroadResBattleInvite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadResBattleInvite_ProtoModID_descriptor(), value);
}
inline bool stBroadResBattleInvite_ProtoModID_Parse(
    const ::std::string& name, stBroadResBattleInvite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadResBattleInvite_ProtoModID>(
    stBroadResBattleInvite_ProtoModID_descriptor(), name, value);
}
enum stBroadResBattleInvite_ProtoFunID {
  stBroadResBattleInvite_ProtoFunID_FunID = 182
};
bool stBroadResBattleInvite_ProtoFunID_IsValid(int value);
const stBroadResBattleInvite_ProtoFunID stBroadResBattleInvite_ProtoFunID_ProtoFunID_MIN = stBroadResBattleInvite_ProtoFunID_FunID;
const stBroadResBattleInvite_ProtoFunID stBroadResBattleInvite_ProtoFunID_ProtoFunID_MAX = stBroadResBattleInvite_ProtoFunID_FunID;
const int stBroadResBattleInvite_ProtoFunID_ProtoFunID_ARRAYSIZE = stBroadResBattleInvite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadResBattleInvite_ProtoFunID_descriptor();
inline const ::std::string& stBroadResBattleInvite_ProtoFunID_Name(stBroadResBattleInvite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadResBattleInvite_ProtoFunID_descriptor(), value);
}
inline bool stBroadResBattleInvite_ProtoFunID_Parse(
    const ::std::string& name, stBroadResBattleInvite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadResBattleInvite_ProtoFunID>(
    stBroadResBattleInvite_ProtoFunID_descriptor(), name, value);
}
enum stPubOffline_ProtoModID {
  stPubOffline_ProtoModID_ModID = 3
};
bool stPubOffline_ProtoModID_IsValid(int value);
const stPubOffline_ProtoModID stPubOffline_ProtoModID_ProtoModID_MIN = stPubOffline_ProtoModID_ModID;
const stPubOffline_ProtoModID stPubOffline_ProtoModID_ProtoModID_MAX = stPubOffline_ProtoModID_ModID;
const int stPubOffline_ProtoModID_ProtoModID_ARRAYSIZE = stPubOffline_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPubOffline_ProtoModID_descriptor();
inline const ::std::string& stPubOffline_ProtoModID_Name(stPubOffline_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPubOffline_ProtoModID_descriptor(), value);
}
inline bool stPubOffline_ProtoModID_Parse(
    const ::std::string& name, stPubOffline_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPubOffline_ProtoModID>(
    stPubOffline_ProtoModID_descriptor(), name, value);
}
enum stPubOffline_ProtoFunID {
  stPubOffline_ProtoFunID_FunID = 183
};
bool stPubOffline_ProtoFunID_IsValid(int value);
const stPubOffline_ProtoFunID stPubOffline_ProtoFunID_ProtoFunID_MIN = stPubOffline_ProtoFunID_FunID;
const stPubOffline_ProtoFunID stPubOffline_ProtoFunID_ProtoFunID_MAX = stPubOffline_ProtoFunID_FunID;
const int stPubOffline_ProtoFunID_ProtoFunID_ARRAYSIZE = stPubOffline_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPubOffline_ProtoFunID_descriptor();
inline const ::std::string& stPubOffline_ProtoFunID_Name(stPubOffline_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPubOffline_ProtoFunID_descriptor(), value);
}
inline bool stPubOffline_ProtoFunID_Parse(
    const ::std::string& name, stPubOffline_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPubOffline_ProtoFunID>(
    stPubOffline_ProtoFunID_descriptor(), name, value);
}
enum stDiscoverConsume_ProtoModID {
  stDiscoverConsume_ProtoModID_ModID = 3
};
bool stDiscoverConsume_ProtoModID_IsValid(int value);
const stDiscoverConsume_ProtoModID stDiscoverConsume_ProtoModID_ProtoModID_MIN = stDiscoverConsume_ProtoModID_ModID;
const stDiscoverConsume_ProtoModID stDiscoverConsume_ProtoModID_ProtoModID_MAX = stDiscoverConsume_ProtoModID_ModID;
const int stDiscoverConsume_ProtoModID_ProtoModID_ARRAYSIZE = stDiscoverConsume_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDiscoverConsume_ProtoModID_descriptor();
inline const ::std::string& stDiscoverConsume_ProtoModID_Name(stDiscoverConsume_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDiscoverConsume_ProtoModID_descriptor(), value);
}
inline bool stDiscoverConsume_ProtoModID_Parse(
    const ::std::string& name, stDiscoverConsume_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDiscoverConsume_ProtoModID>(
    stDiscoverConsume_ProtoModID_descriptor(), name, value);
}
enum stDiscoverConsume_ProtoFunID {
  stDiscoverConsume_ProtoFunID_FunID = 184
};
bool stDiscoverConsume_ProtoFunID_IsValid(int value);
const stDiscoverConsume_ProtoFunID stDiscoverConsume_ProtoFunID_ProtoFunID_MIN = stDiscoverConsume_ProtoFunID_FunID;
const stDiscoverConsume_ProtoFunID stDiscoverConsume_ProtoFunID_ProtoFunID_MAX = stDiscoverConsume_ProtoFunID_FunID;
const int stDiscoverConsume_ProtoFunID_ProtoFunID_ARRAYSIZE = stDiscoverConsume_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDiscoverConsume_ProtoFunID_descriptor();
inline const ::std::string& stDiscoverConsume_ProtoFunID_Name(stDiscoverConsume_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDiscoverConsume_ProtoFunID_descriptor(), value);
}
inline bool stDiscoverConsume_ProtoFunID_Parse(
    const ::std::string& name, stDiscoverConsume_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDiscoverConsume_ProtoFunID>(
    stDiscoverConsume_ProtoFunID_descriptor(), name, value);
}
enum stSynCoupleInfo_ProtoModID {
  stSynCoupleInfo_ProtoModID_ModID = 3
};
bool stSynCoupleInfo_ProtoModID_IsValid(int value);
const stSynCoupleInfo_ProtoModID stSynCoupleInfo_ProtoModID_ProtoModID_MIN = stSynCoupleInfo_ProtoModID_ModID;
const stSynCoupleInfo_ProtoModID stSynCoupleInfo_ProtoModID_ProtoModID_MAX = stSynCoupleInfo_ProtoModID_ModID;
const int stSynCoupleInfo_ProtoModID_ProtoModID_ARRAYSIZE = stSynCoupleInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynCoupleInfo_ProtoModID_descriptor();
inline const ::std::string& stSynCoupleInfo_ProtoModID_Name(stSynCoupleInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynCoupleInfo_ProtoModID_descriptor(), value);
}
inline bool stSynCoupleInfo_ProtoModID_Parse(
    const ::std::string& name, stSynCoupleInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynCoupleInfo_ProtoModID>(
    stSynCoupleInfo_ProtoModID_descriptor(), name, value);
}
enum stSynCoupleInfo_ProtoFunID {
  stSynCoupleInfo_ProtoFunID_FunID = 185
};
bool stSynCoupleInfo_ProtoFunID_IsValid(int value);
const stSynCoupleInfo_ProtoFunID stSynCoupleInfo_ProtoFunID_ProtoFunID_MIN = stSynCoupleInfo_ProtoFunID_FunID;
const stSynCoupleInfo_ProtoFunID stSynCoupleInfo_ProtoFunID_ProtoFunID_MAX = stSynCoupleInfo_ProtoFunID_FunID;
const int stSynCoupleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynCoupleInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynCoupleInfo_ProtoFunID_descriptor();
inline const ::std::string& stSynCoupleInfo_ProtoFunID_Name(stSynCoupleInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynCoupleInfo_ProtoFunID_descriptor(), value);
}
inline bool stSynCoupleInfo_ProtoFunID_Parse(
    const ::std::string& name, stSynCoupleInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynCoupleInfo_ProtoFunID>(
    stSynCoupleInfo_ProtoFunID_descriptor(), name, value);
}
enum stSynResBattleUserData_ProtoModID {
  stSynResBattleUserData_ProtoModID_ModID = 3
};
bool stSynResBattleUserData_ProtoModID_IsValid(int value);
const stSynResBattleUserData_ProtoModID stSynResBattleUserData_ProtoModID_ProtoModID_MIN = stSynResBattleUserData_ProtoModID_ModID;
const stSynResBattleUserData_ProtoModID stSynResBattleUserData_ProtoModID_ProtoModID_MAX = stSynResBattleUserData_ProtoModID_ModID;
const int stSynResBattleUserData_ProtoModID_ProtoModID_ARRAYSIZE = stSynResBattleUserData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResBattleUserData_ProtoModID_descriptor();
inline const ::std::string& stSynResBattleUserData_ProtoModID_Name(stSynResBattleUserData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResBattleUserData_ProtoModID_descriptor(), value);
}
inline bool stSynResBattleUserData_ProtoModID_Parse(
    const ::std::string& name, stSynResBattleUserData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResBattleUserData_ProtoModID>(
    stSynResBattleUserData_ProtoModID_descriptor(), name, value);
}
enum stSynResBattleUserData_ProtoFunID {
  stSynResBattleUserData_ProtoFunID_FunID = 186
};
bool stSynResBattleUserData_ProtoFunID_IsValid(int value);
const stSynResBattleUserData_ProtoFunID stSynResBattleUserData_ProtoFunID_ProtoFunID_MIN = stSynResBattleUserData_ProtoFunID_FunID;
const stSynResBattleUserData_ProtoFunID stSynResBattleUserData_ProtoFunID_ProtoFunID_MAX = stSynResBattleUserData_ProtoFunID_FunID;
const int stSynResBattleUserData_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynResBattleUserData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResBattleUserData_ProtoFunID_descriptor();
inline const ::std::string& stSynResBattleUserData_ProtoFunID_Name(stSynResBattleUserData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResBattleUserData_ProtoFunID_descriptor(), value);
}
inline bool stSynResBattleUserData_ProtoFunID_Parse(
    const ::std::string& name, stSynResBattleUserData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResBattleUserData_ProtoFunID>(
    stSynResBattleUserData_ProtoFunID_descriptor(), name, value);
}
enum stSynResBattleTop50_ProtoModID {
  stSynResBattleTop50_ProtoModID_ModID = 3
};
bool stSynResBattleTop50_ProtoModID_IsValid(int value);
const stSynResBattleTop50_ProtoModID stSynResBattleTop50_ProtoModID_ProtoModID_MIN = stSynResBattleTop50_ProtoModID_ModID;
const stSynResBattleTop50_ProtoModID stSynResBattleTop50_ProtoModID_ProtoModID_MAX = stSynResBattleTop50_ProtoModID_ModID;
const int stSynResBattleTop50_ProtoModID_ProtoModID_ARRAYSIZE = stSynResBattleTop50_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResBattleTop50_ProtoModID_descriptor();
inline const ::std::string& stSynResBattleTop50_ProtoModID_Name(stSynResBattleTop50_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResBattleTop50_ProtoModID_descriptor(), value);
}
inline bool stSynResBattleTop50_ProtoModID_Parse(
    const ::std::string& name, stSynResBattleTop50_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResBattleTop50_ProtoModID>(
    stSynResBattleTop50_ProtoModID_descriptor(), name, value);
}
enum stSynResBattleTop50_ProtoFunID {
  stSynResBattleTop50_ProtoFunID_FunID = 187
};
bool stSynResBattleTop50_ProtoFunID_IsValid(int value);
const stSynResBattleTop50_ProtoFunID stSynResBattleTop50_ProtoFunID_ProtoFunID_MIN = stSynResBattleTop50_ProtoFunID_FunID;
const stSynResBattleTop50_ProtoFunID stSynResBattleTop50_ProtoFunID_ProtoFunID_MAX = stSynResBattleTop50_ProtoFunID_FunID;
const int stSynResBattleTop50_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynResBattleTop50_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResBattleTop50_ProtoFunID_descriptor();
inline const ::std::string& stSynResBattleTop50_ProtoFunID_Name(stSynResBattleTop50_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResBattleTop50_ProtoFunID_descriptor(), value);
}
inline bool stSynResBattleTop50_ProtoFunID_Parse(
    const ::std::string& name, stSynResBattleTop50_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResBattleTop50_ProtoFunID>(
    stSynResBattleTop50_ProtoFunID_descriptor(), name, value);
}
enum stSynResBattleKing_ProtoModID {
  stSynResBattleKing_ProtoModID_ModID = 3
};
bool stSynResBattleKing_ProtoModID_IsValid(int value);
const stSynResBattleKing_ProtoModID stSynResBattleKing_ProtoModID_ProtoModID_MIN = stSynResBattleKing_ProtoModID_ModID;
const stSynResBattleKing_ProtoModID stSynResBattleKing_ProtoModID_ProtoModID_MAX = stSynResBattleKing_ProtoModID_ModID;
const int stSynResBattleKing_ProtoModID_ProtoModID_ARRAYSIZE = stSynResBattleKing_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResBattleKing_ProtoModID_descriptor();
inline const ::std::string& stSynResBattleKing_ProtoModID_Name(stSynResBattleKing_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResBattleKing_ProtoModID_descriptor(), value);
}
inline bool stSynResBattleKing_ProtoModID_Parse(
    const ::std::string& name, stSynResBattleKing_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResBattleKing_ProtoModID>(
    stSynResBattleKing_ProtoModID_descriptor(), name, value);
}
enum stSynResBattleKing_ProtoFunID {
  stSynResBattleKing_ProtoFunID_FunID = 188
};
bool stSynResBattleKing_ProtoFunID_IsValid(int value);
const stSynResBattleKing_ProtoFunID stSynResBattleKing_ProtoFunID_ProtoFunID_MIN = stSynResBattleKing_ProtoFunID_FunID;
const stSynResBattleKing_ProtoFunID stSynResBattleKing_ProtoFunID_ProtoFunID_MAX = stSynResBattleKing_ProtoFunID_FunID;
const int stSynResBattleKing_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynResBattleKing_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResBattleKing_ProtoFunID_descriptor();
inline const ::std::string& stSynResBattleKing_ProtoFunID_Name(stSynResBattleKing_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResBattleKing_ProtoFunID_descriptor(), value);
}
inline bool stSynResBattleKing_ProtoFunID_Parse(
    const ::std::string& name, stSynResBattleKing_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResBattleKing_ProtoFunID>(
    stSynResBattleKing_ProtoFunID_descriptor(), name, value);
}
enum stReplyInviteResBattle_ProtoModID {
  stReplyInviteResBattle_ProtoModID_ModID = 3
};
bool stReplyInviteResBattle_ProtoModID_IsValid(int value);
const stReplyInviteResBattle_ProtoModID stReplyInviteResBattle_ProtoModID_ProtoModID_MIN = stReplyInviteResBattle_ProtoModID_ModID;
const stReplyInviteResBattle_ProtoModID stReplyInviteResBattle_ProtoModID_ProtoModID_MAX = stReplyInviteResBattle_ProtoModID_ModID;
const int stReplyInviteResBattle_ProtoModID_ProtoModID_ARRAYSIZE = stReplyInviteResBattle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyInviteResBattle_ProtoModID_descriptor();
inline const ::std::string& stReplyInviteResBattle_ProtoModID_Name(stReplyInviteResBattle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyInviteResBattle_ProtoModID_descriptor(), value);
}
inline bool stReplyInviteResBattle_ProtoModID_Parse(
    const ::std::string& name, stReplyInviteResBattle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyInviteResBattle_ProtoModID>(
    stReplyInviteResBattle_ProtoModID_descriptor(), name, value);
}
enum stReplyInviteResBattle_ProtoFunID {
  stReplyInviteResBattle_ProtoFunID_FunID = 189
};
bool stReplyInviteResBattle_ProtoFunID_IsValid(int value);
const stReplyInviteResBattle_ProtoFunID stReplyInviteResBattle_ProtoFunID_ProtoFunID_MIN = stReplyInviteResBattle_ProtoFunID_FunID;
const stReplyInviteResBattle_ProtoFunID stReplyInviteResBattle_ProtoFunID_ProtoFunID_MAX = stReplyInviteResBattle_ProtoFunID_FunID;
const int stReplyInviteResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE = stReplyInviteResBattle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyInviteResBattle_ProtoFunID_descriptor();
inline const ::std::string& stReplyInviteResBattle_ProtoFunID_Name(stReplyInviteResBattle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyInviteResBattle_ProtoFunID_descriptor(), value);
}
inline bool stReplyInviteResBattle_ProtoFunID_Parse(
    const ::std::string& name, stReplyInviteResBattle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyInviteResBattle_ProtoFunID>(
    stReplyInviteResBattle_ProtoFunID_descriptor(), name, value);
}
enum stSynGloryKingTitle_ProtoModID {
  stSynGloryKingTitle_ProtoModID_ModID = 3
};
bool stSynGloryKingTitle_ProtoModID_IsValid(int value);
const stSynGloryKingTitle_ProtoModID stSynGloryKingTitle_ProtoModID_ProtoModID_MIN = stSynGloryKingTitle_ProtoModID_ModID;
const stSynGloryKingTitle_ProtoModID stSynGloryKingTitle_ProtoModID_ProtoModID_MAX = stSynGloryKingTitle_ProtoModID_ModID;
const int stSynGloryKingTitle_ProtoModID_ProtoModID_ARRAYSIZE = stSynGloryKingTitle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGloryKingTitle_ProtoModID_descriptor();
inline const ::std::string& stSynGloryKingTitle_ProtoModID_Name(stSynGloryKingTitle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGloryKingTitle_ProtoModID_descriptor(), value);
}
inline bool stSynGloryKingTitle_ProtoModID_Parse(
    const ::std::string& name, stSynGloryKingTitle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGloryKingTitle_ProtoModID>(
    stSynGloryKingTitle_ProtoModID_descriptor(), name, value);
}
enum stSynGloryKingTitle_ProtoFunID {
  stSynGloryKingTitle_ProtoFunID_FunID = 190
};
bool stSynGloryKingTitle_ProtoFunID_IsValid(int value);
const stSynGloryKingTitle_ProtoFunID stSynGloryKingTitle_ProtoFunID_ProtoFunID_MIN = stSynGloryKingTitle_ProtoFunID_FunID;
const stSynGloryKingTitle_ProtoFunID stSynGloryKingTitle_ProtoFunID_ProtoFunID_MAX = stSynGloryKingTitle_ProtoFunID_FunID;
const int stSynGloryKingTitle_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynGloryKingTitle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGloryKingTitle_ProtoFunID_descriptor();
inline const ::std::string& stSynGloryKingTitle_ProtoFunID_Name(stSynGloryKingTitle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGloryKingTitle_ProtoFunID_descriptor(), value);
}
inline bool stSynGloryKingTitle_ProtoFunID_Parse(
    const ::std::string& name, stSynGloryKingTitle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGloryKingTitle_ProtoFunID>(
    stSynGloryKingTitle_ProtoFunID_descriptor(), name, value);
}
enum stPubOnline_ProtoModID {
  stPubOnline_ProtoModID_ModID = 3
};
bool stPubOnline_ProtoModID_IsValid(int value);
const stPubOnline_ProtoModID stPubOnline_ProtoModID_ProtoModID_MIN = stPubOnline_ProtoModID_ModID;
const stPubOnline_ProtoModID stPubOnline_ProtoModID_ProtoModID_MAX = stPubOnline_ProtoModID_ModID;
const int stPubOnline_ProtoModID_ProtoModID_ARRAYSIZE = stPubOnline_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPubOnline_ProtoModID_descriptor();
inline const ::std::string& stPubOnline_ProtoModID_Name(stPubOnline_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPubOnline_ProtoModID_descriptor(), value);
}
inline bool stPubOnline_ProtoModID_Parse(
    const ::std::string& name, stPubOnline_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPubOnline_ProtoModID>(
    stPubOnline_ProtoModID_descriptor(), name, value);
}
enum stPubOnline_ProtoFunID {
  stPubOnline_ProtoFunID_FunID = 191
};
bool stPubOnline_ProtoFunID_IsValid(int value);
const stPubOnline_ProtoFunID stPubOnline_ProtoFunID_ProtoFunID_MIN = stPubOnline_ProtoFunID_FunID;
const stPubOnline_ProtoFunID stPubOnline_ProtoFunID_ProtoFunID_MAX = stPubOnline_ProtoFunID_FunID;
const int stPubOnline_ProtoFunID_ProtoFunID_ARRAYSIZE = stPubOnline_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPubOnline_ProtoFunID_descriptor();
inline const ::std::string& stPubOnline_ProtoFunID_Name(stPubOnline_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPubOnline_ProtoFunID_descriptor(), value);
}
inline bool stPubOnline_ProtoFunID_Parse(
    const ::std::string& name, stPubOnline_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPubOnline_ProtoFunID>(
    stPubOnline_ProtoFunID_descriptor(), name, value);
}
enum stResBattleSend2Pub_ProtoModID {
  stResBattleSend2Pub_ProtoModID_ModID = 3
};
bool stResBattleSend2Pub_ProtoModID_IsValid(int value);
const stResBattleSend2Pub_ProtoModID stResBattleSend2Pub_ProtoModID_ProtoModID_MIN = stResBattleSend2Pub_ProtoModID_ModID;
const stResBattleSend2Pub_ProtoModID stResBattleSend2Pub_ProtoModID_ProtoModID_MAX = stResBattleSend2Pub_ProtoModID_ModID;
const int stResBattleSend2Pub_ProtoModID_ProtoModID_ARRAYSIZE = stResBattleSend2Pub_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResBattleSend2Pub_ProtoModID_descriptor();
inline const ::std::string& stResBattleSend2Pub_ProtoModID_Name(stResBattleSend2Pub_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResBattleSend2Pub_ProtoModID_descriptor(), value);
}
inline bool stResBattleSend2Pub_ProtoModID_Parse(
    const ::std::string& name, stResBattleSend2Pub_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResBattleSend2Pub_ProtoModID>(
    stResBattleSend2Pub_ProtoModID_descriptor(), name, value);
}
enum stResBattleSend2Pub_ProtoFunID {
  stResBattleSend2Pub_ProtoFunID_FunID = 192
};
bool stResBattleSend2Pub_ProtoFunID_IsValid(int value);
const stResBattleSend2Pub_ProtoFunID stResBattleSend2Pub_ProtoFunID_ProtoFunID_MIN = stResBattleSend2Pub_ProtoFunID_FunID;
const stResBattleSend2Pub_ProtoFunID stResBattleSend2Pub_ProtoFunID_ProtoFunID_MAX = stResBattleSend2Pub_ProtoFunID_FunID;
const int stResBattleSend2Pub_ProtoFunID_ProtoFunID_ARRAYSIZE = stResBattleSend2Pub_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResBattleSend2Pub_ProtoFunID_descriptor();
inline const ::std::string& stResBattleSend2Pub_ProtoFunID_Name(stResBattleSend2Pub_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResBattleSend2Pub_ProtoFunID_descriptor(), value);
}
inline bool stResBattleSend2Pub_ProtoFunID_Parse(
    const ::std::string& name, stResBattleSend2Pub_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResBattleSend2Pub_ProtoFunID>(
    stResBattleSend2Pub_ProtoFunID_descriptor(), name, value);
}
enum stServerParamSend2Game_ProtoModID {
  stServerParamSend2Game_ProtoModID_ModID = 3
};
bool stServerParamSend2Game_ProtoModID_IsValid(int value);
const stServerParamSend2Game_ProtoModID stServerParamSend2Game_ProtoModID_ProtoModID_MIN = stServerParamSend2Game_ProtoModID_ModID;
const stServerParamSend2Game_ProtoModID stServerParamSend2Game_ProtoModID_ProtoModID_MAX = stServerParamSend2Game_ProtoModID_ModID;
const int stServerParamSend2Game_ProtoModID_ProtoModID_ARRAYSIZE = stServerParamSend2Game_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stServerParamSend2Game_ProtoModID_descriptor();
inline const ::std::string& stServerParamSend2Game_ProtoModID_Name(stServerParamSend2Game_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stServerParamSend2Game_ProtoModID_descriptor(), value);
}
inline bool stServerParamSend2Game_ProtoModID_Parse(
    const ::std::string& name, stServerParamSend2Game_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stServerParamSend2Game_ProtoModID>(
    stServerParamSend2Game_ProtoModID_descriptor(), name, value);
}
enum stServerParamSend2Game_ProtoFunID {
  stServerParamSend2Game_ProtoFunID_FunID = 193
};
bool stServerParamSend2Game_ProtoFunID_IsValid(int value);
const stServerParamSend2Game_ProtoFunID stServerParamSend2Game_ProtoFunID_ProtoFunID_MIN = stServerParamSend2Game_ProtoFunID_FunID;
const stServerParamSend2Game_ProtoFunID stServerParamSend2Game_ProtoFunID_ProtoFunID_MAX = stServerParamSend2Game_ProtoFunID_FunID;
const int stServerParamSend2Game_ProtoFunID_ProtoFunID_ARRAYSIZE = stServerParamSend2Game_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stServerParamSend2Game_ProtoFunID_descriptor();
inline const ::std::string& stServerParamSend2Game_ProtoFunID_Name(stServerParamSend2Game_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stServerParamSend2Game_ProtoFunID_descriptor(), value);
}
inline bool stServerParamSend2Game_ProtoFunID_Parse(
    const ::std::string& name, stServerParamSend2Game_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stServerParamSend2Game_ProtoFunID>(
    stServerParamSend2Game_ProtoFunID_descriptor(), name, value);
}
enum stSynUserPhotoID_ProtoModID {
  stSynUserPhotoID_ProtoModID_ModID = 3
};
bool stSynUserPhotoID_ProtoModID_IsValid(int value);
const stSynUserPhotoID_ProtoModID stSynUserPhotoID_ProtoModID_ProtoModID_MIN = stSynUserPhotoID_ProtoModID_ModID;
const stSynUserPhotoID_ProtoModID stSynUserPhotoID_ProtoModID_ProtoModID_MAX = stSynUserPhotoID_ProtoModID_ModID;
const int stSynUserPhotoID_ProtoModID_ProtoModID_ARRAYSIZE = stSynUserPhotoID_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynUserPhotoID_ProtoModID_descriptor();
inline const ::std::string& stSynUserPhotoID_ProtoModID_Name(stSynUserPhotoID_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynUserPhotoID_ProtoModID_descriptor(), value);
}
inline bool stSynUserPhotoID_ProtoModID_Parse(
    const ::std::string& name, stSynUserPhotoID_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynUserPhotoID_ProtoModID>(
    stSynUserPhotoID_ProtoModID_descriptor(), name, value);
}
enum stSynUserPhotoID_ProtoFunID {
  stSynUserPhotoID_ProtoFunID_FunID = 194
};
bool stSynUserPhotoID_ProtoFunID_IsValid(int value);
const stSynUserPhotoID_ProtoFunID stSynUserPhotoID_ProtoFunID_ProtoFunID_MIN = stSynUserPhotoID_ProtoFunID_FunID;
const stSynUserPhotoID_ProtoFunID stSynUserPhotoID_ProtoFunID_ProtoFunID_MAX = stSynUserPhotoID_ProtoFunID_FunID;
const int stSynUserPhotoID_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynUserPhotoID_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynUserPhotoID_ProtoFunID_descriptor();
inline const ::std::string& stSynUserPhotoID_ProtoFunID_Name(stSynUserPhotoID_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynUserPhotoID_ProtoFunID_descriptor(), value);
}
inline bool stSynUserPhotoID_ProtoFunID_Parse(
    const ::std::string& name, stSynUserPhotoID_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynUserPhotoID_ProtoFunID>(
    stSynUserPhotoID_ProtoFunID_descriptor(), name, value);
}
enum stUseLvlBox_ProtoModID {
  stUseLvlBox_ProtoModID_ModID = 3
};
bool stUseLvlBox_ProtoModID_IsValid(int value);
const stUseLvlBox_ProtoModID stUseLvlBox_ProtoModID_ProtoModID_MIN = stUseLvlBox_ProtoModID_ModID;
const stUseLvlBox_ProtoModID stUseLvlBox_ProtoModID_ProtoModID_MAX = stUseLvlBox_ProtoModID_ModID;
const int stUseLvlBox_ProtoModID_ProtoModID_ARRAYSIZE = stUseLvlBox_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseLvlBox_ProtoModID_descriptor();
inline const ::std::string& stUseLvlBox_ProtoModID_Name(stUseLvlBox_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseLvlBox_ProtoModID_descriptor(), value);
}
inline bool stUseLvlBox_ProtoModID_Parse(
    const ::std::string& name, stUseLvlBox_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseLvlBox_ProtoModID>(
    stUseLvlBox_ProtoModID_descriptor(), name, value);
}
enum stUseLvlBox_ProtoFunID {
  stUseLvlBox_ProtoFunID_FunID = 195
};
bool stUseLvlBox_ProtoFunID_IsValid(int value);
const stUseLvlBox_ProtoFunID stUseLvlBox_ProtoFunID_ProtoFunID_MIN = stUseLvlBox_ProtoFunID_FunID;
const stUseLvlBox_ProtoFunID stUseLvlBox_ProtoFunID_ProtoFunID_MAX = stUseLvlBox_ProtoFunID_FunID;
const int stUseLvlBox_ProtoFunID_ProtoFunID_ARRAYSIZE = stUseLvlBox_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseLvlBox_ProtoFunID_descriptor();
inline const ::std::string& stUseLvlBox_ProtoFunID_Name(stUseLvlBox_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseLvlBox_ProtoFunID_descriptor(), value);
}
inline bool stUseLvlBox_ProtoFunID_Parse(
    const ::std::string& name, stUseLvlBox_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseLvlBox_ProtoFunID>(
    stUseLvlBox_ProtoFunID_descriptor(), name, value);
}
enum stUseLvlBoxRes_ProtoModID {
  stUseLvlBoxRes_ProtoModID_ModID = 3
};
bool stUseLvlBoxRes_ProtoModID_IsValid(int value);
const stUseLvlBoxRes_ProtoModID stUseLvlBoxRes_ProtoModID_ProtoModID_MIN = stUseLvlBoxRes_ProtoModID_ModID;
const stUseLvlBoxRes_ProtoModID stUseLvlBoxRes_ProtoModID_ProtoModID_MAX = stUseLvlBoxRes_ProtoModID_ModID;
const int stUseLvlBoxRes_ProtoModID_ProtoModID_ARRAYSIZE = stUseLvlBoxRes_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseLvlBoxRes_ProtoModID_descriptor();
inline const ::std::string& stUseLvlBoxRes_ProtoModID_Name(stUseLvlBoxRes_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseLvlBoxRes_ProtoModID_descriptor(), value);
}
inline bool stUseLvlBoxRes_ProtoModID_Parse(
    const ::std::string& name, stUseLvlBoxRes_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseLvlBoxRes_ProtoModID>(
    stUseLvlBoxRes_ProtoModID_descriptor(), name, value);
}
enum stUseLvlBoxRes_ProtoFunID {
  stUseLvlBoxRes_ProtoFunID_FunID = 196
};
bool stUseLvlBoxRes_ProtoFunID_IsValid(int value);
const stUseLvlBoxRes_ProtoFunID stUseLvlBoxRes_ProtoFunID_ProtoFunID_MIN = stUseLvlBoxRes_ProtoFunID_FunID;
const stUseLvlBoxRes_ProtoFunID stUseLvlBoxRes_ProtoFunID_ProtoFunID_MAX = stUseLvlBoxRes_ProtoFunID_FunID;
const int stUseLvlBoxRes_ProtoFunID_ProtoFunID_ARRAYSIZE = stUseLvlBoxRes_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseLvlBoxRes_ProtoFunID_descriptor();
inline const ::std::string& stUseLvlBoxRes_ProtoFunID_Name(stUseLvlBoxRes_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseLvlBoxRes_ProtoFunID_descriptor(), value);
}
inline bool stUseLvlBoxRes_ProtoFunID_Parse(
    const ::std::string& name, stUseLvlBoxRes_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseLvlBoxRes_ProtoFunID>(
    stUseLvlBoxRes_ProtoFunID_descriptor(), name, value);
}
enum stRechangeStatistics_ProtoModID {
  stRechangeStatistics_ProtoModID_ModID = 3
};
bool stRechangeStatistics_ProtoModID_IsValid(int value);
const stRechangeStatistics_ProtoModID stRechangeStatistics_ProtoModID_ProtoModID_MIN = stRechangeStatistics_ProtoModID_ModID;
const stRechangeStatistics_ProtoModID stRechangeStatistics_ProtoModID_ProtoModID_MAX = stRechangeStatistics_ProtoModID_ModID;
const int stRechangeStatistics_ProtoModID_ProtoModID_ARRAYSIZE = stRechangeStatistics_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRechangeStatistics_ProtoModID_descriptor();
inline const ::std::string& stRechangeStatistics_ProtoModID_Name(stRechangeStatistics_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRechangeStatistics_ProtoModID_descriptor(), value);
}
inline bool stRechangeStatistics_ProtoModID_Parse(
    const ::std::string& name, stRechangeStatistics_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRechangeStatistics_ProtoModID>(
    stRechangeStatistics_ProtoModID_descriptor(), name, value);
}
enum stRechangeStatistics_ProtoFunID {
  stRechangeStatistics_ProtoFunID_FunID = 197
};
bool stRechangeStatistics_ProtoFunID_IsValid(int value);
const stRechangeStatistics_ProtoFunID stRechangeStatistics_ProtoFunID_ProtoFunID_MIN = stRechangeStatistics_ProtoFunID_FunID;
const stRechangeStatistics_ProtoFunID stRechangeStatistics_ProtoFunID_ProtoFunID_MAX = stRechangeStatistics_ProtoFunID_FunID;
const int stRechangeStatistics_ProtoFunID_ProtoFunID_ARRAYSIZE = stRechangeStatistics_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRechangeStatistics_ProtoFunID_descriptor();
inline const ::std::string& stRechangeStatistics_ProtoFunID_Name(stRechangeStatistics_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRechangeStatistics_ProtoFunID_descriptor(), value);
}
inline bool stRechangeStatistics_ProtoFunID_Parse(
    const ::std::string& name, stRechangeStatistics_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRechangeStatistics_ProtoFunID>(
    stRechangeStatistics_ProtoFunID_descriptor(), name, value);
}
enum stGlobal2GameQueryUserNft_ProtoModID {
  stGlobal2GameQueryUserNft_ProtoModID_ModID = 3
};
bool stGlobal2GameQueryUserNft_ProtoModID_IsValid(int value);
const stGlobal2GameQueryUserNft_ProtoModID stGlobal2GameQueryUserNft_ProtoModID_ProtoModID_MIN = stGlobal2GameQueryUserNft_ProtoModID_ModID;
const stGlobal2GameQueryUserNft_ProtoModID stGlobal2GameQueryUserNft_ProtoModID_ProtoModID_MAX = stGlobal2GameQueryUserNft_ProtoModID_ModID;
const int stGlobal2GameQueryUserNft_ProtoModID_ProtoModID_ARRAYSIZE = stGlobal2GameQueryUserNft_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGlobal2GameQueryUserNft_ProtoModID_descriptor();
inline const ::std::string& stGlobal2GameQueryUserNft_ProtoModID_Name(stGlobal2GameQueryUserNft_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGlobal2GameQueryUserNft_ProtoModID_descriptor(), value);
}
inline bool stGlobal2GameQueryUserNft_ProtoModID_Parse(
    const ::std::string& name, stGlobal2GameQueryUserNft_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGlobal2GameQueryUserNft_ProtoModID>(
    stGlobal2GameQueryUserNft_ProtoModID_descriptor(), name, value);
}
enum stGlobal2GameQueryUserNft_ProtoFunID {
  stGlobal2GameQueryUserNft_ProtoFunID_FunID = 198
};
bool stGlobal2GameQueryUserNft_ProtoFunID_IsValid(int value);
const stGlobal2GameQueryUserNft_ProtoFunID stGlobal2GameQueryUserNft_ProtoFunID_ProtoFunID_MIN = stGlobal2GameQueryUserNft_ProtoFunID_FunID;
const stGlobal2GameQueryUserNft_ProtoFunID stGlobal2GameQueryUserNft_ProtoFunID_ProtoFunID_MAX = stGlobal2GameQueryUserNft_ProtoFunID_FunID;
const int stGlobal2GameQueryUserNft_ProtoFunID_ProtoFunID_ARRAYSIZE = stGlobal2GameQueryUserNft_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGlobal2GameQueryUserNft_ProtoFunID_descriptor();
inline const ::std::string& stGlobal2GameQueryUserNft_ProtoFunID_Name(stGlobal2GameQueryUserNft_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGlobal2GameQueryUserNft_ProtoFunID_descriptor(), value);
}
inline bool stGlobal2GameQueryUserNft_ProtoFunID_Parse(
    const ::std::string& name, stGlobal2GameQueryUserNft_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGlobal2GameQueryUserNft_ProtoFunID>(
    stGlobal2GameQueryUserNft_ProtoFunID_descriptor(), name, value);
}
enum stGame2GlobalQueryUserNftResult_ProtoModID {
  stGame2GlobalQueryUserNftResult_ProtoModID_ModID = 3
};
bool stGame2GlobalQueryUserNftResult_ProtoModID_IsValid(int value);
const stGame2GlobalQueryUserNftResult_ProtoModID stGame2GlobalQueryUserNftResult_ProtoModID_ProtoModID_MIN = stGame2GlobalQueryUserNftResult_ProtoModID_ModID;
const stGame2GlobalQueryUserNftResult_ProtoModID stGame2GlobalQueryUserNftResult_ProtoModID_ProtoModID_MAX = stGame2GlobalQueryUserNftResult_ProtoModID_ModID;
const int stGame2GlobalQueryUserNftResult_ProtoModID_ProtoModID_ARRAYSIZE = stGame2GlobalQueryUserNftResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGame2GlobalQueryUserNftResult_ProtoModID_descriptor();
inline const ::std::string& stGame2GlobalQueryUserNftResult_ProtoModID_Name(stGame2GlobalQueryUserNftResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGame2GlobalQueryUserNftResult_ProtoModID_descriptor(), value);
}
inline bool stGame2GlobalQueryUserNftResult_ProtoModID_Parse(
    const ::std::string& name, stGame2GlobalQueryUserNftResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGame2GlobalQueryUserNftResult_ProtoModID>(
    stGame2GlobalQueryUserNftResult_ProtoModID_descriptor(), name, value);
}
enum stGame2GlobalQueryUserNftResult_ProtoFunID {
  stGame2GlobalQueryUserNftResult_ProtoFunID_FunID = 199
};
bool stGame2GlobalQueryUserNftResult_ProtoFunID_IsValid(int value);
const stGame2GlobalQueryUserNftResult_ProtoFunID stGame2GlobalQueryUserNftResult_ProtoFunID_ProtoFunID_MIN = stGame2GlobalQueryUserNftResult_ProtoFunID_FunID;
const stGame2GlobalQueryUserNftResult_ProtoFunID stGame2GlobalQueryUserNftResult_ProtoFunID_ProtoFunID_MAX = stGame2GlobalQueryUserNftResult_ProtoFunID_FunID;
const int stGame2GlobalQueryUserNftResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGame2GlobalQueryUserNftResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGame2GlobalQueryUserNftResult_ProtoFunID_descriptor();
inline const ::std::string& stGame2GlobalQueryUserNftResult_ProtoFunID_Name(stGame2GlobalQueryUserNftResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGame2GlobalQueryUserNftResult_ProtoFunID_descriptor(), value);
}
inline bool stGame2GlobalQueryUserNftResult_ProtoFunID_Parse(
    const ::std::string& name, stGame2GlobalQueryUserNftResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGame2GlobalQueryUserNftResult_ProtoFunID>(
    stGame2GlobalQueryUserNftResult_ProtoFunID_descriptor(), name, value);
}
enum stGlobal2GameChangeNftItem_ProtoModID {
  stGlobal2GameChangeNftItem_ProtoModID_ModID = 3
};
bool stGlobal2GameChangeNftItem_ProtoModID_IsValid(int value);
const stGlobal2GameChangeNftItem_ProtoModID stGlobal2GameChangeNftItem_ProtoModID_ProtoModID_MIN = stGlobal2GameChangeNftItem_ProtoModID_ModID;
const stGlobal2GameChangeNftItem_ProtoModID stGlobal2GameChangeNftItem_ProtoModID_ProtoModID_MAX = stGlobal2GameChangeNftItem_ProtoModID_ModID;
const int stGlobal2GameChangeNftItem_ProtoModID_ProtoModID_ARRAYSIZE = stGlobal2GameChangeNftItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGlobal2GameChangeNftItem_ProtoModID_descriptor();
inline const ::std::string& stGlobal2GameChangeNftItem_ProtoModID_Name(stGlobal2GameChangeNftItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGlobal2GameChangeNftItem_ProtoModID_descriptor(), value);
}
inline bool stGlobal2GameChangeNftItem_ProtoModID_Parse(
    const ::std::string& name, stGlobal2GameChangeNftItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGlobal2GameChangeNftItem_ProtoModID>(
    stGlobal2GameChangeNftItem_ProtoModID_descriptor(), name, value);
}
enum stGlobal2GameChangeNftItem_ProtoFunID {
  stGlobal2GameChangeNftItem_ProtoFunID_FunID = 200
};
bool stGlobal2GameChangeNftItem_ProtoFunID_IsValid(int value);
const stGlobal2GameChangeNftItem_ProtoFunID stGlobal2GameChangeNftItem_ProtoFunID_ProtoFunID_MIN = stGlobal2GameChangeNftItem_ProtoFunID_FunID;
const stGlobal2GameChangeNftItem_ProtoFunID stGlobal2GameChangeNftItem_ProtoFunID_ProtoFunID_MAX = stGlobal2GameChangeNftItem_ProtoFunID_FunID;
const int stGlobal2GameChangeNftItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stGlobal2GameChangeNftItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGlobal2GameChangeNftItem_ProtoFunID_descriptor();
inline const ::std::string& stGlobal2GameChangeNftItem_ProtoFunID_Name(stGlobal2GameChangeNftItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGlobal2GameChangeNftItem_ProtoFunID_descriptor(), value);
}
inline bool stGlobal2GameChangeNftItem_ProtoFunID_Parse(
    const ::std::string& name, stGlobal2GameChangeNftItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGlobal2GameChangeNftItem_ProtoFunID>(
    stGlobal2GameChangeNftItem_ProtoFunID_descriptor(), name, value);
}
enum stGame2GlobalChangeNftItemResult_ProtoModID {
  stGame2GlobalChangeNftItemResult_ProtoModID_ModID = 3
};
bool stGame2GlobalChangeNftItemResult_ProtoModID_IsValid(int value);
const stGame2GlobalChangeNftItemResult_ProtoModID stGame2GlobalChangeNftItemResult_ProtoModID_ProtoModID_MIN = stGame2GlobalChangeNftItemResult_ProtoModID_ModID;
const stGame2GlobalChangeNftItemResult_ProtoModID stGame2GlobalChangeNftItemResult_ProtoModID_ProtoModID_MAX = stGame2GlobalChangeNftItemResult_ProtoModID_ModID;
const int stGame2GlobalChangeNftItemResult_ProtoModID_ProtoModID_ARRAYSIZE = stGame2GlobalChangeNftItemResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGame2GlobalChangeNftItemResult_ProtoModID_descriptor();
inline const ::std::string& stGame2GlobalChangeNftItemResult_ProtoModID_Name(stGame2GlobalChangeNftItemResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGame2GlobalChangeNftItemResult_ProtoModID_descriptor(), value);
}
inline bool stGame2GlobalChangeNftItemResult_ProtoModID_Parse(
    const ::std::string& name, stGame2GlobalChangeNftItemResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGame2GlobalChangeNftItemResult_ProtoModID>(
    stGame2GlobalChangeNftItemResult_ProtoModID_descriptor(), name, value);
}
enum stGame2GlobalChangeNftItemResult_ProtoFunID {
  stGame2GlobalChangeNftItemResult_ProtoFunID_FunID = 201
};
bool stGame2GlobalChangeNftItemResult_ProtoFunID_IsValid(int value);
const stGame2GlobalChangeNftItemResult_ProtoFunID stGame2GlobalChangeNftItemResult_ProtoFunID_ProtoFunID_MIN = stGame2GlobalChangeNftItemResult_ProtoFunID_FunID;
const stGame2GlobalChangeNftItemResult_ProtoFunID stGame2GlobalChangeNftItemResult_ProtoFunID_ProtoFunID_MAX = stGame2GlobalChangeNftItemResult_ProtoFunID_FunID;
const int stGame2GlobalChangeNftItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGame2GlobalChangeNftItemResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGame2GlobalChangeNftItemResult_ProtoFunID_descriptor();
inline const ::std::string& stGame2GlobalChangeNftItemResult_ProtoFunID_Name(stGame2GlobalChangeNftItemResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGame2GlobalChangeNftItemResult_ProtoFunID_descriptor(), value);
}
inline bool stGame2GlobalChangeNftItemResult_ProtoFunID_Parse(
    const ::std::string& name, stGame2GlobalChangeNftItemResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGame2GlobalChangeNftItemResult_ProtoFunID>(
    stGame2GlobalChangeNftItemResult_ProtoFunID_descriptor(), name, value);
}
enum stGame2GlobalNftVipGift_ProtoModID {
  stGame2GlobalNftVipGift_ProtoModID_ModID = 3
};
bool stGame2GlobalNftVipGift_ProtoModID_IsValid(int value);
const stGame2GlobalNftVipGift_ProtoModID stGame2GlobalNftVipGift_ProtoModID_ProtoModID_MIN = stGame2GlobalNftVipGift_ProtoModID_ModID;
const stGame2GlobalNftVipGift_ProtoModID stGame2GlobalNftVipGift_ProtoModID_ProtoModID_MAX = stGame2GlobalNftVipGift_ProtoModID_ModID;
const int stGame2GlobalNftVipGift_ProtoModID_ProtoModID_ARRAYSIZE = stGame2GlobalNftVipGift_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGame2GlobalNftVipGift_ProtoModID_descriptor();
inline const ::std::string& stGame2GlobalNftVipGift_ProtoModID_Name(stGame2GlobalNftVipGift_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGame2GlobalNftVipGift_ProtoModID_descriptor(), value);
}
inline bool stGame2GlobalNftVipGift_ProtoModID_Parse(
    const ::std::string& name, stGame2GlobalNftVipGift_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGame2GlobalNftVipGift_ProtoModID>(
    stGame2GlobalNftVipGift_ProtoModID_descriptor(), name, value);
}
enum stGame2GlobalNftVipGift_ProtoFunID {
  stGame2GlobalNftVipGift_ProtoFunID_FunID = 202
};
bool stGame2GlobalNftVipGift_ProtoFunID_IsValid(int value);
const stGame2GlobalNftVipGift_ProtoFunID stGame2GlobalNftVipGift_ProtoFunID_ProtoFunID_MIN = stGame2GlobalNftVipGift_ProtoFunID_FunID;
const stGame2GlobalNftVipGift_ProtoFunID stGame2GlobalNftVipGift_ProtoFunID_ProtoFunID_MAX = stGame2GlobalNftVipGift_ProtoFunID_FunID;
const int stGame2GlobalNftVipGift_ProtoFunID_ProtoFunID_ARRAYSIZE = stGame2GlobalNftVipGift_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGame2GlobalNftVipGift_ProtoFunID_descriptor();
inline const ::std::string& stGame2GlobalNftVipGift_ProtoFunID_Name(stGame2GlobalNftVipGift_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGame2GlobalNftVipGift_ProtoFunID_descriptor(), value);
}
inline bool stGame2GlobalNftVipGift_ProtoFunID_Parse(
    const ::std::string& name, stGame2GlobalNftVipGift_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGame2GlobalNftVipGift_ProtoFunID>(
    stGame2GlobalNftVipGift_ProtoFunID_descriptor(), name, value);
}
enum stRetNftOfflineUserData_ProtoModID {
  stRetNftOfflineUserData_ProtoModID_ModID = 3
};
bool stRetNftOfflineUserData_ProtoModID_IsValid(int value);
const stRetNftOfflineUserData_ProtoModID stRetNftOfflineUserData_ProtoModID_ProtoModID_MIN = stRetNftOfflineUserData_ProtoModID_ModID;
const stRetNftOfflineUserData_ProtoModID stRetNftOfflineUserData_ProtoModID_ProtoModID_MAX = stRetNftOfflineUserData_ProtoModID_ModID;
const int stRetNftOfflineUserData_ProtoModID_ProtoModID_ARRAYSIZE = stRetNftOfflineUserData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetNftOfflineUserData_ProtoModID_descriptor();
inline const ::std::string& stRetNftOfflineUserData_ProtoModID_Name(stRetNftOfflineUserData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetNftOfflineUserData_ProtoModID_descriptor(), value);
}
inline bool stRetNftOfflineUserData_ProtoModID_Parse(
    const ::std::string& name, stRetNftOfflineUserData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetNftOfflineUserData_ProtoModID>(
    stRetNftOfflineUserData_ProtoModID_descriptor(), name, value);
}
enum stRetNftOfflineUserData_ProtoFunID {
  stRetNftOfflineUserData_ProtoFunID_FunID = 203
};
bool stRetNftOfflineUserData_ProtoFunID_IsValid(int value);
const stRetNftOfflineUserData_ProtoFunID stRetNftOfflineUserData_ProtoFunID_ProtoFunID_MIN = stRetNftOfflineUserData_ProtoFunID_FunID;
const stRetNftOfflineUserData_ProtoFunID stRetNftOfflineUserData_ProtoFunID_ProtoFunID_MAX = stRetNftOfflineUserData_ProtoFunID_FunID;
const int stRetNftOfflineUserData_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetNftOfflineUserData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetNftOfflineUserData_ProtoFunID_descriptor();
inline const ::std::string& stRetNftOfflineUserData_ProtoFunID_Name(stRetNftOfflineUserData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetNftOfflineUserData_ProtoFunID_descriptor(), value);
}
inline bool stRetNftOfflineUserData_ProtoFunID_Parse(
    const ::std::string& name, stRetNftOfflineUserData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetNftOfflineUserData_ProtoFunID>(
    stRetNftOfflineUserData_ProtoFunID_descriptor(), name, value);
}
enum stRetChangeNftOfflineUserData_ProtoModID {
  stRetChangeNftOfflineUserData_ProtoModID_ModID = 3
};
bool stRetChangeNftOfflineUserData_ProtoModID_IsValid(int value);
const stRetChangeNftOfflineUserData_ProtoModID stRetChangeNftOfflineUserData_ProtoModID_ProtoModID_MIN = stRetChangeNftOfflineUserData_ProtoModID_ModID;
const stRetChangeNftOfflineUserData_ProtoModID stRetChangeNftOfflineUserData_ProtoModID_ProtoModID_MAX = stRetChangeNftOfflineUserData_ProtoModID_ModID;
const int stRetChangeNftOfflineUserData_ProtoModID_ProtoModID_ARRAYSIZE = stRetChangeNftOfflineUserData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetChangeNftOfflineUserData_ProtoModID_descriptor();
inline const ::std::string& stRetChangeNftOfflineUserData_ProtoModID_Name(stRetChangeNftOfflineUserData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetChangeNftOfflineUserData_ProtoModID_descriptor(), value);
}
inline bool stRetChangeNftOfflineUserData_ProtoModID_Parse(
    const ::std::string& name, stRetChangeNftOfflineUserData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetChangeNftOfflineUserData_ProtoModID>(
    stRetChangeNftOfflineUserData_ProtoModID_descriptor(), name, value);
}
enum stRetChangeNftOfflineUserData_ProtoFunID {
  stRetChangeNftOfflineUserData_ProtoFunID_FunID = 204
};
bool stRetChangeNftOfflineUserData_ProtoFunID_IsValid(int value);
const stRetChangeNftOfflineUserData_ProtoFunID stRetChangeNftOfflineUserData_ProtoFunID_ProtoFunID_MIN = stRetChangeNftOfflineUserData_ProtoFunID_FunID;
const stRetChangeNftOfflineUserData_ProtoFunID stRetChangeNftOfflineUserData_ProtoFunID_ProtoFunID_MAX = stRetChangeNftOfflineUserData_ProtoFunID_FunID;
const int stRetChangeNftOfflineUserData_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetChangeNftOfflineUserData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetChangeNftOfflineUserData_ProtoFunID_descriptor();
inline const ::std::string& stRetChangeNftOfflineUserData_ProtoFunID_Name(stRetChangeNftOfflineUserData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetChangeNftOfflineUserData_ProtoFunID_descriptor(), value);
}
inline bool stRetChangeNftOfflineUserData_ProtoFunID_Parse(
    const ::std::string& name, stRetChangeNftOfflineUserData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetChangeNftOfflineUserData_ProtoFunID>(
    stRetChangeNftOfflineUserData_ProtoFunID_descriptor(), name, value);
}
enum stSendUserLog_ProtoModID {
  stSendUserLog_ProtoModID_ModID = 6
};
bool stSendUserLog_ProtoModID_IsValid(int value);
const stSendUserLog_ProtoModID stSendUserLog_ProtoModID_ProtoModID_MIN = stSendUserLog_ProtoModID_ModID;
const stSendUserLog_ProtoModID stSendUserLog_ProtoModID_ProtoModID_MAX = stSendUserLog_ProtoModID_ModID;
const int stSendUserLog_ProtoModID_ProtoModID_ARRAYSIZE = stSendUserLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendUserLog_ProtoModID_descriptor();
inline const ::std::string& stSendUserLog_ProtoModID_Name(stSendUserLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendUserLog_ProtoModID_descriptor(), value);
}
inline bool stSendUserLog_ProtoModID_Parse(
    const ::std::string& name, stSendUserLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendUserLog_ProtoModID>(
    stSendUserLog_ProtoModID_descriptor(), name, value);
}
enum stSendUserLog_ProtoFunID {
  stSendUserLog_ProtoFunID_FunID = 1
};
bool stSendUserLog_ProtoFunID_IsValid(int value);
const stSendUserLog_ProtoFunID stSendUserLog_ProtoFunID_ProtoFunID_MIN = stSendUserLog_ProtoFunID_FunID;
const stSendUserLog_ProtoFunID stSendUserLog_ProtoFunID_ProtoFunID_MAX = stSendUserLog_ProtoFunID_FunID;
const int stSendUserLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendUserLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendUserLog_ProtoFunID_descriptor();
inline const ::std::string& stSendUserLog_ProtoFunID_Name(stSendUserLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendUserLog_ProtoFunID_descriptor(), value);
}
inline bool stSendUserLog_ProtoFunID_Parse(
    const ::std::string& name, stSendUserLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendUserLog_ProtoFunID>(
    stSendUserLog_ProtoFunID_descriptor(), name, value);
}
enum stReqKillUserOut_ProtoModID {
  stReqKillUserOut_ProtoModID_ModID = 6
};
bool stReqKillUserOut_ProtoModID_IsValid(int value);
const stReqKillUserOut_ProtoModID stReqKillUserOut_ProtoModID_ProtoModID_MIN = stReqKillUserOut_ProtoModID_ModID;
const stReqKillUserOut_ProtoModID stReqKillUserOut_ProtoModID_ProtoModID_MAX = stReqKillUserOut_ProtoModID_ModID;
const int stReqKillUserOut_ProtoModID_ProtoModID_ARRAYSIZE = stReqKillUserOut_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqKillUserOut_ProtoModID_descriptor();
inline const ::std::string& stReqKillUserOut_ProtoModID_Name(stReqKillUserOut_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqKillUserOut_ProtoModID_descriptor(), value);
}
inline bool stReqKillUserOut_ProtoModID_Parse(
    const ::std::string& name, stReqKillUserOut_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqKillUserOut_ProtoModID>(
    stReqKillUserOut_ProtoModID_descriptor(), name, value);
}
enum stReqKillUserOut_ProtoFunID {
  stReqKillUserOut_ProtoFunID_FunID = 2
};
bool stReqKillUserOut_ProtoFunID_IsValid(int value);
const stReqKillUserOut_ProtoFunID stReqKillUserOut_ProtoFunID_ProtoFunID_MIN = stReqKillUserOut_ProtoFunID_FunID;
const stReqKillUserOut_ProtoFunID stReqKillUserOut_ProtoFunID_ProtoFunID_MAX = stReqKillUserOut_ProtoFunID_FunID;
const int stReqKillUserOut_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqKillUserOut_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqKillUserOut_ProtoFunID_descriptor();
inline const ::std::string& stReqKillUserOut_ProtoFunID_Name(stReqKillUserOut_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqKillUserOut_ProtoFunID_descriptor(), value);
}
inline bool stReqKillUserOut_ProtoFunID_Parse(
    const ::std::string& name, stReqKillUserOut_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqKillUserOut_ProtoFunID>(
    stReqKillUserOut_ProtoFunID_descriptor(), name, value);
}
enum stKillUserOutResult_ProtoModID {
  stKillUserOutResult_ProtoModID_ModID = 6
};
bool stKillUserOutResult_ProtoModID_IsValid(int value);
const stKillUserOutResult_ProtoModID stKillUserOutResult_ProtoModID_ProtoModID_MIN = stKillUserOutResult_ProtoModID_ModID;
const stKillUserOutResult_ProtoModID stKillUserOutResult_ProtoModID_ProtoModID_MAX = stKillUserOutResult_ProtoModID_ModID;
const int stKillUserOutResult_ProtoModID_ProtoModID_ARRAYSIZE = stKillUserOutResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillUserOutResult_ProtoModID_descriptor();
inline const ::std::string& stKillUserOutResult_ProtoModID_Name(stKillUserOutResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillUserOutResult_ProtoModID_descriptor(), value);
}
inline bool stKillUserOutResult_ProtoModID_Parse(
    const ::std::string& name, stKillUserOutResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillUserOutResult_ProtoModID>(
    stKillUserOutResult_ProtoModID_descriptor(), name, value);
}
enum stKillUserOutResult_ProtoFunID {
  stKillUserOutResult_ProtoFunID_FunID = 3
};
bool stKillUserOutResult_ProtoFunID_IsValid(int value);
const stKillUserOutResult_ProtoFunID stKillUserOutResult_ProtoFunID_ProtoFunID_MIN = stKillUserOutResult_ProtoFunID_FunID;
const stKillUserOutResult_ProtoFunID stKillUserOutResult_ProtoFunID_ProtoFunID_MAX = stKillUserOutResult_ProtoFunID_FunID;
const int stKillUserOutResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stKillUserOutResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillUserOutResult_ProtoFunID_descriptor();
inline const ::std::string& stKillUserOutResult_ProtoFunID_Name(stKillUserOutResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillUserOutResult_ProtoFunID_descriptor(), value);
}
inline bool stKillUserOutResult_ProtoFunID_Parse(
    const ::std::string& name, stKillUserOutResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillUserOutResult_ProtoFunID>(
    stKillUserOutResult_ProtoFunID_descriptor(), name, value);
}
enum stReqSetUserGMType_ProtoModID {
  stReqSetUserGMType_ProtoModID_ModID = 6
};
bool stReqSetUserGMType_ProtoModID_IsValid(int value);
const stReqSetUserGMType_ProtoModID stReqSetUserGMType_ProtoModID_ProtoModID_MIN = stReqSetUserGMType_ProtoModID_ModID;
const stReqSetUserGMType_ProtoModID stReqSetUserGMType_ProtoModID_ProtoModID_MAX = stReqSetUserGMType_ProtoModID_ModID;
const int stReqSetUserGMType_ProtoModID_ProtoModID_ARRAYSIZE = stReqSetUserGMType_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSetUserGMType_ProtoModID_descriptor();
inline const ::std::string& stReqSetUserGMType_ProtoModID_Name(stReqSetUserGMType_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSetUserGMType_ProtoModID_descriptor(), value);
}
inline bool stReqSetUserGMType_ProtoModID_Parse(
    const ::std::string& name, stReqSetUserGMType_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSetUserGMType_ProtoModID>(
    stReqSetUserGMType_ProtoModID_descriptor(), name, value);
}
enum stReqSetUserGMType_ProtoFunID {
  stReqSetUserGMType_ProtoFunID_FunID = 4
};
bool stReqSetUserGMType_ProtoFunID_IsValid(int value);
const stReqSetUserGMType_ProtoFunID stReqSetUserGMType_ProtoFunID_ProtoFunID_MIN = stReqSetUserGMType_ProtoFunID_FunID;
const stReqSetUserGMType_ProtoFunID stReqSetUserGMType_ProtoFunID_ProtoFunID_MAX = stReqSetUserGMType_ProtoFunID_FunID;
const int stReqSetUserGMType_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSetUserGMType_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSetUserGMType_ProtoFunID_descriptor();
inline const ::std::string& stReqSetUserGMType_ProtoFunID_Name(stReqSetUserGMType_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSetUserGMType_ProtoFunID_descriptor(), value);
}
inline bool stReqSetUserGMType_ProtoFunID_Parse(
    const ::std::string& name, stReqSetUserGMType_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSetUserGMType_ProtoFunID>(
    stReqSetUserGMType_ProtoFunID_descriptor(), name, value);
}
enum stSetUserGMTypeResult_ProtoModID {
  stSetUserGMTypeResult_ProtoModID_ModID = 6
};
bool stSetUserGMTypeResult_ProtoModID_IsValid(int value);
const stSetUserGMTypeResult_ProtoModID stSetUserGMTypeResult_ProtoModID_ProtoModID_MIN = stSetUserGMTypeResult_ProtoModID_ModID;
const stSetUserGMTypeResult_ProtoModID stSetUserGMTypeResult_ProtoModID_ProtoModID_MAX = stSetUserGMTypeResult_ProtoModID_ModID;
const int stSetUserGMTypeResult_ProtoModID_ProtoModID_ARRAYSIZE = stSetUserGMTypeResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSetUserGMTypeResult_ProtoModID_descriptor();
inline const ::std::string& stSetUserGMTypeResult_ProtoModID_Name(stSetUserGMTypeResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSetUserGMTypeResult_ProtoModID_descriptor(), value);
}
inline bool stSetUserGMTypeResult_ProtoModID_Parse(
    const ::std::string& name, stSetUserGMTypeResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSetUserGMTypeResult_ProtoModID>(
    stSetUserGMTypeResult_ProtoModID_descriptor(), name, value);
}
enum stSetUserGMTypeResult_ProtoFunID {
  stSetUserGMTypeResult_ProtoFunID_FunID = 5
};
bool stSetUserGMTypeResult_ProtoFunID_IsValid(int value);
const stSetUserGMTypeResult_ProtoFunID stSetUserGMTypeResult_ProtoFunID_ProtoFunID_MIN = stSetUserGMTypeResult_ProtoFunID_FunID;
const stSetUserGMTypeResult_ProtoFunID stSetUserGMTypeResult_ProtoFunID_ProtoFunID_MAX = stSetUserGMTypeResult_ProtoFunID_FunID;
const int stSetUserGMTypeResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSetUserGMTypeResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSetUserGMTypeResult_ProtoFunID_descriptor();
inline const ::std::string& stSetUserGMTypeResult_ProtoFunID_Name(stSetUserGMTypeResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSetUserGMTypeResult_ProtoFunID_descriptor(), value);
}
inline bool stSetUserGMTypeResult_ProtoFunID_Parse(
    const ::std::string& name, stSetUserGMTypeResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSetUserGMTypeResult_ProtoFunID>(
    stSetUserGMTypeResult_ProtoFunID_descriptor(), name, value);
}
enum stReqBanUser_ProtoModID {
  stReqBanUser_ProtoModID_ModID = 6
};
bool stReqBanUser_ProtoModID_IsValid(int value);
const stReqBanUser_ProtoModID stReqBanUser_ProtoModID_ProtoModID_MIN = stReqBanUser_ProtoModID_ModID;
const stReqBanUser_ProtoModID stReqBanUser_ProtoModID_ProtoModID_MAX = stReqBanUser_ProtoModID_ModID;
const int stReqBanUser_ProtoModID_ProtoModID_ARRAYSIZE = stReqBanUser_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBanUser_ProtoModID_descriptor();
inline const ::std::string& stReqBanUser_ProtoModID_Name(stReqBanUser_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBanUser_ProtoModID_descriptor(), value);
}
inline bool stReqBanUser_ProtoModID_Parse(
    const ::std::string& name, stReqBanUser_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBanUser_ProtoModID>(
    stReqBanUser_ProtoModID_descriptor(), name, value);
}
enum stReqBanUser_ProtoFunID {
  stReqBanUser_ProtoFunID_FunID = 6
};
bool stReqBanUser_ProtoFunID_IsValid(int value);
const stReqBanUser_ProtoFunID stReqBanUser_ProtoFunID_ProtoFunID_MIN = stReqBanUser_ProtoFunID_FunID;
const stReqBanUser_ProtoFunID stReqBanUser_ProtoFunID_ProtoFunID_MAX = stReqBanUser_ProtoFunID_FunID;
const int stReqBanUser_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBanUser_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBanUser_ProtoFunID_descriptor();
inline const ::std::string& stReqBanUser_ProtoFunID_Name(stReqBanUser_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBanUser_ProtoFunID_descriptor(), value);
}
inline bool stReqBanUser_ProtoFunID_Parse(
    const ::std::string& name, stReqBanUser_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBanUser_ProtoFunID>(
    stReqBanUser_ProtoFunID_descriptor(), name, value);
}
enum stBanUserResult_ProtoModID {
  stBanUserResult_ProtoModID_ModID = 6
};
bool stBanUserResult_ProtoModID_IsValid(int value);
const stBanUserResult_ProtoModID stBanUserResult_ProtoModID_ProtoModID_MIN = stBanUserResult_ProtoModID_ModID;
const stBanUserResult_ProtoModID stBanUserResult_ProtoModID_ProtoModID_MAX = stBanUserResult_ProtoModID_ModID;
const int stBanUserResult_ProtoModID_ProtoModID_ARRAYSIZE = stBanUserResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBanUserResult_ProtoModID_descriptor();
inline const ::std::string& stBanUserResult_ProtoModID_Name(stBanUserResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBanUserResult_ProtoModID_descriptor(), value);
}
inline bool stBanUserResult_ProtoModID_Parse(
    const ::std::string& name, stBanUserResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBanUserResult_ProtoModID>(
    stBanUserResult_ProtoModID_descriptor(), name, value);
}
enum stBanUserResult_ProtoFunID {
  stBanUserResult_ProtoFunID_FunID = 7
};
bool stBanUserResult_ProtoFunID_IsValid(int value);
const stBanUserResult_ProtoFunID stBanUserResult_ProtoFunID_ProtoFunID_MIN = stBanUserResult_ProtoFunID_FunID;
const stBanUserResult_ProtoFunID stBanUserResult_ProtoFunID_ProtoFunID_MAX = stBanUserResult_ProtoFunID_FunID;
const int stBanUserResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stBanUserResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBanUserResult_ProtoFunID_descriptor();
inline const ::std::string& stBanUserResult_ProtoFunID_Name(stBanUserResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBanUserResult_ProtoFunID_descriptor(), value);
}
inline bool stBanUserResult_ProtoFunID_Parse(
    const ::std::string& name, stBanUserResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBanUserResult_ProtoFunID>(
    stBanUserResult_ProtoFunID_descriptor(), name, value);
}
enum stSendMail2User_ProtoModID {
  stSendMail2User_ProtoModID_ModID = 6
};
bool stSendMail2User_ProtoModID_IsValid(int value);
const stSendMail2User_ProtoModID stSendMail2User_ProtoModID_ProtoModID_MIN = stSendMail2User_ProtoModID_ModID;
const stSendMail2User_ProtoModID stSendMail2User_ProtoModID_ProtoModID_MAX = stSendMail2User_ProtoModID_ModID;
const int stSendMail2User_ProtoModID_ProtoModID_ARRAYSIZE = stSendMail2User_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendMail2User_ProtoModID_descriptor();
inline const ::std::string& stSendMail2User_ProtoModID_Name(stSendMail2User_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendMail2User_ProtoModID_descriptor(), value);
}
inline bool stSendMail2User_ProtoModID_Parse(
    const ::std::string& name, stSendMail2User_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendMail2User_ProtoModID>(
    stSendMail2User_ProtoModID_descriptor(), name, value);
}
enum stSendMail2User_ProtoFunID {
  stSendMail2User_ProtoFunID_FunID = 8
};
bool stSendMail2User_ProtoFunID_IsValid(int value);
const stSendMail2User_ProtoFunID stSendMail2User_ProtoFunID_ProtoFunID_MIN = stSendMail2User_ProtoFunID_FunID;
const stSendMail2User_ProtoFunID stSendMail2User_ProtoFunID_ProtoFunID_MAX = stSendMail2User_ProtoFunID_FunID;
const int stSendMail2User_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendMail2User_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendMail2User_ProtoFunID_descriptor();
inline const ::std::string& stSendMail2User_ProtoFunID_Name(stSendMail2User_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendMail2User_ProtoFunID_descriptor(), value);
}
inline bool stSendMail2User_ProtoFunID_Parse(
    const ::std::string& name, stSendMail2User_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendMail2User_ProtoFunID>(
    stSendMail2User_ProtoFunID_descriptor(), name, value);
}
enum stSendMail2UserResult_ProtoModID {
  stSendMail2UserResult_ProtoModID_ModID = 6
};
bool stSendMail2UserResult_ProtoModID_IsValid(int value);
const stSendMail2UserResult_ProtoModID stSendMail2UserResult_ProtoModID_ProtoModID_MIN = stSendMail2UserResult_ProtoModID_ModID;
const stSendMail2UserResult_ProtoModID stSendMail2UserResult_ProtoModID_ProtoModID_MAX = stSendMail2UserResult_ProtoModID_ModID;
const int stSendMail2UserResult_ProtoModID_ProtoModID_ARRAYSIZE = stSendMail2UserResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendMail2UserResult_ProtoModID_descriptor();
inline const ::std::string& stSendMail2UserResult_ProtoModID_Name(stSendMail2UserResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendMail2UserResult_ProtoModID_descriptor(), value);
}
inline bool stSendMail2UserResult_ProtoModID_Parse(
    const ::std::string& name, stSendMail2UserResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendMail2UserResult_ProtoModID>(
    stSendMail2UserResult_ProtoModID_descriptor(), name, value);
}
enum stSendMail2UserResult_ProtoFunID {
  stSendMail2UserResult_ProtoFunID_FunID = 9
};
bool stSendMail2UserResult_ProtoFunID_IsValid(int value);
const stSendMail2UserResult_ProtoFunID stSendMail2UserResult_ProtoFunID_ProtoFunID_MIN = stSendMail2UserResult_ProtoFunID_FunID;
const stSendMail2UserResult_ProtoFunID stSendMail2UserResult_ProtoFunID_ProtoFunID_MAX = stSendMail2UserResult_ProtoFunID_FunID;
const int stSendMail2UserResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendMail2UserResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendMail2UserResult_ProtoFunID_descriptor();
inline const ::std::string& stSendMail2UserResult_ProtoFunID_Name(stSendMail2UserResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendMail2UserResult_ProtoFunID_descriptor(), value);
}
inline bool stSendMail2UserResult_ProtoFunID_Parse(
    const ::std::string& name, stSendMail2UserResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendMail2UserResult_ProtoFunID>(
    stSendMail2UserResult_ProtoFunID_descriptor(), name, value);
}
enum stWebMotifyUserInfo_ProtoModID {
  stWebMotifyUserInfo_ProtoModID_ModID = 6
};
bool stWebMotifyUserInfo_ProtoModID_IsValid(int value);
const stWebMotifyUserInfo_ProtoModID stWebMotifyUserInfo_ProtoModID_ProtoModID_MIN = stWebMotifyUserInfo_ProtoModID_ModID;
const stWebMotifyUserInfo_ProtoModID stWebMotifyUserInfo_ProtoModID_ProtoModID_MAX = stWebMotifyUserInfo_ProtoModID_ModID;
const int stWebMotifyUserInfo_ProtoModID_ProtoModID_ARRAYSIZE = stWebMotifyUserInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWebMotifyUserInfo_ProtoModID_descriptor();
inline const ::std::string& stWebMotifyUserInfo_ProtoModID_Name(stWebMotifyUserInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWebMotifyUserInfo_ProtoModID_descriptor(), value);
}
inline bool stWebMotifyUserInfo_ProtoModID_Parse(
    const ::std::string& name, stWebMotifyUserInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWebMotifyUserInfo_ProtoModID>(
    stWebMotifyUserInfo_ProtoModID_descriptor(), name, value);
}
enum stWebMotifyUserInfo_ProtoFunID {
  stWebMotifyUserInfo_ProtoFunID_FunID = 10
};
bool stWebMotifyUserInfo_ProtoFunID_IsValid(int value);
const stWebMotifyUserInfo_ProtoFunID stWebMotifyUserInfo_ProtoFunID_ProtoFunID_MIN = stWebMotifyUserInfo_ProtoFunID_FunID;
const stWebMotifyUserInfo_ProtoFunID stWebMotifyUserInfo_ProtoFunID_ProtoFunID_MAX = stWebMotifyUserInfo_ProtoFunID_FunID;
const int stWebMotifyUserInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stWebMotifyUserInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWebMotifyUserInfo_ProtoFunID_descriptor();
inline const ::std::string& stWebMotifyUserInfo_ProtoFunID_Name(stWebMotifyUserInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWebMotifyUserInfo_ProtoFunID_descriptor(), value);
}
inline bool stWebMotifyUserInfo_ProtoFunID_Parse(
    const ::std::string& name, stWebMotifyUserInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWebMotifyUserInfo_ProtoFunID>(
    stWebMotifyUserInfo_ProtoFunID_descriptor(), name, value);
}
enum stWebMotifyUserInfoRet_ProtoModID {
  stWebMotifyUserInfoRet_ProtoModID_ModID = 6
};
bool stWebMotifyUserInfoRet_ProtoModID_IsValid(int value);
const stWebMotifyUserInfoRet_ProtoModID stWebMotifyUserInfoRet_ProtoModID_ProtoModID_MIN = stWebMotifyUserInfoRet_ProtoModID_ModID;
const stWebMotifyUserInfoRet_ProtoModID stWebMotifyUserInfoRet_ProtoModID_ProtoModID_MAX = stWebMotifyUserInfoRet_ProtoModID_ModID;
const int stWebMotifyUserInfoRet_ProtoModID_ProtoModID_ARRAYSIZE = stWebMotifyUserInfoRet_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWebMotifyUserInfoRet_ProtoModID_descriptor();
inline const ::std::string& stWebMotifyUserInfoRet_ProtoModID_Name(stWebMotifyUserInfoRet_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWebMotifyUserInfoRet_ProtoModID_descriptor(), value);
}
inline bool stWebMotifyUserInfoRet_ProtoModID_Parse(
    const ::std::string& name, stWebMotifyUserInfoRet_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWebMotifyUserInfoRet_ProtoModID>(
    stWebMotifyUserInfoRet_ProtoModID_descriptor(), name, value);
}
enum stWebMotifyUserInfoRet_ProtoFunID {
  stWebMotifyUserInfoRet_ProtoFunID_FunID = 10
};
bool stWebMotifyUserInfoRet_ProtoFunID_IsValid(int value);
const stWebMotifyUserInfoRet_ProtoFunID stWebMotifyUserInfoRet_ProtoFunID_ProtoFunID_MIN = stWebMotifyUserInfoRet_ProtoFunID_FunID;
const stWebMotifyUserInfoRet_ProtoFunID stWebMotifyUserInfoRet_ProtoFunID_ProtoFunID_MAX = stWebMotifyUserInfoRet_ProtoFunID_FunID;
const int stWebMotifyUserInfoRet_ProtoFunID_ProtoFunID_ARRAYSIZE = stWebMotifyUserInfoRet_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWebMotifyUserInfoRet_ProtoFunID_descriptor();
inline const ::std::string& stWebMotifyUserInfoRet_ProtoFunID_Name(stWebMotifyUserInfoRet_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWebMotifyUserInfoRet_ProtoFunID_descriptor(), value);
}
inline bool stWebMotifyUserInfoRet_ProtoFunID_Parse(
    const ::std::string& name, stWebMotifyUserInfoRet_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWebMotifyUserInfoRet_ProtoFunID>(
    stWebMotifyUserInfoRet_ProtoFunID_descriptor(), name, value);
}
enum stAddOrUpdateNotice_ProtoModID {
  stAddOrUpdateNotice_ProtoModID_ModID = 6
};
bool stAddOrUpdateNotice_ProtoModID_IsValid(int value);
const stAddOrUpdateNotice_ProtoModID stAddOrUpdateNotice_ProtoModID_ProtoModID_MIN = stAddOrUpdateNotice_ProtoModID_ModID;
const stAddOrUpdateNotice_ProtoModID stAddOrUpdateNotice_ProtoModID_ProtoModID_MAX = stAddOrUpdateNotice_ProtoModID_ModID;
const int stAddOrUpdateNotice_ProtoModID_ProtoModID_ARRAYSIZE = stAddOrUpdateNotice_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddOrUpdateNotice_ProtoModID_descriptor();
inline const ::std::string& stAddOrUpdateNotice_ProtoModID_Name(stAddOrUpdateNotice_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddOrUpdateNotice_ProtoModID_descriptor(), value);
}
inline bool stAddOrUpdateNotice_ProtoModID_Parse(
    const ::std::string& name, stAddOrUpdateNotice_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddOrUpdateNotice_ProtoModID>(
    stAddOrUpdateNotice_ProtoModID_descriptor(), name, value);
}
enum stAddOrUpdateNotice_ProtoFunID {
  stAddOrUpdateNotice_ProtoFunID_FunID = 11
};
bool stAddOrUpdateNotice_ProtoFunID_IsValid(int value);
const stAddOrUpdateNotice_ProtoFunID stAddOrUpdateNotice_ProtoFunID_ProtoFunID_MIN = stAddOrUpdateNotice_ProtoFunID_FunID;
const stAddOrUpdateNotice_ProtoFunID stAddOrUpdateNotice_ProtoFunID_ProtoFunID_MAX = stAddOrUpdateNotice_ProtoFunID_FunID;
const int stAddOrUpdateNotice_ProtoFunID_ProtoFunID_ARRAYSIZE = stAddOrUpdateNotice_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddOrUpdateNotice_ProtoFunID_descriptor();
inline const ::std::string& stAddOrUpdateNotice_ProtoFunID_Name(stAddOrUpdateNotice_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddOrUpdateNotice_ProtoFunID_descriptor(), value);
}
inline bool stAddOrUpdateNotice_ProtoFunID_Parse(
    const ::std::string& name, stAddOrUpdateNotice_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddOrUpdateNotice_ProtoFunID>(
    stAddOrUpdateNotice_ProtoFunID_descriptor(), name, value);
}
enum stDelNotice_ProtoModID {
  stDelNotice_ProtoModID_ModID = 6
};
bool stDelNotice_ProtoModID_IsValid(int value);
const stDelNotice_ProtoModID stDelNotice_ProtoModID_ProtoModID_MIN = stDelNotice_ProtoModID_ModID;
const stDelNotice_ProtoModID stDelNotice_ProtoModID_ProtoModID_MAX = stDelNotice_ProtoModID_ModID;
const int stDelNotice_ProtoModID_ProtoModID_ARRAYSIZE = stDelNotice_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDelNotice_ProtoModID_descriptor();
inline const ::std::string& stDelNotice_ProtoModID_Name(stDelNotice_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDelNotice_ProtoModID_descriptor(), value);
}
inline bool stDelNotice_ProtoModID_Parse(
    const ::std::string& name, stDelNotice_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDelNotice_ProtoModID>(
    stDelNotice_ProtoModID_descriptor(), name, value);
}
enum stDelNotice_ProtoFunID {
  stDelNotice_ProtoFunID_FunID = 12
};
bool stDelNotice_ProtoFunID_IsValid(int value);
const stDelNotice_ProtoFunID stDelNotice_ProtoFunID_ProtoFunID_MIN = stDelNotice_ProtoFunID_FunID;
const stDelNotice_ProtoFunID stDelNotice_ProtoFunID_ProtoFunID_MAX = stDelNotice_ProtoFunID_FunID;
const int stDelNotice_ProtoFunID_ProtoFunID_ARRAYSIZE = stDelNotice_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDelNotice_ProtoFunID_descriptor();
inline const ::std::string& stDelNotice_ProtoFunID_Name(stDelNotice_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDelNotice_ProtoFunID_descriptor(), value);
}
inline bool stDelNotice_ProtoFunID_Parse(
    const ::std::string& name, stDelNotice_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDelNotice_ProtoFunID>(
    stDelNotice_ProtoFunID_descriptor(), name, value);
}
enum stWebNotifyRechargeInfo_ProtoModID {
  stWebNotifyRechargeInfo_ProtoModID_ModID = 6
};
bool stWebNotifyRechargeInfo_ProtoModID_IsValid(int value);
const stWebNotifyRechargeInfo_ProtoModID stWebNotifyRechargeInfo_ProtoModID_ProtoModID_MIN = stWebNotifyRechargeInfo_ProtoModID_ModID;
const stWebNotifyRechargeInfo_ProtoModID stWebNotifyRechargeInfo_ProtoModID_ProtoModID_MAX = stWebNotifyRechargeInfo_ProtoModID_ModID;
const int stWebNotifyRechargeInfo_ProtoModID_ProtoModID_ARRAYSIZE = stWebNotifyRechargeInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWebNotifyRechargeInfo_ProtoModID_descriptor();
inline const ::std::string& stWebNotifyRechargeInfo_ProtoModID_Name(stWebNotifyRechargeInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWebNotifyRechargeInfo_ProtoModID_descriptor(), value);
}
inline bool stWebNotifyRechargeInfo_ProtoModID_Parse(
    const ::std::string& name, stWebNotifyRechargeInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWebNotifyRechargeInfo_ProtoModID>(
    stWebNotifyRechargeInfo_ProtoModID_descriptor(), name, value);
}
enum stWebNotifyRechargeInfo_ProtoFunID {
  stWebNotifyRechargeInfo_ProtoFunID_FunID = 13
};
bool stWebNotifyRechargeInfo_ProtoFunID_IsValid(int value);
const stWebNotifyRechargeInfo_ProtoFunID stWebNotifyRechargeInfo_ProtoFunID_ProtoFunID_MIN = stWebNotifyRechargeInfo_ProtoFunID_FunID;
const stWebNotifyRechargeInfo_ProtoFunID stWebNotifyRechargeInfo_ProtoFunID_ProtoFunID_MAX = stWebNotifyRechargeInfo_ProtoFunID_FunID;
const int stWebNotifyRechargeInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stWebNotifyRechargeInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWebNotifyRechargeInfo_ProtoFunID_descriptor();
inline const ::std::string& stWebNotifyRechargeInfo_ProtoFunID_Name(stWebNotifyRechargeInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWebNotifyRechargeInfo_ProtoFunID_descriptor(), value);
}
inline bool stWebNotifyRechargeInfo_ProtoFunID_Parse(
    const ::std::string& name, stWebNotifyRechargeInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWebNotifyRechargeInfo_ProtoFunID>(
    stWebNotifyRechargeInfo_ProtoFunID_descriptor(), name, value);
}
enum stAddGiftBagCfg_ProtoModID {
  stAddGiftBagCfg_ProtoModID_ModID = 6
};
bool stAddGiftBagCfg_ProtoModID_IsValid(int value);
const stAddGiftBagCfg_ProtoModID stAddGiftBagCfg_ProtoModID_ProtoModID_MIN = stAddGiftBagCfg_ProtoModID_ModID;
const stAddGiftBagCfg_ProtoModID stAddGiftBagCfg_ProtoModID_ProtoModID_MAX = stAddGiftBagCfg_ProtoModID_ModID;
const int stAddGiftBagCfg_ProtoModID_ProtoModID_ARRAYSIZE = stAddGiftBagCfg_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddGiftBagCfg_ProtoModID_descriptor();
inline const ::std::string& stAddGiftBagCfg_ProtoModID_Name(stAddGiftBagCfg_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddGiftBagCfg_ProtoModID_descriptor(), value);
}
inline bool stAddGiftBagCfg_ProtoModID_Parse(
    const ::std::string& name, stAddGiftBagCfg_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddGiftBagCfg_ProtoModID>(
    stAddGiftBagCfg_ProtoModID_descriptor(), name, value);
}
enum stAddGiftBagCfg_ProtoFunID {
  stAddGiftBagCfg_ProtoFunID_FunID = 14
};
bool stAddGiftBagCfg_ProtoFunID_IsValid(int value);
const stAddGiftBagCfg_ProtoFunID stAddGiftBagCfg_ProtoFunID_ProtoFunID_MIN = stAddGiftBagCfg_ProtoFunID_FunID;
const stAddGiftBagCfg_ProtoFunID stAddGiftBagCfg_ProtoFunID_ProtoFunID_MAX = stAddGiftBagCfg_ProtoFunID_FunID;
const int stAddGiftBagCfg_ProtoFunID_ProtoFunID_ARRAYSIZE = stAddGiftBagCfg_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddGiftBagCfg_ProtoFunID_descriptor();
inline const ::std::string& stAddGiftBagCfg_ProtoFunID_Name(stAddGiftBagCfg_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddGiftBagCfg_ProtoFunID_descriptor(), value);
}
inline bool stAddGiftBagCfg_ProtoFunID_Parse(
    const ::std::string& name, stAddGiftBagCfg_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddGiftBagCfg_ProtoFunID>(
    stAddGiftBagCfg_ProtoFunID_descriptor(), name, value);
}
enum stDelGiftBagCfg_ProtoModID {
  stDelGiftBagCfg_ProtoModID_ModID = 6
};
bool stDelGiftBagCfg_ProtoModID_IsValid(int value);
const stDelGiftBagCfg_ProtoModID stDelGiftBagCfg_ProtoModID_ProtoModID_MIN = stDelGiftBagCfg_ProtoModID_ModID;
const stDelGiftBagCfg_ProtoModID stDelGiftBagCfg_ProtoModID_ProtoModID_MAX = stDelGiftBagCfg_ProtoModID_ModID;
const int stDelGiftBagCfg_ProtoModID_ProtoModID_ARRAYSIZE = stDelGiftBagCfg_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDelGiftBagCfg_ProtoModID_descriptor();
inline const ::std::string& stDelGiftBagCfg_ProtoModID_Name(stDelGiftBagCfg_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDelGiftBagCfg_ProtoModID_descriptor(), value);
}
inline bool stDelGiftBagCfg_ProtoModID_Parse(
    const ::std::string& name, stDelGiftBagCfg_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDelGiftBagCfg_ProtoModID>(
    stDelGiftBagCfg_ProtoModID_descriptor(), name, value);
}
enum stDelGiftBagCfg_ProtoFunID {
  stDelGiftBagCfg_ProtoFunID_FunID = 15
};
bool stDelGiftBagCfg_ProtoFunID_IsValid(int value);
const stDelGiftBagCfg_ProtoFunID stDelGiftBagCfg_ProtoFunID_ProtoFunID_MIN = stDelGiftBagCfg_ProtoFunID_FunID;
const stDelGiftBagCfg_ProtoFunID stDelGiftBagCfg_ProtoFunID_ProtoFunID_MAX = stDelGiftBagCfg_ProtoFunID_FunID;
const int stDelGiftBagCfg_ProtoFunID_ProtoFunID_ARRAYSIZE = stDelGiftBagCfg_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDelGiftBagCfg_ProtoFunID_descriptor();
inline const ::std::string& stDelGiftBagCfg_ProtoFunID_Name(stDelGiftBagCfg_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDelGiftBagCfg_ProtoFunID_descriptor(), value);
}
inline bool stDelGiftBagCfg_ProtoFunID_Parse(
    const ::std::string& name, stDelGiftBagCfg_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDelGiftBagCfg_ProtoFunID>(
    stDelGiftBagCfg_ProtoFunID_descriptor(), name, value);
}
enum stAddBlackAndWhite_ProtoModID {
  stAddBlackAndWhite_ProtoModID_ModID = 6
};
bool stAddBlackAndWhite_ProtoModID_IsValid(int value);
const stAddBlackAndWhite_ProtoModID stAddBlackAndWhite_ProtoModID_ProtoModID_MIN = stAddBlackAndWhite_ProtoModID_ModID;
const stAddBlackAndWhite_ProtoModID stAddBlackAndWhite_ProtoModID_ProtoModID_MAX = stAddBlackAndWhite_ProtoModID_ModID;
const int stAddBlackAndWhite_ProtoModID_ProtoModID_ARRAYSIZE = stAddBlackAndWhite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddBlackAndWhite_ProtoModID_descriptor();
inline const ::std::string& stAddBlackAndWhite_ProtoModID_Name(stAddBlackAndWhite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddBlackAndWhite_ProtoModID_descriptor(), value);
}
inline bool stAddBlackAndWhite_ProtoModID_Parse(
    const ::std::string& name, stAddBlackAndWhite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddBlackAndWhite_ProtoModID>(
    stAddBlackAndWhite_ProtoModID_descriptor(), name, value);
}
enum stAddBlackAndWhite_ProtoFunID {
  stAddBlackAndWhite_ProtoFunID_FunID = 16
};
bool stAddBlackAndWhite_ProtoFunID_IsValid(int value);
const stAddBlackAndWhite_ProtoFunID stAddBlackAndWhite_ProtoFunID_ProtoFunID_MIN = stAddBlackAndWhite_ProtoFunID_FunID;
const stAddBlackAndWhite_ProtoFunID stAddBlackAndWhite_ProtoFunID_ProtoFunID_MAX = stAddBlackAndWhite_ProtoFunID_FunID;
const int stAddBlackAndWhite_ProtoFunID_ProtoFunID_ARRAYSIZE = stAddBlackAndWhite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddBlackAndWhite_ProtoFunID_descriptor();
inline const ::std::string& stAddBlackAndWhite_ProtoFunID_Name(stAddBlackAndWhite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddBlackAndWhite_ProtoFunID_descriptor(), value);
}
inline bool stAddBlackAndWhite_ProtoFunID_Parse(
    const ::std::string& name, stAddBlackAndWhite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddBlackAndWhite_ProtoFunID>(
    stAddBlackAndWhite_ProtoFunID_descriptor(), name, value);
}
enum stSetServerMaintenanceTime_ProtoModID {
  stSetServerMaintenanceTime_ProtoModID_ModID = 6
};
bool stSetServerMaintenanceTime_ProtoModID_IsValid(int value);
const stSetServerMaintenanceTime_ProtoModID stSetServerMaintenanceTime_ProtoModID_ProtoModID_MIN = stSetServerMaintenanceTime_ProtoModID_ModID;
const stSetServerMaintenanceTime_ProtoModID stSetServerMaintenanceTime_ProtoModID_ProtoModID_MAX = stSetServerMaintenanceTime_ProtoModID_ModID;
const int stSetServerMaintenanceTime_ProtoModID_ProtoModID_ARRAYSIZE = stSetServerMaintenanceTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSetServerMaintenanceTime_ProtoModID_descriptor();
inline const ::std::string& stSetServerMaintenanceTime_ProtoModID_Name(stSetServerMaintenanceTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSetServerMaintenanceTime_ProtoModID_descriptor(), value);
}
inline bool stSetServerMaintenanceTime_ProtoModID_Parse(
    const ::std::string& name, stSetServerMaintenanceTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSetServerMaintenanceTime_ProtoModID>(
    stSetServerMaintenanceTime_ProtoModID_descriptor(), name, value);
}
enum stSetServerMaintenanceTime_ProtoFunID {
  stSetServerMaintenanceTime_ProtoFunID_FunID = 17
};
bool stSetServerMaintenanceTime_ProtoFunID_IsValid(int value);
const stSetServerMaintenanceTime_ProtoFunID stSetServerMaintenanceTime_ProtoFunID_ProtoFunID_MIN = stSetServerMaintenanceTime_ProtoFunID_FunID;
const stSetServerMaintenanceTime_ProtoFunID stSetServerMaintenanceTime_ProtoFunID_ProtoFunID_MAX = stSetServerMaintenanceTime_ProtoFunID_FunID;
const int stSetServerMaintenanceTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stSetServerMaintenanceTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSetServerMaintenanceTime_ProtoFunID_descriptor();
inline const ::std::string& stSetServerMaintenanceTime_ProtoFunID_Name(stSetServerMaintenanceTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSetServerMaintenanceTime_ProtoFunID_descriptor(), value);
}
inline bool stSetServerMaintenanceTime_ProtoFunID_Parse(
    const ::std::string& name, stSetServerMaintenanceTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSetServerMaintenanceTime_ProtoFunID>(
    stSetServerMaintenanceTime_ProtoFunID_descriptor(), name, value);
}
enum stGetSvrConfig_ProtoModID {
  stGetSvrConfig_ProtoModID_ModID = 6
};
bool stGetSvrConfig_ProtoModID_IsValid(int value);
const stGetSvrConfig_ProtoModID stGetSvrConfig_ProtoModID_ProtoModID_MIN = stGetSvrConfig_ProtoModID_ModID;
const stGetSvrConfig_ProtoModID stGetSvrConfig_ProtoModID_ProtoModID_MAX = stGetSvrConfig_ProtoModID_ModID;
const int stGetSvrConfig_ProtoModID_ProtoModID_ARRAYSIZE = stGetSvrConfig_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetSvrConfig_ProtoModID_descriptor();
inline const ::std::string& stGetSvrConfig_ProtoModID_Name(stGetSvrConfig_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetSvrConfig_ProtoModID_descriptor(), value);
}
inline bool stGetSvrConfig_ProtoModID_Parse(
    const ::std::string& name, stGetSvrConfig_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetSvrConfig_ProtoModID>(
    stGetSvrConfig_ProtoModID_descriptor(), name, value);
}
enum stGetSvrConfig_ProtoFunID {
  stGetSvrConfig_ProtoFunID_FunID = 18
};
bool stGetSvrConfig_ProtoFunID_IsValid(int value);
const stGetSvrConfig_ProtoFunID stGetSvrConfig_ProtoFunID_ProtoFunID_MIN = stGetSvrConfig_ProtoFunID_FunID;
const stGetSvrConfig_ProtoFunID stGetSvrConfig_ProtoFunID_ProtoFunID_MAX = stGetSvrConfig_ProtoFunID_FunID;
const int stGetSvrConfig_ProtoFunID_ProtoFunID_ARRAYSIZE = stGetSvrConfig_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetSvrConfig_ProtoFunID_descriptor();
inline const ::std::string& stGetSvrConfig_ProtoFunID_Name(stGetSvrConfig_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetSvrConfig_ProtoFunID_descriptor(), value);
}
inline bool stGetSvrConfig_ProtoFunID_Parse(
    const ::std::string& name, stGetSvrConfig_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetSvrConfig_ProtoFunID>(
    stGetSvrConfig_ProtoFunID_descriptor(), name, value);
}
enum stRetSvrConfig_ProtoModID {
  stRetSvrConfig_ProtoModID_ModID = 6
};
bool stRetSvrConfig_ProtoModID_IsValid(int value);
const stRetSvrConfig_ProtoModID stRetSvrConfig_ProtoModID_ProtoModID_MIN = stRetSvrConfig_ProtoModID_ModID;
const stRetSvrConfig_ProtoModID stRetSvrConfig_ProtoModID_ProtoModID_MAX = stRetSvrConfig_ProtoModID_ModID;
const int stRetSvrConfig_ProtoModID_ProtoModID_ARRAYSIZE = stRetSvrConfig_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetSvrConfig_ProtoModID_descriptor();
inline const ::std::string& stRetSvrConfig_ProtoModID_Name(stRetSvrConfig_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetSvrConfig_ProtoModID_descriptor(), value);
}
inline bool stRetSvrConfig_ProtoModID_Parse(
    const ::std::string& name, stRetSvrConfig_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetSvrConfig_ProtoModID>(
    stRetSvrConfig_ProtoModID_descriptor(), name, value);
}
enum stRetSvrConfig_ProtoFunID {
  stRetSvrConfig_ProtoFunID_FunID = 19
};
bool stRetSvrConfig_ProtoFunID_IsValid(int value);
const stRetSvrConfig_ProtoFunID stRetSvrConfig_ProtoFunID_ProtoFunID_MIN = stRetSvrConfig_ProtoFunID_FunID;
const stRetSvrConfig_ProtoFunID stRetSvrConfig_ProtoFunID_ProtoFunID_MAX = stRetSvrConfig_ProtoFunID_FunID;
const int stRetSvrConfig_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetSvrConfig_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetSvrConfig_ProtoFunID_descriptor();
inline const ::std::string& stRetSvrConfig_ProtoFunID_Name(stRetSvrConfig_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetSvrConfig_ProtoFunID_descriptor(), value);
}
inline bool stRetSvrConfig_ProtoFunID_Parse(
    const ::std::string& name, stRetSvrConfig_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetSvrConfig_ProtoFunID>(
    stRetSvrConfig_ProtoFunID_descriptor(), name, value);
}
enum stUpdateSvrCfg_ProtoModID {
  stUpdateSvrCfg_ProtoModID_ModID = 6
};
bool stUpdateSvrCfg_ProtoModID_IsValid(int value);
const stUpdateSvrCfg_ProtoModID stUpdateSvrCfg_ProtoModID_ProtoModID_MIN = stUpdateSvrCfg_ProtoModID_ModID;
const stUpdateSvrCfg_ProtoModID stUpdateSvrCfg_ProtoModID_ProtoModID_MAX = stUpdateSvrCfg_ProtoModID_ModID;
const int stUpdateSvrCfg_ProtoModID_ProtoModID_ARRAYSIZE = stUpdateSvrCfg_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpdateSvrCfg_ProtoModID_descriptor();
inline const ::std::string& stUpdateSvrCfg_ProtoModID_Name(stUpdateSvrCfg_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpdateSvrCfg_ProtoModID_descriptor(), value);
}
inline bool stUpdateSvrCfg_ProtoModID_Parse(
    const ::std::string& name, stUpdateSvrCfg_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpdateSvrCfg_ProtoModID>(
    stUpdateSvrCfg_ProtoModID_descriptor(), name, value);
}
enum stUpdateSvrCfg_ProtoFunID {
  stUpdateSvrCfg_ProtoFunID_FunID = 20
};
bool stUpdateSvrCfg_ProtoFunID_IsValid(int value);
const stUpdateSvrCfg_ProtoFunID stUpdateSvrCfg_ProtoFunID_ProtoFunID_MIN = stUpdateSvrCfg_ProtoFunID_FunID;
const stUpdateSvrCfg_ProtoFunID stUpdateSvrCfg_ProtoFunID_ProtoFunID_MAX = stUpdateSvrCfg_ProtoFunID_FunID;
const int stUpdateSvrCfg_ProtoFunID_ProtoFunID_ARRAYSIZE = stUpdateSvrCfg_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpdateSvrCfg_ProtoFunID_descriptor();
inline const ::std::string& stUpdateSvrCfg_ProtoFunID_Name(stUpdateSvrCfg_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpdateSvrCfg_ProtoFunID_descriptor(), value);
}
inline bool stUpdateSvrCfg_ProtoFunID_Parse(
    const ::std::string& name, stUpdateSvrCfg_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpdateSvrCfg_ProtoFunID>(
    stUpdateSvrCfg_ProtoFunID_descriptor(), name, value);
}
enum stNotifyWebOnlineNum_ProtoModID {
  stNotifyWebOnlineNum_ProtoModID_ModID = 6
};
bool stNotifyWebOnlineNum_ProtoModID_IsValid(int value);
const stNotifyWebOnlineNum_ProtoModID stNotifyWebOnlineNum_ProtoModID_ProtoModID_MIN = stNotifyWebOnlineNum_ProtoModID_ModID;
const stNotifyWebOnlineNum_ProtoModID stNotifyWebOnlineNum_ProtoModID_ProtoModID_MAX = stNotifyWebOnlineNum_ProtoModID_ModID;
const int stNotifyWebOnlineNum_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyWebOnlineNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyWebOnlineNum_ProtoModID_descriptor();
inline const ::std::string& stNotifyWebOnlineNum_ProtoModID_Name(stNotifyWebOnlineNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyWebOnlineNum_ProtoModID_descriptor(), value);
}
inline bool stNotifyWebOnlineNum_ProtoModID_Parse(
    const ::std::string& name, stNotifyWebOnlineNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyWebOnlineNum_ProtoModID>(
    stNotifyWebOnlineNum_ProtoModID_descriptor(), name, value);
}
enum stNotifyWebOnlineNum_ProtoFunID {
  stNotifyWebOnlineNum_ProtoFunID_FunID = 21
};
bool stNotifyWebOnlineNum_ProtoFunID_IsValid(int value);
const stNotifyWebOnlineNum_ProtoFunID stNotifyWebOnlineNum_ProtoFunID_ProtoFunID_MIN = stNotifyWebOnlineNum_ProtoFunID_FunID;
const stNotifyWebOnlineNum_ProtoFunID stNotifyWebOnlineNum_ProtoFunID_ProtoFunID_MAX = stNotifyWebOnlineNum_ProtoFunID_FunID;
const int stNotifyWebOnlineNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyWebOnlineNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyWebOnlineNum_ProtoFunID_descriptor();
inline const ::std::string& stNotifyWebOnlineNum_ProtoFunID_Name(stNotifyWebOnlineNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyWebOnlineNum_ProtoFunID_descriptor(), value);
}
inline bool stNotifyWebOnlineNum_ProtoFunID_Parse(
    const ::std::string& name, stNotifyWebOnlineNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyWebOnlineNum_ProtoFunID>(
    stNotifyWebOnlineNum_ProtoFunID_descriptor(), name, value);
}
enum stEnterSelectPage_ProtoModID {
  stEnterSelectPage_ProtoModID_ModID = 6
};
bool stEnterSelectPage_ProtoModID_IsValid(int value);
const stEnterSelectPage_ProtoModID stEnterSelectPage_ProtoModID_ProtoModID_MIN = stEnterSelectPage_ProtoModID_ModID;
const stEnterSelectPage_ProtoModID stEnterSelectPage_ProtoModID_ProtoModID_MAX = stEnterSelectPage_ProtoModID_ModID;
const int stEnterSelectPage_ProtoModID_ProtoModID_ARRAYSIZE = stEnterSelectPage_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterSelectPage_ProtoModID_descriptor();
inline const ::std::string& stEnterSelectPage_ProtoModID_Name(stEnterSelectPage_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterSelectPage_ProtoModID_descriptor(), value);
}
inline bool stEnterSelectPage_ProtoModID_Parse(
    const ::std::string& name, stEnterSelectPage_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterSelectPage_ProtoModID>(
    stEnterSelectPage_ProtoModID_descriptor(), name, value);
}
enum stEnterSelectPage_ProtoFunID {
  stEnterSelectPage_ProtoFunID_FunID = 22
};
bool stEnterSelectPage_ProtoFunID_IsValid(int value);
const stEnterSelectPage_ProtoFunID stEnterSelectPage_ProtoFunID_ProtoFunID_MIN = stEnterSelectPage_ProtoFunID_FunID;
const stEnterSelectPage_ProtoFunID stEnterSelectPage_ProtoFunID_ProtoFunID_MAX = stEnterSelectPage_ProtoFunID_FunID;
const int stEnterSelectPage_ProtoFunID_ProtoFunID_ARRAYSIZE = stEnterSelectPage_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterSelectPage_ProtoFunID_descriptor();
inline const ::std::string& stEnterSelectPage_ProtoFunID_Name(stEnterSelectPage_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterSelectPage_ProtoFunID_descriptor(), value);
}
inline bool stEnterSelectPage_ProtoFunID_Parse(
    const ::std::string& name, stEnterSelectPage_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterSelectPage_ProtoFunID>(
    stEnterSelectPage_ProtoFunID_descriptor(), name, value);
}
enum stNotifyWebCreateRole_ProtoModID {
  stNotifyWebCreateRole_ProtoModID_ModID = 6
};
bool stNotifyWebCreateRole_ProtoModID_IsValid(int value);
const stNotifyWebCreateRole_ProtoModID stNotifyWebCreateRole_ProtoModID_ProtoModID_MIN = stNotifyWebCreateRole_ProtoModID_ModID;
const stNotifyWebCreateRole_ProtoModID stNotifyWebCreateRole_ProtoModID_ProtoModID_MAX = stNotifyWebCreateRole_ProtoModID_ModID;
const int stNotifyWebCreateRole_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyWebCreateRole_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyWebCreateRole_ProtoModID_descriptor();
inline const ::std::string& stNotifyWebCreateRole_ProtoModID_Name(stNotifyWebCreateRole_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyWebCreateRole_ProtoModID_descriptor(), value);
}
inline bool stNotifyWebCreateRole_ProtoModID_Parse(
    const ::std::string& name, stNotifyWebCreateRole_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyWebCreateRole_ProtoModID>(
    stNotifyWebCreateRole_ProtoModID_descriptor(), name, value);
}
enum stNotifyWebCreateRole_ProtoFunID {
  stNotifyWebCreateRole_ProtoFunID_FunID = 23
};
bool stNotifyWebCreateRole_ProtoFunID_IsValid(int value);
const stNotifyWebCreateRole_ProtoFunID stNotifyWebCreateRole_ProtoFunID_ProtoFunID_MIN = stNotifyWebCreateRole_ProtoFunID_FunID;
const stNotifyWebCreateRole_ProtoFunID stNotifyWebCreateRole_ProtoFunID_ProtoFunID_MAX = stNotifyWebCreateRole_ProtoFunID_FunID;
const int stNotifyWebCreateRole_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyWebCreateRole_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyWebCreateRole_ProtoFunID_descriptor();
inline const ::std::string& stNotifyWebCreateRole_ProtoFunID_Name(stNotifyWebCreateRole_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyWebCreateRole_ProtoFunID_descriptor(), value);
}
inline bool stNotifyWebCreateRole_ProtoFunID_Parse(
    const ::std::string& name, stNotifyWebCreateRole_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyWebCreateRole_ProtoFunID>(
    stNotifyWebCreateRole_ProtoFunID_descriptor(), name, value);
}
enum stSendGuildLog_ProtoModID {
  stSendGuildLog_ProtoModID_ModID = 6
};
bool stSendGuildLog_ProtoModID_IsValid(int value);
const stSendGuildLog_ProtoModID stSendGuildLog_ProtoModID_ProtoModID_MIN = stSendGuildLog_ProtoModID_ModID;
const stSendGuildLog_ProtoModID stSendGuildLog_ProtoModID_ProtoModID_MAX = stSendGuildLog_ProtoModID_ModID;
const int stSendGuildLog_ProtoModID_ProtoModID_ARRAYSIZE = stSendGuildLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendGuildLog_ProtoModID_descriptor();
inline const ::std::string& stSendGuildLog_ProtoModID_Name(stSendGuildLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendGuildLog_ProtoModID_descriptor(), value);
}
inline bool stSendGuildLog_ProtoModID_Parse(
    const ::std::string& name, stSendGuildLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendGuildLog_ProtoModID>(
    stSendGuildLog_ProtoModID_descriptor(), name, value);
}
enum stSendGuildLog_ProtoFunID {
  stSendGuildLog_ProtoFunID_FunID = 24
};
bool stSendGuildLog_ProtoFunID_IsValid(int value);
const stSendGuildLog_ProtoFunID stSendGuildLog_ProtoFunID_ProtoFunID_MIN = stSendGuildLog_ProtoFunID_FunID;
const stSendGuildLog_ProtoFunID stSendGuildLog_ProtoFunID_ProtoFunID_MAX = stSendGuildLog_ProtoFunID_FunID;
const int stSendGuildLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendGuildLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendGuildLog_ProtoFunID_descriptor();
inline const ::std::string& stSendGuildLog_ProtoFunID_Name(stSendGuildLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendGuildLog_ProtoFunID_descriptor(), value);
}
inline bool stSendGuildLog_ProtoFunID_Parse(
    const ::std::string& name, stSendGuildLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendGuildLog_ProtoFunID>(
    stSendGuildLog_ProtoFunID_descriptor(), name, value);
}
enum sstSendGuildResLog_ProtoModID {
  sstSendGuildResLog_ProtoModID_ModID = 6
};
bool sstSendGuildResLog_ProtoModID_IsValid(int value);
const sstSendGuildResLog_ProtoModID sstSendGuildResLog_ProtoModID_ProtoModID_MIN = sstSendGuildResLog_ProtoModID_ModID;
const sstSendGuildResLog_ProtoModID sstSendGuildResLog_ProtoModID_ProtoModID_MAX = sstSendGuildResLog_ProtoModID_ModID;
const int sstSendGuildResLog_ProtoModID_ProtoModID_ARRAYSIZE = sstSendGuildResLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* sstSendGuildResLog_ProtoModID_descriptor();
inline const ::std::string& sstSendGuildResLog_ProtoModID_Name(sstSendGuildResLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    sstSendGuildResLog_ProtoModID_descriptor(), value);
}
inline bool sstSendGuildResLog_ProtoModID_Parse(
    const ::std::string& name, sstSendGuildResLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<sstSendGuildResLog_ProtoModID>(
    sstSendGuildResLog_ProtoModID_descriptor(), name, value);
}
enum sstSendGuildResLog_ProtoFunID {
  sstSendGuildResLog_ProtoFunID_FunID = 25
};
bool sstSendGuildResLog_ProtoFunID_IsValid(int value);
const sstSendGuildResLog_ProtoFunID sstSendGuildResLog_ProtoFunID_ProtoFunID_MIN = sstSendGuildResLog_ProtoFunID_FunID;
const sstSendGuildResLog_ProtoFunID sstSendGuildResLog_ProtoFunID_ProtoFunID_MAX = sstSendGuildResLog_ProtoFunID_FunID;
const int sstSendGuildResLog_ProtoFunID_ProtoFunID_ARRAYSIZE = sstSendGuildResLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* sstSendGuildResLog_ProtoFunID_descriptor();
inline const ::std::string& sstSendGuildResLog_ProtoFunID_Name(sstSendGuildResLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    sstSendGuildResLog_ProtoFunID_descriptor(), value);
}
inline bool sstSendGuildResLog_ProtoFunID_Parse(
    const ::std::string& name, sstSendGuildResLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<sstSendGuildResLog_ProtoFunID>(
    sstSendGuildResLog_ProtoFunID_descriptor(), name, value);
}
enum stSendModuleLog_ProtoModID {
  stSendModuleLog_ProtoModID_ModID = 6
};
bool stSendModuleLog_ProtoModID_IsValid(int value);
const stSendModuleLog_ProtoModID stSendModuleLog_ProtoModID_ProtoModID_MIN = stSendModuleLog_ProtoModID_ModID;
const stSendModuleLog_ProtoModID stSendModuleLog_ProtoModID_ProtoModID_MAX = stSendModuleLog_ProtoModID_ModID;
const int stSendModuleLog_ProtoModID_ProtoModID_ARRAYSIZE = stSendModuleLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendModuleLog_ProtoModID_descriptor();
inline const ::std::string& stSendModuleLog_ProtoModID_Name(stSendModuleLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendModuleLog_ProtoModID_descriptor(), value);
}
inline bool stSendModuleLog_ProtoModID_Parse(
    const ::std::string& name, stSendModuleLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendModuleLog_ProtoModID>(
    stSendModuleLog_ProtoModID_descriptor(), name, value);
}
enum stSendModuleLog_ProtoFunID {
  stSendModuleLog_ProtoFunID_FunID = 26
};
bool stSendModuleLog_ProtoFunID_IsValid(int value);
const stSendModuleLog_ProtoFunID stSendModuleLog_ProtoFunID_ProtoFunID_MIN = stSendModuleLog_ProtoFunID_FunID;
const stSendModuleLog_ProtoFunID stSendModuleLog_ProtoFunID_ProtoFunID_MAX = stSendModuleLog_ProtoFunID_FunID;
const int stSendModuleLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendModuleLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendModuleLog_ProtoFunID_descriptor();
inline const ::std::string& stSendModuleLog_ProtoFunID_Name(stSendModuleLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendModuleLog_ProtoFunID_descriptor(), value);
}
inline bool stSendModuleLog_ProtoFunID_Parse(
    const ::std::string& name, stSendModuleLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendModuleLog_ProtoFunID>(
    stSendModuleLog_ProtoFunID_descriptor(), name, value);
}
enum stReqGetTxGiftBag_ProtoModID {
  stReqGetTxGiftBag_ProtoModID_ModID = 6
};
bool stReqGetTxGiftBag_ProtoModID_IsValid(int value);
const stReqGetTxGiftBag_ProtoModID stReqGetTxGiftBag_ProtoModID_ProtoModID_MIN = stReqGetTxGiftBag_ProtoModID_ModID;
const stReqGetTxGiftBag_ProtoModID stReqGetTxGiftBag_ProtoModID_ProtoModID_MAX = stReqGetTxGiftBag_ProtoModID_ModID;
const int stReqGetTxGiftBag_ProtoModID_ProtoModID_ARRAYSIZE = stReqGetTxGiftBag_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGetTxGiftBag_ProtoModID_descriptor();
inline const ::std::string& stReqGetTxGiftBag_ProtoModID_Name(stReqGetTxGiftBag_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGetTxGiftBag_ProtoModID_descriptor(), value);
}
inline bool stReqGetTxGiftBag_ProtoModID_Parse(
    const ::std::string& name, stReqGetTxGiftBag_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGetTxGiftBag_ProtoModID>(
    stReqGetTxGiftBag_ProtoModID_descriptor(), name, value);
}
enum stReqGetTxGiftBag_ProtoFunID {
  stReqGetTxGiftBag_ProtoFunID_FunID = 27
};
bool stReqGetTxGiftBag_ProtoFunID_IsValid(int value);
const stReqGetTxGiftBag_ProtoFunID stReqGetTxGiftBag_ProtoFunID_ProtoFunID_MIN = stReqGetTxGiftBag_ProtoFunID_FunID;
const stReqGetTxGiftBag_ProtoFunID stReqGetTxGiftBag_ProtoFunID_ProtoFunID_MAX = stReqGetTxGiftBag_ProtoFunID_FunID;
const int stReqGetTxGiftBag_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGetTxGiftBag_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGetTxGiftBag_ProtoFunID_descriptor();
inline const ::std::string& stReqGetTxGiftBag_ProtoFunID_Name(stReqGetTxGiftBag_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGetTxGiftBag_ProtoFunID_descriptor(), value);
}
inline bool stReqGetTxGiftBag_ProtoFunID_Parse(
    const ::std::string& name, stReqGetTxGiftBag_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGetTxGiftBag_ProtoFunID>(
    stReqGetTxGiftBag_ProtoFunID_descriptor(), name, value);
}
enum stRetGetTxGiftBag_ProtoModID {
  stRetGetTxGiftBag_ProtoModID_ModID = 6
};
bool stRetGetTxGiftBag_ProtoModID_IsValid(int value);
const stRetGetTxGiftBag_ProtoModID stRetGetTxGiftBag_ProtoModID_ProtoModID_MIN = stRetGetTxGiftBag_ProtoModID_ModID;
const stRetGetTxGiftBag_ProtoModID stRetGetTxGiftBag_ProtoModID_ProtoModID_MAX = stRetGetTxGiftBag_ProtoModID_ModID;
const int stRetGetTxGiftBag_ProtoModID_ProtoModID_ARRAYSIZE = stRetGetTxGiftBag_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGetTxGiftBag_ProtoModID_descriptor();
inline const ::std::string& stRetGetTxGiftBag_ProtoModID_Name(stRetGetTxGiftBag_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGetTxGiftBag_ProtoModID_descriptor(), value);
}
inline bool stRetGetTxGiftBag_ProtoModID_Parse(
    const ::std::string& name, stRetGetTxGiftBag_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGetTxGiftBag_ProtoModID>(
    stRetGetTxGiftBag_ProtoModID_descriptor(), name, value);
}
enum stRetGetTxGiftBag_ProtoFunID {
  stRetGetTxGiftBag_ProtoFunID_FunID = 28
};
bool stRetGetTxGiftBag_ProtoFunID_IsValid(int value);
const stRetGetTxGiftBag_ProtoFunID stRetGetTxGiftBag_ProtoFunID_ProtoFunID_MIN = stRetGetTxGiftBag_ProtoFunID_FunID;
const stRetGetTxGiftBag_ProtoFunID stRetGetTxGiftBag_ProtoFunID_ProtoFunID_MAX = stRetGetTxGiftBag_ProtoFunID_FunID;
const int stRetGetTxGiftBag_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetGetTxGiftBag_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGetTxGiftBag_ProtoFunID_descriptor();
inline const ::std::string& stRetGetTxGiftBag_ProtoFunID_Name(stRetGetTxGiftBag_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGetTxGiftBag_ProtoFunID_descriptor(), value);
}
inline bool stRetGetTxGiftBag_ProtoFunID_Parse(
    const ::std::string& name, stRetGetTxGiftBag_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGetTxGiftBag_ProtoFunID>(
    stRetGetTxGiftBag_ProtoFunID_descriptor(), name, value);
}
enum stUpdateSvrOpenTime_ProtoModID {
  stUpdateSvrOpenTime_ProtoModID_ModID = 6
};
bool stUpdateSvrOpenTime_ProtoModID_IsValid(int value);
const stUpdateSvrOpenTime_ProtoModID stUpdateSvrOpenTime_ProtoModID_ProtoModID_MIN = stUpdateSvrOpenTime_ProtoModID_ModID;
const stUpdateSvrOpenTime_ProtoModID stUpdateSvrOpenTime_ProtoModID_ProtoModID_MAX = stUpdateSvrOpenTime_ProtoModID_ModID;
const int stUpdateSvrOpenTime_ProtoModID_ProtoModID_ARRAYSIZE = stUpdateSvrOpenTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpdateSvrOpenTime_ProtoModID_descriptor();
inline const ::std::string& stUpdateSvrOpenTime_ProtoModID_Name(stUpdateSvrOpenTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpdateSvrOpenTime_ProtoModID_descriptor(), value);
}
inline bool stUpdateSvrOpenTime_ProtoModID_Parse(
    const ::std::string& name, stUpdateSvrOpenTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpdateSvrOpenTime_ProtoModID>(
    stUpdateSvrOpenTime_ProtoModID_descriptor(), name, value);
}
enum stUpdateSvrOpenTime_ProtoFunID {
  stUpdateSvrOpenTime_ProtoFunID_FunID = 29
};
bool stUpdateSvrOpenTime_ProtoFunID_IsValid(int value);
const stUpdateSvrOpenTime_ProtoFunID stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_MIN = stUpdateSvrOpenTime_ProtoFunID_FunID;
const stUpdateSvrOpenTime_ProtoFunID stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_MAX = stUpdateSvrOpenTime_ProtoFunID_FunID;
const int stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpdateSvrOpenTime_ProtoFunID_descriptor();
inline const ::std::string& stUpdateSvrOpenTime_ProtoFunID_Name(stUpdateSvrOpenTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpdateSvrOpenTime_ProtoFunID_descriptor(), value);
}
inline bool stUpdateSvrOpenTime_ProtoFunID_Parse(
    const ::std::string& name, stUpdateSvrOpenTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpdateSvrOpenTime_ProtoFunID>(
    stUpdateSvrOpenTime_ProtoFunID_descriptor(), name, value);
}
enum stResourceChgLog_ProtoModID {
  stResourceChgLog_ProtoModID_ModID = 6
};
bool stResourceChgLog_ProtoModID_IsValid(int value);
const stResourceChgLog_ProtoModID stResourceChgLog_ProtoModID_ProtoModID_MIN = stResourceChgLog_ProtoModID_ModID;
const stResourceChgLog_ProtoModID stResourceChgLog_ProtoModID_ProtoModID_MAX = stResourceChgLog_ProtoModID_ModID;
const int stResourceChgLog_ProtoModID_ProtoModID_ARRAYSIZE = stResourceChgLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResourceChgLog_ProtoModID_descriptor();
inline const ::std::string& stResourceChgLog_ProtoModID_Name(stResourceChgLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResourceChgLog_ProtoModID_descriptor(), value);
}
inline bool stResourceChgLog_ProtoModID_Parse(
    const ::std::string& name, stResourceChgLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResourceChgLog_ProtoModID>(
    stResourceChgLog_ProtoModID_descriptor(), name, value);
}
enum stResourceChgLog_ProtoFunID {
  stResourceChgLog_ProtoFunID_FunID = 30
};
bool stResourceChgLog_ProtoFunID_IsValid(int value);
const stResourceChgLog_ProtoFunID stResourceChgLog_ProtoFunID_ProtoFunID_MIN = stResourceChgLog_ProtoFunID_FunID;
const stResourceChgLog_ProtoFunID stResourceChgLog_ProtoFunID_ProtoFunID_MAX = stResourceChgLog_ProtoFunID_FunID;
const int stResourceChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stResourceChgLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResourceChgLog_ProtoFunID_descriptor();
inline const ::std::string& stResourceChgLog_ProtoFunID_Name(stResourceChgLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResourceChgLog_ProtoFunID_descriptor(), value);
}
inline bool stResourceChgLog_ProtoFunID_Parse(
    const ::std::string& name, stResourceChgLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResourceChgLog_ProtoFunID>(
    stResourceChgLog_ProtoFunID_descriptor(), name, value);
}
enum stUseInviteCode_ProtoModID {
  stUseInviteCode_ProtoModID_ModID = 6
};
bool stUseInviteCode_ProtoModID_IsValid(int value);
const stUseInviteCode_ProtoModID stUseInviteCode_ProtoModID_ProtoModID_MIN = stUseInviteCode_ProtoModID_ModID;
const stUseInviteCode_ProtoModID stUseInviteCode_ProtoModID_ProtoModID_MAX = stUseInviteCode_ProtoModID_ModID;
const int stUseInviteCode_ProtoModID_ProtoModID_ARRAYSIZE = stUseInviteCode_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseInviteCode_ProtoModID_descriptor();
inline const ::std::string& stUseInviteCode_ProtoModID_Name(stUseInviteCode_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseInviteCode_ProtoModID_descriptor(), value);
}
inline bool stUseInviteCode_ProtoModID_Parse(
    const ::std::string& name, stUseInviteCode_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseInviteCode_ProtoModID>(
    stUseInviteCode_ProtoModID_descriptor(), name, value);
}
enum stUseInviteCode_ProtoFunID {
  stUseInviteCode_ProtoFunID_FunID = 31
};
bool stUseInviteCode_ProtoFunID_IsValid(int value);
const stUseInviteCode_ProtoFunID stUseInviteCode_ProtoFunID_ProtoFunID_MIN = stUseInviteCode_ProtoFunID_FunID;
const stUseInviteCode_ProtoFunID stUseInviteCode_ProtoFunID_ProtoFunID_MAX = stUseInviteCode_ProtoFunID_FunID;
const int stUseInviteCode_ProtoFunID_ProtoFunID_ARRAYSIZE = stUseInviteCode_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseInviteCode_ProtoFunID_descriptor();
inline const ::std::string& stUseInviteCode_ProtoFunID_Name(stUseInviteCode_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseInviteCode_ProtoFunID_descriptor(), value);
}
inline bool stUseInviteCode_ProtoFunID_Parse(
    const ::std::string& name, stUseInviteCode_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseInviteCode_ProtoFunID>(
    stUseInviteCode_ProtoFunID_descriptor(), name, value);
}
enum stUseInviteCodeCb_ProtoModID {
  stUseInviteCodeCb_ProtoModID_ModID = 6
};
bool stUseInviteCodeCb_ProtoModID_IsValid(int value);
const stUseInviteCodeCb_ProtoModID stUseInviteCodeCb_ProtoModID_ProtoModID_MIN = stUseInviteCodeCb_ProtoModID_ModID;
const stUseInviteCodeCb_ProtoModID stUseInviteCodeCb_ProtoModID_ProtoModID_MAX = stUseInviteCodeCb_ProtoModID_ModID;
const int stUseInviteCodeCb_ProtoModID_ProtoModID_ARRAYSIZE = stUseInviteCodeCb_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseInviteCodeCb_ProtoModID_descriptor();
inline const ::std::string& stUseInviteCodeCb_ProtoModID_Name(stUseInviteCodeCb_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseInviteCodeCb_ProtoModID_descriptor(), value);
}
inline bool stUseInviteCodeCb_ProtoModID_Parse(
    const ::std::string& name, stUseInviteCodeCb_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseInviteCodeCb_ProtoModID>(
    stUseInviteCodeCb_ProtoModID_descriptor(), name, value);
}
enum stUseInviteCodeCb_ProtoFunID {
  stUseInviteCodeCb_ProtoFunID_FunID = 32
};
bool stUseInviteCodeCb_ProtoFunID_IsValid(int value);
const stUseInviteCodeCb_ProtoFunID stUseInviteCodeCb_ProtoFunID_ProtoFunID_MIN = stUseInviteCodeCb_ProtoFunID_FunID;
const stUseInviteCodeCb_ProtoFunID stUseInviteCodeCb_ProtoFunID_ProtoFunID_MAX = stUseInviteCodeCb_ProtoFunID_FunID;
const int stUseInviteCodeCb_ProtoFunID_ProtoFunID_ARRAYSIZE = stUseInviteCodeCb_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseInviteCodeCb_ProtoFunID_descriptor();
inline const ::std::string& stUseInviteCodeCb_ProtoFunID_Name(stUseInviteCodeCb_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseInviteCodeCb_ProtoFunID_descriptor(), value);
}
inline bool stUseInviteCodeCb_ProtoFunID_Parse(
    const ::std::string& name, stUseInviteCodeCb_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseInviteCodeCb_ProtoFunID>(
    stUseInviteCodeCb_ProtoFunID_descriptor(), name, value);
}
enum stReqLimitPetActivityData_ProtoModID {
  stReqLimitPetActivityData_ProtoModID_ModID = 6
};
bool stReqLimitPetActivityData_ProtoModID_IsValid(int value);
const stReqLimitPetActivityData_ProtoModID stReqLimitPetActivityData_ProtoModID_ProtoModID_MIN = stReqLimitPetActivityData_ProtoModID_ModID;
const stReqLimitPetActivityData_ProtoModID stReqLimitPetActivityData_ProtoModID_ProtoModID_MAX = stReqLimitPetActivityData_ProtoModID_ModID;
const int stReqLimitPetActivityData_ProtoModID_ProtoModID_ARRAYSIZE = stReqLimitPetActivityData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLimitPetActivityData_ProtoModID_descriptor();
inline const ::std::string& stReqLimitPetActivityData_ProtoModID_Name(stReqLimitPetActivityData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLimitPetActivityData_ProtoModID_descriptor(), value);
}
inline bool stReqLimitPetActivityData_ProtoModID_Parse(
    const ::std::string& name, stReqLimitPetActivityData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLimitPetActivityData_ProtoModID>(
    stReqLimitPetActivityData_ProtoModID_descriptor(), name, value);
}
enum stReqLimitPetActivityData_ProtoFunID {
  stReqLimitPetActivityData_ProtoFunID_FunID = 33
};
bool stReqLimitPetActivityData_ProtoFunID_IsValid(int value);
const stReqLimitPetActivityData_ProtoFunID stReqLimitPetActivityData_ProtoFunID_ProtoFunID_MIN = stReqLimitPetActivityData_ProtoFunID_FunID;
const stReqLimitPetActivityData_ProtoFunID stReqLimitPetActivityData_ProtoFunID_ProtoFunID_MAX = stReqLimitPetActivityData_ProtoFunID_FunID;
const int stReqLimitPetActivityData_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLimitPetActivityData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLimitPetActivityData_ProtoFunID_descriptor();
inline const ::std::string& stReqLimitPetActivityData_ProtoFunID_Name(stReqLimitPetActivityData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLimitPetActivityData_ProtoFunID_descriptor(), value);
}
inline bool stReqLimitPetActivityData_ProtoFunID_Parse(
    const ::std::string& name, stReqLimitPetActivityData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLimitPetActivityData_ProtoFunID>(
    stReqLimitPetActivityData_ProtoFunID_descriptor(), name, value);
}
enum stSendLimitPetActivityData_ProtoModID {
  stSendLimitPetActivityData_ProtoModID_ModID = 6
};
bool stSendLimitPetActivityData_ProtoModID_IsValid(int value);
const stSendLimitPetActivityData_ProtoModID stSendLimitPetActivityData_ProtoModID_ProtoModID_MIN = stSendLimitPetActivityData_ProtoModID_ModID;
const stSendLimitPetActivityData_ProtoModID stSendLimitPetActivityData_ProtoModID_ProtoModID_MAX = stSendLimitPetActivityData_ProtoModID_ModID;
const int stSendLimitPetActivityData_ProtoModID_ProtoModID_ARRAYSIZE = stSendLimitPetActivityData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendLimitPetActivityData_ProtoModID_descriptor();
inline const ::std::string& stSendLimitPetActivityData_ProtoModID_Name(stSendLimitPetActivityData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendLimitPetActivityData_ProtoModID_descriptor(), value);
}
inline bool stSendLimitPetActivityData_ProtoModID_Parse(
    const ::std::string& name, stSendLimitPetActivityData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendLimitPetActivityData_ProtoModID>(
    stSendLimitPetActivityData_ProtoModID_descriptor(), name, value);
}
enum stSendLimitPetActivityData_ProtoFunID {
  stSendLimitPetActivityData_ProtoFunID_FunID = 34
};
bool stSendLimitPetActivityData_ProtoFunID_IsValid(int value);
const stSendLimitPetActivityData_ProtoFunID stSendLimitPetActivityData_ProtoFunID_ProtoFunID_MIN = stSendLimitPetActivityData_ProtoFunID_FunID;
const stSendLimitPetActivityData_ProtoFunID stSendLimitPetActivityData_ProtoFunID_ProtoFunID_MAX = stSendLimitPetActivityData_ProtoFunID_FunID;
const int stSendLimitPetActivityData_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendLimitPetActivityData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendLimitPetActivityData_ProtoFunID_descriptor();
inline const ::std::string& stSendLimitPetActivityData_ProtoFunID_Name(stSendLimitPetActivityData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendLimitPetActivityData_ProtoFunID_descriptor(), value);
}
inline bool stSendLimitPetActivityData_ProtoFunID_Parse(
    const ::std::string& name, stSendLimitPetActivityData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendLimitPetActivityData_ProtoFunID>(
    stSendLimitPetActivityData_ProtoFunID_descriptor(), name, value);
}
enum stSendShutDown_ProtoModID {
  stSendShutDown_ProtoModID_ModID = 6
};
bool stSendShutDown_ProtoModID_IsValid(int value);
const stSendShutDown_ProtoModID stSendShutDown_ProtoModID_ProtoModID_MIN = stSendShutDown_ProtoModID_ModID;
const stSendShutDown_ProtoModID stSendShutDown_ProtoModID_ProtoModID_MAX = stSendShutDown_ProtoModID_ModID;
const int stSendShutDown_ProtoModID_ProtoModID_ARRAYSIZE = stSendShutDown_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendShutDown_ProtoModID_descriptor();
inline const ::std::string& stSendShutDown_ProtoModID_Name(stSendShutDown_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendShutDown_ProtoModID_descriptor(), value);
}
inline bool stSendShutDown_ProtoModID_Parse(
    const ::std::string& name, stSendShutDown_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendShutDown_ProtoModID>(
    stSendShutDown_ProtoModID_descriptor(), name, value);
}
enum stSendShutDown_ProtoFunID {
  stSendShutDown_ProtoFunID_FunID = 35
};
bool stSendShutDown_ProtoFunID_IsValid(int value);
const stSendShutDown_ProtoFunID stSendShutDown_ProtoFunID_ProtoFunID_MIN = stSendShutDown_ProtoFunID_FunID;
const stSendShutDown_ProtoFunID stSendShutDown_ProtoFunID_ProtoFunID_MAX = stSendShutDown_ProtoFunID_FunID;
const int stSendShutDown_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendShutDown_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendShutDown_ProtoFunID_descriptor();
inline const ::std::string& stSendShutDown_ProtoFunID_Name(stSendShutDown_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendShutDown_ProtoFunID_descriptor(), value);
}
inline bool stSendShutDown_ProtoFunID_Parse(
    const ::std::string& name, stSendShutDown_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendShutDown_ProtoFunID>(
    stSendShutDown_ProtoFunID_descriptor(), name, value);
}
enum stWeb2GlobalQueryUserNft_ProtoModID {
  stWeb2GlobalQueryUserNft_ProtoModID_ModID = 6
};
bool stWeb2GlobalQueryUserNft_ProtoModID_IsValid(int value);
const stWeb2GlobalQueryUserNft_ProtoModID stWeb2GlobalQueryUserNft_ProtoModID_ProtoModID_MIN = stWeb2GlobalQueryUserNft_ProtoModID_ModID;
const stWeb2GlobalQueryUserNft_ProtoModID stWeb2GlobalQueryUserNft_ProtoModID_ProtoModID_MAX = stWeb2GlobalQueryUserNft_ProtoModID_ModID;
const int stWeb2GlobalQueryUserNft_ProtoModID_ProtoModID_ARRAYSIZE = stWeb2GlobalQueryUserNft_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWeb2GlobalQueryUserNft_ProtoModID_descriptor();
inline const ::std::string& stWeb2GlobalQueryUserNft_ProtoModID_Name(stWeb2GlobalQueryUserNft_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWeb2GlobalQueryUserNft_ProtoModID_descriptor(), value);
}
inline bool stWeb2GlobalQueryUserNft_ProtoModID_Parse(
    const ::std::string& name, stWeb2GlobalQueryUserNft_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWeb2GlobalQueryUserNft_ProtoModID>(
    stWeb2GlobalQueryUserNft_ProtoModID_descriptor(), name, value);
}
enum stWeb2GlobalQueryUserNft_ProtoFunID {
  stWeb2GlobalQueryUserNft_ProtoFunID_FunID = 36
};
bool stWeb2GlobalQueryUserNft_ProtoFunID_IsValid(int value);
const stWeb2GlobalQueryUserNft_ProtoFunID stWeb2GlobalQueryUserNft_ProtoFunID_ProtoFunID_MIN = stWeb2GlobalQueryUserNft_ProtoFunID_FunID;
const stWeb2GlobalQueryUserNft_ProtoFunID stWeb2GlobalQueryUserNft_ProtoFunID_ProtoFunID_MAX = stWeb2GlobalQueryUserNft_ProtoFunID_FunID;
const int stWeb2GlobalQueryUserNft_ProtoFunID_ProtoFunID_ARRAYSIZE = stWeb2GlobalQueryUserNft_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWeb2GlobalQueryUserNft_ProtoFunID_descriptor();
inline const ::std::string& stWeb2GlobalQueryUserNft_ProtoFunID_Name(stWeb2GlobalQueryUserNft_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWeb2GlobalQueryUserNft_ProtoFunID_descriptor(), value);
}
inline bool stWeb2GlobalQueryUserNft_ProtoFunID_Parse(
    const ::std::string& name, stWeb2GlobalQueryUserNft_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWeb2GlobalQueryUserNft_ProtoFunID>(
    stWeb2GlobalQueryUserNft_ProtoFunID_descriptor(), name, value);
}
enum stGlobal2WebQueryUserNftResult_ProtoModID {
  stGlobal2WebQueryUserNftResult_ProtoModID_ModID = 6
};
bool stGlobal2WebQueryUserNftResult_ProtoModID_IsValid(int value);
const stGlobal2WebQueryUserNftResult_ProtoModID stGlobal2WebQueryUserNftResult_ProtoModID_ProtoModID_MIN = stGlobal2WebQueryUserNftResult_ProtoModID_ModID;
const stGlobal2WebQueryUserNftResult_ProtoModID stGlobal2WebQueryUserNftResult_ProtoModID_ProtoModID_MAX = stGlobal2WebQueryUserNftResult_ProtoModID_ModID;
const int stGlobal2WebQueryUserNftResult_ProtoModID_ProtoModID_ARRAYSIZE = stGlobal2WebQueryUserNftResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGlobal2WebQueryUserNftResult_ProtoModID_descriptor();
inline const ::std::string& stGlobal2WebQueryUserNftResult_ProtoModID_Name(stGlobal2WebQueryUserNftResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGlobal2WebQueryUserNftResult_ProtoModID_descriptor(), value);
}
inline bool stGlobal2WebQueryUserNftResult_ProtoModID_Parse(
    const ::std::string& name, stGlobal2WebQueryUserNftResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGlobal2WebQueryUserNftResult_ProtoModID>(
    stGlobal2WebQueryUserNftResult_ProtoModID_descriptor(), name, value);
}
enum stGlobal2WebQueryUserNftResult_ProtoFunID {
  stGlobal2WebQueryUserNftResult_ProtoFunID_FunID = 37
};
bool stGlobal2WebQueryUserNftResult_ProtoFunID_IsValid(int value);
const stGlobal2WebQueryUserNftResult_ProtoFunID stGlobal2WebQueryUserNftResult_ProtoFunID_ProtoFunID_MIN = stGlobal2WebQueryUserNftResult_ProtoFunID_FunID;
const stGlobal2WebQueryUserNftResult_ProtoFunID stGlobal2WebQueryUserNftResult_ProtoFunID_ProtoFunID_MAX = stGlobal2WebQueryUserNftResult_ProtoFunID_FunID;
const int stGlobal2WebQueryUserNftResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGlobal2WebQueryUserNftResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGlobal2WebQueryUserNftResult_ProtoFunID_descriptor();
inline const ::std::string& stGlobal2WebQueryUserNftResult_ProtoFunID_Name(stGlobal2WebQueryUserNftResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGlobal2WebQueryUserNftResult_ProtoFunID_descriptor(), value);
}
inline bool stGlobal2WebQueryUserNftResult_ProtoFunID_Parse(
    const ::std::string& name, stGlobal2WebQueryUserNftResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGlobal2WebQueryUserNftResult_ProtoFunID>(
    stGlobal2WebQueryUserNftResult_ProtoFunID_descriptor(), name, value);
}
enum stWeb2GlobalChangeNftItem_ProtoModID {
  stWeb2GlobalChangeNftItem_ProtoModID_ModID = 6
};
bool stWeb2GlobalChangeNftItem_ProtoModID_IsValid(int value);
const stWeb2GlobalChangeNftItem_ProtoModID stWeb2GlobalChangeNftItem_ProtoModID_ProtoModID_MIN = stWeb2GlobalChangeNftItem_ProtoModID_ModID;
const stWeb2GlobalChangeNftItem_ProtoModID stWeb2GlobalChangeNftItem_ProtoModID_ProtoModID_MAX = stWeb2GlobalChangeNftItem_ProtoModID_ModID;
const int stWeb2GlobalChangeNftItem_ProtoModID_ProtoModID_ARRAYSIZE = stWeb2GlobalChangeNftItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWeb2GlobalChangeNftItem_ProtoModID_descriptor();
inline const ::std::string& stWeb2GlobalChangeNftItem_ProtoModID_Name(stWeb2GlobalChangeNftItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWeb2GlobalChangeNftItem_ProtoModID_descriptor(), value);
}
inline bool stWeb2GlobalChangeNftItem_ProtoModID_Parse(
    const ::std::string& name, stWeb2GlobalChangeNftItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWeb2GlobalChangeNftItem_ProtoModID>(
    stWeb2GlobalChangeNftItem_ProtoModID_descriptor(), name, value);
}
enum stWeb2GlobalChangeNftItem_ProtoFunID {
  stWeb2GlobalChangeNftItem_ProtoFunID_FunID = 38
};
bool stWeb2GlobalChangeNftItem_ProtoFunID_IsValid(int value);
const stWeb2GlobalChangeNftItem_ProtoFunID stWeb2GlobalChangeNftItem_ProtoFunID_ProtoFunID_MIN = stWeb2GlobalChangeNftItem_ProtoFunID_FunID;
const stWeb2GlobalChangeNftItem_ProtoFunID stWeb2GlobalChangeNftItem_ProtoFunID_ProtoFunID_MAX = stWeb2GlobalChangeNftItem_ProtoFunID_FunID;
const int stWeb2GlobalChangeNftItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stWeb2GlobalChangeNftItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWeb2GlobalChangeNftItem_ProtoFunID_descriptor();
inline const ::std::string& stWeb2GlobalChangeNftItem_ProtoFunID_Name(stWeb2GlobalChangeNftItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWeb2GlobalChangeNftItem_ProtoFunID_descriptor(), value);
}
inline bool stWeb2GlobalChangeNftItem_ProtoFunID_Parse(
    const ::std::string& name, stWeb2GlobalChangeNftItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWeb2GlobalChangeNftItem_ProtoFunID>(
    stWeb2GlobalChangeNftItem_ProtoFunID_descriptor(), name, value);
}
enum stGlobal2WebChangeNftItemResult_ProtoModID {
  stGlobal2WebChangeNftItemResult_ProtoModID_ModID = 6
};
bool stGlobal2WebChangeNftItemResult_ProtoModID_IsValid(int value);
const stGlobal2WebChangeNftItemResult_ProtoModID stGlobal2WebChangeNftItemResult_ProtoModID_ProtoModID_MIN = stGlobal2WebChangeNftItemResult_ProtoModID_ModID;
const stGlobal2WebChangeNftItemResult_ProtoModID stGlobal2WebChangeNftItemResult_ProtoModID_ProtoModID_MAX = stGlobal2WebChangeNftItemResult_ProtoModID_ModID;
const int stGlobal2WebChangeNftItemResult_ProtoModID_ProtoModID_ARRAYSIZE = stGlobal2WebChangeNftItemResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGlobal2WebChangeNftItemResult_ProtoModID_descriptor();
inline const ::std::string& stGlobal2WebChangeNftItemResult_ProtoModID_Name(stGlobal2WebChangeNftItemResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGlobal2WebChangeNftItemResult_ProtoModID_descriptor(), value);
}
inline bool stGlobal2WebChangeNftItemResult_ProtoModID_Parse(
    const ::std::string& name, stGlobal2WebChangeNftItemResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGlobal2WebChangeNftItemResult_ProtoModID>(
    stGlobal2WebChangeNftItemResult_ProtoModID_descriptor(), name, value);
}
enum stGlobal2WebChangeNftItemResult_ProtoFunID {
  stGlobal2WebChangeNftItemResult_ProtoFunID_FunID = 39
};
bool stGlobal2WebChangeNftItemResult_ProtoFunID_IsValid(int value);
const stGlobal2WebChangeNftItemResult_ProtoFunID stGlobal2WebChangeNftItemResult_ProtoFunID_ProtoFunID_MIN = stGlobal2WebChangeNftItemResult_ProtoFunID_FunID;
const stGlobal2WebChangeNftItemResult_ProtoFunID stGlobal2WebChangeNftItemResult_ProtoFunID_ProtoFunID_MAX = stGlobal2WebChangeNftItemResult_ProtoFunID_FunID;
const int stGlobal2WebChangeNftItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGlobal2WebChangeNftItemResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGlobal2WebChangeNftItemResult_ProtoFunID_descriptor();
inline const ::std::string& stGlobal2WebChangeNftItemResult_ProtoFunID_Name(stGlobal2WebChangeNftItemResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGlobal2WebChangeNftItemResult_ProtoFunID_descriptor(), value);
}
inline bool stGlobal2WebChangeNftItemResult_ProtoFunID_Parse(
    const ::std::string& name, stGlobal2WebChangeNftItemResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGlobal2WebChangeNftItemResult_ProtoFunID>(
    stGlobal2WebChangeNftItemResult_ProtoFunID_descriptor(), name, value);
}
enum GlobalModID {
  LOGIN_MOD = 1,
  GATE_MOD = 2,
  GAME_MOD = 3,
  PLATFORM_MOD = 4,
  HTTP_MOD = 5,
  WEB_MOD = 6
};
bool GlobalModID_IsValid(int value);
const GlobalModID GlobalModID_MIN = LOGIN_MOD;
const GlobalModID GlobalModID_MAX = WEB_MOD;
const int GlobalModID_ARRAYSIZE = GlobalModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* GlobalModID_descriptor();
inline const ::std::string& GlobalModID_Name(GlobalModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    GlobalModID_descriptor(), value);
}
inline bool GlobalModID_Parse(
    const ::std::string& name, GlobalModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GlobalModID>(
    GlobalModID_descriptor(), name, value);
}
enum SaveType {
  SAVE_TIMETICK = 1,
  SAVE_LOGOUT = 2,
  SAVE_FORCE = 3,
  SAVE_CHGSVR = 4
};
bool SaveType_IsValid(int value);
const SaveType SaveType_MIN = SAVE_TIMETICK;
const SaveType SaveType_MAX = SAVE_CHGSVR;
const int SaveType_ARRAYSIZE = SaveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SaveType_descriptor();
inline const ::std::string& SaveType_Name(SaveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SaveType_descriptor(), value);
}
inline bool SaveType_Parse(
    const ::std::string& name, SaveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SaveType>(
    SaveType_descriptor(), name, value);
}
enum eLoadRoleDataType {
  eLoadData_Login = 1,
  eLoadData_ChgSvr = 2
};
bool eLoadRoleDataType_IsValid(int value);
const eLoadRoleDataType eLoadRoleDataType_MIN = eLoadData_Login;
const eLoadRoleDataType eLoadRoleDataType_MAX = eLoadData_ChgSvr;
const int eLoadRoleDataType_ARRAYSIZE = eLoadRoleDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eLoadRoleDataType_descriptor();
inline const ::std::string& eLoadRoleDataType_Name(eLoadRoleDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eLoadRoleDataType_descriptor(), value);
}
inline bool eLoadRoleDataType_Parse(
    const ::std::string& name, eLoadRoleDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eLoadRoleDataType>(
    eLoadRoleDataType_descriptor(), name, value);
}
enum eGMType {
  GMType_SendMail = 1,
  GMType_OpRedis = 2,
  GMType_SendNotice = 3,
  GMType_BatchSendMail = 4,
  GMType_ADD_GUILD_ACTIVITY_DEGREE = 5
};
bool eGMType_IsValid(int value);
const eGMType eGMType_MIN = GMType_SendMail;
const eGMType eGMType_MAX = GMType_ADD_GUILD_ACTIVITY_DEGREE;
const int eGMType_ARRAYSIZE = eGMType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eGMType_descriptor();
inline const ::std::string& eGMType_Name(eGMType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eGMType_descriptor(), value);
}
inline bool eGMType_Parse(
    const ::std::string& name, eGMType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eGMType>(
    eGMType_descriptor(), name, value);
}
enum eRealTimePKType {
  eRealTimePKType_KillAll = 1,
  eRealTimePKType_Finish = 2
};
bool eRealTimePKType_IsValid(int value);
const eRealTimePKType eRealTimePKType_MIN = eRealTimePKType_KillAll;
const eRealTimePKType eRealTimePKType_MAX = eRealTimePKType_Finish;
const int eRealTimePKType_ARRAYSIZE = eRealTimePKType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eRealTimePKType_descriptor();
inline const ::std::string& eRealTimePKType_Name(eRealTimePKType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eRealTimePKType_descriptor(), value);
}
inline bool eRealTimePKType_Parse(
    const ::std::string& name, eRealTimePKType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eRealTimePKType>(
    eRealTimePKType_descriptor(), name, value);
}
enum eRankModule_ID {
  eRankModule_Level_Rank = 1,
  eRankModule_BattlePower_Rank = 2,
  eRankModule_Copymap_Rank = 3,
  eRankModule_One2One_Rank = 4,
  eRankModule_Leitai_Rank = 5,
  eRankModule_Arena_Rank = 6
};
bool eRankModule_ID_IsValid(int value);
const eRankModule_ID eRankModule_ID_MIN = eRankModule_Level_Rank;
const eRankModule_ID eRankModule_ID_MAX = eRankModule_Arena_Rank;
const int eRankModule_ID_ARRAYSIZE = eRankModule_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* eRankModule_ID_descriptor();
inline const ::std::string& eRankModule_ID_Name(eRankModule_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    eRankModule_ID_descriptor(), value);
}
inline bool eRankModule_ID_Parse(
    const ::std::string& name, eRankModule_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eRankModule_ID>(
    eRankModule_ID_descriptor(), name, value);
}
enum eNoticeOp {
  eInsert_Notice = 1,
  eUpdate_Notice = 2
};
bool eNoticeOp_IsValid(int value);
const eNoticeOp eNoticeOp_MIN = eInsert_Notice;
const eNoticeOp eNoticeOp_MAX = eUpdate_Notice;
const int eNoticeOp_ARRAYSIZE = eNoticeOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* eNoticeOp_descriptor();
inline const ::std::string& eNoticeOp_Name(eNoticeOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    eNoticeOp_descriptor(), value);
}
inline bool eNoticeOp_Parse(
    const ::std::string& name, eNoticeOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eNoticeOp>(
    eNoticeOp_descriptor(), name, value);
}
// ===================================================================

class stLoginGlobal : public ::google::protobuf::Message {
 public:
  stLoginGlobal();
  virtual ~stLoginGlobal();

  stLoginGlobal(const stLoginGlobal& from);

  inline stLoginGlobal& operator=(const stLoginGlobal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLoginGlobal& default_instance();

  void Swap(stLoginGlobal* other);

  // implements Message ----------------------------------------------

  stLoginGlobal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLoginGlobal& from);
  void MergeFrom(const stLoginGlobal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLoginGlobal_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLoginGlobal_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLoginGlobal_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLoginGlobal_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLoginGlobal_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLoginGlobal_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLoginGlobal_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLoginGlobal_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLoginGlobal_ProtoModID_Parse(name, value);
  }

  typedef stLoginGlobal_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLoginGlobal_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLoginGlobal_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLoginGlobal_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLoginGlobal_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLoginGlobal_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLoginGlobal_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLoginGlobal_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLoginGlobal_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 svrType = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // optional uint32 svrID = 2;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvrIDFieldNumber = 2;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stLoginGlobal)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 svrid_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stLoginGlobal* default_instance_;
};
// -------------------------------------------------------------------

class stCreateRole : public ::google::protobuf::Message {
 public:
  stCreateRole();
  virtual ~stCreateRole();

  stCreateRole(const stCreateRole& from);

  inline stCreateRole& operator=(const stCreateRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCreateRole& default_instance();

  void Swap(stCreateRole* other);

  // implements Message ----------------------------------------------

  stCreateRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCreateRole& from);
  void MergeFrom(const stCreateRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCreateRole_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCreateRole_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCreateRole_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCreateRole_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCreateRole_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCreateRole_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCreateRole_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCreateRole_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCreateRole_ProtoModID_Parse(name, value);
  }

  typedef stCreateRole_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCreateRole_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCreateRole_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCreateRole_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCreateRole_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCreateRole_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCreateRole_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCreateRole_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCreateRole_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 gateID = 3;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateIDFieldNumber = 3;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 headID = 6;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 6;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 faceID = 7;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceIDFieldNumber = 7;
  inline ::google::protobuf::uint32 faceid() const;
  inline void set_faceid(::google::protobuf::uint32 value);

  // optional string clientIP = 8;
  inline bool has_clientip() const;
  inline void clear_clientip();
  static const int kClientIPFieldNumber = 8;
  inline const ::std::string& clientip() const;
  inline void set_clientip(const ::std::string& value);
  inline void set_clientip(const char* value);
  inline void set_clientip(const char* value, size_t size);
  inline ::std::string* mutable_clientip();
  inline ::std::string* release_clientip();
  inline void set_allocated_clientip(::std::string* clientip);

  // optional string deviceID = 9;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 9;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional uint32 opID = 10;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpIDFieldNumber = 10;
  inline ::google::protobuf::uint32 opid() const;
  inline void set_opid(::google::protobuf::uint32 value);

  // optional string channelID = 11;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIDFieldNumber = 11;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // optional uint32 serverID = 12;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 12;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stCreateRole)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_clientip();
  inline void clear_has_clientip();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_opid();
  inline void clear_has_opid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* name_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 headid_;
  ::std::string* clientip_;
  ::google::protobuf::uint32 faceid_;
  ::google::protobuf::uint32 opid_;
  ::std::string* deviceid_;
  ::std::string* channelid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCreateRole* default_instance_;
};
// -------------------------------------------------------------------

class stCreateRoleResult : public ::google::protobuf::Message {
 public:
  stCreateRoleResult();
  virtual ~stCreateRoleResult();

  stCreateRoleResult(const stCreateRoleResult& from);

  inline stCreateRoleResult& operator=(const stCreateRoleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCreateRoleResult& default_instance();

  void Swap(stCreateRoleResult* other);

  // implements Message ----------------------------------------------

  stCreateRoleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCreateRoleResult& from);
  void MergeFrom(const stCreateRoleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCreateRoleResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCreateRoleResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCreateRoleResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCreateRoleResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCreateRoleResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCreateRoleResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCreateRoleResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCreateRoleResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCreateRoleResult_ProtoModID_Parse(name, value);
  }

  typedef stCreateRoleResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCreateRoleResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCreateRoleResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCreateRoleResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCreateRoleResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCreateRoleResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCreateRoleResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCreateRoleResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCreateRoleResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 retCode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 charID = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 6;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 6;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 7;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 7;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 serverID = 8;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 8;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // optional uint32 createTime = 9;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stCreateRoleResult)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 retcode_;
  ::google::protobuf::uint32 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 createtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCreateRoleResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqSnapData : public ::google::protobuf::Message {
 public:
  stReqSnapData();
  virtual ~stReqSnapData();

  stReqSnapData(const stReqSnapData& from);

  inline stReqSnapData& operator=(const stReqSnapData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSnapData& default_instance();

  void Swap(stReqSnapData* other);

  // implements Message ----------------------------------------------

  stReqSnapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSnapData& from);
  void MergeFrom(const stReqSnapData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSnapData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSnapData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSnapData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSnapData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSnapData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSnapData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSnapData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSnapData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSnapData_ProtoModID_Parse(name, value);
  }

  typedef stReqSnapData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSnapData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSnapData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSnapData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSnapData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSnapData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSnapData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSnapData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSnapData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 gateID = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateIDFieldNumber = 2;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string deviceID = 4;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 4;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional uint32 opID = 5;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpIDFieldNumber = 5;
  inline ::google::protobuf::uint32 opid() const;
  inline void set_opid(::google::protobuf::uint32 value);

  // optional uint32 serverID = 6;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 6;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqSnapData)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_opid();
  inline void clear_has_opid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* ip_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 opid_;
  ::std::string* deviceid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqSnapData* default_instance_;
};
// -------------------------------------------------------------------

class stSnapData : public ::google::protobuf::Message {
 public:
  stSnapData();
  virtual ~stSnapData();

  stSnapData(const stSnapData& from);

  inline stSnapData& operator=(const stSnapData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSnapData& default_instance();

  void Swap(stSnapData* other);

  // implements Message ----------------------------------------------

  stSnapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSnapData& from);
  void MergeFrom(const stSnapData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional string account = 4;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 4;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 serverID = 7;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 7;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSnapData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::std::string* account_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSnapData* default_instance_;
};
// -------------------------------------------------------------------

class stRetSnapData : public ::google::protobuf::Message {
 public:
  stRetSnapData();
  virtual ~stRetSnapData();

  stRetSnapData(const stRetSnapData& from);

  inline stRetSnapData& operator=(const stRetSnapData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetSnapData& default_instance();

  void Swap(stRetSnapData* other);

  // implements Message ----------------------------------------------

  stRetSnapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetSnapData& from);
  void MergeFrom(const stRetSnapData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetSnapData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetSnapData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetSnapData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetSnapData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetSnapData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetSnapData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetSnapData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetSnapData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetSnapData_ProtoModID_Parse(name, value);
  }

  typedef stRetSnapData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetSnapData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetSnapData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetSnapData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetSnapData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetSnapData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetSnapData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetSnapData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetSnapData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stSnapData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Global::stSnapData& data(int index) const;
  inline ::Global::stSnapData* mutable_data(int index);
  inline ::Global::stSnapData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stSnapData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stSnapData >*
      mutable_data();

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:Global.stRetSnapData)
 private:
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stSnapData > data_;
  ::std::string* account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetSnapData* default_instance_;
};
// -------------------------------------------------------------------

class stReqLoadData : public ::google::protobuf::Message {
 public:
  stReqLoadData();
  virtual ~stReqLoadData();

  stReqLoadData(const stReqLoadData& from);

  inline stReqLoadData& operator=(const stReqLoadData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLoadData& default_instance();

  void Swap(stReqLoadData* other);

  // implements Message ----------------------------------------------

  stReqLoadData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLoadData& from);
  void MergeFrom(const stReqLoadData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLoadData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLoadData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLoadData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLoadData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLoadData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLoadData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLoadData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLoadData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLoadData_ProtoModID_Parse(name, value);
  }

  typedef stReqLoadData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLoadData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLoadData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLoadData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLoadData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLoadData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLoadData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLoadData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLoadData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 gameSvrID = 1;
  inline bool has_gamesvrid() const;
  inline void clear_gamesvrid();
  static const int kGameSvrIDFieldNumber = 1;
  inline ::google::protobuf::uint32 gamesvrid() const;
  inline void set_gamesvrid(::google::protobuf::uint32 value);

  // optional uint32 gateSvrID = 2;
  inline bool has_gatesvrid() const;
  inline void clear_gatesvrid();
  static const int kGateSvrIDFieldNumber = 2;
  inline ::google::protobuf::uint32 gatesvrid() const;
  inline void set_gatesvrid(::google::protobuf::uint32 value);

  // optional string account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 charID = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 4;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string deviceID = 6;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 6;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional string channelID = 7;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIDFieldNumber = 7;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // optional string netIP = 8;
  inline bool has_netip() const;
  inline void clear_netip();
  static const int kNetIPFieldNumber = 8;
  inline const ::std::string& netip() const;
  inline void set_netip(const ::std::string& value);
  inline void set_netip(const char* value);
  inline void set_netip(const char* value, size_t size);
  inline ::std::string* mutable_netip();
  inline ::std::string* release_netip();
  inline void set_allocated_netip(::std::string* netip);

  // @@protoc_insertion_point(class_scope:Global.stReqLoadData)
 private:
  inline void set_has_gamesvrid();
  inline void clear_has_gamesvrid();
  inline void set_has_gatesvrid();
  inline void clear_has_gatesvrid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_netip();
  inline void clear_has_netip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gamesvrid_;
  ::google::protobuf::uint32 gatesvrid_;
  ::std::string* account_;
  ::std::string* ip_;
  ::std::string* deviceid_;
  ::std::string* channelid_;
  ::std::string* netip_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqLoadData* default_instance_;
};
// -------------------------------------------------------------------

class stGateForwardProto : public ::google::protobuf::Message {
 public:
  stGateForwardProto();
  virtual ~stGateForwardProto();

  stGateForwardProto(const stGateForwardProto& from);

  inline stGateForwardProto& operator=(const stGateForwardProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGateForwardProto& default_instance();

  void Swap(stGateForwardProto* other);

  // implements Message ----------------------------------------------

  stGateForwardProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGateForwardProto& from);
  void MergeFrom(const stGateForwardProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGateForwardProto_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGateForwardProto_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGateForwardProto_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGateForwardProto_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGateForwardProto_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGateForwardProto_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGateForwardProto_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGateForwardProto_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGateForwardProto_ProtoModID_Parse(name, value);
  }

  typedef stGateForwardProto_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGateForwardProto_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGateForwardProto_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGateForwardProto_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGateForwardProto_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGateForwardProto_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGateForwardProto_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGateForwardProto_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGateForwardProto_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 modID = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 funID = 3;
  inline bool has_funid() const;
  inline void clear_funid();
  static const int kFunIDFieldNumber = 3;
  inline ::google::protobuf::uint32 funid() const;
  inline void set_funid(::google::protobuf::uint32 value);

  // optional uint32 cmdLen = 4;
  inline bool has_cmdlen() const;
  inline void clear_cmdlen();
  static const int kCmdLenFieldNumber = 4;
  inline ::google::protobuf::uint32 cmdlen() const;
  inline void set_cmdlen(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Global.stGateForwardProto)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_funid();
  inline void clear_has_funid();
  inline void set_has_cmdlen();
  inline void clear_has_cmdlen();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 funid_;
  ::google::protobuf::uint32 cmdlen_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGateForwardProto* default_instance_;
};
// -------------------------------------------------------------------

class stForwardProto2Me : public ::google::protobuf::Message {
 public:
  stForwardProto2Me();
  virtual ~stForwardProto2Me();

  stForwardProto2Me(const stForwardProto2Me& from);

  inline stForwardProto2Me& operator=(const stForwardProto2Me& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stForwardProto2Me& default_instance();

  void Swap(stForwardProto2Me* other);

  // implements Message ----------------------------------------------

  stForwardProto2Me* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stForwardProto2Me& from);
  void MergeFrom(const stForwardProto2Me& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stForwardProto2Me_ProtoModID ProtoModID;
  static const ProtoModID ModID = stForwardProto2Me_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stForwardProto2Me_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stForwardProto2Me_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stForwardProto2Me_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stForwardProto2Me_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stForwardProto2Me_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stForwardProto2Me_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stForwardProto2Me_ProtoModID_Parse(name, value);
  }

  typedef stForwardProto2Me_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stForwardProto2Me_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stForwardProto2Me_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stForwardProto2Me_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stForwardProto2Me_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stForwardProto2Me_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stForwardProto2Me_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stForwardProto2Me_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stForwardProto2Me_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 modID = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 funID = 3;
  inline bool has_funid() const;
  inline void clear_funid();
  static const int kFunIDFieldNumber = 3;
  inline ::google::protobuf::uint32 funid() const;
  inline void set_funid(::google::protobuf::uint32 value);

  // optional uint32 cmdLen = 4;
  inline bool has_cmdlen() const;
  inline void clear_cmdlen();
  static const int kCmdLenFieldNumber = 4;
  inline ::google::protobuf::uint32 cmdlen() const;
  inline void set_cmdlen(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Global.stForwardProto2Me)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_funid();
  inline void clear_has_funid();
  inline void set_has_cmdlen();
  inline void clear_has_cmdlen();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 funid_;
  ::google::protobuf::uint32 cmdlen_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stForwardProto2Me* default_instance_;
};
// -------------------------------------------------------------------

class stBroadcastProto2AllUser : public ::google::protobuf::Message {
 public:
  stBroadcastProto2AllUser();
  virtual ~stBroadcastProto2AllUser();

  stBroadcastProto2AllUser(const stBroadcastProto2AllUser& from);

  inline stBroadcastProto2AllUser& operator=(const stBroadcastProto2AllUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBroadcastProto2AllUser& default_instance();

  void Swap(stBroadcastProto2AllUser* other);

  // implements Message ----------------------------------------------

  stBroadcastProto2AllUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBroadcastProto2AllUser& from);
  void MergeFrom(const stBroadcastProto2AllUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBroadcastProto2AllUser_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBroadcastProto2AllUser_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBroadcastProto2AllUser_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBroadcastProto2AllUser_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBroadcastProto2AllUser_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBroadcastProto2AllUser_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBroadcastProto2AllUser_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBroadcastProto2AllUser_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBroadcastProto2AllUser_ProtoModID_Parse(name, value);
  }

  typedef stBroadcastProto2AllUser_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBroadcastProto2AllUser_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBroadcastProto2AllUser_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBroadcastProto2AllUser_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBroadcastProto2AllUser_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBroadcastProto2AllUser_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBroadcastProto2AllUser_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBroadcastProto2AllUser_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBroadcastProto2AllUser_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 modID = 1;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 1;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 funID = 2;
  inline bool has_funid() const;
  inline void clear_funid();
  static const int kFunIDFieldNumber = 2;
  inline ::google::protobuf::uint32 funid() const;
  inline void set_funid(::google::protobuf::uint32 value);

  // optional uint32 cmdLen = 3;
  inline bool has_cmdlen() const;
  inline void clear_cmdlen();
  static const int kCmdLenFieldNumber = 3;
  inline ::google::protobuf::uint32 cmdlen() const;
  inline void set_cmdlen(::google::protobuf::uint32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Global.stBroadcastProto2AllUser)
 private:
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_funid();
  inline void clear_has_funid();
  inline void set_has_cmdlen();
  inline void clear_has_cmdlen();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 funid_;
  ::std::string* data_;
  ::google::protobuf::uint32 cmdlen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stBroadcastProto2AllUser* default_instance_;
};
// -------------------------------------------------------------------

class stLoginGlobalFail : public ::google::protobuf::Message {
 public:
  stLoginGlobalFail();
  virtual ~stLoginGlobalFail();

  stLoginGlobalFail(const stLoginGlobalFail& from);

  inline stLoginGlobalFail& operator=(const stLoginGlobalFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLoginGlobalFail& default_instance();

  void Swap(stLoginGlobalFail* other);

  // implements Message ----------------------------------------------

  stLoginGlobalFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLoginGlobalFail& from);
  void MergeFrom(const stLoginGlobalFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLoginGlobalFail_FailReason FailReason;
  static const FailReason HAS_LOGIN_IN = stLoginGlobalFail_FailReason_HAS_LOGIN_IN;
  static const FailReason CREATE_FAIL = stLoginGlobalFail_FailReason_CREATE_FAIL;
  static const FailReason LOAD_DATA_FAIL = stLoginGlobalFail_FailReason_LOAD_DATA_FAIL;
  static const FailReason FORBID_LOGIN = stLoginGlobalFail_FailReason_FORBID_LOGIN;
  static const FailReason OTHER = stLoginGlobalFail_FailReason_OTHER;
  static inline bool FailReason_IsValid(int value) {
    return stLoginGlobalFail_FailReason_IsValid(value);
  }
  static const FailReason FailReason_MIN =
    stLoginGlobalFail_FailReason_FailReason_MIN;
  static const FailReason FailReason_MAX =
    stLoginGlobalFail_FailReason_FailReason_MAX;
  static const int FailReason_ARRAYSIZE =
    stLoginGlobalFail_FailReason_FailReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FailReason_descriptor() {
    return stLoginGlobalFail_FailReason_descriptor();
  }
  static inline const ::std::string& FailReason_Name(FailReason value) {
    return stLoginGlobalFail_FailReason_Name(value);
  }
  static inline bool FailReason_Parse(const ::std::string& name,
      FailReason* value) {
    return stLoginGlobalFail_FailReason_Parse(name, value);
  }

  typedef stLoginGlobalFail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLoginGlobalFail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLoginGlobalFail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLoginGlobalFail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLoginGlobalFail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLoginGlobalFail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLoginGlobalFail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLoginGlobalFail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLoginGlobalFail_ProtoModID_Parse(name, value);
  }

  typedef stLoginGlobalFail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLoginGlobalFail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLoginGlobalFail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLoginGlobalFail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLoginGlobalFail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLoginGlobalFail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLoginGlobalFail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLoginGlobalFail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLoginGlobalFail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional .Global.stLoginGlobalFail.FailReason erroCode = 2;
  inline bool has_errocode() const;
  inline void clear_errocode();
  static const int kErroCodeFieldNumber = 2;
  inline ::Global::stLoginGlobalFail_FailReason errocode() const;
  inline void set_errocode(::Global::stLoginGlobalFail_FailReason value);

  // @@protoc_insertion_point(class_scope:Global.stLoginGlobalFail)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_errocode();
  inline void clear_has_errocode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  int errocode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stLoginGlobalFail* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyLoginOut : public ::google::protobuf::Message {
 public:
  stNotifyLoginOut();
  virtual ~stNotifyLoginOut();

  stNotifyLoginOut(const stNotifyLoginOut& from);

  inline stNotifyLoginOut& operator=(const stNotifyLoginOut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyLoginOut& default_instance();

  void Swap(stNotifyLoginOut* other);

  // implements Message ----------------------------------------------

  stNotifyLoginOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyLoginOut& from);
  void MergeFrom(const stNotifyLoginOut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyLoginOut_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyLoginOut_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyLoginOut_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyLoginOut_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyLoginOut_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyLoginOut_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyLoginOut_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyLoginOut_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyLoginOut_ProtoModID_Parse(name, value);
  }

  typedef stNotifyLoginOut_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyLoginOut_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyLoginOut_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyLoginOut_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyLoginOut_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyLoginOut_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyLoginOut_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyLoginOut_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyLoginOut_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:Global.stNotifyLoginOut)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyLoginOut* default_instance_;
};
// -------------------------------------------------------------------

class stGameSvrStartUp : public ::google::protobuf::Message {
 public:
  stGameSvrStartUp();
  virtual ~stGameSvrStartUp();

  stGameSvrStartUp(const stGameSvrStartUp& from);

  inline stGameSvrStartUp& operator=(const stGameSvrStartUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGameSvrStartUp& default_instance();

  void Swap(stGameSvrStartUp* other);

  // implements Message ----------------------------------------------

  stGameSvrStartUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGameSvrStartUp& from);
  void MergeFrom(const stGameSvrStartUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGameSvrStartUp_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGameSvrStartUp_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGameSvrStartUp_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGameSvrStartUp_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGameSvrStartUp_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGameSvrStartUp_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGameSvrStartUp_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGameSvrStartUp_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGameSvrStartUp_ProtoModID_Parse(name, value);
  }

  typedef stGameSvrStartUp_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGameSvrStartUp_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGameSvrStartUp_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGameSvrStartUp_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGameSvrStartUp_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGameSvrStartUp_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGameSvrStartUp_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGameSvrStartUp_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGameSvrStartUp_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 svrID = 1;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvrIDFieldNumber = 1;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGameSvrStartUp)
 private:
  inline void set_has_svrid();
  inline void clear_has_svrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGameSvrStartUp* default_instance_;
};
// -------------------------------------------------------------------

class stKillUserOut : public ::google::protobuf::Message {
 public:
  stKillUserOut();
  virtual ~stKillUserOut();

  stKillUserOut(const stKillUserOut& from);

  inline stKillUserOut& operator=(const stKillUserOut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stKillUserOut& default_instance();

  void Swap(stKillUserOut* other);

  // implements Message ----------------------------------------------

  stKillUserOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stKillUserOut& from);
  void MergeFrom(const stKillUserOut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stKillUserOut_ProtoModID ProtoModID;
  static const ProtoModID ModID = stKillUserOut_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stKillUserOut_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stKillUserOut_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stKillUserOut_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stKillUserOut_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stKillUserOut_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stKillUserOut_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stKillUserOut_ProtoModID_Parse(name, value);
  }

  typedef stKillUserOut_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stKillUserOut_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stKillUserOut_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stKillUserOut_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stKillUserOut_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stKillUserOut_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stKillUserOut_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stKillUserOut_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stKillUserOut_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stKillUserOut)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stKillUserOut* default_instance_;
};
// -------------------------------------------------------------------

class stServerCfgPair : public ::google::protobuf::Message {
 public:
  stServerCfgPair();
  virtual ~stServerCfgPair();

  stServerCfgPair(const stServerCfgPair& from);

  inline stServerCfgPair& operator=(const stServerCfgPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stServerCfgPair& default_instance();

  void Swap(stServerCfgPair* other);

  // implements Message ----------------------------------------------

  stServerCfgPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stServerCfgPair& from);
  void MergeFrom(const stServerCfgPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Global.stServerCfgPair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stServerCfgPair* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyGateSvrCfg : public ::google::protobuf::Message {
 public:
  stNotifyGateSvrCfg();
  virtual ~stNotifyGateSvrCfg();

  stNotifyGateSvrCfg(const stNotifyGateSvrCfg& from);

  inline stNotifyGateSvrCfg& operator=(const stNotifyGateSvrCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyGateSvrCfg& default_instance();

  void Swap(stNotifyGateSvrCfg* other);

  // implements Message ----------------------------------------------

  stNotifyGateSvrCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyGateSvrCfg& from);
  void MergeFrom(const stNotifyGateSvrCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyGateSvrCfg_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyGateSvrCfg_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyGateSvrCfg_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyGateSvrCfg_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyGateSvrCfg_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyGateSvrCfg_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyGateSvrCfg_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyGateSvrCfg_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyGateSvrCfg_ProtoModID_Parse(name, value);
  }

  typedef stNotifyGateSvrCfg_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyGateSvrCfg_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyGateSvrCfg_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyGateSvrCfg_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyGateSvrCfg_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyGateSvrCfg_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyGateSvrCfg_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyGateSvrCfg_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyGateSvrCfg_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stServerCfgPair cfgPair = 1;
  inline int cfgpair_size() const;
  inline void clear_cfgpair();
  static const int kCfgPairFieldNumber = 1;
  inline const ::Global::stServerCfgPair& cfgpair(int index) const;
  inline ::Global::stServerCfgPair* mutable_cfgpair(int index);
  inline ::Global::stServerCfgPair* add_cfgpair();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >&
      cfgpair() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >*
      mutable_cfgpair();

  // @@protoc_insertion_point(class_scope:Global.stNotifyGateSvrCfg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair > cfgpair_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyGateSvrCfg* default_instance_;
};
// -------------------------------------------------------------------

class stReloginGlobal : public ::google::protobuf::Message {
 public:
  stReloginGlobal();
  virtual ~stReloginGlobal();

  stReloginGlobal(const stReloginGlobal& from);

  inline stReloginGlobal& operator=(const stReloginGlobal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReloginGlobal& default_instance();

  void Swap(stReloginGlobal* other);

  // implements Message ----------------------------------------------

  stReloginGlobal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReloginGlobal& from);
  void MergeFrom(const stReloginGlobal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReloginGlobal_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReloginGlobal_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReloginGlobal_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReloginGlobal_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReloginGlobal_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReloginGlobal_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReloginGlobal_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReloginGlobal_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReloginGlobal_ProtoModID_Parse(name, value);
  }

  typedef stReloginGlobal_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReloginGlobal_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReloginGlobal_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReloginGlobal_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReloginGlobal_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReloginGlobal_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReloginGlobal_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReloginGlobal_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReloginGlobal_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string device = 2;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 2;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // optional uint32 charID = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 4;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 4;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:Global.stReloginGlobal)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::std::string* device_;
  ::std::string* account_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReloginGlobal* default_instance_;
};
// -------------------------------------------------------------------

class stPlayerAutoConnect : public ::google::protobuf::Message {
 public:
  stPlayerAutoConnect();
  virtual ~stPlayerAutoConnect();

  stPlayerAutoConnect(const stPlayerAutoConnect& from);

  inline stPlayerAutoConnect& operator=(const stPlayerAutoConnect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPlayerAutoConnect& default_instance();

  void Swap(stPlayerAutoConnect* other);

  // implements Message ----------------------------------------------

  stPlayerAutoConnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPlayerAutoConnect& from);
  void MergeFrom(const stPlayerAutoConnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPlayerAutoConnect_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPlayerAutoConnect_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPlayerAutoConnect_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPlayerAutoConnect_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPlayerAutoConnect_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPlayerAutoConnect_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPlayerAutoConnect_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPlayerAutoConnect_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPlayerAutoConnect_ProtoModID_Parse(name, value);
  }

  typedef stPlayerAutoConnect_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPlayerAutoConnect_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPlayerAutoConnect_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPlayerAutoConnect_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPlayerAutoConnect_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPlayerAutoConnect_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPlayerAutoConnect_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPlayerAutoConnect_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPlayerAutoConnect_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string device = 2;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 2;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // optional uint32 charID = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 4;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 4;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:Global.stPlayerAutoConnect)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::std::string* device_;
  ::std::string* account_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stPlayerAutoConnect* default_instance_;
};
// -------------------------------------------------------------------

class stClientLostConnect : public ::google::protobuf::Message {
 public:
  stClientLostConnect();
  virtual ~stClientLostConnect();

  stClientLostConnect(const stClientLostConnect& from);

  inline stClientLostConnect& operator=(const stClientLostConnect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stClientLostConnect& default_instance();

  void Swap(stClientLostConnect* other);

  // implements Message ----------------------------------------------

  stClientLostConnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stClientLostConnect& from);
  void MergeFrom(const stClientLostConnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stClientLostConnect_ProtoModID ProtoModID;
  static const ProtoModID ModID = stClientLostConnect_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stClientLostConnect_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stClientLostConnect_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stClientLostConnect_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stClientLostConnect_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stClientLostConnect_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stClientLostConnect_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stClientLostConnect_ProtoModID_Parse(name, value);
  }

  typedef stClientLostConnect_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stClientLostConnect_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stClientLostConnect_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stClientLostConnect_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stClientLostConnect_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stClientLostConnect_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stClientLostConnect_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stClientLostConnect_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stClientLostConnect_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string account = 1;
  inline int account_size() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account(int index) const;
  inline ::std::string* mutable_account(int index);
  inline void set_account(int index, const ::std::string& value);
  inline void set_account(int index, const char* value);
  inline void set_account(int index, const char* value, size_t size);
  inline ::std::string* add_account();
  inline void add_account(const ::std::string& value);
  inline void add_account(const char* value);
  inline void add_account(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& account() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_account();

  // @@protoc_insertion_point(class_scope:Global.stClientLostConnect)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stClientLostConnect* default_instance_;
};
// -------------------------------------------------------------------

class stAskIsNewAccount : public ::google::protobuf::Message {
 public:
  stAskIsNewAccount();
  virtual ~stAskIsNewAccount();

  stAskIsNewAccount(const stAskIsNewAccount& from);

  inline stAskIsNewAccount& operator=(const stAskIsNewAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAskIsNewAccount& default_instance();

  void Swap(stAskIsNewAccount* other);

  // implements Message ----------------------------------------------

  stAskIsNewAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAskIsNewAccount& from);
  void MergeFrom(const stAskIsNewAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAskIsNewAccount_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAskIsNewAccount_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAskIsNewAccount_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAskIsNewAccount_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAskIsNewAccount_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAskIsNewAccount_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAskIsNewAccount_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAskIsNewAccount_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAskIsNewAccount_ProtoModID_Parse(name, value);
  }

  typedef stAskIsNewAccount_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAskIsNewAccount_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAskIsNewAccount_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAskIsNewAccount_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAskIsNewAccount_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAskIsNewAccount_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAskIsNewAccount_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAskIsNewAccount_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAskIsNewAccount_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:Global.stAskIsNewAccount)
 private:
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stAskIsNewAccount* default_instance_;
};
// -------------------------------------------------------------------

class stIsNewAccount : public ::google::protobuf::Message {
 public:
  stIsNewAccount();
  virtual ~stIsNewAccount();

  stIsNewAccount(const stIsNewAccount& from);

  inline stIsNewAccount& operator=(const stIsNewAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stIsNewAccount& default_instance();

  void Swap(stIsNewAccount* other);

  // implements Message ----------------------------------------------

  stIsNewAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stIsNewAccount& from);
  void MergeFrom(const stIsNewAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stIsNewAccount_ProtoModID ProtoModID;
  static const ProtoModID ModID = stIsNewAccount_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stIsNewAccount_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stIsNewAccount_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stIsNewAccount_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stIsNewAccount_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stIsNewAccount_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stIsNewAccount_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stIsNewAccount_ProtoModID_Parse(name, value);
  }

  typedef stIsNewAccount_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stIsNewAccount_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stIsNewAccount_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stIsNewAccount_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stIsNewAccount_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stIsNewAccount_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stIsNewAccount_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stIsNewAccount_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stIsNewAccount_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool isNew = 1;
  inline bool has_isnew() const;
  inline void clear_isnew();
  static const int kIsNewFieldNumber = 1;
  inline bool isnew() const;
  inline void set_isnew(bool value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:Global.stIsNewAccount)
 private:
  inline void set_has_isnew();
  inline void clear_has_isnew();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  bool isnew_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stIsNewAccount* default_instance_;
};
// -------------------------------------------------------------------

class stSaveRoleInfo : public ::google::protobuf::Message {
 public:
  stSaveRoleInfo();
  virtual ~stSaveRoleInfo();

  stSaveRoleInfo(const stSaveRoleInfo& from);

  inline stSaveRoleInfo& operator=(const stSaveRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSaveRoleInfo& default_instance();

  void Swap(stSaveRoleInfo* other);

  // implements Message ----------------------------------------------

  stSaveRoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSaveRoleInfo& from);
  void MergeFrom(const stSaveRoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSaveRoleInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSaveRoleInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSaveRoleInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSaveRoleInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSaveRoleInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSaveRoleInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSaveRoleInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSaveRoleInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSaveRoleInfo_ProtoModID_Parse(name, value);
  }

  typedef stSaveRoleInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSaveRoleInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSaveRoleInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSaveRoleInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSaveRoleInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSaveRoleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSaveRoleInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSaveRoleInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSaveRoleInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.SaveType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Global::SaveType type() const;
  inline void set_type(::Global::SaveType value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 gameID = 3;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 3;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // optional string account = 4;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 4;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 dataSize = 5;
  inline bool has_datasize() const;
  inline void clear_datasize();
  static const int kDataSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 datasize() const;
  inline void set_datasize(::google::protobuf::uint32 value);

  // optional bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Global.stSaveRoleInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_datasize();
  inline void clear_has_datasize();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 charid_;
  ::std::string* account_;
  ::google::protobuf::uint32 gameid_;
  ::google::protobuf::uint32 datasize_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSaveRoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetRoleInfo : public ::google::protobuf::Message {
 public:
  stRetRoleInfo();
  virtual ~stRetRoleInfo();

  stRetRoleInfo(const stRetRoleInfo& from);

  inline stRetRoleInfo& operator=(const stRetRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRoleInfo& default_instance();

  void Swap(stRetRoleInfo* other);

  // implements Message ----------------------------------------------

  stRetRoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRoleInfo& from);
  void MergeFrom(const stRetRoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRoleInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRoleInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRoleInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRoleInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRoleInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRoleInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRoleInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRoleInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRoleInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetRoleInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRoleInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRoleInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRoleInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRoleInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRoleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRoleInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRoleInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRoleInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 gateID = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateIDFieldNumber = 2;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string account = 4;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 4;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 dataSize = 5;
  inline bool has_datasize() const;
  inline void clear_datasize();
  static const int kDataSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 datasize() const;
  inline void set_datasize(::google::protobuf::uint32 value);

  // optional bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional .Global.eLoadRoleDataType eloadDataType = 7;
  inline bool has_eloaddatatype() const;
  inline void clear_eloaddatatype();
  static const int kEloadDataTypeFieldNumber = 7;
  inline ::Global::eLoadRoleDataType eloaddatatype() const;
  inline void set_eloaddatatype(::Global::eLoadRoleDataType value);

  // optional string deviceID = 8;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 8;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional string channelID = 9;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIDFieldNumber = 9;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // optional string netIP = 10;
  inline bool has_netip() const;
  inline void clear_netip();
  static const int kNetIPFieldNumber = 10;
  inline const ::std::string& netip() const;
  inline void set_netip(const ::std::string& value);
  inline void set_netip(const char* value);
  inline void set_netip(const char* value, size_t size);
  inline ::std::string* mutable_netip();
  inline ::std::string* release_netip();
  inline void set_allocated_netip(::std::string* netip);

  // @@protoc_insertion_point(class_scope:Global.stRetRoleInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_datasize();
  inline void clear_has_datasize();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_eloaddatatype();
  inline void clear_has_eloaddatatype();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_netip();
  inline void clear_has_netip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 gateid_;
  ::std::string* ip_;
  ::std::string* account_;
  ::std::string* data_;
  ::google::protobuf::uint32 datasize_;
  int eloaddatatype_;
  ::std::string* deviceid_;
  ::std::string* channelid_;
  ::std::string* netip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetRoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class stUserEnterMapSuccess : public ::google::protobuf::Message {
 public:
  stUserEnterMapSuccess();
  virtual ~stUserEnterMapSuccess();

  stUserEnterMapSuccess(const stUserEnterMapSuccess& from);

  inline stUserEnterMapSuccess& operator=(const stUserEnterMapSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserEnterMapSuccess& default_instance();

  void Swap(stUserEnterMapSuccess* other);

  // implements Message ----------------------------------------------

  stUserEnterMapSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserEnterMapSuccess& from);
  void MergeFrom(const stUserEnterMapSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserEnterMapSuccess_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserEnterMapSuccess_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserEnterMapSuccess_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserEnterMapSuccess_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserEnterMapSuccess_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserEnterMapSuccess_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserEnterMapSuccess_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserEnterMapSuccess_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserEnterMapSuccess_ProtoModID_Parse(name, value);
  }

  typedef stUserEnterMapSuccess_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserEnterMapSuccess_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserEnterMapSuccess_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserEnterMapSuccess_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserEnterMapSuccess_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserEnterMapSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserEnterMapSuccess_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserEnterMapSuccess_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserEnterMapSuccess_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 gmType = 2;
  inline bool has_gmtype() const;
  inline void clear_gmtype();
  static const int kGmTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 gmtype() const;
  inline void set_gmtype(::google::protobuf::uint32 value);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 fetchLilianNum = 6;
  inline bool has_fetchliliannum() const;
  inline void clear_fetchliliannum();
  static const int kFetchLilianNumFieldNumber = 6;
  inline ::google::protobuf::uint32 fetchliliannum() const;
  inline void set_fetchliliannum(::google::protobuf::uint32 value);

  // optional uint32 serverID = 7;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 7;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 8;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 8;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 headID = 9;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 9;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 10;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 10;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 11;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 11;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 12;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 12;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 13;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 13;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 14;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 14;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 15;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 15;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 16;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 16;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 17;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 17;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 18;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 18;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 19;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 19;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 20;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 20;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 compensationID = 21;
  inline bool has_compensationid() const;
  inline void clear_compensationid();
  static const int kCompensationIDFieldNumber = 21;
  inline ::google::protobuf::uint32 compensationid() const;
  inline void set_compensationid(::google::protobuf::uint32 value);

  // optional uint32 effectID = 22;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 22;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 23;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 23;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // optional uint32 pubServerIndex = 24;
  inline bool has_pubserverindex() const;
  inline void clear_pubserverindex();
  static const int kPubServerIndexFieldNumber = 24;
  inline ::google::protobuf::uint32 pubserverindex() const;
  inline void set_pubserverindex(::google::protobuf::uint32 value);

  // optional uint32 pubCharID = 25;
  inline bool has_pubcharid() const;
  inline void clear_pubcharid();
  static const int kPubCharIDFieldNumber = 25;
  inline ::google::protobuf::uint32 pubcharid() const;
  inline void set_pubcharid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 26;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 26;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional uint32 photoID = 27;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 27;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stUserEnterMapSuccess)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_gmtype();
  inline void clear_has_gmtype();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_fetchliliannum();
  inline void clear_has_fetchliliannum();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_compensationid();
  inline void clear_has_compensationid();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();
  inline void set_has_pubserverindex();
  inline void clear_has_pubserverindex();
  inline void set_has_pubcharid();
  inline void clear_has_pubcharid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 gmtype_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 fetchliliannum_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 compensationid_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;
  ::google::protobuf::uint32 pubserverindex_;
  ::google::protobuf::uint32 pubcharid_;
  ::google::protobuf::uint32 areacode_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUserEnterMapSuccess* default_instance_;
};
// -------------------------------------------------------------------

class stRechargeInfo : public ::google::protobuf::Message {
 public:
  stRechargeInfo();
  virtual ~stRechargeInfo();

  stRechargeInfo(const stRechargeInfo& from);

  inline stRechargeInfo& operator=(const stRechargeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRechargeInfo& default_instance();

  void Swap(stRechargeInfo* other);

  // implements Message ----------------------------------------------

  stRechargeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRechargeInfo& from);
  void MergeFrom(const stRechargeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // optional string tid = 3;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 3;
  inline const ::std::string& tid() const;
  inline void set_tid(const ::std::string& value);
  inline void set_tid(const char* value);
  inline void set_tid(const char* value, size_t size);
  inline ::std::string* mutable_tid();
  inline ::std::string* release_tid();
  inline void set_allocated_tid(::std::string* tid);

  // optional string data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Global.stRechargeInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 money_;
  ::std::string* tid_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRechargeInfo* default_instance_;
};
// -------------------------------------------------------------------

class stUserRecharge : public ::google::protobuf::Message {
 public:
  stUserRecharge();
  virtual ~stUserRecharge();

  stUserRecharge(const stUserRecharge& from);

  inline stUserRecharge& operator=(const stUserRecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserRecharge& default_instance();

  void Swap(stUserRecharge* other);

  // implements Message ----------------------------------------------

  stUserRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserRecharge& from);
  void MergeFrom(const stUserRecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserRecharge_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserRecharge_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserRecharge_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserRecharge_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserRecharge_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserRecharge_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserRecharge_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserRecharge_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserRecharge_ProtoModID_Parse(name, value);
  }

  typedef stUserRecharge_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserRecharge_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserRecharge_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserRecharge_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserRecharge_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserRecharge_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserRecharge_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserRecharge_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserRecharge_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated .Global.stRechargeInfo rechargeInfo = 2;
  inline int rechargeinfo_size() const;
  inline void clear_rechargeinfo();
  static const int kRechargeInfoFieldNumber = 2;
  inline const ::Global::stRechargeInfo& rechargeinfo(int index) const;
  inline ::Global::stRechargeInfo* mutable_rechargeinfo(int index);
  inline ::Global::stRechargeInfo* add_rechargeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stRechargeInfo >&
      rechargeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stRechargeInfo >*
      mutable_rechargeinfo();

  // optional bool isExtend = 3;
  inline bool has_isextend() const;
  inline void clear_isextend();
  static const int kIsExtendFieldNumber = 3;
  inline bool isextend() const;
  inline void set_isextend(bool value);

  // @@protoc_insertion_point(class_scope:Global.stUserRecharge)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_isextend();
  inline void clear_has_isextend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stRechargeInfo > rechargeinfo_;
  ::google::protobuf::uint32 charid_;
  bool isextend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUserRecharge* default_instance_;
};
// -------------------------------------------------------------------

class stProcessGM : public ::google::protobuf::Message {
 public:
  stProcessGM();
  virtual ~stProcessGM();

  stProcessGM(const stProcessGM& from);

  inline stProcessGM& operator=(const stProcessGM& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stProcessGM& default_instance();

  void Swap(stProcessGM* other);

  // implements Message ----------------------------------------------

  stProcessGM* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stProcessGM& from);
  void MergeFrom(const stProcessGM& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stProcessGM_ProtoModID ProtoModID;
  static const ProtoModID ModID = stProcessGM_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stProcessGM_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stProcessGM_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stProcessGM_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stProcessGM_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stProcessGM_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stProcessGM_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stProcessGM_ProtoModID_Parse(name, value);
  }

  typedef stProcessGM_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stProcessGM_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stProcessGM_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stProcessGM_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stProcessGM_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stProcessGM_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stProcessGM_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stProcessGM_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stProcessGM_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.eGMType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Global::eGMType type() const;
  inline void set_type(::Global::eGMType value);

  // repeated uint32 intParam = 2;
  inline int intparam_size() const;
  inline void clear_intparam();
  static const int kIntParamFieldNumber = 2;
  inline ::google::protobuf::uint32 intparam(int index) const;
  inline void set_intparam(int index, ::google::protobuf::uint32 value);
  inline void add_intparam(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      intparam() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_intparam();

  // repeated string strParam = 3;
  inline int strparam_size() const;
  inline void clear_strparam();
  static const int kStrParamFieldNumber = 3;
  inline const ::std::string& strparam(int index) const;
  inline ::std::string* mutable_strparam(int index);
  inline void set_strparam(int index, const ::std::string& value);
  inline void set_strparam(int index, const char* value);
  inline void set_strparam(int index, const char* value, size_t size);
  inline ::std::string* add_strparam();
  inline void add_strparam(const ::std::string& value);
  inline void add_strparam(const char* value);
  inline void add_strparam(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strparam() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strparam();

  // optional uint32 charID = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 4;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stProcessGM)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > intparam_;
  int type_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strparam_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stProcessGM* default_instance_;
};
// -------------------------------------------------------------------

class stSynFetchLilianNum : public ::google::protobuf::Message {
 public:
  stSynFetchLilianNum();
  virtual ~stSynFetchLilianNum();

  stSynFetchLilianNum(const stSynFetchLilianNum& from);

  inline stSynFetchLilianNum& operator=(const stSynFetchLilianNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynFetchLilianNum& default_instance();

  void Swap(stSynFetchLilianNum* other);

  // implements Message ----------------------------------------------

  stSynFetchLilianNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynFetchLilianNum& from);
  void MergeFrom(const stSynFetchLilianNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynFetchLilianNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynFetchLilianNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynFetchLilianNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynFetchLilianNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynFetchLilianNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynFetchLilianNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynFetchLilianNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynFetchLilianNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynFetchLilianNum_ProtoModID_Parse(name, value);
  }

  typedef stSynFetchLilianNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynFetchLilianNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynFetchLilianNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynFetchLilianNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynFetchLilianNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynFetchLilianNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynFetchLilianNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynFetchLilianNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynFetchLilianNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynFetchLilianNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynFetchLilianNum* default_instance_;
};
// -------------------------------------------------------------------

class stSynGuildID : public ::google::protobuf::Message {
 public:
  stSynGuildID();
  virtual ~stSynGuildID();

  stSynGuildID(const stSynGuildID& from);

  inline stSynGuildID& operator=(const stSynGuildID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynGuildID& default_instance();

  void Swap(stSynGuildID* other);

  // implements Message ----------------------------------------------

  stSynGuildID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynGuildID& from);
  void MergeFrom(const stSynGuildID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynGuildID_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynGuildID_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynGuildID_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynGuildID_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynGuildID_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynGuildID_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynGuildID_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynGuildID_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynGuildID_ProtoModID_Parse(name, value);
  }

  typedef stSynGuildID_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynGuildID_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynGuildID_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynGuildID_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynGuildID_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynGuildID_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynGuildID_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynGuildID_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynGuildID_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 guildID = 2;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 2;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional uint32 guildLv = 3;
  inline bool has_guildlv() const;
  inline void clear_guildlv();
  static const int kGuildLvFieldNumber = 3;
  inline ::google::protobuf::uint32 guildlv() const;
  inline void set_guildlv(::google::protobuf::uint32 value);

  // optional uint32 joinInTime = 4;
  inline bool has_joinintime() const;
  inline void clear_joinintime();
  static const int kJoinInTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 joinintime() const;
  inline void set_joinintime(::google::protobuf::uint32 value);

  // optional uint32 blackMarketLv = 5;
  inline bool has_blackmarketlv() const;
  inline void clear_blackmarketlv();
  static const int kBlackMarketLvFieldNumber = 5;
  inline ::google::protobuf::uint32 blackmarketlv() const;
  inline void set_blackmarketlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynGuildID)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildlv();
  inline void clear_has_guildlv();
  inline void set_has_joinintime();
  inline void clear_has_joinintime();
  inline void set_has_blackmarketlv();
  inline void clear_has_blackmarketlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 guildlv_;
  ::google::protobuf::uint32 joinintime_;
  ::google::protobuf::uint32 blackmarketlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynGuildID* default_instance_;
};
// -------------------------------------------------------------------

class stCreateGuild : public ::google::protobuf::Message {
 public:
  stCreateGuild();
  virtual ~stCreateGuild();

  stCreateGuild(const stCreateGuild& from);

  inline stCreateGuild& operator=(const stCreateGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCreateGuild& default_instance();

  void Swap(stCreateGuild* other);

  // implements Message ----------------------------------------------

  stCreateGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCreateGuild& from);
  void MergeFrom(const stCreateGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCreateGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCreateGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCreateGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCreateGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCreateGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCreateGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCreateGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCreateGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCreateGuild_ProtoModID_Parse(name, value);
  }

  typedef stCreateGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCreateGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCreateGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCreateGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCreateGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCreateGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCreateGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCreateGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCreateGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 badge = 3;
  inline bool has_badge() const;
  inline void clear_badge();
  static const int kBadgeFieldNumber = 3;
  inline ::google::protobuf::uint32 badge() const;
  inline void set_badge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stCreateGuild)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_badge();
  inline void clear_has_badge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 badge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCreateGuild* default_instance_;
};
// -------------------------------------------------------------------

class stCreateGuildDecMoney : public ::google::protobuf::Message {
 public:
  stCreateGuildDecMoney();
  virtual ~stCreateGuildDecMoney();

  stCreateGuildDecMoney(const stCreateGuildDecMoney& from);

  inline stCreateGuildDecMoney& operator=(const stCreateGuildDecMoney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCreateGuildDecMoney& default_instance();

  void Swap(stCreateGuildDecMoney* other);

  // implements Message ----------------------------------------------

  stCreateGuildDecMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCreateGuildDecMoney& from);
  void MergeFrom(const stCreateGuildDecMoney& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCreateGuildDecMoney_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCreateGuildDecMoney_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCreateGuildDecMoney_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCreateGuildDecMoney_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCreateGuildDecMoney_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCreateGuildDecMoney_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCreateGuildDecMoney_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCreateGuildDecMoney_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCreateGuildDecMoney_ProtoModID_Parse(name, value);
  }

  typedef stCreateGuildDecMoney_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCreateGuildDecMoney_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCreateGuildDecMoney_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCreateGuildDecMoney_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCreateGuildDecMoney_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCreateGuildDecMoney_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCreateGuildDecMoney_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCreateGuildDecMoney_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCreateGuildDecMoney_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stCreateGuildDecMoney)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCreateGuildDecMoney* default_instance_;
};
// -------------------------------------------------------------------

class stForwardJoininGuild : public ::google::protobuf::Message {
 public:
  stForwardJoininGuild();
  virtual ~stForwardJoininGuild();

  stForwardJoininGuild(const stForwardJoininGuild& from);

  inline stForwardJoininGuild& operator=(const stForwardJoininGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stForwardJoininGuild& default_instance();

  void Swap(stForwardJoininGuild* other);

  // implements Message ----------------------------------------------

  stForwardJoininGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stForwardJoininGuild& from);
  void MergeFrom(const stForwardJoininGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stForwardJoininGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stForwardJoininGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stForwardJoininGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stForwardJoininGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stForwardJoininGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stForwardJoininGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stForwardJoininGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stForwardJoininGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stForwardJoininGuild_ProtoModID_Parse(name, value);
  }

  typedef stForwardJoininGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stForwardJoininGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stForwardJoininGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stForwardJoininGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stForwardJoininGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stForwardJoininGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stForwardJoininGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stForwardJoininGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stForwardJoininGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 guildID = 2;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 2;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stForwardJoininGuild)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stForwardJoininGuild* default_instance_;
};
// -------------------------------------------------------------------

class stAddGuildContribute : public ::google::protobuf::Message {
 public:
  stAddGuildContribute();
  virtual ~stAddGuildContribute();

  stAddGuildContribute(const stAddGuildContribute& from);

  inline stAddGuildContribute& operator=(const stAddGuildContribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddGuildContribute& default_instance();

  void Swap(stAddGuildContribute* other);

  // implements Message ----------------------------------------------

  stAddGuildContribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddGuildContribute& from);
  void MergeFrom(const stAddGuildContribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAddGuildContribute_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAddGuildContribute_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAddGuildContribute_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAddGuildContribute_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAddGuildContribute_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAddGuildContribute_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAddGuildContribute_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAddGuildContribute_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAddGuildContribute_ProtoModID_Parse(name, value);
  }

  typedef stAddGuildContribute_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAddGuildContribute_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAddGuildContribute_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAddGuildContribute_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAddGuildContribute_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAddGuildContribute_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAddGuildContribute_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAddGuildContribute_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAddGuildContribute_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 contribute = 2;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 2;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);

  // optional uint32 todayDayContribute = 3;
  inline bool has_todaydaycontribute() const;
  inline void clear_todaydaycontribute();
  static const int kTodayDayContributeFieldNumber = 3;
  inline ::google::protobuf::uint32 todaydaycontribute() const;
  inline void set_todaydaycontribute(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stAddGuildContribute)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_todaydaycontribute();
  inline void clear_has_todaydaycontribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 contribute_;
  ::google::protobuf::uint32 todaydaycontribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stAddGuildContribute* default_instance_;
};
// -------------------------------------------------------------------

class stBroadcastGuildChatInfo : public ::google::protobuf::Message {
 public:
  stBroadcastGuildChatInfo();
  virtual ~stBroadcastGuildChatInfo();

  stBroadcastGuildChatInfo(const stBroadcastGuildChatInfo& from);

  inline stBroadcastGuildChatInfo& operator=(const stBroadcastGuildChatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBroadcastGuildChatInfo& default_instance();

  void Swap(stBroadcastGuildChatInfo* other);

  // implements Message ----------------------------------------------

  stBroadcastGuildChatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBroadcastGuildChatInfo& from);
  void MergeFrom(const stBroadcastGuildChatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBroadcastGuildChatInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBroadcastGuildChatInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBroadcastGuildChatInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBroadcastGuildChatInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBroadcastGuildChatInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBroadcastGuildChatInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBroadcastGuildChatInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBroadcastGuildChatInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBroadcastGuildChatInfo_ProtoModID_Parse(name, value);
  }

  typedef stBroadcastGuildChatInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBroadcastGuildChatInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBroadcastGuildChatInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBroadcastGuildChatInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBroadcastGuildChatInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBroadcastGuildChatInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBroadcastGuildChatInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBroadcastGuildChatInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBroadcastGuildChatInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 2;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 2;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional bool isVoice = 4;
  inline bool has_isvoice() const;
  inline void clear_isvoice();
  static const int kIsVoiceFieldNumber = 4;
  inline bool isvoice() const;
  inline void set_isvoice(bool value);

  // optional string voiceUrl = 5;
  inline bool has_voiceurl() const;
  inline void clear_voiceurl();
  static const int kVoiceUrlFieldNumber = 5;
  inline const ::std::string& voiceurl() const;
  inline void set_voiceurl(const ::std::string& value);
  inline void set_voiceurl(const char* value);
  inline void set_voiceurl(const char* value, size_t size);
  inline ::std::string* mutable_voiceurl();
  inline ::std::string* release_voiceurl();
  inline void set_allocated_voiceurl(::std::string* voiceurl);

  // optional uint32 voiceLenght = 6;
  inline bool has_voicelenght() const;
  inline void clear_voicelenght();
  static const int kVoiceLenghtFieldNumber = 6;
  inline ::google::protobuf::uint32 voicelenght() const;
  inline void set_voicelenght(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stBroadcastGuildChatInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_isvoice();
  inline void clear_has_isvoice();
  inline void set_has_voiceurl();
  inline void clear_has_voiceurl();
  inline void set_has_voicelenght();
  inline void clear_has_voicelenght();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 viplv_;
  ::std::string* content_;
  ::std::string* voiceurl_;
  bool isvoice_;
  ::google::protobuf::uint32 voicelenght_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stBroadcastGuildChatInfo* default_instance_;
};
// -------------------------------------------------------------------

class stGuildPray : public ::google::protobuf::Message {
 public:
  stGuildPray();
  virtual ~stGuildPray();

  stGuildPray(const stGuildPray& from);

  inline stGuildPray& operator=(const stGuildPray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuildPray& default_instance();

  void Swap(stGuildPray* other);

  // implements Message ----------------------------------------------

  stGuildPray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuildPray& from);
  void MergeFrom(const stGuildPray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuildPray_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuildPray_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuildPray_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuildPray_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuildPray_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuildPray_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuildPray_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuildPray_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuildPray_ProtoModID_Parse(name, value);
  }

  typedef stGuildPray_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuildPray_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuildPray_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuildPray_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuildPray_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuildPray_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuildPray_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuildPray_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuildPray_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 buildingLv = 2;
  inline bool has_buildinglv() const;
  inline void clear_buildinglv();
  static const int kBuildingLvFieldNumber = 2;
  inline ::google::protobuf::uint32 buildinglv() const;
  inline void set_buildinglv(::google::protobuf::uint32 value);

  // optional uint32 extraBoxID = 3;
  inline bool has_extraboxid() const;
  inline void clear_extraboxid();
  static const int kExtraBoxIDFieldNumber = 3;
  inline ::google::protobuf::uint32 extraboxid() const;
  inline void set_extraboxid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGuildPray)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_buildinglv();
  inline void clear_has_buildinglv();
  inline void set_has_extraboxid();
  inline void clear_has_extraboxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 buildinglv_;
  ::google::protobuf::uint32 extraboxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGuildPray* default_instance_;
};
// -------------------------------------------------------------------

class stSynUserLevel : public ::google::protobuf::Message {
 public:
  stSynUserLevel();
  virtual ~stSynUserLevel();

  stSynUserLevel(const stSynUserLevel& from);

  inline stSynUserLevel& operator=(const stSynUserLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynUserLevel& default_instance();

  void Swap(stSynUserLevel* other);

  // implements Message ----------------------------------------------

  stSynUserLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynUserLevel& from);
  void MergeFrom(const stSynUserLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynUserLevel_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynUserLevel_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynUserLevel_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynUserLevel_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynUserLevel_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynUserLevel_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynUserLevel_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynUserLevel_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynUserLevel_ProtoModID_Parse(name, value);
  }

  typedef stSynUserLevel_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynUserLevel_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynUserLevel_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynUserLevel_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynUserLevel_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynUserLevel_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynUserLevel_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynUserLevel_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynUserLevel_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional bool levelup = 3;
  inline bool has_levelup() const;
  inline void clear_levelup();
  static const int kLevelupFieldNumber = 3;
  inline bool levelup() const;
  inline void set_levelup(bool value);

  // @@protoc_insertion_point(class_scope:Global.stSynUserLevel)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_levelup();
  inline void clear_has_levelup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 lv_;
  bool levelup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynUserLevel* default_instance_;
};
// -------------------------------------------------------------------

class stSynCopymapStarNum : public ::google::protobuf::Message {
 public:
  stSynCopymapStarNum();
  virtual ~stSynCopymapStarNum();

  stSynCopymapStarNum(const stSynCopymapStarNum& from);

  inline stSynCopymapStarNum& operator=(const stSynCopymapStarNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynCopymapStarNum& default_instance();

  void Swap(stSynCopymapStarNum* other);

  // implements Message ----------------------------------------------

  stSynCopymapStarNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynCopymapStarNum& from);
  void MergeFrom(const stSynCopymapStarNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynCopymapStarNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynCopymapStarNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynCopymapStarNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynCopymapStarNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynCopymapStarNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynCopymapStarNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynCopymapStarNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynCopymapStarNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynCopymapStarNum_ProtoModID_Parse(name, value);
  }

  typedef stSynCopymapStarNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynCopymapStarNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynCopymapStarNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynCopymapStarNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynCopymapStarNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynCopymapStarNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynCopymapStarNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynCopymapStarNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynCopymapStarNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 starNum = 2;
  inline bool has_starnum() const;
  inline void clear_starnum();
  static const int kStarNumFieldNumber = 2;
  inline ::google::protobuf::uint32 starnum() const;
  inline void set_starnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynCopymapStarNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_starnum();
  inline void clear_has_starnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 starnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynCopymapStarNum* default_instance_;
};
// -------------------------------------------------------------------

class stSynUserBattlePower : public ::google::protobuf::Message {
 public:
  stSynUserBattlePower();
  virtual ~stSynUserBattlePower();

  stSynUserBattlePower(const stSynUserBattlePower& from);

  inline stSynUserBattlePower& operator=(const stSynUserBattlePower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynUserBattlePower& default_instance();

  void Swap(stSynUserBattlePower* other);

  // implements Message ----------------------------------------------

  stSynUserBattlePower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynUserBattlePower& from);
  void MergeFrom(const stSynUserBattlePower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynUserBattlePower_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynUserBattlePower_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynUserBattlePower_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynUserBattlePower_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynUserBattlePower_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynUserBattlePower_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynUserBattlePower_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynUserBattlePower_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynUserBattlePower_ProtoModID_Parse(name, value);
  }

  typedef stSynUserBattlePower_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynUserBattlePower_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynUserBattlePower_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynUserBattlePower_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynUserBattlePower_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynUserBattlePower_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynUserBattlePower_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynUserBattlePower_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynUserBattlePower_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 2;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 2;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 maxHP = 3;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 3;
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynUserBattlePower)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 maxhp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynUserBattlePower* default_instance_;
};
// -------------------------------------------------------------------

class stSendTeamChatInfo : public ::google::protobuf::Message {
 public:
  stSendTeamChatInfo();
  virtual ~stSendTeamChatInfo();

  stSendTeamChatInfo(const stSendTeamChatInfo& from);

  inline stSendTeamChatInfo& operator=(const stSendTeamChatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendTeamChatInfo& default_instance();

  void Swap(stSendTeamChatInfo* other);

  // implements Message ----------------------------------------------

  stSendTeamChatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendTeamChatInfo& from);
  void MergeFrom(const stSendTeamChatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendTeamChatInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendTeamChatInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendTeamChatInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendTeamChatInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendTeamChatInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendTeamChatInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendTeamChatInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendTeamChatInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendTeamChatInfo_ProtoModID_Parse(name, value);
  }

  typedef stSendTeamChatInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendTeamChatInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendTeamChatInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendTeamChatInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendTeamChatInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendTeamChatInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendTeamChatInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendTeamChatInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendTeamChatInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 vipLv = 3;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 3;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional bool isVoice = 4;
  inline bool has_isvoice() const;
  inline void clear_isvoice();
  static const int kIsVoiceFieldNumber = 4;
  inline bool isvoice() const;
  inline void set_isvoice(bool value);

  // optional string voiceUrl = 5;
  inline bool has_voiceurl() const;
  inline void clear_voiceurl();
  static const int kVoiceUrlFieldNumber = 5;
  inline const ::std::string& voiceurl() const;
  inline void set_voiceurl(const ::std::string& value);
  inline void set_voiceurl(const char* value);
  inline void set_voiceurl(const char* value, size_t size);
  inline ::std::string* mutable_voiceurl();
  inline ::std::string* release_voiceurl();
  inline void set_allocated_voiceurl(::std::string* voiceurl);

  // optional uint32 voiceLenght = 6;
  inline bool has_voicelenght() const;
  inline void clear_voicelenght();
  static const int kVoiceLenghtFieldNumber = 6;
  inline ::google::protobuf::uint32 voicelenght() const;
  inline void set_voicelenght(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSendTeamChatInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_isvoice();
  inline void clear_has_isvoice();
  inline void set_has_voiceurl();
  inline void clear_has_voiceurl();
  inline void set_has_voicelenght();
  inline void clear_has_voicelenght();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 viplv_;
  ::std::string* voiceurl_;
  bool isvoice_;
  ::google::protobuf::uint32 voicelenght_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSendTeamChatInfo* default_instance_;
};
// -------------------------------------------------------------------

class stTeamLeaveCopyMap : public ::google::protobuf::Message {
 public:
  stTeamLeaveCopyMap();
  virtual ~stTeamLeaveCopyMap();

  stTeamLeaveCopyMap(const stTeamLeaveCopyMap& from);

  inline stTeamLeaveCopyMap& operator=(const stTeamLeaveCopyMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTeamLeaveCopyMap& default_instance();

  void Swap(stTeamLeaveCopyMap* other);

  // implements Message ----------------------------------------------

  stTeamLeaveCopyMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTeamLeaveCopyMap& from);
  void MergeFrom(const stTeamLeaveCopyMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stTeamLeaveCopyMap_ProtoModID ProtoModID;
  static const ProtoModID ModID = stTeamLeaveCopyMap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stTeamLeaveCopyMap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stTeamLeaveCopyMap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stTeamLeaveCopyMap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stTeamLeaveCopyMap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stTeamLeaveCopyMap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stTeamLeaveCopyMap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stTeamLeaveCopyMap_ProtoModID_Parse(name, value);
  }

  typedef stTeamLeaveCopyMap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stTeamLeaveCopyMap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stTeamLeaveCopyMap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stTeamLeaveCopyMap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stTeamLeaveCopyMap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stTeamLeaveCopyMap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stTeamLeaveCopyMap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stTeamLeaveCopyMap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stTeamLeaveCopyMap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 teamID = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 1;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stTeamLeaveCopyMap)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stTeamLeaveCopyMap* default_instance_;
};
// -------------------------------------------------------------------

class stTreasureCombine : public ::google::protobuf::Message {
 public:
  stTreasureCombine();
  virtual ~stTreasureCombine();

  stTreasureCombine(const stTreasureCombine& from);

  inline stTreasureCombine& operator=(const stTreasureCombine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTreasureCombine& default_instance();

  void Swap(stTreasureCombine* other);

  // implements Message ----------------------------------------------

  stTreasureCombine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTreasureCombine& from);
  void MergeFrom(const stTreasureCombine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stTreasureCombine_ProtoModID ProtoModID;
  static const ProtoModID ModID = stTreasureCombine_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stTreasureCombine_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stTreasureCombine_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stTreasureCombine_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stTreasureCombine_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stTreasureCombine_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stTreasureCombine_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stTreasureCombine_ProtoModID_Parse(name, value);
  }

  typedef stTreasureCombine_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stTreasureCombine_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stTreasureCombine_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stTreasureCombine_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stTreasureCombine_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stTreasureCombine_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stTreasureCombine_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stTreasureCombine_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stTreasureCombine_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 combineType = 2;
  inline bool has_combinetype() const;
  inline void clear_combinetype();
  static const int kCombineTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 combinetype() const;
  inline void set_combinetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stTreasureCombine)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_combinetype();
  inline void clear_has_combinetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 combinetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stTreasureCombine* default_instance_;
};
// -------------------------------------------------------------------

class stTreasureCombineSuccess : public ::google::protobuf::Message {
 public:
  stTreasureCombineSuccess();
  virtual ~stTreasureCombineSuccess();

  stTreasureCombineSuccess(const stTreasureCombineSuccess& from);

  inline stTreasureCombineSuccess& operator=(const stTreasureCombineSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTreasureCombineSuccess& default_instance();

  void Swap(stTreasureCombineSuccess* other);

  // implements Message ----------------------------------------------

  stTreasureCombineSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTreasureCombineSuccess& from);
  void MergeFrom(const stTreasureCombineSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stTreasureCombineSuccess_ProtoModID ProtoModID;
  static const ProtoModID ModID = stTreasureCombineSuccess_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stTreasureCombineSuccess_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stTreasureCombineSuccess_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stTreasureCombineSuccess_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stTreasureCombineSuccess_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stTreasureCombineSuccess_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stTreasureCombineSuccess_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stTreasureCombineSuccess_ProtoModID_Parse(name, value);
  }

  typedef stTreasureCombineSuccess_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stTreasureCombineSuccess_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stTreasureCombineSuccess_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stTreasureCombineSuccess_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stTreasureCombineSuccess_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stTreasureCombineSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stTreasureCombineSuccess_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stTreasureCombineSuccess_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stTreasureCombineSuccess_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 itemID = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stTreasureCombineSuccess)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stTreasureCombineSuccess* default_instance_;
};
// -------------------------------------------------------------------

class stBuyPeaceModubleTime : public ::google::protobuf::Message {
 public:
  stBuyPeaceModubleTime();
  virtual ~stBuyPeaceModubleTime();

  stBuyPeaceModubleTime(const stBuyPeaceModubleTime& from);

  inline stBuyPeaceModubleTime& operator=(const stBuyPeaceModubleTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuyPeaceModubleTime& default_instance();

  void Swap(stBuyPeaceModubleTime* other);

  // implements Message ----------------------------------------------

  stBuyPeaceModubleTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuyPeaceModubleTime& from);
  void MergeFrom(const stBuyPeaceModubleTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuyPeaceModubleTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuyPeaceModubleTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuyPeaceModubleTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuyPeaceModubleTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuyPeaceModubleTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuyPeaceModubleTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuyPeaceModubleTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuyPeaceModubleTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuyPeaceModubleTime_ProtoModID_Parse(name, value);
  }

  typedef stBuyPeaceModubleTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuyPeaceModubleTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuyPeaceModubleTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuyPeaceModubleTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuyPeaceModubleTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuyPeaceModubleTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuyPeaceModubleTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuyPeaceModubleTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuyPeaceModubleTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 addTime = 2;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 addtime() const;
  inline void set_addtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stBuyPeaceModubleTime)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_addtime();
  inline void clear_has_addtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 addtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stBuyPeaceModubleTime* default_instance_;
};
// -------------------------------------------------------------------

class stReqChangeGameSvr : public ::google::protobuf::Message {
 public:
  stReqChangeGameSvr();
  virtual ~stReqChangeGameSvr();

  stReqChangeGameSvr(const stReqChangeGameSvr& from);

  inline stReqChangeGameSvr& operator=(const stReqChangeGameSvr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqChangeGameSvr& default_instance();

  void Swap(stReqChangeGameSvr* other);

  // implements Message ----------------------------------------------

  stReqChangeGameSvr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqChangeGameSvr& from);
  void MergeFrom(const stReqChangeGameSvr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqChangeGameSvr_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqChangeGameSvr_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqChangeGameSvr_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqChangeGameSvr_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqChangeGameSvr_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqChangeGameSvr_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqChangeGameSvr_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqChangeGameSvr_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqChangeGameSvr_ProtoModID_Parse(name, value);
  }

  typedef stReqChangeGameSvr_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqChangeGameSvr_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqChangeGameSvr_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqChangeGameSvr_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqChangeGameSvr_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqChangeGameSvr_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqChangeGameSvr_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqChangeGameSvr_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqChangeGameSvr_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 gameSvrID = 2;
  inline bool has_gamesvrid() const;
  inline void clear_gamesvrid();
  static const int kGameSvrIDFieldNumber = 2;
  inline ::google::protobuf::uint32 gamesvrid() const;
  inline void set_gamesvrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqChangeGameSvr)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_gamesvrid();
  inline void clear_has_gamesvrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 gamesvrid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqChangeGameSvr* default_instance_;
};
// -------------------------------------------------------------------

class stConfirmChangeGameSvr : public ::google::protobuf::Message {
 public:
  stConfirmChangeGameSvr();
  virtual ~stConfirmChangeGameSvr();

  stConfirmChangeGameSvr(const stConfirmChangeGameSvr& from);

  inline stConfirmChangeGameSvr& operator=(const stConfirmChangeGameSvr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stConfirmChangeGameSvr& default_instance();

  void Swap(stConfirmChangeGameSvr* other);

  // implements Message ----------------------------------------------

  stConfirmChangeGameSvr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stConfirmChangeGameSvr& from);
  void MergeFrom(const stConfirmChangeGameSvr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stConfirmChangeGameSvr_ProtoModID ProtoModID;
  static const ProtoModID ModID = stConfirmChangeGameSvr_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stConfirmChangeGameSvr_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stConfirmChangeGameSvr_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stConfirmChangeGameSvr_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stConfirmChangeGameSvr_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stConfirmChangeGameSvr_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stConfirmChangeGameSvr_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stConfirmChangeGameSvr_ProtoModID_Parse(name, value);
  }

  typedef stConfirmChangeGameSvr_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stConfirmChangeGameSvr_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stConfirmChangeGameSvr_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stConfirmChangeGameSvr_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stConfirmChangeGameSvr_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stConfirmChangeGameSvr_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stConfirmChangeGameSvr_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stConfirmChangeGameSvr_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stConfirmChangeGameSvr_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 gameSvrID = 2;
  inline bool has_gamesvrid() const;
  inline void clear_gamesvrid();
  static const int kGameSvrIDFieldNumber = 2;
  inline ::google::protobuf::uint32 gamesvrid() const;
  inline void set_gamesvrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stConfirmChangeGameSvr)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_gamesvrid();
  inline void clear_has_gamesvrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 gamesvrid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stConfirmChangeGameSvr* default_instance_;
};
// -------------------------------------------------------------------

class stRetOtherUserData2Me : public ::google::protobuf::Message {
 public:
  stRetOtherUserData2Me();
  virtual ~stRetOtherUserData2Me();

  stRetOtherUserData2Me(const stRetOtherUserData2Me& from);

  inline stRetOtherUserData2Me& operator=(const stRetOtherUserData2Me& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetOtherUserData2Me& default_instance();

  void Swap(stRetOtherUserData2Me* other);

  // implements Message ----------------------------------------------

  stRetOtherUserData2Me* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetOtherUserData2Me& from);
  void MergeFrom(const stRetOtherUserData2Me& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetOtherUserData2Me_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetOtherUserData2Me_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetOtherUserData2Me_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetOtherUserData2Me_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetOtherUserData2Me_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetOtherUserData2Me_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetOtherUserData2Me_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetOtherUserData2Me_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetOtherUserData2Me_ProtoModID_Parse(name, value);
  }

  typedef stRetOtherUserData2Me_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetOtherUserData2Me_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetOtherUserData2Me_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetOtherUserData2Me_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetOtherUserData2Me_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetOtherUserData2Me_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetOtherUserData2Me_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetOtherUserData2Me_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetOtherUserData2Me_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 myCharID = 1;
  inline bool has_mycharid() const;
  inline void clear_mycharid();
  static const int kMyCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 mycharid() const;
  inline void set_mycharid(::google::protobuf::uint32 value);

  // optional uint32 otherCharID = 2;
  inline bool has_othercharid() const;
  inline void clear_othercharid();
  static const int kOtherCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 othercharid() const;
  inline void set_othercharid(::google::protobuf::uint32 value);

  // optional bool isRobot = 3;
  inline bool has_isrobot() const;
  inline void clear_isrobot();
  static const int kIsRobotFieldNumber = 3;
  inline bool isrobot() const;
  inline void set_isrobot(bool value);

  // optional uint32 dataSize = 4;
  inline bool has_datasize() const;
  inline void clear_datasize();
  static const int kDataSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 datasize() const;
  inline void set_datasize(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional string guildName = 6;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 6;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:Global.stRetOtherUserData2Me)
 private:
  inline void set_has_mycharid();
  inline void clear_has_mycharid();
  inline void set_has_othercharid();
  inline void clear_has_othercharid();
  inline void set_has_isrobot();
  inline void clear_has_isrobot();
  inline void set_has_datasize();
  inline void clear_has_datasize();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mycharid_;
  ::google::protobuf::uint32 othercharid_;
  bool isrobot_;
  ::google::protobuf::uint32 datasize_;
  ::std::string* data_;
  ::std::string* guildname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetOtherUserData2Me* default_instance_;
};
// -------------------------------------------------------------------

class stMailAttach : public ::google::protobuf::Message {
 public:
  stMailAttach();
  virtual ~stMailAttach();

  stMailAttach(const stMailAttach& from);

  inline stMailAttach& operator=(const stMailAttach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMailAttach& default_instance();

  void Swap(stMailAttach* other);

  // implements Message ----------------------------------------------

  stMailAttach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMailAttach& from);
  void MergeFrom(const stMailAttach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stMailAttach)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stMailAttach* default_instance_;
};
// -------------------------------------------------------------------

class stObtainItemFromMail : public ::google::protobuf::Message {
 public:
  stObtainItemFromMail();
  virtual ~stObtainItemFromMail();

  stObtainItemFromMail(const stObtainItemFromMail& from);

  inline stObtainItemFromMail& operator=(const stObtainItemFromMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stObtainItemFromMail& default_instance();

  void Swap(stObtainItemFromMail* other);

  // implements Message ----------------------------------------------

  stObtainItemFromMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stObtainItemFromMail& from);
  void MergeFrom(const stObtainItemFromMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stObtainItemFromMail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stObtainItemFromMail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stObtainItemFromMail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stObtainItemFromMail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stObtainItemFromMail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stObtainItemFromMail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stObtainItemFromMail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stObtainItemFromMail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stObtainItemFromMail_ProtoModID_Parse(name, value);
  }

  typedef stObtainItemFromMail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stObtainItemFromMail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stObtainItemFromMail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stObtainItemFromMail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stObtainItemFromMail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stObtainItemFromMail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stObtainItemFromMail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stObtainItemFromMail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stObtainItemFromMail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stMailAttach attachs = 1;
  inline int attachs_size() const;
  inline void clear_attachs();
  static const int kAttachsFieldNumber = 1;
  inline const ::Global::stMailAttach& attachs(int index) const;
  inline ::Global::stMailAttach* mutable_attachs(int index);
  inline ::Global::stMailAttach* add_attachs();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stMailAttach >&
      attachs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stMailAttach >*
      mutable_attachs();

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stObtainItemFromMail)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stMailAttach > attachs_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stObtainItemFromMail* default_instance_;
};
// -------------------------------------------------------------------

class stSynAddTreasure : public ::google::protobuf::Message {
 public:
  stSynAddTreasure();
  virtual ~stSynAddTreasure();

  stSynAddTreasure(const stSynAddTreasure& from);

  inline stSynAddTreasure& operator=(const stSynAddTreasure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynAddTreasure& default_instance();

  void Swap(stSynAddTreasure* other);

  // implements Message ----------------------------------------------

  stSynAddTreasure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynAddTreasure& from);
  void MergeFrom(const stSynAddTreasure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynAddTreasure_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynAddTreasure_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynAddTreasure_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynAddTreasure_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynAddTreasure_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynAddTreasure_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynAddTreasure_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynAddTreasure_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynAddTreasure_ProtoModID_Parse(name, value);
  }

  typedef stSynAddTreasure_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynAddTreasure_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynAddTreasure_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynAddTreasure_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynAddTreasure_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynAddTreasure_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynAddTreasure_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynAddTreasure_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynAddTreasure_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 resID = 1;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIDFieldNumber = 1;
  inline ::google::protobuf::uint32 resid() const;
  inline void set_resid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 charID = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynAddTreasure)
 private:
  inline void set_has_resid();
  inline void clear_has_resid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 resid_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynAddTreasure* default_instance_;
};
// -------------------------------------------------------------------

class stBeginPKWithOther : public ::google::protobuf::Message {
 public:
  stBeginPKWithOther();
  virtual ~stBeginPKWithOther();

  stBeginPKWithOther(const stBeginPKWithOther& from);

  inline stBeginPKWithOther& operator=(const stBeginPKWithOther& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBeginPKWithOther& default_instance();

  void Swap(stBeginPKWithOther* other);

  // implements Message ----------------------------------------------

  stBeginPKWithOther* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBeginPKWithOther& from);
  void MergeFrom(const stBeginPKWithOther& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBeginPKWithOther_ePKType ePKType;
  static const ePKType eArena_PK = stBeginPKWithOther_ePKType_eArena_PK;
  static const ePKType eLeitai_PK = stBeginPKWithOther_ePKType_eLeitai_PK;
  static const ePKType eIntercept_PK = stBeginPKWithOther_ePKType_eIntercept_PK;
  static inline bool ePKType_IsValid(int value) {
    return stBeginPKWithOther_ePKType_IsValid(value);
  }
  static const ePKType ePKType_MIN =
    stBeginPKWithOther_ePKType_ePKType_MIN;
  static const ePKType ePKType_MAX =
    stBeginPKWithOther_ePKType_ePKType_MAX;
  static const int ePKType_ARRAYSIZE =
    stBeginPKWithOther_ePKType_ePKType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ePKType_descriptor() {
    return stBeginPKWithOther_ePKType_descriptor();
  }
  static inline const ::std::string& ePKType_Name(ePKType value) {
    return stBeginPKWithOther_ePKType_Name(value);
  }
  static inline bool ePKType_Parse(const ::std::string& name,
      ePKType* value) {
    return stBeginPKWithOther_ePKType_Parse(name, value);
  }

  typedef stBeginPKWithOther_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBeginPKWithOther_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBeginPKWithOther_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBeginPKWithOther_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBeginPKWithOther_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBeginPKWithOther_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBeginPKWithOther_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBeginPKWithOther_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBeginPKWithOther_ProtoModID_Parse(name, value);
  }

  typedef stBeginPKWithOther_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBeginPKWithOther_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBeginPKWithOther_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBeginPKWithOther_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBeginPKWithOther_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBeginPKWithOther_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBeginPKWithOther_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBeginPKWithOther_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBeginPKWithOther_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 myCharID = 1;
  inline bool has_mycharid() const;
  inline void clear_mycharid();
  static const int kMyCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 mycharid() const;
  inline void set_mycharid(::google::protobuf::uint32 value);

  // optional uint32 otherCharID = 2;
  inline bool has_othercharid() const;
  inline void clear_othercharid();
  static const int kOtherCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 othercharid() const;
  inline void set_othercharid(::google::protobuf::uint32 value);

  // optional uint32 dataSize = 3;
  inline bool has_datasize() const;
  inline void clear_datasize();
  static const int kDataSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 datasize() const;
  inline void set_datasize(::google::protobuf::uint32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional .Global.stBeginPKWithOther.ePKType type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::Global::stBeginPKWithOther_ePKType type() const;
  inline void set_type(::Global::stBeginPKWithOther_ePKType value);

  // optional uint32 challengeRank = 6;
  inline bool has_challengerank() const;
  inline void clear_challengerank();
  static const int kChallengeRankFieldNumber = 6;
  inline ::google::protobuf::uint32 challengerank() const;
  inline void set_challengerank(::google::protobuf::uint32 value);

  // optional uint32 robotID = 7;
  inline bool has_robotid() const;
  inline void clear_robotid();
  static const int kRobotIDFieldNumber = 7;
  inline ::google::protobuf::uint32 robotid() const;
  inline void set_robotid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stBeginPKWithOther)
 private:
  inline void set_has_mycharid();
  inline void clear_has_mycharid();
  inline void set_has_othercharid();
  inline void clear_has_othercharid();
  inline void set_has_datasize();
  inline void clear_has_datasize();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_challengerank();
  inline void clear_has_challengerank();
  inline void set_has_robotid();
  inline void clear_has_robotid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mycharid_;
  ::google::protobuf::uint32 othercharid_;
  ::std::string* data_;
  ::google::protobuf::uint32 datasize_;
  int type_;
  ::google::protobuf::uint32 challengerank_;
  ::google::protobuf::uint32 robotid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stBeginPKWithOther* default_instance_;
};
// -------------------------------------------------------------------

class stUserLeitaiChallenge : public ::google::protobuf::Message {
 public:
  stUserLeitaiChallenge();
  virtual ~stUserLeitaiChallenge();

  stUserLeitaiChallenge(const stUserLeitaiChallenge& from);

  inline stUserLeitaiChallenge& operator=(const stUserLeitaiChallenge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserLeitaiChallenge& default_instance();

  void Swap(stUserLeitaiChallenge* other);

  // implements Message ----------------------------------------------

  stUserLeitaiChallenge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserLeitaiChallenge& from);
  void MergeFrom(const stUserLeitaiChallenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserLeitaiChallenge_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserLeitaiChallenge_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserLeitaiChallenge_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserLeitaiChallenge_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserLeitaiChallenge_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserLeitaiChallenge_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserLeitaiChallenge_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserLeitaiChallenge_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserLeitaiChallenge_ProtoModID_Parse(name, value);
  }

  typedef stUserLeitaiChallenge_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserLeitaiChallenge_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserLeitaiChallenge_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserLeitaiChallenge_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserLeitaiChallenge_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserLeitaiChallenge_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserLeitaiChallenge_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserLeitaiChallenge_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserLeitaiChallenge_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 round = 1;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 1;
  inline ::google::protobuf::uint32 round() const;
  inline void set_round(::google::protobuf::uint32 value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 mode = 3;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  inline ::google::protobuf::uint32 mode() const;
  inline void set_mode(::google::protobuf::uint32 value);

  // optional uint32 challengeCharID = 4;
  inline bool has_challengecharid() const;
  inline void clear_challengecharid();
  static const int kChallengeCharIDFieldNumber = 4;
  inline ::google::protobuf::uint32 challengecharid() const;
  inline void set_challengecharid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stUserLeitaiChallenge)
 private:
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_challengecharid();
  inline void clear_has_challengecharid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 round_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 mode_;
  ::google::protobuf::uint32 challengecharid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUserLeitaiChallenge* default_instance_;
};
// -------------------------------------------------------------------

class stArenaPKResult : public ::google::protobuf::Message {
 public:
  stArenaPKResult();
  virtual ~stArenaPKResult();

  stArenaPKResult(const stArenaPKResult& from);

  inline stArenaPKResult& operator=(const stArenaPKResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stArenaPKResult& default_instance();

  void Swap(stArenaPKResult* other);

  // implements Message ----------------------------------------------

  stArenaPKResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stArenaPKResult& from);
  void MergeFrom(const stArenaPKResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stArenaPKResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stArenaPKResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stArenaPKResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stArenaPKResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stArenaPKResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stArenaPKResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stArenaPKResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stArenaPKResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stArenaPKResult_ProtoModID_Parse(name, value);
  }

  typedef stArenaPKResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stArenaPKResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stArenaPKResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stArenaPKResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stArenaPKResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stArenaPKResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stArenaPKResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stArenaPKResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stArenaPKResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional bool win = 2;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 2;
  inline bool win() const;
  inline void set_win(bool value);

  // optional uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 historyRank = 4;
  inline bool has_historyrank() const;
  inline void clear_historyrank();
  static const int kHistoryRankFieldNumber = 4;
  inline ::google::protobuf::uint32 historyrank() const;
  inline void set_historyrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stArenaPKResult)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_historyrank();
  inline void clear_has_historyrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  bool win_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 historyrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stArenaPKResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynDrawHeroScore : public ::google::protobuf::Message {
 public:
  stSynDrawHeroScore();
  virtual ~stSynDrawHeroScore();

  stSynDrawHeroScore(const stSynDrawHeroScore& from);

  inline stSynDrawHeroScore& operator=(const stSynDrawHeroScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynDrawHeroScore& default_instance();

  void Swap(stSynDrawHeroScore* other);

  // implements Message ----------------------------------------------

  stSynDrawHeroScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynDrawHeroScore& from);
  void MergeFrom(const stSynDrawHeroScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynDrawHeroScore_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynDrawHeroScore_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynDrawHeroScore_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynDrawHeroScore_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynDrawHeroScore_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynDrawHeroScore_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynDrawHeroScore_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynDrawHeroScore_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynDrawHeroScore_ProtoModID_Parse(name, value);
  }

  typedef stSynDrawHeroScore_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynDrawHeroScore_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynDrawHeroScore_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynDrawHeroScore_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynDrawHeroScore_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynDrawHeroScore_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynDrawHeroScore_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynDrawHeroScore_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynDrawHeroScore_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynDrawHeroScore)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynDrawHeroScore* default_instance_;
};
// -------------------------------------------------------------------

class stUpLeitaiUseTime : public ::google::protobuf::Message {
 public:
  stUpLeitaiUseTime();
  virtual ~stUpLeitaiUseTime();

  stUpLeitaiUseTime(const stUpLeitaiUseTime& from);

  inline stUpLeitaiUseTime& operator=(const stUpLeitaiUseTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUpLeitaiUseTime& default_instance();

  void Swap(stUpLeitaiUseTime* other);

  // implements Message ----------------------------------------------

  stUpLeitaiUseTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUpLeitaiUseTime& from);
  void MergeFrom(const stUpLeitaiUseTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUpLeitaiUseTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUpLeitaiUseTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUpLeitaiUseTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUpLeitaiUseTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUpLeitaiUseTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUpLeitaiUseTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUpLeitaiUseTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUpLeitaiUseTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUpLeitaiUseTime_ProtoModID_Parse(name, value);
  }

  typedef stUpLeitaiUseTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUpLeitaiUseTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUpLeitaiUseTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUpLeitaiUseTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUpLeitaiUseTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUpLeitaiUseTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUpLeitaiUseTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUpLeitaiUseTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUpLeitaiUseTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 useTime = 2;
  inline bool has_usetime() const;
  inline void clear_usetime();
  static const int kUseTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 usetime() const;
  inline void set_usetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stUpLeitaiUseTime)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_usetime();
  inline void clear_has_usetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 usetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUpLeitaiUseTime* default_instance_;
};
// -------------------------------------------------------------------

class stUserLeaveGuild : public ::google::protobuf::Message {
 public:
  stUserLeaveGuild();
  virtual ~stUserLeaveGuild();

  stUserLeaveGuild(const stUserLeaveGuild& from);

  inline stUserLeaveGuild& operator=(const stUserLeaveGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserLeaveGuild& default_instance();

  void Swap(stUserLeaveGuild* other);

  // implements Message ----------------------------------------------

  stUserLeaveGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserLeaveGuild& from);
  void MergeFrom(const stUserLeaveGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserLeaveGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserLeaveGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserLeaveGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserLeaveGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserLeaveGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserLeaveGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserLeaveGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserLeaveGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserLeaveGuild_ProtoModID_Parse(name, value);
  }

  typedef stUserLeaveGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserLeaveGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserLeaveGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserLeaveGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserLeaveGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserLeaveGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserLeaveGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserLeaveGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserLeaveGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 charIDs = 1;
  inline int charids_size() const;
  inline void clear_charids();
  static const int kCharIDsFieldNumber = 1;
  inline ::google::protobuf::uint32 charids(int index) const;
  inline void set_charids(int index, ::google::protobuf::uint32 value);
  inline void add_charids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      charids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_charids();

  // @@protoc_insertion_point(class_scope:Global.stUserLeaveGuild)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > charids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUserLeaveGuild* default_instance_;
};
// -------------------------------------------------------------------

class stEnterCopymapMemInfo : public ::google::protobuf::Message {
 public:
  stEnterCopymapMemInfo();
  virtual ~stEnterCopymapMemInfo();

  stEnterCopymapMemInfo(const stEnterCopymapMemInfo& from);

  inline stEnterCopymapMemInfo& operator=(const stEnterCopymapMemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnterCopymapMemInfo& default_instance();

  void Swap(stEnterCopymapMemInfo* other);

  // implements Message ----------------------------------------------

  stEnterCopymapMemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnterCopymapMemInfo& from);
  void MergeFrom(const stEnterCopymapMemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 addDamagePer = 2;
  inline bool has_adddamageper() const;
  inline void clear_adddamageper();
  static const int kAddDamagePerFieldNumber = 2;
  inline ::google::protobuf::uint32 adddamageper() const;
  inline void set_adddamageper(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stEnterCopymapMemInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_adddamageper();
  inline void clear_has_adddamageper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 adddamageper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stEnterCopymapMemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stTeamEnterCopyMap : public ::google::protobuf::Message {
 public:
  stTeamEnterCopyMap();
  virtual ~stTeamEnterCopyMap();

  stTeamEnterCopyMap(const stTeamEnterCopyMap& from);

  inline stTeamEnterCopyMap& operator=(const stTeamEnterCopyMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTeamEnterCopyMap& default_instance();

  void Swap(stTeamEnterCopyMap* other);

  // implements Message ----------------------------------------------

  stTeamEnterCopyMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTeamEnterCopyMap& from);
  void MergeFrom(const stTeamEnterCopyMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stTeamEnterCopyMap_ProtoModID ProtoModID;
  static const ProtoModID ModID = stTeamEnterCopyMap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stTeamEnterCopyMap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stTeamEnterCopyMap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stTeamEnterCopyMap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stTeamEnterCopyMap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stTeamEnterCopyMap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stTeamEnterCopyMap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stTeamEnterCopyMap_ProtoModID_Parse(name, value);
  }

  typedef stTeamEnterCopyMap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stTeamEnterCopyMap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stTeamEnterCopyMap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stTeamEnterCopyMap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stTeamEnterCopyMap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stTeamEnterCopyMap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stTeamEnterCopyMap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stTeamEnterCopyMap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stTeamEnterCopyMap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 copymapID = 1;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // optional uint32 teamID = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 2;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // repeated .Global.stEnterCopymapMemInfo memerInfo = 3;
  inline int memerinfo_size() const;
  inline void clear_memerinfo();
  static const int kMemerInfoFieldNumber = 3;
  inline const ::Global::stEnterCopymapMemInfo& memerinfo(int index) const;
  inline ::Global::stEnterCopymapMemInfo* mutable_memerinfo(int index);
  inline ::Global::stEnterCopymapMemInfo* add_memerinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stEnterCopymapMemInfo >&
      memerinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stEnterCopymapMemInfo >*
      mutable_memerinfo();

  // optional uint32 bossHP = 4;
  inline bool has_bosshp() const;
  inline void clear_bosshp();
  static const int kBossHPFieldNumber = 4;
  inline ::google::protobuf::uint32 bosshp() const;
  inline void set_bosshp(::google::protobuf::uint32 value);

  // optional uint32 bossLv = 5;
  inline bool has_bosslv() const;
  inline void clear_bosslv();
  static const int kBossLvFieldNumber = 5;
  inline ::google::protobuf::uint32 bosslv() const;
  inline void set_bosslv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stTeamEnterCopyMap)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_bosshp();
  inline void clear_has_bosshp();
  inline void set_has_bosslv();
  inline void clear_has_bosslv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 copymapid_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::RepeatedPtrField< ::Global::stEnterCopymapMemInfo > memerinfo_;
  ::google::protobuf::uint32 bosshp_;
  ::google::protobuf::uint32 bosslv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stTeamEnterCopyMap* default_instance_;
};
// -------------------------------------------------------------------

class stOne2OnePVPEnterCopyMap : public ::google::protobuf::Message {
 public:
  stOne2OnePVPEnterCopyMap();
  virtual ~stOne2OnePVPEnterCopyMap();

  stOne2OnePVPEnterCopyMap(const stOne2OnePVPEnterCopyMap& from);

  inline stOne2OnePVPEnterCopyMap& operator=(const stOne2OnePVPEnterCopyMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOne2OnePVPEnterCopyMap& default_instance();

  void Swap(stOne2OnePVPEnterCopyMap* other);

  // implements Message ----------------------------------------------

  stOne2OnePVPEnterCopyMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOne2OnePVPEnterCopyMap& from);
  void MergeFrom(const stOne2OnePVPEnterCopyMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOne2OnePVPEnterCopyMap_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOne2OnePVPEnterCopyMap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOne2OnePVPEnterCopyMap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOne2OnePVPEnterCopyMap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOne2OnePVPEnterCopyMap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOne2OnePVPEnterCopyMap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOne2OnePVPEnterCopyMap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOne2OnePVPEnterCopyMap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOne2OnePVPEnterCopyMap_ProtoModID_Parse(name, value);
  }

  typedef stOne2OnePVPEnterCopyMap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOne2OnePVPEnterCopyMap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOne2OnePVPEnterCopyMap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOne2OnePVPEnterCopyMap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOne2OnePVPEnterCopyMap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOne2OnePVPEnterCopyMap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOne2OnePVPEnterCopyMap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOne2OnePVPEnterCopyMap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOne2OnePVPEnterCopyMap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 memberIDs = 1;
  inline int memberids_size() const;
  inline void clear_memberids();
  static const int kMemberIDsFieldNumber = 1;
  inline ::google::protobuf::uint32 memberids(int index) const;
  inline void set_memberids(int index, ::google::protobuf::uint32 value);
  inline void add_memberids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      memberids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_memberids();

  // optional bool pkWithFriend = 2;
  inline bool has_pkwithfriend() const;
  inline void clear_pkwithfriend();
  static const int kPkWithFriendFieldNumber = 2;
  inline bool pkwithfriend() const;
  inline void set_pkwithfriend(bool value);

  // @@protoc_insertion_point(class_scope:Global.stOne2OnePVPEnterCopyMap)
 private:
  inline void set_has_pkwithfriend();
  inline void clear_has_pkwithfriend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > memberids_;
  bool pkwithfriend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stOne2OnePVPEnterCopyMap* default_instance_;
};
// -------------------------------------------------------------------

class stForwardCapture : public ::google::protobuf::Message {
 public:
  stForwardCapture();
  virtual ~stForwardCapture();

  stForwardCapture(const stForwardCapture& from);

  inline stForwardCapture& operator=(const stForwardCapture& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stForwardCapture& default_instance();

  void Swap(stForwardCapture* other);

  // implements Message ----------------------------------------------

  stForwardCapture* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stForwardCapture& from);
  void MergeFrom(const stForwardCapture& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stForwardCapture_ProtoModID ProtoModID;
  static const ProtoModID ModID = stForwardCapture_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stForwardCapture_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stForwardCapture_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stForwardCapture_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stForwardCapture_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stForwardCapture_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stForwardCapture_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stForwardCapture_ProtoModID_Parse(name, value);
  }

  typedef stForwardCapture_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stForwardCapture_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stForwardCapture_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stForwardCapture_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stForwardCapture_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stForwardCapture_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stForwardCapture_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stForwardCapture_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stForwardCapture_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 otherID = 2;
  inline bool has_otherid() const;
  inline void clear_otherid();
  static const int kOtherIDFieldNumber = 2;
  inline ::google::protobuf::uint32 otherid() const;
  inline void set_otherid(::google::protobuf::uint32 value);

  // optional uint32 combineID = 3;
  inline bool has_combineid() const;
  inline void clear_combineid();
  static const int kCombineIDFieldNumber = 3;
  inline ::google::protobuf::uint32 combineid() const;
  inline void set_combineid(::google::protobuf::uint32 value);

  // optional uint32 resType = 4;
  inline bool has_restype() const;
  inline void clear_restype();
  static const int kResTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 restype() const;
  inline void set_restype(::google::protobuf::uint32 value);

  // optional uint32 num = 5;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 5;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional bool multiCapture = 6;
  inline bool has_multicapture() const;
  inline void clear_multicapture();
  static const int kMultiCaptureFieldNumber = 6;
  inline bool multicapture() const;
  inline void set_multicapture(bool value);

  // @@protoc_insertion_point(class_scope:Global.stForwardCapture)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_otherid();
  inline void clear_has_otherid();
  inline void set_has_combineid();
  inline void clear_has_combineid();
  inline void set_has_restype();
  inline void clear_has_restype();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_multicapture();
  inline void clear_has_multicapture();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 otherid_;
  ::google::protobuf::uint32 combineid_;
  ::google::protobuf::uint32 restype_;
  ::google::protobuf::uint32 num_;
  bool multicapture_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stForwardCapture* default_instance_;
};
// -------------------------------------------------------------------

class stCaptureRewardItem : public ::google::protobuf::Message {
 public:
  stCaptureRewardItem();
  virtual ~stCaptureRewardItem();

  stCaptureRewardItem(const stCaptureRewardItem& from);

  inline stCaptureRewardItem& operator=(const stCaptureRewardItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCaptureRewardItem& default_instance();

  void Swap(stCaptureRewardItem* other);

  // implements Message ----------------------------------------------

  stCaptureRewardItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCaptureRewardItem& from);
  void MergeFrom(const stCaptureRewardItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stCaptureRewardItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCaptureRewardItem* default_instance_;
};
// -------------------------------------------------------------------

class stCaptureReward : public ::google::protobuf::Message {
 public:
  stCaptureReward();
  virtual ~stCaptureReward();

  stCaptureReward(const stCaptureReward& from);

  inline stCaptureReward& operator=(const stCaptureReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCaptureReward& default_instance();

  void Swap(stCaptureReward* other);

  // implements Message ----------------------------------------------

  stCaptureReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCaptureReward& from);
  void MergeFrom(const stCaptureReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCaptureReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCaptureReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCaptureReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCaptureReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCaptureReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCaptureReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCaptureReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCaptureReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCaptureReward_ProtoModID_Parse(name, value);
  }

  typedef stCaptureReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCaptureReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCaptureReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCaptureReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCaptureReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCaptureReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCaptureReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCaptureReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCaptureReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 dropID = 2;
  inline bool has_dropid() const;
  inline void clear_dropid();
  static const int kDropIDFieldNumber = 2;
  inline ::google::protobuf::uint32 dropid() const;
  inline void set_dropid(::google::protobuf::uint32 value);

  // optional uint32 moneyCoef = 3;
  inline bool has_moneycoef() const;
  inline void clear_moneycoef();
  static const int kMoneyCoefFieldNumber = 3;
  inline ::google::protobuf::uint32 moneycoef() const;
  inline void set_moneycoef(::google::protobuf::uint32 value);

  // optional uint32 expCoef = 4;
  inline bool has_expcoef() const;
  inline void clear_expcoef();
  static const int kExpCoefFieldNumber = 4;
  inline ::google::protobuf::uint32 expcoef() const;
  inline void set_expcoef(::google::protobuf::uint32 value);

  // optional bool obtainPiece = 5;
  inline bool has_obtainpiece() const;
  inline void clear_obtainpiece();
  static const int kObtainPieceFieldNumber = 5;
  inline bool obtainpiece() const;
  inline void set_obtainpiece(bool value);

  // optional uint32 num = 6;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 6;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional bool multiCapture = 7;
  inline bool has_multicapture() const;
  inline void clear_multicapture();
  static const int kMultiCaptureFieldNumber = 7;
  inline bool multicapture() const;
  inline void set_multicapture(bool value);

  // @@protoc_insertion_point(class_scope:Global.stCaptureReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_dropid();
  inline void clear_has_dropid();
  inline void set_has_moneycoef();
  inline void clear_has_moneycoef();
  inline void set_has_expcoef();
  inline void clear_has_expcoef();
  inline void set_has_obtainpiece();
  inline void clear_has_obtainpiece();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_multicapture();
  inline void clear_has_multicapture();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 dropid_;
  ::google::protobuf::uint32 moneycoef_;
  ::google::protobuf::uint32 expcoef_;
  ::google::protobuf::uint32 num_;
  bool obtainpiece_;
  bool multicapture_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCaptureReward* default_instance_;
};
// -------------------------------------------------------------------

class stRealTimeBattleEnterCopymap : public ::google::protobuf::Message {
 public:
  stRealTimeBattleEnterCopymap();
  virtual ~stRealTimeBattleEnterCopymap();

  stRealTimeBattleEnterCopymap(const stRealTimeBattleEnterCopymap& from);

  inline stRealTimeBattleEnterCopymap& operator=(const stRealTimeBattleEnterCopymap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRealTimeBattleEnterCopymap& default_instance();

  void Swap(stRealTimeBattleEnterCopymap* other);

  // implements Message ----------------------------------------------

  stRealTimeBattleEnterCopymap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRealTimeBattleEnterCopymap& from);
  void MergeFrom(const stRealTimeBattleEnterCopymap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRealTimeBattleEnterCopymap_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRealTimeBattleEnterCopymap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRealTimeBattleEnterCopymap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRealTimeBattleEnterCopymap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRealTimeBattleEnterCopymap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRealTimeBattleEnterCopymap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRealTimeBattleEnterCopymap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRealTimeBattleEnterCopymap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRealTimeBattleEnterCopymap_ProtoModID_Parse(name, value);
  }

  typedef stRealTimeBattleEnterCopymap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRealTimeBattleEnterCopymap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRealTimeBattleEnterCopymap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRealTimeBattleEnterCopymap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRealTimeBattleEnterCopymap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRealTimeBattleEnterCopymap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRealTimeBattleEnterCopymap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRealTimeBattleEnterCopymap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRealTimeBattleEnterCopymap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.eRealTimePKType pkType = 1;
  inline bool has_pktype() const;
  inline void clear_pktype();
  static const int kPkTypeFieldNumber = 1;
  inline ::Global::eRealTimePKType pktype() const;
  inline void set_pktype(::Global::eRealTimePKType value);

  // optional uint32 teamAID = 2;
  inline bool has_teamaid() const;
  inline void clear_teamaid();
  static const int kTeamAIDFieldNumber = 2;
  inline ::google::protobuf::uint32 teamaid() const;
  inline void set_teamaid(::google::protobuf::uint32 value);

  // optional uint32 teamBID = 3;
  inline bool has_teambid() const;
  inline void clear_teambid();
  static const int kTeamBIDFieldNumber = 3;
  inline ::google::protobuf::uint32 teambid() const;
  inline void set_teambid(::google::protobuf::uint32 value);

  // repeated uint32 teamAMembers = 4;
  inline int teamamembers_size() const;
  inline void clear_teamamembers();
  static const int kTeamAMembersFieldNumber = 4;
  inline ::google::protobuf::uint32 teamamembers(int index) const;
  inline void set_teamamembers(int index, ::google::protobuf::uint32 value);
  inline void add_teamamembers(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      teamamembers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_teamamembers();

  // repeated uint32 teamBMembers = 5;
  inline int teambmembers_size() const;
  inline void clear_teambmembers();
  static const int kTeamBMembersFieldNumber = 5;
  inline ::google::protobuf::uint32 teambmembers(int index) const;
  inline void set_teambmembers(int index, ::google::protobuf::uint32 value);
  inline void add_teambmembers(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      teambmembers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_teambmembers();

  // @@protoc_insertion_point(class_scope:Global.stRealTimeBattleEnterCopymap)
 private:
  inline void set_has_pktype();
  inline void clear_has_pktype();
  inline void set_has_teamaid();
  inline void clear_has_teamaid();
  inline void set_has_teambid();
  inline void clear_has_teambid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int pktype_;
  ::google::protobuf::uint32 teamaid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > teamamembers_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > teambmembers_;
  ::google::protobuf::uint32 teambid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRealTimeBattleEnterCopymap* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyAddLilian : public ::google::protobuf::Message {
 public:
  stNotifyAddLilian();
  virtual ~stNotifyAddLilian();

  stNotifyAddLilian(const stNotifyAddLilian& from);

  inline stNotifyAddLilian& operator=(const stNotifyAddLilian& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyAddLilian& default_instance();

  void Swap(stNotifyAddLilian* other);

  // implements Message ----------------------------------------------

  stNotifyAddLilian* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyAddLilian& from);
  void MergeFrom(const stNotifyAddLilian& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyAddLilian_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyAddLilian_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyAddLilian_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyAddLilian_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyAddLilian_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyAddLilian_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyAddLilian_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyAddLilian_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyAddLilian_ProtoModID_Parse(name, value);
  }

  typedef stNotifyAddLilian_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyAddLilian_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyAddLilian_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyAddLilian_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyAddLilian_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyAddLilian_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyAddLilian_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyAddLilian_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyAddLilian_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyAddLilian)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyAddLilian* default_instance_;
};
// -------------------------------------------------------------------

class stEnterGuildCopymap : public ::google::protobuf::Message {
 public:
  stEnterGuildCopymap();
  virtual ~stEnterGuildCopymap();

  stEnterGuildCopymap(const stEnterGuildCopymap& from);

  inline stEnterGuildCopymap& operator=(const stEnterGuildCopymap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnterGuildCopymap& default_instance();

  void Swap(stEnterGuildCopymap* other);

  // implements Message ----------------------------------------------

  stEnterGuildCopymap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnterGuildCopymap& from);
  void MergeFrom(const stEnterGuildCopymap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEnterGuildCopymap_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEnterGuildCopymap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEnterGuildCopymap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEnterGuildCopymap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEnterGuildCopymap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEnterGuildCopymap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEnterGuildCopymap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEnterGuildCopymap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEnterGuildCopymap_ProtoModID_Parse(name, value);
  }

  typedef stEnterGuildCopymap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEnterGuildCopymap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEnterGuildCopymap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEnterGuildCopymap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEnterGuildCopymap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEnterGuildCopymap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEnterGuildCopymap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEnterGuildCopymap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEnterGuildCopymap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string guildName = 1;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 1;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stEnterGuildCopymap)
 private:
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guildname_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stEnterGuildCopymap* default_instance_;
};
// -------------------------------------------------------------------

class stSynMyContribyte : public ::google::protobuf::Message {
 public:
  stSynMyContribyte();
  virtual ~stSynMyContribyte();

  stSynMyContribyte(const stSynMyContribyte& from);

  inline stSynMyContribyte& operator=(const stSynMyContribyte& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynMyContribyte& default_instance();

  void Swap(stSynMyContribyte* other);

  // implements Message ----------------------------------------------

  stSynMyContribyte* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynMyContribyte& from);
  void MergeFrom(const stSynMyContribyte& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynMyContribyte_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynMyContribyte_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynMyContribyte_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynMyContribyte_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynMyContribyte_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynMyContribyte_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynMyContribyte_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynMyContribyte_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynMyContribyte_ProtoModID_Parse(name, value);
  }

  typedef stSynMyContribyte_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynMyContribyte_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynMyContribyte_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynMyContribyte_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynMyContribyte_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynMyContribyte_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynMyContribyte_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynMyContribyte_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynMyContribyte_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 myContribute = 2;
  inline bool has_mycontribute() const;
  inline void clear_mycontribute();
  static const int kMyContributeFieldNumber = 2;
  inline ::google::protobuf::uint32 mycontribute() const;
  inline void set_mycontribute(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynMyContribyte)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_mycontribute();
  inline void clear_has_mycontribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 mycontribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynMyContribyte* default_instance_;
};
// -------------------------------------------------------------------

class stOnlineUserGMType : public ::google::protobuf::Message {
 public:
  stOnlineUserGMType();
  virtual ~stOnlineUserGMType();

  stOnlineUserGMType(const stOnlineUserGMType& from);

  inline stOnlineUserGMType& operator=(const stOnlineUserGMType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOnlineUserGMType& default_instance();

  void Swap(stOnlineUserGMType* other);

  // implements Message ----------------------------------------------

  stOnlineUserGMType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOnlineUserGMType& from);
  void MergeFrom(const stOnlineUserGMType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOnlineUserGMType_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOnlineUserGMType_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOnlineUserGMType_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOnlineUserGMType_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOnlineUserGMType_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOnlineUserGMType_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOnlineUserGMType_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOnlineUserGMType_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOnlineUserGMType_ProtoModID_Parse(name, value);
  }

  typedef stOnlineUserGMType_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOnlineUserGMType_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOnlineUserGMType_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOnlineUserGMType_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOnlineUserGMType_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOnlineUserGMType_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOnlineUserGMType_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOnlineUserGMType_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOnlineUserGMType_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 gmValue = 2;
  inline bool has_gmvalue() const;
  inline void clear_gmvalue();
  static const int kGmValueFieldNumber = 2;
  inline ::google::protobuf::uint32 gmvalue() const;
  inline void set_gmvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stOnlineUserGMType)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_gmvalue();
  inline void clear_has_gmvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 gmvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stOnlineUserGMType* default_instance_;
};
// -------------------------------------------------------------------

class stForbidOnlineUser : public ::google::protobuf::Message {
 public:
  stForbidOnlineUser();
  virtual ~stForbidOnlineUser();

  stForbidOnlineUser(const stForbidOnlineUser& from);

  inline stForbidOnlineUser& operator=(const stForbidOnlineUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stForbidOnlineUser& default_instance();

  void Swap(stForbidOnlineUser* other);

  // implements Message ----------------------------------------------

  stForbidOnlineUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stForbidOnlineUser& from);
  void MergeFrom(const stForbidOnlineUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stForbidOnlineUser_ProtoModID ProtoModID;
  static const ProtoModID ModID = stForbidOnlineUser_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stForbidOnlineUser_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stForbidOnlineUser_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stForbidOnlineUser_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stForbidOnlineUser_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stForbidOnlineUser_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stForbidOnlineUser_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stForbidOnlineUser_ProtoModID_Parse(name, value);
  }

  typedef stForbidOnlineUser_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stForbidOnlineUser_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stForbidOnlineUser_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stForbidOnlineUser_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stForbidOnlineUser_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stForbidOnlineUser_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stForbidOnlineUser_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stForbidOnlineUser_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stForbidOnlineUser_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stForbidOnlineUser)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stForbidOnlineUser* default_instance_;
};
// -------------------------------------------------------------------

class stOne2OnePVPFinish : public ::google::protobuf::Message {
 public:
  stOne2OnePVPFinish();
  virtual ~stOne2OnePVPFinish();

  stOne2OnePVPFinish(const stOne2OnePVPFinish& from);

  inline stOne2OnePVPFinish& operator=(const stOne2OnePVPFinish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOne2OnePVPFinish& default_instance();

  void Swap(stOne2OnePVPFinish* other);

  // implements Message ----------------------------------------------

  stOne2OnePVPFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOne2OnePVPFinish& from);
  void MergeFrom(const stOne2OnePVPFinish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOne2OnePVPFinish_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOne2OnePVPFinish_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOne2OnePVPFinish_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOne2OnePVPFinish_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOne2OnePVPFinish_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOne2OnePVPFinish_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOne2OnePVPFinish_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOne2OnePVPFinish_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOne2OnePVPFinish_ProtoModID_Parse(name, value);
  }

  typedef stOne2OnePVPFinish_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOne2OnePVPFinish_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOne2OnePVPFinish_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOne2OnePVPFinish_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOne2OnePVPFinish_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOne2OnePVPFinish_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOne2OnePVPFinish_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOne2OnePVPFinish_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOne2OnePVPFinish_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID1 = 1;
  inline bool has_charid1() const;
  inline void clear_charid1();
  static const int kCharID1FieldNumber = 1;
  inline ::google::protobuf::uint32 charid1() const;
  inline void set_charid1(::google::protobuf::uint32 value);

  // optional uint32 score1 = 2;
  inline bool has_score1() const;
  inline void clear_score1();
  static const int kScore1FieldNumber = 2;
  inline ::google::protobuf::uint32 score1() const;
  inline void set_score1(::google::protobuf::uint32 value);

  // optional bool win1 = 3;
  inline bool has_win1() const;
  inline void clear_win1();
  static const int kWin1FieldNumber = 3;
  inline bool win1() const;
  inline void set_win1(bool value);

  // optional uint32 charID2 = 4;
  inline bool has_charid2() const;
  inline void clear_charid2();
  static const int kCharID2FieldNumber = 4;
  inline ::google::protobuf::uint32 charid2() const;
  inline void set_charid2(::google::protobuf::uint32 value);

  // optional uint32 score2 = 5;
  inline bool has_score2() const;
  inline void clear_score2();
  static const int kScore2FieldNumber = 5;
  inline ::google::protobuf::uint32 score2() const;
  inline void set_score2(::google::protobuf::uint32 value);

  // optional bool win2 = 6;
  inline bool has_win2() const;
  inline void clear_win2();
  static const int kWin2FieldNumber = 6;
  inline bool win2() const;
  inline void set_win2(bool value);

  // optional bool pkWithFriend = 7;
  inline bool has_pkwithfriend() const;
  inline void clear_pkwithfriend();
  static const int kPkWithFriendFieldNumber = 7;
  inline bool pkwithfriend() const;
  inline void set_pkwithfriend(bool value);

  // @@protoc_insertion_point(class_scope:Global.stOne2OnePVPFinish)
 private:
  inline void set_has_charid1();
  inline void clear_has_charid1();
  inline void set_has_score1();
  inline void clear_has_score1();
  inline void set_has_win1();
  inline void clear_has_win1();
  inline void set_has_charid2();
  inline void clear_has_charid2();
  inline void set_has_score2();
  inline void clear_has_score2();
  inline void set_has_win2();
  inline void clear_has_win2();
  inline void set_has_pkwithfriend();
  inline void clear_has_pkwithfriend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid1_;
  ::google::protobuf::uint32 score1_;
  ::google::protobuf::uint32 charid2_;
  ::google::protobuf::uint32 score2_;
  bool win1_;
  bool win2_;
  bool pkwithfriend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stOne2OnePVPFinish* default_instance_;
};
// -------------------------------------------------------------------

class stActivityConfig : public ::google::protobuf::Message {
 public:
  stActivityConfig();
  virtual ~stActivityConfig();

  stActivityConfig(const stActivityConfig& from);

  inline stActivityConfig& operator=(const stActivityConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stActivityConfig& default_instance();

  void Swap(stActivityConfig* other);

  // implements Message ----------------------------------------------

  stActivityConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stActivityConfig& from);
  void MergeFrom(const stActivityConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 activityID = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional string cofing = 2;
  inline bool has_cofing() const;
  inline void clear_cofing();
  static const int kCofingFieldNumber = 2;
  inline const ::std::string& cofing() const;
  inline void set_cofing(const ::std::string& value);
  inline void set_cofing(const char* value);
  inline void set_cofing(const char* value, size_t size);
  inline ::std::string* mutable_cofing();
  inline ::std::string* release_cofing();
  inline void set_allocated_cofing(::std::string* cofing);

  // @@protoc_insertion_point(class_scope:Global.stActivityConfig)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_cofing();
  inline void clear_has_cofing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cofing_;
  ::google::protobuf::uint32 activityid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stActivityConfig* default_instance_;
};
// -------------------------------------------------------------------

class stSynActivityConfig : public ::google::protobuf::Message {
 public:
  stSynActivityConfig();
  virtual ~stSynActivityConfig();

  stSynActivityConfig(const stSynActivityConfig& from);

  inline stSynActivityConfig& operator=(const stSynActivityConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynActivityConfig& default_instance();

  void Swap(stSynActivityConfig* other);

  // implements Message ----------------------------------------------

  stSynActivityConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynActivityConfig& from);
  void MergeFrom(const stSynActivityConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynActivityConfig_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynActivityConfig_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynActivityConfig_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynActivityConfig_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynActivityConfig_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynActivityConfig_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynActivityConfig_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynActivityConfig_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynActivityConfig_ProtoModID_Parse(name, value);
  }

  typedef stSynActivityConfig_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynActivityConfig_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynActivityConfig_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynActivityConfig_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynActivityConfig_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynActivityConfig_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynActivityConfig_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynActivityConfig_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynActivityConfig_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stActivityConfig data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Global::stActivityConfig& data(int index) const;
  inline ::Global::stActivityConfig* mutable_data(int index);
  inline ::Global::stActivityConfig* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stActivityConfig >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stActivityConfig >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Global.stSynActivityConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stActivityConfig > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynActivityConfig* default_instance_;
};
// -------------------------------------------------------------------

class stCaptureTreasureFail : public ::google::protobuf::Message {
 public:
  stCaptureTreasureFail();
  virtual ~stCaptureTreasureFail();

  stCaptureTreasureFail(const stCaptureTreasureFail& from);

  inline stCaptureTreasureFail& operator=(const stCaptureTreasureFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCaptureTreasureFail& default_instance();

  void Swap(stCaptureTreasureFail* other);

  // implements Message ----------------------------------------------

  stCaptureTreasureFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCaptureTreasureFail& from);
  void MergeFrom(const stCaptureTreasureFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCaptureTreasureFail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCaptureTreasureFail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCaptureTreasureFail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCaptureTreasureFail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCaptureTreasureFail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCaptureTreasureFail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCaptureTreasureFail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCaptureTreasureFail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCaptureTreasureFail_ProtoModID_Parse(name, value);
  }

  typedef stCaptureTreasureFail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCaptureTreasureFail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCaptureTreasureFail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCaptureTreasureFail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCaptureTreasureFail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCaptureTreasureFail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCaptureTreasureFail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCaptureTreasureFail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCaptureTreasureFail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stCaptureTreasureFail)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCaptureTreasureFail* default_instance_;
};
// -------------------------------------------------------------------

class stCharID2Rank : public ::google::protobuf::Message {
 public:
  stCharID2Rank();
  virtual ~stCharID2Rank();

  stCharID2Rank(const stCharID2Rank& from);

  inline stCharID2Rank& operator=(const stCharID2Rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCharID2Rank& default_instance();

  void Swap(stCharID2Rank* other);

  // implements Message ----------------------------------------------

  stCharID2Rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCharID2Rank& from);
  void MergeFrom(const stCharID2Rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stCharID2Rank)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCharID2Rank* default_instance_;
};
// -------------------------------------------------------------------

class stRankModuleInfo : public ::google::protobuf::Message {
 public:
  stRankModuleInfo();
  virtual ~stRankModuleInfo();

  stRankModuleInfo(const stRankModuleInfo& from);

  inline stRankModuleInfo& operator=(const stRankModuleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRankModuleInfo& default_instance();

  void Swap(stRankModuleInfo* other);

  // implements Message ----------------------------------------------

  stRankModuleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRankModuleInfo& from);
  void MergeFrom(const stRankModuleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 moduleID = 1;
  inline bool has_moduleid() const;
  inline void clear_moduleid();
  static const int kModuleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 moduleid() const;
  inline void set_moduleid(::google::protobuf::uint32 value);

  // repeated .Global.stCharID2Rank charID2Rank = 2;
  inline int charid2rank_size() const;
  inline void clear_charid2rank();
  static const int kCharID2RankFieldNumber = 2;
  inline const ::Global::stCharID2Rank& charid2rank(int index) const;
  inline ::Global::stCharID2Rank* mutable_charid2rank(int index);
  inline ::Global::stCharID2Rank* add_charid2rank();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stCharID2Rank >&
      charid2rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stCharID2Rank >*
      mutable_charid2rank();

  // @@protoc_insertion_point(class_scope:Global.stRankModuleInfo)
 private:
  inline void set_has_moduleid();
  inline void clear_has_moduleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stCharID2Rank > charid2rank_;
  ::google::protobuf::uint32 moduleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRankModuleInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynRankModuleInfo : public ::google::protobuf::Message {
 public:
  stSynRankModuleInfo();
  virtual ~stSynRankModuleInfo();

  stSynRankModuleInfo(const stSynRankModuleInfo& from);

  inline stSynRankModuleInfo& operator=(const stSynRankModuleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRankModuleInfo& default_instance();

  void Swap(stSynRankModuleInfo* other);

  // implements Message ----------------------------------------------

  stSynRankModuleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRankModuleInfo& from);
  void MergeFrom(const stSynRankModuleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynRankModuleInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynRankModuleInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynRankModuleInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynRankModuleInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynRankModuleInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynRankModuleInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynRankModuleInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynRankModuleInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynRankModuleInfo_ProtoModID_Parse(name, value);
  }

  typedef stSynRankModuleInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynRankModuleInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynRankModuleInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynRankModuleInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynRankModuleInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynRankModuleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynRankModuleInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynRankModuleInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynRankModuleInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stRankModuleInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Global::stRankModuleInfo& data(int index) const;
  inline ::Global::stRankModuleInfo* mutable_data(int index);
  inline ::Global::stRankModuleInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stRankModuleInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stRankModuleInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Global.stSynRankModuleInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stRankModuleInfo > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynRankModuleInfo* default_instance_;
};
// -------------------------------------------------------------------

class stGiftBagReward : public ::google::protobuf::Message {
 public:
  stGiftBagReward();
  virtual ~stGiftBagReward();

  stGiftBagReward(const stGiftBagReward& from);

  inline stGiftBagReward& operator=(const stGiftBagReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGiftBagReward& default_instance();

  void Swap(stGiftBagReward* other);

  // implements Message ----------------------------------------------

  stGiftBagReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGiftBagReward& from);
  void MergeFrom(const stGiftBagReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGiftBagReward)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGiftBagReward* default_instance_;
};
// -------------------------------------------------------------------

class stGiveGiftBagReward : public ::google::protobuf::Message {
 public:
  stGiveGiftBagReward();
  virtual ~stGiveGiftBagReward();

  stGiveGiftBagReward(const stGiveGiftBagReward& from);

  inline stGiveGiftBagReward& operator=(const stGiveGiftBagReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGiveGiftBagReward& default_instance();

  void Swap(stGiveGiftBagReward* other);

  // implements Message ----------------------------------------------

  stGiveGiftBagReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGiveGiftBagReward& from);
  void MergeFrom(const stGiveGiftBagReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGiveGiftBagReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGiveGiftBagReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGiveGiftBagReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGiveGiftBagReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGiveGiftBagReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGiveGiftBagReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGiveGiftBagReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGiveGiftBagReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGiveGiftBagReward_ProtoModID_Parse(name, value);
  }

  typedef stGiveGiftBagReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGiveGiftBagReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGiveGiftBagReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGiveGiftBagReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGiveGiftBagReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGiveGiftBagReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGiveGiftBagReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGiveGiftBagReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGiveGiftBagReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated .Global.stGiftBagReward rewards = 2;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 2;
  inline const ::Global::stGiftBagReward& rewards(int index) const;
  inline ::Global::stGiftBagReward* mutable_rewards(int index);
  inline ::Global::stGiftBagReward* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stGiftBagReward >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stGiftBagReward >*
      mutable_rewards();

  // @@protoc_insertion_point(class_scope:Global.stGiveGiftBagReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stGiftBagReward > rewards_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGiveGiftBagReward* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyGameSvrCfg : public ::google::protobuf::Message {
 public:
  stNotifyGameSvrCfg();
  virtual ~stNotifyGameSvrCfg();

  stNotifyGameSvrCfg(const stNotifyGameSvrCfg& from);

  inline stNotifyGameSvrCfg& operator=(const stNotifyGameSvrCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyGameSvrCfg& default_instance();

  void Swap(stNotifyGameSvrCfg* other);

  // implements Message ----------------------------------------------

  stNotifyGameSvrCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyGameSvrCfg& from);
  void MergeFrom(const stNotifyGameSvrCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyGameSvrCfg_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyGameSvrCfg_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyGameSvrCfg_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyGameSvrCfg_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyGameSvrCfg_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyGameSvrCfg_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyGameSvrCfg_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyGameSvrCfg_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyGameSvrCfg_ProtoModID_Parse(name, value);
  }

  typedef stNotifyGameSvrCfg_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyGameSvrCfg_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyGameSvrCfg_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyGameSvrCfg_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyGameSvrCfg_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyGameSvrCfg_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyGameSvrCfg_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyGameSvrCfg_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyGameSvrCfg_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stServerCfgPair cfgPair = 1;
  inline int cfgpair_size() const;
  inline void clear_cfgpair();
  static const int kCfgPairFieldNumber = 1;
  inline const ::Global::stServerCfgPair& cfgpair(int index) const;
  inline ::Global::stServerCfgPair* mutable_cfgpair(int index);
  inline ::Global::stServerCfgPair* add_cfgpair();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >&
      cfgpair() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >*
      mutable_cfgpair();

  // @@protoc_insertion_point(class_scope:Global.stNotifyGameSvrCfg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair > cfgpair_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyGameSvrCfg* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyCurEquipInfo : public ::google::protobuf::Message {
 public:
  stNotifyCurEquipInfo();
  virtual ~stNotifyCurEquipInfo();

  stNotifyCurEquipInfo(const stNotifyCurEquipInfo& from);

  inline stNotifyCurEquipInfo& operator=(const stNotifyCurEquipInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyCurEquipInfo& default_instance();

  void Swap(stNotifyCurEquipInfo* other);

  // implements Message ----------------------------------------------

  stNotifyCurEquipInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyCurEquipInfo& from);
  void MergeFrom(const stNotifyCurEquipInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyCurEquipInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyCurEquipInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyCurEquipInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyCurEquipInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyCurEquipInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyCurEquipInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyCurEquipInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyCurEquipInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyCurEquipInfo_ProtoModID_Parse(name, value);
  }

  typedef stNotifyCurEquipInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyCurEquipInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyCurEquipInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyCurEquipInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyCurEquipInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyCurEquipInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyCurEquipInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyCurEquipInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyCurEquipInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 itemID = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 effectID = 4;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 4;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyCurEquipInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_effectid();
  inline void clear_has_effectid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 effectid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyCurEquipInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReloginGame : public ::google::protobuf::Message {
 public:
  stReloginGame();
  virtual ~stReloginGame();

  stReloginGame(const stReloginGame& from);

  inline stReloginGame& operator=(const stReloginGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReloginGame& default_instance();

  void Swap(stReloginGame* other);

  // implements Message ----------------------------------------------

  stReloginGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReloginGame& from);
  void MergeFrom(const stReloginGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReloginGame_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReloginGame_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReloginGame_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReloginGame_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReloginGame_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReloginGame_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReloginGame_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReloginGame_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReloginGame_ProtoModID_Parse(name, value);
  }

  typedef stReloginGame_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReloginGame_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReloginGame_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReloginGame_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReloginGame_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReloginGame_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReloginGame_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReloginGame_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReloginGame_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string device = 4;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 4;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // @@protoc_insertion_point(class_scope:Global.stReloginGame)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_device();
  inline void clear_has_device();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* ip_;
  ::std::string* device_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReloginGame* default_instance_;
};
// -------------------------------------------------------------------

class stFirstKillBaseInfo : public ::google::protobuf::Message {
 public:
  stFirstKillBaseInfo();
  virtual ~stFirstKillBaseInfo();

  stFirstKillBaseInfo(const stFirstKillBaseInfo& from);

  inline stFirstKillBaseInfo& operator=(const stFirstKillBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFirstKillBaseInfo& default_instance();

  void Swap(stFirstKillBaseInfo* other);

  // implements Message ----------------------------------------------

  stFirstKillBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFirstKillBaseInfo& from);
  void MergeFrom(const stFirstKillBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 6;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 6;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 photoID = 7;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 7;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stFirstKillBaseInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stFirstKillBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class stTeamCopyMapFinish : public ::google::protobuf::Message {
 public:
  stTeamCopyMapFinish();
  virtual ~stTeamCopyMapFinish();

  stTeamCopyMapFinish(const stTeamCopyMapFinish& from);

  inline stTeamCopyMapFinish& operator=(const stTeamCopyMapFinish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTeamCopyMapFinish& default_instance();

  void Swap(stTeamCopyMapFinish* other);

  // implements Message ----------------------------------------------

  stTeamCopyMapFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTeamCopyMapFinish& from);
  void MergeFrom(const stTeamCopyMapFinish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stTeamCopyMapFinish_ProtoModID ProtoModID;
  static const ProtoModID ModID = stTeamCopyMapFinish_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stTeamCopyMapFinish_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stTeamCopyMapFinish_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stTeamCopyMapFinish_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stTeamCopyMapFinish_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stTeamCopyMapFinish_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stTeamCopyMapFinish_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stTeamCopyMapFinish_ProtoModID_Parse(name, value);
  }

  typedef stTeamCopyMapFinish_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stTeamCopyMapFinish_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stTeamCopyMapFinish_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stTeamCopyMapFinish_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stTeamCopyMapFinish_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stTeamCopyMapFinish_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stTeamCopyMapFinish_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stTeamCopyMapFinish_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stTeamCopyMapFinish_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 copymapID = 1;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // repeated .Global.stFirstKillBaseInfo userInfo = 2;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  inline const ::Global::stFirstKillBaseInfo& userinfo(int index) const;
  inline ::Global::stFirstKillBaseInfo* mutable_userinfo(int index);
  inline ::Global::stFirstKillBaseInfo* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stFirstKillBaseInfo >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stFirstKillBaseInfo >*
      mutable_userinfo();

  // @@protoc_insertion_point(class_scope:Global.stTeamCopyMapFinish)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stFirstKillBaseInfo > userinfo_;
  ::google::protobuf::uint32 copymapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stTeamCopyMapFinish* default_instance_;
};
// -------------------------------------------------------------------

class stUserOnlineSendFirstKillInfo : public ::google::protobuf::Message {
 public:
  stUserOnlineSendFirstKillInfo();
  virtual ~stUserOnlineSendFirstKillInfo();

  stUserOnlineSendFirstKillInfo(const stUserOnlineSendFirstKillInfo& from);

  inline stUserOnlineSendFirstKillInfo& operator=(const stUserOnlineSendFirstKillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserOnlineSendFirstKillInfo& default_instance();

  void Swap(stUserOnlineSendFirstKillInfo* other);

  // implements Message ----------------------------------------------

  stUserOnlineSendFirstKillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserOnlineSendFirstKillInfo& from);
  void MergeFrom(const stUserOnlineSendFirstKillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserOnlineSendFirstKillInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserOnlineSendFirstKillInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserOnlineSendFirstKillInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserOnlineSendFirstKillInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserOnlineSendFirstKillInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserOnlineSendFirstKillInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserOnlineSendFirstKillInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserOnlineSendFirstKillInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserOnlineSendFirstKillInfo_ProtoModID_Parse(name, value);
  }

  typedef stUserOnlineSendFirstKillInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserOnlineSendFirstKillInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserOnlineSendFirstKillInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserOnlineSendFirstKillInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserOnlineSendFirstKillInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserOnlineSendFirstKillInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserOnlineSendFirstKillInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserOnlineSendFirstKillInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserOnlineSendFirstKillInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated uint32 copymapID = 2;
  inline int copymapid_size() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 2;
  inline ::google::protobuf::uint32 copymapid(int index) const;
  inline void set_copymapid(int index, ::google::protobuf::uint32 value);
  inline void add_copymapid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      copymapid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_copymapid();

  // @@protoc_insertion_point(class_scope:Global.stUserOnlineSendFirstKillInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > copymapid_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUserOnlineSendFirstKillInfo* default_instance_;
};
// -------------------------------------------------------------------

class stTeamFinishFirstKill : public ::google::protobuf::Message {
 public:
  stTeamFinishFirstKill();
  virtual ~stTeamFinishFirstKill();

  stTeamFinishFirstKill(const stTeamFinishFirstKill& from);

  inline stTeamFinishFirstKill& operator=(const stTeamFinishFirstKill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTeamFinishFirstKill& default_instance();

  void Swap(stTeamFinishFirstKill* other);

  // implements Message ----------------------------------------------

  stTeamFinishFirstKill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTeamFinishFirstKill& from);
  void MergeFrom(const stTeamFinishFirstKill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stTeamFinishFirstKill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stTeamFinishFirstKill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stTeamFinishFirstKill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stTeamFinishFirstKill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stTeamFinishFirstKill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stTeamFinishFirstKill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stTeamFinishFirstKill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stTeamFinishFirstKill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stTeamFinishFirstKill_ProtoModID_Parse(name, value);
  }

  typedef stTeamFinishFirstKill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stTeamFinishFirstKill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stTeamFinishFirstKill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stTeamFinishFirstKill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stTeamFinishFirstKill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stTeamFinishFirstKill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stTeamFinishFirstKill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stTeamFinishFirstKill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stTeamFinishFirstKill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 copymapID = 1;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // optional uint32 charID1 = 2;
  inline bool has_charid1() const;
  inline void clear_charid1();
  static const int kCharID1FieldNumber = 2;
  inline ::google::protobuf::uint32 charid1() const;
  inline void set_charid1(::google::protobuf::uint32 value);

  // optional uint32 charID2 = 3;
  inline bool has_charid2() const;
  inline void clear_charid2();
  static const int kCharID2FieldNumber = 3;
  inline ::google::protobuf::uint32 charid2() const;
  inline void set_charid2(::google::protobuf::uint32 value);

  // optional uint32 charID3 = 4;
  inline bool has_charid3() const;
  inline void clear_charid3();
  static const int kCharID3FieldNumber = 4;
  inline ::google::protobuf::uint32 charid3() const;
  inline void set_charid3(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stTeamFinishFirstKill)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();
  inline void set_has_charid1();
  inline void clear_has_charid1();
  inline void set_has_charid2();
  inline void clear_has_charid2();
  inline void set_has_charid3();
  inline void clear_has_charid3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 copymapid_;
  ::google::protobuf::uint32 charid1_;
  ::google::protobuf::uint32 charid2_;
  ::google::protobuf::uint32 charid3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stTeamFinishFirstKill* default_instance_;
};
// -------------------------------------------------------------------

class stSetClearWorldBossTime : public ::google::protobuf::Message {
 public:
  stSetClearWorldBossTime();
  virtual ~stSetClearWorldBossTime();

  stSetClearWorldBossTime(const stSetClearWorldBossTime& from);

  inline stSetClearWorldBossTime& operator=(const stSetClearWorldBossTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSetClearWorldBossTime& default_instance();

  void Swap(stSetClearWorldBossTime* other);

  // implements Message ----------------------------------------------

  stSetClearWorldBossTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSetClearWorldBossTime& from);
  void MergeFrom(const stSetClearWorldBossTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSetClearWorldBossTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSetClearWorldBossTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSetClearWorldBossTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSetClearWorldBossTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSetClearWorldBossTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSetClearWorldBossTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSetClearWorldBossTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSetClearWorldBossTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSetClearWorldBossTime_ProtoModID_Parse(name, value);
  }

  typedef stSetClearWorldBossTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSetClearWorldBossTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSetClearWorldBossTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSetClearWorldBossTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSetClearWorldBossTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSetClearWorldBossTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSetClearWorldBossTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSetClearWorldBossTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSetClearWorldBossTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSetClearWorldBossTime)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSetClearWorldBossTime* default_instance_;
};
// -------------------------------------------------------------------

class stSetWorldBossBuyNum : public ::google::protobuf::Message {
 public:
  stSetWorldBossBuyNum();
  virtual ~stSetWorldBossBuyNum();

  stSetWorldBossBuyNum(const stSetWorldBossBuyNum& from);

  inline stSetWorldBossBuyNum& operator=(const stSetWorldBossBuyNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSetWorldBossBuyNum& default_instance();

  void Swap(stSetWorldBossBuyNum* other);

  // implements Message ----------------------------------------------

  stSetWorldBossBuyNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSetWorldBossBuyNum& from);
  void MergeFrom(const stSetWorldBossBuyNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSetWorldBossBuyNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSetWorldBossBuyNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSetWorldBossBuyNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSetWorldBossBuyNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSetWorldBossBuyNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSetWorldBossBuyNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSetWorldBossBuyNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSetWorldBossBuyNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSetWorldBossBuyNum_ProtoModID_Parse(name, value);
  }

  typedef stSetWorldBossBuyNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSetWorldBossBuyNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSetWorldBossBuyNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSetWorldBossBuyNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSetWorldBossBuyNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSetWorldBossBuyNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSetWorldBossBuyNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSetWorldBossBuyNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSetWorldBossBuyNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 buyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSetWorldBossBuyNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 buynum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSetWorldBossBuyNum* default_instance_;
};
// -------------------------------------------------------------------

class stUserDecSP : public ::google::protobuf::Message {
 public:
  stUserDecSP();
  virtual ~stUserDecSP();

  stUserDecSP(const stUserDecSP& from);

  inline stUserDecSP& operator=(const stUserDecSP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserDecSP& default_instance();

  void Swap(stUserDecSP* other);

  // implements Message ----------------------------------------------

  stUserDecSP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserDecSP& from);
  void MergeFrom(const stUserDecSP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserDecSP_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserDecSP_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserDecSP_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserDecSP_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserDecSP_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserDecSP_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserDecSP_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserDecSP_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserDecSP_ProtoModID_Parse(name, value);
  }

  typedef stUserDecSP_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserDecSP_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserDecSP_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserDecSP_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserDecSP_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserDecSP_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserDecSP_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserDecSP_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserDecSP_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 sp = 2;
  inline bool has_sp() const;
  inline void clear_sp();
  static const int kSpFieldNumber = 2;
  inline ::google::protobuf::uint32 sp() const;
  inline void set_sp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stUserDecSP)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_sp();
  inline void clear_has_sp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 sp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUserDecSP* default_instance_;
};
// -------------------------------------------------------------------

class stUsreDecLilian : public ::google::protobuf::Message {
 public:
  stUsreDecLilian();
  virtual ~stUsreDecLilian();

  stUsreDecLilian(const stUsreDecLilian& from);

  inline stUsreDecLilian& operator=(const stUsreDecLilian& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUsreDecLilian& default_instance();

  void Swap(stUsreDecLilian* other);

  // implements Message ----------------------------------------------

  stUsreDecLilian* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUsreDecLilian& from);
  void MergeFrom(const stUsreDecLilian& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUsreDecLilian_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUsreDecLilian_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUsreDecLilian_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUsreDecLilian_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUsreDecLilian_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUsreDecLilian_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUsreDecLilian_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUsreDecLilian_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUsreDecLilian_ProtoModID_Parse(name, value);
  }

  typedef stUsreDecLilian_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUsreDecLilian_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUsreDecLilian_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUsreDecLilian_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUsreDecLilian_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUsreDecLilian_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUsreDecLilian_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUsreDecLilian_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUsreDecLilian_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 lilian = 2;
  inline bool has_lilian() const;
  inline void clear_lilian();
  static const int kLilianFieldNumber = 2;
  inline ::google::protobuf::uint32 lilian() const;
  inline void set_lilian(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stUsreDecLilian)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_lilian();
  inline void clear_has_lilian();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 lilian_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUsreDecLilian* default_instance_;
};
// -------------------------------------------------------------------

class stUserDamagePair : public ::google::protobuf::Message {
 public:
  stUserDamagePair();
  virtual ~stUserDamagePair();

  stUserDamagePair(const stUserDamagePair& from);

  inline stUserDamagePair& operator=(const stUserDamagePair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserDamagePair& default_instance();

  void Swap(stUserDamagePair* other);

  // implements Message ----------------------------------------------

  stUserDamagePair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserDamagePair& from);
  void MergeFrom(const stUserDamagePair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 damage = 2;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 2;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stUserDamagePair)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 damage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUserDamagePair* default_instance_;
};
// -------------------------------------------------------------------

class stGuildCopymapFail : public ::google::protobuf::Message {
 public:
  stGuildCopymapFail();
  virtual ~stGuildCopymapFail();

  stGuildCopymapFail(const stGuildCopymapFail& from);

  inline stGuildCopymapFail& operator=(const stGuildCopymapFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuildCopymapFail& default_instance();

  void Swap(stGuildCopymapFail* other);

  // implements Message ----------------------------------------------

  stGuildCopymapFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuildCopymapFail& from);
  void MergeFrom(const stGuildCopymapFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuildCopymapFail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuildCopymapFail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuildCopymapFail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuildCopymapFail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuildCopymapFail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuildCopymapFail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuildCopymapFail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuildCopymapFail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuildCopymapFail_ProtoModID_Parse(name, value);
  }

  typedef stGuildCopymapFail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuildCopymapFail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuildCopymapFail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuildCopymapFail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuildCopymapFail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuildCopymapFail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuildCopymapFail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuildCopymapFail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuildCopymapFail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stUserDamagePair damageInfo = 1;
  inline int damageinfo_size() const;
  inline void clear_damageinfo();
  static const int kDamageInfoFieldNumber = 1;
  inline const ::Global::stUserDamagePair& damageinfo(int index) const;
  inline ::Global::stUserDamagePair* mutable_damageinfo(int index);
  inline ::Global::stUserDamagePair* add_damageinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >&
      damageinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >*
      mutable_damageinfo();

  // optional uint32 bossHP = 2;
  inline bool has_bosshp() const;
  inline void clear_bosshp();
  static const int kBossHPFieldNumber = 2;
  inline ::google::protobuf::uint32 bosshp() const;
  inline void set_bosshp(::google::protobuf::uint32 value);

  // optional uint32 copymapID = 3;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 3;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGuildCopymapFail)
 private:
  inline void set_has_bosshp();
  inline void clear_has_bosshp();
  inline void set_has_copymapid();
  inline void clear_has_copymapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair > damageinfo_;
  ::google::protobuf::uint32 bosshp_;
  ::google::protobuf::uint32 copymapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGuildCopymapFail* default_instance_;
};
// -------------------------------------------------------------------

class stGuildCopymapKillBoss : public ::google::protobuf::Message {
 public:
  stGuildCopymapKillBoss();
  virtual ~stGuildCopymapKillBoss();

  stGuildCopymapKillBoss(const stGuildCopymapKillBoss& from);

  inline stGuildCopymapKillBoss& operator=(const stGuildCopymapKillBoss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuildCopymapKillBoss& default_instance();

  void Swap(stGuildCopymapKillBoss* other);

  // implements Message ----------------------------------------------

  stGuildCopymapKillBoss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuildCopymapKillBoss& from);
  void MergeFrom(const stGuildCopymapKillBoss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuildCopymapKillBoss_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuildCopymapKillBoss_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuildCopymapKillBoss_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuildCopymapKillBoss_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuildCopymapKillBoss_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuildCopymapKillBoss_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuildCopymapKillBoss_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuildCopymapKillBoss_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuildCopymapKillBoss_ProtoModID_Parse(name, value);
  }

  typedef stGuildCopymapKillBoss_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuildCopymapKillBoss_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuildCopymapKillBoss_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuildCopymapKillBoss_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuildCopymapKillBoss_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuildCopymapKillBoss_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuildCopymapKillBoss_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuildCopymapKillBoss_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuildCopymapKillBoss_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stUserDamagePair damageInfo = 1;
  inline int damageinfo_size() const;
  inline void clear_damageinfo();
  static const int kDamageInfoFieldNumber = 1;
  inline const ::Global::stUserDamagePair& damageinfo(int index) const;
  inline ::Global::stUserDamagePair* mutable_damageinfo(int index);
  inline ::Global::stUserDamagePair* add_damageinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >&
      damageinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >*
      mutable_damageinfo();

  // optional uint32 copymapID = 2;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 2;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // optional uint32 killCharID = 3;
  inline bool has_killcharid() const;
  inline void clear_killcharid();
  static const int kKillCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 killcharid() const;
  inline void set_killcharid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGuildCopymapKillBoss)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();
  inline void set_has_killcharid();
  inline void clear_has_killcharid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair > damageinfo_;
  ::google::protobuf::uint32 copymapid_;
  ::google::protobuf::uint32 killcharid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGuildCopymapKillBoss* default_instance_;
};
// -------------------------------------------------------------------

class stWorldBossCopymapFail : public ::google::protobuf::Message {
 public:
  stWorldBossCopymapFail();
  virtual ~stWorldBossCopymapFail();

  stWorldBossCopymapFail(const stWorldBossCopymapFail& from);

  inline stWorldBossCopymapFail& operator=(const stWorldBossCopymapFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stWorldBossCopymapFail& default_instance();

  void Swap(stWorldBossCopymapFail* other);

  // implements Message ----------------------------------------------

  stWorldBossCopymapFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stWorldBossCopymapFail& from);
  void MergeFrom(const stWorldBossCopymapFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stWorldBossCopymapFail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stWorldBossCopymapFail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stWorldBossCopymapFail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stWorldBossCopymapFail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stWorldBossCopymapFail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stWorldBossCopymapFail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stWorldBossCopymapFail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stWorldBossCopymapFail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stWorldBossCopymapFail_ProtoModID_Parse(name, value);
  }

  typedef stWorldBossCopymapFail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stWorldBossCopymapFail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stWorldBossCopymapFail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stWorldBossCopymapFail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stWorldBossCopymapFail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stWorldBossCopymapFail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stWorldBossCopymapFail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stWorldBossCopymapFail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stWorldBossCopymapFail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stUserDamagePair damageInfo = 1;
  inline int damageinfo_size() const;
  inline void clear_damageinfo();
  static const int kDamageInfoFieldNumber = 1;
  inline const ::Global::stUserDamagePair& damageinfo(int index) const;
  inline ::Global::stUserDamagePair* mutable_damageinfo(int index);
  inline ::Global::stUserDamagePair* add_damageinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >&
      damageinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >*
      mutable_damageinfo();

  // optional uint32 bossHP = 2;
  inline bool has_bosshp() const;
  inline void clear_bosshp();
  static const int kBossHPFieldNumber = 2;
  inline ::google::protobuf::uint32 bosshp() const;
  inline void set_bosshp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stWorldBossCopymapFail)
 private:
  inline void set_has_bosshp();
  inline void clear_has_bosshp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair > damageinfo_;
  ::google::protobuf::uint32 bosshp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stWorldBossCopymapFail* default_instance_;
};
// -------------------------------------------------------------------

class stKillWorldBoss : public ::google::protobuf::Message {
 public:
  stKillWorldBoss();
  virtual ~stKillWorldBoss();

  stKillWorldBoss(const stKillWorldBoss& from);

  inline stKillWorldBoss& operator=(const stKillWorldBoss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stKillWorldBoss& default_instance();

  void Swap(stKillWorldBoss* other);

  // implements Message ----------------------------------------------

  stKillWorldBoss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stKillWorldBoss& from);
  void MergeFrom(const stKillWorldBoss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stKillWorldBoss_ProtoModID ProtoModID;
  static const ProtoModID ModID = stKillWorldBoss_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stKillWorldBoss_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stKillWorldBoss_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stKillWorldBoss_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stKillWorldBoss_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stKillWorldBoss_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stKillWorldBoss_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stKillWorldBoss_ProtoModID_Parse(name, value);
  }

  typedef stKillWorldBoss_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stKillWorldBoss_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stKillWorldBoss_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stKillWorldBoss_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stKillWorldBoss_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stKillWorldBoss_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stKillWorldBoss_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stKillWorldBoss_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stKillWorldBoss_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stUserDamagePair damageInfo = 1;
  inline int damageinfo_size() const;
  inline void clear_damageinfo();
  static const int kDamageInfoFieldNumber = 1;
  inline const ::Global::stUserDamagePair& damageinfo(int index) const;
  inline ::Global::stUserDamagePair* mutable_damageinfo(int index);
  inline ::Global::stUserDamagePair* add_damageinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >&
      damageinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >*
      mutable_damageinfo();

  // optional uint32 killCharID = 2;
  inline bool has_killcharid() const;
  inline void clear_killcharid();
  static const int kKillCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 killcharid() const;
  inline void set_killcharid(::google::protobuf::uint32 value);

  // optional uint32 bossID = 3;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIDFieldNumber = 3;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stKillWorldBoss)
 private:
  inline void set_has_killcharid();
  inline void clear_has_killcharid();
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair > damageinfo_;
  ::google::protobuf::uint32 killcharid_;
  ::google::protobuf::uint32 bossid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stKillWorldBoss* default_instance_;
};
// -------------------------------------------------------------------

class stDrawHeroScoreReward : public ::google::protobuf::Message {
 public:
  stDrawHeroScoreReward();
  virtual ~stDrawHeroScoreReward();

  stDrawHeroScoreReward(const stDrawHeroScoreReward& from);

  inline stDrawHeroScoreReward& operator=(const stDrawHeroScoreReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDrawHeroScoreReward& default_instance();

  void Swap(stDrawHeroScoreReward* other);

  // implements Message ----------------------------------------------

  stDrawHeroScoreReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDrawHeroScoreReward& from);
  void MergeFrom(const stDrawHeroScoreReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDrawHeroScoreReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDrawHeroScoreReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDrawHeroScoreReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDrawHeroScoreReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDrawHeroScoreReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDrawHeroScoreReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDrawHeroScoreReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDrawHeroScoreReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDrawHeroScoreReward_ProtoModID_Parse(name, value);
  }

  typedef stDrawHeroScoreReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDrawHeroScoreReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDrawHeroScoreReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDrawHeroScoreReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDrawHeroScoreReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDrawHeroScoreReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDrawHeroScoreReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDrawHeroScoreReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDrawHeroScoreReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 boxID = 2;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIDFieldNumber = 2;
  inline ::google::protobuf::uint32 boxid() const;
  inline void set_boxid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stDrawHeroScoreReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDrawHeroScoreReward* default_instance_;
};
// -------------------------------------------------------------------

class stDrawHeroRankReward : public ::google::protobuf::Message {
 public:
  stDrawHeroRankReward();
  virtual ~stDrawHeroRankReward();

  stDrawHeroRankReward(const stDrawHeroRankReward& from);

  inline stDrawHeroRankReward& operator=(const stDrawHeroRankReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDrawHeroRankReward& default_instance();

  void Swap(stDrawHeroRankReward* other);

  // implements Message ----------------------------------------------

  stDrawHeroRankReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDrawHeroRankReward& from);
  void MergeFrom(const stDrawHeroRankReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDrawHeroRankReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDrawHeroRankReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDrawHeroRankReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDrawHeroRankReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDrawHeroRankReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDrawHeroRankReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDrawHeroRankReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDrawHeroRankReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDrawHeroRankReward_ProtoModID_Parse(name, value);
  }

  typedef stDrawHeroRankReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDrawHeroRankReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDrawHeroRankReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDrawHeroRankReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDrawHeroRankReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDrawHeroRankReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDrawHeroRankReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDrawHeroRankReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDrawHeroRankReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 boxID = 2;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIDFieldNumber = 2;
  inline ::google::protobuf::uint32 boxid() const;
  inline void set_boxid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stDrawHeroRankReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDrawHeroRankReward* default_instance_;
};
// -------------------------------------------------------------------

class stCompensantionItem : public ::google::protobuf::Message {
 public:
  stCompensantionItem();
  virtual ~stCompensantionItem();

  stCompensantionItem(const stCompensantionItem& from);

  inline stCompensantionItem& operator=(const stCompensantionItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCompensantionItem& default_instance();

  void Swap(stCompensantionItem* other);

  // implements Message ----------------------------------------------

  stCompensantionItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCompensantionItem& from);
  void MergeFrom(const stCompensantionItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stCompensantionItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCompensantionItem* default_instance_;
};
// -------------------------------------------------------------------

class stSetCompensationID : public ::google::protobuf::Message {
 public:
  stSetCompensationID();
  virtual ~stSetCompensationID();

  stSetCompensationID(const stSetCompensationID& from);

  inline stSetCompensationID& operator=(const stSetCompensationID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSetCompensationID& default_instance();

  void Swap(stSetCompensationID* other);

  // implements Message ----------------------------------------------

  stSetCompensationID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSetCompensationID& from);
  void MergeFrom(const stSetCompensationID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSetCompensationID_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSetCompensationID_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSetCompensationID_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSetCompensationID_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSetCompensationID_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSetCompensationID_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSetCompensationID_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSetCompensationID_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSetCompensationID_ProtoModID_Parse(name, value);
  }

  typedef stSetCompensationID_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSetCompensationID_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSetCompensationID_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSetCompensationID_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSetCompensationID_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSetCompensationID_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSetCompensationID_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSetCompensationID_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSetCompensationID_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 compensationID = 2;
  inline bool has_compensationid() const;
  inline void clear_compensationid();
  static const int kCompensationIDFieldNumber = 2;
  inline ::google::protobuf::uint32 compensationid() const;
  inline void set_compensationid(::google::protobuf::uint32 value);

  // repeated .Global.stCompensantionItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Global::stCompensantionItem& items(int index) const;
  inline ::Global::stCompensantionItem* mutable_items(int index);
  inline ::Global::stCompensantionItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stCompensantionItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stCompensantionItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Global.stSetCompensationID)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_compensationid();
  inline void clear_has_compensationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 compensationid_;
  ::google::protobuf::RepeatedPtrField< ::Global::stCompensantionItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSetCompensationID* default_instance_;
};
// -------------------------------------------------------------------

class stSetOpenServerDay : public ::google::protobuf::Message {
 public:
  stSetOpenServerDay();
  virtual ~stSetOpenServerDay();

  stSetOpenServerDay(const stSetOpenServerDay& from);

  inline stSetOpenServerDay& operator=(const stSetOpenServerDay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSetOpenServerDay& default_instance();

  void Swap(stSetOpenServerDay* other);

  // implements Message ----------------------------------------------

  stSetOpenServerDay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSetOpenServerDay& from);
  void MergeFrom(const stSetOpenServerDay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSetOpenServerDay_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSetOpenServerDay_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSetOpenServerDay_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSetOpenServerDay_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSetOpenServerDay_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSetOpenServerDay_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSetOpenServerDay_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSetOpenServerDay_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSetOpenServerDay_ProtoModID_Parse(name, value);
  }

  typedef stSetOpenServerDay_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSetOpenServerDay_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSetOpenServerDay_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSetOpenServerDay_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSetOpenServerDay_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSetOpenServerDay_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSetOpenServerDay_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSetOpenServerDay_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSetOpenServerDay_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSetOpenServerDay)
 private:
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSetOpenServerDay* default_instance_;
};
// -------------------------------------------------------------------

class stSynGuildLv2AllMember : public ::google::protobuf::Message {
 public:
  stSynGuildLv2AllMember();
  virtual ~stSynGuildLv2AllMember();

  stSynGuildLv2AllMember(const stSynGuildLv2AllMember& from);

  inline stSynGuildLv2AllMember& operator=(const stSynGuildLv2AllMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynGuildLv2AllMember& default_instance();

  void Swap(stSynGuildLv2AllMember* other);

  // implements Message ----------------------------------------------

  stSynGuildLv2AllMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynGuildLv2AllMember& from);
  void MergeFrom(const stSynGuildLv2AllMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynGuildLv2AllMember_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynGuildLv2AllMember_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynGuildLv2AllMember_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynGuildLv2AllMember_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynGuildLv2AllMember_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynGuildLv2AllMember_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynGuildLv2AllMember_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynGuildLv2AllMember_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynGuildLv2AllMember_ProtoModID_Parse(name, value);
  }

  typedef stSynGuildLv2AllMember_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynGuildLv2AllMember_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynGuildLv2AllMember_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynGuildLv2AllMember_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynGuildLv2AllMember_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynGuildLv2AllMember_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynGuildLv2AllMember_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynGuildLv2AllMember_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynGuildLv2AllMember_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 members = 1;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 1;
  inline ::google::protobuf::uint32 members(int index) const;
  inline void set_members(int index, ::google::protobuf::uint32 value);
  inline void add_members(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      members() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_members();

  // optional uint32 guildLv = 2;
  inline bool has_guildlv() const;
  inline void clear_guildlv();
  static const int kGuildLvFieldNumber = 2;
  inline ::google::protobuf::uint32 guildlv() const;
  inline void set_guildlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynGuildLv2AllMember)
 private:
  inline void set_has_guildlv();
  inline void clear_has_guildlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > members_;
  ::google::protobuf::uint32 guildlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynGuildLv2AllMember* default_instance_;
};
// -------------------------------------------------------------------

class stForwardChgBadge : public ::google::protobuf::Message {
 public:
  stForwardChgBadge();
  virtual ~stForwardChgBadge();

  stForwardChgBadge(const stForwardChgBadge& from);

  inline stForwardChgBadge& operator=(const stForwardChgBadge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stForwardChgBadge& default_instance();

  void Swap(stForwardChgBadge* other);

  // implements Message ----------------------------------------------

  stForwardChgBadge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stForwardChgBadge& from);
  void MergeFrom(const stForwardChgBadge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stForwardChgBadge_ProtoModID ProtoModID;
  static const ProtoModID ModID = stForwardChgBadge_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stForwardChgBadge_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stForwardChgBadge_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stForwardChgBadge_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stForwardChgBadge_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stForwardChgBadge_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stForwardChgBadge_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stForwardChgBadge_ProtoModID_Parse(name, value);
  }

  typedef stForwardChgBadge_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stForwardChgBadge_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stForwardChgBadge_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stForwardChgBadge_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stForwardChgBadge_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stForwardChgBadge_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stForwardChgBadge_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stForwardChgBadge_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stForwardChgBadge_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 badgeID = 2;
  inline bool has_badgeid() const;
  inline void clear_badgeid();
  static const int kBadgeIDFieldNumber = 2;
  inline ::google::protobuf::uint32 badgeid() const;
  inline void set_badgeid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stForwardChgBadge)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_badgeid();
  inline void clear_has_badgeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 badgeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stForwardChgBadge* default_instance_;
};
// -------------------------------------------------------------------

class stWorldBossBuyDecDiamond : public ::google::protobuf::Message {
 public:
  stWorldBossBuyDecDiamond();
  virtual ~stWorldBossBuyDecDiamond();

  stWorldBossBuyDecDiamond(const stWorldBossBuyDecDiamond& from);

  inline stWorldBossBuyDecDiamond& operator=(const stWorldBossBuyDecDiamond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stWorldBossBuyDecDiamond& default_instance();

  void Swap(stWorldBossBuyDecDiamond* other);

  // implements Message ----------------------------------------------

  stWorldBossBuyDecDiamond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stWorldBossBuyDecDiamond& from);
  void MergeFrom(const stWorldBossBuyDecDiamond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stWorldBossBuyDecDiamond_ProtoModID ProtoModID;
  static const ProtoModID ModID = stWorldBossBuyDecDiamond_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stWorldBossBuyDecDiamond_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stWorldBossBuyDecDiamond_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stWorldBossBuyDecDiamond_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stWorldBossBuyDecDiamond_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stWorldBossBuyDecDiamond_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stWorldBossBuyDecDiamond_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stWorldBossBuyDecDiamond_ProtoModID_Parse(name, value);
  }

  typedef stWorldBossBuyDecDiamond_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stWorldBossBuyDecDiamond_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stWorldBossBuyDecDiamond_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stWorldBossBuyDecDiamond_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stWorldBossBuyDecDiamond_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stWorldBossBuyDecDiamond_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stWorldBossBuyDecDiamond_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stWorldBossBuyDecDiamond_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stWorldBossBuyDecDiamond_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 hasBuyNum = 2;
  inline bool has_hasbuynum() const;
  inline void clear_hasbuynum();
  static const int kHasBuyNumFieldNumber = 2;
  inline ::google::protobuf::uint32 hasbuynum() const;
  inline void set_hasbuynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stWorldBossBuyDecDiamond)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_hasbuynum();
  inline void clear_has_hasbuynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 hasbuynum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stWorldBossBuyDecDiamond* default_instance_;
};
// -------------------------------------------------------------------

class stGuildDonateSuccess : public ::google::protobuf::Message {
 public:
  stGuildDonateSuccess();
  virtual ~stGuildDonateSuccess();

  stGuildDonateSuccess(const stGuildDonateSuccess& from);

  inline stGuildDonateSuccess& operator=(const stGuildDonateSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuildDonateSuccess& default_instance();

  void Swap(stGuildDonateSuccess* other);

  // implements Message ----------------------------------------------

  stGuildDonateSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuildDonateSuccess& from);
  void MergeFrom(const stGuildDonateSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuildDonateSuccess_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuildDonateSuccess_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuildDonateSuccess_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuildDonateSuccess_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuildDonateSuccess_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuildDonateSuccess_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuildDonateSuccess_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuildDonateSuccess_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuildDonateSuccess_ProtoModID_Parse(name, value);
  }

  typedef stGuildDonateSuccess_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuildDonateSuccess_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuildDonateSuccess_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuildDonateSuccess_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuildDonateSuccess_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuildDonateSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuildDonateSuccess_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuildDonateSuccess_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuildDonateSuccess_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 todayContribute = 2;
  inline bool has_todaycontribute() const;
  inline void clear_todaycontribute();
  static const int kTodayContributeFieldNumber = 2;
  inline ::google::protobuf::uint32 todaycontribute() const;
  inline void set_todaycontribute(::google::protobuf::uint32 value);

  // optional uint32 addContribute = 3;
  inline bool has_addcontribute() const;
  inline void clear_addcontribute();
  static const int kAddContributeFieldNumber = 3;
  inline ::google::protobuf::uint32 addcontribute() const;
  inline void set_addcontribute(::google::protobuf::uint32 value);

  // optional uint32 donateType = 4;
  inline bool has_donatetype() const;
  inline void clear_donatetype();
  static const int kDonateTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 donatetype() const;
  inline void set_donatetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGuildDonateSuccess)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_todaycontribute();
  inline void clear_has_todaycontribute();
  inline void set_has_addcontribute();
  inline void clear_has_addcontribute();
  inline void set_has_donatetype();
  inline void clear_has_donatetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 todaycontribute_;
  ::google::protobuf::uint32 addcontribute_;
  ::google::protobuf::uint32 donatetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGuildDonateSuccess* default_instance_;
};
// -------------------------------------------------------------------

class stUserLeaveWorldBoss : public ::google::protobuf::Message {
 public:
  stUserLeaveWorldBoss();
  virtual ~stUserLeaveWorldBoss();

  stUserLeaveWorldBoss(const stUserLeaveWorldBoss& from);

  inline stUserLeaveWorldBoss& operator=(const stUserLeaveWorldBoss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserLeaveWorldBoss& default_instance();

  void Swap(stUserLeaveWorldBoss* other);

  // implements Message ----------------------------------------------

  stUserLeaveWorldBoss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserLeaveWorldBoss& from);
  void MergeFrom(const stUserLeaveWorldBoss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserLeaveWorldBoss_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserLeaveWorldBoss_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserLeaveWorldBoss_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserLeaveWorldBoss_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserLeaveWorldBoss_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserLeaveWorldBoss_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserLeaveWorldBoss_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserLeaveWorldBoss_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserLeaveWorldBoss_ProtoModID_Parse(name, value);
  }

  typedef stUserLeaveWorldBoss_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserLeaveWorldBoss_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserLeaveWorldBoss_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserLeaveWorldBoss_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserLeaveWorldBoss_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserLeaveWorldBoss_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserLeaveWorldBoss_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserLeaveWorldBoss_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserLeaveWorldBoss_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stUserLeaveWorldBoss)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUserLeaveWorldBoss* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyGameAutoConnect : public ::google::protobuf::Message {
 public:
  stNotifyGameAutoConnect();
  virtual ~stNotifyGameAutoConnect();

  stNotifyGameAutoConnect(const stNotifyGameAutoConnect& from);

  inline stNotifyGameAutoConnect& operator=(const stNotifyGameAutoConnect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyGameAutoConnect& default_instance();

  void Swap(stNotifyGameAutoConnect* other);

  // implements Message ----------------------------------------------

  stNotifyGameAutoConnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyGameAutoConnect& from);
  void MergeFrom(const stNotifyGameAutoConnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyGameAutoConnect_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyGameAutoConnect_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyGameAutoConnect_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyGameAutoConnect_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyGameAutoConnect_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyGameAutoConnect_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyGameAutoConnect_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyGameAutoConnect_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyGameAutoConnect_ProtoModID_Parse(name, value);
  }

  typedef stNotifyGameAutoConnect_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyGameAutoConnect_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyGameAutoConnect_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyGameAutoConnect_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyGameAutoConnect_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyGameAutoConnect_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyGameAutoConnect_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyGameAutoConnect_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyGameAutoConnect_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string device = 4;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 4;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // @@protoc_insertion_point(class_scope:Global.stNotifyGameAutoConnect)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_device();
  inline void clear_has_device();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* ip_;
  ::std::string* device_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyGameAutoConnect* default_instance_;
};
// -------------------------------------------------------------------

class stForwardDrawHeroScoreReward : public ::google::protobuf::Message {
 public:
  stForwardDrawHeroScoreReward();
  virtual ~stForwardDrawHeroScoreReward();

  stForwardDrawHeroScoreReward(const stForwardDrawHeroScoreReward& from);

  inline stForwardDrawHeroScoreReward& operator=(const stForwardDrawHeroScoreReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stForwardDrawHeroScoreReward& default_instance();

  void Swap(stForwardDrawHeroScoreReward* other);

  // implements Message ----------------------------------------------

  stForwardDrawHeroScoreReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stForwardDrawHeroScoreReward& from);
  void MergeFrom(const stForwardDrawHeroScoreReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stForwardDrawHeroScoreReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stForwardDrawHeroScoreReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stForwardDrawHeroScoreReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stForwardDrawHeroScoreReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stForwardDrawHeroScoreReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stForwardDrawHeroScoreReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stForwardDrawHeroScoreReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stForwardDrawHeroScoreReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stForwardDrawHeroScoreReward_ProtoModID_Parse(name, value);
  }

  typedef stForwardDrawHeroScoreReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stForwardDrawHeroScoreReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stForwardDrawHeroScoreReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stForwardDrawHeroScoreReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stForwardDrawHeroScoreReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stForwardDrawHeroScoreReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stForwardDrawHeroScoreReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stForwardDrawHeroScoreReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stForwardDrawHeroScoreReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 scoreID = 2;
  inline bool has_scoreid() const;
  inline void clear_scoreid();
  static const int kScoreIDFieldNumber = 2;
  inline ::google::protobuf::uint32 scoreid() const;
  inline void set_scoreid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stForwardDrawHeroScoreReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_scoreid();
  inline void clear_has_scoreid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 scoreid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stForwardDrawHeroScoreReward* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyArenaReward : public ::google::protobuf::Message {
 public:
  stNotifyArenaReward();
  virtual ~stNotifyArenaReward();

  stNotifyArenaReward(const stNotifyArenaReward& from);

  inline stNotifyArenaReward& operator=(const stNotifyArenaReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyArenaReward& default_instance();

  void Swap(stNotifyArenaReward* other);

  // implements Message ----------------------------------------------

  stNotifyArenaReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyArenaReward& from);
  void MergeFrom(const stNotifyArenaReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyArenaReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyArenaReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyArenaReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyArenaReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyArenaReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyArenaReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyArenaReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyArenaReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyArenaReward_ProtoModID_Parse(name, value);
  }

  typedef stNotifyArenaReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyArenaReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyArenaReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyArenaReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyArenaReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyArenaReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyArenaReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyArenaReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyArenaReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 resType = 2;
  inline bool has_restype() const;
  inline void clear_restype();
  static const int kResTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 restype() const;
  inline void set_restype(::google::protobuf::uint32 value);

  // optional uint32 resNum = 3;
  inline bool has_resnum() const;
  inline void clear_resnum();
  static const int kResNumFieldNumber = 3;
  inline ::google::protobuf::uint32 resnum() const;
  inline void set_resnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyArenaReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_restype();
  inline void clear_has_restype();
  inline void set_has_resnum();
  inline void clear_has_resnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 restype_;
  ::google::protobuf::uint32 resnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyArenaReward* default_instance_;
};
// -------------------------------------------------------------------

class stForwardInvestgateAnswer : public ::google::protobuf::Message {
 public:
  stForwardInvestgateAnswer();
  virtual ~stForwardInvestgateAnswer();

  stForwardInvestgateAnswer(const stForwardInvestgateAnswer& from);

  inline stForwardInvestgateAnswer& operator=(const stForwardInvestgateAnswer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stForwardInvestgateAnswer& default_instance();

  void Swap(stForwardInvestgateAnswer* other);

  // implements Message ----------------------------------------------

  stForwardInvestgateAnswer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stForwardInvestgateAnswer& from);
  void MergeFrom(const stForwardInvestgateAnswer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 problemID = 1;
  inline bool has_problemid() const;
  inline void clear_problemid();
  static const int kProblemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 problemid() const;
  inline void set_problemid(::google::protobuf::uint32 value);

  // optional bool answerA = 2;
  inline bool has_answera() const;
  inline void clear_answera();
  static const int kAnswerAFieldNumber = 2;
  inline bool answera() const;
  inline void set_answera(bool value);

  // optional bool answerB = 3;
  inline bool has_answerb() const;
  inline void clear_answerb();
  static const int kAnswerBFieldNumber = 3;
  inline bool answerb() const;
  inline void set_answerb(bool value);

  // optional bool answerC = 4;
  inline bool has_answerc() const;
  inline void clear_answerc();
  static const int kAnswerCFieldNumber = 4;
  inline bool answerc() const;
  inline void set_answerc(bool value);

  // optional bool answerD = 5;
  inline bool has_answerd() const;
  inline void clear_answerd();
  static const int kAnswerDFieldNumber = 5;
  inline bool answerd() const;
  inline void set_answerd(bool value);

  // optional bool answerE = 6;
  inline bool has_answere() const;
  inline void clear_answere();
  static const int kAnswerEFieldNumber = 6;
  inline bool answere() const;
  inline void set_answere(bool value);

  // optional bool answerF = 7;
  inline bool has_answerf() const;
  inline void clear_answerf();
  static const int kAnswerFFieldNumber = 7;
  inline bool answerf() const;
  inline void set_answerf(bool value);

  // optional bool answerG = 8;
  inline bool has_answerg() const;
  inline void clear_answerg();
  static const int kAnswerGFieldNumber = 8;
  inline bool answerg() const;
  inline void set_answerg(bool value);

  // optional bool answerH = 9;
  inline bool has_answerh() const;
  inline void clear_answerh();
  static const int kAnswerHFieldNumber = 9;
  inline bool answerh() const;
  inline void set_answerh(bool value);

  // optional bool answerI = 10;
  inline bool has_answeri() const;
  inline void clear_answeri();
  static const int kAnswerIFieldNumber = 10;
  inline bool answeri() const;
  inline void set_answeri(bool value);

  // optional bool answerJ = 11;
  inline bool has_answerj() const;
  inline void clear_answerj();
  static const int kAnswerJFieldNumber = 11;
  inline bool answerj() const;
  inline void set_answerj(bool value);

  // @@protoc_insertion_point(class_scope:Global.stForwardInvestgateAnswer)
 private:
  inline void set_has_problemid();
  inline void clear_has_problemid();
  inline void set_has_answera();
  inline void clear_has_answera();
  inline void set_has_answerb();
  inline void clear_has_answerb();
  inline void set_has_answerc();
  inline void clear_has_answerc();
  inline void set_has_answerd();
  inline void clear_has_answerd();
  inline void set_has_answere();
  inline void clear_has_answere();
  inline void set_has_answerf();
  inline void clear_has_answerf();
  inline void set_has_answerg();
  inline void clear_has_answerg();
  inline void set_has_answerh();
  inline void clear_has_answerh();
  inline void set_has_answeri();
  inline void clear_has_answeri();
  inline void set_has_answerj();
  inline void clear_has_answerj();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 problemid_;
  bool answera_;
  bool answerb_;
  bool answerc_;
  bool answerd_;
  bool answere_;
  bool answerf_;
  bool answerg_;
  bool answerh_;
  bool answeri_;
  bool answerj_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stForwardInvestgateAnswer* default_instance_;
};
// -------------------------------------------------------------------

class ForwardInvestgateResult : public ::google::protobuf::Message {
 public:
  ForwardInvestgateResult();
  virtual ~ForwardInvestgateResult();

  ForwardInvestgateResult(const ForwardInvestgateResult& from);

  inline ForwardInvestgateResult& operator=(const ForwardInvestgateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardInvestgateResult& default_instance();

  void Swap(ForwardInvestgateResult* other);

  // implements Message ----------------------------------------------

  ForwardInvestgateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardInvestgateResult& from);
  void MergeFrom(const ForwardInvestgateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ForwardInvestgateResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = ForwardInvestgateResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ForwardInvestgateResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ForwardInvestgateResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ForwardInvestgateResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ForwardInvestgateResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ForwardInvestgateResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ForwardInvestgateResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ForwardInvestgateResult_ProtoModID_Parse(name, value);
  }

  typedef ForwardInvestgateResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ForwardInvestgateResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ForwardInvestgateResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ForwardInvestgateResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ForwardInvestgateResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ForwardInvestgateResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ForwardInvestgateResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ForwardInvestgateResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ForwardInvestgateResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 questID = 1;
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestIDFieldNumber = 1;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // repeated .Global.stForwardInvestgateAnswer infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::Global::stForwardInvestgateAnswer& infos(int index) const;
  inline ::Global::stForwardInvestgateAnswer* mutable_infos(int index);
  inline ::Global::stForwardInvestgateAnswer* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stForwardInvestgateAnswer >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stForwardInvestgateAnswer >*
      mutable_infos();

  // optional uint32 charID = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 useTime = 4;
  inline bool has_usetime() const;
  inline void clear_usetime();
  static const int kUseTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 usetime() const;
  inline void set_usetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.ForwardInvestgateResult)
 private:
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_usetime();
  inline void clear_has_usetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stForwardInvestgateAnswer > infos_;
  ::google::protobuf::uint32 questid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 usetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static ForwardInvestgateResult* default_instance_;
};
// -------------------------------------------------------------------

class stGMModifyUserInfo : public ::google::protobuf::Message {
 public:
  stGMModifyUserInfo();
  virtual ~stGMModifyUserInfo();

  stGMModifyUserInfo(const stGMModifyUserInfo& from);

  inline stGMModifyUserInfo& operator=(const stGMModifyUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGMModifyUserInfo& default_instance();

  void Swap(stGMModifyUserInfo* other);

  // implements Message ----------------------------------------------

  stGMModifyUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGMModifyUserInfo& from);
  void MergeFrom(const stGMModifyUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGMModifyUserInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGMModifyUserInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGMModifyUserInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGMModifyUserInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGMModifyUserInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGMModifyUserInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGMModifyUserInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGMModifyUserInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGMModifyUserInfo_ProtoModID_Parse(name, value);
  }

  typedef stGMModifyUserInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGMModifyUserInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGMModifyUserInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGMModifyUserInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGMModifyUserInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGMModifyUserInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGMModifyUserInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGMModifyUserInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGMModifyUserInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 newbieGuideID = 2;
  inline bool has_newbieguideid() const;
  inline void clear_newbieguideid();
  static const int kNewbieGuideIDFieldNumber = 2;
  inline ::google::protobuf::uint32 newbieguideid() const;
  inline void set_newbieguideid(::google::protobuf::uint32 value);

  // optional uint32 goldCoin = 3;
  inline bool has_goldcoin() const;
  inline void clear_goldcoin();
  static const int kGoldCoinFieldNumber = 3;
  inline ::google::protobuf::uint32 goldcoin() const;
  inline void set_goldcoin(::google::protobuf::uint32 value);

  // optional uint32 diamond = 4;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 4;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // optional uint32 vipPoint = 5;
  inline bool has_vippoint() const;
  inline void clear_vippoint();
  static const int kVipPointFieldNumber = 5;
  inline ::google::protobuf::uint32 vippoint() const;
  inline void set_vippoint(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGMModifyUserInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_newbieguideid();
  inline void clear_has_newbieguideid();
  inline void set_has_goldcoin();
  inline void clear_has_goldcoin();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_vippoint();
  inline void clear_has_vippoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 newbieguideid_;
  ::google::protobuf::uint32 goldcoin_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint32 vippoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGMModifyUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynMyArenaRank : public ::google::protobuf::Message {
 public:
  stSynMyArenaRank();
  virtual ~stSynMyArenaRank();

  stSynMyArenaRank(const stSynMyArenaRank& from);

  inline stSynMyArenaRank& operator=(const stSynMyArenaRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynMyArenaRank& default_instance();

  void Swap(stSynMyArenaRank* other);

  // implements Message ----------------------------------------------

  stSynMyArenaRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynMyArenaRank& from);
  void MergeFrom(const stSynMyArenaRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynMyArenaRank_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynMyArenaRank_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynMyArenaRank_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynMyArenaRank_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynMyArenaRank_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynMyArenaRank_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynMyArenaRank_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynMyArenaRank_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynMyArenaRank_ProtoModID_Parse(name, value);
  }

  typedef stSynMyArenaRank_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynMyArenaRank_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynMyArenaRank_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynMyArenaRank_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynMyArenaRank_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynMyArenaRank_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynMyArenaRank_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynMyArenaRank_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynMyArenaRank_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynMyArenaRank)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynMyArenaRank* default_instance_;
};
// -------------------------------------------------------------------

class stSynVipLv : public ::google::protobuf::Message {
 public:
  stSynVipLv();
  virtual ~stSynVipLv();

  stSynVipLv(const stSynVipLv& from);

  inline stSynVipLv& operator=(const stSynVipLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynVipLv& default_instance();

  void Swap(stSynVipLv* other);

  // implements Message ----------------------------------------------

  stSynVipLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynVipLv& from);
  void MergeFrom(const stSynVipLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynVipLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynVipLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynVipLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynVipLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynVipLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynVipLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynVipLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynVipLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynVipLv_ProtoModID_Parse(name, value);
  }

  typedef stSynVipLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynVipLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynVipLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynVipLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynVipLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynVipLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynVipLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynVipLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynVipLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 2;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 2;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynVipLv)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_viplv();
  inline void clear_has_viplv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 viplv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynVipLv* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyClearArenaCD : public ::google::protobuf::Message {
 public:
  stNotifyClearArenaCD();
  virtual ~stNotifyClearArenaCD();

  stNotifyClearArenaCD(const stNotifyClearArenaCD& from);

  inline stNotifyClearArenaCD& operator=(const stNotifyClearArenaCD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyClearArenaCD& default_instance();

  void Swap(stNotifyClearArenaCD* other);

  // implements Message ----------------------------------------------

  stNotifyClearArenaCD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyClearArenaCD& from);
  void MergeFrom(const stNotifyClearArenaCD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyClearArenaCD_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyClearArenaCD_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyClearArenaCD_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyClearArenaCD_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyClearArenaCD_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyClearArenaCD_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyClearArenaCD_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyClearArenaCD_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyClearArenaCD_ProtoModID_Parse(name, value);
  }

  typedef stNotifyClearArenaCD_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyClearArenaCD_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyClearArenaCD_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyClearArenaCD_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyClearArenaCD_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyClearArenaCD_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyClearArenaCD_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyClearArenaCD_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyClearArenaCD_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyClearArenaCD)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyClearArenaCD* default_instance_;
};
// -------------------------------------------------------------------

class stReqResetArenaChallengeNum : public ::google::protobuf::Message {
 public:
  stReqResetArenaChallengeNum();
  virtual ~stReqResetArenaChallengeNum();

  stReqResetArenaChallengeNum(const stReqResetArenaChallengeNum& from);

  inline stReqResetArenaChallengeNum& operator=(const stReqResetArenaChallengeNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqResetArenaChallengeNum& default_instance();

  void Swap(stReqResetArenaChallengeNum* other);

  // implements Message ----------------------------------------------

  stReqResetArenaChallengeNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqResetArenaChallengeNum& from);
  void MergeFrom(const stReqResetArenaChallengeNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqResetArenaChallengeNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqResetArenaChallengeNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqResetArenaChallengeNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqResetArenaChallengeNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqResetArenaChallengeNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqResetArenaChallengeNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqResetArenaChallengeNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqResetArenaChallengeNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqResetArenaChallengeNum_ProtoModID_Parse(name, value);
  }

  typedef stReqResetArenaChallengeNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqResetArenaChallengeNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqResetArenaChallengeNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqResetArenaChallengeNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqResetArenaChallengeNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqResetArenaChallengeNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 curResetNum = 2;
  inline bool has_curresetnum() const;
  inline void clear_curresetnum();
  static const int kCurResetNumFieldNumber = 2;
  inline ::google::protobuf::uint32 curresetnum() const;
  inline void set_curresetnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqResetArenaChallengeNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_curresetnum();
  inline void clear_has_curresetnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 curresetnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqResetArenaChallengeNum* default_instance_;
};
// -------------------------------------------------------------------

class stNotfiyResetChallengeNum : public ::google::protobuf::Message {
 public:
  stNotfiyResetChallengeNum();
  virtual ~stNotfiyResetChallengeNum();

  stNotfiyResetChallengeNum(const stNotfiyResetChallengeNum& from);

  inline stNotfiyResetChallengeNum& operator=(const stNotfiyResetChallengeNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotfiyResetChallengeNum& default_instance();

  void Swap(stNotfiyResetChallengeNum* other);

  // implements Message ----------------------------------------------

  stNotfiyResetChallengeNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotfiyResetChallengeNum& from);
  void MergeFrom(const stNotfiyResetChallengeNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotfiyResetChallengeNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotfiyResetChallengeNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotfiyResetChallengeNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotfiyResetChallengeNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotfiyResetChallengeNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotfiyResetChallengeNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotfiyResetChallengeNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotfiyResetChallengeNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotfiyResetChallengeNum_ProtoModID_Parse(name, value);
  }

  typedef stNotfiyResetChallengeNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotfiyResetChallengeNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotfiyResetChallengeNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotfiyResetChallengeNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotfiyResetChallengeNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotfiyResetChallengeNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotfiyResetChallengeNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotfiyResetChallengeNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotfiyResetChallengeNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotfiyResetChallengeNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotfiyResetChallengeNum* default_instance_;
};
// -------------------------------------------------------------------

class stReqResetInterceptNum : public ::google::protobuf::Message {
 public:
  stReqResetInterceptNum();
  virtual ~stReqResetInterceptNum();

  stReqResetInterceptNum(const stReqResetInterceptNum& from);

  inline stReqResetInterceptNum& operator=(const stReqResetInterceptNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqResetInterceptNum& default_instance();

  void Swap(stReqResetInterceptNum* other);

  // implements Message ----------------------------------------------

  stReqResetInterceptNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqResetInterceptNum& from);
  void MergeFrom(const stReqResetInterceptNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqResetInterceptNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqResetInterceptNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqResetInterceptNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqResetInterceptNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqResetInterceptNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqResetInterceptNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqResetInterceptNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqResetInterceptNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqResetInterceptNum_ProtoModID_Parse(name, value);
  }

  typedef stReqResetInterceptNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqResetInterceptNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqResetInterceptNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqResetInterceptNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqResetInterceptNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqResetInterceptNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqResetInterceptNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqResetInterceptNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqResetInterceptNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 resetNum = 2;
  inline bool has_resetnum() const;
  inline void clear_resetnum();
  static const int kResetNumFieldNumber = 2;
  inline ::google::protobuf::uint32 resetnum() const;
  inline void set_resetnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqResetInterceptNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_resetnum();
  inline void clear_has_resetnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 resetnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqResetInterceptNum* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyClearInterceptCD : public ::google::protobuf::Message {
 public:
  stNotifyClearInterceptCD();
  virtual ~stNotifyClearInterceptCD();

  stNotifyClearInterceptCD(const stNotifyClearInterceptCD& from);

  inline stNotifyClearInterceptCD& operator=(const stNotifyClearInterceptCD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyClearInterceptCD& default_instance();

  void Swap(stNotifyClearInterceptCD* other);

  // implements Message ----------------------------------------------

  stNotifyClearInterceptCD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyClearInterceptCD& from);
  void MergeFrom(const stNotifyClearInterceptCD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyClearInterceptCD_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyClearInterceptCD_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyClearInterceptCD_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyClearInterceptCD_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyClearInterceptCD_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyClearInterceptCD_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyClearInterceptCD_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyClearInterceptCD_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyClearInterceptCD_ProtoModID_Parse(name, value);
  }

  typedef stNotifyClearInterceptCD_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyClearInterceptCD_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyClearInterceptCD_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyClearInterceptCD_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyClearInterceptCD_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyClearInterceptCD_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyClearInterceptCD_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyClearInterceptCD_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyClearInterceptCD_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyClearInterceptCD)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyClearInterceptCD* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyResetInterceptNum : public ::google::protobuf::Message {
 public:
  stNotifyResetInterceptNum();
  virtual ~stNotifyResetInterceptNum();

  stNotifyResetInterceptNum(const stNotifyResetInterceptNum& from);

  inline stNotifyResetInterceptNum& operator=(const stNotifyResetInterceptNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyResetInterceptNum& default_instance();

  void Swap(stNotifyResetInterceptNum* other);

  // implements Message ----------------------------------------------

  stNotifyResetInterceptNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyResetInterceptNum& from);
  void MergeFrom(const stNotifyResetInterceptNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyResetInterceptNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyResetInterceptNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyResetInterceptNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyResetInterceptNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyResetInterceptNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyResetInterceptNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyResetInterceptNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyResetInterceptNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyResetInterceptNum_ProtoModID_Parse(name, value);
  }

  typedef stNotifyResetInterceptNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyResetInterceptNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyResetInterceptNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyResetInterceptNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyResetInterceptNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyResetInterceptNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyResetInterceptNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyResetInterceptNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyResetInterceptNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyResetInterceptNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyResetInterceptNum* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyGuardQuality : public ::google::protobuf::Message {
 public:
  stNotifyGuardQuality();
  virtual ~stNotifyGuardQuality();

  stNotifyGuardQuality(const stNotifyGuardQuality& from);

  inline stNotifyGuardQuality& operator=(const stNotifyGuardQuality& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyGuardQuality& default_instance();

  void Swap(stNotifyGuardQuality* other);

  // implements Message ----------------------------------------------

  stNotifyGuardQuality* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyGuardQuality& from);
  void MergeFrom(const stNotifyGuardQuality& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyGuardQuality_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyGuardQuality_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyGuardQuality_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyGuardQuality_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyGuardQuality_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyGuardQuality_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyGuardQuality_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyGuardQuality_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyGuardQuality_ProtoModID_Parse(name, value);
  }

  typedef stNotifyGuardQuality_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyGuardQuality_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyGuardQuality_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyGuardQuality_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyGuardQuality_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyGuardQuality_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyGuardQuality_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyGuardQuality_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyGuardQuality_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 quality = 2;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyGuardQuality)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyGuardQuality* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyGuardInspiredSuccess : public ::google::protobuf::Message {
 public:
  stNotifyGuardInspiredSuccess();
  virtual ~stNotifyGuardInspiredSuccess();

  stNotifyGuardInspiredSuccess(const stNotifyGuardInspiredSuccess& from);

  inline stNotifyGuardInspiredSuccess& operator=(const stNotifyGuardInspiredSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyGuardInspiredSuccess& default_instance();

  void Swap(stNotifyGuardInspiredSuccess* other);

  // implements Message ----------------------------------------------

  stNotifyGuardInspiredSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyGuardInspiredSuccess& from);
  void MergeFrom(const stNotifyGuardInspiredSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyGuardInspiredSuccess_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyGuardInspiredSuccess_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyGuardInspiredSuccess_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyGuardInspiredSuccess_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyGuardInspiredSuccess_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyGuardInspiredSuccess_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyGuardInspiredSuccess_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyGuardInspiredSuccess_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyGuardInspiredSuccess_ProtoModID_Parse(name, value);
  }

  typedef stNotifyGuardInspiredSuccess_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyGuardInspiredSuccess_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyGuardInspiredSuccess_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyGuardInspiredSuccess_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyGuardInspiredSuccess_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyGuardInspiredSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyGuardInspiredSuccess_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyGuardInspiredSuccess_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyGuardInspiredSuccess_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyGuardInspiredSuccess)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyGuardInspiredSuccess* default_instance_;
};
// -------------------------------------------------------------------

class stReqRefreshGuardQuality : public ::google::protobuf::Message {
 public:
  stReqRefreshGuardQuality();
  virtual ~stReqRefreshGuardQuality();

  stReqRefreshGuardQuality(const stReqRefreshGuardQuality& from);

  inline stReqRefreshGuardQuality& operator=(const stReqRefreshGuardQuality& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRefreshGuardQuality& default_instance();

  void Swap(stReqRefreshGuardQuality* other);

  // implements Message ----------------------------------------------

  stReqRefreshGuardQuality* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRefreshGuardQuality& from);
  void MergeFrom(const stReqRefreshGuardQuality& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRefreshGuardQuality_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRefreshGuardQuality_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRefreshGuardQuality_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRefreshGuardQuality_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRefreshGuardQuality_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRefreshGuardQuality_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRefreshGuardQuality_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRefreshGuardQuality_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRefreshGuardQuality_ProtoModID_Parse(name, value);
  }

  typedef stReqRefreshGuardQuality_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRefreshGuardQuality_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRefreshGuardQuality_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRefreshGuardQuality_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRefreshGuardQuality_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRefreshGuardQuality_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 quality = 2;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqRefreshGuardQuality)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqRefreshGuardQuality* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyClearOne2OneScore : public ::google::protobuf::Message {
 public:
  stNotifyClearOne2OneScore();
  virtual ~stNotifyClearOne2OneScore();

  stNotifyClearOne2OneScore(const stNotifyClearOne2OneScore& from);

  inline stNotifyClearOne2OneScore& operator=(const stNotifyClearOne2OneScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyClearOne2OneScore& default_instance();

  void Swap(stNotifyClearOne2OneScore* other);

  // implements Message ----------------------------------------------

  stNotifyClearOne2OneScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyClearOne2OneScore& from);
  void MergeFrom(const stNotifyClearOne2OneScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyClearOne2OneScore_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyClearOne2OneScore_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyClearOne2OneScore_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyClearOne2OneScore_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyClearOne2OneScore_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyClearOne2OneScore_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyClearOne2OneScore_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyClearOne2OneScore_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyClearOne2OneScore_ProtoModID_Parse(name, value);
  }

  typedef stNotifyClearOne2OneScore_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyClearOne2OneScore_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyClearOne2OneScore_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyClearOne2OneScore_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyClearOne2OneScore_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyClearOne2OneScore_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyClearOne2OneScore_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyClearOne2OneScore_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyClearOne2OneScore_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyClearOne2OneScore)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyClearOne2OneScore* default_instance_;
};
// -------------------------------------------------------------------

class stClearOne2OneScoreSuccess : public ::google::protobuf::Message {
 public:
  stClearOne2OneScoreSuccess();
  virtual ~stClearOne2OneScoreSuccess();

  stClearOne2OneScoreSuccess(const stClearOne2OneScoreSuccess& from);

  inline stClearOne2OneScoreSuccess& operator=(const stClearOne2OneScoreSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stClearOne2OneScoreSuccess& default_instance();

  void Swap(stClearOne2OneScoreSuccess* other);

  // implements Message ----------------------------------------------

  stClearOne2OneScoreSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stClearOne2OneScoreSuccess& from);
  void MergeFrom(const stClearOne2OneScoreSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stClearOne2OneScoreSuccess_ProtoModID ProtoModID;
  static const ProtoModID ModID = stClearOne2OneScoreSuccess_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stClearOne2OneScoreSuccess_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stClearOne2OneScoreSuccess_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stClearOne2OneScoreSuccess_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stClearOne2OneScoreSuccess_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stClearOne2OneScoreSuccess_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stClearOne2OneScoreSuccess_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stClearOne2OneScoreSuccess_ProtoModID_Parse(name, value);
  }

  typedef stClearOne2OneScoreSuccess_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stClearOne2OneScoreSuccess_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stClearOne2OneScoreSuccess_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stClearOne2OneScoreSuccess_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stClearOne2OneScoreSuccess_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stClearOne2OneScoreSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stClearOne2OneScoreSuccess_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stClearOne2OneScoreSuccess_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stClearOne2OneScoreSuccess_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stClearOne2OneScoreSuccess)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stClearOne2OneScoreSuccess* default_instance_;
};
// -------------------------------------------------------------------

class stInterceptReward : public ::google::protobuf::Message {
 public:
  stInterceptReward();
  virtual ~stInterceptReward();

  stInterceptReward(const stInterceptReward& from);

  inline stInterceptReward& operator=(const stInterceptReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInterceptReward& default_instance();

  void Swap(stInterceptReward* other);

  // implements Message ----------------------------------------------

  stInterceptReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInterceptReward& from);
  void MergeFrom(const stInterceptReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInterceptReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInterceptReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInterceptReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInterceptReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInterceptReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInterceptReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInterceptReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInterceptReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInterceptReward_ProtoModID_Parse(name, value);
  }

  typedef stInterceptReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInterceptReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInterceptReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInterceptReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInterceptReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInterceptReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInterceptReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInterceptReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInterceptReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 resID1 = 2;
  inline bool has_resid1() const;
  inline void clear_resid1();
  static const int kResID1FieldNumber = 2;
  inline ::google::protobuf::uint32 resid1() const;
  inline void set_resid1(::google::protobuf::uint32 value);

  // optional uint32 resNum1 = 3;
  inline bool has_resnum1() const;
  inline void clear_resnum1();
  static const int kResNum1FieldNumber = 3;
  inline ::google::protobuf::uint32 resnum1() const;
  inline void set_resnum1(::google::protobuf::uint32 value);

  // optional uint32 resID2 = 4;
  inline bool has_resid2() const;
  inline void clear_resid2();
  static const int kResID2FieldNumber = 4;
  inline ::google::protobuf::uint32 resid2() const;
  inline void set_resid2(::google::protobuf::uint32 value);

  // optional uint32 resNum2 = 5;
  inline bool has_resnum2() const;
  inline void clear_resnum2();
  static const int kResNum2FieldNumber = 5;
  inline ::google::protobuf::uint32 resnum2() const;
  inline void set_resnum2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stInterceptReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_resid1();
  inline void clear_has_resid1();
  inline void set_has_resnum1();
  inline void clear_has_resnum1();
  inline void set_has_resid2();
  inline void clear_has_resid2();
  inline void set_has_resnum2();
  inline void clear_has_resnum2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 resid1_;
  ::google::protobuf::uint32 resnum1_;
  ::google::protobuf::uint32 resid2_;
  ::google::protobuf::uint32 resnum2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stInterceptReward* default_instance_;
};
// -------------------------------------------------------------------

class stQuickFinishDecDiamond : public ::google::protobuf::Message {
 public:
  stQuickFinishDecDiamond();
  virtual ~stQuickFinishDecDiamond();

  stQuickFinishDecDiamond(const stQuickFinishDecDiamond& from);

  inline stQuickFinishDecDiamond& operator=(const stQuickFinishDecDiamond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stQuickFinishDecDiamond& default_instance();

  void Swap(stQuickFinishDecDiamond* other);

  // implements Message ----------------------------------------------

  stQuickFinishDecDiamond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stQuickFinishDecDiamond& from);
  void MergeFrom(const stQuickFinishDecDiamond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stQuickFinishDecDiamond_ProtoModID ProtoModID;
  static const ProtoModID ModID = stQuickFinishDecDiamond_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stQuickFinishDecDiamond_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stQuickFinishDecDiamond_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stQuickFinishDecDiamond_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stQuickFinishDecDiamond_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stQuickFinishDecDiamond_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stQuickFinishDecDiamond_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stQuickFinishDecDiamond_ProtoModID_Parse(name, value);
  }

  typedef stQuickFinishDecDiamond_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stQuickFinishDecDiamond_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stQuickFinishDecDiamond_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stQuickFinishDecDiamond_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stQuickFinishDecDiamond_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stQuickFinishDecDiamond_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stQuickFinishDecDiamond_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stQuickFinishDecDiamond_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stQuickFinishDecDiamond_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stQuickFinishDecDiamond)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stQuickFinishDecDiamond* default_instance_;
};
// -------------------------------------------------------------------

class stQuickFinishDiamondSuccess : public ::google::protobuf::Message {
 public:
  stQuickFinishDiamondSuccess();
  virtual ~stQuickFinishDiamondSuccess();

  stQuickFinishDiamondSuccess(const stQuickFinishDiamondSuccess& from);

  inline stQuickFinishDiamondSuccess& operator=(const stQuickFinishDiamondSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stQuickFinishDiamondSuccess& default_instance();

  void Swap(stQuickFinishDiamondSuccess* other);

  // implements Message ----------------------------------------------

  stQuickFinishDiamondSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stQuickFinishDiamondSuccess& from);
  void MergeFrom(const stQuickFinishDiamondSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stQuickFinishDiamondSuccess_ProtoModID ProtoModID;
  static const ProtoModID ModID = stQuickFinishDiamondSuccess_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stQuickFinishDiamondSuccess_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stQuickFinishDiamondSuccess_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stQuickFinishDiamondSuccess_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stQuickFinishDiamondSuccess_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stQuickFinishDiamondSuccess_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stQuickFinishDiamondSuccess_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stQuickFinishDiamondSuccess_ProtoModID_Parse(name, value);
  }

  typedef stQuickFinishDiamondSuccess_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stQuickFinishDiamondSuccess_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stQuickFinishDiamondSuccess_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stQuickFinishDiamondSuccess_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stQuickFinishDiamondSuccess_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stQuickFinishDiamondSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stQuickFinishDiamondSuccess_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stQuickFinishDiamondSuccess_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stQuickFinishDiamondSuccess_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stQuickFinishDiamondSuccess)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stQuickFinishDiamondSuccess* default_instance_;
};
// -------------------------------------------------------------------

class stOne2OnePkWithRobot : public ::google::protobuf::Message {
 public:
  stOne2OnePkWithRobot();
  virtual ~stOne2OnePkWithRobot();

  stOne2OnePkWithRobot(const stOne2OnePkWithRobot& from);

  inline stOne2OnePkWithRobot& operator=(const stOne2OnePkWithRobot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOne2OnePkWithRobot& default_instance();

  void Swap(stOne2OnePkWithRobot* other);

  // implements Message ----------------------------------------------

  stOne2OnePkWithRobot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOne2OnePkWithRobot& from);
  void MergeFrom(const stOne2OnePkWithRobot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOne2OnePkWithRobot_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOne2OnePkWithRobot_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOne2OnePkWithRobot_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOne2OnePkWithRobot_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOne2OnePkWithRobot_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOne2OnePkWithRobot_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOne2OnePkWithRobot_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOne2OnePkWithRobot_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOne2OnePkWithRobot_ProtoModID_Parse(name, value);
  }

  typedef stOne2OnePkWithRobot_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOne2OnePkWithRobot_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOne2OnePkWithRobot_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOne2OnePkWithRobot_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOne2OnePkWithRobot_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOne2OnePkWithRobot_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOne2OnePkWithRobot_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOne2OnePkWithRobot_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOne2OnePkWithRobot_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 robotGroup = 2;
  inline bool has_robotgroup() const;
  inline void clear_robotgroup();
  static const int kRobotGroupFieldNumber = 2;
  inline ::google::protobuf::uint32 robotgroup() const;
  inline void set_robotgroup(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stOne2OnePkWithRobot)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_robotgroup();
  inline void clear_has_robotgroup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 robotgroup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stOne2OnePkWithRobot* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyUserBeginGuard : public ::google::protobuf::Message {
 public:
  stNotifyUserBeginGuard();
  virtual ~stNotifyUserBeginGuard();

  stNotifyUserBeginGuard(const stNotifyUserBeginGuard& from);

  inline stNotifyUserBeginGuard& operator=(const stNotifyUserBeginGuard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyUserBeginGuard& default_instance();

  void Swap(stNotifyUserBeginGuard* other);

  // implements Message ----------------------------------------------

  stNotifyUserBeginGuard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyUserBeginGuard& from);
  void MergeFrom(const stNotifyUserBeginGuard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyUserBeginGuard_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyUserBeginGuard_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyUserBeginGuard_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyUserBeginGuard_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyUserBeginGuard_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyUserBeginGuard_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyUserBeginGuard_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyUserBeginGuard_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyUserBeginGuard_ProtoModID_Parse(name, value);
  }

  typedef stNotifyUserBeginGuard_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyUserBeginGuard_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyUserBeginGuard_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyUserBeginGuard_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyUserBeginGuard_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyUserBeginGuard_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyUserBeginGuard_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyUserBeginGuard_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyUserBeginGuard_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyUserBeginGuard)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyUserBeginGuard* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyUserInterceptResult : public ::google::protobuf::Message {
 public:
  stNotifyUserInterceptResult();
  virtual ~stNotifyUserInterceptResult();

  stNotifyUserInterceptResult(const stNotifyUserInterceptResult& from);

  inline stNotifyUserInterceptResult& operator=(const stNotifyUserInterceptResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyUserInterceptResult& default_instance();

  void Swap(stNotifyUserInterceptResult* other);

  // implements Message ----------------------------------------------

  stNotifyUserInterceptResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyUserInterceptResult& from);
  void MergeFrom(const stNotifyUserInterceptResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyUserInterceptResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyUserInterceptResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyUserInterceptResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyUserInterceptResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyUserInterceptResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyUserInterceptResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyUserInterceptResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyUserInterceptResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyUserInterceptResult_ProtoModID_Parse(name, value);
  }

  typedef stNotifyUserInterceptResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyUserInterceptResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyUserInterceptResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyUserInterceptResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyUserInterceptResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyUserInterceptResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyUserInterceptResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyUserInterceptResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyUserInterceptResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyUserInterceptResult)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyUserInterceptResult* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyCloseBetaReward : public ::google::protobuf::Message {
 public:
  stNotifyCloseBetaReward();
  virtual ~stNotifyCloseBetaReward();

  stNotifyCloseBetaReward(const stNotifyCloseBetaReward& from);

  inline stNotifyCloseBetaReward& operator=(const stNotifyCloseBetaReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyCloseBetaReward& default_instance();

  void Swap(stNotifyCloseBetaReward* other);

  // implements Message ----------------------------------------------

  stNotifyCloseBetaReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyCloseBetaReward& from);
  void MergeFrom(const stNotifyCloseBetaReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyCloseBetaReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyCloseBetaReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyCloseBetaReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyCloseBetaReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyCloseBetaReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyCloseBetaReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyCloseBetaReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyCloseBetaReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyCloseBetaReward_ProtoModID_Parse(name, value);
  }

  typedef stNotifyCloseBetaReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyCloseBetaReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyCloseBetaReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyCloseBetaReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyCloseBetaReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyCloseBetaReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyCloseBetaReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyCloseBetaReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyCloseBetaReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 boxID = 2;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIDFieldNumber = 2;
  inline ::google::protobuf::uint32 boxid() const;
  inline void set_boxid(::google::protobuf::uint32 value);

  // optional uint32 giveDiamond = 3;
  inline bool has_givediamond() const;
  inline void clear_givediamond();
  static const int kGiveDiamondFieldNumber = 3;
  inline ::google::protobuf::uint32 givediamond() const;
  inline void set_givediamond(::google::protobuf::uint32 value);

  // optional uint32 giveRecharge = 4;
  inline bool has_giverecharge() const;
  inline void clear_giverecharge();
  static const int kGiveRechargeFieldNumber = 4;
  inline ::google::protobuf::uint32 giverecharge() const;
  inline void set_giverecharge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyCloseBetaReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_givediamond();
  inline void clear_has_givediamond();
  inline void set_has_giverecharge();
  inline void clear_has_giverecharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 boxid_;
  ::google::protobuf::uint32 givediamond_;
  ::google::protobuf::uint32 giverecharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyCloseBetaReward* default_instance_;
};
// -------------------------------------------------------------------

class stEnterManorFightMapUserInfo : public ::google::protobuf::Message {
 public:
  stEnterManorFightMapUserInfo();
  virtual ~stEnterManorFightMapUserInfo();

  stEnterManorFightMapUserInfo(const stEnterManorFightMapUserInfo& from);

  inline stEnterManorFightMapUserInfo& operator=(const stEnterManorFightMapUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnterManorFightMapUserInfo& default_instance();

  void Swap(stEnterManorFightMapUserInfo* other);

  // implements Message ----------------------------------------------

  stEnterManorFightMapUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnterManorFightMapUserInfo& from);
  void MergeFrom(const stEnterManorFightMapUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 hp = 2;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stEnterManorFightMapUserInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_hp();
  inline void clear_has_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 hp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stEnterManorFightMapUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class stEnterManorFightMap : public ::google::protobuf::Message {
 public:
  stEnterManorFightMap();
  virtual ~stEnterManorFightMap();

  stEnterManorFightMap(const stEnterManorFightMap& from);

  inline stEnterManorFightMap& operator=(const stEnterManorFightMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnterManorFightMap& default_instance();

  void Swap(stEnterManorFightMap* other);

  // implements Message ----------------------------------------------

  stEnterManorFightMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnterManorFightMap& from);
  void MergeFrom(const stEnterManorFightMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEnterManorFightMap_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEnterManorFightMap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEnterManorFightMap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEnterManorFightMap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEnterManorFightMap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEnterManorFightMap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEnterManorFightMap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEnterManorFightMap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEnterManorFightMap_ProtoModID_Parse(name, value);
  }

  typedef stEnterManorFightMap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEnterManorFightMap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEnterManorFightMap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEnterManorFightMap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEnterManorFightMap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEnterManorFightMap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEnterManorFightMap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEnterManorFightMap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEnterManorFightMap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stEnterManorFightMapUserInfo guildAMem = 1;
  inline int guildamem_size() const;
  inline void clear_guildamem();
  static const int kGuildAMemFieldNumber = 1;
  inline const ::Global::stEnterManorFightMapUserInfo& guildamem(int index) const;
  inline ::Global::stEnterManorFightMapUserInfo* mutable_guildamem(int index);
  inline ::Global::stEnterManorFightMapUserInfo* add_guildamem();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stEnterManorFightMapUserInfo >&
      guildamem() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stEnterManorFightMapUserInfo >*
      mutable_guildamem();

  // repeated .Global.stEnterManorFightMapUserInfo guildBMem = 2;
  inline int guildbmem_size() const;
  inline void clear_guildbmem();
  static const int kGuildBMemFieldNumber = 2;
  inline const ::Global::stEnterManorFightMapUserInfo& guildbmem(int index) const;
  inline ::Global::stEnterManorFightMapUserInfo* mutable_guildbmem(int index);
  inline ::Global::stEnterManorFightMapUserInfo* add_guildbmem();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stEnterManorFightMapUserInfo >&
      guildbmem() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stEnterManorFightMapUserInfo >*
      mutable_guildbmem();

  // optional uint32 manorID = 3;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 3;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // optional uint32 fomation = 4;
  inline bool has_fomation() const;
  inline void clear_fomation();
  static const int kFomationFieldNumber = 4;
  inline ::google::protobuf::uint32 fomation() const;
  inline void set_fomation(::google::protobuf::uint32 value);

  // optional uint32 teamAID = 5;
  inline bool has_teamaid() const;
  inline void clear_teamaid();
  static const int kTeamAIDFieldNumber = 5;
  inline ::google::protobuf::uint32 teamaid() const;
  inline void set_teamaid(::google::protobuf::uint32 value);

  // optional uint32 teamBID = 6;
  inline bool has_teambid() const;
  inline void clear_teambid();
  static const int kTeamBIDFieldNumber = 6;
  inline ::google::protobuf::uint32 teambid() const;
  inline void set_teambid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stEnterManorFightMap)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();
  inline void set_has_fomation();
  inline void clear_has_fomation();
  inline void set_has_teamaid();
  inline void clear_has_teamaid();
  inline void set_has_teambid();
  inline void clear_has_teambid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stEnterManorFightMapUserInfo > guildamem_;
  ::google::protobuf::RepeatedPtrField< ::Global::stEnterManorFightMapUserInfo > guildbmem_;
  ::google::protobuf::uint32 manorid_;
  ::google::protobuf::uint32 fomation_;
  ::google::protobuf::uint32 teamaid_;
  ::google::protobuf::uint32 teambid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stEnterManorFightMap* default_instance_;
};
// -------------------------------------------------------------------

class stManorFightBattleProp : public ::google::protobuf::Message {
 public:
  stManorFightBattleProp();
  virtual ~stManorFightBattleProp();

  stManorFightBattleProp(const stManorFightBattleProp& from);

  inline stManorFightBattleProp& operator=(const stManorFightBattleProp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stManorFightBattleProp& default_instance();

  void Swap(stManorFightBattleProp* other);

  // implements Message ----------------------------------------------

  stManorFightBattleProp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stManorFightBattleProp& from);
  void MergeFrom(const stManorFightBattleProp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 curHP = 1;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHPFieldNumber = 1;
  inline ::google::protobuf::uint32 curhp() const;
  inline void set_curhp(::google::protobuf::uint32 value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stManorFightBattleProp)
 private:
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 curhp_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stManorFightBattleProp* default_instance_;
};
// -------------------------------------------------------------------

class stFinishManorFight : public ::google::protobuf::Message {
 public:
  stFinishManorFight();
  virtual ~stFinishManorFight();

  stFinishManorFight(const stFinishManorFight& from);

  inline stFinishManorFight& operator=(const stFinishManorFight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFinishManorFight& default_instance();

  void Swap(stFinishManorFight* other);

  // implements Message ----------------------------------------------

  stFinishManorFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFinishManorFight& from);
  void MergeFrom(const stFinishManorFight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stFinishManorFight_ProtoModID ProtoModID;
  static const ProtoModID ModID = stFinishManorFight_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stFinishManorFight_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stFinishManorFight_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stFinishManorFight_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stFinishManorFight_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stFinishManorFight_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stFinishManorFight_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stFinishManorFight_ProtoModID_Parse(name, value);
  }

  typedef stFinishManorFight_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stFinishManorFight_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stFinishManorFight_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stFinishManorFight_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stFinishManorFight_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stFinishManorFight_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stFinishManorFight_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stFinishManorFight_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stFinishManorFight_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // optional uint32 fomation = 2;
  inline bool has_fomation() const;
  inline void clear_fomation();
  static const int kFomationFieldNumber = 2;
  inline ::google::protobuf::uint32 fomation() const;
  inline void set_fomation(::google::protobuf::uint32 value);

  // optional uint32 teamAID = 3;
  inline bool has_teamaid() const;
  inline void clear_teamaid();
  static const int kTeamAIDFieldNumber = 3;
  inline ::google::protobuf::uint32 teamaid() const;
  inline void set_teamaid(::google::protobuf::uint32 value);

  // optional uint32 teamBID = 4;
  inline bool has_teambid() const;
  inline void clear_teambid();
  static const int kTeamBIDFieldNumber = 4;
  inline ::google::protobuf::uint32 teambid() const;
  inline void set_teambid(::google::protobuf::uint32 value);

  // optional bool bFail = 5;
  inline bool has_bfail() const;
  inline void clear_bfail();
  static const int kBFailFieldNumber = 5;
  inline bool bfail() const;
  inline void set_bfail(bool value);

  // optional bool bFinish = 6;
  inline bool has_bfinish() const;
  inline void clear_bfinish();
  static const int kBFinishFieldNumber = 6;
  inline bool bfinish() const;
  inline void set_bfinish(bool value);

  // repeated .Global.stManorFightBattleProp userInfo = 7;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 7;
  inline const ::Global::stManorFightBattleProp& userinfo(int index) const;
  inline ::Global::stManorFightBattleProp* mutable_userinfo(int index);
  inline ::Global::stManorFightBattleProp* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stManorFightBattleProp >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stManorFightBattleProp >*
      mutable_userinfo();

  // @@protoc_insertion_point(class_scope:Global.stFinishManorFight)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();
  inline void set_has_fomation();
  inline void clear_has_fomation();
  inline void set_has_teamaid();
  inline void clear_has_teamaid();
  inline void set_has_teambid();
  inline void clear_has_teambid();
  inline void set_has_bfail();
  inline void clear_has_bfail();
  inline void set_has_bfinish();
  inline void clear_has_bfinish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;
  ::google::protobuf::uint32 fomation_;
  ::google::protobuf::uint32 teamaid_;
  ::google::protobuf::uint32 teambid_;
  ::google::protobuf::RepeatedPtrField< ::Global::stManorFightBattleProp > userinfo_;
  bool bfail_;
  bool bfinish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stFinishManorFight* default_instance_;
};
// -------------------------------------------------------------------

class stExistName : public ::google::protobuf::Message {
 public:
  stExistName();
  virtual ~stExistName();

  stExistName(const stExistName& from);

  inline stExistName& operator=(const stExistName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExistName& default_instance();

  void Swap(stExistName* other);

  // implements Message ----------------------------------------------

  stExistName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExistName& from);
  void MergeFrom(const stExistName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stExistName_eResult eResult;
  static const eResult eSuccess = stExistName_eResult_eSuccess;
  static const eResult eName_Repetition = stExistName_eResult_eName_Repetition;
  static inline bool eResult_IsValid(int value) {
    return stExistName_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stExistName_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stExistName_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stExistName_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stExistName_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stExistName_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stExistName_eResult_Parse(name, value);
  }

  typedef stExistName_ProtoModID ProtoModID;
  static const ProtoModID ModID = stExistName_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stExistName_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stExistName_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stExistName_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stExistName_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stExistName_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stExistName_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stExistName_ProtoModID_Parse(name, value);
  }

  typedef stExistName_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stExistName_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stExistName_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stExistName_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stExistName_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stExistName_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stExistName_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stExistName_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stExistName_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.stExistName.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Global::stExistName_eResult result() const;
  inline void set_result(::Global::stExistName_eResult value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Global.stExistName)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 charid_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stExistName* default_instance_;
};
// -------------------------------------------------------------------

class stSynName : public ::google::protobuf::Message {
 public:
  stSynName();
  virtual ~stSynName();

  stSynName(const stSynName& from);

  inline stSynName& operator=(const stSynName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynName& default_instance();

  void Swap(stSynName* other);

  // implements Message ----------------------------------------------

  stSynName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynName& from);
  void MergeFrom(const stSynName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynName_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynName_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynName_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynName_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynName_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynName_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynName_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynName_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynName_ProtoModID_Parse(name, value);
  }

  typedef stSynName_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynName_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynName_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynName_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynName_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynName_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynName_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynName_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynName_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Global.stSynName)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynName* default_instance_;
};
// -------------------------------------------------------------------

class stSynGloryfashionCharID : public ::google::protobuf::Message {
 public:
  stSynGloryfashionCharID();
  virtual ~stSynGloryfashionCharID();

  stSynGloryfashionCharID(const stSynGloryfashionCharID& from);

  inline stSynGloryfashionCharID& operator=(const stSynGloryfashionCharID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynGloryfashionCharID& default_instance();

  void Swap(stSynGloryfashionCharID* other);

  // implements Message ----------------------------------------------

  stSynGloryfashionCharID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynGloryfashionCharID& from);
  void MergeFrom(const stSynGloryfashionCharID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynGloryfashionCharID_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynGloryfashionCharID_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynGloryfashionCharID_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynGloryfashionCharID_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynGloryfashionCharID_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynGloryfashionCharID_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynGloryfashionCharID_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynGloryfashionCharID_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynGloryfashionCharID_ProtoModID_Parse(name, value);
  }

  typedef stSynGloryfashionCharID_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynGloryfashionCharID_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynGloryfashionCharID_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynGloryfashionCharID_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynGloryfashionCharID_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynGloryfashionCharID_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynGloryfashionCharID_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynGloryfashionCharID_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynGloryfashionCharID_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 buyTime = 2;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 buytime() const;
  inline void set_buytime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynGloryfashionCharID)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_buytime();
  inline void clear_has_buytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 buytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynGloryfashionCharID* default_instance_;
};
// -------------------------------------------------------------------

class stDevilCallItem : public ::google::protobuf::Message {
 public:
  stDevilCallItem();
  virtual ~stDevilCallItem();

  stDevilCallItem(const stDevilCallItem& from);

  inline stDevilCallItem& operator=(const stDevilCallItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDevilCallItem& default_instance();

  void Swap(stDevilCallItem* other);

  // implements Message ----------------------------------------------

  stDevilCallItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDevilCallItem& from);
  void MergeFrom(const stDevilCallItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional string name1 = 2;
  inline bool has_name1() const;
  inline void clear_name1();
  static const int kName1FieldNumber = 2;
  inline const ::std::string& name1() const;
  inline void set_name1(const ::std::string& value);
  inline void set_name1(const char* value);
  inline void set_name1(const char* value, size_t size);
  inline ::std::string* mutable_name1();
  inline ::std::string* release_name1();
  inline void set_allocated_name1(::std::string* name1);

  // optional uint32 charID1 = 3;
  inline bool has_charid1() const;
  inline void clear_charid1();
  static const int kCharID1FieldNumber = 3;
  inline ::google::protobuf::uint32 charid1() const;
  inline void set_charid1(::google::protobuf::uint32 value);

  // optional string name2 = 4;
  inline bool has_name2() const;
  inline void clear_name2();
  static const int kName2FieldNumber = 4;
  inline const ::std::string& name2() const;
  inline void set_name2(const ::std::string& value);
  inline void set_name2(const char* value);
  inline void set_name2(const char* value, size_t size);
  inline ::std::string* mutable_name2();
  inline ::std::string* release_name2();
  inline void set_allocated_name2(::std::string* name2);

  // optional uint32 charID2 = 5;
  inline bool has_charid2() const;
  inline void clear_charid2();
  static const int kCharID2FieldNumber = 5;
  inline ::google::protobuf::uint32 charid2() const;
  inline void set_charid2(::google::protobuf::uint32 value);

  // optional string name3 = 6;
  inline bool has_name3() const;
  inline void clear_name3();
  static const int kName3FieldNumber = 6;
  inline const ::std::string& name3() const;
  inline void set_name3(const ::std::string& value);
  inline void set_name3(const char* value);
  inline void set_name3(const char* value, size_t size);
  inline ::std::string* mutable_name3();
  inline ::std::string* release_name3();
  inline void set_allocated_name3(::std::string* name3);

  // optional uint32 charID3 = 7;
  inline bool has_charid3() const;
  inline void clear_charid3();
  static const int kCharID3FieldNumber = 7;
  inline ::google::protobuf::uint32 charid3() const;
  inline void set_charid3(::google::protobuf::uint32 value);

  // optional bool hasPass = 8;
  inline bool has_haspass() const;
  inline void clear_haspass();
  static const int kHasPassFieldNumber = 8;
  inline bool haspass() const;
  inline void set_haspass(bool value);

  // optional uint32 bossdrawstatus = 9;
  inline bool has_bossdrawstatus() const;
  inline void clear_bossdrawstatus();
  static const int kBossdrawstatusFieldNumber = 9;
  inline ::google::protobuf::uint32 bossdrawstatus() const;
  inline void set_bossdrawstatus(::google::protobuf::uint32 value);

  // optional uint32 commondrawstatus = 10;
  inline bool has_commondrawstatus() const;
  inline void clear_commondrawstatus();
  static const int kCommondrawstatusFieldNumber = 10;
  inline ::google::protobuf::uint32 commondrawstatus() const;
  inline void set_commondrawstatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stDevilCallItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_name1();
  inline void clear_has_name1();
  inline void set_has_charid1();
  inline void clear_has_charid1();
  inline void set_has_name2();
  inline void clear_has_name2();
  inline void set_has_charid2();
  inline void clear_has_charid2();
  inline void set_has_name3();
  inline void clear_has_name3();
  inline void set_has_charid3();
  inline void clear_has_charid3();
  inline void set_has_haspass();
  inline void clear_has_haspass();
  inline void set_has_bossdrawstatus();
  inline void clear_has_bossdrawstatus();
  inline void set_has_commondrawstatus();
  inline void clear_has_commondrawstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name1_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 charid1_;
  ::std::string* name2_;
  ::std::string* name3_;
  ::google::protobuf::uint32 charid2_;
  ::google::protobuf::uint32 charid3_;
  bool haspass_;
  ::google::protobuf::uint32 bossdrawstatus_;
  ::google::protobuf::uint32 commondrawstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDevilCallItem* default_instance_;
};
// -------------------------------------------------------------------

class stAllDevilCall : public ::google::protobuf::Message {
 public:
  stAllDevilCall();
  virtual ~stAllDevilCall();

  stAllDevilCall(const stAllDevilCall& from);

  inline stAllDevilCall& operator=(const stAllDevilCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAllDevilCall& default_instance();

  void Swap(stAllDevilCall* other);

  // implements Message ----------------------------------------------

  stAllDevilCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAllDevilCall& from);
  void MergeFrom(const stAllDevilCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAllDevilCall_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAllDevilCall_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAllDevilCall_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAllDevilCall_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAllDevilCall_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAllDevilCall_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAllDevilCall_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAllDevilCall_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAllDevilCall_ProtoModID_Parse(name, value);
  }

  typedef stAllDevilCall_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAllDevilCall_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAllDevilCall_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAllDevilCall_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAllDevilCall_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAllDevilCall_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAllDevilCall_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAllDevilCall_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAllDevilCall_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated .Global.stDevilCallItem item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::Global::stDevilCallItem& item(int index) const;
  inline ::Global::stDevilCallItem* mutable_item(int index);
  inline ::Global::stDevilCallItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stDevilCallItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stDevilCallItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:Global.stAllDevilCall)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stDevilCallItem > item_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stAllDevilCall* default_instance_;
};
// -------------------------------------------------------------------

class stDevilCallReward : public ::google::protobuf::Message {
 public:
  stDevilCallReward();
  virtual ~stDevilCallReward();

  stDevilCallReward(const stDevilCallReward& from);

  inline stDevilCallReward& operator=(const stDevilCallReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDevilCallReward& default_instance();

  void Swap(stDevilCallReward* other);

  // implements Message ----------------------------------------------

  stDevilCallReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDevilCallReward& from);
  void MergeFrom(const stDevilCallReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDevilCallReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDevilCallReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDevilCallReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDevilCallReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDevilCallReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDevilCallReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDevilCallReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDevilCallReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDevilCallReward_ProtoModID_Parse(name, value);
  }

  typedef stDevilCallReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDevilCallReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDevilCallReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDevilCallReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDevilCallReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDevilCallReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDevilCallReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDevilCallReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDevilCallReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 bossId = 2;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint32 rewardType = 3;
  inline bool has_rewardtype() const;
  inline void clear_rewardtype();
  static const int kRewardTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 rewardtype() const;
  inline void set_rewardtype(::google::protobuf::uint32 value);

  // optional uint32 gotPass = 4;
  inline bool has_gotpass() const;
  inline void clear_gotpass();
  static const int kGotPassFieldNumber = 4;
  inline ::google::protobuf::uint32 gotpass() const;
  inline void set_gotpass(::google::protobuf::uint32 value);

  // optional uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stDevilCallReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_rewardtype();
  inline void clear_has_rewardtype();
  inline void set_has_gotpass();
  inline void clear_has_gotpass();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::uint32 rewardtype_;
  ::google::protobuf::uint32 gotpass_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDevilCallReward* default_instance_;
};
// -------------------------------------------------------------------

class stDevilCallRewardRet : public ::google::protobuf::Message {
 public:
  stDevilCallRewardRet();
  virtual ~stDevilCallRewardRet();

  stDevilCallRewardRet(const stDevilCallRewardRet& from);

  inline stDevilCallRewardRet& operator=(const stDevilCallRewardRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDevilCallRewardRet& default_instance();

  void Swap(stDevilCallRewardRet* other);

  // implements Message ----------------------------------------------

  stDevilCallRewardRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDevilCallRewardRet& from);
  void MergeFrom(const stDevilCallRewardRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDevilCallRewardRet_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDevilCallRewardRet_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDevilCallRewardRet_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDevilCallRewardRet_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDevilCallRewardRet_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDevilCallRewardRet_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDevilCallRewardRet_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDevilCallRewardRet_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDevilCallRewardRet_ProtoModID_Parse(name, value);
  }

  typedef stDevilCallRewardRet_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDevilCallRewardRet_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDevilCallRewardRet_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDevilCallRewardRet_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDevilCallRewardRet_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDevilCallRewardRet_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDevilCallRewardRet_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDevilCallRewardRet_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDevilCallRewardRet_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 bossId = 2;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint32 rewardType = 3;
  inline bool has_rewardtype() const;
  inline void clear_rewardtype();
  static const int kRewardTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 rewardtype() const;
  inline void set_rewardtype(::google::protobuf::uint32 value);

  // optional uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stDevilCallRewardRet)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_rewardtype();
  inline void clear_has_rewardtype();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::uint32 rewardtype_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDevilCallRewardRet* default_instance_;
};
// -------------------------------------------------------------------

class stDevilCall : public ::google::protobuf::Message {
 public:
  stDevilCall();
  virtual ~stDevilCall();

  stDevilCall(const stDevilCall& from);

  inline stDevilCall& operator=(const stDevilCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDevilCall& default_instance();

  void Swap(stDevilCall* other);

  // implements Message ----------------------------------------------

  stDevilCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDevilCall& from);
  void MergeFrom(const stDevilCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDevilCall_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDevilCall_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDevilCall_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDevilCall_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDevilCall_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDevilCall_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDevilCall_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDevilCall_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDevilCall_ProtoModID_Parse(name, value);
  }

  typedef stDevilCall_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDevilCall_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDevilCall_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDevilCall_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDevilCall_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDevilCall_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDevilCall_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDevilCall_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDevilCall_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 bossId = 2;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint32 gotPass = 3;
  inline bool has_gotpass() const;
  inline void clear_gotpass();
  static const int kGotPassFieldNumber = 3;
  inline ::google::protobuf::uint32 gotpass() const;
  inline void set_gotpass(::google::protobuf::uint32 value);

  // optional uint32 drawNum = 4;
  inline bool has_drawnum() const;
  inline void clear_drawnum();
  static const int kDrawNumFieldNumber = 4;
  inline ::google::protobuf::uint32 drawnum() const;
  inline void set_drawnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stDevilCall)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_gotpass();
  inline void clear_has_gotpass();
  inline void set_has_drawnum();
  inline void clear_has_drawnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::uint32 gotpass_;
  ::google::protobuf::uint32 drawnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDevilCall* default_instance_;
};
// -------------------------------------------------------------------

class stDevilCallRet : public ::google::protobuf::Message {
 public:
  stDevilCallRet();
  virtual ~stDevilCallRet();

  stDevilCallRet(const stDevilCallRet& from);

  inline stDevilCallRet& operator=(const stDevilCallRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDevilCallRet& default_instance();

  void Swap(stDevilCallRet* other);

  // implements Message ----------------------------------------------

  stDevilCallRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDevilCallRet& from);
  void MergeFrom(const stDevilCallRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDevilCallRet_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDevilCallRet_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDevilCallRet_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDevilCallRet_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDevilCallRet_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDevilCallRet_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDevilCallRet_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDevilCallRet_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDevilCallRet_ProtoModID_Parse(name, value);
  }

  typedef stDevilCallRet_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDevilCallRet_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDevilCallRet_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDevilCallRet_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDevilCallRet_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDevilCallRet_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDevilCallRet_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDevilCallRet_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDevilCallRet_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 bossId = 2;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint32 drawNum = 3;
  inline bool has_drawnum() const;
  inline void clear_drawnum();
  static const int kDrawNumFieldNumber = 3;
  inline ::google::protobuf::uint32 drawnum() const;
  inline void set_drawnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stDevilCallRet)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_drawnum();
  inline void clear_has_drawnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::uint32 drawnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDevilCallRet* default_instance_;
};
// -------------------------------------------------------------------

class stDevilCallSummary : public ::google::protobuf::Message {
 public:
  stDevilCallSummary();
  virtual ~stDevilCallSummary();

  stDevilCallSummary(const stDevilCallSummary& from);

  inline stDevilCallSummary& operator=(const stDevilCallSummary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDevilCallSummary& default_instance();

  void Swap(stDevilCallSummary* other);

  // implements Message ----------------------------------------------

  stDevilCallSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDevilCallSummary& from);
  void MergeFrom(const stDevilCallSummary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDevilCallSummary_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDevilCallSummary_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDevilCallSummary_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDevilCallSummary_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDevilCallSummary_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDevilCallSummary_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDevilCallSummary_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDevilCallSummary_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDevilCallSummary_ProtoModID_Parse(name, value);
  }

  typedef stDevilCallSummary_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDevilCallSummary_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDevilCallSummary_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDevilCallSummary_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDevilCallSummary_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDevilCallSummary_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDevilCallSummary_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDevilCallSummary_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDevilCallSummary_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated .Global.stDevilCallItem item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::Global::stDevilCallItem& item(int index) const;
  inline ::Global::stDevilCallItem* mutable_item(int index);
  inline ::Global::stDevilCallItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stDevilCallItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stDevilCallItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:Global.stDevilCallSummary)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stDevilCallItem > item_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDevilCallSummary* default_instance_;
};
// -------------------------------------------------------------------

class stExpeditionItem : public ::google::protobuf::Message {
 public:
  stExpeditionItem();
  virtual ~stExpeditionItem();

  stExpeditionItem(const stExpeditionItem& from);

  inline stExpeditionItem& operator=(const stExpeditionItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExpeditionItem& default_instance();

  void Swap(stExpeditionItem* other);

  // implements Message ----------------------------------------------

  stExpeditionItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExpeditionItem& from);
  void MergeFrom(const stExpeditionItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 expeditionId = 1;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // optional uint32 finishTime = 2;
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 finishtime() const;
  inline void set_finishtime(::google::protobuf::uint32 value);

  // repeated uint32 heroIds = 3;
  inline int heroids_size() const;
  inline void clear_heroids();
  static const int kHeroIdsFieldNumber = 3;
  inline ::google::protobuf::uint32 heroids(int index) const;
  inline void set_heroids(int index, ::google::protobuf::uint32 value);
  inline void add_heroids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heroids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heroids();

  // @@protoc_insertion_point(class_scope:Global.stExpeditionItem)
 private:
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();
  inline void set_has_finishtime();
  inline void clear_has_finishtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 expeditionid_;
  ::google::protobuf::uint32 finishtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heroids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stExpeditionItem* default_instance_;
};
// -------------------------------------------------------------------

class stExpeditionInfo : public ::google::protobuf::Message {
 public:
  stExpeditionInfo();
  virtual ~stExpeditionInfo();

  stExpeditionInfo(const stExpeditionInfo& from);

  inline stExpeditionInfo& operator=(const stExpeditionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExpeditionInfo& default_instance();

  void Swap(stExpeditionInfo* other);

  // implements Message ----------------------------------------------

  stExpeditionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExpeditionInfo& from);
  void MergeFrom(const stExpeditionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stExpeditionInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stExpeditionInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stExpeditionInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stExpeditionInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stExpeditionInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stExpeditionInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stExpeditionInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stExpeditionInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stExpeditionInfo_ProtoModID_Parse(name, value);
  }

  typedef stExpeditionInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stExpeditionInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stExpeditionInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stExpeditionInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stExpeditionInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stExpeditionInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stExpeditionInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stExpeditionInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stExpeditionInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated .Global.stExpeditionItem items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::Global::stExpeditionItem& items(int index) const;
  inline ::Global::stExpeditionItem* mutable_items(int index);
  inline ::Global::stExpeditionItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Global.stExpeditionInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionItem > items_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stExpeditionInfo* default_instance_;
};
// -------------------------------------------------------------------

class stExpedition : public ::google::protobuf::Message {
 public:
  stExpedition();
  virtual ~stExpedition();

  stExpedition(const stExpedition& from);

  inline stExpedition& operator=(const stExpedition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExpedition& default_instance();

  void Swap(stExpedition* other);

  // implements Message ----------------------------------------------

  stExpedition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExpedition& from);
  void MergeFrom(const stExpedition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stExpedition_ProtoModID ProtoModID;
  static const ProtoModID ModID = stExpedition_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stExpedition_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stExpedition_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stExpedition_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stExpedition_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stExpedition_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stExpedition_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stExpedition_ProtoModID_Parse(name, value);
  }

  typedef stExpedition_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stExpedition_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stExpedition_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stExpedition_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stExpedition_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stExpedition_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stExpedition_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stExpedition_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated uint32 expeIds = 2;
  inline int expeids_size() const;
  inline void clear_expeids();
  static const int kExpeIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 expeids(int index) const;
  inline void set_expeids(int index, ::google::protobuf::uint32 value);
  inline void add_expeids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      expeids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_expeids();

  // repeated uint32 heroIds = 3;
  inline int heroids_size() const;
  inline void clear_heroids();
  static const int kHeroIdsFieldNumber = 3;
  inline ::google::protobuf::uint32 heroids(int index) const;
  inline void set_heroids(int index, ::google::protobuf::uint32 value);
  inline void add_heroids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heroids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heroids();

  // repeated uint32 usedHero = 4;
  inline int usedhero_size() const;
  inline void clear_usedhero();
  static const int kUsedHeroFieldNumber = 4;
  inline ::google::protobuf::uint32 usedhero(int index) const;
  inline void set_usedhero(int index, ::google::protobuf::uint32 value);
  inline void add_usedhero(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      usedhero() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_usedhero();

  // optional uint32 expeditionid = 5;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionidFieldNumber = 5;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stExpedition)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > expeids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heroids_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 expeditionid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > usedhero_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stExpedition* default_instance_;
};
// -------------------------------------------------------------------

class stExpeditionHero : public ::google::protobuf::Message {
 public:
  stExpeditionHero();
  virtual ~stExpeditionHero();

  stExpeditionHero(const stExpeditionHero& from);

  inline stExpeditionHero& operator=(const stExpeditionHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExpeditionHero& default_instance();

  void Swap(stExpeditionHero* other);

  // implements Message ----------------------------------------------

  stExpeditionHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExpeditionHero& from);
  void MergeFrom(const stExpeditionHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 lvl = 2;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 2;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);

  // optional uint32 power = 3;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stExpeditionHero)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_power();
  inline void clear_has_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 lvl_;
  ::google::protobuf::uint32 power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stExpeditionHero* default_instance_;
};
// -------------------------------------------------------------------

class stExpeditionRet : public ::google::protobuf::Message {
 public:
  stExpeditionRet();
  virtual ~stExpeditionRet();

  stExpeditionRet(const stExpeditionRet& from);

  inline stExpeditionRet& operator=(const stExpeditionRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExpeditionRet& default_instance();

  void Swap(stExpeditionRet* other);

  // implements Message ----------------------------------------------

  stExpeditionRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExpeditionRet& from);
  void MergeFrom(const stExpeditionRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stExpeditionRet_ProtoModID ProtoModID;
  static const ProtoModID ModID = stExpeditionRet_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stExpeditionRet_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stExpeditionRet_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stExpeditionRet_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stExpeditionRet_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stExpeditionRet_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stExpeditionRet_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stExpeditionRet_ProtoModID_Parse(name, value);
  }

  typedef stExpeditionRet_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stExpeditionRet_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stExpeditionRet_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stExpeditionRet_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stExpeditionRet_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stExpeditionRet_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stExpeditionRet_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stExpeditionRet_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stExpeditionRet_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 expeditionid = 2;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionidFieldNumber = 2;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // optional uint32 finishTime = 3;
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 finishtime() const;
  inline void set_finishtime(::google::protobuf::uint32 value);

  // repeated .Global.stExpeditionHero usedHero = 4;
  inline int usedhero_size() const;
  inline void clear_usedhero();
  static const int kUsedHeroFieldNumber = 4;
  inline const ::Global::stExpeditionHero& usedhero(int index) const;
  inline ::Global::stExpeditionHero* mutable_usedhero(int index);
  inline ::Global::stExpeditionHero* add_usedhero();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionHero >&
      usedhero() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionHero >*
      mutable_usedhero();

  // @@protoc_insertion_point(class_scope:Global.stExpeditionRet)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();
  inline void set_has_finishtime();
  inline void clear_has_finishtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 expeditionid_;
  ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionHero > usedhero_;
  ::google::protobuf::uint32 finishtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stExpeditionRet* default_instance_;
};
// -------------------------------------------------------------------

class stExpeditionReward : public ::google::protobuf::Message {
 public:
  stExpeditionReward();
  virtual ~stExpeditionReward();

  stExpeditionReward(const stExpeditionReward& from);

  inline stExpeditionReward& operator=(const stExpeditionReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExpeditionReward& default_instance();

  void Swap(stExpeditionReward* other);

  // implements Message ----------------------------------------------

  stExpeditionReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExpeditionReward& from);
  void MergeFrom(const stExpeditionReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stExpeditionReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stExpeditionReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stExpeditionReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stExpeditionReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stExpeditionReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stExpeditionReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stExpeditionReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stExpeditionReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stExpeditionReward_ProtoModID_Parse(name, value);
  }

  typedef stExpeditionReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stExpeditionReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stExpeditionReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stExpeditionReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stExpeditionReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stExpeditionReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stExpeditionReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stExpeditionReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stExpeditionReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 expeditionid = 2;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionidFieldNumber = 2;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // optional uint32 finishTime = 3;
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 finishtime() const;
  inline void set_finishtime(::google::protobuf::uint32 value);

  // repeated .Global.stExpeditionHero usedHero = 4;
  inline int usedhero_size() const;
  inline void clear_usedhero();
  static const int kUsedHeroFieldNumber = 4;
  inline const ::Global::stExpeditionHero& usedhero(int index) const;
  inline ::Global::stExpeditionHero* mutable_usedhero(int index);
  inline ::Global::stExpeditionHero* add_usedhero();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionHero >&
      usedhero() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionHero >*
      mutable_usedhero();

  // @@protoc_insertion_point(class_scope:Global.stExpeditionReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();
  inline void set_has_finishtime();
  inline void clear_has_finishtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 expeditionid_;
  ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionHero > usedhero_;
  ::google::protobuf::uint32 finishtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stExpeditionReward* default_instance_;
};
// -------------------------------------------------------------------

class stExpeditionRewardRet : public ::google::protobuf::Message {
 public:
  stExpeditionRewardRet();
  virtual ~stExpeditionRewardRet();

  stExpeditionRewardRet(const stExpeditionRewardRet& from);

  inline stExpeditionRewardRet& operator=(const stExpeditionRewardRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExpeditionRewardRet& default_instance();

  void Swap(stExpeditionRewardRet* other);

  // implements Message ----------------------------------------------

  stExpeditionRewardRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExpeditionRewardRet& from);
  void MergeFrom(const stExpeditionRewardRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stExpeditionRewardRet_ProtoModID ProtoModID;
  static const ProtoModID ModID = stExpeditionRewardRet_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stExpeditionRewardRet_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stExpeditionRewardRet_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stExpeditionRewardRet_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stExpeditionRewardRet_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stExpeditionRewardRet_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stExpeditionRewardRet_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stExpeditionRewardRet_ProtoModID_Parse(name, value);
  }

  typedef stExpeditionRewardRet_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stExpeditionRewardRet_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stExpeditionRewardRet_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stExpeditionRewardRet_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stExpeditionRewardRet_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stExpeditionRewardRet_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stExpeditionRewardRet_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stExpeditionRewardRet_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stExpeditionRewardRet_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 expeditionid = 2;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionidFieldNumber = 2;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stExpeditionRewardRet)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 expeditionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stExpeditionRewardRet* default_instance_;
};
// -------------------------------------------------------------------

class stFastExpedition : public ::google::protobuf::Message {
 public:
  stFastExpedition();
  virtual ~stFastExpedition();

  stFastExpedition(const stFastExpedition& from);

  inline stFastExpedition& operator=(const stFastExpedition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFastExpedition& default_instance();

  void Swap(stFastExpedition* other);

  // implements Message ----------------------------------------------

  stFastExpedition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFastExpedition& from);
  void MergeFrom(const stFastExpedition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stFastExpedition_ProtoModID ProtoModID;
  static const ProtoModID ModID = stFastExpedition_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stFastExpedition_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stFastExpedition_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stFastExpedition_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stFastExpedition_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stFastExpedition_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stFastExpedition_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stFastExpedition_ProtoModID_Parse(name, value);
  }

  typedef stFastExpedition_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stFastExpedition_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stFastExpedition_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stFastExpedition_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stFastExpedition_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stFastExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stFastExpedition_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stFastExpedition_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stFastExpedition_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 expeditionid = 2;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionidFieldNumber = 2;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // optional uint32 finishTime = 3;
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 finishtime() const;
  inline void set_finishtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stFastExpedition)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();
  inline void set_has_finishtime();
  inline void clear_has_finishtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 expeditionid_;
  ::google::protobuf::uint32 finishtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stFastExpedition* default_instance_;
};
// -------------------------------------------------------------------

class stFastExpeditionRet : public ::google::protobuf::Message {
 public:
  stFastExpeditionRet();
  virtual ~stFastExpeditionRet();

  stFastExpeditionRet(const stFastExpeditionRet& from);

  inline stFastExpeditionRet& operator=(const stFastExpeditionRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFastExpeditionRet& default_instance();

  void Swap(stFastExpeditionRet* other);

  // implements Message ----------------------------------------------

  stFastExpeditionRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFastExpeditionRet& from);
  void MergeFrom(const stFastExpeditionRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stFastExpeditionRet_ProtoModID ProtoModID;
  static const ProtoModID ModID = stFastExpeditionRet_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stFastExpeditionRet_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stFastExpeditionRet_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stFastExpeditionRet_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stFastExpeditionRet_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stFastExpeditionRet_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stFastExpeditionRet_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stFastExpeditionRet_ProtoModID_Parse(name, value);
  }

  typedef stFastExpeditionRet_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stFastExpeditionRet_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stFastExpeditionRet_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stFastExpeditionRet_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stFastExpeditionRet_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stFastExpeditionRet_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stFastExpeditionRet_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stFastExpeditionRet_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stFastExpeditionRet_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 expeditionid = 2;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionidFieldNumber = 2;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // optional uint32 finishTime = 3;
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 finishtime() const;
  inline void set_finishtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stFastExpeditionRet)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();
  inline void set_has_finishtime();
  inline void clear_has_finishtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 expeditionid_;
  ::google::protobuf::uint32 finishtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stFastExpeditionRet* default_instance_;
};
// -------------------------------------------------------------------

class stCancelExpedition : public ::google::protobuf::Message {
 public:
  stCancelExpedition();
  virtual ~stCancelExpedition();

  stCancelExpedition(const stCancelExpedition& from);

  inline stCancelExpedition& operator=(const stCancelExpedition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelExpedition& default_instance();

  void Swap(stCancelExpedition* other);

  // implements Message ----------------------------------------------

  stCancelExpedition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelExpedition& from);
  void MergeFrom(const stCancelExpedition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelExpedition_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelExpedition_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelExpedition_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelExpedition_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelExpedition_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelExpedition_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelExpedition_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelExpedition_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelExpedition_ProtoModID_Parse(name, value);
  }

  typedef stCancelExpedition_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelExpedition_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelExpedition_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelExpedition_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelExpedition_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelExpedition_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelExpedition_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelExpedition_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 expeditionid = 2;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionidFieldNumber = 2;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // optional uint32 finishTime = 3;
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 finishtime() const;
  inline void set_finishtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stCancelExpedition)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();
  inline void set_has_finishtime();
  inline void clear_has_finishtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 expeditionid_;
  ::google::protobuf::uint32 finishtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCancelExpedition* default_instance_;
};
// -------------------------------------------------------------------

class stCancelExpeditionRet : public ::google::protobuf::Message {
 public:
  stCancelExpeditionRet();
  virtual ~stCancelExpeditionRet();

  stCancelExpeditionRet(const stCancelExpeditionRet& from);

  inline stCancelExpeditionRet& operator=(const stCancelExpeditionRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelExpeditionRet& default_instance();

  void Swap(stCancelExpeditionRet* other);

  // implements Message ----------------------------------------------

  stCancelExpeditionRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelExpeditionRet& from);
  void MergeFrom(const stCancelExpeditionRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelExpeditionRet_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelExpeditionRet_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelExpeditionRet_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelExpeditionRet_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelExpeditionRet_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelExpeditionRet_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelExpeditionRet_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelExpeditionRet_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelExpeditionRet_ProtoModID_Parse(name, value);
  }

  typedef stCancelExpeditionRet_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelExpeditionRet_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelExpeditionRet_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelExpeditionRet_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelExpeditionRet_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelExpeditionRet_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelExpeditionRet_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelExpeditionRet_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelExpeditionRet_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 expeditionid = 2;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionidFieldNumber = 2;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stCancelExpeditionRet)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 expeditionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCancelExpeditionRet* default_instance_;
};
// -------------------------------------------------------------------

class stExpeditionSummary : public ::google::protobuf::Message {
 public:
  stExpeditionSummary();
  virtual ~stExpeditionSummary();

  stExpeditionSummary(const stExpeditionSummary& from);

  inline stExpeditionSummary& operator=(const stExpeditionSummary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExpeditionSummary& default_instance();

  void Swap(stExpeditionSummary* other);

  // implements Message ----------------------------------------------

  stExpeditionSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExpeditionSummary& from);
  void MergeFrom(const stExpeditionSummary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stExpeditionSummary_ProtoModID ProtoModID;
  static const ProtoModID ModID = stExpeditionSummary_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stExpeditionSummary_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stExpeditionSummary_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stExpeditionSummary_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stExpeditionSummary_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stExpeditionSummary_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stExpeditionSummary_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stExpeditionSummary_ProtoModID_Parse(name, value);
  }

  typedef stExpeditionSummary_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stExpeditionSummary_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stExpeditionSummary_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stExpeditionSummary_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stExpeditionSummary_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stExpeditionSummary_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stExpeditionSummary_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stExpeditionSummary_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stExpeditionSummary_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated .Global.stExpeditionItem items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::Global::stExpeditionItem& items(int index) const;
  inline ::Global::stExpeditionItem* mutable_items(int index);
  inline ::Global::stExpeditionItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Global.stExpeditionSummary)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionItem > items_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stExpeditionSummary* default_instance_;
};
// -------------------------------------------------------------------

class stGiveLilianDayTaskCb : public ::google::protobuf::Message {
 public:
  stGiveLilianDayTaskCb();
  virtual ~stGiveLilianDayTaskCb();

  stGiveLilianDayTaskCb(const stGiveLilianDayTaskCb& from);

  inline stGiveLilianDayTaskCb& operator=(const stGiveLilianDayTaskCb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGiveLilianDayTaskCb& default_instance();

  void Swap(stGiveLilianDayTaskCb* other);

  // implements Message ----------------------------------------------

  stGiveLilianDayTaskCb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGiveLilianDayTaskCb& from);
  void MergeFrom(const stGiveLilianDayTaskCb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGiveLilianDayTaskCb_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGiveLilianDayTaskCb_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGiveLilianDayTaskCb_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGiveLilianDayTaskCb_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGiveLilianDayTaskCb_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGiveLilianDayTaskCb_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGiveLilianDayTaskCb_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGiveLilianDayTaskCb_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGiveLilianDayTaskCb_ProtoModID_Parse(name, value);
  }

  typedef stGiveLilianDayTaskCb_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGiveLilianDayTaskCb_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGiveLilianDayTaskCb_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGiveLilianDayTaskCb_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGiveLilianDayTaskCb_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGiveLilianDayTaskCb_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGiveLilianDayTaskCb_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGiveLilianDayTaskCb_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGiveLilianDayTaskCb_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGiveLilianDayTaskCb)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGiveLilianDayTaskCb* default_instance_;
};
// -------------------------------------------------------------------

class stUpdateDamageRank : public ::google::protobuf::Message {
 public:
  stUpdateDamageRank();
  virtual ~stUpdateDamageRank();

  stUpdateDamageRank(const stUpdateDamageRank& from);

  inline stUpdateDamageRank& operator=(const stUpdateDamageRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUpdateDamageRank& default_instance();

  void Swap(stUpdateDamageRank* other);

  // implements Message ----------------------------------------------

  stUpdateDamageRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUpdateDamageRank& from);
  void MergeFrom(const stUpdateDamageRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUpdateDamageRank_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUpdateDamageRank_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUpdateDamageRank_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUpdateDamageRank_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUpdateDamageRank_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUpdateDamageRank_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUpdateDamageRank_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUpdateDamageRank_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUpdateDamageRank_ProtoModID_Parse(name, value);
  }

  typedef stUpdateDamageRank_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUpdateDamageRank_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUpdateDamageRank_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUpdateDamageRank_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUpdateDamageRank_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUpdateDamageRank_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUpdateDamageRank_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUpdateDamageRank_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUpdateDamageRank_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 damage = 2;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 2;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stUpdateDamageRank)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 damage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUpdateDamageRank* default_instance_;
};
// -------------------------------------------------------------------

class stNoticeSendRankInfo : public ::google::protobuf::Message {
 public:
  stNoticeSendRankInfo();
  virtual ~stNoticeSendRankInfo();

  stNoticeSendRankInfo(const stNoticeSendRankInfo& from);

  inline stNoticeSendRankInfo& operator=(const stNoticeSendRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNoticeSendRankInfo& default_instance();

  void Swap(stNoticeSendRankInfo* other);

  // implements Message ----------------------------------------------

  stNoticeSendRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNoticeSendRankInfo& from);
  void MergeFrom(const stNoticeSendRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNoticeSendRankInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNoticeSendRankInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNoticeSendRankInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNoticeSendRankInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNoticeSendRankInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNoticeSendRankInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNoticeSendRankInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNoticeSendRankInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNoticeSendRankInfo_ProtoModID_Parse(name, value);
  }

  typedef stNoticeSendRankInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNoticeSendRankInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNoticeSendRankInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNoticeSendRankInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNoticeSendRankInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNoticeSendRankInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNoticeSendRankInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNoticeSendRankInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNoticeSendRankInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNoticeSendRankInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNoticeSendRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class stOperateActivityCb : public ::google::protobuf::Message {
 public:
  stOperateActivityCb();
  virtual ~stOperateActivityCb();

  stOperateActivityCb(const stOperateActivityCb& from);

  inline stOperateActivityCb& operator=(const stOperateActivityCb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOperateActivityCb& default_instance();

  void Swap(stOperateActivityCb* other);

  // implements Message ----------------------------------------------

  stOperateActivityCb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOperateActivityCb& from);
  void MergeFrom(const stOperateActivityCb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOperateActivityCb_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOperateActivityCb_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOperateActivityCb_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOperateActivityCb_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOperateActivityCb_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOperateActivityCb_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOperateActivityCb_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOperateActivityCb_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOperateActivityCb_ProtoModID_Parse(name, value);
  }

  typedef stOperateActivityCb_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOperateActivityCb_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOperateActivityCb_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOperateActivityCb_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOperateActivityCb_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOperateActivityCb_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOperateActivityCb_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOperateActivityCb_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOperateActivityCb_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 activityId = 2;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIdFieldNumber = 2;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stOperateActivityCb)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stOperateActivityCb* default_instance_;
};
// -------------------------------------------------------------------

class stOperateActivityReward : public ::google::protobuf::Message {
 public:
  stOperateActivityReward();
  virtual ~stOperateActivityReward();

  stOperateActivityReward(const stOperateActivityReward& from);

  inline stOperateActivityReward& operator=(const stOperateActivityReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOperateActivityReward& default_instance();

  void Swap(stOperateActivityReward* other);

  // implements Message ----------------------------------------------

  stOperateActivityReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOperateActivityReward& from);
  void MergeFrom(const stOperateActivityReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOperateActivityReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOperateActivityReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOperateActivityReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOperateActivityReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOperateActivityReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOperateActivityReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOperateActivityReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOperateActivityReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOperateActivityReward_ProtoModID_Parse(name, value);
  }

  typedef stOperateActivityReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOperateActivityReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOperateActivityReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOperateActivityReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOperateActivityReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOperateActivityReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOperateActivityReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOperateActivityReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOperateActivityReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 activityId = 2;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIdFieldNumber = 2;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 itemId = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint32 boxId = 5;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 5;
  inline ::google::protobuf::uint32 boxid() const;
  inline void set_boxid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stOperateActivityReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stOperateActivityReward* default_instance_;
};
// -------------------------------------------------------------------

class stOperateActivityRewardCb : public ::google::protobuf::Message {
 public:
  stOperateActivityRewardCb();
  virtual ~stOperateActivityRewardCb();

  stOperateActivityRewardCb(const stOperateActivityRewardCb& from);

  inline stOperateActivityRewardCb& operator=(const stOperateActivityRewardCb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOperateActivityRewardCb& default_instance();

  void Swap(stOperateActivityRewardCb* other);

  // implements Message ----------------------------------------------

  stOperateActivityRewardCb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOperateActivityRewardCb& from);
  void MergeFrom(const stOperateActivityRewardCb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOperateActivityRewardCb_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOperateActivityRewardCb_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOperateActivityRewardCb_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOperateActivityRewardCb_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOperateActivityRewardCb_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOperateActivityRewardCb_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOperateActivityRewardCb_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOperateActivityRewardCb_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOperateActivityRewardCb_ProtoModID_Parse(name, value);
  }

  typedef stOperateActivityRewardCb_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOperateActivityRewardCb_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOperateActivityRewardCb_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOperateActivityRewardCb_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOperateActivityRewardCb_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOperateActivityRewardCb_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOperateActivityRewardCb_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOperateActivityRewardCb_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOperateActivityRewardCb_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 activityId = 2;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIdFieldNumber = 2;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 itemId = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint32 boxId = 5;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 5;
  inline ::google::protobuf::uint32 boxid() const;
  inline void set_boxid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stOperateActivityRewardCb)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stOperateActivityRewardCb* default_instance_;
};
// -------------------------------------------------------------------

class stOperateActivityLotteryReward : public ::google::protobuf::Message {
 public:
  stOperateActivityLotteryReward();
  virtual ~stOperateActivityLotteryReward();

  stOperateActivityLotteryReward(const stOperateActivityLotteryReward& from);

  inline stOperateActivityLotteryReward& operator=(const stOperateActivityLotteryReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOperateActivityLotteryReward& default_instance();

  void Swap(stOperateActivityLotteryReward* other);

  // implements Message ----------------------------------------------

  stOperateActivityLotteryReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOperateActivityLotteryReward& from);
  void MergeFrom(const stOperateActivityLotteryReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOperateActivityLotteryReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOperateActivityLotteryReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOperateActivityLotteryReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOperateActivityLotteryReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOperateActivityLotteryReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOperateActivityLotteryReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOperateActivityLotteryReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOperateActivityLotteryReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOperateActivityLotteryReward_ProtoModID_Parse(name, value);
  }

  typedef stOperateActivityLotteryReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOperateActivityLotteryReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOperateActivityLotteryReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOperateActivityLotteryReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOperateActivityLotteryReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOperateActivityLotteryReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOperateActivityLotteryReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOperateActivityLotteryReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOperateActivityLotteryReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 cost = 3;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 3;
  inline ::google::protobuf::uint32 cost() const;
  inline void set_cost(::google::protobuf::uint32 value);

  // optional uint32 boxId = 4;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 4;
  inline ::google::protobuf::uint32 boxid() const;
  inline void set_boxid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stOperateActivityLotteryReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 cost_;
  ::google::protobuf::uint32 boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stOperateActivityLotteryReward* default_instance_;
};
// -------------------------------------------------------------------

class stOperateActivityLotteryRewardCb : public ::google::protobuf::Message {
 public:
  stOperateActivityLotteryRewardCb();
  virtual ~stOperateActivityLotteryRewardCb();

  stOperateActivityLotteryRewardCb(const stOperateActivityLotteryRewardCb& from);

  inline stOperateActivityLotteryRewardCb& operator=(const stOperateActivityLotteryRewardCb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOperateActivityLotteryRewardCb& default_instance();

  void Swap(stOperateActivityLotteryRewardCb* other);

  // implements Message ----------------------------------------------

  stOperateActivityLotteryRewardCb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOperateActivityLotteryRewardCb& from);
  void MergeFrom(const stOperateActivityLotteryRewardCb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOperateActivityLotteryRewardCb_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOperateActivityLotteryRewardCb_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOperateActivityLotteryRewardCb_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOperateActivityLotteryRewardCb_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOperateActivityLotteryRewardCb_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOperateActivityLotteryRewardCb_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOperateActivityLotteryRewardCb_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOperateActivityLotteryRewardCb_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOperateActivityLotteryRewardCb_ProtoModID_Parse(name, value);
  }

  typedef stOperateActivityLotteryRewardCb_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOperateActivityLotteryRewardCb_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOperateActivityLotteryRewardCb_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOperateActivityLotteryRewardCb_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOperateActivityLotteryRewardCb_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOperateActivityLotteryRewardCb_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOperateActivityLotteryRewardCb_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOperateActivityLotteryRewardCb_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOperateActivityLotteryRewardCb_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stOperateActivityLotteryRewardCb)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stOperateActivityLotteryRewardCb* default_instance_;
};
// -------------------------------------------------------------------

class stReqPayTypeCb : public ::google::protobuf::Message {
 public:
  stReqPayTypeCb();
  virtual ~stReqPayTypeCb();

  stReqPayTypeCb(const stReqPayTypeCb& from);

  inline stReqPayTypeCb& operator=(const stReqPayTypeCb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqPayTypeCb& default_instance();

  void Swap(stReqPayTypeCb* other);

  // implements Message ----------------------------------------------

  stReqPayTypeCb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqPayTypeCb& from);
  void MergeFrom(const stReqPayTypeCb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqPayTypeCb_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqPayTypeCb_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqPayTypeCb_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqPayTypeCb_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqPayTypeCb_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqPayTypeCb_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqPayTypeCb_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqPayTypeCb_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqPayTypeCb_ProtoModID_Parse(name, value);
  }

  typedef stReqPayTypeCb_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqPayTypeCb_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqPayTypeCb_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqPayTypeCb_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqPayTypeCb_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqPayTypeCb_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqPayTypeCb_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqPayTypeCb_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqPayTypeCb_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional string orderId = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 3;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // @@protoc_insertion_point(class_scope:Global.stReqPayTypeCb)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_orderid();
  inline void clear_has_orderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 itemid_;
  ::std::string* orderid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqPayTypeCb* default_instance_;
};
// -------------------------------------------------------------------

class stReqUserRankInfo : public ::google::protobuf::Message {
 public:
  stReqUserRankInfo();
  virtual ~stReqUserRankInfo();

  stReqUserRankInfo(const stReqUserRankInfo& from);

  inline stReqUserRankInfo& operator=(const stReqUserRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqUserRankInfo& default_instance();

  void Swap(stReqUserRankInfo* other);

  // implements Message ----------------------------------------------

  stReqUserRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqUserRankInfo& from);
  void MergeFrom(const stReqUserRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqUserRankInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqUserRankInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqUserRankInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqUserRankInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqUserRankInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqUserRankInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqUserRankInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqUserRankInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqUserRankInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqUserRankInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqUserRankInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqUserRankInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqUserRankInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqUserRankInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqUserRankInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqUserRankInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqUserRankInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqUserRankInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqUserRankInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqUserRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class userSortInfo : public ::google::protobuf::Message {
 public:
  userSortInfo();
  virtual ~userSortInfo();

  userSortInfo(const userSortInfo& from);

  inline userSortInfo& operator=(const userSortInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const userSortInfo& default_instance();

  void Swap(userSortInfo* other);

  // implements Message ----------------------------------------------

  userSortInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const userSortInfo& from);
  void MergeFrom(const userSortInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Global.userSortInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static userSortInfo* default_instance_;
};
// -------------------------------------------------------------------

class stUserRankInfoResult : public ::google::protobuf::Message {
 public:
  stUserRankInfoResult();
  virtual ~stUserRankInfoResult();

  stUserRankInfoResult(const stUserRankInfoResult& from);

  inline stUserRankInfoResult& operator=(const stUserRankInfoResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserRankInfoResult& default_instance();

  void Swap(stUserRankInfoResult* other);

  // implements Message ----------------------------------------------

  stUserRankInfoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserRankInfoResult& from);
  void MergeFrom(const stUserRankInfoResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserRankInfoResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserRankInfoResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserRankInfoResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserRankInfoResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserRankInfoResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserRankInfoResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserRankInfoResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserRankInfoResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserRankInfoResult_ProtoModID_Parse(name, value);
  }

  typedef stUserRankInfoResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserRankInfoResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserRankInfoResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserRankInfoResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserRankInfoResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserRankInfoResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserRankInfoResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserRankInfoResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserRankInfoResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 damage = 2;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 2;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // optional uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 endTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // repeated .Global.userSortInfo info = 5;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::Global::userSortInfo& info(int index) const;
  inline ::Global::userSortInfo* mutable_info(int index);
  inline ::Global::userSortInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::userSortInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::userSortInfo >*
      mutable_info();

  // optional uint32 levelID = 6;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 6;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stUserRankInfoResult)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 endtime_;
  ::google::protobuf::RepeatedPtrField< ::Global::userSortInfo > info_;
  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUserRankInfoResult* default_instance_;
};
// -------------------------------------------------------------------

class stEmeraldDreamCopymapFail : public ::google::protobuf::Message {
 public:
  stEmeraldDreamCopymapFail();
  virtual ~stEmeraldDreamCopymapFail();

  stEmeraldDreamCopymapFail(const stEmeraldDreamCopymapFail& from);

  inline stEmeraldDreamCopymapFail& operator=(const stEmeraldDreamCopymapFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEmeraldDreamCopymapFail& default_instance();

  void Swap(stEmeraldDreamCopymapFail* other);

  // implements Message ----------------------------------------------

  stEmeraldDreamCopymapFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEmeraldDreamCopymapFail& from);
  void MergeFrom(const stEmeraldDreamCopymapFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEmeraldDreamCopymapFail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEmeraldDreamCopymapFail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEmeraldDreamCopymapFail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEmeraldDreamCopymapFail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEmeraldDreamCopymapFail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEmeraldDreamCopymapFail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEmeraldDreamCopymapFail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEmeraldDreamCopymapFail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEmeraldDreamCopymapFail_ProtoModID_Parse(name, value);
  }

  typedef stEmeraldDreamCopymapFail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEmeraldDreamCopymapFail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEmeraldDreamCopymapFail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEmeraldDreamCopymapFail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEmeraldDreamCopymapFail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEmeraldDreamCopymapFail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEmeraldDreamCopymapFail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEmeraldDreamCopymapFail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEmeraldDreamCopymapFail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stUserDamagePair damageInfo = 1;
  inline int damageinfo_size() const;
  inline void clear_damageinfo();
  static const int kDamageInfoFieldNumber = 1;
  inline const ::Global::stUserDamagePair& damageinfo(int index) const;
  inline ::Global::stUserDamagePair* mutable_damageinfo(int index);
  inline ::Global::stUserDamagePair* add_damageinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >&
      damageinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >*
      mutable_damageinfo();

  // optional uint32 bossHP = 2;
  inline bool has_bosshp() const;
  inline void clear_bosshp();
  static const int kBossHPFieldNumber = 2;
  inline ::google::protobuf::uint32 bosshp() const;
  inline void set_bosshp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stEmeraldDreamCopymapFail)
 private:
  inline void set_has_bosshp();
  inline void clear_has_bosshp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair > damageinfo_;
  ::google::protobuf::uint32 bosshp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stEmeraldDreamCopymapFail* default_instance_;
};
// -------------------------------------------------------------------

class stKillEmeraldDreamBoss : public ::google::protobuf::Message {
 public:
  stKillEmeraldDreamBoss();
  virtual ~stKillEmeraldDreamBoss();

  stKillEmeraldDreamBoss(const stKillEmeraldDreamBoss& from);

  inline stKillEmeraldDreamBoss& operator=(const stKillEmeraldDreamBoss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stKillEmeraldDreamBoss& default_instance();

  void Swap(stKillEmeraldDreamBoss* other);

  // implements Message ----------------------------------------------

  stKillEmeraldDreamBoss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stKillEmeraldDreamBoss& from);
  void MergeFrom(const stKillEmeraldDreamBoss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stKillEmeraldDreamBoss_ProtoModID ProtoModID;
  static const ProtoModID ModID = stKillEmeraldDreamBoss_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stKillEmeraldDreamBoss_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stKillEmeraldDreamBoss_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stKillEmeraldDreamBoss_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stKillEmeraldDreamBoss_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stKillEmeraldDreamBoss_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stKillEmeraldDreamBoss_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stKillEmeraldDreamBoss_ProtoModID_Parse(name, value);
  }

  typedef stKillEmeraldDreamBoss_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stKillEmeraldDreamBoss_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stKillEmeraldDreamBoss_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stKillEmeraldDreamBoss_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stKillEmeraldDreamBoss_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stKillEmeraldDreamBoss_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stKillEmeraldDreamBoss_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stKillEmeraldDreamBoss_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stKillEmeraldDreamBoss_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stUserDamagePair damageInfo = 1;
  inline int damageinfo_size() const;
  inline void clear_damageinfo();
  static const int kDamageInfoFieldNumber = 1;
  inline const ::Global::stUserDamagePair& damageinfo(int index) const;
  inline ::Global::stUserDamagePair* mutable_damageinfo(int index);
  inline ::Global::stUserDamagePair* add_damageinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >&
      damageinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >*
      mutable_damageinfo();

  // optional uint32 bossID = 2;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIDFieldNumber = 2;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stKillEmeraldDreamBoss)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair > damageinfo_;
  ::google::protobuf::uint32 bossid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stKillEmeraldDreamBoss* default_instance_;
};
// -------------------------------------------------------------------

class strRemoveNum : public ::google::protobuf::Message {
 public:
  strRemoveNum();
  virtual ~strRemoveNum();

  strRemoveNum(const strRemoveNum& from);

  inline strRemoveNum& operator=(const strRemoveNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const strRemoveNum& default_instance();

  void Swap(strRemoveNum* other);

  // implements Message ----------------------------------------------

  strRemoveNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const strRemoveNum& from);
  void MergeFrom(const strRemoveNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef strRemoveNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = strRemoveNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return strRemoveNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    strRemoveNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    strRemoveNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    strRemoveNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return strRemoveNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return strRemoveNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return strRemoveNum_ProtoModID_Parse(name, value);
  }

  typedef strRemoveNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = strRemoveNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return strRemoveNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    strRemoveNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    strRemoveNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    strRemoveNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return strRemoveNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return strRemoveNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return strRemoveNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.strRemoveNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static strRemoveNum* default_instance_;
};
// -------------------------------------------------------------------

class stCopyMapInfo : public ::google::protobuf::Message {
 public:
  stCopyMapInfo();
  virtual ~stCopyMapInfo();

  stCopyMapInfo(const stCopyMapInfo& from);

  inline stCopyMapInfo& operator=(const stCopyMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCopyMapInfo& default_instance();

  void Swap(stCopyMapInfo* other);

  // implements Message ----------------------------------------------

  stCopyMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCopyMapInfo& from);
  void MergeFrom(const stCopyMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCopyMapInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCopyMapInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCopyMapInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCopyMapInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCopyMapInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCopyMapInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCopyMapInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCopyMapInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCopyMapInfo_ProtoModID_Parse(name, value);
  }

  typedef stCopyMapInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCopyMapInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCopyMapInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCopyMapInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCopyMapInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCopyMapInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCopyMapInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCopyMapInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCopyMapInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stCopyMapInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCopyMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class stCopyMapInfoResult : public ::google::protobuf::Message {
 public:
  stCopyMapInfoResult();
  virtual ~stCopyMapInfoResult();

  stCopyMapInfoResult(const stCopyMapInfoResult& from);

  inline stCopyMapInfoResult& operator=(const stCopyMapInfoResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCopyMapInfoResult& default_instance();

  void Swap(stCopyMapInfoResult* other);

  // implements Message ----------------------------------------------

  stCopyMapInfoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCopyMapInfoResult& from);
  void MergeFrom(const stCopyMapInfoResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCopyMapInfoResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCopyMapInfoResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCopyMapInfoResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCopyMapInfoResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCopyMapInfoResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCopyMapInfoResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCopyMapInfoResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCopyMapInfoResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCopyMapInfoResult_ProtoModID_Parse(name, value);
  }

  typedef stCopyMapInfoResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCopyMapInfoResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCopyMapInfoResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCopyMapInfoResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCopyMapInfoResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCopyMapInfoResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCopyMapInfoResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCopyMapInfoResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCopyMapInfoResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 levelId = 2;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIdFieldNumber = 2;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stCopyMapInfoResult)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stCopyMapInfoResult* default_instance_;
};
// -------------------------------------------------------------------

class stRealTimeTeamMatch : public ::google::protobuf::Message {
 public:
  stRealTimeTeamMatch();
  virtual ~stRealTimeTeamMatch();

  stRealTimeTeamMatch(const stRealTimeTeamMatch& from);

  inline stRealTimeTeamMatch& operator=(const stRealTimeTeamMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRealTimeTeamMatch& default_instance();

  void Swap(stRealTimeTeamMatch* other);

  // implements Message ----------------------------------------------

  stRealTimeTeamMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRealTimeTeamMatch& from);
  void MergeFrom(const stRealTimeTeamMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRealTimeTeamMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRealTimeTeamMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRealTimeTeamMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRealTimeTeamMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRealTimeTeamMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRealTimeTeamMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRealTimeTeamMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRealTimeTeamMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRealTimeTeamMatch_ProtoModID_Parse(name, value);
  }

  typedef stRealTimeTeamMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRealTimeTeamMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRealTimeTeamMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRealTimeTeamMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRealTimeTeamMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRealTimeTeamMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRealTimeTeamMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRealTimeTeamMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRealTimeTeamMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.eRealTimePKType eType = 1;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 1;
  inline ::Global::eRealTimePKType etype() const;
  inline void set_etype(::Global::eRealTimePKType value);

  // optional uint32 teamID = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 2;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // repeated uint32 memberId = 3;
  inline int memberid_size() const;
  inline void clear_memberid();
  static const int kMemberIdFieldNumber = 3;
  inline ::google::protobuf::uint32 memberid(int index) const;
  inline void set_memberid(int index, ::google::protobuf::uint32 value);
  inline void add_memberid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      memberid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_memberid();

  // @@protoc_insertion_point(class_scope:Global.stRealTimeTeamMatch)
 private:
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int etype_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > memberid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRealTimeTeamMatch* default_instance_;
};
// -------------------------------------------------------------------

class stOnPubLeaveTeam : public ::google::protobuf::Message {
 public:
  stOnPubLeaveTeam();
  virtual ~stOnPubLeaveTeam();

  stOnPubLeaveTeam(const stOnPubLeaveTeam& from);

  inline stOnPubLeaveTeam& operator=(const stOnPubLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOnPubLeaveTeam& default_instance();

  void Swap(stOnPubLeaveTeam* other);

  // implements Message ----------------------------------------------

  stOnPubLeaveTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOnPubLeaveTeam& from);
  void MergeFrom(const stOnPubLeaveTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOnPubLeaveTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOnPubLeaveTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOnPubLeaveTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOnPubLeaveTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOnPubLeaveTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOnPubLeaveTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOnPubLeaveTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOnPubLeaveTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOnPubLeaveTeam_ProtoModID_Parse(name, value);
  }

  typedef stOnPubLeaveTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOnPubLeaveTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOnPubLeaveTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOnPubLeaveTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOnPubLeaveTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOnPubLeaveTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOnPubLeaveTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOnPubLeaveTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOnPubLeaveTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stOnPubLeaveTeam)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stOnPubLeaveTeam* default_instance_;
};
// -------------------------------------------------------------------

class stDeductMoney : public ::google::protobuf::Message {
 public:
  stDeductMoney();
  virtual ~stDeductMoney();

  stDeductMoney(const stDeductMoney& from);

  inline stDeductMoney& operator=(const stDeductMoney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDeductMoney& default_instance();

  void Swap(stDeductMoney* other);

  // implements Message ----------------------------------------------

  stDeductMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDeductMoney& from);
  void MergeFrom(const stDeductMoney& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDeductMoney_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDeductMoney_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDeductMoney_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDeductMoney_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDeductMoney_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDeductMoney_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDeductMoney_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDeductMoney_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDeductMoney_ProtoModID_Parse(name, value);
  }

  typedef stDeductMoney_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDeductMoney_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDeductMoney_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDeductMoney_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDeductMoney_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDeductMoney_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDeductMoney_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDeductMoney_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDeductMoney_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stDeductMoney)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDeductMoney* default_instance_;
};
// -------------------------------------------------------------------

class stDeductMoneyResult : public ::google::protobuf::Message {
 public:
  stDeductMoneyResult();
  virtual ~stDeductMoneyResult();

  stDeductMoneyResult(const stDeductMoneyResult& from);

  inline stDeductMoneyResult& operator=(const stDeductMoneyResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDeductMoneyResult& default_instance();

  void Swap(stDeductMoneyResult* other);

  // implements Message ----------------------------------------------

  stDeductMoneyResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDeductMoneyResult& from);
  void MergeFrom(const stDeductMoneyResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDeductMoneyResult_eResult eResult;
  static const eResult eSuccess = stDeductMoneyResult_eResult_eSuccess;
  static const eResult DIAMOND_NOT_ENOUGH = stDeductMoneyResult_eResult_DIAMOND_NOT_ENOUGH;
  static inline bool eResult_IsValid(int value) {
    return stDeductMoneyResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stDeductMoneyResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stDeductMoneyResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stDeductMoneyResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stDeductMoneyResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stDeductMoneyResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stDeductMoneyResult_eResult_Parse(name, value);
  }

  typedef stDeductMoneyResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDeductMoneyResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDeductMoneyResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDeductMoneyResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDeductMoneyResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDeductMoneyResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDeductMoneyResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDeductMoneyResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDeductMoneyResult_ProtoModID_Parse(name, value);
  }

  typedef stDeductMoneyResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDeductMoneyResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDeductMoneyResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDeductMoneyResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDeductMoneyResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDeductMoneyResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDeductMoneyResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDeductMoneyResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDeductMoneyResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.stDeductMoneyResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Global::stDeductMoneyResult_eResult result() const;
  inline void set_result(::Global::stDeductMoneyResult_eResult value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stDeductMoneyResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDeductMoneyResult* default_instance_;
};
// -------------------------------------------------------------------

class stGiveReward : public ::google::protobuf::Message {
 public:
  stGiveReward();
  virtual ~stGiveReward();

  stGiveReward(const stGiveReward& from);

  inline stGiveReward& operator=(const stGiveReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGiveReward& default_instance();

  void Swap(stGiveReward* other);

  // implements Message ----------------------------------------------

  stGiveReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGiveReward& from);
  void MergeFrom(const stGiveReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGiveReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGiveReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGiveReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGiveReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGiveReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGiveReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGiveReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGiveReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGiveReward_ProtoModID_Parse(name, value);
  }

  typedef stGiveReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGiveReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGiveReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGiveReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGiveReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGiveReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGiveReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGiveReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGiveReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 boxID = 2;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIDFieldNumber = 2;
  inline ::google::protobuf::uint32 boxid() const;
  inline void set_boxid(::google::protobuf::uint32 value);

  // optional uint32 rewardID = 3;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIDFieldNumber = 3;
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // optional bool isIntegralReward = 4;
  inline bool has_isintegralreward() const;
  inline void clear_isintegralreward();
  static const int kIsIntegralRewardFieldNumber = 4;
  inline bool isintegralreward() const;
  inline void set_isintegralreward(bool value);

  // @@protoc_insertion_point(class_scope:Global.stGiveReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_rewardid();
  inline void clear_has_rewardid();
  inline void set_has_isintegralreward();
  inline void clear_has_isintegralreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 boxid_;
  ::google::protobuf::uint32 rewardid_;
  bool isintegralreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGiveReward* default_instance_;
};
// -------------------------------------------------------------------

class stGiveRewardResult : public ::google::protobuf::Message {
 public:
  stGiveRewardResult();
  virtual ~stGiveRewardResult();

  stGiveRewardResult(const stGiveRewardResult& from);

  inline stGiveRewardResult& operator=(const stGiveRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGiveRewardResult& default_instance();

  void Swap(stGiveRewardResult* other);

  // implements Message ----------------------------------------------

  stGiveRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGiveRewardResult& from);
  void MergeFrom(const stGiveRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGiveRewardResult_eResult eResult;
  static const eResult eSuccess = stGiveRewardResult_eResult_eSuccess;
  static const eResult eBAG_SLOT_NOT_ENOUGH = stGiveRewardResult_eResult_eBAG_SLOT_NOT_ENOUGH;
  static inline bool eResult_IsValid(int value) {
    return stGiveRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGiveRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGiveRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGiveRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGiveRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGiveRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGiveRewardResult_eResult_Parse(name, value);
  }

  typedef stGiveRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGiveRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGiveRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGiveRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGiveRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGiveRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGiveRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGiveRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGiveRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stGiveRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGiveRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGiveRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGiveRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGiveRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGiveRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGiveRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGiveRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGiveRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.stGiveRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Global::stGiveRewardResult_eResult result() const;
  inline void set_result(::Global::stGiveRewardResult_eResult value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 rewardID = 3;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIDFieldNumber = 3;
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // optional bool isIntegralReward = 4;
  inline bool has_isintegralreward() const;
  inline void clear_isintegralreward();
  static const int kIsIntegralRewardFieldNumber = 4;
  inline bool isintegralreward() const;
  inline void set_isintegralreward(bool value);

  // @@protoc_insertion_point(class_scope:Global.stGiveRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_rewardid();
  inline void clear_has_rewardid();
  inline void set_has_isintegralreward();
  inline void clear_has_isintegralreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 rewardid_;
  bool isintegralreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGiveRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqCheckMission : public ::google::protobuf::Message {
 public:
  stReqCheckMission();
  virtual ~stReqCheckMission();

  stReqCheckMission(const stReqCheckMission& from);

  inline stReqCheckMission& operator=(const stReqCheckMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCheckMission& default_instance();

  void Swap(stReqCheckMission* other);

  // implements Message ----------------------------------------------

  stReqCheckMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCheckMission& from);
  void MergeFrom(const stReqCheckMission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCheckMission_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCheckMission_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCheckMission_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCheckMission_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCheckMission_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCheckMission_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCheckMission_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCheckMission_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCheckMission_ProtoModID_Parse(name, value);
  }

  typedef stReqCheckMission_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCheckMission_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCheckMission_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCheckMission_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCheckMission_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCheckMission_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCheckMission_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCheckMission_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCheckMission_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 levelID = 2;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 2;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqCheckMission)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqCheckMission* default_instance_;
};
// -------------------------------------------------------------------

class stReqCheckTask : public ::google::protobuf::Message {
 public:
  stReqCheckTask();
  virtual ~stReqCheckTask();

  stReqCheckTask(const stReqCheckTask& from);

  inline stReqCheckTask& operator=(const stReqCheckTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCheckTask& default_instance();

  void Swap(stReqCheckTask* other);

  // implements Message ----------------------------------------------

  stReqCheckTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCheckTask& from);
  void MergeFrom(const stReqCheckTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCheckTask_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCheckTask_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCheckTask_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCheckTask_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCheckTask_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCheckTask_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCheckTask_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCheckTask_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCheckTask_ProtoModID_Parse(name, value);
  }

  typedef stReqCheckTask_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCheckTask_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCheckTask_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCheckTask_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCheckTask_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCheckTask_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCheckTask_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCheckTask_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCheckTask_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 squareType = 2;
  inline bool has_squaretype() const;
  inline void clear_squaretype();
  static const int kSquareTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 squaretype() const;
  inline void set_squaretype(::google::protobuf::uint32 value);

  // optional uint32 battleType = 3;
  inline bool has_battletype() const;
  inline void clear_battletype();
  static const int kBattleTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 battletype() const;
  inline void set_battletype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqCheckTask)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_squaretype();
  inline void clear_has_squaretype();
  inline void set_has_battletype();
  inline void clear_has_battletype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 squaretype_;
  ::google::protobuf::uint32 battletype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqCheckTask* default_instance_;
};
// -------------------------------------------------------------------

class stReqEnterTaskLv : public ::google::protobuf::Message {
 public:
  stReqEnterTaskLv();
  virtual ~stReqEnterTaskLv();

  stReqEnterTaskLv(const stReqEnterTaskLv& from);

  inline stReqEnterTaskLv& operator=(const stReqEnterTaskLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqEnterTaskLv& default_instance();

  void Swap(stReqEnterTaskLv* other);

  // implements Message ----------------------------------------------

  stReqEnterTaskLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqEnterTaskLv& from);
  void MergeFrom(const stReqEnterTaskLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqEnterTaskLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqEnterTaskLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqEnterTaskLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqEnterTaskLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqEnterTaskLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqEnterTaskLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqEnterTaskLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqEnterTaskLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqEnterTaskLv_ProtoModID_Parse(name, value);
  }

  typedef stReqEnterTaskLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqEnterTaskLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqEnterTaskLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqEnterTaskLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqEnterTaskLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqEnterTaskLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqEnterTaskLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqEnterTaskLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqEnterTaskLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 levelID = 2;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 2;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqEnterTaskLv)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqEnterTaskLv* default_instance_;
};
// -------------------------------------------------------------------

class stReqDisbandTeam : public ::google::protobuf::Message {
 public:
  stReqDisbandTeam();
  virtual ~stReqDisbandTeam();

  stReqDisbandTeam(const stReqDisbandTeam& from);

  inline stReqDisbandTeam& operator=(const stReqDisbandTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDisbandTeam& default_instance();

  void Swap(stReqDisbandTeam* other);

  // implements Message ----------------------------------------------

  stReqDisbandTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDisbandTeam& from);
  void MergeFrom(const stReqDisbandTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDisbandTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDisbandTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDisbandTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDisbandTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDisbandTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDisbandTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDisbandTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDisbandTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDisbandTeam_ProtoModID_Parse(name, value);
  }

  typedef stReqDisbandTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDisbandTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDisbandTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDisbandTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDisbandTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDisbandTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDisbandTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDisbandTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDisbandTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqDisbandTeam)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqDisbandTeam* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawInviteReward : public ::google::protobuf::Message {
 public:
  stReqDrawInviteReward();
  virtual ~stReqDrawInviteReward();

  stReqDrawInviteReward(const stReqDrawInviteReward& from);

  inline stReqDrawInviteReward& operator=(const stReqDrawInviteReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawInviteReward& default_instance();

  void Swap(stReqDrawInviteReward* other);

  // implements Message ----------------------------------------------

  stReqDrawInviteReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawInviteReward& from);
  void MergeFrom(const stReqDrawInviteReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawInviteReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawInviteReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawInviteReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawInviteReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawInviteReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawInviteReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawInviteReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawInviteReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawInviteReward_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawInviteReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawInviteReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawInviteReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawInviteReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawInviteReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawInviteReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawInviteReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawInviteReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawInviteReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 boxId = 2;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 2;
  inline ::google::protobuf::uint32 boxid() const;
  inline void set_boxid(::google::protobuf::uint32 value);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string account = 4;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 4;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:Global.stReqDrawInviteReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 boxid_;
  ::std::string* account_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawInviteReward* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawInviteRewardCb : public ::google::protobuf::Message {
 public:
  stReqDrawInviteRewardCb();
  virtual ~stReqDrawInviteRewardCb();

  stReqDrawInviteRewardCb(const stReqDrawInviteRewardCb& from);

  inline stReqDrawInviteRewardCb& operator=(const stReqDrawInviteRewardCb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawInviteRewardCb& default_instance();

  void Swap(stReqDrawInviteRewardCb* other);

  // implements Message ----------------------------------------------

  stReqDrawInviteRewardCb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawInviteRewardCb& from);
  void MergeFrom(const stReqDrawInviteRewardCb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawInviteRewardCb_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawInviteRewardCb_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawInviteRewardCb_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawInviteRewardCb_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawInviteRewardCb_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawInviteRewardCb_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawInviteRewardCb_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawInviteRewardCb_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawInviteRewardCb_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawInviteRewardCb_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawInviteRewardCb_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawInviteRewardCb_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawInviteRewardCb_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawInviteRewardCb_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawInviteRewardCb_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawInviteRewardCb_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawInviteRewardCb_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawInviteRewardCb_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bool res = 3;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 3;
  inline bool res() const;
  inline void set_res(bool value);

  // optional string account = 4;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 4;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:Global.stReqDrawInviteRewardCb)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 id_;
  ::std::string* account_;
  bool res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawInviteRewardCb* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawUseInviteReward : public ::google::protobuf::Message {
 public:
  stReqDrawUseInviteReward();
  virtual ~stReqDrawUseInviteReward();

  stReqDrawUseInviteReward(const stReqDrawUseInviteReward& from);

  inline stReqDrawUseInviteReward& operator=(const stReqDrawUseInviteReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawUseInviteReward& default_instance();

  void Swap(stReqDrawUseInviteReward* other);

  // implements Message ----------------------------------------------

  stReqDrawUseInviteReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawUseInviteReward& from);
  void MergeFrom(const stReqDrawUseInviteReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawUseInviteReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawUseInviteReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawUseInviteReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawUseInviteReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawUseInviteReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawUseInviteReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawUseInviteReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawUseInviteReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawUseInviteReward_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawUseInviteReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawUseInviteReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawUseInviteReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawUseInviteReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawUseInviteReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawUseInviteReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawUseInviteReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawUseInviteReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawUseInviteReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 boxId = 2;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 2;
  inline ::google::protobuf::uint32 boxid() const;
  inline void set_boxid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqDrawUseInviteReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawUseInviteReward* default_instance_;
};
// -------------------------------------------------------------------

class stRoleInfo : public ::google::protobuf::Message {
 public:
  stRoleInfo();
  virtual ~stRoleInfo();

  stRoleInfo(const stRoleInfo& from);

  inline stRoleInfo& operator=(const stRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRoleInfo& default_instance();

  void Swap(stRoleInfo* other);

  // implements Message ----------------------------------------------

  stRoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRoleInfo& from);
  void MergeFrom(const stRoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRoleInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRoleInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRoleInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRoleInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRoleInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRoleInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRoleInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRoleInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRoleInfo_ProtoModID_Parse(name, value);
  }

  typedef stRoleInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRoleInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRoleInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRoleInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRoleInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRoleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRoleInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRoleInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRoleInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 dataSize = 2;
  inline bool has_datasize() const;
  inline void clear_datasize();
  static const int kDataSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 datasize() const;
  inline void set_datasize(::google::protobuf::uint32 value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 normalServerID = 4;
  inline bool has_normalserverid() const;
  inline void clear_normalserverid();
  static const int kNormalServerIDFieldNumber = 4;
  inline ::google::protobuf::uint32 normalserverid() const;
  inline void set_normalserverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stRoleInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_datasize();
  inline void clear_has_datasize();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_normalserverid();
  inline void clear_has_normalserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 datasize_;
  ::std::string* data_;
  ::google::protobuf::uint32 normalserverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class stHeroLeagueEnterCopyMap : public ::google::protobuf::Message {
 public:
  stHeroLeagueEnterCopyMap();
  virtual ~stHeroLeagueEnterCopyMap();

  stHeroLeagueEnterCopyMap(const stHeroLeagueEnterCopyMap& from);

  inline stHeroLeagueEnterCopyMap& operator=(const stHeroLeagueEnterCopyMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHeroLeagueEnterCopyMap& default_instance();

  void Swap(stHeroLeagueEnterCopyMap* other);

  // implements Message ----------------------------------------------

  stHeroLeagueEnterCopyMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHeroLeagueEnterCopyMap& from);
  void MergeFrom(const stHeroLeagueEnterCopyMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHeroLeagueEnterCopyMap_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHeroLeagueEnterCopyMap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHeroLeagueEnterCopyMap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHeroLeagueEnterCopyMap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHeroLeagueEnterCopyMap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHeroLeagueEnterCopyMap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHeroLeagueEnterCopyMap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHeroLeagueEnterCopyMap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHeroLeagueEnterCopyMap_ProtoModID_Parse(name, value);
  }

  typedef stHeroLeagueEnterCopyMap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHeroLeagueEnterCopyMap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHeroLeagueEnterCopyMap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHeroLeagueEnterCopyMap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHeroLeagueEnterCopyMap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHeroLeagueEnterCopyMap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHeroLeagueEnterCopyMap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHeroLeagueEnterCopyMap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHeroLeagueEnterCopyMap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 memberIDs = 1;
  inline int memberids_size() const;
  inline void clear_memberids();
  static const int kMemberIDsFieldNumber = 1;
  inline ::google::protobuf::uint32 memberids(int index) const;
  inline void set_memberids(int index, ::google::protobuf::uint32 value);
  inline void add_memberids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      memberids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_memberids();

  // @@protoc_insertion_point(class_scope:Global.stHeroLeagueEnterCopyMap)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > memberids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stHeroLeagueEnterCopyMap* default_instance_;
};
// -------------------------------------------------------------------

class stHeroLeaguePkWithRobot : public ::google::protobuf::Message {
 public:
  stHeroLeaguePkWithRobot();
  virtual ~stHeroLeaguePkWithRobot();

  stHeroLeaguePkWithRobot(const stHeroLeaguePkWithRobot& from);

  inline stHeroLeaguePkWithRobot& operator=(const stHeroLeaguePkWithRobot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHeroLeaguePkWithRobot& default_instance();

  void Swap(stHeroLeaguePkWithRobot* other);

  // implements Message ----------------------------------------------

  stHeroLeaguePkWithRobot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHeroLeaguePkWithRobot& from);
  void MergeFrom(const stHeroLeaguePkWithRobot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHeroLeaguePkWithRobot_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHeroLeaguePkWithRobot_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHeroLeaguePkWithRobot_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHeroLeaguePkWithRobot_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHeroLeaguePkWithRobot_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHeroLeaguePkWithRobot_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHeroLeaguePkWithRobot_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHeroLeaguePkWithRobot_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHeroLeaguePkWithRobot_ProtoModID_Parse(name, value);
  }

  typedef stHeroLeaguePkWithRobot_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHeroLeaguePkWithRobot_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHeroLeaguePkWithRobot_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHeroLeaguePkWithRobot_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHeroLeaguePkWithRobot_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHeroLeaguePkWithRobot_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHeroLeaguePkWithRobot_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHeroLeaguePkWithRobot_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHeroLeaguePkWithRobot_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 robotGroup = 2;
  inline bool has_robotgroup() const;
  inline void clear_robotgroup();
  static const int kRobotGroupFieldNumber = 2;
  inline ::google::protobuf::uint32 robotgroup() const;
  inline void set_robotgroup(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stHeroLeaguePkWithRobot)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_robotgroup();
  inline void clear_has_robotgroup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 robotgroup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stHeroLeaguePkWithRobot* default_instance_;
};
// -------------------------------------------------------------------

class stReqHeroLeagueCheck : public ::google::protobuf::Message {
 public:
  stReqHeroLeagueCheck();
  virtual ~stReqHeroLeagueCheck();

  stReqHeroLeagueCheck(const stReqHeroLeagueCheck& from);

  inline stReqHeroLeagueCheck& operator=(const stReqHeroLeagueCheck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqHeroLeagueCheck& default_instance();

  void Swap(stReqHeroLeagueCheck* other);

  // implements Message ----------------------------------------------

  stReqHeroLeagueCheck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqHeroLeagueCheck& from);
  void MergeFrom(const stReqHeroLeagueCheck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqHeroLeagueCheck_eResult eResult;
  static const eResult eSuccess = stReqHeroLeagueCheck_eResult_eSuccess;
  static const eResult eRegister_Num_Lack = stReqHeroLeagueCheck_eResult_eRegister_Num_Lack;
  static inline bool eResult_IsValid(int value) {
    return stReqHeroLeagueCheck_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stReqHeroLeagueCheck_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stReqHeroLeagueCheck_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stReqHeroLeagueCheck_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stReqHeroLeagueCheck_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stReqHeroLeagueCheck_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stReqHeroLeagueCheck_eResult_Parse(name, value);
  }

  typedef stReqHeroLeagueCheck_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqHeroLeagueCheck_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqHeroLeagueCheck_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqHeroLeagueCheck_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqHeroLeagueCheck_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqHeroLeagueCheck_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqHeroLeagueCheck_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqHeroLeagueCheck_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqHeroLeagueCheck_ProtoModID_Parse(name, value);
  }

  typedef stReqHeroLeagueCheck_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqHeroLeagueCheck_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqHeroLeagueCheck_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqHeroLeagueCheck_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqHeroLeagueCheck_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqHeroLeagueCheck_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqHeroLeagueCheck_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqHeroLeagueCheck_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqHeroLeagueCheck_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.stReqHeroLeagueCheck.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Global::stReqHeroLeagueCheck_eResult result() const;
  inline void set_result(::Global::stReqHeroLeagueCheck_eResult value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqHeroLeagueCheck)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqHeroLeagueCheck* default_instance_;
};
// -------------------------------------------------------------------

class stHeroLeagueMatch : public ::google::protobuf::Message {
 public:
  stHeroLeagueMatch();
  virtual ~stHeroLeagueMatch();

  stHeroLeagueMatch(const stHeroLeagueMatch& from);

  inline stHeroLeagueMatch& operator=(const stHeroLeagueMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHeroLeagueMatch& default_instance();

  void Swap(stHeroLeagueMatch* other);

  // implements Message ----------------------------------------------

  stHeroLeagueMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHeroLeagueMatch& from);
  void MergeFrom(const stHeroLeagueMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHeroLeagueMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHeroLeagueMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHeroLeagueMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHeroLeagueMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHeroLeagueMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHeroLeagueMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHeroLeagueMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHeroLeagueMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHeroLeagueMatch_ProtoModID_Parse(name, value);
  }

  typedef stHeroLeagueMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHeroLeagueMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHeroLeagueMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHeroLeagueMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHeroLeagueMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHeroLeagueMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHeroLeagueMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHeroLeagueMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHeroLeagueMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stHeroLeagueMatch)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stHeroLeagueMatch* default_instance_;
};
// -------------------------------------------------------------------

class stPubRoleInfo : public ::google::protobuf::Message {
 public:
  stPubRoleInfo();
  virtual ~stPubRoleInfo();

  stPubRoleInfo(const stPubRoleInfo& from);

  inline stPubRoleInfo& operator=(const stPubRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPubRoleInfo& default_instance();

  void Swap(stPubRoleInfo* other);

  // implements Message ----------------------------------------------

  stPubRoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPubRoleInfo& from);
  void MergeFrom(const stPubRoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 pubCharID = 2;
  inline bool has_pubcharid() const;
  inline void clear_pubcharid();
  static const int kPubCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 pubcharid() const;
  inline void set_pubcharid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 3;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 6;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 6;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 job = 7;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 7;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 8;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 8;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 9;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 9;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 pubServerIndex = 10;
  inline bool has_pubserverindex() const;
  inline void clear_pubserverindex();
  static const int kPubServerIndexFieldNumber = 10;
  inline ::google::protobuf::uint32 pubserverindex() const;
  inline void set_pubserverindex(::google::protobuf::uint32 value);

  // optional uint32 score = 11;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 11;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional bool winOrLoss = 12;
  inline bool has_winorloss() const;
  inline void clear_winorloss();
  static const int kWinOrLossFieldNumber = 12;
  inline bool winorloss() const;
  inline void set_winorloss(bool value);

  // optional uint32 photoID = 13;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 13;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stPubRoleInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_pubcharid();
  inline void clear_has_pubcharid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_pubserverindex();
  inline void clear_has_pubserverindex();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_winorloss();
  inline void clear_has_winorloss();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 pubcharid_;
  ::std::string* name_;
  ::google::protobuf::uint32 areacode_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 pubserverindex_;
  ::google::protobuf::uint32 score_;
  bool winorloss_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stPubRoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class stHeroLeagueResult : public ::google::protobuf::Message {
 public:
  stHeroLeagueResult();
  virtual ~stHeroLeagueResult();

  stHeroLeagueResult(const stHeroLeagueResult& from);

  inline stHeroLeagueResult& operator=(const stHeroLeagueResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHeroLeagueResult& default_instance();

  void Swap(stHeroLeagueResult* other);

  // implements Message ----------------------------------------------

  stHeroLeagueResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHeroLeagueResult& from);
  void MergeFrom(const stHeroLeagueResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHeroLeagueResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHeroLeagueResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHeroLeagueResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHeroLeagueResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHeroLeagueResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHeroLeagueResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHeroLeagueResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHeroLeagueResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHeroLeagueResult_ProtoModID_Parse(name, value);
  }

  typedef stHeroLeagueResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHeroLeagueResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHeroLeagueResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHeroLeagueResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHeroLeagueResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHeroLeagueResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHeroLeagueResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHeroLeagueResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHeroLeagueResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.stPubRoleInfo user1 = 1;
  inline bool has_user1() const;
  inline void clear_user1();
  static const int kUser1FieldNumber = 1;
  inline const ::Global::stPubRoleInfo& user1() const;
  inline ::Global::stPubRoleInfo* mutable_user1();
  inline ::Global::stPubRoleInfo* release_user1();
  inline void set_allocated_user1(::Global::stPubRoleInfo* user1);

  // optional .Global.stPubRoleInfo user2 = 2;
  inline bool has_user2() const;
  inline void clear_user2();
  static const int kUser2FieldNumber = 2;
  inline const ::Global::stPubRoleInfo& user2() const;
  inline ::Global::stPubRoleInfo* mutable_user2();
  inline ::Global::stPubRoleInfo* release_user2();
  inline void set_allocated_user2(::Global::stPubRoleInfo* user2);

  // @@protoc_insertion_point(class_scope:Global.stHeroLeagueResult)
 private:
  inline void set_has_user1();
  inline void clear_has_user1();
  inline void set_has_user2();
  inline void clear_has_user2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Global::stPubRoleInfo* user1_;
  ::Global::stPubRoleInfo* user2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stHeroLeagueResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynRoleList : public ::google::protobuf::Message {
 public:
  stSynRoleList();
  virtual ~stSynRoleList();

  stSynRoleList(const stSynRoleList& from);

  inline stSynRoleList& operator=(const stSynRoleList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRoleList& default_instance();

  void Swap(stSynRoleList* other);

  // implements Message ----------------------------------------------

  stSynRoleList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRoleList& from);
  void MergeFrom(const stSynRoleList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynRoleList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynRoleList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynRoleList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynRoleList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynRoleList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynRoleList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynRoleList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynRoleList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynRoleList_ProtoModID_Parse(name, value);
  }

  typedef stSynRoleList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynRoleList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynRoleList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynRoleList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynRoleList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynRoleList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynRoleList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynRoleList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynRoleList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 tag = 1;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 1;
  inline ::google::protobuf::uint32 tag() const;
  inline void set_tag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynRoleList)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynRoleList* default_instance_;
};
// -------------------------------------------------------------------

class stTeam : public ::google::protobuf::Message {
 public:
  stTeam();
  virtual ~stTeam();

  stTeam(const stTeam& from);

  inline stTeam& operator=(const stTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTeam& default_instance();

  void Swap(stTeam* other);

  // implements Message ----------------------------------------------

  stTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTeam& from);
  void MergeFrom(const stTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Global.stPubRoleInfo user1 = 1;
  inline bool has_user1() const;
  inline void clear_user1();
  static const int kUser1FieldNumber = 1;
  inline const ::Global::stPubRoleInfo& user1() const;
  inline ::Global::stPubRoleInfo* mutable_user1();
  inline ::Global::stPubRoleInfo* release_user1();
  inline void set_allocated_user1(::Global::stPubRoleInfo* user1);

  // optional .Global.stPubRoleInfo user2 = 2;
  inline bool has_user2() const;
  inline void clear_user2();
  static const int kUser2FieldNumber = 2;
  inline const ::Global::stPubRoleInfo& user2() const;
  inline ::Global::stPubRoleInfo* mutable_user2();
  inline ::Global::stPubRoleInfo* release_user2();
  inline void set_allocated_user2(::Global::stPubRoleInfo* user2);

  // @@protoc_insertion_point(class_scope:Global.stTeam)
 private:
  inline void set_has_user1();
  inline void clear_has_user1();
  inline void set_has_user2();
  inline void clear_has_user2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Global::stPubRoleInfo* user1_;
  ::Global::stPubRoleInfo* user2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stTeam* default_instance_;
};
// -------------------------------------------------------------------

class stSynRoleListResult : public ::google::protobuf::Message {
 public:
  stSynRoleListResult();
  virtual ~stSynRoleListResult();

  stSynRoleListResult(const stSynRoleListResult& from);

  inline stSynRoleListResult& operator=(const stSynRoleListResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRoleListResult& default_instance();

  void Swap(stSynRoleListResult* other);

  // implements Message ----------------------------------------------

  stSynRoleListResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRoleListResult& from);
  void MergeFrom(const stSynRoleListResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynRoleListResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynRoleListResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynRoleListResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynRoleListResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynRoleListResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynRoleListResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynRoleListResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynRoleListResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynRoleListResult_ProtoModID_Parse(name, value);
  }

  typedef stSynRoleListResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynRoleListResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynRoleListResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynRoleListResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynRoleListResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynRoleListResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynRoleListResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynRoleListResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynRoleListResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stTeam team = 1;
  inline int team_size() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline const ::Global::stTeam& team(int index) const;
  inline ::Global::stTeam* mutable_team(int index);
  inline ::Global::stTeam* add_team();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stTeam >&
      team() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stTeam >*
      mutable_team();

  // repeated .Global.stPubRoleInfo charIDS = 2;
  inline int charids_size() const;
  inline void clear_charids();
  static const int kCharIDSFieldNumber = 2;
  inline const ::Global::stPubRoleInfo& charids(int index) const;
  inline ::Global::stPubRoleInfo* mutable_charids(int index);
  inline ::Global::stPubRoleInfo* add_charids();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stPubRoleInfo >&
      charids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stPubRoleInfo >*
      mutable_charids();

  // optional bool isFinal = 3;
  inline bool has_isfinal() const;
  inline void clear_isfinal();
  static const int kIsFinalFieldNumber = 3;
  inline bool isfinal() const;
  inline void set_isfinal(bool value);

  // @@protoc_insertion_point(class_scope:Global.stSynRoleListResult)
 private:
  inline void set_has_isfinal();
  inline void clear_has_isfinal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stTeam > team_;
  ::google::protobuf::RepeatedPtrField< ::Global::stPubRoleInfo > charids_;
  bool isfinal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynRoleListResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynChampionInfo : public ::google::protobuf::Message {
 public:
  stSynChampionInfo();
  virtual ~stSynChampionInfo();

  stSynChampionInfo(const stSynChampionInfo& from);

  inline stSynChampionInfo& operator=(const stSynChampionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynChampionInfo& default_instance();

  void Swap(stSynChampionInfo* other);

  // implements Message ----------------------------------------------

  stSynChampionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynChampionInfo& from);
  void MergeFrom(const stSynChampionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 areaCode = 3;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional bool leader = 7;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 7;
  inline bool leader() const;
  inline void set_leader(bool value);

  // optional uint32 battlePower = 8;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 8;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 pos = 9;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 9;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 headID = 10;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 10;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 11;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 11;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 12;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 12;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 13;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 13;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 14;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 14;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 15;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 15;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 16;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 16;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 17;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 17;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 18;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 18;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 19;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 19;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 20;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 20;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 21;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 21;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 effectID = 22;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 22;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 23;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 23;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // optional uint32 photoID = 24;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 24;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynChampionInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_leader();
  inline void clear_has_leader();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 areacode_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  bool leader_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynChampionInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqSynChampionInfo : public ::google::protobuf::Message {
 public:
  stReqSynChampionInfo();
  virtual ~stReqSynChampionInfo();

  stReqSynChampionInfo(const stReqSynChampionInfo& from);

  inline stReqSynChampionInfo& operator=(const stReqSynChampionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSynChampionInfo& default_instance();

  void Swap(stReqSynChampionInfo* other);

  // implements Message ----------------------------------------------

  stReqSynChampionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSynChampionInfo& from);
  void MergeFrom(const stReqSynChampionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSynChampionInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSynChampionInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSynChampionInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSynChampionInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSynChampionInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSynChampionInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSynChampionInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSynChampionInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSynChampionInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqSynChampionInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSynChampionInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSynChampionInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSynChampionInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSynChampionInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSynChampionInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSynChampionInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSynChampionInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSynChampionInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.stSynChampionInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Global::stSynChampionInfo& info() const;
  inline ::Global::stSynChampionInfo* mutable_info();
  inline ::Global::stSynChampionInfo* release_info();
  inline void set_allocated_info(::Global::stSynChampionInfo* info);

  // @@protoc_insertion_point(class_scope:Global.stReqSynChampionInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Global::stSynChampionInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqSynChampionInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqWorskip : public ::google::protobuf::Message {
 public:
  stReqWorskip();
  virtual ~stReqWorskip();

  stReqWorskip(const stReqWorskip& from);

  inline stReqWorskip& operator=(const stReqWorskip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqWorskip& default_instance();

  void Swap(stReqWorskip* other);

  // implements Message ----------------------------------------------

  stReqWorskip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqWorskip& from);
  void MergeFrom(const stReqWorskip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqWorskip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqWorskip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqWorskip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqWorskip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqWorskip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqWorskip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqWorskip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqWorskip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqWorskip_ProtoModID_Parse(name, value);
  }

  typedef stReqWorskip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqWorskip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqWorskip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqWorskip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqWorskip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqWorskip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqWorskip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqWorskip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqWorskip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqWorskip)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqWorskip* default_instance_;
};
// -------------------------------------------------------------------

class stWorskipResult : public ::google::protobuf::Message {
 public:
  stWorskipResult();
  virtual ~stWorskipResult();

  stWorskipResult(const stWorskipResult& from);

  inline stWorskipResult& operator=(const stWorskipResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stWorskipResult& default_instance();

  void Swap(stWorskipResult* other);

  // implements Message ----------------------------------------------

  stWorskipResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stWorskipResult& from);
  void MergeFrom(const stWorskipResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stWorskipResult_eResult eResult;
  static const eResult eInner_Error = stWorskipResult_eResult_eInner_Error;
  static const eResult eNoBody = stWorskipResult_eResult_eNoBody;
  static inline bool eResult_IsValid(int value) {
    return stWorskipResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stWorskipResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stWorskipResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stWorskipResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stWorskipResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stWorskipResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stWorskipResult_eResult_Parse(name, value);
  }

  typedef stWorskipResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stWorskipResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stWorskipResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stWorskipResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stWorskipResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stWorskipResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stWorskipResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stWorskipResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stWorskipResult_ProtoModID_Parse(name, value);
  }

  typedef stWorskipResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stWorskipResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stWorskipResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stWorskipResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stWorskipResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stWorskipResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stWorskipResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stWorskipResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stWorskipResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.stWorskipResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Global::stWorskipResult_eResult result() const;
  inline void set_result(::Global::stWorskipResult_eResult value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional bool isSameAreaCode = 3;
  inline bool has_issameareacode() const;
  inline void clear_issameareacode();
  static const int kIsSameAreaCodeFieldNumber = 3;
  inline bool issameareacode() const;
  inline void set_issameareacode(bool value);

  // @@protoc_insertion_point(class_scope:Global.stWorskipResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_issameareacode();
  inline void clear_has_issameareacode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 charid_;
  bool issameareacode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stWorskipResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRedPoint : public ::google::protobuf::Message {
 public:
  stReqRedPoint();
  virtual ~stReqRedPoint();

  stReqRedPoint(const stReqRedPoint& from);

  inline stReqRedPoint& operator=(const stReqRedPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRedPoint& default_instance();

  void Swap(stReqRedPoint* other);

  // implements Message ----------------------------------------------

  stReqRedPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRedPoint& from);
  void MergeFrom(const stReqRedPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRedPoint_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRedPoint_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRedPoint_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRedPoint_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRedPoint_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRedPoint_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRedPoint_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRedPoint_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRedPoint_ProtoModID_Parse(name, value);
  }

  typedef stReqRedPoint_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRedPoint_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRedPoint_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRedPoint_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRedPoint_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRedPoint_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRedPoint_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRedPoint_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRedPoint_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 pubCharID = 2;
  inline bool has_pubcharid() const;
  inline void clear_pubcharid();
  static const int kPubCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 pubcharid() const;
  inline void set_pubcharid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqRedPoint)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_pubcharid();
  inline void clear_has_pubcharid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 pubcharid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqRedPoint* default_instance_;
};
// -------------------------------------------------------------------

class stRedPointResult : public ::google::protobuf::Message {
 public:
  stRedPointResult();
  virtual ~stRedPointResult();

  stRedPointResult(const stRedPointResult& from);

  inline stRedPointResult& operator=(const stRedPointResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRedPointResult& default_instance();

  void Swap(stRedPointResult* other);

  // implements Message ----------------------------------------------

  stRedPointResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRedPointResult& from);
  void MergeFrom(const stRedPointResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRedPointResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRedPointResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRedPointResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRedPointResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRedPointResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRedPointResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRedPointResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRedPointResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRedPointResult_ProtoModID_Parse(name, value);
  }

  typedef stRedPointResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRedPointResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRedPointResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRedPointResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRedPointResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRedPointResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRedPointResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRedPointResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRedPointResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool isQualified = 1;
  inline bool has_isqualified() const;
  inline void clear_isqualified();
  static const int kIsQualifiedFieldNumber = 1;
  inline bool isqualified() const;
  inline void set_isqualified(bool value);

  // optional bool canWorship = 2;
  inline bool has_canworship() const;
  inline void clear_canworship();
  static const int kCanWorshipFieldNumber = 2;
  inline bool canworship() const;
  inline void set_canworship(bool value);

  // optional uint32 charID = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stRedPointResult)
 private:
  inline void set_has_isqualified();
  inline void clear_has_isqualified();
  inline void set_has_canworship();
  inline void clear_has_canworship();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isqualified_;
  bool canworship_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRedPointResult* default_instance_;
};
// -------------------------------------------------------------------

class stInterceptResultToGlobal : public ::google::protobuf::Message {
 public:
  stInterceptResultToGlobal();
  virtual ~stInterceptResultToGlobal();

  stInterceptResultToGlobal(const stInterceptResultToGlobal& from);

  inline stInterceptResultToGlobal& operator=(const stInterceptResultToGlobal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInterceptResultToGlobal& default_instance();

  void Swap(stInterceptResultToGlobal* other);

  // implements Message ----------------------------------------------

  stInterceptResultToGlobal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInterceptResultToGlobal& from);
  void MergeFrom(const stInterceptResultToGlobal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInterceptResultToGlobal_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInterceptResultToGlobal_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInterceptResultToGlobal_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInterceptResultToGlobal_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInterceptResultToGlobal_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInterceptResultToGlobal_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInterceptResultToGlobal_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInterceptResultToGlobal_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInterceptResultToGlobal_ProtoModID_Parse(name, value);
  }

  typedef stInterceptResultToGlobal_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInterceptResultToGlobal_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInterceptResultToGlobal_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInterceptResultToGlobal_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInterceptResultToGlobal_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInterceptResultToGlobal_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInterceptResultToGlobal_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInterceptResultToGlobal_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInterceptResultToGlobal_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional bool win = 2;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 2;
  inline bool win() const;
  inline void set_win(bool value);

  // @@protoc_insertion_point(class_scope:Global.stInterceptResultToGlobal)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_win();
  inline void clear_has_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  bool win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stInterceptResultToGlobal* default_instance_;
};
// -------------------------------------------------------------------

class stSynMemberInfo : public ::google::protobuf::Message {
 public:
  stSynMemberInfo();
  virtual ~stSynMemberInfo();

  stSynMemberInfo(const stSynMemberInfo& from);

  inline stSynMemberInfo& operator=(const stSynMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynMemberInfo& default_instance();

  void Swap(stSynMemberInfo* other);

  // implements Message ----------------------------------------------

  stSynMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynMemberInfo& from);
  void MergeFrom(const stSynMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional bool leader = 6;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 6;
  inline bool leader() const;
  inline void set_leader(bool value);

  // optional uint32 battlePower = 7;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 7;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 pos = 8;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 8;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 headID = 9;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 9;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 10;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 10;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 11;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 11;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 12;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 12;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 13;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 13;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 14;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 14;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 15;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 15;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 16;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 16;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 17;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 17;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 18;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 18;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 19;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 19;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 20;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 20;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 effectID = 21;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 21;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 22;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 22;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // optional uint32 fashionWingID = 23;
  inline bool has_fashionwingid() const;
  inline void clear_fashionwingid();
  static const int kFashionWingIDFieldNumber = 23;
  inline ::google::protobuf::uint32 fashionwingid() const;
  inline void set_fashionwingid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynMemberInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_leader();
  inline void clear_has_leader();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();
  inline void set_has_fashionwingid();
  inline void clear_has_fashionwingid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  bool leader_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;
  ::google::protobuf::uint32 fashionwingid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetRoomInfo : public ::google::protobuf::Message {
 public:
  stRetRoomInfo();
  virtual ~stRetRoomInfo();

  stRetRoomInfo(const stRetRoomInfo& from);

  inline stRetRoomInfo& operator=(const stRetRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRoomInfo& default_instance();

  void Swap(stRetRoomInfo* other);

  // implements Message ----------------------------------------------

  stRetRoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRoomInfo& from);
  void MergeFrom(const stRetRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRoomInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRoomInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRoomInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRoomInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRoomInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRoomInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRoomInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRoomInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRoomInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetRoomInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRoomInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRoomInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRoomInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRoomInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRoomInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRoomInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRoomInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRoomInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 copyMapID = 2;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopyMapIDFieldNumber = 2;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // repeated .Global.stSynMemberInfo members = 3;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 3;
  inline const ::Global::stSynMemberInfo& members(int index) const;
  inline ::Global::stSynMemberInfo* mutable_members(int index);
  inline ::Global::stSynMemberInfo* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stSynMemberInfo >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stSynMemberInfo >*
      mutable_members();

  // optional uint32 teamID = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 4;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stRetRoomInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_copymapid();
  inline void clear_has_copymapid();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 copymapid_;
  ::google::protobuf::RepeatedPtrField< ::Global::stSynMemberInfo > members_;
  ::google::protobuf::uint32 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetAddTeamMember : public ::google::protobuf::Message {
 public:
  stRetAddTeamMember();
  virtual ~stRetAddTeamMember();

  stRetAddTeamMember(const stRetAddTeamMember& from);

  inline stRetAddTeamMember& operator=(const stRetAddTeamMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetAddTeamMember& default_instance();

  void Swap(stRetAddTeamMember* other);

  // implements Message ----------------------------------------------

  stRetAddTeamMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetAddTeamMember& from);
  void MergeFrom(const stRetAddTeamMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetAddTeamMember_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetAddTeamMember_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetAddTeamMember_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetAddTeamMember_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetAddTeamMember_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetAddTeamMember_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetAddTeamMember_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetAddTeamMember_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetAddTeamMember_ProtoModID_Parse(name, value);
  }

  typedef stRetAddTeamMember_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetAddTeamMember_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetAddTeamMember_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetAddTeamMember_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetAddTeamMember_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetAddTeamMember_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetAddTeamMember_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetAddTeamMember_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetAddTeamMember_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 charID = 1;
  inline int charid_size() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid(int index) const;
  inline void set_charid(int index, ::google::protobuf::uint32 value);
  inline void add_charid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      charid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_charid();

  // optional uint32 exceptID = 2;
  inline bool has_exceptid() const;
  inline void clear_exceptid();
  static const int kExceptIDFieldNumber = 2;
  inline ::google::protobuf::uint32 exceptid() const;
  inline void set_exceptid(::google::protobuf::uint32 value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional .Global.stSynMemberInfo memberInfo = 4;
  inline bool has_memberinfo() const;
  inline void clear_memberinfo();
  static const int kMemberInfoFieldNumber = 4;
  inline const ::Global::stSynMemberInfo& memberinfo() const;
  inline ::Global::stSynMemberInfo* mutable_memberinfo();
  inline ::Global::stSynMemberInfo* release_memberinfo();
  inline void set_allocated_memberinfo(::Global::stSynMemberInfo* memberinfo);

  // @@protoc_insertion_point(class_scope:Global.stRetAddTeamMember)
 private:
  inline void set_has_exceptid();
  inline void clear_has_exceptid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_memberinfo();
  inline void clear_has_memberinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > charid_;
  ::google::protobuf::uint32 exceptid_;
  ::google::protobuf::uint32 pos_;
  ::Global::stSynMemberInfo* memberinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetAddTeamMember* default_instance_;
};
// -------------------------------------------------------------------

class MarryObjInfo : public ::google::protobuf::Message {
 public:
  MarryObjInfo();
  virtual ~MarryObjInfo();

  MarryObjInfo(const MarryObjInfo& from);

  inline MarryObjInfo& operator=(const MarryObjInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryObjInfo& default_instance();

  void Swap(MarryObjInfo* other);

  // implements Message ----------------------------------------------

  MarryObjInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryObjInfo& from);
  void MergeFrom(const MarryObjInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 6;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 6;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 headID = 7;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 7;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 8;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 8;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 9;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 9;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 10;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 10;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 11;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 11;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 12;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 12;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 13;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 13;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 14;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 14;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 15;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 15;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 16;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 16;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 17;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 17;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 18;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 18;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 effectID = 19;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 19;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 20;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 20;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // optional uint32 fashionWingID = 21;
  inline bool has_fashionwingid() const;
  inline void clear_fashionwingid();
  static const int kFashionWingIDFieldNumber = 21;
  inline ::google::protobuf::uint32 fashionwingid() const;
  inline void set_fashionwingid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.MarryObjInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();
  inline void set_has_fashionwingid();
  inline void clear_has_fashionwingid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;
  ::google::protobuf::uint32 fashionwingid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static MarryObjInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqPropose : public ::google::protobuf::Message {
 public:
  stReqPropose();
  virtual ~stReqPropose();

  stReqPropose(const stReqPropose& from);

  inline stReqPropose& operator=(const stReqPropose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqPropose& default_instance();

  void Swap(stReqPropose* other);

  // implements Message ----------------------------------------------

  stReqPropose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqPropose& from);
  void MergeFrom(const stReqPropose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqPropose_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqPropose_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqPropose_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqPropose_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqPropose_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqPropose_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqPropose_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqPropose_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqPropose_ProtoModID_Parse(name, value);
  }

  typedef stReqPropose_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqPropose_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqPropose_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqPropose_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqPropose_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqPropose_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqPropose_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqPropose_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqPropose_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id1 = 1;
  inline bool has_id1() const;
  inline void clear_id1();
  static const int kId1FieldNumber = 1;
  inline ::google::protobuf::uint32 id1() const;
  inline void set_id1(::google::protobuf::uint32 value);

  // optional uint32 id2 = 2;
  inline bool has_id2() const;
  inline void clear_id2();
  static const int kId2FieldNumber = 2;
  inline ::google::protobuf::uint32 id2() const;
  inline void set_id2(::google::protobuf::uint32 value);

  // optional .Global.MarryObjInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::Global::MarryObjInfo& info() const;
  inline ::Global::MarryObjInfo* mutable_info();
  inline ::Global::MarryObjInfo* release_info();
  inline void set_allocated_info(::Global::MarryObjInfo* info);

  // @@protoc_insertion_point(class_scope:Global.stReqPropose)
 private:
  inline void set_has_id1();
  inline void clear_has_id1();
  inline void set_has_id2();
  inline void clear_has_id2();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id1_;
  ::google::protobuf::uint32 id2_;
  ::Global::MarryObjInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqPropose* default_instance_;
};
// -------------------------------------------------------------------

class stReqAgreeMarry : public ::google::protobuf::Message {
 public:
  stReqAgreeMarry();
  virtual ~stReqAgreeMarry();

  stReqAgreeMarry(const stReqAgreeMarry& from);

  inline stReqAgreeMarry& operator=(const stReqAgreeMarry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAgreeMarry& default_instance();

  void Swap(stReqAgreeMarry* other);

  // implements Message ----------------------------------------------

  stReqAgreeMarry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAgreeMarry& from);
  void MergeFrom(const stReqAgreeMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAgreeMarry_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAgreeMarry_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAgreeMarry_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAgreeMarry_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAgreeMarry_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAgreeMarry_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAgreeMarry_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAgreeMarry_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAgreeMarry_ProtoModID_Parse(name, value);
  }

  typedef stReqAgreeMarry_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAgreeMarry_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAgreeMarry_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAgreeMarry_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAgreeMarry_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAgreeMarry_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAgreeMarry_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAgreeMarry_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAgreeMarry_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id1 = 1;
  inline bool has_id1() const;
  inline void clear_id1();
  static const int kId1FieldNumber = 1;
  inline ::google::protobuf::uint32 id1() const;
  inline void set_id1(::google::protobuf::uint32 value);

  // optional uint32 id2 = 2;
  inline bool has_id2() const;
  inline void clear_id2();
  static const int kId2FieldNumber = 2;
  inline ::google::protobuf::uint32 id2() const;
  inline void set_id2(::google::protobuf::uint32 value);

  // optional uint32 roomId = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional .Global.MarryObjInfo info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::Global::MarryObjInfo& info() const;
  inline ::Global::MarryObjInfo* mutable_info();
  inline ::Global::MarryObjInfo* release_info();
  inline void set_allocated_info(::Global::MarryObjInfo* info);

  // @@protoc_insertion_point(class_scope:Global.stReqAgreeMarry)
 private:
  inline void set_has_id1();
  inline void clear_has_id1();
  inline void set_has_id2();
  inline void clear_has_id2();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id1_;
  ::google::protobuf::uint32 id2_;
  ::Global::MarryObjInfo* info_;
  ::google::protobuf::uint32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqAgreeMarry* default_instance_;
};
// -------------------------------------------------------------------

class stReqQuitWedding : public ::google::protobuf::Message {
 public:
  stReqQuitWedding();
  virtual ~stReqQuitWedding();

  stReqQuitWedding(const stReqQuitWedding& from);

  inline stReqQuitWedding& operator=(const stReqQuitWedding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqQuitWedding& default_instance();

  void Swap(stReqQuitWedding* other);

  // implements Message ----------------------------------------------

  stReqQuitWedding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqQuitWedding& from);
  void MergeFrom(const stReqQuitWedding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqQuitWedding_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqQuitWedding_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqQuitWedding_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqQuitWedding_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqQuitWedding_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqQuitWedding_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqQuitWedding_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqQuitWedding_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqQuitWedding_ProtoModID_Parse(name, value);
  }

  typedef stReqQuitWedding_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqQuitWedding_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqQuitWedding_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqQuitWedding_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqQuitWedding_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqQuitWedding_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqQuitWedding_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqQuitWedding_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqQuitWedding_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 levelId = 2;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIdFieldNumber = 2;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // repeated uint32 id = 3;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:Global.stReqQuitWedding)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 levelid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqQuitWedding* default_instance_;
};
// -------------------------------------------------------------------

class stReqReEnterWedding : public ::google::protobuf::Message {
 public:
  stReqReEnterWedding();
  virtual ~stReqReEnterWedding();

  stReqReEnterWedding(const stReqReEnterWedding& from);

  inline stReqReEnterWedding& operator=(const stReqReEnterWedding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqReEnterWedding& default_instance();

  void Swap(stReqReEnterWedding* other);

  // implements Message ----------------------------------------------

  stReqReEnterWedding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqReEnterWedding& from);
  void MergeFrom(const stReqReEnterWedding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqReEnterWedding_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqReEnterWedding_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqReEnterWedding_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqReEnterWedding_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqReEnterWedding_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqReEnterWedding_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqReEnterWedding_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqReEnterWedding_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqReEnterWedding_ProtoModID_Parse(name, value);
  }

  typedef stReqReEnterWedding_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqReEnterWedding_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqReEnterWedding_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqReEnterWedding_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqReEnterWedding_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqReEnterWedding_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqReEnterWedding_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqReEnterWedding_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqReEnterWedding_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated uint32 id = 2;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // optional uint32 roomId = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqReEnterWedding)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqReEnterWedding* default_instance_;
};
// -------------------------------------------------------------------

class stReqBuyFireWork : public ::google::protobuf::Message {
 public:
  stReqBuyFireWork();
  virtual ~stReqBuyFireWork();

  stReqBuyFireWork(const stReqBuyFireWork& from);

  inline stReqBuyFireWork& operator=(const stReqBuyFireWork& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBuyFireWork& default_instance();

  void Swap(stReqBuyFireWork* other);

  // implements Message ----------------------------------------------

  stReqBuyFireWork* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBuyFireWork& from);
  void MergeFrom(const stReqBuyFireWork& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBuyFireWork_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBuyFireWork_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBuyFireWork_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBuyFireWork_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBuyFireWork_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBuyFireWork_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBuyFireWork_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBuyFireWork_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBuyFireWork_ProtoModID_Parse(name, value);
  }

  typedef stReqBuyFireWork_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBuyFireWork_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBuyFireWork_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBuyFireWork_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBuyFireWork_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBuyFireWork_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBuyFireWork_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBuyFireWork_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBuyFireWork_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqBuyFireWork)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqBuyFireWork* default_instance_;
};
// -------------------------------------------------------------------

class stReqAgreeInvite : public ::google::protobuf::Message {
 public:
  stReqAgreeInvite();
  virtual ~stReqAgreeInvite();

  stReqAgreeInvite(const stReqAgreeInvite& from);

  inline stReqAgreeInvite& operator=(const stReqAgreeInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAgreeInvite& default_instance();

  void Swap(stReqAgreeInvite* other);

  // implements Message ----------------------------------------------

  stReqAgreeInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAgreeInvite& from);
  void MergeFrom(const stReqAgreeInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAgreeInvite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAgreeInvite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAgreeInvite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAgreeInvite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAgreeInvite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAgreeInvite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAgreeInvite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAgreeInvite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAgreeInvite_ProtoModID_Parse(name, value);
  }

  typedef stReqAgreeInvite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAgreeInvite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAgreeInvite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAgreeInvite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAgreeInvite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAgreeInvite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAgreeInvite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAgreeInvite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAgreeInvite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 roomId = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // repeated uint32 id = 3;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:Global.stReqAgreeInvite)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqAgreeInvite* default_instance_;
};
// -------------------------------------------------------------------

class stReqTakeCandy : public ::google::protobuf::Message {
 public:
  stReqTakeCandy();
  virtual ~stReqTakeCandy();

  stReqTakeCandy(const stReqTakeCandy& from);

  inline stReqTakeCandy& operator=(const stReqTakeCandy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqTakeCandy& default_instance();

  void Swap(stReqTakeCandy* other);

  // implements Message ----------------------------------------------

  stReqTakeCandy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqTakeCandy& from);
  void MergeFrom(const stReqTakeCandy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqTakeCandy_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqTakeCandy_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqTakeCandy_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqTakeCandy_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqTakeCandy_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqTakeCandy_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqTakeCandy_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqTakeCandy_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqTakeCandy_ProtoModID_Parse(name, value);
  }

  typedef stReqTakeCandy_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqTakeCandy_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqTakeCandy_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqTakeCandy_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqTakeCandy_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqTakeCandy_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqTakeCandy_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqTakeCandy_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqTakeCandy_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqTakeCandy)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqTakeCandy* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyCoupleMarry : public ::google::protobuf::Message {
 public:
  stNotifyCoupleMarry();
  virtual ~stNotifyCoupleMarry();

  stNotifyCoupleMarry(const stNotifyCoupleMarry& from);

  inline stNotifyCoupleMarry& operator=(const stNotifyCoupleMarry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyCoupleMarry& default_instance();

  void Swap(stNotifyCoupleMarry* other);

  // implements Message ----------------------------------------------

  stNotifyCoupleMarry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyCoupleMarry& from);
  void MergeFrom(const stNotifyCoupleMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyCoupleMarry_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyCoupleMarry_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyCoupleMarry_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyCoupleMarry_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyCoupleMarry_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyCoupleMarry_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyCoupleMarry_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyCoupleMarry_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyCoupleMarry_ProtoModID_Parse(name, value);
  }

  typedef stNotifyCoupleMarry_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyCoupleMarry_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyCoupleMarry_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyCoupleMarry_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyCoupleMarry_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyCoupleMarry_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyCoupleMarry_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyCoupleMarry_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyCoupleMarry_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 husband = 1;
  inline bool has_husband() const;
  inline void clear_husband();
  static const int kHusbandFieldNumber = 1;
  inline ::google::protobuf::uint32 husband() const;
  inline void set_husband(::google::protobuf::uint32 value);

  // optional uint32 wife = 2;
  inline bool has_wife() const;
  inline void clear_wife();
  static const int kWifeFieldNumber = 2;
  inline ::google::protobuf::uint32 wife() const;
  inline void set_wife(::google::protobuf::uint32 value);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string husName = 4;
  inline bool has_husname() const;
  inline void clear_husname();
  static const int kHusNameFieldNumber = 4;
  inline const ::std::string& husname() const;
  inline void set_husname(const ::std::string& value);
  inline void set_husname(const char* value);
  inline void set_husname(const char* value, size_t size);
  inline ::std::string* mutable_husname();
  inline ::std::string* release_husname();
  inline void set_allocated_husname(::std::string* husname);

  // optional string wifeName = 5;
  inline bool has_wifename() const;
  inline void clear_wifename();
  static const int kWifeNameFieldNumber = 5;
  inline const ::std::string& wifename() const;
  inline void set_wifename(const ::std::string& value);
  inline void set_wifename(const char* value);
  inline void set_wifename(const char* value, size_t size);
  inline ::std::string* mutable_wifename();
  inline ::std::string* release_wifename();
  inline void set_allocated_wifename(::std::string* wifename);

  // @@protoc_insertion_point(class_scope:Global.stNotifyCoupleMarry)
 private:
  inline void set_has_husband();
  inline void clear_has_husband();
  inline void set_has_wife();
  inline void clear_has_wife();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_husname();
  inline void clear_has_husname();
  inline void set_has_wifename();
  inline void clear_has_wifename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 husband_;
  ::google::protobuf::uint32 wife_;
  ::std::string* husname_;
  ::std::string* wifename_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyCoupleMarry* default_instance_;
};
// -------------------------------------------------------------------

class stSendWeedingRing : public ::google::protobuf::Message {
 public:
  stSendWeedingRing();
  virtual ~stSendWeedingRing();

  stSendWeedingRing(const stSendWeedingRing& from);

  inline stSendWeedingRing& operator=(const stSendWeedingRing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendWeedingRing& default_instance();

  void Swap(stSendWeedingRing* other);

  // implements Message ----------------------------------------------

  stSendWeedingRing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendWeedingRing& from);
  void MergeFrom(const stSendWeedingRing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendWeedingRing_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendWeedingRing_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendWeedingRing_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendWeedingRing_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendWeedingRing_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendWeedingRing_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendWeedingRing_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendWeedingRing_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendWeedingRing_ProtoModID_Parse(name, value);
  }

  typedef stSendWeedingRing_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendWeedingRing_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendWeedingRing_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendWeedingRing_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendWeedingRing_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendWeedingRing_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendWeedingRing_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendWeedingRing_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendWeedingRing_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 roomId = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSendWeedingRing)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSendWeedingRing* default_instance_;
};
// -------------------------------------------------------------------

class stMarryInfoCb : public ::google::protobuf::Message {
 public:
  stMarryInfoCb();
  virtual ~stMarryInfoCb();

  stMarryInfoCb(const stMarryInfoCb& from);

  inline stMarryInfoCb& operator=(const stMarryInfoCb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMarryInfoCb& default_instance();

  void Swap(stMarryInfoCb* other);

  // implements Message ----------------------------------------------

  stMarryInfoCb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMarryInfoCb& from);
  void MergeFrom(const stMarryInfoCb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMarryInfoCb_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMarryInfoCb_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMarryInfoCb_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMarryInfoCb_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMarryInfoCb_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMarryInfoCb_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMarryInfoCb_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMarryInfoCb_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMarryInfoCb_ProtoModID_Parse(name, value);
  }

  typedef stMarryInfoCb_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMarryInfoCb_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMarryInfoCb_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMarryInfoCb_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMarryInfoCb_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMarryInfoCb_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMarryInfoCb_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMarryInfoCb_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMarryInfoCb_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 roomId = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stMarryInfoCb)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stMarryInfoCb* default_instance_;
};
// -------------------------------------------------------------------

class stUseFireWork : public ::google::protobuf::Message {
 public:
  stUseFireWork();
  virtual ~stUseFireWork();

  stUseFireWork(const stUseFireWork& from);

  inline stUseFireWork& operator=(const stUseFireWork& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUseFireWork& default_instance();

  void Swap(stUseFireWork* other);

  // implements Message ----------------------------------------------

  stUseFireWork* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUseFireWork& from);
  void MergeFrom(const stUseFireWork& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUseFireWork_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUseFireWork_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUseFireWork_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUseFireWork_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUseFireWork_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUseFireWork_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUseFireWork_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUseFireWork_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUseFireWork_ProtoModID_Parse(name, value);
  }

  typedef stUseFireWork_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUseFireWork_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUseFireWork_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUseFireWork_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUseFireWork_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUseFireWork_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUseFireWork_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUseFireWork_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUseFireWork_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // repeated uint32 id = 3;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:Global.stUseFireWork)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUseFireWork* default_instance_;
};
// -------------------------------------------------------------------

class stRetMarryInfoToCouple : public ::google::protobuf::Message {
 public:
  stRetMarryInfoToCouple();
  virtual ~stRetMarryInfoToCouple();

  stRetMarryInfoToCouple(const stRetMarryInfoToCouple& from);

  inline stRetMarryInfoToCouple& operator=(const stRetMarryInfoToCouple& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetMarryInfoToCouple& default_instance();

  void Swap(stRetMarryInfoToCouple* other);

  // implements Message ----------------------------------------------

  stRetMarryInfoToCouple* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetMarryInfoToCouple& from);
  void MergeFrom(const stRetMarryInfoToCouple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetMarryInfoToCouple_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetMarryInfoToCouple_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetMarryInfoToCouple_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetMarryInfoToCouple_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetMarryInfoToCouple_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetMarryInfoToCouple_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetMarryInfoToCouple_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetMarryInfoToCouple_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetMarryInfoToCouple_ProtoModID_Parse(name, value);
  }

  typedef stRetMarryInfoToCouple_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetMarryInfoToCouple_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetMarryInfoToCouple_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetMarryInfoToCouple_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetMarryInfoToCouple_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetMarryInfoToCouple_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetMarryInfoToCouple_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetMarryInfoToCouple_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetMarryInfoToCouple_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 husband = 1;
  inline bool has_husband() const;
  inline void clear_husband();
  static const int kHusbandFieldNumber = 1;
  inline ::google::protobuf::uint32 husband() const;
  inline void set_husband(::google::protobuf::uint32 value);

  // optional uint32 wife = 2;
  inline bool has_wife() const;
  inline void clear_wife();
  static const int kWifeFieldNumber = 2;
  inline ::google::protobuf::uint32 wife() const;
  inline void set_wife(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stRetMarryInfoToCouple)
 private:
  inline void set_has_husband();
  inline void clear_has_husband();
  inline void set_has_wife();
  inline void clear_has_wife();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 husband_;
  ::google::protobuf::uint32 wife_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetMarryInfoToCouple* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyCoupleMarryCb : public ::google::protobuf::Message {
 public:
  stNotifyCoupleMarryCb();
  virtual ~stNotifyCoupleMarryCb();

  stNotifyCoupleMarryCb(const stNotifyCoupleMarryCb& from);

  inline stNotifyCoupleMarryCb& operator=(const stNotifyCoupleMarryCb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyCoupleMarryCb& default_instance();

  void Swap(stNotifyCoupleMarryCb* other);

  // implements Message ----------------------------------------------

  stNotifyCoupleMarryCb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyCoupleMarryCb& from);
  void MergeFrom(const stNotifyCoupleMarryCb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyCoupleMarryCb_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyCoupleMarryCb_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyCoupleMarryCb_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyCoupleMarryCb_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyCoupleMarryCb_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyCoupleMarryCb_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyCoupleMarryCb_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyCoupleMarryCb_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyCoupleMarryCb_ProtoModID_Parse(name, value);
  }

  typedef stNotifyCoupleMarryCb_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyCoupleMarryCb_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyCoupleMarryCb_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyCoupleMarryCb_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyCoupleMarryCb_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyCoupleMarryCb_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyCoupleMarryCb_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyCoupleMarryCb_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyCoupleMarryCb_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 husband = 1;
  inline bool has_husband() const;
  inline void clear_husband();
  static const int kHusbandFieldNumber = 1;
  inline ::google::protobuf::uint32 husband() const;
  inline void set_husband(::google::protobuf::uint32 value);

  // optional uint32 wife = 2;
  inline bool has_wife() const;
  inline void clear_wife();
  static const int kWifeFieldNumber = 2;
  inline ::google::protobuf::uint32 wife() const;
  inline void set_wife(::google::protobuf::uint32 value);

  // optional uint32 roomId = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyCoupleMarryCb)
 private:
  inline void set_has_husband();
  inline void clear_has_husband();
  inline void set_has_wife();
  inline void clear_has_wife();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 husband_;
  ::google::protobuf::uint32 wife_;
  ::google::protobuf::uint32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyCoupleMarryCb* default_instance_;
};
// -------------------------------------------------------------------

class stRetForceDivorce : public ::google::protobuf::Message {
 public:
  stRetForceDivorce();
  virtual ~stRetForceDivorce();

  stRetForceDivorce(const stRetForceDivorce& from);

  inline stRetForceDivorce& operator=(const stRetForceDivorce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetForceDivorce& default_instance();

  void Swap(stRetForceDivorce* other);

  // implements Message ----------------------------------------------

  stRetForceDivorce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetForceDivorce& from);
  void MergeFrom(const stRetForceDivorce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetForceDivorce_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetForceDivorce_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetForceDivorce_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetForceDivorce_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetForceDivorce_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetForceDivorce_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetForceDivorce_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetForceDivorce_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetForceDivorce_ProtoModID_Parse(name, value);
  }

  typedef stRetForceDivorce_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetForceDivorce_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetForceDivorce_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetForceDivorce_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetForceDivorce_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetForceDivorce_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetForceDivorce_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetForceDivorce_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetForceDivorce_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 coupleA = 1;
  inline bool has_couplea() const;
  inline void clear_couplea();
  static const int kCoupleAFieldNumber = 1;
  inline ::google::protobuf::uint32 couplea() const;
  inline void set_couplea(::google::protobuf::uint32 value);

  // optional uint32 coupleB = 2;
  inline bool has_coupleb() const;
  inline void clear_coupleb();
  static const int kCoupleBFieldNumber = 2;
  inline ::google::protobuf::uint32 coupleb() const;
  inline void set_coupleb(::google::protobuf::uint32 value);

  // optional bool coupleOnline = 3;
  inline bool has_coupleonline() const;
  inline void clear_coupleonline();
  static const int kCoupleOnlineFieldNumber = 3;
  inline bool coupleonline() const;
  inline void set_coupleonline(bool value);

  // @@protoc_insertion_point(class_scope:Global.stRetForceDivorce)
 private:
  inline void set_has_couplea();
  inline void clear_has_couplea();
  inline void set_has_coupleb();
  inline void clear_has_coupleb();
  inline void set_has_coupleonline();
  inline void clear_has_coupleonline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 couplea_;
  ::google::protobuf::uint32 coupleb_;
  bool coupleonline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetForceDivorce* default_instance_;
};
// -------------------------------------------------------------------

class stRetForceDivorceCb : public ::google::protobuf::Message {
 public:
  stRetForceDivorceCb();
  virtual ~stRetForceDivorceCb();

  stRetForceDivorceCb(const stRetForceDivorceCb& from);

  inline stRetForceDivorceCb& operator=(const stRetForceDivorceCb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetForceDivorceCb& default_instance();

  void Swap(stRetForceDivorceCb* other);

  // implements Message ----------------------------------------------

  stRetForceDivorceCb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetForceDivorceCb& from);
  void MergeFrom(const stRetForceDivorceCb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetForceDivorceCb_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetForceDivorceCb_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetForceDivorceCb_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetForceDivorceCb_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetForceDivorceCb_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetForceDivorceCb_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetForceDivorceCb_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetForceDivorceCb_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetForceDivorceCb_ProtoModID_Parse(name, value);
  }

  typedef stRetForceDivorceCb_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetForceDivorceCb_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetForceDivorceCb_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetForceDivorceCb_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetForceDivorceCb_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetForceDivorceCb_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetForceDivorceCb_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetForceDivorceCb_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetForceDivorceCb_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // repeated uint32 coupleId = 2;
  inline int coupleid_size() const;
  inline void clear_coupleid();
  static const int kCoupleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 coupleid(int index) const;
  inline void set_coupleid(int index, ::google::protobuf::uint32 value);
  inline void add_coupleid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      coupleid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_coupleid();

  // @@protoc_insertion_point(class_scope:Global.stRetForceDivorceCb)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > coupleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetForceDivorceCb* default_instance_;
};
// -------------------------------------------------------------------

class stRetRejectDivorce : public ::google::protobuf::Message {
 public:
  stRetRejectDivorce();
  virtual ~stRetRejectDivorce();

  stRetRejectDivorce(const stRetRejectDivorce& from);

  inline stRetRejectDivorce& operator=(const stRetRejectDivorce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRejectDivorce& default_instance();

  void Swap(stRetRejectDivorce* other);

  // implements Message ----------------------------------------------

  stRetRejectDivorce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRejectDivorce& from);
  void MergeFrom(const stRetRejectDivorce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRejectDivorce_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRejectDivorce_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRejectDivorce_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRejectDivorce_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRejectDivorce_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRejectDivorce_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRejectDivorce_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRejectDivorce_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRejectDivorce_ProtoModID_Parse(name, value);
  }

  typedef stRetRejectDivorce_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRejectDivorce_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRejectDivorce_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRejectDivorce_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRejectDivorce_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRejectDivorce_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRejectDivorce_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRejectDivorce_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRejectDivorce_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 coupleId = 1;
  inline bool has_coupleid() const;
  inline void clear_coupleid();
  static const int kCoupleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 coupleid() const;
  inline void set_coupleid(::google::protobuf::uint32 value);

  // optional uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stRetRejectDivorce)
 private:
  inline void set_has_coupleid();
  inline void clear_has_coupleid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 coupleid_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetRejectDivorce* default_instance_;
};
// -------------------------------------------------------------------

class stRetDelUserOnlineMarryInfo : public ::google::protobuf::Message {
 public:
  stRetDelUserOnlineMarryInfo();
  virtual ~stRetDelUserOnlineMarryInfo();

  stRetDelUserOnlineMarryInfo(const stRetDelUserOnlineMarryInfo& from);

  inline stRetDelUserOnlineMarryInfo& operator=(const stRetDelUserOnlineMarryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDelUserOnlineMarryInfo& default_instance();

  void Swap(stRetDelUserOnlineMarryInfo* other);

  // implements Message ----------------------------------------------

  stRetDelUserOnlineMarryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDelUserOnlineMarryInfo& from);
  void MergeFrom(const stRetDelUserOnlineMarryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDelUserOnlineMarryInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDelUserOnlineMarryInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDelUserOnlineMarryInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDelUserOnlineMarryInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDelUserOnlineMarryInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDelUserOnlineMarryInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDelUserOnlineMarryInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDelUserOnlineMarryInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDelUserOnlineMarryInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetDelUserOnlineMarryInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDelUserOnlineMarryInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDelUserOnlineMarryInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDelUserOnlineMarryInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDelUserOnlineMarryInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDelUserOnlineMarryInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDelUserOnlineMarryInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDelUserOnlineMarryInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDelUserOnlineMarryInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stRetDelUserOnlineMarryInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetDelUserOnlineMarryInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqSynGuildBlackMarketLv : public ::google::protobuf::Message {
 public:
  stReqSynGuildBlackMarketLv();
  virtual ~stReqSynGuildBlackMarketLv();

  stReqSynGuildBlackMarketLv(const stReqSynGuildBlackMarketLv& from);

  inline stReqSynGuildBlackMarketLv& operator=(const stReqSynGuildBlackMarketLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSynGuildBlackMarketLv& default_instance();

  void Swap(stReqSynGuildBlackMarketLv* other);

  // implements Message ----------------------------------------------

  stReqSynGuildBlackMarketLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSynGuildBlackMarketLv& from);
  void MergeFrom(const stReqSynGuildBlackMarketLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSynGuildBlackMarketLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSynGuildBlackMarketLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSynGuildBlackMarketLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSynGuildBlackMarketLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSynGuildBlackMarketLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSynGuildBlackMarketLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSynGuildBlackMarketLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSynGuildBlackMarketLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSynGuildBlackMarketLv_ProtoModID_Parse(name, value);
  }

  typedef stReqSynGuildBlackMarketLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSynGuildBlackMarketLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSynGuildBlackMarketLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSynGuildBlackMarketLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSynGuildBlackMarketLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSynGuildBlackMarketLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSynGuildBlackMarketLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSynGuildBlackMarketLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSynGuildBlackMarketLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqSynGuildBlackMarketLv)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqSynGuildBlackMarketLv* default_instance_;
};
// -------------------------------------------------------------------

class stSynGuildBlackMarketLvResult : public ::google::protobuf::Message {
 public:
  stSynGuildBlackMarketLvResult();
  virtual ~stSynGuildBlackMarketLvResult();

  stSynGuildBlackMarketLvResult(const stSynGuildBlackMarketLvResult& from);

  inline stSynGuildBlackMarketLvResult& operator=(const stSynGuildBlackMarketLvResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynGuildBlackMarketLvResult& default_instance();

  void Swap(stSynGuildBlackMarketLvResult* other);

  // implements Message ----------------------------------------------

  stSynGuildBlackMarketLvResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynGuildBlackMarketLvResult& from);
  void MergeFrom(const stSynGuildBlackMarketLvResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynGuildBlackMarketLvResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynGuildBlackMarketLvResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynGuildBlackMarketLvResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynGuildBlackMarketLvResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynGuildBlackMarketLvResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynGuildBlackMarketLvResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynGuildBlackMarketLvResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynGuildBlackMarketLvResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynGuildBlackMarketLvResult_ProtoModID_Parse(name, value);
  }

  typedef stSynGuildBlackMarketLvResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynGuildBlackMarketLvResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynGuildBlackMarketLvResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynGuildBlackMarketLvResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynGuildBlackMarketLvResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynGuildBlackMarketLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynGuildBlackMarketLvResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynGuildBlackMarketLvResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynGuildBlackMarketLvResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynGuildBlackMarketLvResult)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynGuildBlackMarketLvResult* default_instance_;
};
// -------------------------------------------------------------------

class stGloryUserPart : public ::google::protobuf::Message {
 public:
  stGloryUserPart();
  virtual ~stGloryUserPart();

  stGloryUserPart(const stGloryUserPart& from);

  inline stGloryUserPart& operator=(const stGloryUserPart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGloryUserPart& default_instance();

  void Swap(stGloryUserPart* other);

  // implements Message ----------------------------------------------

  stGloryUserPart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGloryUserPart& from);
  void MergeFrom(const stGloryUserPart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 2;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 7;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 7;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 headID = 8;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 8;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 9;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 9;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 10;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 10;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 11;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 11;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 12;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 12;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 13;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 13;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 14;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 14;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 15;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 15;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 16;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 16;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 17;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 17;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 18;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 18;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 19;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 19;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 effectID = 20;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 20;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 21;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 21;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGloryUserPart)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 areacode_;
  ::std::string* name_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGloryUserPart* default_instance_;
};
// -------------------------------------------------------------------

class stGloryUserDetail : public ::google::protobuf::Message {
 public:
  stGloryUserDetail();
  virtual ~stGloryUserDetail();

  stGloryUserDetail(const stGloryUserDetail& from);

  inline stGloryUserDetail& operator=(const stGloryUserDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGloryUserDetail& default_instance();

  void Swap(stGloryUserDetail* other);

  // implements Message ----------------------------------------------

  stGloryUserDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGloryUserDetail& from);
  void MergeFrom(const stGloryUserDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 2;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 7;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 7;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 headID = 8;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 8;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 9;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 9;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 10;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 10;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 11;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 11;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 12;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 12;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 13;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 13;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 14;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 14;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 15;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 15;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 16;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 16;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 17;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 17;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 18;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 18;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 19;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 19;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 effectID = 20;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 20;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 21;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 21;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // optional uint32 killNum = 22;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 22;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional uint32 evenKillNum = 23;
  inline bool has_evenkillnum() const;
  inline void clear_evenkillnum();
  static const int kEvenKillNumFieldNumber = 23;
  inline ::google::protobuf::uint32 evenkillnum() const;
  inline void set_evenkillnum(::google::protobuf::uint32 value);

  // optional uint32 totalKillNum = 24;
  inline bool has_totalkillnum() const;
  inline void clear_totalkillnum();
  static const int kTotalKillNumFieldNumber = 24;
  inline ::google::protobuf::uint32 totalkillnum() const;
  inline void set_totalkillnum(::google::protobuf::uint32 value);

  // optional uint32 gloryVal = 25;
  inline bool has_gloryval() const;
  inline void clear_gloryval();
  static const int kGloryValFieldNumber = 25;
  inline ::google::protobuf::uint32 gloryval() const;
  inline void set_gloryval(::google::protobuf::uint32 value);

  // optional uint32 gloryActionTime = 26;
  inline bool has_gloryactiontime() const;
  inline void clear_gloryactiontime();
  static const int kGloryActionTimeFieldNumber = 26;
  inline ::google::protobuf::uint32 gloryactiontime() const;
  inline void set_gloryactiontime(::google::protobuf::uint32 value);

  // optional uint32 prostatedNum = 27;
  inline bool has_prostatednum() const;
  inline void clear_prostatednum();
  static const int kProstatedNumFieldNumber = 27;
  inline ::google::protobuf::uint32 prostatednum() const;
  inline void set_prostatednum(::google::protobuf::uint32 value);

  // optional uint32 prostateTime = 28;
  inline bool has_prostatetime() const;
  inline void clear_prostatetime();
  static const int kProstateTimeFieldNumber = 28;
  inline ::google::protobuf::uint32 prostatetime() const;
  inline void set_prostatetime(::google::protobuf::uint32 value);

  // optional uint32 normalId = 29;
  inline bool has_normalid() const;
  inline void clear_normalid();
  static const int kNormalIdFieldNumber = 29;
  inline ::google::protobuf::uint32 normalid() const;
  inline void set_normalid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGloryUserDetail)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_evenkillnum();
  inline void clear_has_evenkillnum();
  inline void set_has_totalkillnum();
  inline void clear_has_totalkillnum();
  inline void set_has_gloryval();
  inline void clear_has_gloryval();
  inline void set_has_gloryactiontime();
  inline void clear_has_gloryactiontime();
  inline void set_has_prostatednum();
  inline void clear_has_prostatednum();
  inline void set_has_prostatetime();
  inline void clear_has_prostatetime();
  inline void set_has_normalid();
  inline void clear_has_normalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 areacode_;
  ::std::string* name_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;
  ::google::protobuf::uint32 killnum_;
  ::google::protobuf::uint32 evenkillnum_;
  ::google::protobuf::uint32 totalkillnum_;
  ::google::protobuf::uint32 gloryval_;
  ::google::protobuf::uint32 gloryactiontime_;
  ::google::protobuf::uint32 prostatednum_;
  ::google::protobuf::uint32 prostatetime_;
  ::google::protobuf::uint32 normalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGloryUserDetail* default_instance_;
};
// -------------------------------------------------------------------

class stGloryUser : public ::google::protobuf::Message {
 public:
  stGloryUser();
  virtual ~stGloryUser();

  stGloryUser(const stGloryUser& from);

  inline stGloryUser& operator=(const stGloryUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGloryUser& default_instance();

  void Swap(stGloryUser* other);

  // implements Message ----------------------------------------------

  stGloryUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGloryUser& from);
  void MergeFrom(const stGloryUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 2;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 killNum = 4;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 4;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional uint32 evenKillNum = 5;
  inline bool has_evenkillnum() const;
  inline void clear_evenkillnum();
  static const int kEvenKillNumFieldNumber = 5;
  inline ::google::protobuf::uint32 evenkillnum() const;
  inline void set_evenkillnum(::google::protobuf::uint32 value);

  // optional uint32 totalKillNum = 6;
  inline bool has_totalkillnum() const;
  inline void clear_totalkillnum();
  static const int kTotalKillNumFieldNumber = 6;
  inline ::google::protobuf::uint32 totalkillnum() const;
  inline void set_totalkillnum(::google::protobuf::uint32 value);

  // optional uint32 gloryVal = 7;
  inline bool has_gloryval() const;
  inline void clear_gloryval();
  static const int kGloryValFieldNumber = 7;
  inline ::google::protobuf::uint32 gloryval() const;
  inline void set_gloryval(::google::protobuf::uint32 value);

  // optional uint32 gloryActionTime = 8;
  inline bool has_gloryactiontime() const;
  inline void clear_gloryactiontime();
  static const int kGloryActionTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 gloryactiontime() const;
  inline void set_gloryactiontime(::google::protobuf::uint32 value);

  // optional uint32 prostatedNum = 9;
  inline bool has_prostatednum() const;
  inline void clear_prostatednum();
  static const int kProstatedNumFieldNumber = 9;
  inline ::google::protobuf::uint32 prostatednum() const;
  inline void set_prostatednum(::google::protobuf::uint32 value);

  // optional uint32 prostateTime = 10;
  inline bool has_prostatetime() const;
  inline void clear_prostatetime();
  static const int kProstateTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 prostatetime() const;
  inline void set_prostatetime(::google::protobuf::uint32 value);

  // optional uint32 normalId = 11;
  inline bool has_normalid() const;
  inline void clear_normalid();
  static const int kNormalIdFieldNumber = 11;
  inline ::google::protobuf::uint32 normalid() const;
  inline void set_normalid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGloryUser)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_evenkillnum();
  inline void clear_has_evenkillnum();
  inline void set_has_totalkillnum();
  inline void clear_has_totalkillnum();
  inline void set_has_gloryval();
  inline void clear_has_gloryval();
  inline void set_has_gloryactiontime();
  inline void clear_has_gloryactiontime();
  inline void set_has_prostatednum();
  inline void clear_has_prostatednum();
  inline void set_has_prostatetime();
  inline void clear_has_prostatetime();
  inline void set_has_normalid();
  inline void clear_has_normalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 areacode_;
  ::std::string* name_;
  ::google::protobuf::uint32 killnum_;
  ::google::protobuf::uint32 evenkillnum_;
  ::google::protobuf::uint32 totalkillnum_;
  ::google::protobuf::uint32 gloryval_;
  ::google::protobuf::uint32 gloryactiontime_;
  ::google::protobuf::uint32 prostatednum_;
  ::google::protobuf::uint32 prostatetime_;
  ::google::protobuf::uint32 normalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGloryUser* default_instance_;
};
// -------------------------------------------------------------------

class stEnterResBattle : public ::google::protobuf::Message {
 public:
  stEnterResBattle();
  virtual ~stEnterResBattle();

  stEnterResBattle(const stEnterResBattle& from);

  inline stEnterResBattle& operator=(const stEnterResBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnterResBattle& default_instance();

  void Swap(stEnterResBattle* other);

  // implements Message ----------------------------------------------

  stEnterResBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnterResBattle& from);
  void MergeFrom(const stEnterResBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEnterResBattle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEnterResBattle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEnterResBattle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEnterResBattle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEnterResBattle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEnterResBattle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEnterResBattle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEnterResBattle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEnterResBattle_ProtoModID_Parse(name, value);
  }

  typedef stEnterResBattle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEnterResBattle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEnterResBattle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEnterResBattle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEnterResBattle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEnterResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEnterResBattle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEnterResBattle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEnterResBattle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 copyMapLevel = 2;
  inline bool has_copymaplevel() const;
  inline void clear_copymaplevel();
  static const int kCopyMapLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 copymaplevel() const;
  inline void set_copymaplevel(::google::protobuf::uint32 value);

  // optional uint32 guildId = 3;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 3;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional .Global.stGloryUser self = 4;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 4;
  inline const ::Global::stGloryUser& self() const;
  inline ::Global::stGloryUser* mutable_self();
  inline ::Global::stGloryUser* release_self();
  inline void set_allocated_self(::Global::stGloryUser* self);

  // @@protoc_insertion_point(class_scope:Global.stEnterResBattle)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_copymaplevel();
  inline void clear_has_copymaplevel();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_self();
  inline void clear_has_self();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 copymaplevel_;
  ::Global::stGloryUser* self_;
  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stEnterResBattle* default_instance_;
};
// -------------------------------------------------------------------

class stBroadResBattleInvite : public ::google::protobuf::Message {
 public:
  stBroadResBattleInvite();
  virtual ~stBroadResBattleInvite();

  stBroadResBattleInvite(const stBroadResBattleInvite& from);

  inline stBroadResBattleInvite& operator=(const stBroadResBattleInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBroadResBattleInvite& default_instance();

  void Swap(stBroadResBattleInvite* other);

  // implements Message ----------------------------------------------

  stBroadResBattleInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBroadResBattleInvite& from);
  void MergeFrom(const stBroadResBattleInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBroadResBattleInvite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBroadResBattleInvite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBroadResBattleInvite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBroadResBattleInvite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBroadResBattleInvite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBroadResBattleInvite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBroadResBattleInvite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBroadResBattleInvite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBroadResBattleInvite_ProtoModID_Parse(name, value);
  }

  typedef stBroadResBattleInvite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBroadResBattleInvite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBroadResBattleInvite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBroadResBattleInvite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBroadResBattleInvite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBroadResBattleInvite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBroadResBattleInvite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBroadResBattleInvite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBroadResBattleInvite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 guildId = 3;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 3;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 6;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 6;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 7;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 7;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 instanceLvl = 8;
  inline bool has_instancelvl() const;
  inline void clear_instancelvl();
  static const int kInstanceLvlFieldNumber = 8;
  inline ::google::protobuf::uint32 instancelvl() const;
  inline void set_instancelvl(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stBroadResBattleInvite)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_instancelvl();
  inline void clear_has_instancelvl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 instancelvl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stBroadResBattleInvite* default_instance_;
};
// -------------------------------------------------------------------

class stPubOffline : public ::google::protobuf::Message {
 public:
  stPubOffline();
  virtual ~stPubOffline();

  stPubOffline(const stPubOffline& from);

  inline stPubOffline& operator=(const stPubOffline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPubOffline& default_instance();

  void Swap(stPubOffline* other);

  // implements Message ----------------------------------------------

  stPubOffline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPubOffline& from);
  void MergeFrom(const stPubOffline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPubOffline_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPubOffline_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPubOffline_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPubOffline_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPubOffline_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPubOffline_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPubOffline_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPubOffline_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPubOffline_ProtoModID_Parse(name, value);
  }

  typedef stPubOffline_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPubOffline_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPubOffline_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPubOffline_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPubOffline_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPubOffline_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPubOffline_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPubOffline_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPubOffline_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Global.stPubOffline)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stPubOffline* default_instance_;
};
// -------------------------------------------------------------------

class stDiscoverConsume : public ::google::protobuf::Message {
 public:
  stDiscoverConsume();
  virtual ~stDiscoverConsume();

  stDiscoverConsume(const stDiscoverConsume& from);

  inline stDiscoverConsume& operator=(const stDiscoverConsume& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDiscoverConsume& default_instance();

  void Swap(stDiscoverConsume* other);

  // implements Message ----------------------------------------------

  stDiscoverConsume* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDiscoverConsume& from);
  void MergeFrom(const stDiscoverConsume& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDiscoverConsume_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDiscoverConsume_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDiscoverConsume_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDiscoverConsume_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDiscoverConsume_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDiscoverConsume_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDiscoverConsume_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDiscoverConsume_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDiscoverConsume_ProtoModID_Parse(name, value);
  }

  typedef stDiscoverConsume_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDiscoverConsume_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDiscoverConsume_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDiscoverConsume_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDiscoverConsume_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDiscoverConsume_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDiscoverConsume_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDiscoverConsume_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDiscoverConsume_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stDiscoverConsume)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDiscoverConsume* default_instance_;
};
// -------------------------------------------------------------------

class stSynCoupleInfo : public ::google::protobuf::Message {
 public:
  stSynCoupleInfo();
  virtual ~stSynCoupleInfo();

  stSynCoupleInfo(const stSynCoupleInfo& from);

  inline stSynCoupleInfo& operator=(const stSynCoupleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynCoupleInfo& default_instance();

  void Swap(stSynCoupleInfo* other);

  // implements Message ----------------------------------------------

  stSynCoupleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynCoupleInfo& from);
  void MergeFrom(const stSynCoupleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynCoupleInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynCoupleInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynCoupleInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynCoupleInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynCoupleInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynCoupleInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynCoupleInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynCoupleInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynCoupleInfo_ProtoModID_Parse(name, value);
  }

  typedef stSynCoupleInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynCoupleInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynCoupleInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynCoupleInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynCoupleInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynCoupleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynCoupleInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynCoupleInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynCoupleInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 coupleId = 1;
  inline bool has_coupleid() const;
  inline void clear_coupleid();
  static const int kCoupleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 coupleid() const;
  inline void set_coupleid(::google::protobuf::uint32 value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string myNewName = 3;
  inline bool has_mynewname() const;
  inline void clear_mynewname();
  static const int kMyNewNameFieldNumber = 3;
  inline const ::std::string& mynewname() const;
  inline void set_mynewname(const ::std::string& value);
  inline void set_mynewname(const char* value);
  inline void set_mynewname(const char* value, size_t size);
  inline ::std::string* mutable_mynewname();
  inline ::std::string* release_mynewname();
  inline void set_allocated_mynewname(::std::string* mynewname);

  // @@protoc_insertion_point(class_scope:Global.stSynCoupleInfo)
 private:
  inline void set_has_coupleid();
  inline void clear_has_coupleid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_mynewname();
  inline void clear_has_mynewname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 coupleid_;
  ::google::protobuf::uint32 charid_;
  ::std::string* mynewname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynCoupleInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynResBattleUserData : public ::google::protobuf::Message {
 public:
  stSynResBattleUserData();
  virtual ~stSynResBattleUserData();

  stSynResBattleUserData(const stSynResBattleUserData& from);

  inline stSynResBattleUserData& operator=(const stSynResBattleUserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynResBattleUserData& default_instance();

  void Swap(stSynResBattleUserData* other);

  // implements Message ----------------------------------------------

  stSynResBattleUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynResBattleUserData& from);
  void MergeFrom(const stSynResBattleUserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynResBattleUserData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynResBattleUserData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynResBattleUserData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynResBattleUserData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynResBattleUserData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynResBattleUserData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynResBattleUserData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynResBattleUserData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynResBattleUserData_ProtoModID_Parse(name, value);
  }

  typedef stSynResBattleUserData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynResBattleUserData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynResBattleUserData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynResBattleUserData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynResBattleUserData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynResBattleUserData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynResBattleUserData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynResBattleUserData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynResBattleUserData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.stGloryUser user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::Global::stGloryUser& user() const;
  inline ::Global::stGloryUser* mutable_user();
  inline ::Global::stGloryUser* release_user();
  inline void set_allocated_user(::Global::stGloryUser* user);

  // @@protoc_insertion_point(class_scope:Global.stSynResBattleUserData)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Global::stGloryUser* user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynResBattleUserData* default_instance_;
};
// -------------------------------------------------------------------

class stSynResBattleTop50 : public ::google::protobuf::Message {
 public:
  stSynResBattleTop50();
  virtual ~stSynResBattleTop50();

  stSynResBattleTop50(const stSynResBattleTop50& from);

  inline stSynResBattleTop50& operator=(const stSynResBattleTop50& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynResBattleTop50& default_instance();

  void Swap(stSynResBattleTop50* other);

  // implements Message ----------------------------------------------

  stSynResBattleTop50* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynResBattleTop50& from);
  void MergeFrom(const stSynResBattleTop50& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynResBattleTop50_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynResBattleTop50_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynResBattleTop50_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynResBattleTop50_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynResBattleTop50_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynResBattleTop50_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynResBattleTop50_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynResBattleTop50_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynResBattleTop50_ProtoModID_Parse(name, value);
  }

  typedef stSynResBattleTop50_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynResBattleTop50_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynResBattleTop50_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynResBattleTop50_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynResBattleTop50_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynResBattleTop50_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynResBattleTop50_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynResBattleTop50_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynResBattleTop50_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stGloryUserPart detail = 1;
  inline int detail_size() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 1;
  inline const ::Global::stGloryUserPart& detail(int index) const;
  inline ::Global::stGloryUserPart* mutable_detail(int index);
  inline ::Global::stGloryUserPart* add_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stGloryUserPart >&
      detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stGloryUserPart >*
      mutable_detail();

  // @@protoc_insertion_point(class_scope:Global.stSynResBattleTop50)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stGloryUserPart > detail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynResBattleTop50* default_instance_;
};
// -------------------------------------------------------------------

class stSynResBattleKing : public ::google::protobuf::Message {
 public:
  stSynResBattleKing();
  virtual ~stSynResBattleKing();

  stSynResBattleKing(const stSynResBattleKing& from);

  inline stSynResBattleKing& operator=(const stSynResBattleKing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynResBattleKing& default_instance();

  void Swap(stSynResBattleKing* other);

  // implements Message ----------------------------------------------

  stSynResBattleKing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynResBattleKing& from);
  void MergeFrom(const stSynResBattleKing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynResBattleKing_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynResBattleKing_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynResBattleKing_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynResBattleKing_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynResBattleKing_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynResBattleKing_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynResBattleKing_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynResBattleKing_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynResBattleKing_ProtoModID_Parse(name, value);
  }

  typedef stSynResBattleKing_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynResBattleKing_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynResBattleKing_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynResBattleKing_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynResBattleKing_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynResBattleKing_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynResBattleKing_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynResBattleKing_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynResBattleKing_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool clear = 1;
  inline bool has_clear() const;
  inline void clear_clear();
  static const int kClearFieldNumber = 1;
  inline bool clear() const;
  inline void set_clear(bool value);

  // optional .Global.stGloryUserDetail king = 2;
  inline bool has_king() const;
  inline void clear_king();
  static const int kKingFieldNumber = 2;
  inline const ::Global::stGloryUserDetail& king() const;
  inline ::Global::stGloryUserDetail* mutable_king();
  inline ::Global::stGloryUserDetail* release_king();
  inline void set_allocated_king(::Global::stGloryUserDetail* king);

  // @@protoc_insertion_point(class_scope:Global.stSynResBattleKing)
 private:
  inline void set_has_clear();
  inline void clear_has_clear();
  inline void set_has_king();
  inline void clear_has_king();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Global::stGloryUserDetail* king_;
  bool clear_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynResBattleKing* default_instance_;
};
// -------------------------------------------------------------------

class stReplyInviteResBattle : public ::google::protobuf::Message {
 public:
  stReplyInviteResBattle();
  virtual ~stReplyInviteResBattle();

  stReplyInviteResBattle(const stReplyInviteResBattle& from);

  inline stReplyInviteResBattle& operator=(const stReplyInviteResBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReplyInviteResBattle& default_instance();

  void Swap(stReplyInviteResBattle* other);

  // implements Message ----------------------------------------------

  stReplyInviteResBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReplyInviteResBattle& from);
  void MergeFrom(const stReplyInviteResBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReplyInviteResBattle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReplyInviteResBattle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReplyInviteResBattle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReplyInviteResBattle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReplyInviteResBattle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReplyInviteResBattle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReplyInviteResBattle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReplyInviteResBattle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReplyInviteResBattle_ProtoModID_Parse(name, value);
  }

  typedef stReplyInviteResBattle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReplyInviteResBattle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReplyInviteResBattle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReplyInviteResBattle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReplyInviteResBattle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReplyInviteResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReplyInviteResBattle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReplyInviteResBattle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReplyInviteResBattle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 guildId = 2;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 2;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional uint32 inviteId = 3;
  inline bool has_inviteid() const;
  inline void clear_inviteid();
  static const int kInviteIdFieldNumber = 3;
  inline ::google::protobuf::uint32 inviteid() const;
  inline void set_inviteid(::google::protobuf::uint32 value);

  // optional .Global.stGloryUser self = 4;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 4;
  inline const ::Global::stGloryUser& self() const;
  inline ::Global::stGloryUser* mutable_self();
  inline ::Global::stGloryUser* release_self();
  inline void set_allocated_self(::Global::stGloryUser* self);

  // @@protoc_insertion_point(class_scope:Global.stReplyInviteResBattle)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_inviteid();
  inline void clear_has_inviteid();
  inline void set_has_self();
  inline void clear_has_self();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 guildid_;
  ::Global::stGloryUser* self_;
  ::google::protobuf::uint32 inviteid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReplyInviteResBattle* default_instance_;
};
// -------------------------------------------------------------------

class stSynGloryKingTitle : public ::google::protobuf::Message {
 public:
  stSynGloryKingTitle();
  virtual ~stSynGloryKingTitle();

  stSynGloryKingTitle(const stSynGloryKingTitle& from);

  inline stSynGloryKingTitle& operator=(const stSynGloryKingTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynGloryKingTitle& default_instance();

  void Swap(stSynGloryKingTitle* other);

  // implements Message ----------------------------------------------

  stSynGloryKingTitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynGloryKingTitle& from);
  void MergeFrom(const stSynGloryKingTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynGloryKingTitle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynGloryKingTitle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynGloryKingTitle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynGloryKingTitle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynGloryKingTitle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynGloryKingTitle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynGloryKingTitle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynGloryKingTitle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynGloryKingTitle_ProtoModID_Parse(name, value);
  }

  typedef stSynGloryKingTitle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynGloryKingTitle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynGloryKingTitle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynGloryKingTitle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynGloryKingTitle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynGloryKingTitle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynGloryKingTitle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynGloryKingTitle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynGloryKingTitle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 expireTime = 2;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpireTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynGloryKingTitle)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 expiretime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynGloryKingTitle* default_instance_;
};
// -------------------------------------------------------------------

class stPubOnline : public ::google::protobuf::Message {
 public:
  stPubOnline();
  virtual ~stPubOnline();

  stPubOnline(const stPubOnline& from);

  inline stPubOnline& operator=(const stPubOnline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPubOnline& default_instance();

  void Swap(stPubOnline* other);

  // implements Message ----------------------------------------------

  stPubOnline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPubOnline& from);
  void MergeFrom(const stPubOnline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPubOnline_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPubOnline_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPubOnline_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPubOnline_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPubOnline_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPubOnline_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPubOnline_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPubOnline_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPubOnline_ProtoModID_Parse(name, value);
  }

  typedef stPubOnline_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPubOnline_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPubOnline_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPubOnline_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPubOnline_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPubOnline_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPubOnline_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPubOnline_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPubOnline_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Global.stPubOnline)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stPubOnline* default_instance_;
};
// -------------------------------------------------------------------

class stResBattleSend2Pub : public ::google::protobuf::Message {
 public:
  stResBattleSend2Pub();
  virtual ~stResBattleSend2Pub();

  stResBattleSend2Pub(const stResBattleSend2Pub& from);

  inline stResBattleSend2Pub& operator=(const stResBattleSend2Pub& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResBattleSend2Pub& default_instance();

  void Swap(stResBattleSend2Pub* other);

  // implements Message ----------------------------------------------

  stResBattleSend2Pub* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResBattleSend2Pub& from);
  void MergeFrom(const stResBattleSend2Pub& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResBattleSend2Pub_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResBattleSend2Pub_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResBattleSend2Pub_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResBattleSend2Pub_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResBattleSend2Pub_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResBattleSend2Pub_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResBattleSend2Pub_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResBattleSend2Pub_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResBattleSend2Pub_ProtoModID_Parse(name, value);
  }

  typedef stResBattleSend2Pub_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResBattleSend2Pub_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResBattleSend2Pub_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResBattleSend2Pub_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResBattleSend2Pub_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResBattleSend2Pub_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResBattleSend2Pub_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResBattleSend2Pub_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResBattleSend2Pub_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Global.stGloryUserDetail king = 1;
  inline bool has_king() const;
  inline void clear_king();
  static const int kKingFieldNumber = 1;
  inline const ::Global::stGloryUserDetail& king() const;
  inline ::Global::stGloryUserDetail* mutable_king();
  inline ::Global::stGloryUserDetail* release_king();
  inline void set_allocated_king(::Global::stGloryUserDetail* king);

  // repeated .Global.stGloryUserDetail detail = 2;
  inline int detail_size() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 2;
  inline const ::Global::stGloryUserDetail& detail(int index) const;
  inline ::Global::stGloryUserDetail* mutable_detail(int index);
  inline ::Global::stGloryUserDetail* add_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stGloryUserDetail >&
      detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stGloryUserDetail >*
      mutable_detail();

  // @@protoc_insertion_point(class_scope:Global.stResBattleSend2Pub)
 private:
  inline void set_has_king();
  inline void clear_has_king();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Global::stGloryUserDetail* king_;
  ::google::protobuf::RepeatedPtrField< ::Global::stGloryUserDetail > detail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stResBattleSend2Pub* default_instance_;
};
// -------------------------------------------------------------------

class stServerParamItem : public ::google::protobuf::Message {
 public:
  stServerParamItem();
  virtual ~stServerParamItem();

  stServerParamItem(const stServerParamItem& from);

  inline stServerParamItem& operator=(const stServerParamItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stServerParamItem& default_instance();

  void Swap(stServerParamItem* other);

  // implements Message ----------------------------------------------

  stServerParamItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stServerParamItem& from);
  void MergeFrom(const stServerParamItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Global.stServerParamItem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stServerParamItem* default_instance_;
};
// -------------------------------------------------------------------

class stServerParamSend2Game : public ::google::protobuf::Message {
 public:
  stServerParamSend2Game();
  virtual ~stServerParamSend2Game();

  stServerParamSend2Game(const stServerParamSend2Game& from);

  inline stServerParamSend2Game& operator=(const stServerParamSend2Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stServerParamSend2Game& default_instance();

  void Swap(stServerParamSend2Game* other);

  // implements Message ----------------------------------------------

  stServerParamSend2Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stServerParamSend2Game& from);
  void MergeFrom(const stServerParamSend2Game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stServerParamSend2Game_ProtoModID ProtoModID;
  static const ProtoModID ModID = stServerParamSend2Game_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stServerParamSend2Game_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stServerParamSend2Game_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stServerParamSend2Game_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stServerParamSend2Game_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stServerParamSend2Game_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stServerParamSend2Game_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stServerParamSend2Game_ProtoModID_Parse(name, value);
  }

  typedef stServerParamSend2Game_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stServerParamSend2Game_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stServerParamSend2Game_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stServerParamSend2Game_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stServerParamSend2Game_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stServerParamSend2Game_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stServerParamSend2Game_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stServerParamSend2Game_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stServerParamSend2Game_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stServerParamItem params = 1;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 1;
  inline const ::Global::stServerParamItem& params(int index) const;
  inline ::Global::stServerParamItem* mutable_params(int index);
  inline ::Global::stServerParamItem* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stServerParamItem >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stServerParamItem >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:Global.stServerParamSend2Game)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stServerParamItem > params_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stServerParamSend2Game* default_instance_;
};
// -------------------------------------------------------------------

class stSynUserPhotoID : public ::google::protobuf::Message {
 public:
  stSynUserPhotoID();
  virtual ~stSynUserPhotoID();

  stSynUserPhotoID(const stSynUserPhotoID& from);

  inline stSynUserPhotoID& operator=(const stSynUserPhotoID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynUserPhotoID& default_instance();

  void Swap(stSynUserPhotoID* other);

  // implements Message ----------------------------------------------

  stSynUserPhotoID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynUserPhotoID& from);
  void MergeFrom(const stSynUserPhotoID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynUserPhotoID_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynUserPhotoID_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynUserPhotoID_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynUserPhotoID_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynUserPhotoID_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynUserPhotoID_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynUserPhotoID_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynUserPhotoID_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynUserPhotoID_ProtoModID_Parse(name, value);
  }

  typedef stSynUserPhotoID_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynUserPhotoID_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynUserPhotoID_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynUserPhotoID_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynUserPhotoID_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynUserPhotoID_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynUserPhotoID_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynUserPhotoID_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynUserPhotoID_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 photoID = 2;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 2;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSynUserPhotoID)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSynUserPhotoID* default_instance_;
};
// -------------------------------------------------------------------

class stUseLvlBox : public ::google::protobuf::Message {
 public:
  stUseLvlBox();
  virtual ~stUseLvlBox();

  stUseLvlBox(const stUseLvlBox& from);

  inline stUseLvlBox& operator=(const stUseLvlBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUseLvlBox& default_instance();

  void Swap(stUseLvlBox* other);

  // implements Message ----------------------------------------------

  stUseLvlBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUseLvlBox& from);
  void MergeFrom(const stUseLvlBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUseLvlBox_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUseLvlBox_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUseLvlBox_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUseLvlBox_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUseLvlBox_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUseLvlBox_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUseLvlBox_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUseLvlBox_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUseLvlBox_ProtoModID_Parse(name, value);
  }

  typedef stUseLvlBox_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUseLvlBox_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUseLvlBox_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUseLvlBox_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUseLvlBox_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUseLvlBox_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUseLvlBox_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUseLvlBox_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUseLvlBox_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 bagtype = 2;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceid = 3;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceidFieldNumber = 3;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Global.stUseLvlBox)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint64 instanceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUseLvlBox* default_instance_;
};
// -------------------------------------------------------------------

class stUseLvlBoxRes : public ::google::protobuf::Message {
 public:
  stUseLvlBoxRes();
  virtual ~stUseLvlBoxRes();

  stUseLvlBoxRes(const stUseLvlBoxRes& from);

  inline stUseLvlBoxRes& operator=(const stUseLvlBoxRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUseLvlBoxRes& default_instance();

  void Swap(stUseLvlBoxRes* other);

  // implements Message ----------------------------------------------

  stUseLvlBoxRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUseLvlBoxRes& from);
  void MergeFrom(const stUseLvlBoxRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUseLvlBoxRes_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUseLvlBoxRes_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUseLvlBoxRes_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUseLvlBoxRes_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUseLvlBoxRes_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUseLvlBoxRes_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUseLvlBoxRes_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUseLvlBoxRes_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUseLvlBoxRes_ProtoModID_Parse(name, value);
  }

  typedef stUseLvlBoxRes_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUseLvlBoxRes_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUseLvlBoxRes_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUseLvlBoxRes_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUseLvlBoxRes_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUseLvlBoxRes_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUseLvlBoxRes_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUseLvlBoxRes_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUseLvlBoxRes_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 bagtype = 2;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceid = 3;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceidFieldNumber = 3;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 maxLvl = 4;
  inline bool has_maxlvl() const;
  inline void clear_maxlvl();
  static const int kMaxLvlFieldNumber = 4;
  inline ::google::protobuf::uint32 maxlvl() const;
  inline void set_maxlvl(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stUseLvlBoxRes)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_maxlvl();
  inline void clear_has_maxlvl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 maxlvl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUseLvlBoxRes* default_instance_;
};
// -------------------------------------------------------------------

class stRechangeStatistics : public ::google::protobuf::Message {
 public:
  stRechangeStatistics();
  virtual ~stRechangeStatistics();

  stRechangeStatistics(const stRechangeStatistics& from);

  inline stRechangeStatistics& operator=(const stRechangeStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRechangeStatistics& default_instance();

  void Swap(stRechangeStatistics* other);

  // implements Message ----------------------------------------------

  stRechangeStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRechangeStatistics& from);
  void MergeFrom(const stRechangeStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRechangeStatistics_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRechangeStatistics_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRechangeStatistics_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRechangeStatistics_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRechangeStatistics_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRechangeStatistics_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRechangeStatistics_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRechangeStatistics_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRechangeStatistics_ProtoModID_Parse(name, value);
  }

  typedef stRechangeStatistics_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRechangeStatistics_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRechangeStatistics_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRechangeStatistics_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRechangeStatistics_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRechangeStatistics_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRechangeStatistics_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRechangeStatistics_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRechangeStatistics_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 obtainDiamond = 1;
  inline bool has_obtaindiamond() const;
  inline void clear_obtaindiamond();
  static const int kObtainDiamondFieldNumber = 1;
  inline ::google::protobuf::uint32 obtaindiamond() const;
  inline void set_obtaindiamond(::google::protobuf::uint32 value);

  // optional uint32 giveDiamond = 2;
  inline bool has_givediamond() const;
  inline void clear_givediamond();
  static const int kGiveDiamondFieldNumber = 2;
  inline ::google::protobuf::uint32 givediamond() const;
  inline void set_givediamond(::google::protobuf::uint32 value);

  // optional string data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 money = 5;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 5;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stRechangeStatistics)
 private:
  inline void set_has_obtaindiamond();
  inline void clear_has_obtaindiamond();
  inline void set_has_givediamond();
  inline void clear_has_givediamond();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 obtaindiamond_;
  ::google::protobuf::uint32 givediamond_;
  ::std::string* data_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRechangeStatistics* default_instance_;
};
// -------------------------------------------------------------------

class stNftItem : public ::google::protobuf::Message {
 public:
  stNftItem();
  virtual ~stNftItem();

  stNftItem(const stNftItem& from);

  inline stNftItem& operator=(const stNftItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNftItem& default_instance();

  void Swap(stNftItem* other);

  // implements Message ----------------------------------------------

  stNftItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNftItem& from);
  void MergeFrom(const stNftItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 itemcnt = 2;
  inline bool has_itemcnt() const;
  inline void clear_itemcnt();
  static const int kItemcntFieldNumber = 2;
  inline ::google::protobuf::uint32 itemcnt() const;
  inline void set_itemcnt(::google::protobuf::uint32 value);

  // optional string itemname = 3;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemnameFieldNumber = 3;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional bytes url = 4;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 4;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const void* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:Global.stNftItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcnt();
  inline void clear_has_itemcnt();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemcnt_;
  ::std::string* itemname_;
  ::std::string* url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNftItem* default_instance_;
};
// -------------------------------------------------------------------

class stGlobal2GameQueryUserNft : public ::google::protobuf::Message {
 public:
  stGlobal2GameQueryUserNft();
  virtual ~stGlobal2GameQueryUserNft();

  stGlobal2GameQueryUserNft(const stGlobal2GameQueryUserNft& from);

  inline stGlobal2GameQueryUserNft& operator=(const stGlobal2GameQueryUserNft& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGlobal2GameQueryUserNft& default_instance();

  void Swap(stGlobal2GameQueryUserNft* other);

  // implements Message ----------------------------------------------

  stGlobal2GameQueryUserNft* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGlobal2GameQueryUserNft& from);
  void MergeFrom(const stGlobal2GameQueryUserNft& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGlobal2GameQueryUserNft_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGlobal2GameQueryUserNft_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGlobal2GameQueryUserNft_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGlobal2GameQueryUserNft_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGlobal2GameQueryUserNft_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGlobal2GameQueryUserNft_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGlobal2GameQueryUserNft_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGlobal2GameQueryUserNft_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGlobal2GameQueryUserNft_ProtoModID_Parse(name, value);
  }

  typedef stGlobal2GameQueryUserNft_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGlobal2GameQueryUserNft_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGlobal2GameQueryUserNft_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGlobal2GameQueryUserNft_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGlobal2GameQueryUserNft_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGlobal2GameQueryUserNft_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGlobal2GameQueryUserNft_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGlobal2GameQueryUserNft_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGlobal2GameQueryUserNft_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 webConnID = 1;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 1;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGlobal2GameQueryUserNft)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 webconnid_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGlobal2GameQueryUserNft* default_instance_;
};
// -------------------------------------------------------------------

class stGame2GlobalQueryUserNftResult : public ::google::protobuf::Message {
 public:
  stGame2GlobalQueryUserNftResult();
  virtual ~stGame2GlobalQueryUserNftResult();

  stGame2GlobalQueryUserNftResult(const stGame2GlobalQueryUserNftResult& from);

  inline stGame2GlobalQueryUserNftResult& operator=(const stGame2GlobalQueryUserNftResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGame2GlobalQueryUserNftResult& default_instance();

  void Swap(stGame2GlobalQueryUserNftResult* other);

  // implements Message ----------------------------------------------

  stGame2GlobalQueryUserNftResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGame2GlobalQueryUserNftResult& from);
  void MergeFrom(const stGame2GlobalQueryUserNftResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGame2GlobalQueryUserNftResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGame2GlobalQueryUserNftResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGame2GlobalQueryUserNftResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGame2GlobalQueryUserNftResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGame2GlobalQueryUserNftResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGame2GlobalQueryUserNftResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGame2GlobalQueryUserNftResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGame2GlobalQueryUserNftResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGame2GlobalQueryUserNftResult_ProtoModID_Parse(name, value);
  }

  typedef stGame2GlobalQueryUserNftResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGame2GlobalQueryUserNftResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGame2GlobalQueryUserNftResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGame2GlobalQueryUserNftResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGame2GlobalQueryUserNftResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGame2GlobalQueryUserNftResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGame2GlobalQueryUserNftResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGame2GlobalQueryUserNftResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGame2GlobalQueryUserNftResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 webConnID = 1;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 1;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // repeated .Global.stNftItem data = 4;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::Global::stNftItem& data(int index) const;
  inline ::Global::stNftItem* mutable_data(int index);
  inline ::Global::stNftItem* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stNftItem >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stNftItem >*
      mutable_data();

  // optional uint32 vip = 5;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 5;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGame2GlobalQueryUserNftResult)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_vip();
  inline void clear_has_vip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 webconnid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::RepeatedPtrField< ::Global::stNftItem > data_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 vip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGame2GlobalQueryUserNftResult* default_instance_;
};
// -------------------------------------------------------------------

class stGlobal2GameChangeNftItem : public ::google::protobuf::Message {
 public:
  stGlobal2GameChangeNftItem();
  virtual ~stGlobal2GameChangeNftItem();

  stGlobal2GameChangeNftItem(const stGlobal2GameChangeNftItem& from);

  inline stGlobal2GameChangeNftItem& operator=(const stGlobal2GameChangeNftItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGlobal2GameChangeNftItem& default_instance();

  void Swap(stGlobal2GameChangeNftItem* other);

  // implements Message ----------------------------------------------

  stGlobal2GameChangeNftItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGlobal2GameChangeNftItem& from);
  void MergeFrom(const stGlobal2GameChangeNftItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGlobal2GameChangeNftItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGlobal2GameChangeNftItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGlobal2GameChangeNftItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGlobal2GameChangeNftItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGlobal2GameChangeNftItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGlobal2GameChangeNftItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGlobal2GameChangeNftItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGlobal2GameChangeNftItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGlobal2GameChangeNftItem_ProtoModID_Parse(name, value);
  }

  typedef stGlobal2GameChangeNftItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGlobal2GameChangeNftItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGlobal2GameChangeNftItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGlobal2GameChangeNftItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGlobal2GameChangeNftItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGlobal2GameChangeNftItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGlobal2GameChangeNftItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGlobal2GameChangeNftItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGlobal2GameChangeNftItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 webConnID = 1;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 1;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Global.stGlobal2GameChangeNftItem)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 webconnid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGlobal2GameChangeNftItem* default_instance_;
};
// -------------------------------------------------------------------

class stGame2GlobalChangeNftItemResult : public ::google::protobuf::Message {
 public:
  stGame2GlobalChangeNftItemResult();
  virtual ~stGame2GlobalChangeNftItemResult();

  stGame2GlobalChangeNftItemResult(const stGame2GlobalChangeNftItemResult& from);

  inline stGame2GlobalChangeNftItemResult& operator=(const stGame2GlobalChangeNftItemResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGame2GlobalChangeNftItemResult& default_instance();

  void Swap(stGame2GlobalChangeNftItemResult* other);

  // implements Message ----------------------------------------------

  stGame2GlobalChangeNftItemResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGame2GlobalChangeNftItemResult& from);
  void MergeFrom(const stGame2GlobalChangeNftItemResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGame2GlobalChangeNftItemResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGame2GlobalChangeNftItemResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGame2GlobalChangeNftItemResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGame2GlobalChangeNftItemResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGame2GlobalChangeNftItemResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGame2GlobalChangeNftItemResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGame2GlobalChangeNftItemResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGame2GlobalChangeNftItemResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGame2GlobalChangeNftItemResult_ProtoModID_Parse(name, value);
  }

  typedef stGame2GlobalChangeNftItemResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGame2GlobalChangeNftItemResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGame2GlobalChangeNftItemResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGame2GlobalChangeNftItemResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGame2GlobalChangeNftItemResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGame2GlobalChangeNftItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGame2GlobalChangeNftItemResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGame2GlobalChangeNftItemResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGame2GlobalChangeNftItemResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 webConnID = 1;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 1;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGame2GlobalChangeNftItemResult)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 webconnid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGame2GlobalChangeNftItemResult* default_instance_;
};
// -------------------------------------------------------------------

class stGame2GlobalNftVipGift : public ::google::protobuf::Message {
 public:
  stGame2GlobalNftVipGift();
  virtual ~stGame2GlobalNftVipGift();

  stGame2GlobalNftVipGift(const stGame2GlobalNftVipGift& from);

  inline stGame2GlobalNftVipGift& operator=(const stGame2GlobalNftVipGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGame2GlobalNftVipGift& default_instance();

  void Swap(stGame2GlobalNftVipGift* other);

  // implements Message ----------------------------------------------

  stGame2GlobalNftVipGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGame2GlobalNftVipGift& from);
  void MergeFrom(const stGame2GlobalNftVipGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGame2GlobalNftVipGift_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGame2GlobalNftVipGift_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGame2GlobalNftVipGift_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGame2GlobalNftVipGift_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGame2GlobalNftVipGift_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGame2GlobalNftVipGift_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGame2GlobalNftVipGift_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGame2GlobalNftVipGift_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGame2GlobalNftVipGift_ProtoModID_Parse(name, value);
  }

  typedef stGame2GlobalNftVipGift_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGame2GlobalNftVipGift_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGame2GlobalNftVipGift_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGame2GlobalNftVipGift_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGame2GlobalNftVipGift_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGame2GlobalNftVipGift_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGame2GlobalNftVipGift_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGame2GlobalNftVipGift_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGame2GlobalNftVipGift_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated .Global.stSendMailAttach attaches = 2;
  inline int attaches_size() const;
  inline void clear_attaches();
  static const int kAttachesFieldNumber = 2;
  inline const ::Global::stSendMailAttach& attaches(int index) const;
  inline ::Global::stSendMailAttach* mutable_attaches(int index);
  inline ::Global::stSendMailAttach* add_attaches();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stSendMailAttach >&
      attaches() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stSendMailAttach >*
      mutable_attaches();

  // optional uint32 vipLv = 3;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 3;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGame2GlobalNftVipGift)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_viplv();
  inline void clear_has_viplv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stSendMailAttach > attaches_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 viplv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGame2GlobalNftVipGift* default_instance_;
};
// -------------------------------------------------------------------

class stRetNftOfflineUserData : public ::google::protobuf::Message {
 public:
  stRetNftOfflineUserData();
  virtual ~stRetNftOfflineUserData();

  stRetNftOfflineUserData(const stRetNftOfflineUserData& from);

  inline stRetNftOfflineUserData& operator=(const stRetNftOfflineUserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetNftOfflineUserData& default_instance();

  void Swap(stRetNftOfflineUserData* other);

  // implements Message ----------------------------------------------

  stRetNftOfflineUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetNftOfflineUserData& from);
  void MergeFrom(const stRetNftOfflineUserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetNftOfflineUserData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetNftOfflineUserData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetNftOfflineUserData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetNftOfflineUserData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetNftOfflineUserData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetNftOfflineUserData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetNftOfflineUserData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetNftOfflineUserData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetNftOfflineUserData_ProtoModID_Parse(name, value);
  }

  typedef stRetNftOfflineUserData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetNftOfflineUserData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetNftOfflineUserData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetNftOfflineUserData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetNftOfflineUserData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetNftOfflineUserData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetNftOfflineUserData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetNftOfflineUserData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetNftOfflineUserData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 dataSize = 2;
  inline bool has_datasize() const;
  inline void clear_datasize();
  static const int kDataSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 datasize() const;
  inline void set_datasize(::google::protobuf::uint32 value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 webConnID = 4;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 4;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stRetNftOfflineUserData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_datasize();
  inline void clear_has_datasize();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 datasize_;
  ::std::string* data_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetNftOfflineUserData* default_instance_;
};
// -------------------------------------------------------------------

class stRetChangeNftOfflineUserData : public ::google::protobuf::Message {
 public:
  stRetChangeNftOfflineUserData();
  virtual ~stRetChangeNftOfflineUserData();

  stRetChangeNftOfflineUserData(const stRetChangeNftOfflineUserData& from);

  inline stRetChangeNftOfflineUserData& operator=(const stRetChangeNftOfflineUserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetChangeNftOfflineUserData& default_instance();

  void Swap(stRetChangeNftOfflineUserData* other);

  // implements Message ----------------------------------------------

  stRetChangeNftOfflineUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetChangeNftOfflineUserData& from);
  void MergeFrom(const stRetChangeNftOfflineUserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetChangeNftOfflineUserData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetChangeNftOfflineUserData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetChangeNftOfflineUserData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetChangeNftOfflineUserData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetChangeNftOfflineUserData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetChangeNftOfflineUserData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetChangeNftOfflineUserData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetChangeNftOfflineUserData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetChangeNftOfflineUserData_ProtoModID_Parse(name, value);
  }

  typedef stRetChangeNftOfflineUserData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetChangeNftOfflineUserData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetChangeNftOfflineUserData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetChangeNftOfflineUserData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetChangeNftOfflineUserData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetChangeNftOfflineUserData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetChangeNftOfflineUserData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetChangeNftOfflineUserData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetChangeNftOfflineUserData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 dataSize = 2;
  inline bool has_datasize() const;
  inline void clear_datasize();
  static const int kDataSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 datasize() const;
  inline void set_datasize(::google::protobuf::uint32 value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 webConnID = 4;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 4;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional uint32 itemID = 5;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 5;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional int32 count = 6;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 6;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Global.stRetChangeNftOfflineUserData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_datasize();
  inline void clear_has_datasize();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 datasize_;
  ::std::string* data_;
  ::google::protobuf::uint32 webconnid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetChangeNftOfflineUserData* default_instance_;
};
// -------------------------------------------------------------------

class stSendUserLog : public ::google::protobuf::Message {
 public:
  stSendUserLog();
  virtual ~stSendUserLog();

  stSendUserLog(const stSendUserLog& from);

  inline stSendUserLog& operator=(const stSendUserLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendUserLog& default_instance();

  void Swap(stSendUserLog* other);

  // implements Message ----------------------------------------------

  stSendUserLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendUserLog& from);
  void MergeFrom(const stSendUserLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendUserLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendUserLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendUserLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendUserLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendUserLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendUserLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendUserLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendUserLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendUserLog_ProtoModID_Parse(name, value);
  }

  typedef stSendUserLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendUserLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendUserLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendUserLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendUserLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendUserLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendUserLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendUserLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendUserLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string logParam = 1;
  inline int logparam_size() const;
  inline void clear_logparam();
  static const int kLogParamFieldNumber = 1;
  inline const ::std::string& logparam(int index) const;
  inline ::std::string* mutable_logparam(int index);
  inline void set_logparam(int index, const ::std::string& value);
  inline void set_logparam(int index, const char* value);
  inline void set_logparam(int index, const char* value, size_t size);
  inline ::std::string* add_logparam();
  inline void add_logparam(const ::std::string& value);
  inline void add_logparam(const char* value);
  inline void add_logparam(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& logparam() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_logparam();

  // @@protoc_insertion_point(class_scope:Global.stSendUserLog)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> logparam_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSendUserLog* default_instance_;
};
// -------------------------------------------------------------------

class stReqKillUserOut : public ::google::protobuf::Message {
 public:
  stReqKillUserOut();
  virtual ~stReqKillUserOut();

  stReqKillUserOut(const stReqKillUserOut& from);

  inline stReqKillUserOut& operator=(const stReqKillUserOut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqKillUserOut& default_instance();

  void Swap(stReqKillUserOut* other);

  // implements Message ----------------------------------------------

  stReqKillUserOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqKillUserOut& from);
  void MergeFrom(const stReqKillUserOut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqKillUserOut_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqKillUserOut_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqKillUserOut_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqKillUserOut_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqKillUserOut_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqKillUserOut_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqKillUserOut_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqKillUserOut_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqKillUserOut_ProtoModID_Parse(name, value);
  }

  typedef stReqKillUserOut_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqKillUserOut_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqKillUserOut_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqKillUserOut_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqKillUserOut_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqKillUserOut_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqKillUserOut_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqKillUserOut_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqKillUserOut_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqKillUserOut)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqKillUserOut* default_instance_;
};
// -------------------------------------------------------------------

class stKillUserOutResult : public ::google::protobuf::Message {
 public:
  stKillUserOutResult();
  virtual ~stKillUserOutResult();

  stKillUserOutResult(const stKillUserOutResult& from);

  inline stKillUserOutResult& operator=(const stKillUserOutResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stKillUserOutResult& default_instance();

  void Swap(stKillUserOutResult* other);

  // implements Message ----------------------------------------------

  stKillUserOutResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stKillUserOutResult& from);
  void MergeFrom(const stKillUserOutResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stKillUserOutResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stKillUserOutResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stKillUserOutResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stKillUserOutResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stKillUserOutResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stKillUserOutResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stKillUserOutResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stKillUserOutResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stKillUserOutResult_ProtoModID_Parse(name, value);
  }

  typedef stKillUserOutResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stKillUserOutResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stKillUserOutResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stKillUserOutResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stKillUserOutResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stKillUserOutResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stKillUserOutResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stKillUserOutResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stKillUserOutResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stKillUserOutResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stKillUserOutResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqSetUserGMType : public ::google::protobuf::Message {
 public:
  stReqSetUserGMType();
  virtual ~stReqSetUserGMType();

  stReqSetUserGMType(const stReqSetUserGMType& from);

  inline stReqSetUserGMType& operator=(const stReqSetUserGMType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSetUserGMType& default_instance();

  void Swap(stReqSetUserGMType* other);

  // implements Message ----------------------------------------------

  stReqSetUserGMType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSetUserGMType& from);
  void MergeFrom(const stReqSetUserGMType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSetUserGMType_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSetUserGMType_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSetUserGMType_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSetUserGMType_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSetUserGMType_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSetUserGMType_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSetUserGMType_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSetUserGMType_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSetUserGMType_ProtoModID_Parse(name, value);
  }

  typedef stReqSetUserGMType_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSetUserGMType_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSetUserGMType_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSetUserGMType_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSetUserGMType_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSetUserGMType_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSetUserGMType_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSetUserGMType_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSetUserGMType_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 gmValue = 2;
  inline bool has_gmvalue() const;
  inline void clear_gmvalue();
  static const int kGmValueFieldNumber = 2;
  inline ::google::protobuf::uint32 gmvalue() const;
  inline void set_gmvalue(::google::protobuf::uint32 value);

  // optional uint32 webConnID = 3;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 3;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqSetUserGMType)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_gmvalue();
  inline void clear_has_gmvalue();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 gmvalue_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqSetUserGMType* default_instance_;
};
// -------------------------------------------------------------------

class stSetUserGMTypeResult : public ::google::protobuf::Message {
 public:
  stSetUserGMTypeResult();
  virtual ~stSetUserGMTypeResult();

  stSetUserGMTypeResult(const stSetUserGMTypeResult& from);

  inline stSetUserGMTypeResult& operator=(const stSetUserGMTypeResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSetUserGMTypeResult& default_instance();

  void Swap(stSetUserGMTypeResult* other);

  // implements Message ----------------------------------------------

  stSetUserGMTypeResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSetUserGMTypeResult& from);
  void MergeFrom(const stSetUserGMTypeResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSetUserGMTypeResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSetUserGMTypeResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSetUserGMTypeResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSetUserGMTypeResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSetUserGMTypeResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSetUserGMTypeResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSetUserGMTypeResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSetUserGMTypeResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSetUserGMTypeResult_ProtoModID_Parse(name, value);
  }

  typedef stSetUserGMTypeResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSetUserGMTypeResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSetUserGMTypeResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSetUserGMTypeResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSetUserGMTypeResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSetUserGMTypeResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSetUserGMTypeResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSetUserGMTypeResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSetUserGMTypeResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSetUserGMTypeResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSetUserGMTypeResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqBanUser : public ::google::protobuf::Message {
 public:
  stReqBanUser();
  virtual ~stReqBanUser();

  stReqBanUser(const stReqBanUser& from);

  inline stReqBanUser& operator=(const stReqBanUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBanUser& default_instance();

  void Swap(stReqBanUser* other);

  // implements Message ----------------------------------------------

  stReqBanUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBanUser& from);
  void MergeFrom(const stReqBanUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBanUser_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBanUser_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBanUser_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBanUser_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBanUser_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBanUser_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBanUser_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBanUser_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBanUser_ProtoModID_Parse(name, value);
  }

  typedef stReqBanUser_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBanUser_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBanUser_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBanUser_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBanUser_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBanUser_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBanUser_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBanUser_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBanUser_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional bool ban = 3;
  inline bool has_ban() const;
  inline void clear_ban();
  static const int kBanFieldNumber = 3;
  inline bool ban() const;
  inline void set_ban(bool value);

  // @@protoc_insertion_point(class_scope:Global.stReqBanUser)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_ban();
  inline void clear_has_ban();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 webconnid_;
  bool ban_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqBanUser* default_instance_;
};
// -------------------------------------------------------------------

class stBanUserResult : public ::google::protobuf::Message {
 public:
  stBanUserResult();
  virtual ~stBanUserResult();

  stBanUserResult(const stBanUserResult& from);

  inline stBanUserResult& operator=(const stBanUserResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBanUserResult& default_instance();

  void Swap(stBanUserResult* other);

  // implements Message ----------------------------------------------

  stBanUserResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBanUserResult& from);
  void MergeFrom(const stBanUserResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBanUserResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBanUserResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBanUserResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBanUserResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBanUserResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBanUserResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBanUserResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBanUserResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBanUserResult_ProtoModID_Parse(name, value);
  }

  typedef stBanUserResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBanUserResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBanUserResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBanUserResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBanUserResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBanUserResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBanUserResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBanUserResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBanUserResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 webConnID = 1;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 1;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Global.stBanUserResult)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 webconnid_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stBanUserResult* default_instance_;
};
// -------------------------------------------------------------------

class stSendMailAttach : public ::google::protobuf::Message {
 public:
  stSendMailAttach();
  virtual ~stSendMailAttach();

  stSendMailAttach(const stSendMailAttach& from);

  inline stSendMailAttach& operator=(const stSendMailAttach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendMailAttach& default_instance();

  void Swap(stSendMailAttach* other);

  // implements Message ----------------------------------------------

  stSendMailAttach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendMailAttach& from);
  void MergeFrom(const stSendMailAttach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSendMailAttach)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSendMailAttach* default_instance_;
};
// -------------------------------------------------------------------

class stSendMail2User : public ::google::protobuf::Message {
 public:
  stSendMail2User();
  virtual ~stSendMail2User();

  stSendMail2User(const stSendMail2User& from);

  inline stSendMail2User& operator=(const stSendMail2User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendMail2User& default_instance();

  void Swap(stSendMail2User* other);

  // implements Message ----------------------------------------------

  stSendMail2User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendMail2User& from);
  void MergeFrom(const stSendMail2User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendMail2User_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendMail2User_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendMail2User_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendMail2User_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendMail2User_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendMail2User_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendMail2User_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendMail2User_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendMail2User_ProtoModID_Parse(name, value);
  }

  typedef stSendMail2User_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendMail2User_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendMail2User_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendMail2User_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendMail2User_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendMail2User_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendMail2User_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendMail2User_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendMail2User_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated uint32 userList = 3;
  inline int userlist_size() const;
  inline void clear_userlist();
  static const int kUserListFieldNumber = 3;
  inline ::google::protobuf::uint32 userlist(int index) const;
  inline void set_userlist(int index, ::google::protobuf::uint32 value);
  inline void add_userlist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      userlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_userlist();

  // repeated .Global.stSendMailAttach attaches = 4;
  inline int attaches_size() const;
  inline void clear_attaches();
  static const int kAttachesFieldNumber = 4;
  inline const ::Global::stSendMailAttach& attaches(int index) const;
  inline ::Global::stSendMailAttach* mutable_attaches(int index);
  inline ::Global::stSendMailAttach* add_attaches();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stSendMailAttach >&
      attaches() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stSendMailAttach >*
      mutable_attaches();

  // optional uint32 webConnID = 5;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 5;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional string tag = 6;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 6;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // optional bool bAll = 7;
  inline bool has_ball() const;
  inline void clear_ball();
  static const int kBAllFieldNumber = 7;
  inline bool ball() const;
  inline void set_ball(bool value);

  // @@protoc_insertion_point(class_scope:Global.stSendMail2User)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_ball();
  inline void clear_has_ball();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > userlist_;
  ::google::protobuf::RepeatedPtrField< ::Global::stSendMailAttach > attaches_;
  ::std::string* tag_;
  ::google::protobuf::uint32 webconnid_;
  bool ball_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSendMail2User* default_instance_;
};
// -------------------------------------------------------------------

class stSendMail2UserResult : public ::google::protobuf::Message {
 public:
  stSendMail2UserResult();
  virtual ~stSendMail2UserResult();

  stSendMail2UserResult(const stSendMail2UserResult& from);

  inline stSendMail2UserResult& operator=(const stSendMail2UserResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendMail2UserResult& default_instance();

  void Swap(stSendMail2UserResult* other);

  // implements Message ----------------------------------------------

  stSendMail2UserResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendMail2UserResult& from);
  void MergeFrom(const stSendMail2UserResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendMail2UserResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendMail2UserResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendMail2UserResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendMail2UserResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendMail2UserResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendMail2UserResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendMail2UserResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendMail2UserResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendMail2UserResult_ProtoModID_Parse(name, value);
  }

  typedef stSendMail2UserResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendMail2UserResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendMail2UserResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendMail2UserResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendMail2UserResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendMail2UserResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendMail2UserResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendMail2UserResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendMail2UserResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional string tag = 3;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 3;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // @@protoc_insertion_point(class_scope:Global.stSendMail2UserResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_tag();
  inline void clear_has_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;
  ::google::protobuf::uint32 webconnid_;
  ::std::string* tag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSendMail2UserResult* default_instance_;
};
// -------------------------------------------------------------------

class stWebMotifyUserInfo : public ::google::protobuf::Message {
 public:
  stWebMotifyUserInfo();
  virtual ~stWebMotifyUserInfo();

  stWebMotifyUserInfo(const stWebMotifyUserInfo& from);

  inline stWebMotifyUserInfo& operator=(const stWebMotifyUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stWebMotifyUserInfo& default_instance();

  void Swap(stWebMotifyUserInfo* other);

  // implements Message ----------------------------------------------

  stWebMotifyUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stWebMotifyUserInfo& from);
  void MergeFrom(const stWebMotifyUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stWebMotifyUserInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stWebMotifyUserInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stWebMotifyUserInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stWebMotifyUserInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stWebMotifyUserInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stWebMotifyUserInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stWebMotifyUserInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stWebMotifyUserInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stWebMotifyUserInfo_ProtoModID_Parse(name, value);
  }

  typedef stWebMotifyUserInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stWebMotifyUserInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stWebMotifyUserInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stWebMotifyUserInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stWebMotifyUserInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stWebMotifyUserInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stWebMotifyUserInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stWebMotifyUserInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stWebMotifyUserInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 newbieGuideID = 2;
  inline bool has_newbieguideid() const;
  inline void clear_newbieguideid();
  static const int kNewbieGuideIDFieldNumber = 2;
  inline ::google::protobuf::uint32 newbieguideid() const;
  inline void set_newbieguideid(::google::protobuf::uint32 value);

  // optional uint32 webConnID = 3;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 3;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional uint32 goldCoin = 4;
  inline bool has_goldcoin() const;
  inline void clear_goldcoin();
  static const int kGoldCoinFieldNumber = 4;
  inline ::google::protobuf::uint32 goldcoin() const;
  inline void set_goldcoin(::google::protobuf::uint32 value);

  // optional uint32 diamond = 5;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 5;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // optional uint32 vipPoint = 6;
  inline bool has_vippoint() const;
  inline void clear_vippoint();
  static const int kVipPointFieldNumber = 6;
  inline ::google::protobuf::uint32 vippoint() const;
  inline void set_vippoint(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stWebMotifyUserInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_newbieguideid();
  inline void clear_has_newbieguideid();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_goldcoin();
  inline void clear_has_goldcoin();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_vippoint();
  inline void clear_has_vippoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 newbieguideid_;
  ::google::protobuf::uint32 webconnid_;
  ::google::protobuf::uint32 goldcoin_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint32 vippoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stWebMotifyUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class stWebMotifyUserInfoRet : public ::google::protobuf::Message {
 public:
  stWebMotifyUserInfoRet();
  virtual ~stWebMotifyUserInfoRet();

  stWebMotifyUserInfoRet(const stWebMotifyUserInfoRet& from);

  inline stWebMotifyUserInfoRet& operator=(const stWebMotifyUserInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stWebMotifyUserInfoRet& default_instance();

  void Swap(stWebMotifyUserInfoRet* other);

  // implements Message ----------------------------------------------

  stWebMotifyUserInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stWebMotifyUserInfoRet& from);
  void MergeFrom(const stWebMotifyUserInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stWebMotifyUserInfoRet_ProtoModID ProtoModID;
  static const ProtoModID ModID = stWebMotifyUserInfoRet_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stWebMotifyUserInfoRet_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stWebMotifyUserInfoRet_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stWebMotifyUserInfoRet_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stWebMotifyUserInfoRet_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stWebMotifyUserInfoRet_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stWebMotifyUserInfoRet_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stWebMotifyUserInfoRet_ProtoModID_Parse(name, value);
  }

  typedef stWebMotifyUserInfoRet_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stWebMotifyUserInfoRet_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stWebMotifyUserInfoRet_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stWebMotifyUserInfoRet_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stWebMotifyUserInfoRet_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stWebMotifyUserInfoRet_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stWebMotifyUserInfoRet_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stWebMotifyUserInfoRet_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stWebMotifyUserInfoRet_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional bool result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Global.stWebMotifyUserInfoRet)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 webconnid_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stWebMotifyUserInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class stAddOrUpdateNotice : public ::google::protobuf::Message {
 public:
  stAddOrUpdateNotice();
  virtual ~stAddOrUpdateNotice();

  stAddOrUpdateNotice(const stAddOrUpdateNotice& from);

  inline stAddOrUpdateNotice& operator=(const stAddOrUpdateNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddOrUpdateNotice& default_instance();

  void Swap(stAddOrUpdateNotice* other);

  // implements Message ----------------------------------------------

  stAddOrUpdateNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddOrUpdateNotice& from);
  void MergeFrom(const stAddOrUpdateNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAddOrUpdateNotice_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAddOrUpdateNotice_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAddOrUpdateNotice_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAddOrUpdateNotice_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAddOrUpdateNotice_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAddOrUpdateNotice_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAddOrUpdateNotice_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAddOrUpdateNotice_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAddOrUpdateNotice_ProtoModID_Parse(name, value);
  }

  typedef stAddOrUpdateNotice_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAddOrUpdateNotice_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAddOrUpdateNotice_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAddOrUpdateNotice_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAddOrUpdateNotice_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAddOrUpdateNotice_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAddOrUpdateNotice_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAddOrUpdateNotice_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAddOrUpdateNotice_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 noticeID = 1;
  inline bool has_noticeid() const;
  inline void clear_noticeid();
  static const int kNoticeIDFieldNumber = 1;
  inline ::google::protobuf::uint32 noticeid() const;
  inline void set_noticeid(::google::protobuf::uint32 value);

  // optional int32 interval = 2;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 2;
  inline ::google::protobuf::int32 interval() const;
  inline void set_interval(::google::protobuf::int32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .Global.eNoticeOp op = 5;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 5;
  inline ::Global::eNoticeOp op() const;
  inline void set_op(::Global::eNoticeOp value);

  // optional uint32 noticePosition = 6;
  inline bool has_noticeposition() const;
  inline void clear_noticeposition();
  static const int kNoticePositionFieldNumber = 6;
  inline ::google::protobuf::uint32 noticeposition() const;
  inline void set_noticeposition(::google::protobuf::uint32 value);

  // optional uint32 beginTime = 7;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 begintime() const;
  inline void set_begintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stAddOrUpdateNotice)
 private:
  inline void set_has_noticeid();
  inline void clear_has_noticeid();
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_noticeposition();
  inline void clear_has_noticeposition();
  inline void set_has_begintime();
  inline void clear_has_begintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 noticeid_;
  ::google::protobuf::int32 interval_;
  ::std::string* content_;
  ::google::protobuf::uint32 num_;
  int op_;
  ::google::protobuf::uint32 noticeposition_;
  ::google::protobuf::uint32 begintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stAddOrUpdateNotice* default_instance_;
};
// -------------------------------------------------------------------

class stDelNotice : public ::google::protobuf::Message {
 public:
  stDelNotice();
  virtual ~stDelNotice();

  stDelNotice(const stDelNotice& from);

  inline stDelNotice& operator=(const stDelNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDelNotice& default_instance();

  void Swap(stDelNotice* other);

  // implements Message ----------------------------------------------

  stDelNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDelNotice& from);
  void MergeFrom(const stDelNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDelNotice_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDelNotice_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDelNotice_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDelNotice_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDelNotice_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDelNotice_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDelNotice_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDelNotice_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDelNotice_ProtoModID_Parse(name, value);
  }

  typedef stDelNotice_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDelNotice_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDelNotice_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDelNotice_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDelNotice_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDelNotice_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDelNotice_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDelNotice_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDelNotice_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 noticeID = 1;
  inline bool has_noticeid() const;
  inline void clear_noticeid();
  static const int kNoticeIDFieldNumber = 1;
  inline ::google::protobuf::uint32 noticeid() const;
  inline void set_noticeid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stDelNotice)
 private:
  inline void set_has_noticeid();
  inline void clear_has_noticeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 noticeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDelNotice* default_instance_;
};
// -------------------------------------------------------------------

class stWebNotifyRechargeInfo : public ::google::protobuf::Message {
 public:
  stWebNotifyRechargeInfo();
  virtual ~stWebNotifyRechargeInfo();

  stWebNotifyRechargeInfo(const stWebNotifyRechargeInfo& from);

  inline stWebNotifyRechargeInfo& operator=(const stWebNotifyRechargeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stWebNotifyRechargeInfo& default_instance();

  void Swap(stWebNotifyRechargeInfo* other);

  // implements Message ----------------------------------------------

  stWebNotifyRechargeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stWebNotifyRechargeInfo& from);
  void MergeFrom(const stWebNotifyRechargeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stWebNotifyRechargeInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stWebNotifyRechargeInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stWebNotifyRechargeInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stWebNotifyRechargeInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stWebNotifyRechargeInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stWebNotifyRechargeInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stWebNotifyRechargeInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stWebNotifyRechargeInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stWebNotifyRechargeInfo_ProtoModID_Parse(name, value);
  }

  typedef stWebNotifyRechargeInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stWebNotifyRechargeInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stWebNotifyRechargeInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stWebNotifyRechargeInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stWebNotifyRechargeInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stWebNotifyRechargeInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stWebNotifyRechargeInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stWebNotifyRechargeInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stWebNotifyRechargeInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // optional uint32 itemID = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional string tid = 4;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 4;
  inline const ::std::string& tid() const;
  inline void set_tid(const ::std::string& value);
  inline void set_tid(const char* value);
  inline void set_tid(const char* value, size_t size);
  inline ::std::string* mutable_tid();
  inline ::std::string* release_tid();
  inline void set_allocated_tid(::std::string* tid);

  // optional string account = 5;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 5;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 opID = 6;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpIDFieldNumber = 6;
  inline ::google::protobuf::uint32 opid() const;
  inline void set_opid(::google::protobuf::uint32 value);

  // optional bool isExtend = 7;
  inline bool has_isextend() const;
  inline void clear_isextend();
  static const int kIsExtendFieldNumber = 7;
  inline bool isextend() const;
  inline void set_isextend(bool value);

  // optional string data = 8;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 payChannel = 9;
  inline bool has_paychannel() const;
  inline void clear_paychannel();
  static const int kPayChannelFieldNumber = 9;
  inline ::google::protobuf::uint32 paychannel() const;
  inline void set_paychannel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stWebNotifyRechargeInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_opid();
  inline void clear_has_opid();
  inline void set_has_isextend();
  inline void clear_has_isextend();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_paychannel();
  inline void clear_has_paychannel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 money_;
  ::std::string* tid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 opid_;
  ::std::string* account_;
  ::std::string* data_;
  bool isextend_;
  ::google::protobuf::uint32 paychannel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stWebNotifyRechargeInfo* default_instance_;
};
// -------------------------------------------------------------------

class stAddGiftBagCfg : public ::google::protobuf::Message {
 public:
  stAddGiftBagCfg();
  virtual ~stAddGiftBagCfg();

  stAddGiftBagCfg(const stAddGiftBagCfg& from);

  inline stAddGiftBagCfg& operator=(const stAddGiftBagCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddGiftBagCfg& default_instance();

  void Swap(stAddGiftBagCfg* other);

  // implements Message ----------------------------------------------

  stAddGiftBagCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddGiftBagCfg& from);
  void MergeFrom(const stAddGiftBagCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAddGiftBagCfg_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAddGiftBagCfg_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAddGiftBagCfg_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAddGiftBagCfg_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAddGiftBagCfg_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAddGiftBagCfg_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAddGiftBagCfg_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAddGiftBagCfg_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAddGiftBagCfg_ProtoModID_Parse(name, value);
  }

  typedef stAddGiftBagCfg_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAddGiftBagCfg_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAddGiftBagCfg_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAddGiftBagCfg_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAddGiftBagCfg_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAddGiftBagCfg_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAddGiftBagCfg_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAddGiftBagCfg_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAddGiftBagCfg_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:Global.stAddGiftBagCfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stAddGiftBagCfg* default_instance_;
};
// -------------------------------------------------------------------

class stDelGiftBagCfg : public ::google::protobuf::Message {
 public:
  stDelGiftBagCfg();
  virtual ~stDelGiftBagCfg();

  stDelGiftBagCfg(const stDelGiftBagCfg& from);

  inline stDelGiftBagCfg& operator=(const stDelGiftBagCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDelGiftBagCfg& default_instance();

  void Swap(stDelGiftBagCfg* other);

  // implements Message ----------------------------------------------

  stDelGiftBagCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDelGiftBagCfg& from);
  void MergeFrom(const stDelGiftBagCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDelGiftBagCfg_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDelGiftBagCfg_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDelGiftBagCfg_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDelGiftBagCfg_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDelGiftBagCfg_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDelGiftBagCfg_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDelGiftBagCfg_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDelGiftBagCfg_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDelGiftBagCfg_ProtoModID_Parse(name, value);
  }

  typedef stDelGiftBagCfg_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDelGiftBagCfg_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDelGiftBagCfg_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDelGiftBagCfg_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDelGiftBagCfg_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDelGiftBagCfg_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDelGiftBagCfg_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDelGiftBagCfg_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDelGiftBagCfg_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stDelGiftBagCfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stDelGiftBagCfg* default_instance_;
};
// -------------------------------------------------------------------

class stAddBlackAndWhite : public ::google::protobuf::Message {
 public:
  stAddBlackAndWhite();
  virtual ~stAddBlackAndWhite();

  stAddBlackAndWhite(const stAddBlackAndWhite& from);

  inline stAddBlackAndWhite& operator=(const stAddBlackAndWhite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddBlackAndWhite& default_instance();

  void Swap(stAddBlackAndWhite* other);

  // implements Message ----------------------------------------------

  stAddBlackAndWhite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddBlackAndWhite& from);
  void MergeFrom(const stAddBlackAndWhite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAddBlackAndWhite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAddBlackAndWhite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAddBlackAndWhite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAddBlackAndWhite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAddBlackAndWhite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAddBlackAndWhite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAddBlackAndWhite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAddBlackAndWhite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAddBlackAndWhite_ProtoModID_Parse(name, value);
  }

  typedef stAddBlackAndWhite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAddBlackAndWhite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAddBlackAndWhite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAddBlackAndWhite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAddBlackAndWhite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAddBlackAndWhite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAddBlackAndWhite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAddBlackAndWhite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAddBlackAndWhite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string blackList = 1;
  inline int blacklist_size() const;
  inline void clear_blacklist();
  static const int kBlackListFieldNumber = 1;
  inline const ::std::string& blacklist(int index) const;
  inline ::std::string* mutable_blacklist(int index);
  inline void set_blacklist(int index, const ::std::string& value);
  inline void set_blacklist(int index, const char* value);
  inline void set_blacklist(int index, const char* value, size_t size);
  inline ::std::string* add_blacklist();
  inline void add_blacklist(const ::std::string& value);
  inline void add_blacklist(const char* value);
  inline void add_blacklist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& blacklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_blacklist();

  // repeated string whiteList = 2;
  inline int whitelist_size() const;
  inline void clear_whitelist();
  static const int kWhiteListFieldNumber = 2;
  inline const ::std::string& whitelist(int index) const;
  inline ::std::string* mutable_whitelist(int index);
  inline void set_whitelist(int index, const ::std::string& value);
  inline void set_whitelist(int index, const char* value);
  inline void set_whitelist(int index, const char* value, size_t size);
  inline ::std::string* add_whitelist();
  inline void add_whitelist(const ::std::string& value);
  inline void add_whitelist(const char* value);
  inline void add_whitelist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& whitelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_whitelist();

  // @@protoc_insertion_point(class_scope:Global.stAddBlackAndWhite)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> blacklist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> whitelist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stAddBlackAndWhite* default_instance_;
};
// -------------------------------------------------------------------

class stSetServerMaintenanceTime : public ::google::protobuf::Message {
 public:
  stSetServerMaintenanceTime();
  virtual ~stSetServerMaintenanceTime();

  stSetServerMaintenanceTime(const stSetServerMaintenanceTime& from);

  inline stSetServerMaintenanceTime& operator=(const stSetServerMaintenanceTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSetServerMaintenanceTime& default_instance();

  void Swap(stSetServerMaintenanceTime* other);

  // implements Message ----------------------------------------------

  stSetServerMaintenanceTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSetServerMaintenanceTime& from);
  void MergeFrom(const stSetServerMaintenanceTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSetServerMaintenanceTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSetServerMaintenanceTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSetServerMaintenanceTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSetServerMaintenanceTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSetServerMaintenanceTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSetServerMaintenanceTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSetServerMaintenanceTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSetServerMaintenanceTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSetServerMaintenanceTime_ProtoModID_Parse(name, value);
  }

  typedef stSetServerMaintenanceTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSetServerMaintenanceTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSetServerMaintenanceTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSetServerMaintenanceTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSetServerMaintenanceTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSetServerMaintenanceTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSetServerMaintenanceTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSetServerMaintenanceTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSetServerMaintenanceTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string opTime = 1;
  inline bool has_optime() const;
  inline void clear_optime();
  static const int kOpTimeFieldNumber = 1;
  inline const ::std::string& optime() const;
  inline void set_optime(const ::std::string& value);
  inline void set_optime(const char* value);
  inline void set_optime(const char* value, size_t size);
  inline ::std::string* mutable_optime();
  inline ::std::string* release_optime();
  inline void set_allocated_optime(::std::string* optime);

  // optional uint32 opDuring = 2;
  inline bool has_opduring() const;
  inline void clear_opduring();
  static const int kOpDuringFieldNumber = 2;
  inline ::google::protobuf::uint32 opduring() const;
  inline void set_opduring(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSetServerMaintenanceTime)
 private:
  inline void set_has_optime();
  inline void clear_has_optime();
  inline void set_has_opduring();
  inline void clear_has_opduring();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* optime_;
  ::google::protobuf::uint32 opduring_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSetServerMaintenanceTime* default_instance_;
};
// -------------------------------------------------------------------

class stGetSvrConfig : public ::google::protobuf::Message {
 public:
  stGetSvrConfig();
  virtual ~stGetSvrConfig();

  stGetSvrConfig(const stGetSvrConfig& from);

  inline stGetSvrConfig& operator=(const stGetSvrConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGetSvrConfig& default_instance();

  void Swap(stGetSvrConfig* other);

  // implements Message ----------------------------------------------

  stGetSvrConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGetSvrConfig& from);
  void MergeFrom(const stGetSvrConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGetSvrConfig_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGetSvrConfig_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGetSvrConfig_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGetSvrConfig_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGetSvrConfig_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGetSvrConfig_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGetSvrConfig_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGetSvrConfig_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGetSvrConfig_ProtoModID_Parse(name, value);
  }

  typedef stGetSvrConfig_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGetSvrConfig_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGetSvrConfig_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGetSvrConfig_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGetSvrConfig_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGetSvrConfig_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGetSvrConfig_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGetSvrConfig_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGetSvrConfig_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 webConnID = 1;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 1;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGetSvrConfig)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGetSvrConfig* default_instance_;
};
// -------------------------------------------------------------------

class stRetSvrConfig : public ::google::protobuf::Message {
 public:
  stRetSvrConfig();
  virtual ~stRetSvrConfig();

  stRetSvrConfig(const stRetSvrConfig& from);

  inline stRetSvrConfig& operator=(const stRetSvrConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetSvrConfig& default_instance();

  void Swap(stRetSvrConfig* other);

  // implements Message ----------------------------------------------

  stRetSvrConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetSvrConfig& from);
  void MergeFrom(const stRetSvrConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetSvrConfig_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetSvrConfig_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetSvrConfig_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetSvrConfig_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetSvrConfig_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetSvrConfig_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetSvrConfig_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetSvrConfig_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetSvrConfig_ProtoModID_Parse(name, value);
  }

  typedef stRetSvrConfig_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetSvrConfig_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetSvrConfig_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetSvrConfig_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetSvrConfig_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetSvrConfig_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetSvrConfig_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetSvrConfig_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetSvrConfig_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stServerCfgPair cfgPair = 1;
  inline int cfgpair_size() const;
  inline void clear_cfgpair();
  static const int kCfgPairFieldNumber = 1;
  inline const ::Global::stServerCfgPair& cfgpair(int index) const;
  inline ::Global::stServerCfgPair* mutable_cfgpair(int index);
  inline ::Global::stServerCfgPair* add_cfgpair();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >&
      cfgpair() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >*
      mutable_cfgpair();

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stRetSvrConfig)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair > cfgpair_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetSvrConfig* default_instance_;
};
// -------------------------------------------------------------------

class stUpdateSvrCfg : public ::google::protobuf::Message {
 public:
  stUpdateSvrCfg();
  virtual ~stUpdateSvrCfg();

  stUpdateSvrCfg(const stUpdateSvrCfg& from);

  inline stUpdateSvrCfg& operator=(const stUpdateSvrCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUpdateSvrCfg& default_instance();

  void Swap(stUpdateSvrCfg* other);

  // implements Message ----------------------------------------------

  stUpdateSvrCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUpdateSvrCfg& from);
  void MergeFrom(const stUpdateSvrCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUpdateSvrCfg_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUpdateSvrCfg_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUpdateSvrCfg_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUpdateSvrCfg_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUpdateSvrCfg_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUpdateSvrCfg_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUpdateSvrCfg_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUpdateSvrCfg_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUpdateSvrCfg_ProtoModID_Parse(name, value);
  }

  typedef stUpdateSvrCfg_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUpdateSvrCfg_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUpdateSvrCfg_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUpdateSvrCfg_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUpdateSvrCfg_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUpdateSvrCfg_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUpdateSvrCfg_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUpdateSvrCfg_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUpdateSvrCfg_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Global.stServerCfgPair cfgPair = 1;
  inline int cfgpair_size() const;
  inline void clear_cfgpair();
  static const int kCfgPairFieldNumber = 1;
  inline const ::Global::stServerCfgPair& cfgpair(int index) const;
  inline ::Global::stServerCfgPair* mutable_cfgpair(int index);
  inline ::Global::stServerCfgPair* add_cfgpair();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >&
      cfgpair() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >*
      mutable_cfgpair();

  // @@protoc_insertion_point(class_scope:Global.stUpdateSvrCfg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair > cfgpair_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUpdateSvrCfg* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyWebOnlineNum : public ::google::protobuf::Message {
 public:
  stNotifyWebOnlineNum();
  virtual ~stNotifyWebOnlineNum();

  stNotifyWebOnlineNum(const stNotifyWebOnlineNum& from);

  inline stNotifyWebOnlineNum& operator=(const stNotifyWebOnlineNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyWebOnlineNum& default_instance();

  void Swap(stNotifyWebOnlineNum* other);

  // implements Message ----------------------------------------------

  stNotifyWebOnlineNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyWebOnlineNum& from);
  void MergeFrom(const stNotifyWebOnlineNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyWebOnlineNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyWebOnlineNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyWebOnlineNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyWebOnlineNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyWebOnlineNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyWebOnlineNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyWebOnlineNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyWebOnlineNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyWebOnlineNum_ProtoModID_Parse(name, value);
  }

  typedef stNotifyWebOnlineNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyWebOnlineNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyWebOnlineNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyWebOnlineNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyWebOnlineNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyWebOnlineNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyWebOnlineNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyWebOnlineNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyWebOnlineNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stNotifyWebOnlineNum)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyWebOnlineNum* default_instance_;
};
// -------------------------------------------------------------------

class stEnterSelectPage : public ::google::protobuf::Message {
 public:
  stEnterSelectPage();
  virtual ~stEnterSelectPage();

  stEnterSelectPage(const stEnterSelectPage& from);

  inline stEnterSelectPage& operator=(const stEnterSelectPage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnterSelectPage& default_instance();

  void Swap(stEnterSelectPage* other);

  // implements Message ----------------------------------------------

  stEnterSelectPage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnterSelectPage& from);
  void MergeFrom(const stEnterSelectPage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEnterSelectPage_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEnterSelectPage_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEnterSelectPage_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEnterSelectPage_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEnterSelectPage_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEnterSelectPage_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEnterSelectPage_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEnterSelectPage_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEnterSelectPage_ProtoModID_Parse(name, value);
  }

  typedef stEnterSelectPage_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEnterSelectPage_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEnterSelectPage_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEnterSelectPage_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEnterSelectPage_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEnterSelectPage_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEnterSelectPage_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEnterSelectPage_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEnterSelectPage_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string deviceID = 2;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 2;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional uint32 opID = 3;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpIDFieldNumber = 3;
  inline ::google::protobuf::uint32 opid() const;
  inline void set_opid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stEnterSelectPage)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_opid();
  inline void clear_has_opid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* deviceid_;
  ::google::protobuf::uint32 opid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stEnterSelectPage* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyWebCreateRole : public ::google::protobuf::Message {
 public:
  stNotifyWebCreateRole();
  virtual ~stNotifyWebCreateRole();

  stNotifyWebCreateRole(const stNotifyWebCreateRole& from);

  inline stNotifyWebCreateRole& operator=(const stNotifyWebCreateRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyWebCreateRole& default_instance();

  void Swap(stNotifyWebCreateRole* other);

  // implements Message ----------------------------------------------

  stNotifyWebCreateRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyWebCreateRole& from);
  void MergeFrom(const stNotifyWebCreateRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyWebCreateRole_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyWebCreateRole_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyWebCreateRole_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyWebCreateRole_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyWebCreateRole_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyWebCreateRole_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyWebCreateRole_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyWebCreateRole_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyWebCreateRole_ProtoModID_Parse(name, value);
  }

  typedef stNotifyWebCreateRole_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyWebCreateRole_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyWebCreateRole_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyWebCreateRole_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyWebCreateRole_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyWebCreateRole_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyWebCreateRole_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyWebCreateRole_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyWebCreateRole_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 opID = 2;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpIDFieldNumber = 2;
  inline ::google::protobuf::uint32 opid() const;
  inline void set_opid(::google::protobuf::uint32 value);

  // optional string deviceID = 3;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 3;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // @@protoc_insertion_point(class_scope:Global.stNotifyWebCreateRole)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_opid();
  inline void clear_has_opid();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* deviceid_;
  ::google::protobuf::uint32 opid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stNotifyWebCreateRole* default_instance_;
};
// -------------------------------------------------------------------

class stSendGuildLog : public ::google::protobuf::Message {
 public:
  stSendGuildLog();
  virtual ~stSendGuildLog();

  stSendGuildLog(const stSendGuildLog& from);

  inline stSendGuildLog& operator=(const stSendGuildLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendGuildLog& default_instance();

  void Swap(stSendGuildLog* other);

  // implements Message ----------------------------------------------

  stSendGuildLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendGuildLog& from);
  void MergeFrom(const stSendGuildLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendGuildLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendGuildLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendGuildLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendGuildLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendGuildLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendGuildLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendGuildLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendGuildLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendGuildLog_ProtoModID_Parse(name, value);
  }

  typedef stSendGuildLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendGuildLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendGuildLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendGuildLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendGuildLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendGuildLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendGuildLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendGuildLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendGuildLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 opID = 2;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpIDFieldNumber = 2;
  inline ::google::protobuf::uint32 opid() const;
  inline void set_opid(::google::protobuf::uint32 value);

  // optional uint32 charID = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 5;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 5;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 guildID = 6;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 6;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional string action = 7;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 7;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  inline ::std::string* release_action();
  inline void set_allocated_action(::std::string* action);

  // optional string opObjID = 8;
  inline bool has_opobjid() const;
  inline void clear_opobjid();
  static const int kOpObjIDFieldNumber = 8;
  inline const ::std::string& opobjid() const;
  inline void set_opobjid(const ::std::string& value);
  inline void set_opobjid(const char* value);
  inline void set_opobjid(const char* value, size_t size);
  inline ::std::string* mutable_opobjid();
  inline ::std::string* release_opobjid();
  inline void set_allocated_opobjid(::std::string* opobjid);

  // optional string name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Global.stSendGuildLog)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_opid();
  inline void clear_has_opid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_opobjid();
  inline void clear_has_opobjid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 opid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 viplv_;
  ::std::string* action_;
  ::std::string* opobjid_;
  ::std::string* name_;
  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSendGuildLog* default_instance_;
};
// -------------------------------------------------------------------

class sstSendGuildResLog : public ::google::protobuf::Message {
 public:
  sstSendGuildResLog();
  virtual ~sstSendGuildResLog();

  sstSendGuildResLog(const sstSendGuildResLog& from);

  inline sstSendGuildResLog& operator=(const sstSendGuildResLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sstSendGuildResLog& default_instance();

  void Swap(sstSendGuildResLog* other);

  // implements Message ----------------------------------------------

  sstSendGuildResLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sstSendGuildResLog& from);
  void MergeFrom(const sstSendGuildResLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef sstSendGuildResLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = sstSendGuildResLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return sstSendGuildResLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    sstSendGuildResLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    sstSendGuildResLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    sstSendGuildResLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return sstSendGuildResLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return sstSendGuildResLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return sstSendGuildResLog_ProtoModID_Parse(name, value);
  }

  typedef sstSendGuildResLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = sstSendGuildResLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return sstSendGuildResLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    sstSendGuildResLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    sstSendGuildResLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    sstSendGuildResLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return sstSendGuildResLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return sstSendGuildResLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return sstSendGuildResLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional string res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline const ::std::string& res() const;
  inline void set_res(const ::std::string& value);
  inline void set_res(const char* value);
  inline void set_res(const char* value, size_t size);
  inline ::std::string* mutable_res();
  inline ::std::string* release_res();
  inline void set_allocated_res(::std::string* res);

  // optional uint32 oldVal = 3;
  inline bool has_oldval() const;
  inline void clear_oldval();
  static const int kOldValFieldNumber = 3;
  inline ::google::protobuf::uint32 oldval() const;
  inline void set_oldval(::google::protobuf::uint32 value);

  // optional uint32 newVal = 4;
  inline bool has_newval() const;
  inline void clear_newval();
  static const int kNewValFieldNumber = 4;
  inline ::google::protobuf::uint32 newval() const;
  inline void set_newval(::google::protobuf::uint32 value);

  // optional string reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:Global.sstSendGuildResLog)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_oldval();
  inline void clear_has_oldval();
  inline void set_has_newval();
  inline void clear_has_newval();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* res_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 oldval_;
  ::std::string* reason_;
  ::google::protobuf::uint32 newval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static sstSendGuildResLog* default_instance_;
};
// -------------------------------------------------------------------

class stSendModuleLog : public ::google::protobuf::Message {
 public:
  stSendModuleLog();
  virtual ~stSendModuleLog();

  stSendModuleLog(const stSendModuleLog& from);

  inline stSendModuleLog& operator=(const stSendModuleLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendModuleLog& default_instance();

  void Swap(stSendModuleLog* other);

  // implements Message ----------------------------------------------

  stSendModuleLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendModuleLog& from);
  void MergeFrom(const stSendModuleLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendModuleLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendModuleLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendModuleLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendModuleLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendModuleLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendModuleLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendModuleLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendModuleLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendModuleLog_ProtoModID_Parse(name, value);
  }

  typedef stSendModuleLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendModuleLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendModuleLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendModuleLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendModuleLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendModuleLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendModuleLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendModuleLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendModuleLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 opID = 2;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpIDFieldNumber = 2;
  inline ::google::protobuf::uint32 opid() const;
  inline void set_opid(::google::protobuf::uint32 value);

  // optional uint32 charID = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 5;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 5;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional string module = 6;
  inline bool has_module() const;
  inline void clear_module();
  static const int kModuleFieldNumber = 6;
  inline const ::std::string& module() const;
  inline void set_module(const ::std::string& value);
  inline void set_module(const char* value);
  inline void set_module(const char* value, size_t size);
  inline ::std::string* mutable_module();
  inline ::std::string* release_module();
  inline void set_allocated_module(::std::string* module);

  // optional uint32 copymapID = 7;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 7;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // optional string otherCharID = 8;
  inline bool has_othercharid() const;
  inline void clear_othercharid();
  static const int kOtherCharIDFieldNumber = 8;
  inline const ::std::string& othercharid() const;
  inline void set_othercharid(const ::std::string& value);
  inline void set_othercharid(const char* value);
  inline void set_othercharid(const char* value, size_t size);
  inline ::std::string* mutable_othercharid();
  inline ::std::string* release_othercharid();
  inline void set_allocated_othercharid(::std::string* othercharid);

  // optional bool result = 9;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 9;
  inline bool result() const;
  inline void set_result(bool value);

  // optional uint32 oldRank = 10;
  inline bool has_oldrank() const;
  inline void clear_oldrank();
  static const int kOldRankFieldNumber = 10;
  inline ::google::protobuf::uint32 oldrank() const;
  inline void set_oldrank(::google::protobuf::uint32 value);

  // optional uint32 newRank = 11;
  inline bool has_newrank() const;
  inline void clear_newrank();
  static const int kNewRankFieldNumber = 11;
  inline ::google::protobuf::uint32 newrank() const;
  inline void set_newrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stSendModuleLog)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_opid();
  inline void clear_has_opid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_module();
  inline void clear_has_module();
  inline void set_has_copymapid();
  inline void clear_has_copymapid();
  inline void set_has_othercharid();
  inline void clear_has_othercharid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_oldrank();
  inline void clear_has_oldrank();
  inline void set_has_newrank();
  inline void clear_has_newrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 opid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 viplv_;
  ::std::string* module_;
  ::std::string* othercharid_;
  ::google::protobuf::uint32 copymapid_;
  bool result_;
  ::google::protobuf::uint32 oldrank_;
  ::google::protobuf::uint32 newrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSendModuleLog* default_instance_;
};
// -------------------------------------------------------------------

class stReqGetTxGiftBag : public ::google::protobuf::Message {
 public:
  stReqGetTxGiftBag();
  virtual ~stReqGetTxGiftBag();

  stReqGetTxGiftBag(const stReqGetTxGiftBag& from);

  inline stReqGetTxGiftBag& operator=(const stReqGetTxGiftBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGetTxGiftBag& default_instance();

  void Swap(stReqGetTxGiftBag* other);

  // implements Message ----------------------------------------------

  stReqGetTxGiftBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGetTxGiftBag& from);
  void MergeFrom(const stReqGetTxGiftBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGetTxGiftBag_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGetTxGiftBag_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGetTxGiftBag_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGetTxGiftBag_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGetTxGiftBag_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGetTxGiftBag_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGetTxGiftBag_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGetTxGiftBag_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGetTxGiftBag_ProtoModID_Parse(name, value);
  }

  typedef stReqGetTxGiftBag_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGetTxGiftBag_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGetTxGiftBag_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGetTxGiftBag_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGetTxGiftBag_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGetTxGiftBag_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGetTxGiftBag_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGetTxGiftBag_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGetTxGiftBag_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 webConnID = 1;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 1;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional string openid = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional uint32 taskID = 3;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 3;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional uint32 arewardID = 4;
  inline bool has_arewardid() const;
  inline void clear_arewardid();
  static const int kArewardIDFieldNumber = 4;
  inline ::google::protobuf::uint32 arewardid() const;
  inline void set_arewardid(::google::protobuf::uint32 value);

  // optional string action = 5;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 5;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  inline ::std::string* release_action();
  inline void set_allocated_action(::std::string* action);

  // optional string billno = 6;
  inline bool has_billno() const;
  inline void clear_billno();
  static const int kBillnoFieldNumber = 6;
  inline const ::std::string& billno() const;
  inline void set_billno(const ::std::string& value);
  inline void set_billno(const char* value);
  inline void set_billno(const char* value, size_t size);
  inline ::std::string* mutable_billno();
  inline ::std::string* release_billno();
  inline void set_allocated_billno(::std::string* billno);

  // optional uint32 charID = 7;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 7;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stReqGetTxGiftBag)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_arewardid();
  inline void clear_has_arewardid();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_billno();
  inline void clear_has_billno();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::google::protobuf::uint32 webconnid_;
  ::google::protobuf::uint32 taskid_;
  ::std::string* action_;
  ::google::protobuf::uint32 arewardid_;
  ::google::protobuf::uint32 charid_;
  ::std::string* billno_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqGetTxGiftBag* default_instance_;
};
// -------------------------------------------------------------------

class stRetGetTxGiftBag : public ::google::protobuf::Message {
 public:
  stRetGetTxGiftBag();
  virtual ~stRetGetTxGiftBag();

  stRetGetTxGiftBag(const stRetGetTxGiftBag& from);

  inline stRetGetTxGiftBag& operator=(const stRetGetTxGiftBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetGetTxGiftBag& default_instance();

  void Swap(stRetGetTxGiftBag* other);

  // implements Message ----------------------------------------------

  stRetGetTxGiftBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetGetTxGiftBag& from);
  void MergeFrom(const stRetGetTxGiftBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetGetTxGiftBag_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetGetTxGiftBag_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetGetTxGiftBag_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetGetTxGiftBag_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetGetTxGiftBag_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetGetTxGiftBag_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetGetTxGiftBag_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetGetTxGiftBag_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetGetTxGiftBag_ProtoModID_Parse(name, value);
  }

  typedef stRetGetTxGiftBag_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetGetTxGiftBag_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetGetTxGiftBag_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetGetTxGiftBag_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetGetTxGiftBag_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetGetTxGiftBag_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetGetTxGiftBag_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetGetTxGiftBag_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetGetTxGiftBag_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 webConnID = 1;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 1;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Global.stRetGetTxGiftBag)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 webconnid_;
  ::google::protobuf::uint32 result_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stRetGetTxGiftBag* default_instance_;
};
// -------------------------------------------------------------------

class stUpdateSvrOpenTime : public ::google::protobuf::Message {
 public:
  stUpdateSvrOpenTime();
  virtual ~stUpdateSvrOpenTime();

  stUpdateSvrOpenTime(const stUpdateSvrOpenTime& from);

  inline stUpdateSvrOpenTime& operator=(const stUpdateSvrOpenTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUpdateSvrOpenTime& default_instance();

  void Swap(stUpdateSvrOpenTime* other);

  // implements Message ----------------------------------------------

  stUpdateSvrOpenTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUpdateSvrOpenTime& from);
  void MergeFrom(const stUpdateSvrOpenTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUpdateSvrOpenTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUpdateSvrOpenTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUpdateSvrOpenTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUpdateSvrOpenTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUpdateSvrOpenTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUpdateSvrOpenTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUpdateSvrOpenTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUpdateSvrOpenTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUpdateSvrOpenTime_ProtoModID_Parse(name, value);
  }

  typedef stUpdateSvrOpenTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUpdateSvrOpenTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUpdateSvrOpenTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUpdateSvrOpenTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUpdateSvrOpenTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUpdateSvrOpenTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stUpdateSvrOpenTime)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUpdateSvrOpenTime* default_instance_;
};
// -------------------------------------------------------------------

class stResourceChgLog : public ::google::protobuf::Message {
 public:
  stResourceChgLog();
  virtual ~stResourceChgLog();

  stResourceChgLog(const stResourceChgLog& from);

  inline stResourceChgLog& operator=(const stResourceChgLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResourceChgLog& default_instance();

  void Swap(stResourceChgLog* other);

  // implements Message ----------------------------------------------

  stResourceChgLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResourceChgLog& from);
  void MergeFrom(const stResourceChgLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResourceChgLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResourceChgLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResourceChgLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResourceChgLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResourceChgLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResourceChgLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResourceChgLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResourceChgLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResourceChgLog_ProtoModID_Parse(name, value);
  }

  typedef stResourceChgLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResourceChgLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResourceChgLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResourceChgLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResourceChgLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResourceChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResourceChgLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResourceChgLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResourceChgLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 resID = 4;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIDFieldNumber = 4;
  inline ::google::protobuf::uint32 resid() const;
  inline void set_resid(::google::protobuf::uint32 value);

  // optional uint32 addNum = 5;
  inline bool has_addnum() const;
  inline void clear_addnum();
  static const int kAddNumFieldNumber = 5;
  inline ::google::protobuf::uint32 addnum() const;
  inline void set_addnum(::google::protobuf::uint32 value);

  // optional uint32 oldValue = 6;
  inline bool has_oldvalue() const;
  inline void clear_oldvalue();
  static const int kOldValueFieldNumber = 6;
  inline ::google::protobuf::uint32 oldvalue() const;
  inline void set_oldvalue(::google::protobuf::uint32 value);

  // optional uint32 newValue = 7;
  inline bool has_newvalue() const;
  inline void clear_newvalue();
  static const int kNewValueFieldNumber = 7;
  inline ::google::protobuf::uint32 newvalue() const;
  inline void set_newvalue(::google::protobuf::uint32 value);

  // optional string reason = 8;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 8;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:Global.stResourceChgLog)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_resid();
  inline void clear_has_resid();
  inline void set_has_addnum();
  inline void clear_has_addnum();
  inline void set_has_oldvalue();
  inline void clear_has_oldvalue();
  inline void set_has_newvalue();
  inline void clear_has_newvalue();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 resid_;
  ::std::string* name_;
  ::google::protobuf::uint32 addnum_;
  ::google::protobuf::uint32 oldvalue_;
  ::std::string* reason_;
  ::google::protobuf::uint32 newvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stResourceChgLog* default_instance_;
};
// -------------------------------------------------------------------

class stUseInviteCode : public ::google::protobuf::Message {
 public:
  stUseInviteCode();
  virtual ~stUseInviteCode();

  stUseInviteCode(const stUseInviteCode& from);

  inline stUseInviteCode& operator=(const stUseInviteCode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUseInviteCode& default_instance();

  void Swap(stUseInviteCode* other);

  // implements Message ----------------------------------------------

  stUseInviteCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUseInviteCode& from);
  void MergeFrom(const stUseInviteCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUseInviteCode_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUseInviteCode_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUseInviteCode_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUseInviteCode_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUseInviteCode_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUseInviteCode_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUseInviteCode_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUseInviteCode_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUseInviteCode_ProtoModID_Parse(name, value);
  }

  typedef stUseInviteCode_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUseInviteCode_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUseInviteCode_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUseInviteCode_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUseInviteCode_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUseInviteCode_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUseInviteCode_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUseInviteCode_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUseInviteCode_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional string account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string userId = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 4;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:Global.stUseInviteCode)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* code_;
  ::std::string* account_;
  ::std::string* userid_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUseInviteCode* default_instance_;
};
// -------------------------------------------------------------------

class stUseInviteCodeCb : public ::google::protobuf::Message {
 public:
  stUseInviteCodeCb();
  virtual ~stUseInviteCodeCb();

  stUseInviteCodeCb(const stUseInviteCodeCb& from);

  inline stUseInviteCodeCb& operator=(const stUseInviteCodeCb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUseInviteCodeCb& default_instance();

  void Swap(stUseInviteCodeCb* other);

  // implements Message ----------------------------------------------

  stUseInviteCodeCb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUseInviteCodeCb& from);
  void MergeFrom(const stUseInviteCodeCb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUseInviteCodeCb_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUseInviteCodeCb_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUseInviteCodeCb_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUseInviteCodeCb_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUseInviteCodeCb_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUseInviteCodeCb_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUseInviteCodeCb_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUseInviteCodeCb_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUseInviteCodeCb_ProtoModID_Parse(name, value);
  }

  typedef stUseInviteCodeCb_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUseInviteCodeCb_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUseInviteCodeCb_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUseInviteCodeCb_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUseInviteCodeCb_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUseInviteCodeCb_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUseInviteCodeCb_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUseInviteCodeCb_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUseInviteCodeCb_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional string account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string userId = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 4;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:Global.stUseInviteCodeCb)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::std::string* account_;
  ::std::string* userid_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stUseInviteCodeCb* default_instance_;
};
// -------------------------------------------------------------------

class stReqLimitPetActivityData : public ::google::protobuf::Message {
 public:
  stReqLimitPetActivityData();
  virtual ~stReqLimitPetActivityData();

  stReqLimitPetActivityData(const stReqLimitPetActivityData& from);

  inline stReqLimitPetActivityData& operator=(const stReqLimitPetActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLimitPetActivityData& default_instance();

  void Swap(stReqLimitPetActivityData* other);

  // implements Message ----------------------------------------------

  stReqLimitPetActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLimitPetActivityData& from);
  void MergeFrom(const stReqLimitPetActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLimitPetActivityData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLimitPetActivityData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLimitPetActivityData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLimitPetActivityData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLimitPetActivityData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLimitPetActivityData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLimitPetActivityData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLimitPetActivityData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLimitPetActivityData_ProtoModID_Parse(name, value);
  }

  typedef stReqLimitPetActivityData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLimitPetActivityData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLimitPetActivityData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLimitPetActivityData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLimitPetActivityData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLimitPetActivityData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLimitPetActivityData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLimitPetActivityData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLimitPetActivityData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Global.stReqLimitPetActivityData)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stReqLimitPetActivityData* default_instance_;
};
// -------------------------------------------------------------------

class stAcitivityLimitPetItem : public ::google::protobuf::Message {
 public:
  stAcitivityLimitPetItem();
  virtual ~stAcitivityLimitPetItem();

  stAcitivityLimitPetItem(const stAcitivityLimitPetItem& from);

  inline stAcitivityLimitPetItem& operator=(const stAcitivityLimitPetItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAcitivityLimitPetItem& default_instance();

  void Swap(stAcitivityLimitPetItem* other);

  // implements Message ----------------------------------------------

  stAcitivityLimitPetItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAcitivityLimitPetItem& from);
  void MergeFrom(const stAcitivityLimitPetItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 activiyId = 2;
  inline bool has_activiyid() const;
  inline void clear_activiyid();
  static const int kActiviyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 activiyid() const;
  inline void set_activiyid(::google::protobuf::uint32 value);

  // optional uint32 startTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 endTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stAcitivityLimitPetItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_activiyid();
  inline void clear_has_activiyid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 activiyid_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stAcitivityLimitPetItem* default_instance_;
};
// -------------------------------------------------------------------

class stSendLimitPetActivityData : public ::google::protobuf::Message {
 public:
  stSendLimitPetActivityData();
  virtual ~stSendLimitPetActivityData();

  stSendLimitPetActivityData(const stSendLimitPetActivityData& from);

  inline stSendLimitPetActivityData& operator=(const stSendLimitPetActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendLimitPetActivityData& default_instance();

  void Swap(stSendLimitPetActivityData* other);

  // implements Message ----------------------------------------------

  stSendLimitPetActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendLimitPetActivityData& from);
  void MergeFrom(const stSendLimitPetActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendLimitPetActivityData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendLimitPetActivityData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendLimitPetActivityData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendLimitPetActivityData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendLimitPetActivityData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendLimitPetActivityData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendLimitPetActivityData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendLimitPetActivityData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendLimitPetActivityData_ProtoModID_Parse(name, value);
  }

  typedef stSendLimitPetActivityData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendLimitPetActivityData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendLimitPetActivityData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendLimitPetActivityData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendLimitPetActivityData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendLimitPetActivityData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendLimitPetActivityData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendLimitPetActivityData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendLimitPetActivityData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // repeated .Global.stAcitivityLimitPetItem item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::Global::stAcitivityLimitPetItem& item(int index) const;
  inline ::Global::stAcitivityLimitPetItem* mutable_item(int index);
  inline ::Global::stAcitivityLimitPetItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stAcitivityLimitPetItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stAcitivityLimitPetItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:Global.stSendLimitPetActivityData)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::RepeatedPtrField< ::Global::stAcitivityLimitPetItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSendLimitPetActivityData* default_instance_;
};
// -------------------------------------------------------------------

class stSendShutDown : public ::google::protobuf::Message {
 public:
  stSendShutDown();
  virtual ~stSendShutDown();

  stSendShutDown(const stSendShutDown& from);

  inline stSendShutDown& operator=(const stSendShutDown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendShutDown& default_instance();

  void Swap(stSendShutDown* other);

  // implements Message ----------------------------------------------

  stSendShutDown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendShutDown& from);
  void MergeFrom(const stSendShutDown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendShutDown_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendShutDown_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendShutDown_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendShutDown_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendShutDown_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendShutDown_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendShutDown_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendShutDown_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendShutDown_ProtoModID_Parse(name, value);
  }

  typedef stSendShutDown_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendShutDown_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendShutDown_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendShutDown_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendShutDown_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendShutDown_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendShutDown_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendShutDown_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendShutDown_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Global.stSendShutDown)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stSendShutDown* default_instance_;
};
// -------------------------------------------------------------------

class stWeb2GlobalQueryUserNft : public ::google::protobuf::Message {
 public:
  stWeb2GlobalQueryUserNft();
  virtual ~stWeb2GlobalQueryUserNft();

  stWeb2GlobalQueryUserNft(const stWeb2GlobalQueryUserNft& from);

  inline stWeb2GlobalQueryUserNft& operator=(const stWeb2GlobalQueryUserNft& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stWeb2GlobalQueryUserNft& default_instance();

  void Swap(stWeb2GlobalQueryUserNft* other);

  // implements Message ----------------------------------------------

  stWeb2GlobalQueryUserNft* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stWeb2GlobalQueryUserNft& from);
  void MergeFrom(const stWeb2GlobalQueryUserNft& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stWeb2GlobalQueryUserNft_ProtoModID ProtoModID;
  static const ProtoModID ModID = stWeb2GlobalQueryUserNft_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stWeb2GlobalQueryUserNft_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stWeb2GlobalQueryUserNft_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stWeb2GlobalQueryUserNft_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stWeb2GlobalQueryUserNft_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stWeb2GlobalQueryUserNft_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stWeb2GlobalQueryUserNft_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stWeb2GlobalQueryUserNft_ProtoModID_Parse(name, value);
  }

  typedef stWeb2GlobalQueryUserNft_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stWeb2GlobalQueryUserNft_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stWeb2GlobalQueryUserNft_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stWeb2GlobalQueryUserNft_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stWeb2GlobalQueryUserNft_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stWeb2GlobalQueryUserNft_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stWeb2GlobalQueryUserNft_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stWeb2GlobalQueryUserNft_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stWeb2GlobalQueryUserNft_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 webConnID = 1;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 1;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stWeb2GlobalQueryUserNft)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 webconnid_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stWeb2GlobalQueryUserNft* default_instance_;
};
// -------------------------------------------------------------------

class stGlobal2WebQueryUserNftResult : public ::google::protobuf::Message {
 public:
  stGlobal2WebQueryUserNftResult();
  virtual ~stGlobal2WebQueryUserNftResult();

  stGlobal2WebQueryUserNftResult(const stGlobal2WebQueryUserNftResult& from);

  inline stGlobal2WebQueryUserNftResult& operator=(const stGlobal2WebQueryUserNftResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGlobal2WebQueryUserNftResult& default_instance();

  void Swap(stGlobal2WebQueryUserNftResult* other);

  // implements Message ----------------------------------------------

  stGlobal2WebQueryUserNftResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGlobal2WebQueryUserNftResult& from);
  void MergeFrom(const stGlobal2WebQueryUserNftResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGlobal2WebQueryUserNftResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGlobal2WebQueryUserNftResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGlobal2WebQueryUserNftResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGlobal2WebQueryUserNftResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGlobal2WebQueryUserNftResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGlobal2WebQueryUserNftResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGlobal2WebQueryUserNftResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGlobal2WebQueryUserNftResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGlobal2WebQueryUserNftResult_ProtoModID_Parse(name, value);
  }

  typedef stGlobal2WebQueryUserNftResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGlobal2WebQueryUserNftResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGlobal2WebQueryUserNftResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGlobal2WebQueryUserNftResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGlobal2WebQueryUserNftResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGlobal2WebQueryUserNftResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGlobal2WebQueryUserNftResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGlobal2WebQueryUserNftResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGlobal2WebQueryUserNftResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 webConnID = 1;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 1;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // repeated .Global.stNftItem data = 4;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::Global::stNftItem& data(int index) const;
  inline ::Global::stNftItem* mutable_data(int index);
  inline ::Global::stNftItem* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Global::stNftItem >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Global::stNftItem >*
      mutable_data();

  // optional uint32 vip = 5;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 5;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGlobal2WebQueryUserNftResult)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_vip();
  inline void clear_has_vip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 webconnid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::RepeatedPtrField< ::Global::stNftItem > data_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 vip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGlobal2WebQueryUserNftResult* default_instance_;
};
// -------------------------------------------------------------------

class stWeb2GlobalChangeNftItem : public ::google::protobuf::Message {
 public:
  stWeb2GlobalChangeNftItem();
  virtual ~stWeb2GlobalChangeNftItem();

  stWeb2GlobalChangeNftItem(const stWeb2GlobalChangeNftItem& from);

  inline stWeb2GlobalChangeNftItem& operator=(const stWeb2GlobalChangeNftItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stWeb2GlobalChangeNftItem& default_instance();

  void Swap(stWeb2GlobalChangeNftItem* other);

  // implements Message ----------------------------------------------

  stWeb2GlobalChangeNftItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stWeb2GlobalChangeNftItem& from);
  void MergeFrom(const stWeb2GlobalChangeNftItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stWeb2GlobalChangeNftItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stWeb2GlobalChangeNftItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stWeb2GlobalChangeNftItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stWeb2GlobalChangeNftItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stWeb2GlobalChangeNftItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stWeb2GlobalChangeNftItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stWeb2GlobalChangeNftItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stWeb2GlobalChangeNftItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stWeb2GlobalChangeNftItem_ProtoModID_Parse(name, value);
  }

  typedef stWeb2GlobalChangeNftItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stWeb2GlobalChangeNftItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stWeb2GlobalChangeNftItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stWeb2GlobalChangeNftItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stWeb2GlobalChangeNftItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stWeb2GlobalChangeNftItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stWeb2GlobalChangeNftItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stWeb2GlobalChangeNftItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stWeb2GlobalChangeNftItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 webConnID = 1;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 1;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Global.stWeb2GlobalChangeNftItem)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 webconnid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stWeb2GlobalChangeNftItem* default_instance_;
};
// -------------------------------------------------------------------

class stGlobal2WebChangeNftItemResult : public ::google::protobuf::Message {
 public:
  stGlobal2WebChangeNftItemResult();
  virtual ~stGlobal2WebChangeNftItemResult();

  stGlobal2WebChangeNftItemResult(const stGlobal2WebChangeNftItemResult& from);

  inline stGlobal2WebChangeNftItemResult& operator=(const stGlobal2WebChangeNftItemResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGlobal2WebChangeNftItemResult& default_instance();

  void Swap(stGlobal2WebChangeNftItemResult* other);

  // implements Message ----------------------------------------------

  stGlobal2WebChangeNftItemResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGlobal2WebChangeNftItemResult& from);
  void MergeFrom(const stGlobal2WebChangeNftItemResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGlobal2WebChangeNftItemResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGlobal2WebChangeNftItemResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGlobal2WebChangeNftItemResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGlobal2WebChangeNftItemResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGlobal2WebChangeNftItemResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGlobal2WebChangeNftItemResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGlobal2WebChangeNftItemResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGlobal2WebChangeNftItemResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGlobal2WebChangeNftItemResult_ProtoModID_Parse(name, value);
  }

  typedef stGlobal2WebChangeNftItemResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGlobal2WebChangeNftItemResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGlobal2WebChangeNftItemResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGlobal2WebChangeNftItemResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGlobal2WebChangeNftItemResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGlobal2WebChangeNftItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGlobal2WebChangeNftItemResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGlobal2WebChangeNftItemResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGlobal2WebChangeNftItemResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 webConnID = 1;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 1;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Global.stGlobal2WebChangeNftItemResult)
 private:
  inline void set_has_webconnid();
  inline void clear_has_webconnid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 webconnid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Global_2eproto();
  friend void protobuf_AssignDesc_Global_2eproto();
  friend void protobuf_ShutdownFile_Global_2eproto();

  void InitAsDefaultInstance();
  static stGlobal2WebChangeNftItemResult* default_instance_;
};
// ===================================================================


// ===================================================================

// stLoginGlobal

// optional uint32 svrType = 1;
inline bool stLoginGlobal::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLoginGlobal::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLoginGlobal::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLoginGlobal::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 stLoginGlobal::svrtype() const {
  return svrtype_;
}
inline void stLoginGlobal::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
}

// optional uint32 svrID = 2;
inline bool stLoginGlobal::has_svrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLoginGlobal::set_has_svrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLoginGlobal::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLoginGlobal::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 stLoginGlobal::svrid() const {
  return svrid_;
}
inline void stLoginGlobal::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// optional string ip = 3;
inline bool stLoginGlobal::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stLoginGlobal::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stLoginGlobal::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stLoginGlobal::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stLoginGlobal::ip() const {
  return *ip_;
}
inline void stLoginGlobal::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stLoginGlobal::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stLoginGlobal::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stLoginGlobal::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stLoginGlobal::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stLoginGlobal::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 4;
inline bool stLoginGlobal::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stLoginGlobal::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stLoginGlobal::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stLoginGlobal::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 stLoginGlobal::port() const {
  return port_;
}
inline void stLoginGlobal::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// stCreateRole

// optional string account = 1;
inline bool stCreateRole::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCreateRole::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCreateRole::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCreateRole::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stCreateRole::account() const {
  return *account_;
}
inline void stCreateRole::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stCreateRole::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stCreateRole::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCreateRole::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stCreateRole::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCreateRole::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool stCreateRole::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCreateRole::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCreateRole::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCreateRole::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stCreateRole::name() const {
  return *name_;
}
inline void stCreateRole::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stCreateRole::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stCreateRole::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCreateRole::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stCreateRole::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCreateRole::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 gateID = 3;
inline bool stCreateRole::has_gateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCreateRole::set_has_gateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCreateRole::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCreateRole::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 stCreateRole::gateid() const {
  return gateid_;
}
inline void stCreateRole::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// optional uint32 job = 4;
inline bool stCreateRole::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stCreateRole::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stCreateRole::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stCreateRole::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stCreateRole::job() const {
  return job_;
}
inline void stCreateRole::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stCreateRole::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stCreateRole::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stCreateRole::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stCreateRole::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stCreateRole::sex() const {
  return sex_;
}
inline void stCreateRole::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 headID = 6;
inline bool stCreateRole::has_headid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stCreateRole::set_has_headid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stCreateRole::clear_has_headid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stCreateRole::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stCreateRole::headid() const {
  return headid_;
}
inline void stCreateRole::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 faceID = 7;
inline bool stCreateRole::has_faceid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stCreateRole::set_has_faceid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stCreateRole::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stCreateRole::clear_faceid() {
  faceid_ = 0u;
  clear_has_faceid();
}
inline ::google::protobuf::uint32 stCreateRole::faceid() const {
  return faceid_;
}
inline void stCreateRole::set_faceid(::google::protobuf::uint32 value) {
  set_has_faceid();
  faceid_ = value;
}

// optional string clientIP = 8;
inline bool stCreateRole::has_clientip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stCreateRole::set_has_clientip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stCreateRole::clear_has_clientip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stCreateRole::clear_clientip() {
  if (clientip_ != &::google::protobuf::internal::kEmptyString) {
    clientip_->clear();
  }
  clear_has_clientip();
}
inline const ::std::string& stCreateRole::clientip() const {
  return *clientip_;
}
inline void stCreateRole::set_clientip(const ::std::string& value) {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::kEmptyString) {
    clientip_ = new ::std::string;
  }
  clientip_->assign(value);
}
inline void stCreateRole::set_clientip(const char* value) {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::kEmptyString) {
    clientip_ = new ::std::string;
  }
  clientip_->assign(value);
}
inline void stCreateRole::set_clientip(const char* value, size_t size) {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::kEmptyString) {
    clientip_ = new ::std::string;
  }
  clientip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCreateRole::mutable_clientip() {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::kEmptyString) {
    clientip_ = new ::std::string;
  }
  return clientip_;
}
inline ::std::string* stCreateRole::release_clientip() {
  clear_has_clientip();
  if (clientip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientip_;
    clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCreateRole::set_allocated_clientip(::std::string* clientip) {
  if (clientip_ != &::google::protobuf::internal::kEmptyString) {
    delete clientip_;
  }
  if (clientip) {
    set_has_clientip();
    clientip_ = clientip;
  } else {
    clear_has_clientip();
    clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceID = 9;
inline bool stCreateRole::has_deviceid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stCreateRole::set_has_deviceid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stCreateRole::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stCreateRole::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& stCreateRole::deviceid() const {
  return *deviceid_;
}
inline void stCreateRole::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stCreateRole::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stCreateRole::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCreateRole::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* stCreateRole::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCreateRole::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 opID = 10;
inline bool stCreateRole::has_opid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stCreateRole::set_has_opid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stCreateRole::clear_has_opid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stCreateRole::clear_opid() {
  opid_ = 0u;
  clear_has_opid();
}
inline ::google::protobuf::uint32 stCreateRole::opid() const {
  return opid_;
}
inline void stCreateRole::set_opid(::google::protobuf::uint32 value) {
  set_has_opid();
  opid_ = value;
}

// optional string channelID = 11;
inline bool stCreateRole::has_channelid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stCreateRole::set_has_channelid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stCreateRole::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stCreateRole::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& stCreateRole::channelid() const {
  return *channelid_;
}
inline void stCreateRole::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void stCreateRole::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void stCreateRole::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCreateRole::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* stCreateRole::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCreateRole::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 serverID = 12;
inline bool stCreateRole::has_serverid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stCreateRole::set_has_serverid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stCreateRole::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stCreateRole::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 stCreateRole::serverid() const {
  return serverid_;
}
inline void stCreateRole::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// stCreateRoleResult

// optional uint32 retCode = 1;
inline bool stCreateRoleResult::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCreateRoleResult::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCreateRoleResult::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCreateRoleResult::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 stCreateRoleResult::retcode() const {
  return retcode_;
}
inline void stCreateRoleResult::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional string account = 2;
inline bool stCreateRoleResult::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCreateRoleResult::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCreateRoleResult::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCreateRoleResult::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stCreateRoleResult::account() const {
  return *account_;
}
inline void stCreateRoleResult::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stCreateRoleResult::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stCreateRoleResult::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCreateRoleResult::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stCreateRoleResult::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCreateRoleResult::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID = 3;
inline bool stCreateRoleResult::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCreateRoleResult::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCreateRoleResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCreateRoleResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCreateRoleResult::charid() const {
  return charid_;
}
inline void stCreateRoleResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 4;
inline bool stCreateRoleResult::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stCreateRoleResult::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stCreateRoleResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stCreateRoleResult::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stCreateRoleResult::name() const {
  return *name_;
}
inline void stCreateRoleResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stCreateRoleResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stCreateRoleResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCreateRoleResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stCreateRoleResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCreateRoleResult::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 5;
inline bool stCreateRoleResult::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stCreateRoleResult::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stCreateRoleResult::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stCreateRoleResult::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stCreateRoleResult::level() const {
  return level_;
}
inline void stCreateRoleResult::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 6;
inline bool stCreateRoleResult::has_job() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stCreateRoleResult::set_has_job() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stCreateRoleResult::clear_has_job() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stCreateRoleResult::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stCreateRoleResult::job() const {
  return job_;
}
inline void stCreateRoleResult::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 7;
inline bool stCreateRoleResult::has_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stCreateRoleResult::set_has_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stCreateRoleResult::clear_has_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stCreateRoleResult::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stCreateRoleResult::sex() const {
  return sex_;
}
inline void stCreateRoleResult::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 serverID = 8;
inline bool stCreateRoleResult::has_serverid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stCreateRoleResult::set_has_serverid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stCreateRoleResult::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stCreateRoleResult::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 stCreateRoleResult::serverid() const {
  return serverid_;
}
inline void stCreateRoleResult::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional uint32 createTime = 9;
inline bool stCreateRoleResult::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stCreateRoleResult::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stCreateRoleResult::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stCreateRoleResult::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 stCreateRoleResult::createtime() const {
  return createtime_;
}
inline void stCreateRoleResult::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// -------------------------------------------------------------------

// stReqSnapData

// optional string account = 1;
inline bool stReqSnapData::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSnapData::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSnapData::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSnapData::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stReqSnapData::account() const {
  return *account_;
}
inline void stReqSnapData::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stReqSnapData::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stReqSnapData::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqSnapData::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stReqSnapData::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqSnapData::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 gateID = 2;
inline bool stReqSnapData::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqSnapData::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqSnapData::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqSnapData::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 stReqSnapData::gateid() const {
  return gateid_;
}
inline void stReqSnapData::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// optional string ip = 3;
inline bool stReqSnapData::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqSnapData::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqSnapData::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqSnapData::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stReqSnapData::ip() const {
  return *ip_;
}
inline void stReqSnapData::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stReqSnapData::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stReqSnapData::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqSnapData::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stReqSnapData::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqSnapData::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceID = 4;
inline bool stReqSnapData::has_deviceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqSnapData::set_has_deviceid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqSnapData::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqSnapData::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& stReqSnapData::deviceid() const {
  return *deviceid_;
}
inline void stReqSnapData::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stReqSnapData::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stReqSnapData::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqSnapData::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* stReqSnapData::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqSnapData::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 opID = 5;
inline bool stReqSnapData::has_opid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stReqSnapData::set_has_opid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stReqSnapData::clear_has_opid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stReqSnapData::clear_opid() {
  opid_ = 0u;
  clear_has_opid();
}
inline ::google::protobuf::uint32 stReqSnapData::opid() const {
  return opid_;
}
inline void stReqSnapData::set_opid(::google::protobuf::uint32 value) {
  set_has_opid();
  opid_ = value;
}

// optional uint32 serverID = 6;
inline bool stReqSnapData::has_serverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stReqSnapData::set_has_serverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stReqSnapData::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stReqSnapData::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 stReqSnapData::serverid() const {
  return serverid_;
}
inline void stReqSnapData::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// stSnapData

// optional uint32 charID = 1;
inline bool stSnapData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSnapData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSnapData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSnapData::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSnapData::charid() const {
  return charid_;
}
inline void stSnapData::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSnapData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSnapData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSnapData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSnapData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSnapData::name() const {
  return *name_;
}
inline void stSnapData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSnapData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSnapData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSnapData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSnapData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSnapData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool stSnapData::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSnapData::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSnapData::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSnapData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSnapData::level() const {
  return level_;
}
inline void stSnapData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional string account = 4;
inline bool stSnapData::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSnapData::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSnapData::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSnapData::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stSnapData::account() const {
  return *account_;
}
inline void stSnapData::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stSnapData::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stSnapData::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSnapData::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stSnapData::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSnapData::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 5;
inline bool stSnapData::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSnapData::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSnapData::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSnapData::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSnapData::job() const {
  return job_;
}
inline void stSnapData::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 6;
inline bool stSnapData::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSnapData::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSnapData::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSnapData::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSnapData::sex() const {
  return sex_;
}
inline void stSnapData::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 serverID = 7;
inline bool stSnapData::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSnapData::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSnapData::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSnapData::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 stSnapData::serverid() const {
  return serverid_;
}
inline void stSnapData::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// stRetSnapData

// repeated .Global.stSnapData data = 1;
inline int stRetSnapData::data_size() const {
  return data_.size();
}
inline void stRetSnapData::clear_data() {
  data_.Clear();
}
inline const ::Global::stSnapData& stRetSnapData::data(int index) const {
  return data_.Get(index);
}
inline ::Global::stSnapData* stRetSnapData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Global::stSnapData* stRetSnapData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stSnapData >&
stRetSnapData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stSnapData >*
stRetSnapData::mutable_data() {
  return &data_;
}

// optional string account = 2;
inline bool stRetSnapData::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetSnapData::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetSnapData::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetSnapData::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stRetSnapData::account() const {
  return *account_;
}
inline void stRetSnapData::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stRetSnapData::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stRetSnapData::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetSnapData::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stRetSnapData::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetSnapData::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqLoadData

// optional uint32 gameSvrID = 1;
inline bool stReqLoadData::has_gamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLoadData::set_has_gamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLoadData::clear_has_gamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLoadData::clear_gamesvrid() {
  gamesvrid_ = 0u;
  clear_has_gamesvrid();
}
inline ::google::protobuf::uint32 stReqLoadData::gamesvrid() const {
  return gamesvrid_;
}
inline void stReqLoadData::set_gamesvrid(::google::protobuf::uint32 value) {
  set_has_gamesvrid();
  gamesvrid_ = value;
}

// optional uint32 gateSvrID = 2;
inline bool stReqLoadData::has_gatesvrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqLoadData::set_has_gatesvrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqLoadData::clear_has_gatesvrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqLoadData::clear_gatesvrid() {
  gatesvrid_ = 0u;
  clear_has_gatesvrid();
}
inline ::google::protobuf::uint32 stReqLoadData::gatesvrid() const {
  return gatesvrid_;
}
inline void stReqLoadData::set_gatesvrid(::google::protobuf::uint32 value) {
  set_has_gatesvrid();
  gatesvrid_ = value;
}

// optional string account = 3;
inline bool stReqLoadData::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqLoadData::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqLoadData::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqLoadData::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stReqLoadData::account() const {
  return *account_;
}
inline void stReqLoadData::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stReqLoadData::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stReqLoadData::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqLoadData::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stReqLoadData::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqLoadData::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID = 4;
inline bool stReqLoadData::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqLoadData::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqLoadData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqLoadData::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqLoadData::charid() const {
  return charid_;
}
inline void stReqLoadData::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string ip = 5;
inline bool stReqLoadData::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stReqLoadData::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stReqLoadData::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stReqLoadData::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stReqLoadData::ip() const {
  return *ip_;
}
inline void stReqLoadData::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stReqLoadData::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stReqLoadData::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqLoadData::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stReqLoadData::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqLoadData::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceID = 6;
inline bool stReqLoadData::has_deviceid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stReqLoadData::set_has_deviceid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stReqLoadData::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stReqLoadData::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& stReqLoadData::deviceid() const {
  return *deviceid_;
}
inline void stReqLoadData::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stReqLoadData::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stReqLoadData::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqLoadData::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* stReqLoadData::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqLoadData::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channelID = 7;
inline bool stReqLoadData::has_channelid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stReqLoadData::set_has_channelid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stReqLoadData::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stReqLoadData::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& stReqLoadData::channelid() const {
  return *channelid_;
}
inline void stReqLoadData::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void stReqLoadData::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void stReqLoadData::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqLoadData::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* stReqLoadData::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqLoadData::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string netIP = 8;
inline bool stReqLoadData::has_netip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stReqLoadData::set_has_netip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stReqLoadData::clear_has_netip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stReqLoadData::clear_netip() {
  if (netip_ != &::google::protobuf::internal::kEmptyString) {
    netip_->clear();
  }
  clear_has_netip();
}
inline const ::std::string& stReqLoadData::netip() const {
  return *netip_;
}
inline void stReqLoadData::set_netip(const ::std::string& value) {
  set_has_netip();
  if (netip_ == &::google::protobuf::internal::kEmptyString) {
    netip_ = new ::std::string;
  }
  netip_->assign(value);
}
inline void stReqLoadData::set_netip(const char* value) {
  set_has_netip();
  if (netip_ == &::google::protobuf::internal::kEmptyString) {
    netip_ = new ::std::string;
  }
  netip_->assign(value);
}
inline void stReqLoadData::set_netip(const char* value, size_t size) {
  set_has_netip();
  if (netip_ == &::google::protobuf::internal::kEmptyString) {
    netip_ = new ::std::string;
  }
  netip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqLoadData::mutable_netip() {
  set_has_netip();
  if (netip_ == &::google::protobuf::internal::kEmptyString) {
    netip_ = new ::std::string;
  }
  return netip_;
}
inline ::std::string* stReqLoadData::release_netip() {
  clear_has_netip();
  if (netip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = netip_;
    netip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqLoadData::set_allocated_netip(::std::string* netip) {
  if (netip_ != &::google::protobuf::internal::kEmptyString) {
    delete netip_;
  }
  if (netip) {
    set_has_netip();
    netip_ = netip;
  } else {
    clear_has_netip();
    netip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stGateForwardProto

// optional uint32 charID = 1;
inline bool stGateForwardProto::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGateForwardProto::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGateForwardProto::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGateForwardProto::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGateForwardProto::charid() const {
  return charid_;
}
inline void stGateForwardProto::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 modID = 2;
inline bool stGateForwardProto::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGateForwardProto::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGateForwardProto::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGateForwardProto::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stGateForwardProto::modid() const {
  return modid_;
}
inline void stGateForwardProto::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 funID = 3;
inline bool stGateForwardProto::has_funid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGateForwardProto::set_has_funid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGateForwardProto::clear_has_funid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGateForwardProto::clear_funid() {
  funid_ = 0u;
  clear_has_funid();
}
inline ::google::protobuf::uint32 stGateForwardProto::funid() const {
  return funid_;
}
inline void stGateForwardProto::set_funid(::google::protobuf::uint32 value) {
  set_has_funid();
  funid_ = value;
}

// optional uint32 cmdLen = 4;
inline bool stGateForwardProto::has_cmdlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGateForwardProto::set_has_cmdlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGateForwardProto::clear_has_cmdlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGateForwardProto::clear_cmdlen() {
  cmdlen_ = 0u;
  clear_has_cmdlen();
}
inline ::google::protobuf::uint32 stGateForwardProto::cmdlen() const {
  return cmdlen_;
}
inline void stGateForwardProto::set_cmdlen(::google::protobuf::uint32 value) {
  set_has_cmdlen();
  cmdlen_ = value;
}

// optional bytes data = 5;
inline bool stGateForwardProto::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGateForwardProto::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGateForwardProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGateForwardProto::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stGateForwardProto::data() const {
  return *data_;
}
inline void stGateForwardProto::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stGateForwardProto::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stGateForwardProto::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGateForwardProto::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stGateForwardProto::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGateForwardProto::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stForwardProto2Me

// optional uint32 charID = 1;
inline bool stForwardProto2Me::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stForwardProto2Me::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stForwardProto2Me::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stForwardProto2Me::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stForwardProto2Me::charid() const {
  return charid_;
}
inline void stForwardProto2Me::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 modID = 2;
inline bool stForwardProto2Me::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stForwardProto2Me::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stForwardProto2Me::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stForwardProto2Me::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stForwardProto2Me::modid() const {
  return modid_;
}
inline void stForwardProto2Me::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 funID = 3;
inline bool stForwardProto2Me::has_funid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stForwardProto2Me::set_has_funid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stForwardProto2Me::clear_has_funid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stForwardProto2Me::clear_funid() {
  funid_ = 0u;
  clear_has_funid();
}
inline ::google::protobuf::uint32 stForwardProto2Me::funid() const {
  return funid_;
}
inline void stForwardProto2Me::set_funid(::google::protobuf::uint32 value) {
  set_has_funid();
  funid_ = value;
}

// optional uint32 cmdLen = 4;
inline bool stForwardProto2Me::has_cmdlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stForwardProto2Me::set_has_cmdlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stForwardProto2Me::clear_has_cmdlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stForwardProto2Me::clear_cmdlen() {
  cmdlen_ = 0u;
  clear_has_cmdlen();
}
inline ::google::protobuf::uint32 stForwardProto2Me::cmdlen() const {
  return cmdlen_;
}
inline void stForwardProto2Me::set_cmdlen(::google::protobuf::uint32 value) {
  set_has_cmdlen();
  cmdlen_ = value;
}

// optional bytes data = 5;
inline bool stForwardProto2Me::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stForwardProto2Me::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stForwardProto2Me::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stForwardProto2Me::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stForwardProto2Me::data() const {
  return *data_;
}
inline void stForwardProto2Me::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stForwardProto2Me::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stForwardProto2Me::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stForwardProto2Me::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stForwardProto2Me::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stForwardProto2Me::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stBroadcastProto2AllUser

// optional uint32 modID = 1;
inline bool stBroadcastProto2AllUser::has_modid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBroadcastProto2AllUser::set_has_modid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBroadcastProto2AllUser::clear_has_modid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBroadcastProto2AllUser::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stBroadcastProto2AllUser::modid() const {
  return modid_;
}
inline void stBroadcastProto2AllUser::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 funID = 2;
inline bool stBroadcastProto2AllUser::has_funid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBroadcastProto2AllUser::set_has_funid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBroadcastProto2AllUser::clear_has_funid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBroadcastProto2AllUser::clear_funid() {
  funid_ = 0u;
  clear_has_funid();
}
inline ::google::protobuf::uint32 stBroadcastProto2AllUser::funid() const {
  return funid_;
}
inline void stBroadcastProto2AllUser::set_funid(::google::protobuf::uint32 value) {
  set_has_funid();
  funid_ = value;
}

// optional uint32 cmdLen = 3;
inline bool stBroadcastProto2AllUser::has_cmdlen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBroadcastProto2AllUser::set_has_cmdlen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBroadcastProto2AllUser::clear_has_cmdlen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBroadcastProto2AllUser::clear_cmdlen() {
  cmdlen_ = 0u;
  clear_has_cmdlen();
}
inline ::google::protobuf::uint32 stBroadcastProto2AllUser::cmdlen() const {
  return cmdlen_;
}
inline void stBroadcastProto2AllUser::set_cmdlen(::google::protobuf::uint32 value) {
  set_has_cmdlen();
  cmdlen_ = value;
}

// optional bytes data = 4;
inline bool stBroadcastProto2AllUser::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stBroadcastProto2AllUser::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stBroadcastProto2AllUser::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stBroadcastProto2AllUser::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stBroadcastProto2AllUser::data() const {
  return *data_;
}
inline void stBroadcastProto2AllUser::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stBroadcastProto2AllUser::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stBroadcastProto2AllUser::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBroadcastProto2AllUser::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stBroadcastProto2AllUser::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBroadcastProto2AllUser::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stLoginGlobalFail

// optional string account = 1;
inline bool stLoginGlobalFail::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLoginGlobalFail::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLoginGlobalFail::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLoginGlobalFail::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stLoginGlobalFail::account() const {
  return *account_;
}
inline void stLoginGlobalFail::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stLoginGlobalFail::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stLoginGlobalFail::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stLoginGlobalFail::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stLoginGlobalFail::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stLoginGlobalFail::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Global.stLoginGlobalFail.FailReason erroCode = 2;
inline bool stLoginGlobalFail::has_errocode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLoginGlobalFail::set_has_errocode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLoginGlobalFail::clear_has_errocode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLoginGlobalFail::clear_errocode() {
  errocode_ = 1;
  clear_has_errocode();
}
inline ::Global::stLoginGlobalFail_FailReason stLoginGlobalFail::errocode() const {
  return static_cast< ::Global::stLoginGlobalFail_FailReason >(errocode_);
}
inline void stLoginGlobalFail::set_errocode(::Global::stLoginGlobalFail_FailReason value) {
  assert(::Global::stLoginGlobalFail_FailReason_IsValid(value));
  set_has_errocode();
  errocode_ = value;
}

// -------------------------------------------------------------------

// stNotifyLoginOut

// optional uint32 charID = 1;
inline bool stNotifyLoginOut::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyLoginOut::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyLoginOut::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyLoginOut::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyLoginOut::charid() const {
  return charid_;
}
inline void stNotifyLoginOut::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 2;
inline bool stNotifyLoginOut::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyLoginOut::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyLoginOut::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyLoginOut::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stNotifyLoginOut::account() const {
  return *account_;
}
inline void stNotifyLoginOut::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stNotifyLoginOut::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stNotifyLoginOut::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNotifyLoginOut::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stNotifyLoginOut::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNotifyLoginOut::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stGameSvrStartUp

// optional uint32 svrID = 1;
inline bool stGameSvrStartUp::has_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGameSvrStartUp::set_has_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGameSvrStartUp::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGameSvrStartUp::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 stGameSvrStartUp::svrid() const {
  return svrid_;
}
inline void stGameSvrStartUp::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// -------------------------------------------------------------------

// stKillUserOut

// optional uint32 charID = 1;
inline bool stKillUserOut::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stKillUserOut::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stKillUserOut::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stKillUserOut::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stKillUserOut::charid() const {
  return charid_;
}
inline void stKillUserOut::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stServerCfgPair

// optional string key = 1;
inline bool stServerCfgPair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stServerCfgPair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stServerCfgPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stServerCfgPair::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& stServerCfgPair::key() const {
  return *key_;
}
inline void stServerCfgPair::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void stServerCfgPair::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void stServerCfgPair::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stServerCfgPair::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* stServerCfgPair::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stServerCfgPair::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 2;
inline bool stServerCfgPair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stServerCfgPair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stServerCfgPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stServerCfgPair::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& stServerCfgPair::value() const {
  return *value_;
}
inline void stServerCfgPair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void stServerCfgPair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void stServerCfgPair::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stServerCfgPair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* stServerCfgPair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stServerCfgPair::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stNotifyGateSvrCfg

// repeated .Global.stServerCfgPair cfgPair = 1;
inline int stNotifyGateSvrCfg::cfgpair_size() const {
  return cfgpair_.size();
}
inline void stNotifyGateSvrCfg::clear_cfgpair() {
  cfgpair_.Clear();
}
inline const ::Global::stServerCfgPair& stNotifyGateSvrCfg::cfgpair(int index) const {
  return cfgpair_.Get(index);
}
inline ::Global::stServerCfgPair* stNotifyGateSvrCfg::mutable_cfgpair(int index) {
  return cfgpair_.Mutable(index);
}
inline ::Global::stServerCfgPair* stNotifyGateSvrCfg::add_cfgpair() {
  return cfgpair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >&
stNotifyGateSvrCfg::cfgpair() const {
  return cfgpair_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >*
stNotifyGateSvrCfg::mutable_cfgpair() {
  return &cfgpair_;
}

// -------------------------------------------------------------------

// stReloginGlobal

// optional string ip = 1;
inline bool stReloginGlobal::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReloginGlobal::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReloginGlobal::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReloginGlobal::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stReloginGlobal::ip() const {
  return *ip_;
}
inline void stReloginGlobal::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stReloginGlobal::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stReloginGlobal::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReloginGlobal::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stReloginGlobal::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReloginGlobal::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device = 2;
inline bool stReloginGlobal::has_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReloginGlobal::set_has_device() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReloginGlobal::clear_has_device() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReloginGlobal::clear_device() {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& stReloginGlobal::device() const {
  return *device_;
}
inline void stReloginGlobal::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void stReloginGlobal::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void stReloginGlobal::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReloginGlobal::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  return device_;
}
inline ::std::string* stReloginGlobal::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReloginGlobal::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID = 3;
inline bool stReloginGlobal::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReloginGlobal::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReloginGlobal::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReloginGlobal::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReloginGlobal::charid() const {
  return charid_;
}
inline void stReloginGlobal::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 4;
inline bool stReloginGlobal::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReloginGlobal::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReloginGlobal::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReloginGlobal::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stReloginGlobal::account() const {
  return *account_;
}
inline void stReloginGlobal::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stReloginGlobal::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stReloginGlobal::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReloginGlobal::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stReloginGlobal::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReloginGlobal::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stPlayerAutoConnect

// optional string ip = 1;
inline bool stPlayerAutoConnect::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPlayerAutoConnect::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPlayerAutoConnect::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPlayerAutoConnect::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stPlayerAutoConnect::ip() const {
  return *ip_;
}
inline void stPlayerAutoConnect::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stPlayerAutoConnect::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stPlayerAutoConnect::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPlayerAutoConnect::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stPlayerAutoConnect::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPlayerAutoConnect::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device = 2;
inline bool stPlayerAutoConnect::has_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stPlayerAutoConnect::set_has_device() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stPlayerAutoConnect::clear_has_device() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stPlayerAutoConnect::clear_device() {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& stPlayerAutoConnect::device() const {
  return *device_;
}
inline void stPlayerAutoConnect::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void stPlayerAutoConnect::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void stPlayerAutoConnect::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPlayerAutoConnect::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  return device_;
}
inline ::std::string* stPlayerAutoConnect::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPlayerAutoConnect::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID = 3;
inline bool stPlayerAutoConnect::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stPlayerAutoConnect::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stPlayerAutoConnect::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stPlayerAutoConnect::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stPlayerAutoConnect::charid() const {
  return charid_;
}
inline void stPlayerAutoConnect::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 4;
inline bool stPlayerAutoConnect::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stPlayerAutoConnect::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stPlayerAutoConnect::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stPlayerAutoConnect::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stPlayerAutoConnect::account() const {
  return *account_;
}
inline void stPlayerAutoConnect::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stPlayerAutoConnect::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stPlayerAutoConnect::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPlayerAutoConnect::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stPlayerAutoConnect::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPlayerAutoConnect::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stClientLostConnect

// repeated string account = 1;
inline int stClientLostConnect::account_size() const {
  return account_.size();
}
inline void stClientLostConnect::clear_account() {
  account_.Clear();
}
inline const ::std::string& stClientLostConnect::account(int index) const {
  return account_.Get(index);
}
inline ::std::string* stClientLostConnect::mutable_account(int index) {
  return account_.Mutable(index);
}
inline void stClientLostConnect::set_account(int index, const ::std::string& value) {
  account_.Mutable(index)->assign(value);
}
inline void stClientLostConnect::set_account(int index, const char* value) {
  account_.Mutable(index)->assign(value);
}
inline void stClientLostConnect::set_account(int index, const char* value, size_t size) {
  account_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stClientLostConnect::add_account() {
  return account_.Add();
}
inline void stClientLostConnect::add_account(const ::std::string& value) {
  account_.Add()->assign(value);
}
inline void stClientLostConnect::add_account(const char* value) {
  account_.Add()->assign(value);
}
inline void stClientLostConnect::add_account(const char* value, size_t size) {
  account_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
stClientLostConnect::account() const {
  return account_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
stClientLostConnect::mutable_account() {
  return &account_;
}

// -------------------------------------------------------------------

// stAskIsNewAccount

// optional string account = 1;
inline bool stAskIsNewAccount::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAskIsNewAccount::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAskIsNewAccount::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAskIsNewAccount::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stAskIsNewAccount::account() const {
  return *account_;
}
inline void stAskIsNewAccount::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stAskIsNewAccount::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stAskIsNewAccount::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stAskIsNewAccount::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stAskIsNewAccount::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stAskIsNewAccount::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stIsNewAccount

// optional bool isNew = 1;
inline bool stIsNewAccount::has_isnew() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stIsNewAccount::set_has_isnew() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stIsNewAccount::clear_has_isnew() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stIsNewAccount::clear_isnew() {
  isnew_ = false;
  clear_has_isnew();
}
inline bool stIsNewAccount::isnew() const {
  return isnew_;
}
inline void stIsNewAccount::set_isnew(bool value) {
  set_has_isnew();
  isnew_ = value;
}

// optional string account = 2;
inline bool stIsNewAccount::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stIsNewAccount::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stIsNewAccount::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stIsNewAccount::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stIsNewAccount::account() const {
  return *account_;
}
inline void stIsNewAccount::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stIsNewAccount::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stIsNewAccount::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stIsNewAccount::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stIsNewAccount::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stIsNewAccount::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stSaveRoleInfo

// optional .Global.SaveType type = 1;
inline bool stSaveRoleInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSaveRoleInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSaveRoleInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSaveRoleInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Global::SaveType stSaveRoleInfo::type() const {
  return static_cast< ::Global::SaveType >(type_);
}
inline void stSaveRoleInfo::set_type(::Global::SaveType value) {
  assert(::Global::SaveType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 charID = 2;
inline bool stSaveRoleInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSaveRoleInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSaveRoleInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSaveRoleInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSaveRoleInfo::charid() const {
  return charid_;
}
inline void stSaveRoleInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 gameID = 3;
inline bool stSaveRoleInfo::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSaveRoleInfo::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSaveRoleInfo::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSaveRoleInfo::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 stSaveRoleInfo::gameid() const {
  return gameid_;
}
inline void stSaveRoleInfo::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional string account = 4;
inline bool stSaveRoleInfo::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSaveRoleInfo::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSaveRoleInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSaveRoleInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stSaveRoleInfo::account() const {
  return *account_;
}
inline void stSaveRoleInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stSaveRoleInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stSaveRoleInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSaveRoleInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stSaveRoleInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSaveRoleInfo::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 dataSize = 5;
inline bool stSaveRoleInfo::has_datasize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSaveRoleInfo::set_has_datasize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSaveRoleInfo::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSaveRoleInfo::clear_datasize() {
  datasize_ = 0u;
  clear_has_datasize();
}
inline ::google::protobuf::uint32 stSaveRoleInfo::datasize() const {
  return datasize_;
}
inline void stSaveRoleInfo::set_datasize(::google::protobuf::uint32 value) {
  set_has_datasize();
  datasize_ = value;
}

// optional bytes data = 6;
inline bool stSaveRoleInfo::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSaveRoleInfo::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSaveRoleInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSaveRoleInfo::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stSaveRoleInfo::data() const {
  return *data_;
}
inline void stSaveRoleInfo::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stSaveRoleInfo::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stSaveRoleInfo::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSaveRoleInfo::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stSaveRoleInfo::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSaveRoleInfo::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stRetRoleInfo

// optional uint32 charID = 1;
inline bool stRetRoleInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRoleInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRoleInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRoleInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRetRoleInfo::charid() const {
  return charid_;
}
inline void stRetRoleInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 gateID = 2;
inline bool stRetRoleInfo::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetRoleInfo::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetRoleInfo::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetRoleInfo::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 stRetRoleInfo::gateid() const {
  return gateid_;
}
inline void stRetRoleInfo::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// optional string ip = 3;
inline bool stRetRoleInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetRoleInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetRoleInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetRoleInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stRetRoleInfo::ip() const {
  return *ip_;
}
inline void stRetRoleInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stRetRoleInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stRetRoleInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetRoleInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stRetRoleInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetRoleInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string account = 4;
inline bool stRetRoleInfo::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetRoleInfo::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetRoleInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetRoleInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stRetRoleInfo::account() const {
  return *account_;
}
inline void stRetRoleInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stRetRoleInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stRetRoleInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetRoleInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stRetRoleInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetRoleInfo::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 dataSize = 5;
inline bool stRetRoleInfo::has_datasize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetRoleInfo::set_has_datasize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetRoleInfo::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetRoleInfo::clear_datasize() {
  datasize_ = 0u;
  clear_has_datasize();
}
inline ::google::protobuf::uint32 stRetRoleInfo::datasize() const {
  return datasize_;
}
inline void stRetRoleInfo::set_datasize(::google::protobuf::uint32 value) {
  set_has_datasize();
  datasize_ = value;
}

// optional bytes data = 6;
inline bool stRetRoleInfo::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetRoleInfo::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetRoleInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetRoleInfo::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stRetRoleInfo::data() const {
  return *data_;
}
inline void stRetRoleInfo::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRetRoleInfo::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRetRoleInfo::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetRoleInfo::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stRetRoleInfo::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetRoleInfo::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Global.eLoadRoleDataType eloadDataType = 7;
inline bool stRetRoleInfo::has_eloaddatatype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRetRoleInfo::set_has_eloaddatatype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRetRoleInfo::clear_has_eloaddatatype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRetRoleInfo::clear_eloaddatatype() {
  eloaddatatype_ = 1;
  clear_has_eloaddatatype();
}
inline ::Global::eLoadRoleDataType stRetRoleInfo::eloaddatatype() const {
  return static_cast< ::Global::eLoadRoleDataType >(eloaddatatype_);
}
inline void stRetRoleInfo::set_eloaddatatype(::Global::eLoadRoleDataType value) {
  assert(::Global::eLoadRoleDataType_IsValid(value));
  set_has_eloaddatatype();
  eloaddatatype_ = value;
}

// optional string deviceID = 8;
inline bool stRetRoleInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stRetRoleInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stRetRoleInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stRetRoleInfo::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& stRetRoleInfo::deviceid() const {
  return *deviceid_;
}
inline void stRetRoleInfo::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stRetRoleInfo::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stRetRoleInfo::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetRoleInfo::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* stRetRoleInfo::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetRoleInfo::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channelID = 9;
inline bool stRetRoleInfo::has_channelid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stRetRoleInfo::set_has_channelid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stRetRoleInfo::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stRetRoleInfo::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& stRetRoleInfo::channelid() const {
  return *channelid_;
}
inline void stRetRoleInfo::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void stRetRoleInfo::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void stRetRoleInfo::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetRoleInfo::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* stRetRoleInfo::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetRoleInfo::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string netIP = 10;
inline bool stRetRoleInfo::has_netip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stRetRoleInfo::set_has_netip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stRetRoleInfo::clear_has_netip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stRetRoleInfo::clear_netip() {
  if (netip_ != &::google::protobuf::internal::kEmptyString) {
    netip_->clear();
  }
  clear_has_netip();
}
inline const ::std::string& stRetRoleInfo::netip() const {
  return *netip_;
}
inline void stRetRoleInfo::set_netip(const ::std::string& value) {
  set_has_netip();
  if (netip_ == &::google::protobuf::internal::kEmptyString) {
    netip_ = new ::std::string;
  }
  netip_->assign(value);
}
inline void stRetRoleInfo::set_netip(const char* value) {
  set_has_netip();
  if (netip_ == &::google::protobuf::internal::kEmptyString) {
    netip_ = new ::std::string;
  }
  netip_->assign(value);
}
inline void stRetRoleInfo::set_netip(const char* value, size_t size) {
  set_has_netip();
  if (netip_ == &::google::protobuf::internal::kEmptyString) {
    netip_ = new ::std::string;
  }
  netip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetRoleInfo::mutable_netip() {
  set_has_netip();
  if (netip_ == &::google::protobuf::internal::kEmptyString) {
    netip_ = new ::std::string;
  }
  return netip_;
}
inline ::std::string* stRetRoleInfo::release_netip() {
  clear_has_netip();
  if (netip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = netip_;
    netip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetRoleInfo::set_allocated_netip(::std::string* netip) {
  if (netip_ != &::google::protobuf::internal::kEmptyString) {
    delete netip_;
  }
  if (netip) {
    set_has_netip();
    netip_ = netip;
  } else {
    clear_has_netip();
    netip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stUserEnterMapSuccess

// optional uint32 charID = 1;
inline bool stUserEnterMapSuccess::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserEnterMapSuccess::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserEnterMapSuccess::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserEnterMapSuccess::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::charid() const {
  return charid_;
}
inline void stUserEnterMapSuccess::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 gmType = 2;
inline bool stUserEnterMapSuccess::has_gmtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserEnterMapSuccess::set_has_gmtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserEnterMapSuccess::clear_has_gmtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserEnterMapSuccess::clear_gmtype() {
  gmtype_ = 0u;
  clear_has_gmtype();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::gmtype() const {
  return gmtype_;
}
inline void stUserEnterMapSuccess::set_gmtype(::google::protobuf::uint32 value) {
  set_has_gmtype();
  gmtype_ = value;
}

// optional uint32 level = 3;
inline bool stUserEnterMapSuccess::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUserEnterMapSuccess::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUserEnterMapSuccess::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUserEnterMapSuccess::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::level() const {
  return level_;
}
inline void stUserEnterMapSuccess::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 4;
inline bool stUserEnterMapSuccess::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUserEnterMapSuccess::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUserEnterMapSuccess::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUserEnterMapSuccess::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::job() const {
  return job_;
}
inline void stUserEnterMapSuccess::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stUserEnterMapSuccess::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stUserEnterMapSuccess::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stUserEnterMapSuccess::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stUserEnterMapSuccess::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::sex() const {
  return sex_;
}
inline void stUserEnterMapSuccess::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 fetchLilianNum = 6;
inline bool stUserEnterMapSuccess::has_fetchliliannum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stUserEnterMapSuccess::set_has_fetchliliannum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stUserEnterMapSuccess::clear_has_fetchliliannum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stUserEnterMapSuccess::clear_fetchliliannum() {
  fetchliliannum_ = 0u;
  clear_has_fetchliliannum();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::fetchliliannum() const {
  return fetchliliannum_;
}
inline void stUserEnterMapSuccess::set_fetchliliannum(::google::protobuf::uint32 value) {
  set_has_fetchliliannum();
  fetchliliannum_ = value;
}

// optional uint32 serverID = 7;
inline bool stUserEnterMapSuccess::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stUserEnterMapSuccess::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stUserEnterMapSuccess::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stUserEnterMapSuccess::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::serverid() const {
  return serverid_;
}
inline void stUserEnterMapSuccess::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional uint32 vipLv = 8;
inline bool stUserEnterMapSuccess::has_viplv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stUserEnterMapSuccess::set_has_viplv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stUserEnterMapSuccess::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stUserEnterMapSuccess::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::viplv() const {
  return viplv_;
}
inline void stUserEnterMapSuccess::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 headID = 9;
inline bool stUserEnterMapSuccess::has_headid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stUserEnterMapSuccess::set_has_headid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stUserEnterMapSuccess::clear_has_headid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stUserEnterMapSuccess::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::headid() const {
  return headid_;
}
inline void stUserEnterMapSuccess::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 10;
inline bool stUserEnterMapSuccess::has_bodyid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stUserEnterMapSuccess::set_has_bodyid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stUserEnterMapSuccess::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stUserEnterMapSuccess::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::bodyid() const {
  return bodyid_;
}
inline void stUserEnterMapSuccess::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 11;
inline bool stUserEnterMapSuccess::has_weaponid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stUserEnterMapSuccess::set_has_weaponid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stUserEnterMapSuccess::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stUserEnterMapSuccess::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::weaponid() const {
  return weaponid_;
}
inline void stUserEnterMapSuccess::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 12;
inline bool stUserEnterMapSuccess::has_cloackid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stUserEnterMapSuccess::set_has_cloackid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stUserEnterMapSuccess::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stUserEnterMapSuccess::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::cloackid() const {
  return cloackid_;
}
inline void stUserEnterMapSuccess::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 13;
inline bool stUserEnterMapSuccess::has_wingid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_wingid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stUserEnterMapSuccess::clear_has_wingid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stUserEnterMapSuccess::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::wingid() const {
  return wingid_;
}
inline void stUserEnterMapSuccess::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 14;
inline bool stUserEnterMapSuccess::has_shoeid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_shoeid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stUserEnterMapSuccess::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stUserEnterMapSuccess::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::shoeid() const {
  return shoeid_;
}
inline void stUserEnterMapSuccess::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 15;
inline bool stUserEnterMapSuccess::has_fashionhair() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_fashionhair() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stUserEnterMapSuccess::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stUserEnterMapSuccess::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::fashionhair() const {
  return fashionhair_;
}
inline void stUserEnterMapSuccess::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 16;
inline bool stUserEnterMapSuccess::has_fashionface() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_fashionface() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stUserEnterMapSuccess::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stUserEnterMapSuccess::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::fashionface() const {
  return fashionface_;
}
inline void stUserEnterMapSuccess::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 17;
inline bool stUserEnterMapSuccess::has_fashionbody() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_fashionbody() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stUserEnterMapSuccess::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stUserEnterMapSuccess::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::fashionbody() const {
  return fashionbody_;
}
inline void stUserEnterMapSuccess::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 18;
inline bool stUserEnterMapSuccess::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stUserEnterMapSuccess::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stUserEnterMapSuccess::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::fashionweapon() const {
  return fashionweapon_;
}
inline void stUserEnterMapSuccess::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 19;
inline bool stUserEnterMapSuccess::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stUserEnterMapSuccess::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stUserEnterMapSuccess::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::fashionshoe() const {
  return fashionshoe_;
}
inline void stUserEnterMapSuccess::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 20;
inline bool stUserEnterMapSuccess::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stUserEnterMapSuccess::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stUserEnterMapSuccess::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::fashiondecoration() const {
  return fashiondecoration_;
}
inline void stUserEnterMapSuccess::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 compensationID = 21;
inline bool stUserEnterMapSuccess::has_compensationid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_compensationid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stUserEnterMapSuccess::clear_has_compensationid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stUserEnterMapSuccess::clear_compensationid() {
  compensationid_ = 0u;
  clear_has_compensationid();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::compensationid() const {
  return compensationid_;
}
inline void stUserEnterMapSuccess::set_compensationid(::google::protobuf::uint32 value) {
  set_has_compensationid();
  compensationid_ = value;
}

// optional uint32 effectID = 22;
inline bool stUserEnterMapSuccess::has_effectid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_effectid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void stUserEnterMapSuccess::clear_has_effectid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void stUserEnterMapSuccess::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::effectid() const {
  return effectid_;
}
inline void stUserEnterMapSuccess::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 23;
inline bool stUserEnterMapSuccess::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x00400000u;
}
inline void stUserEnterMapSuccess::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void stUserEnterMapSuccess::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::wingbreaklv() const {
  return wingbreaklv_;
}
inline void stUserEnterMapSuccess::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// optional uint32 pubServerIndex = 24;
inline bool stUserEnterMapSuccess::has_pubserverindex() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_pubserverindex() {
  _has_bits_[0] |= 0x00800000u;
}
inline void stUserEnterMapSuccess::clear_has_pubserverindex() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void stUserEnterMapSuccess::clear_pubserverindex() {
  pubserverindex_ = 0u;
  clear_has_pubserverindex();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::pubserverindex() const {
  return pubserverindex_;
}
inline void stUserEnterMapSuccess::set_pubserverindex(::google::protobuf::uint32 value) {
  set_has_pubserverindex();
  pubserverindex_ = value;
}

// optional uint32 pubCharID = 25;
inline bool stUserEnterMapSuccess::has_pubcharid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_pubcharid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void stUserEnterMapSuccess::clear_has_pubcharid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void stUserEnterMapSuccess::clear_pubcharid() {
  pubcharid_ = 0u;
  clear_has_pubcharid();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::pubcharid() const {
  return pubcharid_;
}
inline void stUserEnterMapSuccess::set_pubcharid(::google::protobuf::uint32 value) {
  set_has_pubcharid();
  pubcharid_ = value;
}

// optional uint32 areaCode = 26;
inline bool stUserEnterMapSuccess::has_areacode() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_areacode() {
  _has_bits_[0] |= 0x02000000u;
}
inline void stUserEnterMapSuccess::clear_has_areacode() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void stUserEnterMapSuccess::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::areacode() const {
  return areacode_;
}
inline void stUserEnterMapSuccess::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional uint32 photoID = 27;
inline bool stUserEnterMapSuccess::has_photoid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void stUserEnterMapSuccess::set_has_photoid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void stUserEnterMapSuccess::clear_has_photoid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void stUserEnterMapSuccess::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stUserEnterMapSuccess::photoid() const {
  return photoid_;
}
inline void stUserEnterMapSuccess::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stRechargeInfo

// optional uint32 itemID = 1;
inline bool stRechargeInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRechargeInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRechargeInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRechargeInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stRechargeInfo::itemid() const {
  return itemid_;
}
inline void stRechargeInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 money = 2;
inline bool stRechargeInfo::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRechargeInfo::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRechargeInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRechargeInfo::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 stRechargeInfo::money() const {
  return money_;
}
inline void stRechargeInfo::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// optional string tid = 3;
inline bool stRechargeInfo::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRechargeInfo::set_has_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRechargeInfo::clear_has_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRechargeInfo::clear_tid() {
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    tid_->clear();
  }
  clear_has_tid();
}
inline const ::std::string& stRechargeInfo::tid() const {
  return *tid_;
}
inline void stRechargeInfo::set_tid(const ::std::string& value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
}
inline void stRechargeInfo::set_tid(const char* value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
}
inline void stRechargeInfo::set_tid(const char* value, size_t size) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRechargeInfo::mutable_tid() {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  return tid_;
}
inline ::std::string* stRechargeInfo::release_tid() {
  clear_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tid_;
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRechargeInfo::set_allocated_tid(::std::string* tid) {
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    delete tid_;
  }
  if (tid) {
    set_has_tid();
    tid_ = tid;
  } else {
    clear_has_tid();
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string data = 4;
inline bool stRechargeInfo::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRechargeInfo::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRechargeInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRechargeInfo::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stRechargeInfo::data() const {
  return *data_;
}
inline void stRechargeInfo::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRechargeInfo::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRechargeInfo::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRechargeInfo::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stRechargeInfo::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRechargeInfo::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stUserRecharge

// optional uint32 charID = 1;
inline bool stUserRecharge::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserRecharge::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserRecharge::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserRecharge::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserRecharge::charid() const {
  return charid_;
}
inline void stUserRecharge::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .Global.stRechargeInfo rechargeInfo = 2;
inline int stUserRecharge::rechargeinfo_size() const {
  return rechargeinfo_.size();
}
inline void stUserRecharge::clear_rechargeinfo() {
  rechargeinfo_.Clear();
}
inline const ::Global::stRechargeInfo& stUserRecharge::rechargeinfo(int index) const {
  return rechargeinfo_.Get(index);
}
inline ::Global::stRechargeInfo* stUserRecharge::mutable_rechargeinfo(int index) {
  return rechargeinfo_.Mutable(index);
}
inline ::Global::stRechargeInfo* stUserRecharge::add_rechargeinfo() {
  return rechargeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stRechargeInfo >&
stUserRecharge::rechargeinfo() const {
  return rechargeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stRechargeInfo >*
stUserRecharge::mutable_rechargeinfo() {
  return &rechargeinfo_;
}

// optional bool isExtend = 3;
inline bool stUserRecharge::has_isextend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUserRecharge::set_has_isextend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUserRecharge::clear_has_isextend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUserRecharge::clear_isextend() {
  isextend_ = false;
  clear_has_isextend();
}
inline bool stUserRecharge::isextend() const {
  return isextend_;
}
inline void stUserRecharge::set_isextend(bool value) {
  set_has_isextend();
  isextend_ = value;
}

// -------------------------------------------------------------------

// stProcessGM

// optional .Global.eGMType type = 1;
inline bool stProcessGM::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stProcessGM::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stProcessGM::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stProcessGM::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Global::eGMType stProcessGM::type() const {
  return static_cast< ::Global::eGMType >(type_);
}
inline void stProcessGM::set_type(::Global::eGMType value) {
  assert(::Global::eGMType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated uint32 intParam = 2;
inline int stProcessGM::intparam_size() const {
  return intparam_.size();
}
inline void stProcessGM::clear_intparam() {
  intparam_.Clear();
}
inline ::google::protobuf::uint32 stProcessGM::intparam(int index) const {
  return intparam_.Get(index);
}
inline void stProcessGM::set_intparam(int index, ::google::protobuf::uint32 value) {
  intparam_.Set(index, value);
}
inline void stProcessGM::add_intparam(::google::protobuf::uint32 value) {
  intparam_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stProcessGM::intparam() const {
  return intparam_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stProcessGM::mutable_intparam() {
  return &intparam_;
}

// repeated string strParam = 3;
inline int stProcessGM::strparam_size() const {
  return strparam_.size();
}
inline void stProcessGM::clear_strparam() {
  strparam_.Clear();
}
inline const ::std::string& stProcessGM::strparam(int index) const {
  return strparam_.Get(index);
}
inline ::std::string* stProcessGM::mutable_strparam(int index) {
  return strparam_.Mutable(index);
}
inline void stProcessGM::set_strparam(int index, const ::std::string& value) {
  strparam_.Mutable(index)->assign(value);
}
inline void stProcessGM::set_strparam(int index, const char* value) {
  strparam_.Mutable(index)->assign(value);
}
inline void stProcessGM::set_strparam(int index, const char* value, size_t size) {
  strparam_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stProcessGM::add_strparam() {
  return strparam_.Add();
}
inline void stProcessGM::add_strparam(const ::std::string& value) {
  strparam_.Add()->assign(value);
}
inline void stProcessGM::add_strparam(const char* value) {
  strparam_.Add()->assign(value);
}
inline void stProcessGM::add_strparam(const char* value, size_t size) {
  strparam_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
stProcessGM::strparam() const {
  return strparam_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
stProcessGM::mutable_strparam() {
  return &strparam_;
}

// optional uint32 charID = 4;
inline bool stProcessGM::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stProcessGM::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stProcessGM::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stProcessGM::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stProcessGM::charid() const {
  return charid_;
}
inline void stProcessGM::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynFetchLilianNum

// optional uint32 charID = 1;
inline bool stSynFetchLilianNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynFetchLilianNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynFetchLilianNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynFetchLilianNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynFetchLilianNum::charid() const {
  return charid_;
}
inline void stSynFetchLilianNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 num = 2;
inline bool stSynFetchLilianNum::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynFetchLilianNum::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynFetchLilianNum::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynFetchLilianNum::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynFetchLilianNum::num() const {
  return num_;
}
inline void stSynFetchLilianNum::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSynGuildID

// optional uint32 charID = 1;
inline bool stSynGuildID::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynGuildID::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynGuildID::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynGuildID::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynGuildID::charid() const {
  return charid_;
}
inline void stSynGuildID::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 guildID = 2;
inline bool stSynGuildID::has_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynGuildID::set_has_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynGuildID::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynGuildID::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stSynGuildID::guildid() const {
  return guildid_;
}
inline void stSynGuildID::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 guildLv = 3;
inline bool stSynGuildID::has_guildlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynGuildID::set_has_guildlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynGuildID::clear_has_guildlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynGuildID::clear_guildlv() {
  guildlv_ = 0u;
  clear_has_guildlv();
}
inline ::google::protobuf::uint32 stSynGuildID::guildlv() const {
  return guildlv_;
}
inline void stSynGuildID::set_guildlv(::google::protobuf::uint32 value) {
  set_has_guildlv();
  guildlv_ = value;
}

// optional uint32 joinInTime = 4;
inline bool stSynGuildID::has_joinintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynGuildID::set_has_joinintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynGuildID::clear_has_joinintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynGuildID::clear_joinintime() {
  joinintime_ = 0u;
  clear_has_joinintime();
}
inline ::google::protobuf::uint32 stSynGuildID::joinintime() const {
  return joinintime_;
}
inline void stSynGuildID::set_joinintime(::google::protobuf::uint32 value) {
  set_has_joinintime();
  joinintime_ = value;
}

// optional uint32 blackMarketLv = 5;
inline bool stSynGuildID::has_blackmarketlv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynGuildID::set_has_blackmarketlv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynGuildID::clear_has_blackmarketlv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynGuildID::clear_blackmarketlv() {
  blackmarketlv_ = 0u;
  clear_has_blackmarketlv();
}
inline ::google::protobuf::uint32 stSynGuildID::blackmarketlv() const {
  return blackmarketlv_;
}
inline void stSynGuildID::set_blackmarketlv(::google::protobuf::uint32 value) {
  set_has_blackmarketlv();
  blackmarketlv_ = value;
}

// -------------------------------------------------------------------

// stCreateGuild

// optional uint32 charID = 1;
inline bool stCreateGuild::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCreateGuild::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCreateGuild::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCreateGuild::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCreateGuild::charid() const {
  return charid_;
}
inline void stCreateGuild::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stCreateGuild::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCreateGuild::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCreateGuild::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCreateGuild::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stCreateGuild::name() const {
  return *name_;
}
inline void stCreateGuild::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stCreateGuild::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stCreateGuild::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCreateGuild::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stCreateGuild::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCreateGuild::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 badge = 3;
inline bool stCreateGuild::has_badge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCreateGuild::set_has_badge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCreateGuild::clear_has_badge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCreateGuild::clear_badge() {
  badge_ = 0u;
  clear_has_badge();
}
inline ::google::protobuf::uint32 stCreateGuild::badge() const {
  return badge_;
}
inline void stCreateGuild::set_badge(::google::protobuf::uint32 value) {
  set_has_badge();
  badge_ = value;
}

// -------------------------------------------------------------------

// stCreateGuildDecMoney

// optional uint32 charID = 1;
inline bool stCreateGuildDecMoney::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCreateGuildDecMoney::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCreateGuildDecMoney::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCreateGuildDecMoney::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCreateGuildDecMoney::charid() const {
  return charid_;
}
inline void stCreateGuildDecMoney::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stForwardJoininGuild

// optional uint32 charID = 1;
inline bool stForwardJoininGuild::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stForwardJoininGuild::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stForwardJoininGuild::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stForwardJoininGuild::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stForwardJoininGuild::charid() const {
  return charid_;
}
inline void stForwardJoininGuild::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 guildID = 2;
inline bool stForwardJoininGuild::has_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stForwardJoininGuild::set_has_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stForwardJoininGuild::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stForwardJoininGuild::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stForwardJoininGuild::guildid() const {
  return guildid_;
}
inline void stForwardJoininGuild::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stAddGuildContribute

// optional uint32 charID = 1;
inline bool stAddGuildContribute::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddGuildContribute::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddGuildContribute::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddGuildContribute::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stAddGuildContribute::charid() const {
  return charid_;
}
inline void stAddGuildContribute::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 contribute = 2;
inline bool stAddGuildContribute::has_contribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAddGuildContribute::set_has_contribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAddGuildContribute::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAddGuildContribute::clear_contribute() {
  contribute_ = 0u;
  clear_has_contribute();
}
inline ::google::protobuf::uint32 stAddGuildContribute::contribute() const {
  return contribute_;
}
inline void stAddGuildContribute::set_contribute(::google::protobuf::uint32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional uint32 todayDayContribute = 3;
inline bool stAddGuildContribute::has_todaydaycontribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAddGuildContribute::set_has_todaydaycontribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAddGuildContribute::clear_has_todaydaycontribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAddGuildContribute::clear_todaydaycontribute() {
  todaydaycontribute_ = 0u;
  clear_has_todaydaycontribute();
}
inline ::google::protobuf::uint32 stAddGuildContribute::todaydaycontribute() const {
  return todaydaycontribute_;
}
inline void stAddGuildContribute::set_todaydaycontribute(::google::protobuf::uint32 value) {
  set_has_todaydaycontribute();
  todaydaycontribute_ = value;
}

// -------------------------------------------------------------------

// stBroadcastGuildChatInfo

// optional uint32 charID = 1;
inline bool stBroadcastGuildChatInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBroadcastGuildChatInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBroadcastGuildChatInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBroadcastGuildChatInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stBroadcastGuildChatInfo::charid() const {
  return charid_;
}
inline void stBroadcastGuildChatInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 vipLv = 2;
inline bool stBroadcastGuildChatInfo::has_viplv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBroadcastGuildChatInfo::set_has_viplv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBroadcastGuildChatInfo::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBroadcastGuildChatInfo::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stBroadcastGuildChatInfo::viplv() const {
  return viplv_;
}
inline void stBroadcastGuildChatInfo::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional string content = 3;
inline bool stBroadcastGuildChatInfo::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBroadcastGuildChatInfo::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBroadcastGuildChatInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBroadcastGuildChatInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& stBroadcastGuildChatInfo::content() const {
  return *content_;
}
inline void stBroadcastGuildChatInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stBroadcastGuildChatInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stBroadcastGuildChatInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBroadcastGuildChatInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* stBroadcastGuildChatInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBroadcastGuildChatInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isVoice = 4;
inline bool stBroadcastGuildChatInfo::has_isvoice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stBroadcastGuildChatInfo::set_has_isvoice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stBroadcastGuildChatInfo::clear_has_isvoice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stBroadcastGuildChatInfo::clear_isvoice() {
  isvoice_ = false;
  clear_has_isvoice();
}
inline bool stBroadcastGuildChatInfo::isvoice() const {
  return isvoice_;
}
inline void stBroadcastGuildChatInfo::set_isvoice(bool value) {
  set_has_isvoice();
  isvoice_ = value;
}

// optional string voiceUrl = 5;
inline bool stBroadcastGuildChatInfo::has_voiceurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stBroadcastGuildChatInfo::set_has_voiceurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stBroadcastGuildChatInfo::clear_has_voiceurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stBroadcastGuildChatInfo::clear_voiceurl() {
  if (voiceurl_ != &::google::protobuf::internal::kEmptyString) {
    voiceurl_->clear();
  }
  clear_has_voiceurl();
}
inline const ::std::string& stBroadcastGuildChatInfo::voiceurl() const {
  return *voiceurl_;
}
inline void stBroadcastGuildChatInfo::set_voiceurl(const ::std::string& value) {
  set_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    voiceurl_ = new ::std::string;
  }
  voiceurl_->assign(value);
}
inline void stBroadcastGuildChatInfo::set_voiceurl(const char* value) {
  set_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    voiceurl_ = new ::std::string;
  }
  voiceurl_->assign(value);
}
inline void stBroadcastGuildChatInfo::set_voiceurl(const char* value, size_t size) {
  set_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    voiceurl_ = new ::std::string;
  }
  voiceurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBroadcastGuildChatInfo::mutable_voiceurl() {
  set_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    voiceurl_ = new ::std::string;
  }
  return voiceurl_;
}
inline ::std::string* stBroadcastGuildChatInfo::release_voiceurl() {
  clear_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voiceurl_;
    voiceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBroadcastGuildChatInfo::set_allocated_voiceurl(::std::string* voiceurl) {
  if (voiceurl_ != &::google::protobuf::internal::kEmptyString) {
    delete voiceurl_;
  }
  if (voiceurl) {
    set_has_voiceurl();
    voiceurl_ = voiceurl;
  } else {
    clear_has_voiceurl();
    voiceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 voiceLenght = 6;
inline bool stBroadcastGuildChatInfo::has_voicelenght() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stBroadcastGuildChatInfo::set_has_voicelenght() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stBroadcastGuildChatInfo::clear_has_voicelenght() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stBroadcastGuildChatInfo::clear_voicelenght() {
  voicelenght_ = 0u;
  clear_has_voicelenght();
}
inline ::google::protobuf::uint32 stBroadcastGuildChatInfo::voicelenght() const {
  return voicelenght_;
}
inline void stBroadcastGuildChatInfo::set_voicelenght(::google::protobuf::uint32 value) {
  set_has_voicelenght();
  voicelenght_ = value;
}

// -------------------------------------------------------------------

// stGuildPray

// optional uint32 charID = 1;
inline bool stGuildPray::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuildPray::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuildPray::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuildPray::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGuildPray::charid() const {
  return charid_;
}
inline void stGuildPray::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 buildingLv = 2;
inline bool stGuildPray::has_buildinglv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuildPray::set_has_buildinglv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuildPray::clear_has_buildinglv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuildPray::clear_buildinglv() {
  buildinglv_ = 0u;
  clear_has_buildinglv();
}
inline ::google::protobuf::uint32 stGuildPray::buildinglv() const {
  return buildinglv_;
}
inline void stGuildPray::set_buildinglv(::google::protobuf::uint32 value) {
  set_has_buildinglv();
  buildinglv_ = value;
}

// optional uint32 extraBoxID = 3;
inline bool stGuildPray::has_extraboxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGuildPray::set_has_extraboxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGuildPray::clear_has_extraboxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGuildPray::clear_extraboxid() {
  extraboxid_ = 0u;
  clear_has_extraboxid();
}
inline ::google::protobuf::uint32 stGuildPray::extraboxid() const {
  return extraboxid_;
}
inline void stGuildPray::set_extraboxid(::google::protobuf::uint32 value) {
  set_has_extraboxid();
  extraboxid_ = value;
}

// -------------------------------------------------------------------

// stSynUserLevel

// optional uint32 charID = 1;
inline bool stSynUserLevel::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynUserLevel::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynUserLevel::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynUserLevel::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynUserLevel::charid() const {
  return charid_;
}
inline void stSynUserLevel::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 lv = 2;
inline bool stSynUserLevel::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynUserLevel::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynUserLevel::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynUserLevel::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 stSynUserLevel::lv() const {
  return lv_;
}
inline void stSynUserLevel::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional bool levelup = 3;
inline bool stSynUserLevel::has_levelup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynUserLevel::set_has_levelup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynUserLevel::clear_has_levelup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynUserLevel::clear_levelup() {
  levelup_ = false;
  clear_has_levelup();
}
inline bool stSynUserLevel::levelup() const {
  return levelup_;
}
inline void stSynUserLevel::set_levelup(bool value) {
  set_has_levelup();
  levelup_ = value;
}

// -------------------------------------------------------------------

// stSynCopymapStarNum

// optional uint32 charID = 1;
inline bool stSynCopymapStarNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynCopymapStarNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynCopymapStarNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynCopymapStarNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynCopymapStarNum::charid() const {
  return charid_;
}
inline void stSynCopymapStarNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 starNum = 2;
inline bool stSynCopymapStarNum::has_starnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynCopymapStarNum::set_has_starnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynCopymapStarNum::clear_has_starnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynCopymapStarNum::clear_starnum() {
  starnum_ = 0u;
  clear_has_starnum();
}
inline ::google::protobuf::uint32 stSynCopymapStarNum::starnum() const {
  return starnum_;
}
inline void stSynCopymapStarNum::set_starnum(::google::protobuf::uint32 value) {
  set_has_starnum();
  starnum_ = value;
}

// -------------------------------------------------------------------

// stSynUserBattlePower

// optional uint32 charID = 1;
inline bool stSynUserBattlePower::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynUserBattlePower::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynUserBattlePower::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynUserBattlePower::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynUserBattlePower::charid() const {
  return charid_;
}
inline void stSynUserBattlePower::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 battlePower = 2;
inline bool stSynUserBattlePower::has_battlepower() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynUserBattlePower::set_has_battlepower() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynUserBattlePower::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynUserBattlePower::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynUserBattlePower::battlepower() const {
  return battlepower_;
}
inline void stSynUserBattlePower::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 maxHP = 3;
inline bool stSynUserBattlePower::has_maxhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynUserBattlePower::set_has_maxhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynUserBattlePower::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynUserBattlePower::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 stSynUserBattlePower::maxhp() const {
  return maxhp_;
}
inline void stSynUserBattlePower::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// -------------------------------------------------------------------

// stSendTeamChatInfo

// optional uint32 charID = 1;
inline bool stSendTeamChatInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendTeamChatInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendTeamChatInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendTeamChatInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSendTeamChatInfo::charid() const {
  return charid_;
}
inline void stSendTeamChatInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string content = 2;
inline bool stSendTeamChatInfo::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendTeamChatInfo::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendTeamChatInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendTeamChatInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& stSendTeamChatInfo::content() const {
  return *content_;
}
inline void stSendTeamChatInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stSendTeamChatInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stSendTeamChatInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendTeamChatInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* stSendTeamChatInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendTeamChatInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 vipLv = 3;
inline bool stSendTeamChatInfo::has_viplv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSendTeamChatInfo::set_has_viplv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSendTeamChatInfo::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSendTeamChatInfo::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stSendTeamChatInfo::viplv() const {
  return viplv_;
}
inline void stSendTeamChatInfo::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional bool isVoice = 4;
inline bool stSendTeamChatInfo::has_isvoice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSendTeamChatInfo::set_has_isvoice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSendTeamChatInfo::clear_has_isvoice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSendTeamChatInfo::clear_isvoice() {
  isvoice_ = false;
  clear_has_isvoice();
}
inline bool stSendTeamChatInfo::isvoice() const {
  return isvoice_;
}
inline void stSendTeamChatInfo::set_isvoice(bool value) {
  set_has_isvoice();
  isvoice_ = value;
}

// optional string voiceUrl = 5;
inline bool stSendTeamChatInfo::has_voiceurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSendTeamChatInfo::set_has_voiceurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSendTeamChatInfo::clear_has_voiceurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSendTeamChatInfo::clear_voiceurl() {
  if (voiceurl_ != &::google::protobuf::internal::kEmptyString) {
    voiceurl_->clear();
  }
  clear_has_voiceurl();
}
inline const ::std::string& stSendTeamChatInfo::voiceurl() const {
  return *voiceurl_;
}
inline void stSendTeamChatInfo::set_voiceurl(const ::std::string& value) {
  set_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    voiceurl_ = new ::std::string;
  }
  voiceurl_->assign(value);
}
inline void stSendTeamChatInfo::set_voiceurl(const char* value) {
  set_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    voiceurl_ = new ::std::string;
  }
  voiceurl_->assign(value);
}
inline void stSendTeamChatInfo::set_voiceurl(const char* value, size_t size) {
  set_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    voiceurl_ = new ::std::string;
  }
  voiceurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendTeamChatInfo::mutable_voiceurl() {
  set_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    voiceurl_ = new ::std::string;
  }
  return voiceurl_;
}
inline ::std::string* stSendTeamChatInfo::release_voiceurl() {
  clear_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voiceurl_;
    voiceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendTeamChatInfo::set_allocated_voiceurl(::std::string* voiceurl) {
  if (voiceurl_ != &::google::protobuf::internal::kEmptyString) {
    delete voiceurl_;
  }
  if (voiceurl) {
    set_has_voiceurl();
    voiceurl_ = voiceurl;
  } else {
    clear_has_voiceurl();
    voiceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 voiceLenght = 6;
inline bool stSendTeamChatInfo::has_voicelenght() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSendTeamChatInfo::set_has_voicelenght() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSendTeamChatInfo::clear_has_voicelenght() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSendTeamChatInfo::clear_voicelenght() {
  voicelenght_ = 0u;
  clear_has_voicelenght();
}
inline ::google::protobuf::uint32 stSendTeamChatInfo::voicelenght() const {
  return voicelenght_;
}
inline void stSendTeamChatInfo::set_voicelenght(::google::protobuf::uint32 value) {
  set_has_voicelenght();
  voicelenght_ = value;
}

// -------------------------------------------------------------------

// stTeamLeaveCopyMap

// optional uint32 teamID = 1;
inline bool stTeamLeaveCopyMap::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTeamLeaveCopyMap::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTeamLeaveCopyMap::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTeamLeaveCopyMap::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stTeamLeaveCopyMap::teamid() const {
  return teamid_;
}
inline void stTeamLeaveCopyMap::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// stTreasureCombine

// optional uint32 charID = 1;
inline bool stTreasureCombine::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTreasureCombine::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTreasureCombine::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTreasureCombine::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stTreasureCombine::charid() const {
  return charid_;
}
inline void stTreasureCombine::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 combineType = 2;
inline bool stTreasureCombine::has_combinetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stTreasureCombine::set_has_combinetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stTreasureCombine::clear_has_combinetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stTreasureCombine::clear_combinetype() {
  combinetype_ = 0u;
  clear_has_combinetype();
}
inline ::google::protobuf::uint32 stTreasureCombine::combinetype() const {
  return combinetype_;
}
inline void stTreasureCombine::set_combinetype(::google::protobuf::uint32 value) {
  set_has_combinetype();
  combinetype_ = value;
}

// -------------------------------------------------------------------

// stTreasureCombineSuccess

// optional uint32 charID = 1;
inline bool stTreasureCombineSuccess::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTreasureCombineSuccess::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTreasureCombineSuccess::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTreasureCombineSuccess::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stTreasureCombineSuccess::charid() const {
  return charid_;
}
inline void stTreasureCombineSuccess::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 itemID = 2;
inline bool stTreasureCombineSuccess::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stTreasureCombineSuccess::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stTreasureCombineSuccess::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stTreasureCombineSuccess::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stTreasureCombineSuccess::itemid() const {
  return itemid_;
}
inline void stTreasureCombineSuccess::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// stBuyPeaceModubleTime

// optional uint32 charID = 1;
inline bool stBuyPeaceModubleTime::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuyPeaceModubleTime::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuyPeaceModubleTime::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuyPeaceModubleTime::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stBuyPeaceModubleTime::charid() const {
  return charid_;
}
inline void stBuyPeaceModubleTime::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 addTime = 2;
inline bool stBuyPeaceModubleTime::has_addtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBuyPeaceModubleTime::set_has_addtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBuyPeaceModubleTime::clear_has_addtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBuyPeaceModubleTime::clear_addtime() {
  addtime_ = 0u;
  clear_has_addtime();
}
inline ::google::protobuf::uint32 stBuyPeaceModubleTime::addtime() const {
  return addtime_;
}
inline void stBuyPeaceModubleTime::set_addtime(::google::protobuf::uint32 value) {
  set_has_addtime();
  addtime_ = value;
}

// -------------------------------------------------------------------

// stReqChangeGameSvr

// optional uint32 charID = 1;
inline bool stReqChangeGameSvr::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqChangeGameSvr::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqChangeGameSvr::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqChangeGameSvr::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqChangeGameSvr::charid() const {
  return charid_;
}
inline void stReqChangeGameSvr::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 gameSvrID = 2;
inline bool stReqChangeGameSvr::has_gamesvrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqChangeGameSvr::set_has_gamesvrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqChangeGameSvr::clear_has_gamesvrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqChangeGameSvr::clear_gamesvrid() {
  gamesvrid_ = 0u;
  clear_has_gamesvrid();
}
inline ::google::protobuf::uint32 stReqChangeGameSvr::gamesvrid() const {
  return gamesvrid_;
}
inline void stReqChangeGameSvr::set_gamesvrid(::google::protobuf::uint32 value) {
  set_has_gamesvrid();
  gamesvrid_ = value;
}

// -------------------------------------------------------------------

// stConfirmChangeGameSvr

// optional uint32 charID = 1;
inline bool stConfirmChangeGameSvr::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stConfirmChangeGameSvr::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stConfirmChangeGameSvr::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stConfirmChangeGameSvr::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stConfirmChangeGameSvr::charid() const {
  return charid_;
}
inline void stConfirmChangeGameSvr::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 gameSvrID = 2;
inline bool stConfirmChangeGameSvr::has_gamesvrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stConfirmChangeGameSvr::set_has_gamesvrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stConfirmChangeGameSvr::clear_has_gamesvrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stConfirmChangeGameSvr::clear_gamesvrid() {
  gamesvrid_ = 0u;
  clear_has_gamesvrid();
}
inline ::google::protobuf::uint32 stConfirmChangeGameSvr::gamesvrid() const {
  return gamesvrid_;
}
inline void stConfirmChangeGameSvr::set_gamesvrid(::google::protobuf::uint32 value) {
  set_has_gamesvrid();
  gamesvrid_ = value;
}

// -------------------------------------------------------------------

// stRetOtherUserData2Me

// optional uint32 myCharID = 1;
inline bool stRetOtherUserData2Me::has_mycharid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetOtherUserData2Me::set_has_mycharid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetOtherUserData2Me::clear_has_mycharid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetOtherUserData2Me::clear_mycharid() {
  mycharid_ = 0u;
  clear_has_mycharid();
}
inline ::google::protobuf::uint32 stRetOtherUserData2Me::mycharid() const {
  return mycharid_;
}
inline void stRetOtherUserData2Me::set_mycharid(::google::protobuf::uint32 value) {
  set_has_mycharid();
  mycharid_ = value;
}

// optional uint32 otherCharID = 2;
inline bool stRetOtherUserData2Me::has_othercharid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetOtherUserData2Me::set_has_othercharid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetOtherUserData2Me::clear_has_othercharid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetOtherUserData2Me::clear_othercharid() {
  othercharid_ = 0u;
  clear_has_othercharid();
}
inline ::google::protobuf::uint32 stRetOtherUserData2Me::othercharid() const {
  return othercharid_;
}
inline void stRetOtherUserData2Me::set_othercharid(::google::protobuf::uint32 value) {
  set_has_othercharid();
  othercharid_ = value;
}

// optional bool isRobot = 3;
inline bool stRetOtherUserData2Me::has_isrobot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetOtherUserData2Me::set_has_isrobot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetOtherUserData2Me::clear_has_isrobot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetOtherUserData2Me::clear_isrobot() {
  isrobot_ = false;
  clear_has_isrobot();
}
inline bool stRetOtherUserData2Me::isrobot() const {
  return isrobot_;
}
inline void stRetOtherUserData2Me::set_isrobot(bool value) {
  set_has_isrobot();
  isrobot_ = value;
}

// optional uint32 dataSize = 4;
inline bool stRetOtherUserData2Me::has_datasize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetOtherUserData2Me::set_has_datasize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetOtherUserData2Me::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetOtherUserData2Me::clear_datasize() {
  datasize_ = 0u;
  clear_has_datasize();
}
inline ::google::protobuf::uint32 stRetOtherUserData2Me::datasize() const {
  return datasize_;
}
inline void stRetOtherUserData2Me::set_datasize(::google::protobuf::uint32 value) {
  set_has_datasize();
  datasize_ = value;
}

// optional bytes data = 5;
inline bool stRetOtherUserData2Me::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetOtherUserData2Me::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetOtherUserData2Me::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetOtherUserData2Me::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stRetOtherUserData2Me::data() const {
  return *data_;
}
inline void stRetOtherUserData2Me::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRetOtherUserData2Me::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRetOtherUserData2Me::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetOtherUserData2Me::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stRetOtherUserData2Me::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetOtherUserData2Me::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string guildName = 6;
inline bool stRetOtherUserData2Me::has_guildname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetOtherUserData2Me::set_has_guildname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetOtherUserData2Me::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetOtherUserData2Me::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stRetOtherUserData2Me::guildname() const {
  return *guildname_;
}
inline void stRetOtherUserData2Me::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stRetOtherUserData2Me::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stRetOtherUserData2Me::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetOtherUserData2Me::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stRetOtherUserData2Me::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetOtherUserData2Me::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stMailAttach

// optional uint32 itemID = 1;
inline bool stMailAttach::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMailAttach::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMailAttach::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMailAttach::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stMailAttach::itemid() const {
  return itemid_;
}
inline void stMailAttach::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stMailAttach::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMailAttach::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMailAttach::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMailAttach::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stMailAttach::num() const {
  return num_;
}
inline void stMailAttach::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stObtainItemFromMail

// repeated .Global.stMailAttach attachs = 1;
inline int stObtainItemFromMail::attachs_size() const {
  return attachs_.size();
}
inline void stObtainItemFromMail::clear_attachs() {
  attachs_.Clear();
}
inline const ::Global::stMailAttach& stObtainItemFromMail::attachs(int index) const {
  return attachs_.Get(index);
}
inline ::Global::stMailAttach* stObtainItemFromMail::mutable_attachs(int index) {
  return attachs_.Mutable(index);
}
inline ::Global::stMailAttach* stObtainItemFromMail::add_attachs() {
  return attachs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stMailAttach >&
stObtainItemFromMail::attachs() const {
  return attachs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stMailAttach >*
stObtainItemFromMail::mutable_attachs() {
  return &attachs_;
}

// optional uint32 charID = 2;
inline bool stObtainItemFromMail::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stObtainItemFromMail::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stObtainItemFromMail::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stObtainItemFromMail::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stObtainItemFromMail::charid() const {
  return charid_;
}
inline void stObtainItemFromMail::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynAddTreasure

// optional uint32 resID = 1;
inline bool stSynAddTreasure::has_resid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynAddTreasure::set_has_resid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynAddTreasure::clear_has_resid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynAddTreasure::clear_resid() {
  resid_ = 0u;
  clear_has_resid();
}
inline ::google::protobuf::uint32 stSynAddTreasure::resid() const {
  return resid_;
}
inline void stSynAddTreasure::set_resid(::google::protobuf::uint32 value) {
  set_has_resid();
  resid_ = value;
}

// optional uint32 num = 2;
inline bool stSynAddTreasure::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynAddTreasure::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynAddTreasure::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynAddTreasure::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynAddTreasure::num() const {
  return num_;
}
inline void stSynAddTreasure::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 charID = 3;
inline bool stSynAddTreasure::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynAddTreasure::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynAddTreasure::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynAddTreasure::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynAddTreasure::charid() const {
  return charid_;
}
inline void stSynAddTreasure::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stBeginPKWithOther

// optional uint32 myCharID = 1;
inline bool stBeginPKWithOther::has_mycharid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBeginPKWithOther::set_has_mycharid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBeginPKWithOther::clear_has_mycharid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBeginPKWithOther::clear_mycharid() {
  mycharid_ = 0u;
  clear_has_mycharid();
}
inline ::google::protobuf::uint32 stBeginPKWithOther::mycharid() const {
  return mycharid_;
}
inline void stBeginPKWithOther::set_mycharid(::google::protobuf::uint32 value) {
  set_has_mycharid();
  mycharid_ = value;
}

// optional uint32 otherCharID = 2;
inline bool stBeginPKWithOther::has_othercharid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBeginPKWithOther::set_has_othercharid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBeginPKWithOther::clear_has_othercharid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBeginPKWithOther::clear_othercharid() {
  othercharid_ = 0u;
  clear_has_othercharid();
}
inline ::google::protobuf::uint32 stBeginPKWithOther::othercharid() const {
  return othercharid_;
}
inline void stBeginPKWithOther::set_othercharid(::google::protobuf::uint32 value) {
  set_has_othercharid();
  othercharid_ = value;
}

// optional uint32 dataSize = 3;
inline bool stBeginPKWithOther::has_datasize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBeginPKWithOther::set_has_datasize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBeginPKWithOther::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBeginPKWithOther::clear_datasize() {
  datasize_ = 0u;
  clear_has_datasize();
}
inline ::google::protobuf::uint32 stBeginPKWithOther::datasize() const {
  return datasize_;
}
inline void stBeginPKWithOther::set_datasize(::google::protobuf::uint32 value) {
  set_has_datasize();
  datasize_ = value;
}

// optional bytes data = 4;
inline bool stBeginPKWithOther::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stBeginPKWithOther::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stBeginPKWithOther::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stBeginPKWithOther::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stBeginPKWithOther::data() const {
  return *data_;
}
inline void stBeginPKWithOther::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stBeginPKWithOther::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stBeginPKWithOther::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBeginPKWithOther::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stBeginPKWithOther::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBeginPKWithOther::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Global.stBeginPKWithOther.ePKType type = 5;
inline bool stBeginPKWithOther::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stBeginPKWithOther::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stBeginPKWithOther::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stBeginPKWithOther::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Global::stBeginPKWithOther_ePKType stBeginPKWithOther::type() const {
  return static_cast< ::Global::stBeginPKWithOther_ePKType >(type_);
}
inline void stBeginPKWithOther::set_type(::Global::stBeginPKWithOther_ePKType value) {
  assert(::Global::stBeginPKWithOther_ePKType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 challengeRank = 6;
inline bool stBeginPKWithOther::has_challengerank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stBeginPKWithOther::set_has_challengerank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stBeginPKWithOther::clear_has_challengerank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stBeginPKWithOther::clear_challengerank() {
  challengerank_ = 0u;
  clear_has_challengerank();
}
inline ::google::protobuf::uint32 stBeginPKWithOther::challengerank() const {
  return challengerank_;
}
inline void stBeginPKWithOther::set_challengerank(::google::protobuf::uint32 value) {
  set_has_challengerank();
  challengerank_ = value;
}

// optional uint32 robotID = 7;
inline bool stBeginPKWithOther::has_robotid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stBeginPKWithOther::set_has_robotid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stBeginPKWithOther::clear_has_robotid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stBeginPKWithOther::clear_robotid() {
  robotid_ = 0u;
  clear_has_robotid();
}
inline ::google::protobuf::uint32 stBeginPKWithOther::robotid() const {
  return robotid_;
}
inline void stBeginPKWithOther::set_robotid(::google::protobuf::uint32 value) {
  set_has_robotid();
  robotid_ = value;
}

// -------------------------------------------------------------------

// stUserLeitaiChallenge

// optional uint32 round = 1;
inline bool stUserLeitaiChallenge::has_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserLeitaiChallenge::set_has_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserLeitaiChallenge::clear_has_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserLeitaiChallenge::clear_round() {
  round_ = 0u;
  clear_has_round();
}
inline ::google::protobuf::uint32 stUserLeitaiChallenge::round() const {
  return round_;
}
inline void stUserLeitaiChallenge::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
}

// optional uint32 charID = 2;
inline bool stUserLeitaiChallenge::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserLeitaiChallenge::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserLeitaiChallenge::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserLeitaiChallenge::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserLeitaiChallenge::charid() const {
  return charid_;
}
inline void stUserLeitaiChallenge::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 mode = 3;
inline bool stUserLeitaiChallenge::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUserLeitaiChallenge::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUserLeitaiChallenge::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUserLeitaiChallenge::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
inline ::google::protobuf::uint32 stUserLeitaiChallenge::mode() const {
  return mode_;
}
inline void stUserLeitaiChallenge::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
}

// optional uint32 challengeCharID = 4;
inline bool stUserLeitaiChallenge::has_challengecharid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUserLeitaiChallenge::set_has_challengecharid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUserLeitaiChallenge::clear_has_challengecharid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUserLeitaiChallenge::clear_challengecharid() {
  challengecharid_ = 0u;
  clear_has_challengecharid();
}
inline ::google::protobuf::uint32 stUserLeitaiChallenge::challengecharid() const {
  return challengecharid_;
}
inline void stUserLeitaiChallenge::set_challengecharid(::google::protobuf::uint32 value) {
  set_has_challengecharid();
  challengecharid_ = value;
}

// -------------------------------------------------------------------

// stArenaPKResult

// optional uint32 charID = 1;
inline bool stArenaPKResult::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stArenaPKResult::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stArenaPKResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stArenaPKResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stArenaPKResult::charid() const {
  return charid_;
}
inline void stArenaPKResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional bool win = 2;
inline bool stArenaPKResult::has_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stArenaPKResult::set_has_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stArenaPKResult::clear_has_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stArenaPKResult::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool stArenaPKResult::win() const {
  return win_;
}
inline void stArenaPKResult::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// optional uint32 rank = 3;
inline bool stArenaPKResult::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stArenaPKResult::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stArenaPKResult::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stArenaPKResult::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 stArenaPKResult::rank() const {
  return rank_;
}
inline void stArenaPKResult::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 historyRank = 4;
inline bool stArenaPKResult::has_historyrank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stArenaPKResult::set_has_historyrank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stArenaPKResult::clear_has_historyrank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stArenaPKResult::clear_historyrank() {
  historyrank_ = 0u;
  clear_has_historyrank();
}
inline ::google::protobuf::uint32 stArenaPKResult::historyrank() const {
  return historyrank_;
}
inline void stArenaPKResult::set_historyrank(::google::protobuf::uint32 value) {
  set_has_historyrank();
  historyrank_ = value;
}

// -------------------------------------------------------------------

// stSynDrawHeroScore

// optional uint32 charID = 1;
inline bool stSynDrawHeroScore::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynDrawHeroScore::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynDrawHeroScore::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynDrawHeroScore::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynDrawHeroScore::charid() const {
  return charid_;
}
inline void stSynDrawHeroScore::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 score = 2;
inline bool stSynDrawHeroScore::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynDrawHeroScore::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynDrawHeroScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynDrawHeroScore::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stSynDrawHeroScore::score() const {
  return score_;
}
inline void stSynDrawHeroScore::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// stUpLeitaiUseTime

// optional uint32 charID = 1;
inline bool stUpLeitaiUseTime::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUpLeitaiUseTime::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUpLeitaiUseTime::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUpLeitaiUseTime::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUpLeitaiUseTime::charid() const {
  return charid_;
}
inline void stUpLeitaiUseTime::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 useTime = 2;
inline bool stUpLeitaiUseTime::has_usetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUpLeitaiUseTime::set_has_usetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUpLeitaiUseTime::clear_has_usetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUpLeitaiUseTime::clear_usetime() {
  usetime_ = 0u;
  clear_has_usetime();
}
inline ::google::protobuf::uint32 stUpLeitaiUseTime::usetime() const {
  return usetime_;
}
inline void stUpLeitaiUseTime::set_usetime(::google::protobuf::uint32 value) {
  set_has_usetime();
  usetime_ = value;
}

// -------------------------------------------------------------------

// stUserLeaveGuild

// repeated uint32 charIDs = 1;
inline int stUserLeaveGuild::charids_size() const {
  return charids_.size();
}
inline void stUserLeaveGuild::clear_charids() {
  charids_.Clear();
}
inline ::google::protobuf::uint32 stUserLeaveGuild::charids(int index) const {
  return charids_.Get(index);
}
inline void stUserLeaveGuild::set_charids(int index, ::google::protobuf::uint32 value) {
  charids_.Set(index, value);
}
inline void stUserLeaveGuild::add_charids(::google::protobuf::uint32 value) {
  charids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stUserLeaveGuild::charids() const {
  return charids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stUserLeaveGuild::mutable_charids() {
  return &charids_;
}

// -------------------------------------------------------------------

// stEnterCopymapMemInfo

// optional uint32 charID = 1;
inline bool stEnterCopymapMemInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEnterCopymapMemInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEnterCopymapMemInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEnterCopymapMemInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stEnterCopymapMemInfo::charid() const {
  return charid_;
}
inline void stEnterCopymapMemInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 addDamagePer = 2;
inline bool stEnterCopymapMemInfo::has_adddamageper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEnterCopymapMemInfo::set_has_adddamageper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEnterCopymapMemInfo::clear_has_adddamageper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEnterCopymapMemInfo::clear_adddamageper() {
  adddamageper_ = 0u;
  clear_has_adddamageper();
}
inline ::google::protobuf::uint32 stEnterCopymapMemInfo::adddamageper() const {
  return adddamageper_;
}
inline void stEnterCopymapMemInfo::set_adddamageper(::google::protobuf::uint32 value) {
  set_has_adddamageper();
  adddamageper_ = value;
}

// -------------------------------------------------------------------

// stTeamEnterCopyMap

// optional uint32 copymapID = 1;
inline bool stTeamEnterCopyMap::has_copymapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTeamEnterCopyMap::set_has_copymapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTeamEnterCopyMap::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTeamEnterCopyMap::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stTeamEnterCopyMap::copymapid() const {
  return copymapid_;
}
inline void stTeamEnterCopyMap::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// optional uint32 teamID = 2;
inline bool stTeamEnterCopyMap::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stTeamEnterCopyMap::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stTeamEnterCopyMap::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stTeamEnterCopyMap::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stTeamEnterCopyMap::teamid() const {
  return teamid_;
}
inline void stTeamEnterCopyMap::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// repeated .Global.stEnterCopymapMemInfo memerInfo = 3;
inline int stTeamEnterCopyMap::memerinfo_size() const {
  return memerinfo_.size();
}
inline void stTeamEnterCopyMap::clear_memerinfo() {
  memerinfo_.Clear();
}
inline const ::Global::stEnterCopymapMemInfo& stTeamEnterCopyMap::memerinfo(int index) const {
  return memerinfo_.Get(index);
}
inline ::Global::stEnterCopymapMemInfo* stTeamEnterCopyMap::mutable_memerinfo(int index) {
  return memerinfo_.Mutable(index);
}
inline ::Global::stEnterCopymapMemInfo* stTeamEnterCopyMap::add_memerinfo() {
  return memerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stEnterCopymapMemInfo >&
stTeamEnterCopyMap::memerinfo() const {
  return memerinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stEnterCopymapMemInfo >*
stTeamEnterCopyMap::mutable_memerinfo() {
  return &memerinfo_;
}

// optional uint32 bossHP = 4;
inline bool stTeamEnterCopyMap::has_bosshp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stTeamEnterCopyMap::set_has_bosshp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stTeamEnterCopyMap::clear_has_bosshp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stTeamEnterCopyMap::clear_bosshp() {
  bosshp_ = 0u;
  clear_has_bosshp();
}
inline ::google::protobuf::uint32 stTeamEnterCopyMap::bosshp() const {
  return bosshp_;
}
inline void stTeamEnterCopyMap::set_bosshp(::google::protobuf::uint32 value) {
  set_has_bosshp();
  bosshp_ = value;
}

// optional uint32 bossLv = 5;
inline bool stTeamEnterCopyMap::has_bosslv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stTeamEnterCopyMap::set_has_bosslv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stTeamEnterCopyMap::clear_has_bosslv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stTeamEnterCopyMap::clear_bosslv() {
  bosslv_ = 0u;
  clear_has_bosslv();
}
inline ::google::protobuf::uint32 stTeamEnterCopyMap::bosslv() const {
  return bosslv_;
}
inline void stTeamEnterCopyMap::set_bosslv(::google::protobuf::uint32 value) {
  set_has_bosslv();
  bosslv_ = value;
}

// -------------------------------------------------------------------

// stOne2OnePVPEnterCopyMap

// repeated uint32 memberIDs = 1;
inline int stOne2OnePVPEnterCopyMap::memberids_size() const {
  return memberids_.size();
}
inline void stOne2OnePVPEnterCopyMap::clear_memberids() {
  memberids_.Clear();
}
inline ::google::protobuf::uint32 stOne2OnePVPEnterCopyMap::memberids(int index) const {
  return memberids_.Get(index);
}
inline void stOne2OnePVPEnterCopyMap::set_memberids(int index, ::google::protobuf::uint32 value) {
  memberids_.Set(index, value);
}
inline void stOne2OnePVPEnterCopyMap::add_memberids(::google::protobuf::uint32 value) {
  memberids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stOne2OnePVPEnterCopyMap::memberids() const {
  return memberids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stOne2OnePVPEnterCopyMap::mutable_memberids() {
  return &memberids_;
}

// optional bool pkWithFriend = 2;
inline bool stOne2OnePVPEnterCopyMap::has_pkwithfriend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOne2OnePVPEnterCopyMap::set_has_pkwithfriend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOne2OnePVPEnterCopyMap::clear_has_pkwithfriend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOne2OnePVPEnterCopyMap::clear_pkwithfriend() {
  pkwithfriend_ = false;
  clear_has_pkwithfriend();
}
inline bool stOne2OnePVPEnterCopyMap::pkwithfriend() const {
  return pkwithfriend_;
}
inline void stOne2OnePVPEnterCopyMap::set_pkwithfriend(bool value) {
  set_has_pkwithfriend();
  pkwithfriend_ = value;
}

// -------------------------------------------------------------------

// stForwardCapture

// optional uint32 charID = 1;
inline bool stForwardCapture::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stForwardCapture::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stForwardCapture::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stForwardCapture::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stForwardCapture::charid() const {
  return charid_;
}
inline void stForwardCapture::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 otherID = 2;
inline bool stForwardCapture::has_otherid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stForwardCapture::set_has_otherid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stForwardCapture::clear_has_otherid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stForwardCapture::clear_otherid() {
  otherid_ = 0u;
  clear_has_otherid();
}
inline ::google::protobuf::uint32 stForwardCapture::otherid() const {
  return otherid_;
}
inline void stForwardCapture::set_otherid(::google::protobuf::uint32 value) {
  set_has_otherid();
  otherid_ = value;
}

// optional uint32 combineID = 3;
inline bool stForwardCapture::has_combineid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stForwardCapture::set_has_combineid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stForwardCapture::clear_has_combineid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stForwardCapture::clear_combineid() {
  combineid_ = 0u;
  clear_has_combineid();
}
inline ::google::protobuf::uint32 stForwardCapture::combineid() const {
  return combineid_;
}
inline void stForwardCapture::set_combineid(::google::protobuf::uint32 value) {
  set_has_combineid();
  combineid_ = value;
}

// optional uint32 resType = 4;
inline bool stForwardCapture::has_restype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stForwardCapture::set_has_restype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stForwardCapture::clear_has_restype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stForwardCapture::clear_restype() {
  restype_ = 0u;
  clear_has_restype();
}
inline ::google::protobuf::uint32 stForwardCapture::restype() const {
  return restype_;
}
inline void stForwardCapture::set_restype(::google::protobuf::uint32 value) {
  set_has_restype();
  restype_ = value;
}

// optional uint32 num = 5;
inline bool stForwardCapture::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stForwardCapture::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stForwardCapture::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stForwardCapture::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stForwardCapture::num() const {
  return num_;
}
inline void stForwardCapture::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional bool multiCapture = 6;
inline bool stForwardCapture::has_multicapture() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stForwardCapture::set_has_multicapture() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stForwardCapture::clear_has_multicapture() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stForwardCapture::clear_multicapture() {
  multicapture_ = false;
  clear_has_multicapture();
}
inline bool stForwardCapture::multicapture() const {
  return multicapture_;
}
inline void stForwardCapture::set_multicapture(bool value) {
  set_has_multicapture();
  multicapture_ = value;
}

// -------------------------------------------------------------------

// stCaptureRewardItem

// optional uint32 itemID = 1;
inline bool stCaptureRewardItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCaptureRewardItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCaptureRewardItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCaptureRewardItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stCaptureRewardItem::itemid() const {
  return itemid_;
}
inline void stCaptureRewardItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stCaptureRewardItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCaptureRewardItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCaptureRewardItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCaptureRewardItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stCaptureRewardItem::num() const {
  return num_;
}
inline void stCaptureRewardItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stCaptureReward

// optional uint32 charID = 1;
inline bool stCaptureReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCaptureReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCaptureReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCaptureReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCaptureReward::charid() const {
  return charid_;
}
inline void stCaptureReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 dropID = 2;
inline bool stCaptureReward::has_dropid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCaptureReward::set_has_dropid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCaptureReward::clear_has_dropid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCaptureReward::clear_dropid() {
  dropid_ = 0u;
  clear_has_dropid();
}
inline ::google::protobuf::uint32 stCaptureReward::dropid() const {
  return dropid_;
}
inline void stCaptureReward::set_dropid(::google::protobuf::uint32 value) {
  set_has_dropid();
  dropid_ = value;
}

// optional uint32 moneyCoef = 3;
inline bool stCaptureReward::has_moneycoef() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCaptureReward::set_has_moneycoef() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCaptureReward::clear_has_moneycoef() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCaptureReward::clear_moneycoef() {
  moneycoef_ = 0u;
  clear_has_moneycoef();
}
inline ::google::protobuf::uint32 stCaptureReward::moneycoef() const {
  return moneycoef_;
}
inline void stCaptureReward::set_moneycoef(::google::protobuf::uint32 value) {
  set_has_moneycoef();
  moneycoef_ = value;
}

// optional uint32 expCoef = 4;
inline bool stCaptureReward::has_expcoef() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stCaptureReward::set_has_expcoef() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stCaptureReward::clear_has_expcoef() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stCaptureReward::clear_expcoef() {
  expcoef_ = 0u;
  clear_has_expcoef();
}
inline ::google::protobuf::uint32 stCaptureReward::expcoef() const {
  return expcoef_;
}
inline void stCaptureReward::set_expcoef(::google::protobuf::uint32 value) {
  set_has_expcoef();
  expcoef_ = value;
}

// optional bool obtainPiece = 5;
inline bool stCaptureReward::has_obtainpiece() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stCaptureReward::set_has_obtainpiece() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stCaptureReward::clear_has_obtainpiece() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stCaptureReward::clear_obtainpiece() {
  obtainpiece_ = false;
  clear_has_obtainpiece();
}
inline bool stCaptureReward::obtainpiece() const {
  return obtainpiece_;
}
inline void stCaptureReward::set_obtainpiece(bool value) {
  set_has_obtainpiece();
  obtainpiece_ = value;
}

// optional uint32 num = 6;
inline bool stCaptureReward::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stCaptureReward::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stCaptureReward::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stCaptureReward::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stCaptureReward::num() const {
  return num_;
}
inline void stCaptureReward::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional bool multiCapture = 7;
inline bool stCaptureReward::has_multicapture() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stCaptureReward::set_has_multicapture() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stCaptureReward::clear_has_multicapture() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stCaptureReward::clear_multicapture() {
  multicapture_ = false;
  clear_has_multicapture();
}
inline bool stCaptureReward::multicapture() const {
  return multicapture_;
}
inline void stCaptureReward::set_multicapture(bool value) {
  set_has_multicapture();
  multicapture_ = value;
}

// -------------------------------------------------------------------

// stRealTimeBattleEnterCopymap

// optional .Global.eRealTimePKType pkType = 1;
inline bool stRealTimeBattleEnterCopymap::has_pktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRealTimeBattleEnterCopymap::set_has_pktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRealTimeBattleEnterCopymap::clear_has_pktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRealTimeBattleEnterCopymap::clear_pktype() {
  pktype_ = 1;
  clear_has_pktype();
}
inline ::Global::eRealTimePKType stRealTimeBattleEnterCopymap::pktype() const {
  return static_cast< ::Global::eRealTimePKType >(pktype_);
}
inline void stRealTimeBattleEnterCopymap::set_pktype(::Global::eRealTimePKType value) {
  assert(::Global::eRealTimePKType_IsValid(value));
  set_has_pktype();
  pktype_ = value;
}

// optional uint32 teamAID = 2;
inline bool stRealTimeBattleEnterCopymap::has_teamaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRealTimeBattleEnterCopymap::set_has_teamaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRealTimeBattleEnterCopymap::clear_has_teamaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRealTimeBattleEnterCopymap::clear_teamaid() {
  teamaid_ = 0u;
  clear_has_teamaid();
}
inline ::google::protobuf::uint32 stRealTimeBattleEnterCopymap::teamaid() const {
  return teamaid_;
}
inline void stRealTimeBattleEnterCopymap::set_teamaid(::google::protobuf::uint32 value) {
  set_has_teamaid();
  teamaid_ = value;
}

// optional uint32 teamBID = 3;
inline bool stRealTimeBattleEnterCopymap::has_teambid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRealTimeBattleEnterCopymap::set_has_teambid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRealTimeBattleEnterCopymap::clear_has_teambid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRealTimeBattleEnterCopymap::clear_teambid() {
  teambid_ = 0u;
  clear_has_teambid();
}
inline ::google::protobuf::uint32 stRealTimeBattleEnterCopymap::teambid() const {
  return teambid_;
}
inline void stRealTimeBattleEnterCopymap::set_teambid(::google::protobuf::uint32 value) {
  set_has_teambid();
  teambid_ = value;
}

// repeated uint32 teamAMembers = 4;
inline int stRealTimeBattleEnterCopymap::teamamembers_size() const {
  return teamamembers_.size();
}
inline void stRealTimeBattleEnterCopymap::clear_teamamembers() {
  teamamembers_.Clear();
}
inline ::google::protobuf::uint32 stRealTimeBattleEnterCopymap::teamamembers(int index) const {
  return teamamembers_.Get(index);
}
inline void stRealTimeBattleEnterCopymap::set_teamamembers(int index, ::google::protobuf::uint32 value) {
  teamamembers_.Set(index, value);
}
inline void stRealTimeBattleEnterCopymap::add_teamamembers(::google::protobuf::uint32 value) {
  teamamembers_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stRealTimeBattleEnterCopymap::teamamembers() const {
  return teamamembers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stRealTimeBattleEnterCopymap::mutable_teamamembers() {
  return &teamamembers_;
}

// repeated uint32 teamBMembers = 5;
inline int stRealTimeBattleEnterCopymap::teambmembers_size() const {
  return teambmembers_.size();
}
inline void stRealTimeBattleEnterCopymap::clear_teambmembers() {
  teambmembers_.Clear();
}
inline ::google::protobuf::uint32 stRealTimeBattleEnterCopymap::teambmembers(int index) const {
  return teambmembers_.Get(index);
}
inline void stRealTimeBattleEnterCopymap::set_teambmembers(int index, ::google::protobuf::uint32 value) {
  teambmembers_.Set(index, value);
}
inline void stRealTimeBattleEnterCopymap::add_teambmembers(::google::protobuf::uint32 value) {
  teambmembers_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stRealTimeBattleEnterCopymap::teambmembers() const {
  return teambmembers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stRealTimeBattleEnterCopymap::mutable_teambmembers() {
  return &teambmembers_;
}

// -------------------------------------------------------------------

// stNotifyAddLilian

// optional uint32 charID = 1;
inline bool stNotifyAddLilian::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyAddLilian::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyAddLilian::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyAddLilian::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyAddLilian::charid() const {
  return charid_;
}
inline void stNotifyAddLilian::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 num = 2;
inline bool stNotifyAddLilian::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyAddLilian::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyAddLilian::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyAddLilian::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stNotifyAddLilian::num() const {
  return num_;
}
inline void stNotifyAddLilian::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stEnterGuildCopymap

// optional string guildName = 1;
inline bool stEnterGuildCopymap::has_guildname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEnterGuildCopymap::set_has_guildname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEnterGuildCopymap::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEnterGuildCopymap::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stEnterGuildCopymap::guildname() const {
  return *guildname_;
}
inline void stEnterGuildCopymap::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stEnterGuildCopymap::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stEnterGuildCopymap::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stEnterGuildCopymap::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stEnterGuildCopymap::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stEnterGuildCopymap::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID = 2;
inline bool stEnterGuildCopymap::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEnterGuildCopymap::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEnterGuildCopymap::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEnterGuildCopymap::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stEnterGuildCopymap::charid() const {
  return charid_;
}
inline void stEnterGuildCopymap::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynMyContribyte

// optional uint32 charID = 1;
inline bool stSynMyContribyte::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynMyContribyte::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynMyContribyte::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynMyContribyte::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynMyContribyte::charid() const {
  return charid_;
}
inline void stSynMyContribyte::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 myContribute = 2;
inline bool stSynMyContribyte::has_mycontribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynMyContribyte::set_has_mycontribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynMyContribyte::clear_has_mycontribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynMyContribyte::clear_mycontribute() {
  mycontribute_ = 0u;
  clear_has_mycontribute();
}
inline ::google::protobuf::uint32 stSynMyContribyte::mycontribute() const {
  return mycontribute_;
}
inline void stSynMyContribyte::set_mycontribute(::google::protobuf::uint32 value) {
  set_has_mycontribute();
  mycontribute_ = value;
}

// -------------------------------------------------------------------

// stOnlineUserGMType

// optional uint32 charID = 1;
inline bool stOnlineUserGMType::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOnlineUserGMType::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOnlineUserGMType::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOnlineUserGMType::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stOnlineUserGMType::charid() const {
  return charid_;
}
inline void stOnlineUserGMType::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 gmValue = 2;
inline bool stOnlineUserGMType::has_gmvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOnlineUserGMType::set_has_gmvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOnlineUserGMType::clear_has_gmvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOnlineUserGMType::clear_gmvalue() {
  gmvalue_ = 0u;
  clear_has_gmvalue();
}
inline ::google::protobuf::uint32 stOnlineUserGMType::gmvalue() const {
  return gmvalue_;
}
inline void stOnlineUserGMType::set_gmvalue(::google::protobuf::uint32 value) {
  set_has_gmvalue();
  gmvalue_ = value;
}

// -------------------------------------------------------------------

// stForbidOnlineUser

// optional uint32 charID = 1;
inline bool stForbidOnlineUser::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stForbidOnlineUser::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stForbidOnlineUser::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stForbidOnlineUser::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stForbidOnlineUser::charid() const {
  return charid_;
}
inline void stForbidOnlineUser::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOne2OnePVPFinish

// optional uint32 charID1 = 1;
inline bool stOne2OnePVPFinish::has_charid1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOne2OnePVPFinish::set_has_charid1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOne2OnePVPFinish::clear_has_charid1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOne2OnePVPFinish::clear_charid1() {
  charid1_ = 0u;
  clear_has_charid1();
}
inline ::google::protobuf::uint32 stOne2OnePVPFinish::charid1() const {
  return charid1_;
}
inline void stOne2OnePVPFinish::set_charid1(::google::protobuf::uint32 value) {
  set_has_charid1();
  charid1_ = value;
}

// optional uint32 score1 = 2;
inline bool stOne2OnePVPFinish::has_score1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOne2OnePVPFinish::set_has_score1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOne2OnePVPFinish::clear_has_score1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOne2OnePVPFinish::clear_score1() {
  score1_ = 0u;
  clear_has_score1();
}
inline ::google::protobuf::uint32 stOne2OnePVPFinish::score1() const {
  return score1_;
}
inline void stOne2OnePVPFinish::set_score1(::google::protobuf::uint32 value) {
  set_has_score1();
  score1_ = value;
}

// optional bool win1 = 3;
inline bool stOne2OnePVPFinish::has_win1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stOne2OnePVPFinish::set_has_win1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stOne2OnePVPFinish::clear_has_win1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stOne2OnePVPFinish::clear_win1() {
  win1_ = false;
  clear_has_win1();
}
inline bool stOne2OnePVPFinish::win1() const {
  return win1_;
}
inline void stOne2OnePVPFinish::set_win1(bool value) {
  set_has_win1();
  win1_ = value;
}

// optional uint32 charID2 = 4;
inline bool stOne2OnePVPFinish::has_charid2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stOne2OnePVPFinish::set_has_charid2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stOne2OnePVPFinish::clear_has_charid2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stOne2OnePVPFinish::clear_charid2() {
  charid2_ = 0u;
  clear_has_charid2();
}
inline ::google::protobuf::uint32 stOne2OnePVPFinish::charid2() const {
  return charid2_;
}
inline void stOne2OnePVPFinish::set_charid2(::google::protobuf::uint32 value) {
  set_has_charid2();
  charid2_ = value;
}

// optional uint32 score2 = 5;
inline bool stOne2OnePVPFinish::has_score2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stOne2OnePVPFinish::set_has_score2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stOne2OnePVPFinish::clear_has_score2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stOne2OnePVPFinish::clear_score2() {
  score2_ = 0u;
  clear_has_score2();
}
inline ::google::protobuf::uint32 stOne2OnePVPFinish::score2() const {
  return score2_;
}
inline void stOne2OnePVPFinish::set_score2(::google::protobuf::uint32 value) {
  set_has_score2();
  score2_ = value;
}

// optional bool win2 = 6;
inline bool stOne2OnePVPFinish::has_win2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stOne2OnePVPFinish::set_has_win2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stOne2OnePVPFinish::clear_has_win2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stOne2OnePVPFinish::clear_win2() {
  win2_ = false;
  clear_has_win2();
}
inline bool stOne2OnePVPFinish::win2() const {
  return win2_;
}
inline void stOne2OnePVPFinish::set_win2(bool value) {
  set_has_win2();
  win2_ = value;
}

// optional bool pkWithFriend = 7;
inline bool stOne2OnePVPFinish::has_pkwithfriend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stOne2OnePVPFinish::set_has_pkwithfriend() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stOne2OnePVPFinish::clear_has_pkwithfriend() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stOne2OnePVPFinish::clear_pkwithfriend() {
  pkwithfriend_ = false;
  clear_has_pkwithfriend();
}
inline bool stOne2OnePVPFinish::pkwithfriend() const {
  return pkwithfriend_;
}
inline void stOne2OnePVPFinish::set_pkwithfriend(bool value) {
  set_has_pkwithfriend();
  pkwithfriend_ = value;
}

// -------------------------------------------------------------------

// stActivityConfig

// optional uint32 activityID = 1;
inline bool stActivityConfig::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stActivityConfig::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stActivityConfig::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stActivityConfig::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stActivityConfig::activityid() const {
  return activityid_;
}
inline void stActivityConfig::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional string cofing = 2;
inline bool stActivityConfig::has_cofing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stActivityConfig::set_has_cofing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stActivityConfig::clear_has_cofing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stActivityConfig::clear_cofing() {
  if (cofing_ != &::google::protobuf::internal::kEmptyString) {
    cofing_->clear();
  }
  clear_has_cofing();
}
inline const ::std::string& stActivityConfig::cofing() const {
  return *cofing_;
}
inline void stActivityConfig::set_cofing(const ::std::string& value) {
  set_has_cofing();
  if (cofing_ == &::google::protobuf::internal::kEmptyString) {
    cofing_ = new ::std::string;
  }
  cofing_->assign(value);
}
inline void stActivityConfig::set_cofing(const char* value) {
  set_has_cofing();
  if (cofing_ == &::google::protobuf::internal::kEmptyString) {
    cofing_ = new ::std::string;
  }
  cofing_->assign(value);
}
inline void stActivityConfig::set_cofing(const char* value, size_t size) {
  set_has_cofing();
  if (cofing_ == &::google::protobuf::internal::kEmptyString) {
    cofing_ = new ::std::string;
  }
  cofing_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stActivityConfig::mutable_cofing() {
  set_has_cofing();
  if (cofing_ == &::google::protobuf::internal::kEmptyString) {
    cofing_ = new ::std::string;
  }
  return cofing_;
}
inline ::std::string* stActivityConfig::release_cofing() {
  clear_has_cofing();
  if (cofing_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cofing_;
    cofing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stActivityConfig::set_allocated_cofing(::std::string* cofing) {
  if (cofing_ != &::google::protobuf::internal::kEmptyString) {
    delete cofing_;
  }
  if (cofing) {
    set_has_cofing();
    cofing_ = cofing;
  } else {
    clear_has_cofing();
    cofing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stSynActivityConfig

// repeated .Global.stActivityConfig data = 1;
inline int stSynActivityConfig::data_size() const {
  return data_.size();
}
inline void stSynActivityConfig::clear_data() {
  data_.Clear();
}
inline const ::Global::stActivityConfig& stSynActivityConfig::data(int index) const {
  return data_.Get(index);
}
inline ::Global::stActivityConfig* stSynActivityConfig::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Global::stActivityConfig* stSynActivityConfig::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stActivityConfig >&
stSynActivityConfig::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stActivityConfig >*
stSynActivityConfig::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// stCaptureTreasureFail

// optional uint32 charID = 1;
inline bool stCaptureTreasureFail::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCaptureTreasureFail::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCaptureTreasureFail::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCaptureTreasureFail::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCaptureTreasureFail::charid() const {
  return charid_;
}
inline void stCaptureTreasureFail::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stCharID2Rank

// optional uint32 charID = 1;
inline bool stCharID2Rank::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCharID2Rank::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCharID2Rank::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCharID2Rank::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCharID2Rank::charid() const {
  return charid_;
}
inline void stCharID2Rank::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 rank = 2;
inline bool stCharID2Rank::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCharID2Rank::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCharID2Rank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCharID2Rank::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 stCharID2Rank::rank() const {
  return rank_;
}
inline void stCharID2Rank::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// stRankModuleInfo

// optional uint32 moduleID = 1;
inline bool stRankModuleInfo::has_moduleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRankModuleInfo::set_has_moduleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRankModuleInfo::clear_has_moduleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRankModuleInfo::clear_moduleid() {
  moduleid_ = 0u;
  clear_has_moduleid();
}
inline ::google::protobuf::uint32 stRankModuleInfo::moduleid() const {
  return moduleid_;
}
inline void stRankModuleInfo::set_moduleid(::google::protobuf::uint32 value) {
  set_has_moduleid();
  moduleid_ = value;
}

// repeated .Global.stCharID2Rank charID2Rank = 2;
inline int stRankModuleInfo::charid2rank_size() const {
  return charid2rank_.size();
}
inline void stRankModuleInfo::clear_charid2rank() {
  charid2rank_.Clear();
}
inline const ::Global::stCharID2Rank& stRankModuleInfo::charid2rank(int index) const {
  return charid2rank_.Get(index);
}
inline ::Global::stCharID2Rank* stRankModuleInfo::mutable_charid2rank(int index) {
  return charid2rank_.Mutable(index);
}
inline ::Global::stCharID2Rank* stRankModuleInfo::add_charid2rank() {
  return charid2rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stCharID2Rank >&
stRankModuleInfo::charid2rank() const {
  return charid2rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stCharID2Rank >*
stRankModuleInfo::mutable_charid2rank() {
  return &charid2rank_;
}

// -------------------------------------------------------------------

// stSynRankModuleInfo

// repeated .Global.stRankModuleInfo data = 1;
inline int stSynRankModuleInfo::data_size() const {
  return data_.size();
}
inline void stSynRankModuleInfo::clear_data() {
  data_.Clear();
}
inline const ::Global::stRankModuleInfo& stSynRankModuleInfo::data(int index) const {
  return data_.Get(index);
}
inline ::Global::stRankModuleInfo* stSynRankModuleInfo::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Global::stRankModuleInfo* stSynRankModuleInfo::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stRankModuleInfo >&
stSynRankModuleInfo::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stRankModuleInfo >*
stSynRankModuleInfo::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// stGiftBagReward

// optional uint32 itemID = 1;
inline bool stGiftBagReward::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGiftBagReward::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGiftBagReward::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGiftBagReward::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stGiftBagReward::itemid() const {
  return itemid_;
}
inline void stGiftBagReward::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stGiftBagReward::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGiftBagReward::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGiftBagReward::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGiftBagReward::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stGiftBagReward::num() const {
  return num_;
}
inline void stGiftBagReward::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stGiveGiftBagReward

// optional uint32 charID = 1;
inline bool stGiveGiftBagReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGiveGiftBagReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGiveGiftBagReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGiveGiftBagReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGiveGiftBagReward::charid() const {
  return charid_;
}
inline void stGiveGiftBagReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .Global.stGiftBagReward rewards = 2;
inline int stGiveGiftBagReward::rewards_size() const {
  return rewards_.size();
}
inline void stGiveGiftBagReward::clear_rewards() {
  rewards_.Clear();
}
inline const ::Global::stGiftBagReward& stGiveGiftBagReward::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::Global::stGiftBagReward* stGiveGiftBagReward::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::Global::stGiftBagReward* stGiveGiftBagReward::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stGiftBagReward >&
stGiveGiftBagReward::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stGiftBagReward >*
stGiveGiftBagReward::mutable_rewards() {
  return &rewards_;
}

// -------------------------------------------------------------------

// stNotifyGameSvrCfg

// repeated .Global.stServerCfgPair cfgPair = 1;
inline int stNotifyGameSvrCfg::cfgpair_size() const {
  return cfgpair_.size();
}
inline void stNotifyGameSvrCfg::clear_cfgpair() {
  cfgpair_.Clear();
}
inline const ::Global::stServerCfgPair& stNotifyGameSvrCfg::cfgpair(int index) const {
  return cfgpair_.Get(index);
}
inline ::Global::stServerCfgPair* stNotifyGameSvrCfg::mutable_cfgpair(int index) {
  return cfgpair_.Mutable(index);
}
inline ::Global::stServerCfgPair* stNotifyGameSvrCfg::add_cfgpair() {
  return cfgpair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >&
stNotifyGameSvrCfg::cfgpair() const {
  return cfgpair_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >*
stNotifyGameSvrCfg::mutable_cfgpair() {
  return &cfgpair_;
}

// -------------------------------------------------------------------

// stNotifyCurEquipInfo

// optional uint32 charID = 1;
inline bool stNotifyCurEquipInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyCurEquipInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyCurEquipInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyCurEquipInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyCurEquipInfo::charid() const {
  return charid_;
}
inline void stNotifyCurEquipInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 index = 2;
inline bool stNotifyCurEquipInfo::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyCurEquipInfo::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyCurEquipInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyCurEquipInfo::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 stNotifyCurEquipInfo::index() const {
  return index_;
}
inline void stNotifyCurEquipInfo::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 itemID = 3;
inline bool stNotifyCurEquipInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyCurEquipInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyCurEquipInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyCurEquipInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stNotifyCurEquipInfo::itemid() const {
  return itemid_;
}
inline void stNotifyCurEquipInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 effectID = 4;
inline bool stNotifyCurEquipInfo::has_effectid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyCurEquipInfo::set_has_effectid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyCurEquipInfo::clear_has_effectid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyCurEquipInfo::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stNotifyCurEquipInfo::effectid() const {
  return effectid_;
}
inline void stNotifyCurEquipInfo::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// -------------------------------------------------------------------

// stReloginGame

// optional string account = 1;
inline bool stReloginGame::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReloginGame::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReloginGame::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReloginGame::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stReloginGame::account() const {
  return *account_;
}
inline void stReloginGame::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stReloginGame::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stReloginGame::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReloginGame::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stReloginGame::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReloginGame::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID = 2;
inline bool stReloginGame::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReloginGame::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReloginGame::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReloginGame::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReloginGame::charid() const {
  return charid_;
}
inline void stReloginGame::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string ip = 3;
inline bool stReloginGame::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReloginGame::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReloginGame::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReloginGame::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stReloginGame::ip() const {
  return *ip_;
}
inline void stReloginGame::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stReloginGame::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stReloginGame::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReloginGame::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stReloginGame::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReloginGame::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device = 4;
inline bool stReloginGame::has_device() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReloginGame::set_has_device() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReloginGame::clear_has_device() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReloginGame::clear_device() {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& stReloginGame::device() const {
  return *device_;
}
inline void stReloginGame::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void stReloginGame::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void stReloginGame::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReloginGame::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  return device_;
}
inline ::std::string* stReloginGame::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReloginGame::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stFirstKillBaseInfo

// optional uint32 charID = 1;
inline bool stFirstKillBaseInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFirstKillBaseInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFirstKillBaseInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFirstKillBaseInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stFirstKillBaseInfo::charid() const {
  return charid_;
}
inline void stFirstKillBaseInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stFirstKillBaseInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stFirstKillBaseInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stFirstKillBaseInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stFirstKillBaseInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stFirstKillBaseInfo::name() const {
  return *name_;
}
inline void stFirstKillBaseInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stFirstKillBaseInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stFirstKillBaseInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stFirstKillBaseInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stFirstKillBaseInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stFirstKillBaseInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 3;
inline bool stFirstKillBaseInfo::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stFirstKillBaseInfo::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stFirstKillBaseInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stFirstKillBaseInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stFirstKillBaseInfo::job() const {
  return job_;
}
inline void stFirstKillBaseInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 4;
inline bool stFirstKillBaseInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stFirstKillBaseInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stFirstKillBaseInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stFirstKillBaseInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stFirstKillBaseInfo::sex() const {
  return sex_;
}
inline void stFirstKillBaseInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 5;
inline bool stFirstKillBaseInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stFirstKillBaseInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stFirstKillBaseInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stFirstKillBaseInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stFirstKillBaseInfo::level() const {
  return level_;
}
inline void stFirstKillBaseInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 6;
inline bool stFirstKillBaseInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stFirstKillBaseInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stFirstKillBaseInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stFirstKillBaseInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stFirstKillBaseInfo::battlepower() const {
  return battlepower_;
}
inline void stFirstKillBaseInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 photoID = 7;
inline bool stFirstKillBaseInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stFirstKillBaseInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stFirstKillBaseInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stFirstKillBaseInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stFirstKillBaseInfo::photoid() const {
  return photoid_;
}
inline void stFirstKillBaseInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stTeamCopyMapFinish

// optional uint32 copymapID = 1;
inline bool stTeamCopyMapFinish::has_copymapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTeamCopyMapFinish::set_has_copymapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTeamCopyMapFinish::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTeamCopyMapFinish::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stTeamCopyMapFinish::copymapid() const {
  return copymapid_;
}
inline void stTeamCopyMapFinish::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// repeated .Global.stFirstKillBaseInfo userInfo = 2;
inline int stTeamCopyMapFinish::userinfo_size() const {
  return userinfo_.size();
}
inline void stTeamCopyMapFinish::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::Global::stFirstKillBaseInfo& stTeamCopyMapFinish::userinfo(int index) const {
  return userinfo_.Get(index);
}
inline ::Global::stFirstKillBaseInfo* stTeamCopyMapFinish::mutable_userinfo(int index) {
  return userinfo_.Mutable(index);
}
inline ::Global::stFirstKillBaseInfo* stTeamCopyMapFinish::add_userinfo() {
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stFirstKillBaseInfo >&
stTeamCopyMapFinish::userinfo() const {
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stFirstKillBaseInfo >*
stTeamCopyMapFinish::mutable_userinfo() {
  return &userinfo_;
}

// -------------------------------------------------------------------

// stUserOnlineSendFirstKillInfo

// optional uint32 charID = 1;
inline bool stUserOnlineSendFirstKillInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserOnlineSendFirstKillInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserOnlineSendFirstKillInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserOnlineSendFirstKillInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserOnlineSendFirstKillInfo::charid() const {
  return charid_;
}
inline void stUserOnlineSendFirstKillInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated uint32 copymapID = 2;
inline int stUserOnlineSendFirstKillInfo::copymapid_size() const {
  return copymapid_.size();
}
inline void stUserOnlineSendFirstKillInfo::clear_copymapid() {
  copymapid_.Clear();
}
inline ::google::protobuf::uint32 stUserOnlineSendFirstKillInfo::copymapid(int index) const {
  return copymapid_.Get(index);
}
inline void stUserOnlineSendFirstKillInfo::set_copymapid(int index, ::google::protobuf::uint32 value) {
  copymapid_.Set(index, value);
}
inline void stUserOnlineSendFirstKillInfo::add_copymapid(::google::protobuf::uint32 value) {
  copymapid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stUserOnlineSendFirstKillInfo::copymapid() const {
  return copymapid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stUserOnlineSendFirstKillInfo::mutable_copymapid() {
  return &copymapid_;
}

// -------------------------------------------------------------------

// stTeamFinishFirstKill

// optional uint32 copymapID = 1;
inline bool stTeamFinishFirstKill::has_copymapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTeamFinishFirstKill::set_has_copymapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTeamFinishFirstKill::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTeamFinishFirstKill::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stTeamFinishFirstKill::copymapid() const {
  return copymapid_;
}
inline void stTeamFinishFirstKill::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// optional uint32 charID1 = 2;
inline bool stTeamFinishFirstKill::has_charid1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stTeamFinishFirstKill::set_has_charid1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stTeamFinishFirstKill::clear_has_charid1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stTeamFinishFirstKill::clear_charid1() {
  charid1_ = 0u;
  clear_has_charid1();
}
inline ::google::protobuf::uint32 stTeamFinishFirstKill::charid1() const {
  return charid1_;
}
inline void stTeamFinishFirstKill::set_charid1(::google::protobuf::uint32 value) {
  set_has_charid1();
  charid1_ = value;
}

// optional uint32 charID2 = 3;
inline bool stTeamFinishFirstKill::has_charid2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stTeamFinishFirstKill::set_has_charid2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stTeamFinishFirstKill::clear_has_charid2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stTeamFinishFirstKill::clear_charid2() {
  charid2_ = 0u;
  clear_has_charid2();
}
inline ::google::protobuf::uint32 stTeamFinishFirstKill::charid2() const {
  return charid2_;
}
inline void stTeamFinishFirstKill::set_charid2(::google::protobuf::uint32 value) {
  set_has_charid2();
  charid2_ = value;
}

// optional uint32 charID3 = 4;
inline bool stTeamFinishFirstKill::has_charid3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stTeamFinishFirstKill::set_has_charid3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stTeamFinishFirstKill::clear_has_charid3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stTeamFinishFirstKill::clear_charid3() {
  charid3_ = 0u;
  clear_has_charid3();
}
inline ::google::protobuf::uint32 stTeamFinishFirstKill::charid3() const {
  return charid3_;
}
inline void stTeamFinishFirstKill::set_charid3(::google::protobuf::uint32 value) {
  set_has_charid3();
  charid3_ = value;
}

// -------------------------------------------------------------------

// stSetClearWorldBossTime

// optional uint32 charID = 1;
inline bool stSetClearWorldBossTime::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSetClearWorldBossTime::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSetClearWorldBossTime::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSetClearWorldBossTime::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSetClearWorldBossTime::charid() const {
  return charid_;
}
inline void stSetClearWorldBossTime::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSetWorldBossBuyNum

// optional uint32 charID = 1;
inline bool stSetWorldBossBuyNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSetWorldBossBuyNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSetWorldBossBuyNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSetWorldBossBuyNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSetWorldBossBuyNum::charid() const {
  return charid_;
}
inline void stSetWorldBossBuyNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 buyNum = 2;
inline bool stSetWorldBossBuyNum::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSetWorldBossBuyNum::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSetWorldBossBuyNum::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSetWorldBossBuyNum::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 stSetWorldBossBuyNum::buynum() const {
  return buynum_;
}
inline void stSetWorldBossBuyNum::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
}

// -------------------------------------------------------------------

// stUserDecSP

// optional uint32 charID = 1;
inline bool stUserDecSP::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserDecSP::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserDecSP::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserDecSP::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserDecSP::charid() const {
  return charid_;
}
inline void stUserDecSP::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 sp = 2;
inline bool stUserDecSP::has_sp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserDecSP::set_has_sp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserDecSP::clear_has_sp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserDecSP::clear_sp() {
  sp_ = 0u;
  clear_has_sp();
}
inline ::google::protobuf::uint32 stUserDecSP::sp() const {
  return sp_;
}
inline void stUserDecSP::set_sp(::google::protobuf::uint32 value) {
  set_has_sp();
  sp_ = value;
}

// -------------------------------------------------------------------

// stUsreDecLilian

// optional uint32 charID = 1;
inline bool stUsreDecLilian::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUsreDecLilian::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUsreDecLilian::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUsreDecLilian::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUsreDecLilian::charid() const {
  return charid_;
}
inline void stUsreDecLilian::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 lilian = 2;
inline bool stUsreDecLilian::has_lilian() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUsreDecLilian::set_has_lilian() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUsreDecLilian::clear_has_lilian() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUsreDecLilian::clear_lilian() {
  lilian_ = 0u;
  clear_has_lilian();
}
inline ::google::protobuf::uint32 stUsreDecLilian::lilian() const {
  return lilian_;
}
inline void stUsreDecLilian::set_lilian(::google::protobuf::uint32 value) {
  set_has_lilian();
  lilian_ = value;
}

// -------------------------------------------------------------------

// stUserDamagePair

// optional uint32 charID = 1;
inline bool stUserDamagePair::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserDamagePair::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserDamagePair::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserDamagePair::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserDamagePair::charid() const {
  return charid_;
}
inline void stUserDamagePair::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 damage = 2;
inline bool stUserDamagePair::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserDamagePair::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserDamagePair::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserDamagePair::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 stUserDamagePair::damage() const {
  return damage_;
}
inline void stUserDamagePair::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// -------------------------------------------------------------------

// stGuildCopymapFail

// repeated .Global.stUserDamagePair damageInfo = 1;
inline int stGuildCopymapFail::damageinfo_size() const {
  return damageinfo_.size();
}
inline void stGuildCopymapFail::clear_damageinfo() {
  damageinfo_.Clear();
}
inline const ::Global::stUserDamagePair& stGuildCopymapFail::damageinfo(int index) const {
  return damageinfo_.Get(index);
}
inline ::Global::stUserDamagePair* stGuildCopymapFail::mutable_damageinfo(int index) {
  return damageinfo_.Mutable(index);
}
inline ::Global::stUserDamagePair* stGuildCopymapFail::add_damageinfo() {
  return damageinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >&
stGuildCopymapFail::damageinfo() const {
  return damageinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >*
stGuildCopymapFail::mutable_damageinfo() {
  return &damageinfo_;
}

// optional uint32 bossHP = 2;
inline bool stGuildCopymapFail::has_bosshp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuildCopymapFail::set_has_bosshp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuildCopymapFail::clear_has_bosshp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuildCopymapFail::clear_bosshp() {
  bosshp_ = 0u;
  clear_has_bosshp();
}
inline ::google::protobuf::uint32 stGuildCopymapFail::bosshp() const {
  return bosshp_;
}
inline void stGuildCopymapFail::set_bosshp(::google::protobuf::uint32 value) {
  set_has_bosshp();
  bosshp_ = value;
}

// optional uint32 copymapID = 3;
inline bool stGuildCopymapFail::has_copymapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGuildCopymapFail::set_has_copymapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGuildCopymapFail::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGuildCopymapFail::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stGuildCopymapFail::copymapid() const {
  return copymapid_;
}
inline void stGuildCopymapFail::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// -------------------------------------------------------------------

// stGuildCopymapKillBoss

// repeated .Global.stUserDamagePair damageInfo = 1;
inline int stGuildCopymapKillBoss::damageinfo_size() const {
  return damageinfo_.size();
}
inline void stGuildCopymapKillBoss::clear_damageinfo() {
  damageinfo_.Clear();
}
inline const ::Global::stUserDamagePair& stGuildCopymapKillBoss::damageinfo(int index) const {
  return damageinfo_.Get(index);
}
inline ::Global::stUserDamagePair* stGuildCopymapKillBoss::mutable_damageinfo(int index) {
  return damageinfo_.Mutable(index);
}
inline ::Global::stUserDamagePair* stGuildCopymapKillBoss::add_damageinfo() {
  return damageinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >&
stGuildCopymapKillBoss::damageinfo() const {
  return damageinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >*
stGuildCopymapKillBoss::mutable_damageinfo() {
  return &damageinfo_;
}

// optional uint32 copymapID = 2;
inline bool stGuildCopymapKillBoss::has_copymapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuildCopymapKillBoss::set_has_copymapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuildCopymapKillBoss::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuildCopymapKillBoss::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stGuildCopymapKillBoss::copymapid() const {
  return copymapid_;
}
inline void stGuildCopymapKillBoss::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// optional uint32 killCharID = 3;
inline bool stGuildCopymapKillBoss::has_killcharid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGuildCopymapKillBoss::set_has_killcharid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGuildCopymapKillBoss::clear_has_killcharid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGuildCopymapKillBoss::clear_killcharid() {
  killcharid_ = 0u;
  clear_has_killcharid();
}
inline ::google::protobuf::uint32 stGuildCopymapKillBoss::killcharid() const {
  return killcharid_;
}
inline void stGuildCopymapKillBoss::set_killcharid(::google::protobuf::uint32 value) {
  set_has_killcharid();
  killcharid_ = value;
}

// -------------------------------------------------------------------

// stWorldBossCopymapFail

// repeated .Global.stUserDamagePair damageInfo = 1;
inline int stWorldBossCopymapFail::damageinfo_size() const {
  return damageinfo_.size();
}
inline void stWorldBossCopymapFail::clear_damageinfo() {
  damageinfo_.Clear();
}
inline const ::Global::stUserDamagePair& stWorldBossCopymapFail::damageinfo(int index) const {
  return damageinfo_.Get(index);
}
inline ::Global::stUserDamagePair* stWorldBossCopymapFail::mutable_damageinfo(int index) {
  return damageinfo_.Mutable(index);
}
inline ::Global::stUserDamagePair* stWorldBossCopymapFail::add_damageinfo() {
  return damageinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >&
stWorldBossCopymapFail::damageinfo() const {
  return damageinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >*
stWorldBossCopymapFail::mutable_damageinfo() {
  return &damageinfo_;
}

// optional uint32 bossHP = 2;
inline bool stWorldBossCopymapFail::has_bosshp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stWorldBossCopymapFail::set_has_bosshp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stWorldBossCopymapFail::clear_has_bosshp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stWorldBossCopymapFail::clear_bosshp() {
  bosshp_ = 0u;
  clear_has_bosshp();
}
inline ::google::protobuf::uint32 stWorldBossCopymapFail::bosshp() const {
  return bosshp_;
}
inline void stWorldBossCopymapFail::set_bosshp(::google::protobuf::uint32 value) {
  set_has_bosshp();
  bosshp_ = value;
}

// -------------------------------------------------------------------

// stKillWorldBoss

// repeated .Global.stUserDamagePair damageInfo = 1;
inline int stKillWorldBoss::damageinfo_size() const {
  return damageinfo_.size();
}
inline void stKillWorldBoss::clear_damageinfo() {
  damageinfo_.Clear();
}
inline const ::Global::stUserDamagePair& stKillWorldBoss::damageinfo(int index) const {
  return damageinfo_.Get(index);
}
inline ::Global::stUserDamagePair* stKillWorldBoss::mutable_damageinfo(int index) {
  return damageinfo_.Mutable(index);
}
inline ::Global::stUserDamagePair* stKillWorldBoss::add_damageinfo() {
  return damageinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >&
stKillWorldBoss::damageinfo() const {
  return damageinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >*
stKillWorldBoss::mutable_damageinfo() {
  return &damageinfo_;
}

// optional uint32 killCharID = 2;
inline bool stKillWorldBoss::has_killcharid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stKillWorldBoss::set_has_killcharid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stKillWorldBoss::clear_has_killcharid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stKillWorldBoss::clear_killcharid() {
  killcharid_ = 0u;
  clear_has_killcharid();
}
inline ::google::protobuf::uint32 stKillWorldBoss::killcharid() const {
  return killcharid_;
}
inline void stKillWorldBoss::set_killcharid(::google::protobuf::uint32 value) {
  set_has_killcharid();
  killcharid_ = value;
}

// optional uint32 bossID = 3;
inline bool stKillWorldBoss::has_bossid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stKillWorldBoss::set_has_bossid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stKillWorldBoss::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stKillWorldBoss::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 stKillWorldBoss::bossid() const {
  return bossid_;
}
inline void stKillWorldBoss::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
}

// -------------------------------------------------------------------

// stDrawHeroScoreReward

// optional uint32 charID = 1;
inline bool stDrawHeroScoreReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDrawHeroScoreReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDrawHeroScoreReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDrawHeroScoreReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDrawHeroScoreReward::charid() const {
  return charid_;
}
inline void stDrawHeroScoreReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 boxID = 2;
inline bool stDrawHeroScoreReward::has_boxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDrawHeroScoreReward::set_has_boxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDrawHeroScoreReward::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDrawHeroScoreReward::clear_boxid() {
  boxid_ = 0u;
  clear_has_boxid();
}
inline ::google::protobuf::uint32 stDrawHeroScoreReward::boxid() const {
  return boxid_;
}
inline void stDrawHeroScoreReward::set_boxid(::google::protobuf::uint32 value) {
  set_has_boxid();
  boxid_ = value;
}

// -------------------------------------------------------------------

// stDrawHeroRankReward

// optional uint32 charID = 1;
inline bool stDrawHeroRankReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDrawHeroRankReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDrawHeroRankReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDrawHeroRankReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDrawHeroRankReward::charid() const {
  return charid_;
}
inline void stDrawHeroRankReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 boxID = 2;
inline bool stDrawHeroRankReward::has_boxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDrawHeroRankReward::set_has_boxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDrawHeroRankReward::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDrawHeroRankReward::clear_boxid() {
  boxid_ = 0u;
  clear_has_boxid();
}
inline ::google::protobuf::uint32 stDrawHeroRankReward::boxid() const {
  return boxid_;
}
inline void stDrawHeroRankReward::set_boxid(::google::protobuf::uint32 value) {
  set_has_boxid();
  boxid_ = value;
}

// -------------------------------------------------------------------

// stCompensantionItem

// optional uint32 itemID = 1;
inline bool stCompensantionItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCompensantionItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCompensantionItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCompensantionItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stCompensantionItem::itemid() const {
  return itemid_;
}
inline void stCompensantionItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stCompensantionItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCompensantionItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCompensantionItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCompensantionItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stCompensantionItem::num() const {
  return num_;
}
inline void stCompensantionItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSetCompensationID

// optional uint32 charID = 1;
inline bool stSetCompensationID::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSetCompensationID::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSetCompensationID::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSetCompensationID::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSetCompensationID::charid() const {
  return charid_;
}
inline void stSetCompensationID::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 compensationID = 2;
inline bool stSetCompensationID::has_compensationid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSetCompensationID::set_has_compensationid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSetCompensationID::clear_has_compensationid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSetCompensationID::clear_compensationid() {
  compensationid_ = 0u;
  clear_has_compensationid();
}
inline ::google::protobuf::uint32 stSetCompensationID::compensationid() const {
  return compensationid_;
}
inline void stSetCompensationID::set_compensationid(::google::protobuf::uint32 value) {
  set_has_compensationid();
  compensationid_ = value;
}

// repeated .Global.stCompensantionItem items = 3;
inline int stSetCompensationID::items_size() const {
  return items_.size();
}
inline void stSetCompensationID::clear_items() {
  items_.Clear();
}
inline const ::Global::stCompensantionItem& stSetCompensationID::items(int index) const {
  return items_.Get(index);
}
inline ::Global::stCompensantionItem* stSetCompensationID::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Global::stCompensantionItem* stSetCompensationID::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stCompensantionItem >&
stSetCompensationID::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stCompensantionItem >*
stSetCompensationID::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stSetOpenServerDay

// optional uint32 day = 1;
inline bool stSetOpenServerDay::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSetOpenServerDay::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSetOpenServerDay::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSetOpenServerDay::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 stSetOpenServerDay::day() const {
  return day_;
}
inline void stSetOpenServerDay::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// -------------------------------------------------------------------

// stSynGuildLv2AllMember

// repeated uint32 members = 1;
inline int stSynGuildLv2AllMember::members_size() const {
  return members_.size();
}
inline void stSynGuildLv2AllMember::clear_members() {
  members_.Clear();
}
inline ::google::protobuf::uint32 stSynGuildLv2AllMember::members(int index) const {
  return members_.Get(index);
}
inline void stSynGuildLv2AllMember::set_members(int index, ::google::protobuf::uint32 value) {
  members_.Set(index, value);
}
inline void stSynGuildLv2AllMember::add_members(::google::protobuf::uint32 value) {
  members_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stSynGuildLv2AllMember::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stSynGuildLv2AllMember::mutable_members() {
  return &members_;
}

// optional uint32 guildLv = 2;
inline bool stSynGuildLv2AllMember::has_guildlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynGuildLv2AllMember::set_has_guildlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynGuildLv2AllMember::clear_has_guildlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynGuildLv2AllMember::clear_guildlv() {
  guildlv_ = 0u;
  clear_has_guildlv();
}
inline ::google::protobuf::uint32 stSynGuildLv2AllMember::guildlv() const {
  return guildlv_;
}
inline void stSynGuildLv2AllMember::set_guildlv(::google::protobuf::uint32 value) {
  set_has_guildlv();
  guildlv_ = value;
}

// -------------------------------------------------------------------

// stForwardChgBadge

// optional uint32 charID = 1;
inline bool stForwardChgBadge::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stForwardChgBadge::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stForwardChgBadge::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stForwardChgBadge::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stForwardChgBadge::charid() const {
  return charid_;
}
inline void stForwardChgBadge::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 badgeID = 2;
inline bool stForwardChgBadge::has_badgeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stForwardChgBadge::set_has_badgeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stForwardChgBadge::clear_has_badgeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stForwardChgBadge::clear_badgeid() {
  badgeid_ = 0u;
  clear_has_badgeid();
}
inline ::google::protobuf::uint32 stForwardChgBadge::badgeid() const {
  return badgeid_;
}
inline void stForwardChgBadge::set_badgeid(::google::protobuf::uint32 value) {
  set_has_badgeid();
  badgeid_ = value;
}

// -------------------------------------------------------------------

// stWorldBossBuyDecDiamond

// optional uint32 charID = 1;
inline bool stWorldBossBuyDecDiamond::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stWorldBossBuyDecDiamond::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stWorldBossBuyDecDiamond::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stWorldBossBuyDecDiamond::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stWorldBossBuyDecDiamond::charid() const {
  return charid_;
}
inline void stWorldBossBuyDecDiamond::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 hasBuyNum = 2;
inline bool stWorldBossBuyDecDiamond::has_hasbuynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stWorldBossBuyDecDiamond::set_has_hasbuynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stWorldBossBuyDecDiamond::clear_has_hasbuynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stWorldBossBuyDecDiamond::clear_hasbuynum() {
  hasbuynum_ = 0u;
  clear_has_hasbuynum();
}
inline ::google::protobuf::uint32 stWorldBossBuyDecDiamond::hasbuynum() const {
  return hasbuynum_;
}
inline void stWorldBossBuyDecDiamond::set_hasbuynum(::google::protobuf::uint32 value) {
  set_has_hasbuynum();
  hasbuynum_ = value;
}

// -------------------------------------------------------------------

// stGuildDonateSuccess

// optional uint32 charID = 1;
inline bool stGuildDonateSuccess::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuildDonateSuccess::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuildDonateSuccess::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuildDonateSuccess::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGuildDonateSuccess::charid() const {
  return charid_;
}
inline void stGuildDonateSuccess::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 todayContribute = 2;
inline bool stGuildDonateSuccess::has_todaycontribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuildDonateSuccess::set_has_todaycontribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuildDonateSuccess::clear_has_todaycontribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuildDonateSuccess::clear_todaycontribute() {
  todaycontribute_ = 0u;
  clear_has_todaycontribute();
}
inline ::google::protobuf::uint32 stGuildDonateSuccess::todaycontribute() const {
  return todaycontribute_;
}
inline void stGuildDonateSuccess::set_todaycontribute(::google::protobuf::uint32 value) {
  set_has_todaycontribute();
  todaycontribute_ = value;
}

// optional uint32 addContribute = 3;
inline bool stGuildDonateSuccess::has_addcontribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGuildDonateSuccess::set_has_addcontribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGuildDonateSuccess::clear_has_addcontribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGuildDonateSuccess::clear_addcontribute() {
  addcontribute_ = 0u;
  clear_has_addcontribute();
}
inline ::google::protobuf::uint32 stGuildDonateSuccess::addcontribute() const {
  return addcontribute_;
}
inline void stGuildDonateSuccess::set_addcontribute(::google::protobuf::uint32 value) {
  set_has_addcontribute();
  addcontribute_ = value;
}

// optional uint32 donateType = 4;
inline bool stGuildDonateSuccess::has_donatetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGuildDonateSuccess::set_has_donatetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGuildDonateSuccess::clear_has_donatetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGuildDonateSuccess::clear_donatetype() {
  donatetype_ = 0u;
  clear_has_donatetype();
}
inline ::google::protobuf::uint32 stGuildDonateSuccess::donatetype() const {
  return donatetype_;
}
inline void stGuildDonateSuccess::set_donatetype(::google::protobuf::uint32 value) {
  set_has_donatetype();
  donatetype_ = value;
}

// -------------------------------------------------------------------

// stUserLeaveWorldBoss

// optional uint32 charID = 1;
inline bool stUserLeaveWorldBoss::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserLeaveWorldBoss::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserLeaveWorldBoss::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserLeaveWorldBoss::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserLeaveWorldBoss::charid() const {
  return charid_;
}
inline void stUserLeaveWorldBoss::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stNotifyGameAutoConnect

// optional string account = 1;
inline bool stNotifyGameAutoConnect::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyGameAutoConnect::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyGameAutoConnect::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyGameAutoConnect::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stNotifyGameAutoConnect::account() const {
  return *account_;
}
inline void stNotifyGameAutoConnect::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stNotifyGameAutoConnect::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stNotifyGameAutoConnect::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNotifyGameAutoConnect::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stNotifyGameAutoConnect::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNotifyGameAutoConnect::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID = 2;
inline bool stNotifyGameAutoConnect::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyGameAutoConnect::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyGameAutoConnect::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyGameAutoConnect::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyGameAutoConnect::charid() const {
  return charid_;
}
inline void stNotifyGameAutoConnect::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string ip = 3;
inline bool stNotifyGameAutoConnect::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyGameAutoConnect::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyGameAutoConnect::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyGameAutoConnect::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stNotifyGameAutoConnect::ip() const {
  return *ip_;
}
inline void stNotifyGameAutoConnect::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stNotifyGameAutoConnect::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stNotifyGameAutoConnect::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNotifyGameAutoConnect::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stNotifyGameAutoConnect::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNotifyGameAutoConnect::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device = 4;
inline bool stNotifyGameAutoConnect::has_device() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyGameAutoConnect::set_has_device() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyGameAutoConnect::clear_has_device() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyGameAutoConnect::clear_device() {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& stNotifyGameAutoConnect::device() const {
  return *device_;
}
inline void stNotifyGameAutoConnect::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void stNotifyGameAutoConnect::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void stNotifyGameAutoConnect::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNotifyGameAutoConnect::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  return device_;
}
inline ::std::string* stNotifyGameAutoConnect::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNotifyGameAutoConnect::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stForwardDrawHeroScoreReward

// optional uint32 charID = 1;
inline bool stForwardDrawHeroScoreReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stForwardDrawHeroScoreReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stForwardDrawHeroScoreReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stForwardDrawHeroScoreReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stForwardDrawHeroScoreReward::charid() const {
  return charid_;
}
inline void stForwardDrawHeroScoreReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 scoreID = 2;
inline bool stForwardDrawHeroScoreReward::has_scoreid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stForwardDrawHeroScoreReward::set_has_scoreid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stForwardDrawHeroScoreReward::clear_has_scoreid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stForwardDrawHeroScoreReward::clear_scoreid() {
  scoreid_ = 0u;
  clear_has_scoreid();
}
inline ::google::protobuf::uint32 stForwardDrawHeroScoreReward::scoreid() const {
  return scoreid_;
}
inline void stForwardDrawHeroScoreReward::set_scoreid(::google::protobuf::uint32 value) {
  set_has_scoreid();
  scoreid_ = value;
}

// -------------------------------------------------------------------

// stNotifyArenaReward

// optional uint32 charID = 1;
inline bool stNotifyArenaReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyArenaReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyArenaReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyArenaReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyArenaReward::charid() const {
  return charid_;
}
inline void stNotifyArenaReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 resType = 2;
inline bool stNotifyArenaReward::has_restype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyArenaReward::set_has_restype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyArenaReward::clear_has_restype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyArenaReward::clear_restype() {
  restype_ = 0u;
  clear_has_restype();
}
inline ::google::protobuf::uint32 stNotifyArenaReward::restype() const {
  return restype_;
}
inline void stNotifyArenaReward::set_restype(::google::protobuf::uint32 value) {
  set_has_restype();
  restype_ = value;
}

// optional uint32 resNum = 3;
inline bool stNotifyArenaReward::has_resnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyArenaReward::set_has_resnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyArenaReward::clear_has_resnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyArenaReward::clear_resnum() {
  resnum_ = 0u;
  clear_has_resnum();
}
inline ::google::protobuf::uint32 stNotifyArenaReward::resnum() const {
  return resnum_;
}
inline void stNotifyArenaReward::set_resnum(::google::protobuf::uint32 value) {
  set_has_resnum();
  resnum_ = value;
}

// -------------------------------------------------------------------

// stForwardInvestgateAnswer

// optional uint32 problemID = 1;
inline bool stForwardInvestgateAnswer::has_problemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stForwardInvestgateAnswer::set_has_problemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stForwardInvestgateAnswer::clear_has_problemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stForwardInvestgateAnswer::clear_problemid() {
  problemid_ = 0u;
  clear_has_problemid();
}
inline ::google::protobuf::uint32 stForwardInvestgateAnswer::problemid() const {
  return problemid_;
}
inline void stForwardInvestgateAnswer::set_problemid(::google::protobuf::uint32 value) {
  set_has_problemid();
  problemid_ = value;
}

// optional bool answerA = 2;
inline bool stForwardInvestgateAnswer::has_answera() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stForwardInvestgateAnswer::set_has_answera() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stForwardInvestgateAnswer::clear_has_answera() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stForwardInvestgateAnswer::clear_answera() {
  answera_ = false;
  clear_has_answera();
}
inline bool stForwardInvestgateAnswer::answera() const {
  return answera_;
}
inline void stForwardInvestgateAnswer::set_answera(bool value) {
  set_has_answera();
  answera_ = value;
}

// optional bool answerB = 3;
inline bool stForwardInvestgateAnswer::has_answerb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stForwardInvestgateAnswer::set_has_answerb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stForwardInvestgateAnswer::clear_has_answerb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stForwardInvestgateAnswer::clear_answerb() {
  answerb_ = false;
  clear_has_answerb();
}
inline bool stForwardInvestgateAnswer::answerb() const {
  return answerb_;
}
inline void stForwardInvestgateAnswer::set_answerb(bool value) {
  set_has_answerb();
  answerb_ = value;
}

// optional bool answerC = 4;
inline bool stForwardInvestgateAnswer::has_answerc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stForwardInvestgateAnswer::set_has_answerc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stForwardInvestgateAnswer::clear_has_answerc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stForwardInvestgateAnswer::clear_answerc() {
  answerc_ = false;
  clear_has_answerc();
}
inline bool stForwardInvestgateAnswer::answerc() const {
  return answerc_;
}
inline void stForwardInvestgateAnswer::set_answerc(bool value) {
  set_has_answerc();
  answerc_ = value;
}

// optional bool answerD = 5;
inline bool stForwardInvestgateAnswer::has_answerd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stForwardInvestgateAnswer::set_has_answerd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stForwardInvestgateAnswer::clear_has_answerd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stForwardInvestgateAnswer::clear_answerd() {
  answerd_ = false;
  clear_has_answerd();
}
inline bool stForwardInvestgateAnswer::answerd() const {
  return answerd_;
}
inline void stForwardInvestgateAnswer::set_answerd(bool value) {
  set_has_answerd();
  answerd_ = value;
}

// optional bool answerE = 6;
inline bool stForwardInvestgateAnswer::has_answere() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stForwardInvestgateAnswer::set_has_answere() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stForwardInvestgateAnswer::clear_has_answere() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stForwardInvestgateAnswer::clear_answere() {
  answere_ = false;
  clear_has_answere();
}
inline bool stForwardInvestgateAnswer::answere() const {
  return answere_;
}
inline void stForwardInvestgateAnswer::set_answere(bool value) {
  set_has_answere();
  answere_ = value;
}

// optional bool answerF = 7;
inline bool stForwardInvestgateAnswer::has_answerf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stForwardInvestgateAnswer::set_has_answerf() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stForwardInvestgateAnswer::clear_has_answerf() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stForwardInvestgateAnswer::clear_answerf() {
  answerf_ = false;
  clear_has_answerf();
}
inline bool stForwardInvestgateAnswer::answerf() const {
  return answerf_;
}
inline void stForwardInvestgateAnswer::set_answerf(bool value) {
  set_has_answerf();
  answerf_ = value;
}

// optional bool answerG = 8;
inline bool stForwardInvestgateAnswer::has_answerg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stForwardInvestgateAnswer::set_has_answerg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stForwardInvestgateAnswer::clear_has_answerg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stForwardInvestgateAnswer::clear_answerg() {
  answerg_ = false;
  clear_has_answerg();
}
inline bool stForwardInvestgateAnswer::answerg() const {
  return answerg_;
}
inline void stForwardInvestgateAnswer::set_answerg(bool value) {
  set_has_answerg();
  answerg_ = value;
}

// optional bool answerH = 9;
inline bool stForwardInvestgateAnswer::has_answerh() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stForwardInvestgateAnswer::set_has_answerh() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stForwardInvestgateAnswer::clear_has_answerh() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stForwardInvestgateAnswer::clear_answerh() {
  answerh_ = false;
  clear_has_answerh();
}
inline bool stForwardInvestgateAnswer::answerh() const {
  return answerh_;
}
inline void stForwardInvestgateAnswer::set_answerh(bool value) {
  set_has_answerh();
  answerh_ = value;
}

// optional bool answerI = 10;
inline bool stForwardInvestgateAnswer::has_answeri() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stForwardInvestgateAnswer::set_has_answeri() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stForwardInvestgateAnswer::clear_has_answeri() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stForwardInvestgateAnswer::clear_answeri() {
  answeri_ = false;
  clear_has_answeri();
}
inline bool stForwardInvestgateAnswer::answeri() const {
  return answeri_;
}
inline void stForwardInvestgateAnswer::set_answeri(bool value) {
  set_has_answeri();
  answeri_ = value;
}

// optional bool answerJ = 11;
inline bool stForwardInvestgateAnswer::has_answerj() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stForwardInvestgateAnswer::set_has_answerj() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stForwardInvestgateAnswer::clear_has_answerj() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stForwardInvestgateAnswer::clear_answerj() {
  answerj_ = false;
  clear_has_answerj();
}
inline bool stForwardInvestgateAnswer::answerj() const {
  return answerj_;
}
inline void stForwardInvestgateAnswer::set_answerj(bool value) {
  set_has_answerj();
  answerj_ = value;
}

// -------------------------------------------------------------------

// ForwardInvestgateResult

// optional uint32 questID = 1;
inline bool ForwardInvestgateResult::has_questid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardInvestgateResult::set_has_questid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardInvestgateResult::clear_has_questid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardInvestgateResult::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 ForwardInvestgateResult::questid() const {
  return questid_;
}
inline void ForwardInvestgateResult::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
}

// repeated .Global.stForwardInvestgateAnswer infos = 2;
inline int ForwardInvestgateResult::infos_size() const {
  return infos_.size();
}
inline void ForwardInvestgateResult::clear_infos() {
  infos_.Clear();
}
inline const ::Global::stForwardInvestgateAnswer& ForwardInvestgateResult::infos(int index) const {
  return infos_.Get(index);
}
inline ::Global::stForwardInvestgateAnswer* ForwardInvestgateResult::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::Global::stForwardInvestgateAnswer* ForwardInvestgateResult::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stForwardInvestgateAnswer >&
ForwardInvestgateResult::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stForwardInvestgateAnswer >*
ForwardInvestgateResult::mutable_infos() {
  return &infos_;
}

// optional uint32 charID = 3;
inline bool ForwardInvestgateResult::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForwardInvestgateResult::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForwardInvestgateResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForwardInvestgateResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 ForwardInvestgateResult::charid() const {
  return charid_;
}
inline void ForwardInvestgateResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 useTime = 4;
inline bool ForwardInvestgateResult::has_usetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ForwardInvestgateResult::set_has_usetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ForwardInvestgateResult::clear_has_usetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ForwardInvestgateResult::clear_usetime() {
  usetime_ = 0u;
  clear_has_usetime();
}
inline ::google::protobuf::uint32 ForwardInvestgateResult::usetime() const {
  return usetime_;
}
inline void ForwardInvestgateResult::set_usetime(::google::protobuf::uint32 value) {
  set_has_usetime();
  usetime_ = value;
}

// -------------------------------------------------------------------

// stGMModifyUserInfo

// optional uint32 charID = 1;
inline bool stGMModifyUserInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGMModifyUserInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGMModifyUserInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGMModifyUserInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGMModifyUserInfo::charid() const {
  return charid_;
}
inline void stGMModifyUserInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 newbieGuideID = 2;
inline bool stGMModifyUserInfo::has_newbieguideid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGMModifyUserInfo::set_has_newbieguideid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGMModifyUserInfo::clear_has_newbieguideid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGMModifyUserInfo::clear_newbieguideid() {
  newbieguideid_ = 0u;
  clear_has_newbieguideid();
}
inline ::google::protobuf::uint32 stGMModifyUserInfo::newbieguideid() const {
  return newbieguideid_;
}
inline void stGMModifyUserInfo::set_newbieguideid(::google::protobuf::uint32 value) {
  set_has_newbieguideid();
  newbieguideid_ = value;
}

// optional uint32 goldCoin = 3;
inline bool stGMModifyUserInfo::has_goldcoin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGMModifyUserInfo::set_has_goldcoin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGMModifyUserInfo::clear_has_goldcoin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGMModifyUserInfo::clear_goldcoin() {
  goldcoin_ = 0u;
  clear_has_goldcoin();
}
inline ::google::protobuf::uint32 stGMModifyUserInfo::goldcoin() const {
  return goldcoin_;
}
inline void stGMModifyUserInfo::set_goldcoin(::google::protobuf::uint32 value) {
  set_has_goldcoin();
  goldcoin_ = value;
}

// optional uint32 diamond = 4;
inline bool stGMModifyUserInfo::has_diamond() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGMModifyUserInfo::set_has_diamond() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGMModifyUserInfo::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGMModifyUserInfo::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 stGMModifyUserInfo::diamond() const {
  return diamond_;
}
inline void stGMModifyUserInfo::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional uint32 vipPoint = 5;
inline bool stGMModifyUserInfo::has_vippoint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGMModifyUserInfo::set_has_vippoint() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGMModifyUserInfo::clear_has_vippoint() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGMModifyUserInfo::clear_vippoint() {
  vippoint_ = 0u;
  clear_has_vippoint();
}
inline ::google::protobuf::uint32 stGMModifyUserInfo::vippoint() const {
  return vippoint_;
}
inline void stGMModifyUserInfo::set_vippoint(::google::protobuf::uint32 value) {
  set_has_vippoint();
  vippoint_ = value;
}

// -------------------------------------------------------------------

// stSynMyArenaRank

// optional uint32 charID = 1;
inline bool stSynMyArenaRank::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynMyArenaRank::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynMyArenaRank::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynMyArenaRank::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynMyArenaRank::charid() const {
  return charid_;
}
inline void stSynMyArenaRank::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 rank = 2;
inline bool stSynMyArenaRank::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynMyArenaRank::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynMyArenaRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynMyArenaRank::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 stSynMyArenaRank::rank() const {
  return rank_;
}
inline void stSynMyArenaRank::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// stSynVipLv

// optional uint32 charID = 1;
inline bool stSynVipLv::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynVipLv::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynVipLv::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynVipLv::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynVipLv::charid() const {
  return charid_;
}
inline void stSynVipLv::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 vipLv = 2;
inline bool stSynVipLv::has_viplv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynVipLv::set_has_viplv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynVipLv::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynVipLv::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stSynVipLv::viplv() const {
  return viplv_;
}
inline void stSynVipLv::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// -------------------------------------------------------------------

// stNotifyClearArenaCD

// optional uint32 charID = 1;
inline bool stNotifyClearArenaCD::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyClearArenaCD::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyClearArenaCD::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyClearArenaCD::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyClearArenaCD::charid() const {
  return charid_;
}
inline void stNotifyClearArenaCD::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stReqResetArenaChallengeNum

// optional uint32 charID = 1;
inline bool stReqResetArenaChallengeNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqResetArenaChallengeNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqResetArenaChallengeNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqResetArenaChallengeNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqResetArenaChallengeNum::charid() const {
  return charid_;
}
inline void stReqResetArenaChallengeNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 curResetNum = 2;
inline bool stReqResetArenaChallengeNum::has_curresetnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqResetArenaChallengeNum::set_has_curresetnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqResetArenaChallengeNum::clear_has_curresetnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqResetArenaChallengeNum::clear_curresetnum() {
  curresetnum_ = 0u;
  clear_has_curresetnum();
}
inline ::google::protobuf::uint32 stReqResetArenaChallengeNum::curresetnum() const {
  return curresetnum_;
}
inline void stReqResetArenaChallengeNum::set_curresetnum(::google::protobuf::uint32 value) {
  set_has_curresetnum();
  curresetnum_ = value;
}

// -------------------------------------------------------------------

// stNotfiyResetChallengeNum

// optional uint32 charID = 1;
inline bool stNotfiyResetChallengeNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotfiyResetChallengeNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotfiyResetChallengeNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotfiyResetChallengeNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotfiyResetChallengeNum::charid() const {
  return charid_;
}
inline void stNotfiyResetChallengeNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stReqResetInterceptNum

// optional uint32 charID = 1;
inline bool stReqResetInterceptNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqResetInterceptNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqResetInterceptNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqResetInterceptNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqResetInterceptNum::charid() const {
  return charid_;
}
inline void stReqResetInterceptNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 resetNum = 2;
inline bool stReqResetInterceptNum::has_resetnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqResetInterceptNum::set_has_resetnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqResetInterceptNum::clear_has_resetnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqResetInterceptNum::clear_resetnum() {
  resetnum_ = 0u;
  clear_has_resetnum();
}
inline ::google::protobuf::uint32 stReqResetInterceptNum::resetnum() const {
  return resetnum_;
}
inline void stReqResetInterceptNum::set_resetnum(::google::protobuf::uint32 value) {
  set_has_resetnum();
  resetnum_ = value;
}

// -------------------------------------------------------------------

// stNotifyClearInterceptCD

// optional uint32 charID = 1;
inline bool stNotifyClearInterceptCD::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyClearInterceptCD::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyClearInterceptCD::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyClearInterceptCD::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyClearInterceptCD::charid() const {
  return charid_;
}
inline void stNotifyClearInterceptCD::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stNotifyResetInterceptNum

// optional uint32 charID = 1;
inline bool stNotifyResetInterceptNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyResetInterceptNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyResetInterceptNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyResetInterceptNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyResetInterceptNum::charid() const {
  return charid_;
}
inline void stNotifyResetInterceptNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stNotifyGuardQuality

// optional uint32 charID = 1;
inline bool stNotifyGuardQuality::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyGuardQuality::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyGuardQuality::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyGuardQuality::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyGuardQuality::charid() const {
  return charid_;
}
inline void stNotifyGuardQuality::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 quality = 2;
inline bool stNotifyGuardQuality::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyGuardQuality::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyGuardQuality::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyGuardQuality::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 stNotifyGuardQuality::quality() const {
  return quality_;
}
inline void stNotifyGuardQuality::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// stNotifyGuardInspiredSuccess

// optional uint32 charID = 1;
inline bool stNotifyGuardInspiredSuccess::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyGuardInspiredSuccess::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyGuardInspiredSuccess::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyGuardInspiredSuccess::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyGuardInspiredSuccess::charid() const {
  return charid_;
}
inline void stNotifyGuardInspiredSuccess::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stReqRefreshGuardQuality

// optional uint32 charID = 1;
inline bool stReqRefreshGuardQuality::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRefreshGuardQuality::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRefreshGuardQuality::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRefreshGuardQuality::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRefreshGuardQuality::charid() const {
  return charid_;
}
inline void stReqRefreshGuardQuality::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 quality = 2;
inline bool stReqRefreshGuardQuality::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRefreshGuardQuality::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRefreshGuardQuality::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRefreshGuardQuality::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 stReqRefreshGuardQuality::quality() const {
  return quality_;
}
inline void stReqRefreshGuardQuality::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// stNotifyClearOne2OneScore

// optional uint32 flag = 1;
inline bool stNotifyClearOne2OneScore::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyClearOne2OneScore::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyClearOne2OneScore::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyClearOne2OneScore::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 stNotifyClearOne2OneScore::flag() const {
  return flag_;
}
inline void stNotifyClearOne2OneScore::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// stClearOne2OneScoreSuccess

// optional uint32 flag = 1;
inline bool stClearOne2OneScoreSuccess::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stClearOne2OneScoreSuccess::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stClearOne2OneScoreSuccess::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stClearOne2OneScoreSuccess::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 stClearOne2OneScoreSuccess::flag() const {
  return flag_;
}
inline void stClearOne2OneScoreSuccess::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// stInterceptReward

// optional uint32 charID = 1;
inline bool stInterceptReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInterceptReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInterceptReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInterceptReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stInterceptReward::charid() const {
  return charid_;
}
inline void stInterceptReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 resID1 = 2;
inline bool stInterceptReward::has_resid1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stInterceptReward::set_has_resid1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stInterceptReward::clear_has_resid1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stInterceptReward::clear_resid1() {
  resid1_ = 0u;
  clear_has_resid1();
}
inline ::google::protobuf::uint32 stInterceptReward::resid1() const {
  return resid1_;
}
inline void stInterceptReward::set_resid1(::google::protobuf::uint32 value) {
  set_has_resid1();
  resid1_ = value;
}

// optional uint32 resNum1 = 3;
inline bool stInterceptReward::has_resnum1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stInterceptReward::set_has_resnum1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stInterceptReward::clear_has_resnum1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stInterceptReward::clear_resnum1() {
  resnum1_ = 0u;
  clear_has_resnum1();
}
inline ::google::protobuf::uint32 stInterceptReward::resnum1() const {
  return resnum1_;
}
inline void stInterceptReward::set_resnum1(::google::protobuf::uint32 value) {
  set_has_resnum1();
  resnum1_ = value;
}

// optional uint32 resID2 = 4;
inline bool stInterceptReward::has_resid2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stInterceptReward::set_has_resid2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stInterceptReward::clear_has_resid2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stInterceptReward::clear_resid2() {
  resid2_ = 0u;
  clear_has_resid2();
}
inline ::google::protobuf::uint32 stInterceptReward::resid2() const {
  return resid2_;
}
inline void stInterceptReward::set_resid2(::google::protobuf::uint32 value) {
  set_has_resid2();
  resid2_ = value;
}

// optional uint32 resNum2 = 5;
inline bool stInterceptReward::has_resnum2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stInterceptReward::set_has_resnum2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stInterceptReward::clear_has_resnum2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stInterceptReward::clear_resnum2() {
  resnum2_ = 0u;
  clear_has_resnum2();
}
inline ::google::protobuf::uint32 stInterceptReward::resnum2() const {
  return resnum2_;
}
inline void stInterceptReward::set_resnum2(::google::protobuf::uint32 value) {
  set_has_resnum2();
  resnum2_ = value;
}

// -------------------------------------------------------------------

// stQuickFinishDecDiamond

// optional uint32 charID = 1;
inline bool stQuickFinishDecDiamond::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stQuickFinishDecDiamond::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stQuickFinishDecDiamond::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stQuickFinishDecDiamond::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stQuickFinishDecDiamond::charid() const {
  return charid_;
}
inline void stQuickFinishDecDiamond::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stQuickFinishDiamondSuccess

// optional uint32 charID = 1;
inline bool stQuickFinishDiamondSuccess::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stQuickFinishDiamondSuccess::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stQuickFinishDiamondSuccess::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stQuickFinishDiamondSuccess::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stQuickFinishDiamondSuccess::charid() const {
  return charid_;
}
inline void stQuickFinishDiamondSuccess::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOne2OnePkWithRobot

// optional uint32 charID = 1;
inline bool stOne2OnePkWithRobot::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOne2OnePkWithRobot::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOne2OnePkWithRobot::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOne2OnePkWithRobot::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stOne2OnePkWithRobot::charid() const {
  return charid_;
}
inline void stOne2OnePkWithRobot::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 robotGroup = 2;
inline bool stOne2OnePkWithRobot::has_robotgroup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOne2OnePkWithRobot::set_has_robotgroup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOne2OnePkWithRobot::clear_has_robotgroup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOne2OnePkWithRobot::clear_robotgroup() {
  robotgroup_ = 0u;
  clear_has_robotgroup();
}
inline ::google::protobuf::uint32 stOne2OnePkWithRobot::robotgroup() const {
  return robotgroup_;
}
inline void stOne2OnePkWithRobot::set_robotgroup(::google::protobuf::uint32 value) {
  set_has_robotgroup();
  robotgroup_ = value;
}

// -------------------------------------------------------------------

// stNotifyUserBeginGuard

// optional uint32 charID = 1;
inline bool stNotifyUserBeginGuard::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyUserBeginGuard::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyUserBeginGuard::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyUserBeginGuard::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyUserBeginGuard::charid() const {
  return charid_;
}
inline void stNotifyUserBeginGuard::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stNotifyUserInterceptResult

// optional uint32 charID = 1;
inline bool stNotifyUserInterceptResult::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyUserInterceptResult::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyUserInterceptResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyUserInterceptResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyUserInterceptResult::charid() const {
  return charid_;
}
inline void stNotifyUserInterceptResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stNotifyCloseBetaReward

// optional uint32 charID = 1;
inline bool stNotifyCloseBetaReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyCloseBetaReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyCloseBetaReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyCloseBetaReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyCloseBetaReward::charid() const {
  return charid_;
}
inline void stNotifyCloseBetaReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 boxID = 2;
inline bool stNotifyCloseBetaReward::has_boxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyCloseBetaReward::set_has_boxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyCloseBetaReward::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyCloseBetaReward::clear_boxid() {
  boxid_ = 0u;
  clear_has_boxid();
}
inline ::google::protobuf::uint32 stNotifyCloseBetaReward::boxid() const {
  return boxid_;
}
inline void stNotifyCloseBetaReward::set_boxid(::google::protobuf::uint32 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional uint32 giveDiamond = 3;
inline bool stNotifyCloseBetaReward::has_givediamond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyCloseBetaReward::set_has_givediamond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyCloseBetaReward::clear_has_givediamond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyCloseBetaReward::clear_givediamond() {
  givediamond_ = 0u;
  clear_has_givediamond();
}
inline ::google::protobuf::uint32 stNotifyCloseBetaReward::givediamond() const {
  return givediamond_;
}
inline void stNotifyCloseBetaReward::set_givediamond(::google::protobuf::uint32 value) {
  set_has_givediamond();
  givediamond_ = value;
}

// optional uint32 giveRecharge = 4;
inline bool stNotifyCloseBetaReward::has_giverecharge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyCloseBetaReward::set_has_giverecharge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyCloseBetaReward::clear_has_giverecharge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyCloseBetaReward::clear_giverecharge() {
  giverecharge_ = 0u;
  clear_has_giverecharge();
}
inline ::google::protobuf::uint32 stNotifyCloseBetaReward::giverecharge() const {
  return giverecharge_;
}
inline void stNotifyCloseBetaReward::set_giverecharge(::google::protobuf::uint32 value) {
  set_has_giverecharge();
  giverecharge_ = value;
}

// -------------------------------------------------------------------

// stEnterManorFightMapUserInfo

// optional uint32 charID = 1;
inline bool stEnterManorFightMapUserInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEnterManorFightMapUserInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEnterManorFightMapUserInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEnterManorFightMapUserInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stEnterManorFightMapUserInfo::charid() const {
  return charid_;
}
inline void stEnterManorFightMapUserInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 hp = 2;
inline bool stEnterManorFightMapUserInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEnterManorFightMapUserInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEnterManorFightMapUserInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEnterManorFightMapUserInfo::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 stEnterManorFightMapUserInfo::hp() const {
  return hp_;
}
inline void stEnterManorFightMapUserInfo::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// -------------------------------------------------------------------

// stEnterManorFightMap

// repeated .Global.stEnterManorFightMapUserInfo guildAMem = 1;
inline int stEnterManorFightMap::guildamem_size() const {
  return guildamem_.size();
}
inline void stEnterManorFightMap::clear_guildamem() {
  guildamem_.Clear();
}
inline const ::Global::stEnterManorFightMapUserInfo& stEnterManorFightMap::guildamem(int index) const {
  return guildamem_.Get(index);
}
inline ::Global::stEnterManorFightMapUserInfo* stEnterManorFightMap::mutable_guildamem(int index) {
  return guildamem_.Mutable(index);
}
inline ::Global::stEnterManorFightMapUserInfo* stEnterManorFightMap::add_guildamem() {
  return guildamem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stEnterManorFightMapUserInfo >&
stEnterManorFightMap::guildamem() const {
  return guildamem_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stEnterManorFightMapUserInfo >*
stEnterManorFightMap::mutable_guildamem() {
  return &guildamem_;
}

// repeated .Global.stEnterManorFightMapUserInfo guildBMem = 2;
inline int stEnterManorFightMap::guildbmem_size() const {
  return guildbmem_.size();
}
inline void stEnterManorFightMap::clear_guildbmem() {
  guildbmem_.Clear();
}
inline const ::Global::stEnterManorFightMapUserInfo& stEnterManorFightMap::guildbmem(int index) const {
  return guildbmem_.Get(index);
}
inline ::Global::stEnterManorFightMapUserInfo* stEnterManorFightMap::mutable_guildbmem(int index) {
  return guildbmem_.Mutable(index);
}
inline ::Global::stEnterManorFightMapUserInfo* stEnterManorFightMap::add_guildbmem() {
  return guildbmem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stEnterManorFightMapUserInfo >&
stEnterManorFightMap::guildbmem() const {
  return guildbmem_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stEnterManorFightMapUserInfo >*
stEnterManorFightMap::mutable_guildbmem() {
  return &guildbmem_;
}

// optional uint32 manorID = 3;
inline bool stEnterManorFightMap::has_manorid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stEnterManorFightMap::set_has_manorid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stEnterManorFightMap::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stEnterManorFightMap::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stEnterManorFightMap::manorid() const {
  return manorid_;
}
inline void stEnterManorFightMap::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// optional uint32 fomation = 4;
inline bool stEnterManorFightMap::has_fomation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stEnterManorFightMap::set_has_fomation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stEnterManorFightMap::clear_has_fomation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stEnterManorFightMap::clear_fomation() {
  fomation_ = 0u;
  clear_has_fomation();
}
inline ::google::protobuf::uint32 stEnterManorFightMap::fomation() const {
  return fomation_;
}
inline void stEnterManorFightMap::set_fomation(::google::protobuf::uint32 value) {
  set_has_fomation();
  fomation_ = value;
}

// optional uint32 teamAID = 5;
inline bool stEnterManorFightMap::has_teamaid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stEnterManorFightMap::set_has_teamaid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stEnterManorFightMap::clear_has_teamaid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stEnterManorFightMap::clear_teamaid() {
  teamaid_ = 0u;
  clear_has_teamaid();
}
inline ::google::protobuf::uint32 stEnterManorFightMap::teamaid() const {
  return teamaid_;
}
inline void stEnterManorFightMap::set_teamaid(::google::protobuf::uint32 value) {
  set_has_teamaid();
  teamaid_ = value;
}

// optional uint32 teamBID = 6;
inline bool stEnterManorFightMap::has_teambid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stEnterManorFightMap::set_has_teambid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stEnterManorFightMap::clear_has_teambid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stEnterManorFightMap::clear_teambid() {
  teambid_ = 0u;
  clear_has_teambid();
}
inline ::google::protobuf::uint32 stEnterManorFightMap::teambid() const {
  return teambid_;
}
inline void stEnterManorFightMap::set_teambid(::google::protobuf::uint32 value) {
  set_has_teambid();
  teambid_ = value;
}

// -------------------------------------------------------------------

// stManorFightBattleProp

// optional uint32 curHP = 1;
inline bool stManorFightBattleProp::has_curhp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stManorFightBattleProp::set_has_curhp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stManorFightBattleProp::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stManorFightBattleProp::clear_curhp() {
  curhp_ = 0u;
  clear_has_curhp();
}
inline ::google::protobuf::uint32 stManorFightBattleProp::curhp() const {
  return curhp_;
}
inline void stManorFightBattleProp::set_curhp(::google::protobuf::uint32 value) {
  set_has_curhp();
  curhp_ = value;
}

// optional uint32 charID = 2;
inline bool stManorFightBattleProp::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stManorFightBattleProp::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stManorFightBattleProp::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stManorFightBattleProp::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stManorFightBattleProp::charid() const {
  return charid_;
}
inline void stManorFightBattleProp::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stFinishManorFight

// optional uint32 manorID = 1;
inline bool stFinishManorFight::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFinishManorFight::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFinishManorFight::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFinishManorFight::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stFinishManorFight::manorid() const {
  return manorid_;
}
inline void stFinishManorFight::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// optional uint32 fomation = 2;
inline bool stFinishManorFight::has_fomation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stFinishManorFight::set_has_fomation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stFinishManorFight::clear_has_fomation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stFinishManorFight::clear_fomation() {
  fomation_ = 0u;
  clear_has_fomation();
}
inline ::google::protobuf::uint32 stFinishManorFight::fomation() const {
  return fomation_;
}
inline void stFinishManorFight::set_fomation(::google::protobuf::uint32 value) {
  set_has_fomation();
  fomation_ = value;
}

// optional uint32 teamAID = 3;
inline bool stFinishManorFight::has_teamaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stFinishManorFight::set_has_teamaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stFinishManorFight::clear_has_teamaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stFinishManorFight::clear_teamaid() {
  teamaid_ = 0u;
  clear_has_teamaid();
}
inline ::google::protobuf::uint32 stFinishManorFight::teamaid() const {
  return teamaid_;
}
inline void stFinishManorFight::set_teamaid(::google::protobuf::uint32 value) {
  set_has_teamaid();
  teamaid_ = value;
}

// optional uint32 teamBID = 4;
inline bool stFinishManorFight::has_teambid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stFinishManorFight::set_has_teambid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stFinishManorFight::clear_has_teambid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stFinishManorFight::clear_teambid() {
  teambid_ = 0u;
  clear_has_teambid();
}
inline ::google::protobuf::uint32 stFinishManorFight::teambid() const {
  return teambid_;
}
inline void stFinishManorFight::set_teambid(::google::protobuf::uint32 value) {
  set_has_teambid();
  teambid_ = value;
}

// optional bool bFail = 5;
inline bool stFinishManorFight::has_bfail() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stFinishManorFight::set_has_bfail() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stFinishManorFight::clear_has_bfail() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stFinishManorFight::clear_bfail() {
  bfail_ = false;
  clear_has_bfail();
}
inline bool stFinishManorFight::bfail() const {
  return bfail_;
}
inline void stFinishManorFight::set_bfail(bool value) {
  set_has_bfail();
  bfail_ = value;
}

// optional bool bFinish = 6;
inline bool stFinishManorFight::has_bfinish() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stFinishManorFight::set_has_bfinish() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stFinishManorFight::clear_has_bfinish() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stFinishManorFight::clear_bfinish() {
  bfinish_ = false;
  clear_has_bfinish();
}
inline bool stFinishManorFight::bfinish() const {
  return bfinish_;
}
inline void stFinishManorFight::set_bfinish(bool value) {
  set_has_bfinish();
  bfinish_ = value;
}

// repeated .Global.stManorFightBattleProp userInfo = 7;
inline int stFinishManorFight::userinfo_size() const {
  return userinfo_.size();
}
inline void stFinishManorFight::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::Global::stManorFightBattleProp& stFinishManorFight::userinfo(int index) const {
  return userinfo_.Get(index);
}
inline ::Global::stManorFightBattleProp* stFinishManorFight::mutable_userinfo(int index) {
  return userinfo_.Mutable(index);
}
inline ::Global::stManorFightBattleProp* stFinishManorFight::add_userinfo() {
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stManorFightBattleProp >&
stFinishManorFight::userinfo() const {
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stManorFightBattleProp >*
stFinishManorFight::mutable_userinfo() {
  return &userinfo_;
}

// -------------------------------------------------------------------

// stExistName

// optional .Global.stExistName.eResult result = 1;
inline bool stExistName::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExistName::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExistName::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExistName::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Global::stExistName_eResult stExistName::result() const {
  return static_cast< ::Global::stExistName_eResult >(result_);
}
inline void stExistName::set_result(::Global::stExistName_eResult value) {
  assert(::Global::stExistName_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 charID = 2;
inline bool stExistName::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stExistName::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stExistName::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stExistName::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stExistName::charid() const {
  return charid_;
}
inline void stExistName::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 3;
inline bool stExistName::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stExistName::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stExistName::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stExistName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stExistName::name() const {
  return *name_;
}
inline void stExistName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stExistName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stExistName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stExistName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stExistName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stExistName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stSynName

// optional uint32 charID = 1;
inline bool stSynName::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynName::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynName::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynName::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynName::charid() const {
  return charid_;
}
inline void stSynName::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynName::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynName::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynName::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynName::name() const {
  return *name_;
}
inline void stSynName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stSynGloryfashionCharID

// optional uint32 charID = 1;
inline bool stSynGloryfashionCharID::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynGloryfashionCharID::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynGloryfashionCharID::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynGloryfashionCharID::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynGloryfashionCharID::charid() const {
  return charid_;
}
inline void stSynGloryfashionCharID::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 buyTime = 2;
inline bool stSynGloryfashionCharID::has_buytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynGloryfashionCharID::set_has_buytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynGloryfashionCharID::clear_has_buytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynGloryfashionCharID::clear_buytime() {
  buytime_ = 0u;
  clear_has_buytime();
}
inline ::google::protobuf::uint32 stSynGloryfashionCharID::buytime() const {
  return buytime_;
}
inline void stSynGloryfashionCharID::set_buytime(::google::protobuf::uint32 value) {
  set_has_buytime();
  buytime_ = value;
}

// -------------------------------------------------------------------

// stDevilCallItem

// optional uint32 itemId = 1;
inline bool stDevilCallItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDevilCallItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDevilCallItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDevilCallItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stDevilCallItem::itemid() const {
  return itemid_;
}
inline void stDevilCallItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string name1 = 2;
inline bool stDevilCallItem::has_name1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDevilCallItem::set_has_name1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDevilCallItem::clear_has_name1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDevilCallItem::clear_name1() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    name1_->clear();
  }
  clear_has_name1();
}
inline const ::std::string& stDevilCallItem::name1() const {
  return *name1_;
}
inline void stDevilCallItem::set_name1(const ::std::string& value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
}
inline void stDevilCallItem::set_name1(const char* value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
}
inline void stDevilCallItem::set_name1(const char* value, size_t size) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stDevilCallItem::mutable_name1() {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  return name1_;
}
inline ::std::string* stDevilCallItem::release_name1() {
  clear_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name1_;
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stDevilCallItem::set_allocated_name1(::std::string* name1) {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    delete name1_;
  }
  if (name1) {
    set_has_name1();
    name1_ = name1;
  } else {
    clear_has_name1();
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID1 = 3;
inline bool stDevilCallItem::has_charid1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDevilCallItem::set_has_charid1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDevilCallItem::clear_has_charid1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDevilCallItem::clear_charid1() {
  charid1_ = 0u;
  clear_has_charid1();
}
inline ::google::protobuf::uint32 stDevilCallItem::charid1() const {
  return charid1_;
}
inline void stDevilCallItem::set_charid1(::google::protobuf::uint32 value) {
  set_has_charid1();
  charid1_ = value;
}

// optional string name2 = 4;
inline bool stDevilCallItem::has_name2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stDevilCallItem::set_has_name2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stDevilCallItem::clear_has_name2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stDevilCallItem::clear_name2() {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    name2_->clear();
  }
  clear_has_name2();
}
inline const ::std::string& stDevilCallItem::name2() const {
  return *name2_;
}
inline void stDevilCallItem::set_name2(const ::std::string& value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void stDevilCallItem::set_name2(const char* value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void stDevilCallItem::set_name2(const char* value, size_t size) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stDevilCallItem::mutable_name2() {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  return name2_;
}
inline ::std::string* stDevilCallItem::release_name2() {
  clear_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name2_;
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stDevilCallItem::set_allocated_name2(::std::string* name2) {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (name2) {
    set_has_name2();
    name2_ = name2;
  } else {
    clear_has_name2();
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID2 = 5;
inline bool stDevilCallItem::has_charid2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stDevilCallItem::set_has_charid2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stDevilCallItem::clear_has_charid2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stDevilCallItem::clear_charid2() {
  charid2_ = 0u;
  clear_has_charid2();
}
inline ::google::protobuf::uint32 stDevilCallItem::charid2() const {
  return charid2_;
}
inline void stDevilCallItem::set_charid2(::google::protobuf::uint32 value) {
  set_has_charid2();
  charid2_ = value;
}

// optional string name3 = 6;
inline bool stDevilCallItem::has_name3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stDevilCallItem::set_has_name3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stDevilCallItem::clear_has_name3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stDevilCallItem::clear_name3() {
  if (name3_ != &::google::protobuf::internal::kEmptyString) {
    name3_->clear();
  }
  clear_has_name3();
}
inline const ::std::string& stDevilCallItem::name3() const {
  return *name3_;
}
inline void stDevilCallItem::set_name3(const ::std::string& value) {
  set_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    name3_ = new ::std::string;
  }
  name3_->assign(value);
}
inline void stDevilCallItem::set_name3(const char* value) {
  set_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    name3_ = new ::std::string;
  }
  name3_->assign(value);
}
inline void stDevilCallItem::set_name3(const char* value, size_t size) {
  set_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    name3_ = new ::std::string;
  }
  name3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stDevilCallItem::mutable_name3() {
  set_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    name3_ = new ::std::string;
  }
  return name3_;
}
inline ::std::string* stDevilCallItem::release_name3() {
  clear_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name3_;
    name3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stDevilCallItem::set_allocated_name3(::std::string* name3) {
  if (name3_ != &::google::protobuf::internal::kEmptyString) {
    delete name3_;
  }
  if (name3) {
    set_has_name3();
    name3_ = name3;
  } else {
    clear_has_name3();
    name3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID3 = 7;
inline bool stDevilCallItem::has_charid3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stDevilCallItem::set_has_charid3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stDevilCallItem::clear_has_charid3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stDevilCallItem::clear_charid3() {
  charid3_ = 0u;
  clear_has_charid3();
}
inline ::google::protobuf::uint32 stDevilCallItem::charid3() const {
  return charid3_;
}
inline void stDevilCallItem::set_charid3(::google::protobuf::uint32 value) {
  set_has_charid3();
  charid3_ = value;
}

// optional bool hasPass = 8;
inline bool stDevilCallItem::has_haspass() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stDevilCallItem::set_has_haspass() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stDevilCallItem::clear_has_haspass() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stDevilCallItem::clear_haspass() {
  haspass_ = false;
  clear_has_haspass();
}
inline bool stDevilCallItem::haspass() const {
  return haspass_;
}
inline void stDevilCallItem::set_haspass(bool value) {
  set_has_haspass();
  haspass_ = value;
}

// optional uint32 bossdrawstatus = 9;
inline bool stDevilCallItem::has_bossdrawstatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stDevilCallItem::set_has_bossdrawstatus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stDevilCallItem::clear_has_bossdrawstatus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stDevilCallItem::clear_bossdrawstatus() {
  bossdrawstatus_ = 0u;
  clear_has_bossdrawstatus();
}
inline ::google::protobuf::uint32 stDevilCallItem::bossdrawstatus() const {
  return bossdrawstatus_;
}
inline void stDevilCallItem::set_bossdrawstatus(::google::protobuf::uint32 value) {
  set_has_bossdrawstatus();
  bossdrawstatus_ = value;
}

// optional uint32 commondrawstatus = 10;
inline bool stDevilCallItem::has_commondrawstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stDevilCallItem::set_has_commondrawstatus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stDevilCallItem::clear_has_commondrawstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stDevilCallItem::clear_commondrawstatus() {
  commondrawstatus_ = 0u;
  clear_has_commondrawstatus();
}
inline ::google::protobuf::uint32 stDevilCallItem::commondrawstatus() const {
  return commondrawstatus_;
}
inline void stDevilCallItem::set_commondrawstatus(::google::protobuf::uint32 value) {
  set_has_commondrawstatus();
  commondrawstatus_ = value;
}

// -------------------------------------------------------------------

// stAllDevilCall

// optional uint32 charID = 1;
inline bool stAllDevilCall::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAllDevilCall::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAllDevilCall::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAllDevilCall::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stAllDevilCall::charid() const {
  return charid_;
}
inline void stAllDevilCall::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .Global.stDevilCallItem item = 2;
inline int stAllDevilCall::item_size() const {
  return item_.size();
}
inline void stAllDevilCall::clear_item() {
  item_.Clear();
}
inline const ::Global::stDevilCallItem& stAllDevilCall::item(int index) const {
  return item_.Get(index);
}
inline ::Global::stDevilCallItem* stAllDevilCall::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::Global::stDevilCallItem* stAllDevilCall::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stDevilCallItem >&
stAllDevilCall::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stDevilCallItem >*
stAllDevilCall::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// stDevilCallReward

// optional uint32 charID = 1;
inline bool stDevilCallReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDevilCallReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDevilCallReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDevilCallReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDevilCallReward::charid() const {
  return charid_;
}
inline void stDevilCallReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 bossId = 2;
inline bool stDevilCallReward::has_bossid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDevilCallReward::set_has_bossid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDevilCallReward::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDevilCallReward::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 stDevilCallReward::bossid() const {
  return bossid_;
}
inline void stDevilCallReward::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional uint32 rewardType = 3;
inline bool stDevilCallReward::has_rewardtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDevilCallReward::set_has_rewardtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDevilCallReward::clear_has_rewardtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDevilCallReward::clear_rewardtype() {
  rewardtype_ = 0u;
  clear_has_rewardtype();
}
inline ::google::protobuf::uint32 stDevilCallReward::rewardtype() const {
  return rewardtype_;
}
inline void stDevilCallReward::set_rewardtype(::google::protobuf::uint32 value) {
  set_has_rewardtype();
  rewardtype_ = value;
}

// optional uint32 gotPass = 4;
inline bool stDevilCallReward::has_gotpass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stDevilCallReward::set_has_gotpass() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stDevilCallReward::clear_has_gotpass() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stDevilCallReward::clear_gotpass() {
  gotpass_ = 0u;
  clear_has_gotpass();
}
inline ::google::protobuf::uint32 stDevilCallReward::gotpass() const {
  return gotpass_;
}
inline void stDevilCallReward::set_gotpass(::google::protobuf::uint32 value) {
  set_has_gotpass();
  gotpass_ = value;
}

// optional uint32 status = 5;
inline bool stDevilCallReward::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stDevilCallReward::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stDevilCallReward::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stDevilCallReward::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 stDevilCallReward::status() const {
  return status_;
}
inline void stDevilCallReward::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// stDevilCallRewardRet

// optional uint32 charID = 1;
inline bool stDevilCallRewardRet::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDevilCallRewardRet::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDevilCallRewardRet::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDevilCallRewardRet::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDevilCallRewardRet::charid() const {
  return charid_;
}
inline void stDevilCallRewardRet::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 bossId = 2;
inline bool stDevilCallRewardRet::has_bossid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDevilCallRewardRet::set_has_bossid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDevilCallRewardRet::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDevilCallRewardRet::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 stDevilCallRewardRet::bossid() const {
  return bossid_;
}
inline void stDevilCallRewardRet::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional uint32 rewardType = 3;
inline bool stDevilCallRewardRet::has_rewardtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDevilCallRewardRet::set_has_rewardtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDevilCallRewardRet::clear_has_rewardtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDevilCallRewardRet::clear_rewardtype() {
  rewardtype_ = 0u;
  clear_has_rewardtype();
}
inline ::google::protobuf::uint32 stDevilCallRewardRet::rewardtype() const {
  return rewardtype_;
}
inline void stDevilCallRewardRet::set_rewardtype(::google::protobuf::uint32 value) {
  set_has_rewardtype();
  rewardtype_ = value;
}

// optional uint32 status = 4;
inline bool stDevilCallRewardRet::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stDevilCallRewardRet::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stDevilCallRewardRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stDevilCallRewardRet::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 stDevilCallRewardRet::status() const {
  return status_;
}
inline void stDevilCallRewardRet::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// stDevilCall

// optional uint32 charID = 1;
inline bool stDevilCall::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDevilCall::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDevilCall::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDevilCall::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDevilCall::charid() const {
  return charid_;
}
inline void stDevilCall::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 bossId = 2;
inline bool stDevilCall::has_bossid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDevilCall::set_has_bossid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDevilCall::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDevilCall::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 stDevilCall::bossid() const {
  return bossid_;
}
inline void stDevilCall::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional uint32 gotPass = 3;
inline bool stDevilCall::has_gotpass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDevilCall::set_has_gotpass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDevilCall::clear_has_gotpass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDevilCall::clear_gotpass() {
  gotpass_ = 0u;
  clear_has_gotpass();
}
inline ::google::protobuf::uint32 stDevilCall::gotpass() const {
  return gotpass_;
}
inline void stDevilCall::set_gotpass(::google::protobuf::uint32 value) {
  set_has_gotpass();
  gotpass_ = value;
}

// optional uint32 drawNum = 4;
inline bool stDevilCall::has_drawnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stDevilCall::set_has_drawnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stDevilCall::clear_has_drawnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stDevilCall::clear_drawnum() {
  drawnum_ = 0u;
  clear_has_drawnum();
}
inline ::google::protobuf::uint32 stDevilCall::drawnum() const {
  return drawnum_;
}
inline void stDevilCall::set_drawnum(::google::protobuf::uint32 value) {
  set_has_drawnum();
  drawnum_ = value;
}

// -------------------------------------------------------------------

// stDevilCallRet

// optional uint32 charID = 1;
inline bool stDevilCallRet::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDevilCallRet::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDevilCallRet::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDevilCallRet::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDevilCallRet::charid() const {
  return charid_;
}
inline void stDevilCallRet::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 bossId = 2;
inline bool stDevilCallRet::has_bossid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDevilCallRet::set_has_bossid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDevilCallRet::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDevilCallRet::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 stDevilCallRet::bossid() const {
  return bossid_;
}
inline void stDevilCallRet::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional uint32 drawNum = 3;
inline bool stDevilCallRet::has_drawnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDevilCallRet::set_has_drawnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDevilCallRet::clear_has_drawnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDevilCallRet::clear_drawnum() {
  drawnum_ = 0u;
  clear_has_drawnum();
}
inline ::google::protobuf::uint32 stDevilCallRet::drawnum() const {
  return drawnum_;
}
inline void stDevilCallRet::set_drawnum(::google::protobuf::uint32 value) {
  set_has_drawnum();
  drawnum_ = value;
}

// -------------------------------------------------------------------

// stDevilCallSummary

// optional uint32 charID = 1;
inline bool stDevilCallSummary::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDevilCallSummary::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDevilCallSummary::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDevilCallSummary::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDevilCallSummary::charid() const {
  return charid_;
}
inline void stDevilCallSummary::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .Global.stDevilCallItem item = 2;
inline int stDevilCallSummary::item_size() const {
  return item_.size();
}
inline void stDevilCallSummary::clear_item() {
  item_.Clear();
}
inline const ::Global::stDevilCallItem& stDevilCallSummary::item(int index) const {
  return item_.Get(index);
}
inline ::Global::stDevilCallItem* stDevilCallSummary::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::Global::stDevilCallItem* stDevilCallSummary::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stDevilCallItem >&
stDevilCallSummary::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stDevilCallItem >*
stDevilCallSummary::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// stExpeditionItem

// optional uint32 expeditionId = 1;
inline bool stExpeditionItem::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExpeditionItem::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExpeditionItem::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExpeditionItem::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stExpeditionItem::expeditionid() const {
  return expeditionid_;
}
inline void stExpeditionItem::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// optional uint32 finishTime = 2;
inline bool stExpeditionItem::has_finishtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stExpeditionItem::set_has_finishtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stExpeditionItem::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stExpeditionItem::clear_finishtime() {
  finishtime_ = 0u;
  clear_has_finishtime();
}
inline ::google::protobuf::uint32 stExpeditionItem::finishtime() const {
  return finishtime_;
}
inline void stExpeditionItem::set_finishtime(::google::protobuf::uint32 value) {
  set_has_finishtime();
  finishtime_ = value;
}

// repeated uint32 heroIds = 3;
inline int stExpeditionItem::heroids_size() const {
  return heroids_.size();
}
inline void stExpeditionItem::clear_heroids() {
  heroids_.Clear();
}
inline ::google::protobuf::uint32 stExpeditionItem::heroids(int index) const {
  return heroids_.Get(index);
}
inline void stExpeditionItem::set_heroids(int index, ::google::protobuf::uint32 value) {
  heroids_.Set(index, value);
}
inline void stExpeditionItem::add_heroids(::google::protobuf::uint32 value) {
  heroids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stExpeditionItem::heroids() const {
  return heroids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stExpeditionItem::mutable_heroids() {
  return &heroids_;
}

// -------------------------------------------------------------------

// stExpeditionInfo

// optional uint32 charID = 1;
inline bool stExpeditionInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExpeditionInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExpeditionInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExpeditionInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stExpeditionInfo::charid() const {
  return charid_;
}
inline void stExpeditionInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .Global.stExpeditionItem items = 2;
inline int stExpeditionInfo::items_size() const {
  return items_.size();
}
inline void stExpeditionInfo::clear_items() {
  items_.Clear();
}
inline const ::Global::stExpeditionItem& stExpeditionInfo::items(int index) const {
  return items_.Get(index);
}
inline ::Global::stExpeditionItem* stExpeditionInfo::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Global::stExpeditionItem* stExpeditionInfo::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionItem >&
stExpeditionInfo::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionItem >*
stExpeditionInfo::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stExpedition

// optional uint32 charID = 1;
inline bool stExpedition::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExpedition::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExpedition::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExpedition::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stExpedition::charid() const {
  return charid_;
}
inline void stExpedition::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated uint32 expeIds = 2;
inline int stExpedition::expeids_size() const {
  return expeids_.size();
}
inline void stExpedition::clear_expeids() {
  expeids_.Clear();
}
inline ::google::protobuf::uint32 stExpedition::expeids(int index) const {
  return expeids_.Get(index);
}
inline void stExpedition::set_expeids(int index, ::google::protobuf::uint32 value) {
  expeids_.Set(index, value);
}
inline void stExpedition::add_expeids(::google::protobuf::uint32 value) {
  expeids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stExpedition::expeids() const {
  return expeids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stExpedition::mutable_expeids() {
  return &expeids_;
}

// repeated uint32 heroIds = 3;
inline int stExpedition::heroids_size() const {
  return heroids_.size();
}
inline void stExpedition::clear_heroids() {
  heroids_.Clear();
}
inline ::google::protobuf::uint32 stExpedition::heroids(int index) const {
  return heroids_.Get(index);
}
inline void stExpedition::set_heroids(int index, ::google::protobuf::uint32 value) {
  heroids_.Set(index, value);
}
inline void stExpedition::add_heroids(::google::protobuf::uint32 value) {
  heroids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stExpedition::heroids() const {
  return heroids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stExpedition::mutable_heroids() {
  return &heroids_;
}

// repeated uint32 usedHero = 4;
inline int stExpedition::usedhero_size() const {
  return usedhero_.size();
}
inline void stExpedition::clear_usedhero() {
  usedhero_.Clear();
}
inline ::google::protobuf::uint32 stExpedition::usedhero(int index) const {
  return usedhero_.Get(index);
}
inline void stExpedition::set_usedhero(int index, ::google::protobuf::uint32 value) {
  usedhero_.Set(index, value);
}
inline void stExpedition::add_usedhero(::google::protobuf::uint32 value) {
  usedhero_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stExpedition::usedhero() const {
  return usedhero_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stExpedition::mutable_usedhero() {
  return &usedhero_;
}

// optional uint32 expeditionid = 5;
inline bool stExpedition::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stExpedition::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stExpedition::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stExpedition::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stExpedition::expeditionid() const {
  return expeditionid_;
}
inline void stExpedition::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// -------------------------------------------------------------------

// stExpeditionHero

// optional uint32 id = 1;
inline bool stExpeditionHero::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExpeditionHero::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExpeditionHero::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExpeditionHero::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stExpeditionHero::id() const {
  return id_;
}
inline void stExpeditionHero::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 lvl = 2;
inline bool stExpeditionHero::has_lvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stExpeditionHero::set_has_lvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stExpeditionHero::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stExpeditionHero::clear_lvl() {
  lvl_ = 0u;
  clear_has_lvl();
}
inline ::google::protobuf::uint32 stExpeditionHero::lvl() const {
  return lvl_;
}
inline void stExpeditionHero::set_lvl(::google::protobuf::uint32 value) {
  set_has_lvl();
  lvl_ = value;
}

// optional uint32 power = 3;
inline bool stExpeditionHero::has_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stExpeditionHero::set_has_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stExpeditionHero::clear_has_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stExpeditionHero::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 stExpeditionHero::power() const {
  return power_;
}
inline void stExpeditionHero::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// -------------------------------------------------------------------

// stExpeditionRet

// optional uint32 charID = 1;
inline bool stExpeditionRet::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExpeditionRet::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExpeditionRet::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExpeditionRet::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stExpeditionRet::charid() const {
  return charid_;
}
inline void stExpeditionRet::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 expeditionid = 2;
inline bool stExpeditionRet::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stExpeditionRet::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stExpeditionRet::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stExpeditionRet::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stExpeditionRet::expeditionid() const {
  return expeditionid_;
}
inline void stExpeditionRet::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// optional uint32 finishTime = 3;
inline bool stExpeditionRet::has_finishtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stExpeditionRet::set_has_finishtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stExpeditionRet::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stExpeditionRet::clear_finishtime() {
  finishtime_ = 0u;
  clear_has_finishtime();
}
inline ::google::protobuf::uint32 stExpeditionRet::finishtime() const {
  return finishtime_;
}
inline void stExpeditionRet::set_finishtime(::google::protobuf::uint32 value) {
  set_has_finishtime();
  finishtime_ = value;
}

// repeated .Global.stExpeditionHero usedHero = 4;
inline int stExpeditionRet::usedhero_size() const {
  return usedhero_.size();
}
inline void stExpeditionRet::clear_usedhero() {
  usedhero_.Clear();
}
inline const ::Global::stExpeditionHero& stExpeditionRet::usedhero(int index) const {
  return usedhero_.Get(index);
}
inline ::Global::stExpeditionHero* stExpeditionRet::mutable_usedhero(int index) {
  return usedhero_.Mutable(index);
}
inline ::Global::stExpeditionHero* stExpeditionRet::add_usedhero() {
  return usedhero_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionHero >&
stExpeditionRet::usedhero() const {
  return usedhero_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionHero >*
stExpeditionRet::mutable_usedhero() {
  return &usedhero_;
}

// -------------------------------------------------------------------

// stExpeditionReward

// optional uint32 charID = 1;
inline bool stExpeditionReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExpeditionReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExpeditionReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExpeditionReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stExpeditionReward::charid() const {
  return charid_;
}
inline void stExpeditionReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 expeditionid = 2;
inline bool stExpeditionReward::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stExpeditionReward::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stExpeditionReward::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stExpeditionReward::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stExpeditionReward::expeditionid() const {
  return expeditionid_;
}
inline void stExpeditionReward::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// optional uint32 finishTime = 3;
inline bool stExpeditionReward::has_finishtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stExpeditionReward::set_has_finishtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stExpeditionReward::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stExpeditionReward::clear_finishtime() {
  finishtime_ = 0u;
  clear_has_finishtime();
}
inline ::google::protobuf::uint32 stExpeditionReward::finishtime() const {
  return finishtime_;
}
inline void stExpeditionReward::set_finishtime(::google::protobuf::uint32 value) {
  set_has_finishtime();
  finishtime_ = value;
}

// repeated .Global.stExpeditionHero usedHero = 4;
inline int stExpeditionReward::usedhero_size() const {
  return usedhero_.size();
}
inline void stExpeditionReward::clear_usedhero() {
  usedhero_.Clear();
}
inline const ::Global::stExpeditionHero& stExpeditionReward::usedhero(int index) const {
  return usedhero_.Get(index);
}
inline ::Global::stExpeditionHero* stExpeditionReward::mutable_usedhero(int index) {
  return usedhero_.Mutable(index);
}
inline ::Global::stExpeditionHero* stExpeditionReward::add_usedhero() {
  return usedhero_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionHero >&
stExpeditionReward::usedhero() const {
  return usedhero_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionHero >*
stExpeditionReward::mutable_usedhero() {
  return &usedhero_;
}

// -------------------------------------------------------------------

// stExpeditionRewardRet

// optional uint32 charID = 1;
inline bool stExpeditionRewardRet::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExpeditionRewardRet::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExpeditionRewardRet::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExpeditionRewardRet::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stExpeditionRewardRet::charid() const {
  return charid_;
}
inline void stExpeditionRewardRet::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 expeditionid = 2;
inline bool stExpeditionRewardRet::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stExpeditionRewardRet::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stExpeditionRewardRet::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stExpeditionRewardRet::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stExpeditionRewardRet::expeditionid() const {
  return expeditionid_;
}
inline void stExpeditionRewardRet::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// -------------------------------------------------------------------

// stFastExpedition

// optional uint32 charID = 1;
inline bool stFastExpedition::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFastExpedition::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFastExpedition::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFastExpedition::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stFastExpedition::charid() const {
  return charid_;
}
inline void stFastExpedition::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 expeditionid = 2;
inline bool stFastExpedition::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stFastExpedition::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stFastExpedition::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stFastExpedition::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stFastExpedition::expeditionid() const {
  return expeditionid_;
}
inline void stFastExpedition::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// optional uint32 finishTime = 3;
inline bool stFastExpedition::has_finishtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stFastExpedition::set_has_finishtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stFastExpedition::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stFastExpedition::clear_finishtime() {
  finishtime_ = 0u;
  clear_has_finishtime();
}
inline ::google::protobuf::uint32 stFastExpedition::finishtime() const {
  return finishtime_;
}
inline void stFastExpedition::set_finishtime(::google::protobuf::uint32 value) {
  set_has_finishtime();
  finishtime_ = value;
}

// -------------------------------------------------------------------

// stFastExpeditionRet

// optional uint32 charID = 1;
inline bool stFastExpeditionRet::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFastExpeditionRet::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFastExpeditionRet::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFastExpeditionRet::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stFastExpeditionRet::charid() const {
  return charid_;
}
inline void stFastExpeditionRet::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 expeditionid = 2;
inline bool stFastExpeditionRet::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stFastExpeditionRet::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stFastExpeditionRet::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stFastExpeditionRet::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stFastExpeditionRet::expeditionid() const {
  return expeditionid_;
}
inline void stFastExpeditionRet::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// optional uint32 finishTime = 3;
inline bool stFastExpeditionRet::has_finishtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stFastExpeditionRet::set_has_finishtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stFastExpeditionRet::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stFastExpeditionRet::clear_finishtime() {
  finishtime_ = 0u;
  clear_has_finishtime();
}
inline ::google::protobuf::uint32 stFastExpeditionRet::finishtime() const {
  return finishtime_;
}
inline void stFastExpeditionRet::set_finishtime(::google::protobuf::uint32 value) {
  set_has_finishtime();
  finishtime_ = value;
}

// -------------------------------------------------------------------

// stCancelExpedition

// optional uint32 charID = 1;
inline bool stCancelExpedition::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelExpedition::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelExpedition::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelExpedition::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCancelExpedition::charid() const {
  return charid_;
}
inline void stCancelExpedition::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 expeditionid = 2;
inline bool stCancelExpedition::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCancelExpedition::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCancelExpedition::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCancelExpedition::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stCancelExpedition::expeditionid() const {
  return expeditionid_;
}
inline void stCancelExpedition::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// optional uint32 finishTime = 3;
inline bool stCancelExpedition::has_finishtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCancelExpedition::set_has_finishtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCancelExpedition::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCancelExpedition::clear_finishtime() {
  finishtime_ = 0u;
  clear_has_finishtime();
}
inline ::google::protobuf::uint32 stCancelExpedition::finishtime() const {
  return finishtime_;
}
inline void stCancelExpedition::set_finishtime(::google::protobuf::uint32 value) {
  set_has_finishtime();
  finishtime_ = value;
}

// -------------------------------------------------------------------

// stCancelExpeditionRet

// optional uint32 charID = 1;
inline bool stCancelExpeditionRet::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelExpeditionRet::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelExpeditionRet::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelExpeditionRet::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCancelExpeditionRet::charid() const {
  return charid_;
}
inline void stCancelExpeditionRet::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 expeditionid = 2;
inline bool stCancelExpeditionRet::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCancelExpeditionRet::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCancelExpeditionRet::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCancelExpeditionRet::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stCancelExpeditionRet::expeditionid() const {
  return expeditionid_;
}
inline void stCancelExpeditionRet::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// -------------------------------------------------------------------

// stExpeditionSummary

// optional uint32 charID = 1;
inline bool stExpeditionSummary::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExpeditionSummary::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExpeditionSummary::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExpeditionSummary::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stExpeditionSummary::charid() const {
  return charid_;
}
inline void stExpeditionSummary::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .Global.stExpeditionItem items = 2;
inline int stExpeditionSummary::items_size() const {
  return items_.size();
}
inline void stExpeditionSummary::clear_items() {
  items_.Clear();
}
inline const ::Global::stExpeditionItem& stExpeditionSummary::items(int index) const {
  return items_.Get(index);
}
inline ::Global::stExpeditionItem* stExpeditionSummary::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Global::stExpeditionItem* stExpeditionSummary::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionItem >&
stExpeditionSummary::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stExpeditionItem >*
stExpeditionSummary::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stGiveLilianDayTaskCb

// optional uint32 charID = 1;
inline bool stGiveLilianDayTaskCb::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGiveLilianDayTaskCb::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGiveLilianDayTaskCb::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGiveLilianDayTaskCb::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGiveLilianDayTaskCb::charid() const {
  return charid_;
}
inline void stGiveLilianDayTaskCb::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stUpdateDamageRank

// optional uint32 charID = 1;
inline bool stUpdateDamageRank::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUpdateDamageRank::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUpdateDamageRank::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUpdateDamageRank::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUpdateDamageRank::charid() const {
  return charid_;
}
inline void stUpdateDamageRank::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 damage = 2;
inline bool stUpdateDamageRank::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUpdateDamageRank::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUpdateDamageRank::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUpdateDamageRank::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 stUpdateDamageRank::damage() const {
  return damage_;
}
inline void stUpdateDamageRank::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// -------------------------------------------------------------------

// stNoticeSendRankInfo

// optional uint32 charID = 1;
inline bool stNoticeSendRankInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNoticeSendRankInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNoticeSendRankInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNoticeSendRankInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNoticeSendRankInfo::charid() const {
  return charid_;
}
inline void stNoticeSendRankInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOperateActivityCb

// optional uint32 charID = 1;
inline bool stOperateActivityCb::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOperateActivityCb::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOperateActivityCb::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOperateActivityCb::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stOperateActivityCb::charid() const {
  return charid_;
}
inline void stOperateActivityCb::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 activityId = 2;
inline bool stOperateActivityCb::has_activityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOperateActivityCb::set_has_activityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOperateActivityCb::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOperateActivityCb::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stOperateActivityCb::activityid() const {
  return activityid_;
}
inline void stOperateActivityCb::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 num = 3;
inline bool stOperateActivityCb::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stOperateActivityCb::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stOperateActivityCb::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stOperateActivityCb::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stOperateActivityCb::num() const {
  return num_;
}
inline void stOperateActivityCb::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stOperateActivityReward

// optional uint32 charID = 1;
inline bool stOperateActivityReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOperateActivityReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOperateActivityReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOperateActivityReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stOperateActivityReward::charid() const {
  return charid_;
}
inline void stOperateActivityReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 activityId = 2;
inline bool stOperateActivityReward::has_activityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOperateActivityReward::set_has_activityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOperateActivityReward::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOperateActivityReward::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stOperateActivityReward::activityid() const {
  return activityid_;
}
inline void stOperateActivityReward::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 itemId = 3;
inline bool stOperateActivityReward::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stOperateActivityReward::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stOperateActivityReward::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stOperateActivityReward::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stOperateActivityReward::itemid() const {
  return itemid_;
}
inline void stOperateActivityReward::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 status = 4;
inline bool stOperateActivityReward::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stOperateActivityReward::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stOperateActivityReward::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stOperateActivityReward::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 stOperateActivityReward::status() const {
  return status_;
}
inline void stOperateActivityReward::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 boxId = 5;
inline bool stOperateActivityReward::has_boxid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stOperateActivityReward::set_has_boxid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stOperateActivityReward::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stOperateActivityReward::clear_boxid() {
  boxid_ = 0u;
  clear_has_boxid();
}
inline ::google::protobuf::uint32 stOperateActivityReward::boxid() const {
  return boxid_;
}
inline void stOperateActivityReward::set_boxid(::google::protobuf::uint32 value) {
  set_has_boxid();
  boxid_ = value;
}

// -------------------------------------------------------------------

// stOperateActivityRewardCb

// optional uint32 charID = 1;
inline bool stOperateActivityRewardCb::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOperateActivityRewardCb::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOperateActivityRewardCb::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOperateActivityRewardCb::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stOperateActivityRewardCb::charid() const {
  return charid_;
}
inline void stOperateActivityRewardCb::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 activityId = 2;
inline bool stOperateActivityRewardCb::has_activityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOperateActivityRewardCb::set_has_activityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOperateActivityRewardCb::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOperateActivityRewardCb::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stOperateActivityRewardCb::activityid() const {
  return activityid_;
}
inline void stOperateActivityRewardCb::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 itemId = 3;
inline bool stOperateActivityRewardCb::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stOperateActivityRewardCb::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stOperateActivityRewardCb::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stOperateActivityRewardCb::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stOperateActivityRewardCb::itemid() const {
  return itemid_;
}
inline void stOperateActivityRewardCb::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 status = 4;
inline bool stOperateActivityRewardCb::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stOperateActivityRewardCb::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stOperateActivityRewardCb::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stOperateActivityRewardCb::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 stOperateActivityRewardCb::status() const {
  return status_;
}
inline void stOperateActivityRewardCb::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 boxId = 5;
inline bool stOperateActivityRewardCb::has_boxid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stOperateActivityRewardCb::set_has_boxid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stOperateActivityRewardCb::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stOperateActivityRewardCb::clear_boxid() {
  boxid_ = 0u;
  clear_has_boxid();
}
inline ::google::protobuf::uint32 stOperateActivityRewardCb::boxid() const {
  return boxid_;
}
inline void stOperateActivityRewardCb::set_boxid(::google::protobuf::uint32 value) {
  set_has_boxid();
  boxid_ = value;
}

// -------------------------------------------------------------------

// stOperateActivityLotteryReward

// optional uint32 charID = 1;
inline bool stOperateActivityLotteryReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOperateActivityLotteryReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOperateActivityLotteryReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOperateActivityLotteryReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stOperateActivityLotteryReward::charid() const {
  return charid_;
}
inline void stOperateActivityLotteryReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 itemId = 2;
inline bool stOperateActivityLotteryReward::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOperateActivityLotteryReward::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOperateActivityLotteryReward::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOperateActivityLotteryReward::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stOperateActivityLotteryReward::itemid() const {
  return itemid_;
}
inline void stOperateActivityLotteryReward::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 cost = 3;
inline bool stOperateActivityLotteryReward::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stOperateActivityLotteryReward::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stOperateActivityLotteryReward::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stOperateActivityLotteryReward::clear_cost() {
  cost_ = 0u;
  clear_has_cost();
}
inline ::google::protobuf::uint32 stOperateActivityLotteryReward::cost() const {
  return cost_;
}
inline void stOperateActivityLotteryReward::set_cost(::google::protobuf::uint32 value) {
  set_has_cost();
  cost_ = value;
}

// optional uint32 boxId = 4;
inline bool stOperateActivityLotteryReward::has_boxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stOperateActivityLotteryReward::set_has_boxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stOperateActivityLotteryReward::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stOperateActivityLotteryReward::clear_boxid() {
  boxid_ = 0u;
  clear_has_boxid();
}
inline ::google::protobuf::uint32 stOperateActivityLotteryReward::boxid() const {
  return boxid_;
}
inline void stOperateActivityLotteryReward::set_boxid(::google::protobuf::uint32 value) {
  set_has_boxid();
  boxid_ = value;
}

// -------------------------------------------------------------------

// stOperateActivityLotteryRewardCb

// optional uint32 charID = 1;
inline bool stOperateActivityLotteryRewardCb::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOperateActivityLotteryRewardCb::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOperateActivityLotteryRewardCb::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOperateActivityLotteryRewardCb::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stOperateActivityLotteryRewardCb::charid() const {
  return charid_;
}
inline void stOperateActivityLotteryRewardCb::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 itemId = 2;
inline bool stOperateActivityLotteryRewardCb::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOperateActivityLotteryRewardCb::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOperateActivityLotteryRewardCb::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOperateActivityLotteryRewardCb::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stOperateActivityLotteryRewardCb::itemid() const {
  return itemid_;
}
inline void stOperateActivityLotteryRewardCb::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// stReqPayTypeCb

// optional uint32 charID = 1;
inline bool stReqPayTypeCb::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqPayTypeCb::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqPayTypeCb::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqPayTypeCb::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqPayTypeCb::charid() const {
  return charid_;
}
inline void stReqPayTypeCb::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 itemId = 2;
inline bool stReqPayTypeCb::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqPayTypeCb::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqPayTypeCb::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqPayTypeCb::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stReqPayTypeCb::itemid() const {
  return itemid_;
}
inline void stReqPayTypeCb::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string orderId = 3;
inline bool stReqPayTypeCb::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqPayTypeCb::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqPayTypeCb::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqPayTypeCb::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& stReqPayTypeCb::orderid() const {
  return *orderid_;
}
inline void stReqPayTypeCb::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void stReqPayTypeCb::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void stReqPayTypeCb::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqPayTypeCb::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* stReqPayTypeCb::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqPayTypeCb::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqUserRankInfo

// optional uint32 charID = 1;
inline bool stReqUserRankInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqUserRankInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqUserRankInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqUserRankInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqUserRankInfo::charid() const {
  return charid_;
}
inline void stReqUserRankInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// userSortInfo

// optional string name = 1;
inline bool userSortInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void userSortInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void userSortInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void userSortInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& userSortInfo::name() const {
  return *name_;
}
inline void userSortInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void userSortInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void userSortInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userSortInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* userSortInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void userSortInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stUserRankInfoResult

// optional uint32 charID = 1;
inline bool stUserRankInfoResult::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserRankInfoResult::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserRankInfoResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserRankInfoResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserRankInfoResult::charid() const {
  return charid_;
}
inline void stUserRankInfoResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 damage = 2;
inline bool stUserRankInfoResult::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserRankInfoResult::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserRankInfoResult::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserRankInfoResult::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 stUserRankInfoResult::damage() const {
  return damage_;
}
inline void stUserRankInfoResult::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// optional uint32 rank = 3;
inline bool stUserRankInfoResult::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUserRankInfoResult::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUserRankInfoResult::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUserRankInfoResult::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 stUserRankInfoResult::rank() const {
  return rank_;
}
inline void stUserRankInfoResult::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 endTime = 4;
inline bool stUserRankInfoResult::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUserRankInfoResult::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUserRankInfoResult::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUserRankInfoResult::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 stUserRankInfoResult::endtime() const {
  return endtime_;
}
inline void stUserRankInfoResult::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
}

// repeated .Global.userSortInfo info = 5;
inline int stUserRankInfoResult::info_size() const {
  return info_.size();
}
inline void stUserRankInfoResult::clear_info() {
  info_.Clear();
}
inline const ::Global::userSortInfo& stUserRankInfoResult::info(int index) const {
  return info_.Get(index);
}
inline ::Global::userSortInfo* stUserRankInfoResult::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::Global::userSortInfo* stUserRankInfoResult::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::userSortInfo >&
stUserRankInfoResult::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::userSortInfo >*
stUserRankInfoResult::mutable_info() {
  return &info_;
}

// optional uint32 levelID = 6;
inline bool stUserRankInfoResult::has_levelid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stUserRankInfoResult::set_has_levelid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stUserRankInfoResult::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stUserRankInfoResult::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stUserRankInfoResult::levelid() const {
  return levelid_;
}
inline void stUserRankInfoResult::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stEmeraldDreamCopymapFail

// repeated .Global.stUserDamagePair damageInfo = 1;
inline int stEmeraldDreamCopymapFail::damageinfo_size() const {
  return damageinfo_.size();
}
inline void stEmeraldDreamCopymapFail::clear_damageinfo() {
  damageinfo_.Clear();
}
inline const ::Global::stUserDamagePair& stEmeraldDreamCopymapFail::damageinfo(int index) const {
  return damageinfo_.Get(index);
}
inline ::Global::stUserDamagePair* stEmeraldDreamCopymapFail::mutable_damageinfo(int index) {
  return damageinfo_.Mutable(index);
}
inline ::Global::stUserDamagePair* stEmeraldDreamCopymapFail::add_damageinfo() {
  return damageinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >&
stEmeraldDreamCopymapFail::damageinfo() const {
  return damageinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >*
stEmeraldDreamCopymapFail::mutable_damageinfo() {
  return &damageinfo_;
}

// optional uint32 bossHP = 2;
inline bool stEmeraldDreamCopymapFail::has_bosshp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEmeraldDreamCopymapFail::set_has_bosshp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEmeraldDreamCopymapFail::clear_has_bosshp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEmeraldDreamCopymapFail::clear_bosshp() {
  bosshp_ = 0u;
  clear_has_bosshp();
}
inline ::google::protobuf::uint32 stEmeraldDreamCopymapFail::bosshp() const {
  return bosshp_;
}
inline void stEmeraldDreamCopymapFail::set_bosshp(::google::protobuf::uint32 value) {
  set_has_bosshp();
  bosshp_ = value;
}

// -------------------------------------------------------------------

// stKillEmeraldDreamBoss

// repeated .Global.stUserDamagePair damageInfo = 1;
inline int stKillEmeraldDreamBoss::damageinfo_size() const {
  return damageinfo_.size();
}
inline void stKillEmeraldDreamBoss::clear_damageinfo() {
  damageinfo_.Clear();
}
inline const ::Global::stUserDamagePair& stKillEmeraldDreamBoss::damageinfo(int index) const {
  return damageinfo_.Get(index);
}
inline ::Global::stUserDamagePair* stKillEmeraldDreamBoss::mutable_damageinfo(int index) {
  return damageinfo_.Mutable(index);
}
inline ::Global::stUserDamagePair* stKillEmeraldDreamBoss::add_damageinfo() {
  return damageinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >&
stKillEmeraldDreamBoss::damageinfo() const {
  return damageinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stUserDamagePair >*
stKillEmeraldDreamBoss::mutable_damageinfo() {
  return &damageinfo_;
}

// optional uint32 bossID = 2;
inline bool stKillEmeraldDreamBoss::has_bossid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stKillEmeraldDreamBoss::set_has_bossid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stKillEmeraldDreamBoss::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stKillEmeraldDreamBoss::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 stKillEmeraldDreamBoss::bossid() const {
  return bossid_;
}
inline void stKillEmeraldDreamBoss::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
}

// -------------------------------------------------------------------

// strRemoveNum

// optional uint32 charID = 1;
inline bool strRemoveNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void strRemoveNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void strRemoveNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void strRemoveNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 strRemoveNum::charid() const {
  return charid_;
}
inline void strRemoveNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stCopyMapInfo

// optional uint32 charID = 1;
inline bool stCopyMapInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCopyMapInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCopyMapInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCopyMapInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCopyMapInfo::charid() const {
  return charid_;
}
inline void stCopyMapInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stCopyMapInfoResult

// optional uint32 charID = 1;
inline bool stCopyMapInfoResult::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCopyMapInfoResult::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCopyMapInfoResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCopyMapInfoResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCopyMapInfoResult::charid() const {
  return charid_;
}
inline void stCopyMapInfoResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 levelId = 2;
inline bool stCopyMapInfoResult::has_levelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCopyMapInfoResult::set_has_levelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCopyMapInfoResult::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCopyMapInfoResult::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stCopyMapInfoResult::levelid() const {
  return levelid_;
}
inline void stCopyMapInfoResult::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stRealTimeTeamMatch

// optional .Global.eRealTimePKType eType = 1;
inline bool stRealTimeTeamMatch::has_etype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRealTimeTeamMatch::set_has_etype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRealTimeTeamMatch::clear_has_etype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRealTimeTeamMatch::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::Global::eRealTimePKType stRealTimeTeamMatch::etype() const {
  return static_cast< ::Global::eRealTimePKType >(etype_);
}
inline void stRealTimeTeamMatch::set_etype(::Global::eRealTimePKType value) {
  assert(::Global::eRealTimePKType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// optional uint32 teamID = 2;
inline bool stRealTimeTeamMatch::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRealTimeTeamMatch::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRealTimeTeamMatch::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRealTimeTeamMatch::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stRealTimeTeamMatch::teamid() const {
  return teamid_;
}
inline void stRealTimeTeamMatch::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// repeated uint32 memberId = 3;
inline int stRealTimeTeamMatch::memberid_size() const {
  return memberid_.size();
}
inline void stRealTimeTeamMatch::clear_memberid() {
  memberid_.Clear();
}
inline ::google::protobuf::uint32 stRealTimeTeamMatch::memberid(int index) const {
  return memberid_.Get(index);
}
inline void stRealTimeTeamMatch::set_memberid(int index, ::google::protobuf::uint32 value) {
  memberid_.Set(index, value);
}
inline void stRealTimeTeamMatch::add_memberid(::google::protobuf::uint32 value) {
  memberid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stRealTimeTeamMatch::memberid() const {
  return memberid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stRealTimeTeamMatch::mutable_memberid() {
  return &memberid_;
}

// -------------------------------------------------------------------

// stOnPubLeaveTeam

// optional uint32 charID = 2;
inline bool stOnPubLeaveTeam::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOnPubLeaveTeam::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOnPubLeaveTeam::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOnPubLeaveTeam::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stOnPubLeaveTeam::charid() const {
  return charid_;
}
inline void stOnPubLeaveTeam::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stDeductMoney

// optional uint32 num = 1;
inline bool stDeductMoney::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDeductMoney::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDeductMoney::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDeductMoney::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stDeductMoney::num() const {
  return num_;
}
inline void stDeductMoney::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 charID = 2;
inline bool stDeductMoney::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDeductMoney::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDeductMoney::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDeductMoney::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDeductMoney::charid() const {
  return charid_;
}
inline void stDeductMoney::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stDeductMoneyResult

// optional .Global.stDeductMoneyResult.eResult result = 1;
inline bool stDeductMoneyResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDeductMoneyResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDeductMoneyResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDeductMoneyResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Global::stDeductMoneyResult_eResult stDeductMoneyResult::result() const {
  return static_cast< ::Global::stDeductMoneyResult_eResult >(result_);
}
inline void stDeductMoneyResult::set_result(::Global::stDeductMoneyResult_eResult value) {
  assert(::Global::stDeductMoneyResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 charID = 2;
inline bool stDeductMoneyResult::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDeductMoneyResult::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDeductMoneyResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDeductMoneyResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDeductMoneyResult::charid() const {
  return charid_;
}
inline void stDeductMoneyResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGiveReward

// optional uint32 charID = 1;
inline bool stGiveReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGiveReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGiveReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGiveReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGiveReward::charid() const {
  return charid_;
}
inline void stGiveReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 boxID = 2;
inline bool stGiveReward::has_boxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGiveReward::set_has_boxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGiveReward::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGiveReward::clear_boxid() {
  boxid_ = 0u;
  clear_has_boxid();
}
inline ::google::protobuf::uint32 stGiveReward::boxid() const {
  return boxid_;
}
inline void stGiveReward::set_boxid(::google::protobuf::uint32 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional uint32 rewardID = 3;
inline bool stGiveReward::has_rewardid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGiveReward::set_has_rewardid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGiveReward::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGiveReward::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 stGiveReward::rewardid() const {
  return rewardid_;
}
inline void stGiveReward::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
}

// optional bool isIntegralReward = 4;
inline bool stGiveReward::has_isintegralreward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGiveReward::set_has_isintegralreward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGiveReward::clear_has_isintegralreward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGiveReward::clear_isintegralreward() {
  isintegralreward_ = false;
  clear_has_isintegralreward();
}
inline bool stGiveReward::isintegralreward() const {
  return isintegralreward_;
}
inline void stGiveReward::set_isintegralreward(bool value) {
  set_has_isintegralreward();
  isintegralreward_ = value;
}

// -------------------------------------------------------------------

// stGiveRewardResult

// optional .Global.stGiveRewardResult.eResult result = 1;
inline bool stGiveRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGiveRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGiveRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGiveRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Global::stGiveRewardResult_eResult stGiveRewardResult::result() const {
  return static_cast< ::Global::stGiveRewardResult_eResult >(result_);
}
inline void stGiveRewardResult::set_result(::Global::stGiveRewardResult_eResult value) {
  assert(::Global::stGiveRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 charID = 2;
inline bool stGiveRewardResult::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGiveRewardResult::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGiveRewardResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGiveRewardResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGiveRewardResult::charid() const {
  return charid_;
}
inline void stGiveRewardResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 rewardID = 3;
inline bool stGiveRewardResult::has_rewardid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGiveRewardResult::set_has_rewardid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGiveRewardResult::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGiveRewardResult::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 stGiveRewardResult::rewardid() const {
  return rewardid_;
}
inline void stGiveRewardResult::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
}

// optional bool isIntegralReward = 4;
inline bool stGiveRewardResult::has_isintegralreward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGiveRewardResult::set_has_isintegralreward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGiveRewardResult::clear_has_isintegralreward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGiveRewardResult::clear_isintegralreward() {
  isintegralreward_ = false;
  clear_has_isintegralreward();
}
inline bool stGiveRewardResult::isintegralreward() const {
  return isintegralreward_;
}
inline void stGiveRewardResult::set_isintegralreward(bool value) {
  set_has_isintegralreward();
  isintegralreward_ = value;
}

// -------------------------------------------------------------------

// stReqCheckMission

// optional uint32 charID = 1;
inline bool stReqCheckMission::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCheckMission::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCheckMission::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCheckMission::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqCheckMission::charid() const {
  return charid_;
}
inline void stReqCheckMission::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 levelID = 2;
inline bool stReqCheckMission::has_levelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqCheckMission::set_has_levelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqCheckMission::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqCheckMission::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stReqCheckMission::levelid() const {
  return levelid_;
}
inline void stReqCheckMission::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stReqCheckTask

// optional uint32 charID = 1;
inline bool stReqCheckTask::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCheckTask::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCheckTask::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCheckTask::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqCheckTask::charid() const {
  return charid_;
}
inline void stReqCheckTask::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 squareType = 2;
inline bool stReqCheckTask::has_squaretype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqCheckTask::set_has_squaretype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqCheckTask::clear_has_squaretype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqCheckTask::clear_squaretype() {
  squaretype_ = 0u;
  clear_has_squaretype();
}
inline ::google::protobuf::uint32 stReqCheckTask::squaretype() const {
  return squaretype_;
}
inline void stReqCheckTask::set_squaretype(::google::protobuf::uint32 value) {
  set_has_squaretype();
  squaretype_ = value;
}

// optional uint32 battleType = 3;
inline bool stReqCheckTask::has_battletype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqCheckTask::set_has_battletype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqCheckTask::clear_has_battletype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqCheckTask::clear_battletype() {
  battletype_ = 0u;
  clear_has_battletype();
}
inline ::google::protobuf::uint32 stReqCheckTask::battletype() const {
  return battletype_;
}
inline void stReqCheckTask::set_battletype(::google::protobuf::uint32 value) {
  set_has_battletype();
  battletype_ = value;
}

// -------------------------------------------------------------------

// stReqEnterTaskLv

// optional uint32 charID = 1;
inline bool stReqEnterTaskLv::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqEnterTaskLv::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqEnterTaskLv::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqEnterTaskLv::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqEnterTaskLv::charid() const {
  return charid_;
}
inline void stReqEnterTaskLv::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 levelID = 2;
inline bool stReqEnterTaskLv::has_levelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqEnterTaskLv::set_has_levelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqEnterTaskLv::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqEnterTaskLv::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stReqEnterTaskLv::levelid() const {
  return levelid_;
}
inline void stReqEnterTaskLv::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stReqDisbandTeam

// optional uint32 charID = 1;
inline bool stReqDisbandTeam::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDisbandTeam::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDisbandTeam::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDisbandTeam::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqDisbandTeam::charid() const {
  return charid_;
}
inline void stReqDisbandTeam::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stReqDrawInviteReward

// optional uint32 charID = 1;
inline bool stReqDrawInviteReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawInviteReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawInviteReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawInviteReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqDrawInviteReward::charid() const {
  return charid_;
}
inline void stReqDrawInviteReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 boxId = 2;
inline bool stReqDrawInviteReward::has_boxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqDrawInviteReward::set_has_boxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqDrawInviteReward::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqDrawInviteReward::clear_boxid() {
  boxid_ = 0u;
  clear_has_boxid();
}
inline ::google::protobuf::uint32 stReqDrawInviteReward::boxid() const {
  return boxid_;
}
inline void stReqDrawInviteReward::set_boxid(::google::protobuf::uint32 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional uint32 id = 3;
inline bool stReqDrawInviteReward::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqDrawInviteReward::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqDrawInviteReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqDrawInviteReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqDrawInviteReward::id() const {
  return id_;
}
inline void stReqDrawInviteReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string account = 4;
inline bool stReqDrawInviteReward::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqDrawInviteReward::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqDrawInviteReward::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqDrawInviteReward::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stReqDrawInviteReward::account() const {
  return *account_;
}
inline void stReqDrawInviteReward::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stReqDrawInviteReward::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stReqDrawInviteReward::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqDrawInviteReward::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stReqDrawInviteReward::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqDrawInviteReward::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqDrawInviteRewardCb

// optional uint32 charID = 1;
inline bool stReqDrawInviteRewardCb::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawInviteRewardCb::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawInviteRewardCb::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawInviteRewardCb::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqDrawInviteRewardCb::charid() const {
  return charid_;
}
inline void stReqDrawInviteRewardCb::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 id = 2;
inline bool stReqDrawInviteRewardCb::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqDrawInviteRewardCb::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqDrawInviteRewardCb::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqDrawInviteRewardCb::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqDrawInviteRewardCb::id() const {
  return id_;
}
inline void stReqDrawInviteRewardCb::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bool res = 3;
inline bool stReqDrawInviteRewardCb::has_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqDrawInviteRewardCb::set_has_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqDrawInviteRewardCb::clear_has_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqDrawInviteRewardCb::clear_res() {
  res_ = false;
  clear_has_res();
}
inline bool stReqDrawInviteRewardCb::res() const {
  return res_;
}
inline void stReqDrawInviteRewardCb::set_res(bool value) {
  set_has_res();
  res_ = value;
}

// optional string account = 4;
inline bool stReqDrawInviteRewardCb::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqDrawInviteRewardCb::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqDrawInviteRewardCb::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqDrawInviteRewardCb::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stReqDrawInviteRewardCb::account() const {
  return *account_;
}
inline void stReqDrawInviteRewardCb::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stReqDrawInviteRewardCb::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stReqDrawInviteRewardCb::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqDrawInviteRewardCb::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stReqDrawInviteRewardCb::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqDrawInviteRewardCb::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqDrawUseInviteReward

// optional uint32 charID = 1;
inline bool stReqDrawUseInviteReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawUseInviteReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawUseInviteReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawUseInviteReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqDrawUseInviteReward::charid() const {
  return charid_;
}
inline void stReqDrawUseInviteReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 boxId = 2;
inline bool stReqDrawUseInviteReward::has_boxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqDrawUseInviteReward::set_has_boxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqDrawUseInviteReward::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqDrawUseInviteReward::clear_boxid() {
  boxid_ = 0u;
  clear_has_boxid();
}
inline ::google::protobuf::uint32 stReqDrawUseInviteReward::boxid() const {
  return boxid_;
}
inline void stReqDrawUseInviteReward::set_boxid(::google::protobuf::uint32 value) {
  set_has_boxid();
  boxid_ = value;
}

// -------------------------------------------------------------------

// stRoleInfo

// optional uint32 charID = 1;
inline bool stRoleInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRoleInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRoleInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRoleInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRoleInfo::charid() const {
  return charid_;
}
inline void stRoleInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 dataSize = 2;
inline bool stRoleInfo::has_datasize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRoleInfo::set_has_datasize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRoleInfo::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRoleInfo::clear_datasize() {
  datasize_ = 0u;
  clear_has_datasize();
}
inline ::google::protobuf::uint32 stRoleInfo::datasize() const {
  return datasize_;
}
inline void stRoleInfo::set_datasize(::google::protobuf::uint32 value) {
  set_has_datasize();
  datasize_ = value;
}

// optional bytes data = 3;
inline bool stRoleInfo::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRoleInfo::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRoleInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRoleInfo::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stRoleInfo::data() const {
  return *data_;
}
inline void stRoleInfo::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRoleInfo::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRoleInfo::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRoleInfo::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stRoleInfo::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRoleInfo::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 normalServerID = 4;
inline bool stRoleInfo::has_normalserverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRoleInfo::set_has_normalserverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRoleInfo::clear_has_normalserverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRoleInfo::clear_normalserverid() {
  normalserverid_ = 0u;
  clear_has_normalserverid();
}
inline ::google::protobuf::uint32 stRoleInfo::normalserverid() const {
  return normalserverid_;
}
inline void stRoleInfo::set_normalserverid(::google::protobuf::uint32 value) {
  set_has_normalserverid();
  normalserverid_ = value;
}

// -------------------------------------------------------------------

// stHeroLeagueEnterCopyMap

// repeated uint32 memberIDs = 1;
inline int stHeroLeagueEnterCopyMap::memberids_size() const {
  return memberids_.size();
}
inline void stHeroLeagueEnterCopyMap::clear_memberids() {
  memberids_.Clear();
}
inline ::google::protobuf::uint32 stHeroLeagueEnterCopyMap::memberids(int index) const {
  return memberids_.Get(index);
}
inline void stHeroLeagueEnterCopyMap::set_memberids(int index, ::google::protobuf::uint32 value) {
  memberids_.Set(index, value);
}
inline void stHeroLeagueEnterCopyMap::add_memberids(::google::protobuf::uint32 value) {
  memberids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stHeroLeagueEnterCopyMap::memberids() const {
  return memberids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stHeroLeagueEnterCopyMap::mutable_memberids() {
  return &memberids_;
}

// -------------------------------------------------------------------

// stHeroLeaguePkWithRobot

// optional uint32 charID = 1;
inline bool stHeroLeaguePkWithRobot::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHeroLeaguePkWithRobot::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHeroLeaguePkWithRobot::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHeroLeaguePkWithRobot::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stHeroLeaguePkWithRobot::charid() const {
  return charid_;
}
inline void stHeroLeaguePkWithRobot::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 robotGroup = 2;
inline bool stHeroLeaguePkWithRobot::has_robotgroup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHeroLeaguePkWithRobot::set_has_robotgroup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHeroLeaguePkWithRobot::clear_has_robotgroup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHeroLeaguePkWithRobot::clear_robotgroup() {
  robotgroup_ = 0u;
  clear_has_robotgroup();
}
inline ::google::protobuf::uint32 stHeroLeaguePkWithRobot::robotgroup() const {
  return robotgroup_;
}
inline void stHeroLeaguePkWithRobot::set_robotgroup(::google::protobuf::uint32 value) {
  set_has_robotgroup();
  robotgroup_ = value;
}

// -------------------------------------------------------------------

// stReqHeroLeagueCheck

// optional .Global.stReqHeroLeagueCheck.eResult result = 1;
inline bool stReqHeroLeagueCheck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqHeroLeagueCheck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqHeroLeagueCheck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqHeroLeagueCheck::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Global::stReqHeroLeagueCheck_eResult stReqHeroLeagueCheck::result() const {
  return static_cast< ::Global::stReqHeroLeagueCheck_eResult >(result_);
}
inline void stReqHeroLeagueCheck::set_result(::Global::stReqHeroLeagueCheck_eResult value) {
  assert(::Global::stReqHeroLeagueCheck_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 charID = 2;
inline bool stReqHeroLeagueCheck::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqHeroLeagueCheck::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqHeroLeagueCheck::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqHeroLeagueCheck::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqHeroLeagueCheck::charid() const {
  return charid_;
}
inline void stReqHeroLeagueCheck::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stHeroLeagueMatch

// optional uint32 charID = 1;
inline bool stHeroLeagueMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHeroLeagueMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHeroLeagueMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHeroLeagueMatch::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stHeroLeagueMatch::charid() const {
  return charid_;
}
inline void stHeroLeagueMatch::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stPubRoleInfo

// optional uint32 charID = 1;
inline bool stPubRoleInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPubRoleInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPubRoleInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPubRoleInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stPubRoleInfo::charid() const {
  return charid_;
}
inline void stPubRoleInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 pubCharID = 2;
inline bool stPubRoleInfo::has_pubcharid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stPubRoleInfo::set_has_pubcharid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stPubRoleInfo::clear_has_pubcharid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stPubRoleInfo::clear_pubcharid() {
  pubcharid_ = 0u;
  clear_has_pubcharid();
}
inline ::google::protobuf::uint32 stPubRoleInfo::pubcharid() const {
  return pubcharid_;
}
inline void stPubRoleInfo::set_pubcharid(::google::protobuf::uint32 value) {
  set_has_pubcharid();
  pubcharid_ = value;
}

// optional uint32 areaCode = 3;
inline bool stPubRoleInfo::has_areacode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stPubRoleInfo::set_has_areacode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stPubRoleInfo::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stPubRoleInfo::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stPubRoleInfo::areacode() const {
  return areacode_;
}
inline void stPubRoleInfo::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional string name = 4;
inline bool stPubRoleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stPubRoleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stPubRoleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stPubRoleInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stPubRoleInfo::name() const {
  return *name_;
}
inline void stPubRoleInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stPubRoleInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stPubRoleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPubRoleInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stPubRoleInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPubRoleInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 5;
inline bool stPubRoleInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stPubRoleInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stPubRoleInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stPubRoleInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stPubRoleInfo::level() const {
  return level_;
}
inline void stPubRoleInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 vipLv = 6;
inline bool stPubRoleInfo::has_viplv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stPubRoleInfo::set_has_viplv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stPubRoleInfo::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stPubRoleInfo::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stPubRoleInfo::viplv() const {
  return viplv_;
}
inline void stPubRoleInfo::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 job = 7;
inline bool stPubRoleInfo::has_job() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stPubRoleInfo::set_has_job() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stPubRoleInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stPubRoleInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stPubRoleInfo::job() const {
  return job_;
}
inline void stPubRoleInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 8;
inline bool stPubRoleInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stPubRoleInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stPubRoleInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stPubRoleInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stPubRoleInfo::sex() const {
  return sex_;
}
inline void stPubRoleInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 battlePower = 9;
inline bool stPubRoleInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stPubRoleInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stPubRoleInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stPubRoleInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stPubRoleInfo::battlepower() const {
  return battlepower_;
}
inline void stPubRoleInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 pubServerIndex = 10;
inline bool stPubRoleInfo::has_pubserverindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stPubRoleInfo::set_has_pubserverindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stPubRoleInfo::clear_has_pubserverindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stPubRoleInfo::clear_pubserverindex() {
  pubserverindex_ = 0u;
  clear_has_pubserverindex();
}
inline ::google::protobuf::uint32 stPubRoleInfo::pubserverindex() const {
  return pubserverindex_;
}
inline void stPubRoleInfo::set_pubserverindex(::google::protobuf::uint32 value) {
  set_has_pubserverindex();
  pubserverindex_ = value;
}

// optional uint32 score = 11;
inline bool stPubRoleInfo::has_score() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stPubRoleInfo::set_has_score() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stPubRoleInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stPubRoleInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stPubRoleInfo::score() const {
  return score_;
}
inline void stPubRoleInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional bool winOrLoss = 12;
inline bool stPubRoleInfo::has_winorloss() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stPubRoleInfo::set_has_winorloss() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stPubRoleInfo::clear_has_winorloss() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stPubRoleInfo::clear_winorloss() {
  winorloss_ = false;
  clear_has_winorloss();
}
inline bool stPubRoleInfo::winorloss() const {
  return winorloss_;
}
inline void stPubRoleInfo::set_winorloss(bool value) {
  set_has_winorloss();
  winorloss_ = value;
}

// optional uint32 photoID = 13;
inline bool stPubRoleInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stPubRoleInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stPubRoleInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stPubRoleInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stPubRoleInfo::photoid() const {
  return photoid_;
}
inline void stPubRoleInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stHeroLeagueResult

// optional .Global.stPubRoleInfo user1 = 1;
inline bool stHeroLeagueResult::has_user1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHeroLeagueResult::set_has_user1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHeroLeagueResult::clear_has_user1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHeroLeagueResult::clear_user1() {
  if (user1_ != NULL) user1_->::Global::stPubRoleInfo::Clear();
  clear_has_user1();
}
inline const ::Global::stPubRoleInfo& stHeroLeagueResult::user1() const {
  return user1_ != NULL ? *user1_ : *default_instance_->user1_;
}
inline ::Global::stPubRoleInfo* stHeroLeagueResult::mutable_user1() {
  set_has_user1();
  if (user1_ == NULL) user1_ = new ::Global::stPubRoleInfo;
  return user1_;
}
inline ::Global::stPubRoleInfo* stHeroLeagueResult::release_user1() {
  clear_has_user1();
  ::Global::stPubRoleInfo* temp = user1_;
  user1_ = NULL;
  return temp;
}
inline void stHeroLeagueResult::set_allocated_user1(::Global::stPubRoleInfo* user1) {
  delete user1_;
  user1_ = user1;
  if (user1) {
    set_has_user1();
  } else {
    clear_has_user1();
  }
}

// optional .Global.stPubRoleInfo user2 = 2;
inline bool stHeroLeagueResult::has_user2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHeroLeagueResult::set_has_user2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHeroLeagueResult::clear_has_user2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHeroLeagueResult::clear_user2() {
  if (user2_ != NULL) user2_->::Global::stPubRoleInfo::Clear();
  clear_has_user2();
}
inline const ::Global::stPubRoleInfo& stHeroLeagueResult::user2() const {
  return user2_ != NULL ? *user2_ : *default_instance_->user2_;
}
inline ::Global::stPubRoleInfo* stHeroLeagueResult::mutable_user2() {
  set_has_user2();
  if (user2_ == NULL) user2_ = new ::Global::stPubRoleInfo;
  return user2_;
}
inline ::Global::stPubRoleInfo* stHeroLeagueResult::release_user2() {
  clear_has_user2();
  ::Global::stPubRoleInfo* temp = user2_;
  user2_ = NULL;
  return temp;
}
inline void stHeroLeagueResult::set_allocated_user2(::Global::stPubRoleInfo* user2) {
  delete user2_;
  user2_ = user2;
  if (user2) {
    set_has_user2();
  } else {
    clear_has_user2();
  }
}

// -------------------------------------------------------------------

// stSynRoleList

// optional uint32 tag = 1;
inline bool stSynRoleList::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynRoleList::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynRoleList::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynRoleList::clear_tag() {
  tag_ = 0u;
  clear_has_tag();
}
inline ::google::protobuf::uint32 stSynRoleList::tag() const {
  return tag_;
}
inline void stSynRoleList::set_tag(::google::protobuf::uint32 value) {
  set_has_tag();
  tag_ = value;
}

// -------------------------------------------------------------------

// stTeam

// optional .Global.stPubRoleInfo user1 = 1;
inline bool stTeam::has_user1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTeam::set_has_user1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTeam::clear_has_user1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTeam::clear_user1() {
  if (user1_ != NULL) user1_->::Global::stPubRoleInfo::Clear();
  clear_has_user1();
}
inline const ::Global::stPubRoleInfo& stTeam::user1() const {
  return user1_ != NULL ? *user1_ : *default_instance_->user1_;
}
inline ::Global::stPubRoleInfo* stTeam::mutable_user1() {
  set_has_user1();
  if (user1_ == NULL) user1_ = new ::Global::stPubRoleInfo;
  return user1_;
}
inline ::Global::stPubRoleInfo* stTeam::release_user1() {
  clear_has_user1();
  ::Global::stPubRoleInfo* temp = user1_;
  user1_ = NULL;
  return temp;
}
inline void stTeam::set_allocated_user1(::Global::stPubRoleInfo* user1) {
  delete user1_;
  user1_ = user1;
  if (user1) {
    set_has_user1();
  } else {
    clear_has_user1();
  }
}

// optional .Global.stPubRoleInfo user2 = 2;
inline bool stTeam::has_user2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stTeam::set_has_user2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stTeam::clear_has_user2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stTeam::clear_user2() {
  if (user2_ != NULL) user2_->::Global::stPubRoleInfo::Clear();
  clear_has_user2();
}
inline const ::Global::stPubRoleInfo& stTeam::user2() const {
  return user2_ != NULL ? *user2_ : *default_instance_->user2_;
}
inline ::Global::stPubRoleInfo* stTeam::mutable_user2() {
  set_has_user2();
  if (user2_ == NULL) user2_ = new ::Global::stPubRoleInfo;
  return user2_;
}
inline ::Global::stPubRoleInfo* stTeam::release_user2() {
  clear_has_user2();
  ::Global::stPubRoleInfo* temp = user2_;
  user2_ = NULL;
  return temp;
}
inline void stTeam::set_allocated_user2(::Global::stPubRoleInfo* user2) {
  delete user2_;
  user2_ = user2;
  if (user2) {
    set_has_user2();
  } else {
    clear_has_user2();
  }
}

// -------------------------------------------------------------------

// stSynRoleListResult

// repeated .Global.stTeam team = 1;
inline int stSynRoleListResult::team_size() const {
  return team_.size();
}
inline void stSynRoleListResult::clear_team() {
  team_.Clear();
}
inline const ::Global::stTeam& stSynRoleListResult::team(int index) const {
  return team_.Get(index);
}
inline ::Global::stTeam* stSynRoleListResult::mutable_team(int index) {
  return team_.Mutable(index);
}
inline ::Global::stTeam* stSynRoleListResult::add_team() {
  return team_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stTeam >&
stSynRoleListResult::team() const {
  return team_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stTeam >*
stSynRoleListResult::mutable_team() {
  return &team_;
}

// repeated .Global.stPubRoleInfo charIDS = 2;
inline int stSynRoleListResult::charids_size() const {
  return charids_.size();
}
inline void stSynRoleListResult::clear_charids() {
  charids_.Clear();
}
inline const ::Global::stPubRoleInfo& stSynRoleListResult::charids(int index) const {
  return charids_.Get(index);
}
inline ::Global::stPubRoleInfo* stSynRoleListResult::mutable_charids(int index) {
  return charids_.Mutable(index);
}
inline ::Global::stPubRoleInfo* stSynRoleListResult::add_charids() {
  return charids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stPubRoleInfo >&
stSynRoleListResult::charids() const {
  return charids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stPubRoleInfo >*
stSynRoleListResult::mutable_charids() {
  return &charids_;
}

// optional bool isFinal = 3;
inline bool stSynRoleListResult::has_isfinal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynRoleListResult::set_has_isfinal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynRoleListResult::clear_has_isfinal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynRoleListResult::clear_isfinal() {
  isfinal_ = false;
  clear_has_isfinal();
}
inline bool stSynRoleListResult::isfinal() const {
  return isfinal_;
}
inline void stSynRoleListResult::set_isfinal(bool value) {
  set_has_isfinal();
  isfinal_ = value;
}

// -------------------------------------------------------------------

// stSynChampionInfo

// optional uint32 charID = 1;
inline bool stSynChampionInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynChampionInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynChampionInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynChampionInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::charid() const {
  return charid_;
}
inline void stSynChampionInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynChampionInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynChampionInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynChampionInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynChampionInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynChampionInfo::name() const {
  return *name_;
}
inline void stSynChampionInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynChampionInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynChampionInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynChampionInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynChampionInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynChampionInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 areaCode = 3;
inline bool stSynChampionInfo::has_areacode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynChampionInfo::set_has_areacode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynChampionInfo::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynChampionInfo::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stSynChampionInfo::areacode() const {
  return areacode_;
}
inline void stSynChampionInfo::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional uint32 level = 4;
inline bool stSynChampionInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynChampionInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynChampionInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynChampionInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynChampionInfo::level() const {
  return level_;
}
inline void stSynChampionInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 5;
inline bool stSynChampionInfo::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynChampionInfo::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynChampionInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynChampionInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynChampionInfo::job() const {
  return job_;
}
inline void stSynChampionInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 6;
inline bool stSynChampionInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynChampionInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynChampionInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynChampionInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynChampionInfo::sex() const {
  return sex_;
}
inline void stSynChampionInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional bool leader = 7;
inline bool stSynChampionInfo::has_leader() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynChampionInfo::set_has_leader() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynChampionInfo::clear_has_leader() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynChampionInfo::clear_leader() {
  leader_ = false;
  clear_has_leader();
}
inline bool stSynChampionInfo::leader() const {
  return leader_;
}
inline void stSynChampionInfo::set_leader(bool value) {
  set_has_leader();
  leader_ = value;
}

// optional uint32 battlePower = 8;
inline bool stSynChampionInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynChampionInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynChampionInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynChampionInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynChampionInfo::battlepower() const {
  return battlepower_;
}
inline void stSynChampionInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 pos = 9;
inline bool stSynChampionInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSynChampionInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSynChampionInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSynChampionInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stSynChampionInfo::pos() const {
  return pos_;
}
inline void stSynChampionInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint32 headID = 10;
inline bool stSynChampionInfo::has_headid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stSynChampionInfo::set_has_headid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stSynChampionInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stSynChampionInfo::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::headid() const {
  return headid_;
}
inline void stSynChampionInfo::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 11;
inline bool stSynChampionInfo::has_bodyid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stSynChampionInfo::set_has_bodyid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stSynChampionInfo::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stSynChampionInfo::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::bodyid() const {
  return bodyid_;
}
inline void stSynChampionInfo::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 12;
inline bool stSynChampionInfo::has_weaponid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stSynChampionInfo::set_has_weaponid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stSynChampionInfo::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stSynChampionInfo::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::weaponid() const {
  return weaponid_;
}
inline void stSynChampionInfo::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 13;
inline bool stSynChampionInfo::has_cloackid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stSynChampionInfo::set_has_cloackid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stSynChampionInfo::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stSynChampionInfo::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::cloackid() const {
  return cloackid_;
}
inline void stSynChampionInfo::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 14;
inline bool stSynChampionInfo::has_wingid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stSynChampionInfo::set_has_wingid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stSynChampionInfo::clear_has_wingid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stSynChampionInfo::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::wingid() const {
  return wingid_;
}
inline void stSynChampionInfo::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 15;
inline bool stSynChampionInfo::has_shoeid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stSynChampionInfo::set_has_shoeid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stSynChampionInfo::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stSynChampionInfo::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::shoeid() const {
  return shoeid_;
}
inline void stSynChampionInfo::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 16;
inline bool stSynChampionInfo::has_fashionhair() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionhair() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stSynChampionInfo::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stSynChampionInfo::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionhair() const {
  return fashionhair_;
}
inline void stSynChampionInfo::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 17;
inline bool stSynChampionInfo::has_fashionface() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionface() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stSynChampionInfo::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stSynChampionInfo::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionface() const {
  return fashionface_;
}
inline void stSynChampionInfo::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 18;
inline bool stSynChampionInfo::has_fashionbody() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionbody() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stSynChampionInfo::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stSynChampionInfo::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionbody() const {
  return fashionbody_;
}
inline void stSynChampionInfo::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 19;
inline bool stSynChampionInfo::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stSynChampionInfo::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stSynChampionInfo::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionweapon() const {
  return fashionweapon_;
}
inline void stSynChampionInfo::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 20;
inline bool stSynChampionInfo::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stSynChampionInfo::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stSynChampionInfo::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionshoe() const {
  return fashionshoe_;
}
inline void stSynChampionInfo::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 21;
inline bool stSynChampionInfo::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stSynChampionInfo::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stSynChampionInfo::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stSynChampionInfo::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashiondecoration() const {
  return fashiondecoration_;
}
inline void stSynChampionInfo::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 effectID = 22;
inline bool stSynChampionInfo::has_effectid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void stSynChampionInfo::set_has_effectid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void stSynChampionInfo::clear_has_effectid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void stSynChampionInfo::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::effectid() const {
  return effectid_;
}
inline void stSynChampionInfo::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 23;
inline bool stSynChampionInfo::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void stSynChampionInfo::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x00400000u;
}
inline void stSynChampionInfo::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void stSynChampionInfo::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 stSynChampionInfo::wingbreaklv() const {
  return wingbreaklv_;
}
inline void stSynChampionInfo::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// optional uint32 photoID = 24;
inline bool stSynChampionInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void stSynChampionInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void stSynChampionInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void stSynChampionInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::photoid() const {
  return photoid_;
}
inline void stSynChampionInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stReqSynChampionInfo

// optional .Global.stSynChampionInfo info = 1;
inline bool stReqSynChampionInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSynChampionInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSynChampionInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSynChampionInfo::clear_info() {
  if (info_ != NULL) info_->::Global::stSynChampionInfo::Clear();
  clear_has_info();
}
inline const ::Global::stSynChampionInfo& stReqSynChampionInfo::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Global::stSynChampionInfo* stReqSynChampionInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Global::stSynChampionInfo;
  return info_;
}
inline ::Global::stSynChampionInfo* stReqSynChampionInfo::release_info() {
  clear_has_info();
  ::Global::stSynChampionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void stReqSynChampionInfo::set_allocated_info(::Global::stSynChampionInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// stReqWorskip

// optional uint32 charID = 1;
inline bool stReqWorskip::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqWorskip::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqWorskip::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqWorskip::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqWorskip::charid() const {
  return charid_;
}
inline void stReqWorskip::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stWorskipResult

// optional .Global.stWorskipResult.eResult result = 1;
inline bool stWorskipResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stWorskipResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stWorskipResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stWorskipResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Global::stWorskipResult_eResult stWorskipResult::result() const {
  return static_cast< ::Global::stWorskipResult_eResult >(result_);
}
inline void stWorskipResult::set_result(::Global::stWorskipResult_eResult value) {
  assert(::Global::stWorskipResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 charID = 2;
inline bool stWorskipResult::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stWorskipResult::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stWorskipResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stWorskipResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stWorskipResult::charid() const {
  return charid_;
}
inline void stWorskipResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional bool isSameAreaCode = 3;
inline bool stWorskipResult::has_issameareacode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stWorskipResult::set_has_issameareacode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stWorskipResult::clear_has_issameareacode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stWorskipResult::clear_issameareacode() {
  issameareacode_ = false;
  clear_has_issameareacode();
}
inline bool stWorskipResult::issameareacode() const {
  return issameareacode_;
}
inline void stWorskipResult::set_issameareacode(bool value) {
  set_has_issameareacode();
  issameareacode_ = value;
}

// -------------------------------------------------------------------

// stReqRedPoint

// optional uint32 charID = 1;
inline bool stReqRedPoint::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRedPoint::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRedPoint::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRedPoint::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRedPoint::charid() const {
  return charid_;
}
inline void stReqRedPoint::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 pubCharID = 2;
inline bool stReqRedPoint::has_pubcharid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRedPoint::set_has_pubcharid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRedPoint::clear_has_pubcharid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRedPoint::clear_pubcharid() {
  pubcharid_ = 0u;
  clear_has_pubcharid();
}
inline ::google::protobuf::uint32 stReqRedPoint::pubcharid() const {
  return pubcharid_;
}
inline void stReqRedPoint::set_pubcharid(::google::protobuf::uint32 value) {
  set_has_pubcharid();
  pubcharid_ = value;
}

// -------------------------------------------------------------------

// stRedPointResult

// optional bool isQualified = 1;
inline bool stRedPointResult::has_isqualified() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRedPointResult::set_has_isqualified() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRedPointResult::clear_has_isqualified() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRedPointResult::clear_isqualified() {
  isqualified_ = false;
  clear_has_isqualified();
}
inline bool stRedPointResult::isqualified() const {
  return isqualified_;
}
inline void stRedPointResult::set_isqualified(bool value) {
  set_has_isqualified();
  isqualified_ = value;
}

// optional bool canWorship = 2;
inline bool stRedPointResult::has_canworship() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRedPointResult::set_has_canworship() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRedPointResult::clear_has_canworship() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRedPointResult::clear_canworship() {
  canworship_ = false;
  clear_has_canworship();
}
inline bool stRedPointResult::canworship() const {
  return canworship_;
}
inline void stRedPointResult::set_canworship(bool value) {
  set_has_canworship();
  canworship_ = value;
}

// optional uint32 charID = 3;
inline bool stRedPointResult::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRedPointResult::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRedPointResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRedPointResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRedPointResult::charid() const {
  return charid_;
}
inline void stRedPointResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stInterceptResultToGlobal

// optional uint32 charID = 1;
inline bool stInterceptResultToGlobal::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInterceptResultToGlobal::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInterceptResultToGlobal::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInterceptResultToGlobal::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stInterceptResultToGlobal::charid() const {
  return charid_;
}
inline void stInterceptResultToGlobal::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional bool win = 2;
inline bool stInterceptResultToGlobal::has_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stInterceptResultToGlobal::set_has_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stInterceptResultToGlobal::clear_has_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stInterceptResultToGlobal::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool stInterceptResultToGlobal::win() const {
  return win_;
}
inline void stInterceptResultToGlobal::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// -------------------------------------------------------------------

// stSynMemberInfo

// optional uint32 charID = 1;
inline bool stSynMemberInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynMemberInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynMemberInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynMemberInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::charid() const {
  return charid_;
}
inline void stSynMemberInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynMemberInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynMemberInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynMemberInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynMemberInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynMemberInfo::name() const {
  return *name_;
}
inline void stSynMemberInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynMemberInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynMemberInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynMemberInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynMemberInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynMemberInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool stSynMemberInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynMemberInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynMemberInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynMemberInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynMemberInfo::level() const {
  return level_;
}
inline void stSynMemberInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 4;
inline bool stSynMemberInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynMemberInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynMemberInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynMemberInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynMemberInfo::job() const {
  return job_;
}
inline void stSynMemberInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stSynMemberInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynMemberInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynMemberInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynMemberInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynMemberInfo::sex() const {
  return sex_;
}
inline void stSynMemberInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional bool leader = 6;
inline bool stSynMemberInfo::has_leader() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynMemberInfo::set_has_leader() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynMemberInfo::clear_has_leader() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynMemberInfo::clear_leader() {
  leader_ = false;
  clear_has_leader();
}
inline bool stSynMemberInfo::leader() const {
  return leader_;
}
inline void stSynMemberInfo::set_leader(bool value) {
  set_has_leader();
  leader_ = value;
}

// optional uint32 battlePower = 7;
inline bool stSynMemberInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynMemberInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynMemberInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynMemberInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynMemberInfo::battlepower() const {
  return battlepower_;
}
inline void stSynMemberInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 pos = 8;
inline bool stSynMemberInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynMemberInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynMemberInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynMemberInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stSynMemberInfo::pos() const {
  return pos_;
}
inline void stSynMemberInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint32 headID = 9;
inline bool stSynMemberInfo::has_headid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSynMemberInfo::set_has_headid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSynMemberInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSynMemberInfo::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::headid() const {
  return headid_;
}
inline void stSynMemberInfo::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 10;
inline bool stSynMemberInfo::has_bodyid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stSynMemberInfo::set_has_bodyid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stSynMemberInfo::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stSynMemberInfo::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::bodyid() const {
  return bodyid_;
}
inline void stSynMemberInfo::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 11;
inline bool stSynMemberInfo::has_weaponid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stSynMemberInfo::set_has_weaponid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stSynMemberInfo::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stSynMemberInfo::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::weaponid() const {
  return weaponid_;
}
inline void stSynMemberInfo::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 12;
inline bool stSynMemberInfo::has_cloackid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stSynMemberInfo::set_has_cloackid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stSynMemberInfo::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stSynMemberInfo::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::cloackid() const {
  return cloackid_;
}
inline void stSynMemberInfo::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 13;
inline bool stSynMemberInfo::has_wingid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stSynMemberInfo::set_has_wingid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stSynMemberInfo::clear_has_wingid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stSynMemberInfo::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::wingid() const {
  return wingid_;
}
inline void stSynMemberInfo::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 14;
inline bool stSynMemberInfo::has_shoeid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stSynMemberInfo::set_has_shoeid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stSynMemberInfo::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stSynMemberInfo::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::shoeid() const {
  return shoeid_;
}
inline void stSynMemberInfo::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 15;
inline bool stSynMemberInfo::has_fashionhair() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stSynMemberInfo::set_has_fashionhair() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stSynMemberInfo::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stSynMemberInfo::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashionhair() const {
  return fashionhair_;
}
inline void stSynMemberInfo::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 16;
inline bool stSynMemberInfo::has_fashionface() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stSynMemberInfo::set_has_fashionface() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stSynMemberInfo::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stSynMemberInfo::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashionface() const {
  return fashionface_;
}
inline void stSynMemberInfo::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 17;
inline bool stSynMemberInfo::has_fashionbody() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stSynMemberInfo::set_has_fashionbody() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stSynMemberInfo::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stSynMemberInfo::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashionbody() const {
  return fashionbody_;
}
inline void stSynMemberInfo::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 18;
inline bool stSynMemberInfo::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stSynMemberInfo::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stSynMemberInfo::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stSynMemberInfo::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashionweapon() const {
  return fashionweapon_;
}
inline void stSynMemberInfo::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 19;
inline bool stSynMemberInfo::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stSynMemberInfo::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stSynMemberInfo::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stSynMemberInfo::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashionshoe() const {
  return fashionshoe_;
}
inline void stSynMemberInfo::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 20;
inline bool stSynMemberInfo::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stSynMemberInfo::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stSynMemberInfo::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stSynMemberInfo::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashiondecoration() const {
  return fashiondecoration_;
}
inline void stSynMemberInfo::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 effectID = 21;
inline bool stSynMemberInfo::has_effectid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stSynMemberInfo::set_has_effectid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stSynMemberInfo::clear_has_effectid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stSynMemberInfo::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::effectid() const {
  return effectid_;
}
inline void stSynMemberInfo::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 22;
inline bool stSynMemberInfo::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void stSynMemberInfo::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x00200000u;
}
inline void stSynMemberInfo::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void stSynMemberInfo::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 stSynMemberInfo::wingbreaklv() const {
  return wingbreaklv_;
}
inline void stSynMemberInfo::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// optional uint32 fashionWingID = 23;
inline bool stSynMemberInfo::has_fashionwingid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void stSynMemberInfo::set_has_fashionwingid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void stSynMemberInfo::clear_has_fashionwingid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void stSynMemberInfo::clear_fashionwingid() {
  fashionwingid_ = 0u;
  clear_has_fashionwingid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashionwingid() const {
  return fashionwingid_;
}
inline void stSynMemberInfo::set_fashionwingid(::google::protobuf::uint32 value) {
  set_has_fashionwingid();
  fashionwingid_ = value;
}

// -------------------------------------------------------------------

// stRetRoomInfo

// optional uint32 charID = 1;
inline bool stRetRoomInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRoomInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRoomInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRoomInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRetRoomInfo::charid() const {
  return charid_;
}
inline void stRetRoomInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 copyMapID = 2;
inline bool stRetRoomInfo::has_copymapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetRoomInfo::set_has_copymapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetRoomInfo::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetRoomInfo::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stRetRoomInfo::copymapid() const {
  return copymapid_;
}
inline void stRetRoomInfo::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// repeated .Global.stSynMemberInfo members = 3;
inline int stRetRoomInfo::members_size() const {
  return members_.size();
}
inline void stRetRoomInfo::clear_members() {
  members_.Clear();
}
inline const ::Global::stSynMemberInfo& stRetRoomInfo::members(int index) const {
  return members_.Get(index);
}
inline ::Global::stSynMemberInfo* stRetRoomInfo::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::Global::stSynMemberInfo* stRetRoomInfo::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stSynMemberInfo >&
stRetRoomInfo::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stSynMemberInfo >*
stRetRoomInfo::mutable_members() {
  return &members_;
}

// optional uint32 teamID = 4;
inline bool stRetRoomInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetRoomInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetRoomInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetRoomInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stRetRoomInfo::teamid() const {
  return teamid_;
}
inline void stRetRoomInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// stRetAddTeamMember

// repeated uint32 charID = 1;
inline int stRetAddTeamMember::charid_size() const {
  return charid_.size();
}
inline void stRetAddTeamMember::clear_charid() {
  charid_.Clear();
}
inline ::google::protobuf::uint32 stRetAddTeamMember::charid(int index) const {
  return charid_.Get(index);
}
inline void stRetAddTeamMember::set_charid(int index, ::google::protobuf::uint32 value) {
  charid_.Set(index, value);
}
inline void stRetAddTeamMember::add_charid(::google::protobuf::uint32 value) {
  charid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stRetAddTeamMember::charid() const {
  return charid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stRetAddTeamMember::mutable_charid() {
  return &charid_;
}

// optional uint32 exceptID = 2;
inline bool stRetAddTeamMember::has_exceptid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetAddTeamMember::set_has_exceptid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetAddTeamMember::clear_has_exceptid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetAddTeamMember::clear_exceptid() {
  exceptid_ = 0u;
  clear_has_exceptid();
}
inline ::google::protobuf::uint32 stRetAddTeamMember::exceptid() const {
  return exceptid_;
}
inline void stRetAddTeamMember::set_exceptid(::google::protobuf::uint32 value) {
  set_has_exceptid();
  exceptid_ = value;
}

// optional uint32 pos = 3;
inline bool stRetAddTeamMember::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetAddTeamMember::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetAddTeamMember::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetAddTeamMember::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stRetAddTeamMember::pos() const {
  return pos_;
}
inline void stRetAddTeamMember::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional .Global.stSynMemberInfo memberInfo = 4;
inline bool stRetAddTeamMember::has_memberinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetAddTeamMember::set_has_memberinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetAddTeamMember::clear_has_memberinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetAddTeamMember::clear_memberinfo() {
  if (memberinfo_ != NULL) memberinfo_->::Global::stSynMemberInfo::Clear();
  clear_has_memberinfo();
}
inline const ::Global::stSynMemberInfo& stRetAddTeamMember::memberinfo() const {
  return memberinfo_ != NULL ? *memberinfo_ : *default_instance_->memberinfo_;
}
inline ::Global::stSynMemberInfo* stRetAddTeamMember::mutable_memberinfo() {
  set_has_memberinfo();
  if (memberinfo_ == NULL) memberinfo_ = new ::Global::stSynMemberInfo;
  return memberinfo_;
}
inline ::Global::stSynMemberInfo* stRetAddTeamMember::release_memberinfo() {
  clear_has_memberinfo();
  ::Global::stSynMemberInfo* temp = memberinfo_;
  memberinfo_ = NULL;
  return temp;
}
inline void stRetAddTeamMember::set_allocated_memberinfo(::Global::stSynMemberInfo* memberinfo) {
  delete memberinfo_;
  memberinfo_ = memberinfo;
  if (memberinfo) {
    set_has_memberinfo();
  } else {
    clear_has_memberinfo();
  }
}

// -------------------------------------------------------------------

// MarryObjInfo

// optional uint32 charID = 1;
inline bool MarryObjInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryObjInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryObjInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryObjInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 MarryObjInfo::charid() const {
  return charid_;
}
inline void MarryObjInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool MarryObjInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarryObjInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarryObjInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarryObjInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MarryObjInfo::name() const {
  return *name_;
}
inline void MarryObjInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MarryObjInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MarryObjInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarryObjInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MarryObjInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarryObjInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool MarryObjInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarryObjInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarryObjInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarryObjInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 MarryObjInfo::level() const {
  return level_;
}
inline void MarryObjInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 4;
inline bool MarryObjInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarryObjInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarryObjInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarryObjInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 MarryObjInfo::job() const {
  return job_;
}
inline void MarryObjInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool MarryObjInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarryObjInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarryObjInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarryObjInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 MarryObjInfo::sex() const {
  return sex_;
}
inline void MarryObjInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 battlePower = 6;
inline bool MarryObjInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarryObjInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarryObjInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarryObjInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 MarryObjInfo::battlepower() const {
  return battlepower_;
}
inline void MarryObjInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 headID = 7;
inline bool MarryObjInfo::has_headid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarryObjInfo::set_has_headid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarryObjInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarryObjInfo::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 MarryObjInfo::headid() const {
  return headid_;
}
inline void MarryObjInfo::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 8;
inline bool MarryObjInfo::has_bodyid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarryObjInfo::set_has_bodyid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarryObjInfo::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarryObjInfo::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 MarryObjInfo::bodyid() const {
  return bodyid_;
}
inline void MarryObjInfo::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 9;
inline bool MarryObjInfo::has_weaponid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MarryObjInfo::set_has_weaponid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MarryObjInfo::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MarryObjInfo::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 MarryObjInfo::weaponid() const {
  return weaponid_;
}
inline void MarryObjInfo::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 10;
inline bool MarryObjInfo::has_cloackid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MarryObjInfo::set_has_cloackid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MarryObjInfo::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MarryObjInfo::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 MarryObjInfo::cloackid() const {
  return cloackid_;
}
inline void MarryObjInfo::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 11;
inline bool MarryObjInfo::has_wingid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MarryObjInfo::set_has_wingid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MarryObjInfo::clear_has_wingid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MarryObjInfo::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 MarryObjInfo::wingid() const {
  return wingid_;
}
inline void MarryObjInfo::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 12;
inline bool MarryObjInfo::has_shoeid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MarryObjInfo::set_has_shoeid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MarryObjInfo::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MarryObjInfo::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 MarryObjInfo::shoeid() const {
  return shoeid_;
}
inline void MarryObjInfo::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 13;
inline bool MarryObjInfo::has_fashionhair() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MarryObjInfo::set_has_fashionhair() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MarryObjInfo::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MarryObjInfo::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashionhair() const {
  return fashionhair_;
}
inline void MarryObjInfo::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 14;
inline bool MarryObjInfo::has_fashionface() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MarryObjInfo::set_has_fashionface() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MarryObjInfo::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MarryObjInfo::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashionface() const {
  return fashionface_;
}
inline void MarryObjInfo::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 15;
inline bool MarryObjInfo::has_fashionbody() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MarryObjInfo::set_has_fashionbody() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MarryObjInfo::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MarryObjInfo::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashionbody() const {
  return fashionbody_;
}
inline void MarryObjInfo::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 16;
inline bool MarryObjInfo::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MarryObjInfo::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MarryObjInfo::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MarryObjInfo::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashionweapon() const {
  return fashionweapon_;
}
inline void MarryObjInfo::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 17;
inline bool MarryObjInfo::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MarryObjInfo::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MarryObjInfo::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MarryObjInfo::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashionshoe() const {
  return fashionshoe_;
}
inline void MarryObjInfo::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 18;
inline bool MarryObjInfo::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MarryObjInfo::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MarryObjInfo::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MarryObjInfo::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashiondecoration() const {
  return fashiondecoration_;
}
inline void MarryObjInfo::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 effectID = 19;
inline bool MarryObjInfo::has_effectid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MarryObjInfo::set_has_effectid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MarryObjInfo::clear_has_effectid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MarryObjInfo::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 MarryObjInfo::effectid() const {
  return effectid_;
}
inline void MarryObjInfo::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 20;
inline bool MarryObjInfo::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MarryObjInfo::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MarryObjInfo::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MarryObjInfo::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 MarryObjInfo::wingbreaklv() const {
  return wingbreaklv_;
}
inline void MarryObjInfo::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// optional uint32 fashionWingID = 21;
inline bool MarryObjInfo::has_fashionwingid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MarryObjInfo::set_has_fashionwingid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MarryObjInfo::clear_has_fashionwingid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MarryObjInfo::clear_fashionwingid() {
  fashionwingid_ = 0u;
  clear_has_fashionwingid();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashionwingid() const {
  return fashionwingid_;
}
inline void MarryObjInfo::set_fashionwingid(::google::protobuf::uint32 value) {
  set_has_fashionwingid();
  fashionwingid_ = value;
}

// -------------------------------------------------------------------

// stReqPropose

// optional uint32 id1 = 1;
inline bool stReqPropose::has_id1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqPropose::set_has_id1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqPropose::clear_has_id1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqPropose::clear_id1() {
  id1_ = 0u;
  clear_has_id1();
}
inline ::google::protobuf::uint32 stReqPropose::id1() const {
  return id1_;
}
inline void stReqPropose::set_id1(::google::protobuf::uint32 value) {
  set_has_id1();
  id1_ = value;
}

// optional uint32 id2 = 2;
inline bool stReqPropose::has_id2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqPropose::set_has_id2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqPropose::clear_has_id2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqPropose::clear_id2() {
  id2_ = 0u;
  clear_has_id2();
}
inline ::google::protobuf::uint32 stReqPropose::id2() const {
  return id2_;
}
inline void stReqPropose::set_id2(::google::protobuf::uint32 value) {
  set_has_id2();
  id2_ = value;
}

// optional .Global.MarryObjInfo info = 3;
inline bool stReqPropose::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqPropose::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqPropose::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqPropose::clear_info() {
  if (info_ != NULL) info_->::Global::MarryObjInfo::Clear();
  clear_has_info();
}
inline const ::Global::MarryObjInfo& stReqPropose::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Global::MarryObjInfo* stReqPropose::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Global::MarryObjInfo;
  return info_;
}
inline ::Global::MarryObjInfo* stReqPropose::release_info() {
  clear_has_info();
  ::Global::MarryObjInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void stReqPropose::set_allocated_info(::Global::MarryObjInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// stReqAgreeMarry

// optional uint32 id1 = 1;
inline bool stReqAgreeMarry::has_id1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAgreeMarry::set_has_id1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAgreeMarry::clear_has_id1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAgreeMarry::clear_id1() {
  id1_ = 0u;
  clear_has_id1();
}
inline ::google::protobuf::uint32 stReqAgreeMarry::id1() const {
  return id1_;
}
inline void stReqAgreeMarry::set_id1(::google::protobuf::uint32 value) {
  set_has_id1();
  id1_ = value;
}

// optional uint32 id2 = 2;
inline bool stReqAgreeMarry::has_id2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqAgreeMarry::set_has_id2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqAgreeMarry::clear_has_id2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqAgreeMarry::clear_id2() {
  id2_ = 0u;
  clear_has_id2();
}
inline ::google::protobuf::uint32 stReqAgreeMarry::id2() const {
  return id2_;
}
inline void stReqAgreeMarry::set_id2(::google::protobuf::uint32 value) {
  set_has_id2();
  id2_ = value;
}

// optional uint32 roomId = 3;
inline bool stReqAgreeMarry::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqAgreeMarry::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqAgreeMarry::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqAgreeMarry::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 stReqAgreeMarry::roomid() const {
  return roomid_;
}
inline void stReqAgreeMarry::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional .Global.MarryObjInfo info = 4;
inline bool stReqAgreeMarry::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqAgreeMarry::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqAgreeMarry::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqAgreeMarry::clear_info() {
  if (info_ != NULL) info_->::Global::MarryObjInfo::Clear();
  clear_has_info();
}
inline const ::Global::MarryObjInfo& stReqAgreeMarry::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Global::MarryObjInfo* stReqAgreeMarry::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Global::MarryObjInfo;
  return info_;
}
inline ::Global::MarryObjInfo* stReqAgreeMarry::release_info() {
  clear_has_info();
  ::Global::MarryObjInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void stReqAgreeMarry::set_allocated_info(::Global::MarryObjInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// stReqQuitWedding

// optional uint32 charId = 1;
inline bool stReqQuitWedding::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqQuitWedding::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqQuitWedding::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqQuitWedding::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqQuitWedding::charid() const {
  return charid_;
}
inline void stReqQuitWedding::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 levelId = 2;
inline bool stReqQuitWedding::has_levelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqQuitWedding::set_has_levelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqQuitWedding::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqQuitWedding::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stReqQuitWedding::levelid() const {
  return levelid_;
}
inline void stReqQuitWedding::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// repeated uint32 id = 3;
inline int stReqQuitWedding::id_size() const {
  return id_.size();
}
inline void stReqQuitWedding::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 stReqQuitWedding::id(int index) const {
  return id_.Get(index);
}
inline void stReqQuitWedding::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void stReqQuitWedding::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stReqQuitWedding::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stReqQuitWedding::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// stReqReEnterWedding

// optional uint32 charId = 1;
inline bool stReqReEnterWedding::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqReEnterWedding::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqReEnterWedding::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqReEnterWedding::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqReEnterWedding::charid() const {
  return charid_;
}
inline void stReqReEnterWedding::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated uint32 id = 2;
inline int stReqReEnterWedding::id_size() const {
  return id_.size();
}
inline void stReqReEnterWedding::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 stReqReEnterWedding::id(int index) const {
  return id_.Get(index);
}
inline void stReqReEnterWedding::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void stReqReEnterWedding::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stReqReEnterWedding::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stReqReEnterWedding::mutable_id() {
  return &id_;
}

// optional uint32 roomId = 3;
inline bool stReqReEnterWedding::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqReEnterWedding::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqReEnterWedding::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqReEnterWedding::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 stReqReEnterWedding::roomid() const {
  return roomid_;
}
inline void stReqReEnterWedding::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// stReqBuyFireWork

// optional uint32 charId = 1;
inline bool stReqBuyFireWork::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBuyFireWork::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBuyFireWork::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBuyFireWork::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqBuyFireWork::charid() const {
  return charid_;
}
inline void stReqBuyFireWork::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 id = 2;
inline bool stReqBuyFireWork::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqBuyFireWork::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqBuyFireWork::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqBuyFireWork::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqBuyFireWork::id() const {
  return id_;
}
inline void stReqBuyFireWork::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stReqAgreeInvite

// optional uint32 charId = 1;
inline bool stReqAgreeInvite::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAgreeInvite::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAgreeInvite::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAgreeInvite::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqAgreeInvite::charid() const {
  return charid_;
}
inline void stReqAgreeInvite::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 roomId = 2;
inline bool stReqAgreeInvite::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqAgreeInvite::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqAgreeInvite::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqAgreeInvite::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 stReqAgreeInvite::roomid() const {
  return roomid_;
}
inline void stReqAgreeInvite::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// repeated uint32 id = 3;
inline int stReqAgreeInvite::id_size() const {
  return id_.size();
}
inline void stReqAgreeInvite::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 stReqAgreeInvite::id(int index) const {
  return id_.Get(index);
}
inline void stReqAgreeInvite::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void stReqAgreeInvite::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stReqAgreeInvite::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stReqAgreeInvite::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// stReqTakeCandy

// optional uint32 charId = 1;
inline bool stReqTakeCandy::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqTakeCandy::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqTakeCandy::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqTakeCandy::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqTakeCandy::charid() const {
  return charid_;
}
inline void stReqTakeCandy::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stNotifyCoupleMarry

// optional uint32 husband = 1;
inline bool stNotifyCoupleMarry::has_husband() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyCoupleMarry::set_has_husband() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyCoupleMarry::clear_has_husband() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyCoupleMarry::clear_husband() {
  husband_ = 0u;
  clear_has_husband();
}
inline ::google::protobuf::uint32 stNotifyCoupleMarry::husband() const {
  return husband_;
}
inline void stNotifyCoupleMarry::set_husband(::google::protobuf::uint32 value) {
  set_has_husband();
  husband_ = value;
}

// optional uint32 wife = 2;
inline bool stNotifyCoupleMarry::has_wife() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyCoupleMarry::set_has_wife() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyCoupleMarry::clear_has_wife() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyCoupleMarry::clear_wife() {
  wife_ = 0u;
  clear_has_wife();
}
inline ::google::protobuf::uint32 stNotifyCoupleMarry::wife() const {
  return wife_;
}
inline void stNotifyCoupleMarry::set_wife(::google::protobuf::uint32 value) {
  set_has_wife();
  wife_ = value;
}

// optional uint32 id = 3;
inline bool stNotifyCoupleMarry::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyCoupleMarry::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyCoupleMarry::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyCoupleMarry::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stNotifyCoupleMarry::id() const {
  return id_;
}
inline void stNotifyCoupleMarry::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string husName = 4;
inline bool stNotifyCoupleMarry::has_husname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyCoupleMarry::set_has_husname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyCoupleMarry::clear_has_husname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyCoupleMarry::clear_husname() {
  if (husname_ != &::google::protobuf::internal::kEmptyString) {
    husname_->clear();
  }
  clear_has_husname();
}
inline const ::std::string& stNotifyCoupleMarry::husname() const {
  return *husname_;
}
inline void stNotifyCoupleMarry::set_husname(const ::std::string& value) {
  set_has_husname();
  if (husname_ == &::google::protobuf::internal::kEmptyString) {
    husname_ = new ::std::string;
  }
  husname_->assign(value);
}
inline void stNotifyCoupleMarry::set_husname(const char* value) {
  set_has_husname();
  if (husname_ == &::google::protobuf::internal::kEmptyString) {
    husname_ = new ::std::string;
  }
  husname_->assign(value);
}
inline void stNotifyCoupleMarry::set_husname(const char* value, size_t size) {
  set_has_husname();
  if (husname_ == &::google::protobuf::internal::kEmptyString) {
    husname_ = new ::std::string;
  }
  husname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNotifyCoupleMarry::mutable_husname() {
  set_has_husname();
  if (husname_ == &::google::protobuf::internal::kEmptyString) {
    husname_ = new ::std::string;
  }
  return husname_;
}
inline ::std::string* stNotifyCoupleMarry::release_husname() {
  clear_has_husname();
  if (husname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = husname_;
    husname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNotifyCoupleMarry::set_allocated_husname(::std::string* husname) {
  if (husname_ != &::google::protobuf::internal::kEmptyString) {
    delete husname_;
  }
  if (husname) {
    set_has_husname();
    husname_ = husname;
  } else {
    clear_has_husname();
    husname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string wifeName = 5;
inline bool stNotifyCoupleMarry::has_wifename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stNotifyCoupleMarry::set_has_wifename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stNotifyCoupleMarry::clear_has_wifename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stNotifyCoupleMarry::clear_wifename() {
  if (wifename_ != &::google::protobuf::internal::kEmptyString) {
    wifename_->clear();
  }
  clear_has_wifename();
}
inline const ::std::string& stNotifyCoupleMarry::wifename() const {
  return *wifename_;
}
inline void stNotifyCoupleMarry::set_wifename(const ::std::string& value) {
  set_has_wifename();
  if (wifename_ == &::google::protobuf::internal::kEmptyString) {
    wifename_ = new ::std::string;
  }
  wifename_->assign(value);
}
inline void stNotifyCoupleMarry::set_wifename(const char* value) {
  set_has_wifename();
  if (wifename_ == &::google::protobuf::internal::kEmptyString) {
    wifename_ = new ::std::string;
  }
  wifename_->assign(value);
}
inline void stNotifyCoupleMarry::set_wifename(const char* value, size_t size) {
  set_has_wifename();
  if (wifename_ == &::google::protobuf::internal::kEmptyString) {
    wifename_ = new ::std::string;
  }
  wifename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNotifyCoupleMarry::mutable_wifename() {
  set_has_wifename();
  if (wifename_ == &::google::protobuf::internal::kEmptyString) {
    wifename_ = new ::std::string;
  }
  return wifename_;
}
inline ::std::string* stNotifyCoupleMarry::release_wifename() {
  clear_has_wifename();
  if (wifename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wifename_;
    wifename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNotifyCoupleMarry::set_allocated_wifename(::std::string* wifename) {
  if (wifename_ != &::google::protobuf::internal::kEmptyString) {
    delete wifename_;
  }
  if (wifename) {
    set_has_wifename();
    wifename_ = wifename;
  } else {
    clear_has_wifename();
    wifename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stSendWeedingRing

// optional uint32 charId = 1;
inline bool stSendWeedingRing::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendWeedingRing::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendWeedingRing::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendWeedingRing::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSendWeedingRing::charid() const {
  return charid_;
}
inline void stSendWeedingRing::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 roomId = 2;
inline bool stSendWeedingRing::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendWeedingRing::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendWeedingRing::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendWeedingRing::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 stSendWeedingRing::roomid() const {
  return roomid_;
}
inline void stSendWeedingRing::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional uint32 id = 3;
inline bool stSendWeedingRing::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSendWeedingRing::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSendWeedingRing::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSendWeedingRing::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stSendWeedingRing::id() const {
  return id_;
}
inline void stSendWeedingRing::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stMarryInfoCb

// optional uint32 charId = 1;
inline bool stMarryInfoCb::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMarryInfoCb::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMarryInfoCb::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMarryInfoCb::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stMarryInfoCb::charid() const {
  return charid_;
}
inline void stMarryInfoCb::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 roomId = 2;
inline bool stMarryInfoCb::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMarryInfoCb::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMarryInfoCb::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMarryInfoCb::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 stMarryInfoCb::roomid() const {
  return roomid_;
}
inline void stMarryInfoCb::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional uint32 id = 3;
inline bool stMarryInfoCb::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stMarryInfoCb::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stMarryInfoCb::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stMarryInfoCb::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stMarryInfoCb::id() const {
  return id_;
}
inline void stMarryInfoCb::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stUseFireWork

// optional uint32 charId = 1;
inline bool stUseFireWork::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUseFireWork::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUseFireWork::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUseFireWork::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUseFireWork::charid() const {
  return charid_;
}
inline void stUseFireWork::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 index = 2;
inline bool stUseFireWork::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUseFireWork::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUseFireWork::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUseFireWork::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 stUseFireWork::index() const {
  return index_;
}
inline void stUseFireWork::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// repeated uint32 id = 3;
inline int stUseFireWork::id_size() const {
  return id_.size();
}
inline void stUseFireWork::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 stUseFireWork::id(int index) const {
  return id_.Get(index);
}
inline void stUseFireWork::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void stUseFireWork::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stUseFireWork::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stUseFireWork::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// stRetMarryInfoToCouple

// optional uint32 husband = 1;
inline bool stRetMarryInfoToCouple::has_husband() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetMarryInfoToCouple::set_has_husband() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetMarryInfoToCouple::clear_has_husband() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetMarryInfoToCouple::clear_husband() {
  husband_ = 0u;
  clear_has_husband();
}
inline ::google::protobuf::uint32 stRetMarryInfoToCouple::husband() const {
  return husband_;
}
inline void stRetMarryInfoToCouple::set_husband(::google::protobuf::uint32 value) {
  set_has_husband();
  husband_ = value;
}

// optional uint32 wife = 2;
inline bool stRetMarryInfoToCouple::has_wife() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetMarryInfoToCouple::set_has_wife() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetMarryInfoToCouple::clear_has_wife() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetMarryInfoToCouple::clear_wife() {
  wife_ = 0u;
  clear_has_wife();
}
inline ::google::protobuf::uint32 stRetMarryInfoToCouple::wife() const {
  return wife_;
}
inline void stRetMarryInfoToCouple::set_wife(::google::protobuf::uint32 value) {
  set_has_wife();
  wife_ = value;
}

// -------------------------------------------------------------------

// stNotifyCoupleMarryCb

// optional uint32 husband = 1;
inline bool stNotifyCoupleMarryCb::has_husband() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyCoupleMarryCb::set_has_husband() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyCoupleMarryCb::clear_has_husband() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyCoupleMarryCb::clear_husband() {
  husband_ = 0u;
  clear_has_husband();
}
inline ::google::protobuf::uint32 stNotifyCoupleMarryCb::husband() const {
  return husband_;
}
inline void stNotifyCoupleMarryCb::set_husband(::google::protobuf::uint32 value) {
  set_has_husband();
  husband_ = value;
}

// optional uint32 wife = 2;
inline bool stNotifyCoupleMarryCb::has_wife() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyCoupleMarryCb::set_has_wife() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyCoupleMarryCb::clear_has_wife() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyCoupleMarryCb::clear_wife() {
  wife_ = 0u;
  clear_has_wife();
}
inline ::google::protobuf::uint32 stNotifyCoupleMarryCb::wife() const {
  return wife_;
}
inline void stNotifyCoupleMarryCb::set_wife(::google::protobuf::uint32 value) {
  set_has_wife();
  wife_ = value;
}

// optional uint32 roomId = 3;
inline bool stNotifyCoupleMarryCb::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyCoupleMarryCb::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyCoupleMarryCb::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyCoupleMarryCb::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 stNotifyCoupleMarryCb::roomid() const {
  return roomid_;
}
inline void stNotifyCoupleMarryCb::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// stRetForceDivorce

// optional uint32 coupleA = 1;
inline bool stRetForceDivorce::has_couplea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetForceDivorce::set_has_couplea() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetForceDivorce::clear_has_couplea() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetForceDivorce::clear_couplea() {
  couplea_ = 0u;
  clear_has_couplea();
}
inline ::google::protobuf::uint32 stRetForceDivorce::couplea() const {
  return couplea_;
}
inline void stRetForceDivorce::set_couplea(::google::protobuf::uint32 value) {
  set_has_couplea();
  couplea_ = value;
}

// optional uint32 coupleB = 2;
inline bool stRetForceDivorce::has_coupleb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetForceDivorce::set_has_coupleb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetForceDivorce::clear_has_coupleb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetForceDivorce::clear_coupleb() {
  coupleb_ = 0u;
  clear_has_coupleb();
}
inline ::google::protobuf::uint32 stRetForceDivorce::coupleb() const {
  return coupleb_;
}
inline void stRetForceDivorce::set_coupleb(::google::protobuf::uint32 value) {
  set_has_coupleb();
  coupleb_ = value;
}

// optional bool coupleOnline = 3;
inline bool stRetForceDivorce::has_coupleonline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetForceDivorce::set_has_coupleonline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetForceDivorce::clear_has_coupleonline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetForceDivorce::clear_coupleonline() {
  coupleonline_ = false;
  clear_has_coupleonline();
}
inline bool stRetForceDivorce::coupleonline() const {
  return coupleonline_;
}
inline void stRetForceDivorce::set_coupleonline(bool value) {
  set_has_coupleonline();
  coupleonline_ = value;
}

// -------------------------------------------------------------------

// stRetForceDivorceCb

// repeated uint32 id = 1;
inline int stRetForceDivorceCb::id_size() const {
  return id_.size();
}
inline void stRetForceDivorceCb::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 stRetForceDivorceCb::id(int index) const {
  return id_.Get(index);
}
inline void stRetForceDivorceCb::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void stRetForceDivorceCb::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stRetForceDivorceCb::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stRetForceDivorceCb::mutable_id() {
  return &id_;
}

// repeated uint32 coupleId = 2;
inline int stRetForceDivorceCb::coupleid_size() const {
  return coupleid_.size();
}
inline void stRetForceDivorceCb::clear_coupleid() {
  coupleid_.Clear();
}
inline ::google::protobuf::uint32 stRetForceDivorceCb::coupleid(int index) const {
  return coupleid_.Get(index);
}
inline void stRetForceDivorceCb::set_coupleid(int index, ::google::protobuf::uint32 value) {
  coupleid_.Set(index, value);
}
inline void stRetForceDivorceCb::add_coupleid(::google::protobuf::uint32 value) {
  coupleid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stRetForceDivorceCb::coupleid() const {
  return coupleid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stRetForceDivorceCb::mutable_coupleid() {
  return &coupleid_;
}

// -------------------------------------------------------------------

// stRetRejectDivorce

// optional uint32 coupleId = 1;
inline bool stRetRejectDivorce::has_coupleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRejectDivorce::set_has_coupleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRejectDivorce::clear_has_coupleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRejectDivorce::clear_coupleid() {
  coupleid_ = 0u;
  clear_has_coupleid();
}
inline ::google::protobuf::uint32 stRetRejectDivorce::coupleid() const {
  return coupleid_;
}
inline void stRetRejectDivorce::set_coupleid(::google::protobuf::uint32 value) {
  set_has_coupleid();
  coupleid_ = value;
}

// optional uint32 time = 2;
inline bool stRetRejectDivorce::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetRejectDivorce::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetRejectDivorce::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetRejectDivorce::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 stRetRejectDivorce::time() const {
  return time_;
}
inline void stRetRejectDivorce::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// stRetDelUserOnlineMarryInfo

// optional uint32 id = 1;
inline bool stRetDelUserOnlineMarryInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDelUserOnlineMarryInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDelUserOnlineMarryInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDelUserOnlineMarryInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stRetDelUserOnlineMarryInfo::id() const {
  return id_;
}
inline void stRetDelUserOnlineMarryInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stReqSynGuildBlackMarketLv

// optional uint32 charid = 1;
inline bool stReqSynGuildBlackMarketLv::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSynGuildBlackMarketLv::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSynGuildBlackMarketLv::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSynGuildBlackMarketLv::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqSynGuildBlackMarketLv::charid() const {
  return charid_;
}
inline void stReqSynGuildBlackMarketLv::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynGuildBlackMarketLvResult

// optional uint32 lv = 1;
inline bool stSynGuildBlackMarketLvResult::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynGuildBlackMarketLvResult::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynGuildBlackMarketLvResult::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynGuildBlackMarketLvResult::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 stSynGuildBlackMarketLvResult::lv() const {
  return lv_;
}
inline void stSynGuildBlackMarketLvResult::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 charid = 2;
inline bool stSynGuildBlackMarketLvResult::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynGuildBlackMarketLvResult::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynGuildBlackMarketLvResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynGuildBlackMarketLvResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynGuildBlackMarketLvResult::charid() const {
  return charid_;
}
inline void stSynGuildBlackMarketLvResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGloryUserPart

// optional uint32 charID = 1;
inline bool stGloryUserPart::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGloryUserPart::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGloryUserPart::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGloryUserPart::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGloryUserPart::charid() const {
  return charid_;
}
inline void stGloryUserPart::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 areaCode = 2;
inline bool stGloryUserPart::has_areacode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGloryUserPart::set_has_areacode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGloryUserPart::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGloryUserPart::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stGloryUserPart::areacode() const {
  return areacode_;
}
inline void stGloryUserPart::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional string name = 3;
inline bool stGloryUserPart::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGloryUserPart::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGloryUserPart::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGloryUserPart::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stGloryUserPart::name() const {
  return *name_;
}
inline void stGloryUserPart::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGloryUserPart::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGloryUserPart::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGloryUserPart::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stGloryUserPart::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGloryUserPart::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 4;
inline bool stGloryUserPart::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGloryUserPart::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGloryUserPart::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGloryUserPart::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stGloryUserPart::job() const {
  return job_;
}
inline void stGloryUserPart::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stGloryUserPart::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGloryUserPart::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGloryUserPart::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGloryUserPart::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stGloryUserPart::sex() const {
  return sex_;
}
inline void stGloryUserPart::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 6;
inline bool stGloryUserPart::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stGloryUserPart::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stGloryUserPart::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stGloryUserPart::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stGloryUserPart::level() const {
  return level_;
}
inline void stGloryUserPart::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 7;
inline bool stGloryUserPart::has_battlepower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stGloryUserPart::set_has_battlepower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stGloryUserPart::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stGloryUserPart::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stGloryUserPart::battlepower() const {
  return battlepower_;
}
inline void stGloryUserPart::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 headID = 8;
inline bool stGloryUserPart::has_headid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stGloryUserPart::set_has_headid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stGloryUserPart::clear_has_headid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stGloryUserPart::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stGloryUserPart::headid() const {
  return headid_;
}
inline void stGloryUserPart::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 9;
inline bool stGloryUserPart::has_bodyid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stGloryUserPart::set_has_bodyid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stGloryUserPart::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stGloryUserPart::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 stGloryUserPart::bodyid() const {
  return bodyid_;
}
inline void stGloryUserPart::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 10;
inline bool stGloryUserPart::has_weaponid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stGloryUserPart::set_has_weaponid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stGloryUserPart::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stGloryUserPart::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 stGloryUserPart::weaponid() const {
  return weaponid_;
}
inline void stGloryUserPart::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 11;
inline bool stGloryUserPart::has_cloackid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stGloryUserPart::set_has_cloackid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stGloryUserPart::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stGloryUserPart::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 stGloryUserPart::cloackid() const {
  return cloackid_;
}
inline void stGloryUserPart::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 12;
inline bool stGloryUserPart::has_wingid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stGloryUserPart::set_has_wingid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stGloryUserPart::clear_has_wingid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stGloryUserPart::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 stGloryUserPart::wingid() const {
  return wingid_;
}
inline void stGloryUserPart::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 13;
inline bool stGloryUserPart::has_shoeid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stGloryUserPart::set_has_shoeid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stGloryUserPart::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stGloryUserPart::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 stGloryUserPart::shoeid() const {
  return shoeid_;
}
inline void stGloryUserPart::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 14;
inline bool stGloryUserPart::has_fashionhair() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stGloryUserPart::set_has_fashionhair() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stGloryUserPart::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stGloryUserPart::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 stGloryUserPart::fashionhair() const {
  return fashionhair_;
}
inline void stGloryUserPart::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 15;
inline bool stGloryUserPart::has_fashionface() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stGloryUserPart::set_has_fashionface() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stGloryUserPart::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stGloryUserPart::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 stGloryUserPart::fashionface() const {
  return fashionface_;
}
inline void stGloryUserPart::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 16;
inline bool stGloryUserPart::has_fashionbody() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stGloryUserPart::set_has_fashionbody() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stGloryUserPart::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stGloryUserPart::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 stGloryUserPart::fashionbody() const {
  return fashionbody_;
}
inline void stGloryUserPart::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 17;
inline bool stGloryUserPart::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stGloryUserPart::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stGloryUserPart::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stGloryUserPart::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 stGloryUserPart::fashionweapon() const {
  return fashionweapon_;
}
inline void stGloryUserPart::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 18;
inline bool stGloryUserPart::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stGloryUserPart::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stGloryUserPart::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stGloryUserPart::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 stGloryUserPart::fashionshoe() const {
  return fashionshoe_;
}
inline void stGloryUserPart::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 19;
inline bool stGloryUserPart::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stGloryUserPart::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stGloryUserPart::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stGloryUserPart::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 stGloryUserPart::fashiondecoration() const {
  return fashiondecoration_;
}
inline void stGloryUserPart::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 effectID = 20;
inline bool stGloryUserPart::has_effectid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stGloryUserPart::set_has_effectid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stGloryUserPart::clear_has_effectid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stGloryUserPart::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stGloryUserPart::effectid() const {
  return effectid_;
}
inline void stGloryUserPart::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 21;
inline bool stGloryUserPart::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stGloryUserPart::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stGloryUserPart::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stGloryUserPart::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 stGloryUserPart::wingbreaklv() const {
  return wingbreaklv_;
}
inline void stGloryUserPart::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// -------------------------------------------------------------------

// stGloryUserDetail

// optional uint32 charID = 1;
inline bool stGloryUserDetail::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGloryUserDetail::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGloryUserDetail::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGloryUserDetail::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::charid() const {
  return charid_;
}
inline void stGloryUserDetail::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 areaCode = 2;
inline bool stGloryUserDetail::has_areacode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGloryUserDetail::set_has_areacode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGloryUserDetail::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGloryUserDetail::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stGloryUserDetail::areacode() const {
  return areacode_;
}
inline void stGloryUserDetail::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional string name = 3;
inline bool stGloryUserDetail::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGloryUserDetail::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGloryUserDetail::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGloryUserDetail::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stGloryUserDetail::name() const {
  return *name_;
}
inline void stGloryUserDetail::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGloryUserDetail::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGloryUserDetail::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGloryUserDetail::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stGloryUserDetail::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGloryUserDetail::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 4;
inline bool stGloryUserDetail::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGloryUserDetail::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGloryUserDetail::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGloryUserDetail::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stGloryUserDetail::job() const {
  return job_;
}
inline void stGloryUserDetail::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stGloryUserDetail::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGloryUserDetail::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGloryUserDetail::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGloryUserDetail::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stGloryUserDetail::sex() const {
  return sex_;
}
inline void stGloryUserDetail::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 6;
inline bool stGloryUserDetail::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stGloryUserDetail::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stGloryUserDetail::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stGloryUserDetail::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stGloryUserDetail::level() const {
  return level_;
}
inline void stGloryUserDetail::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 7;
inline bool stGloryUserDetail::has_battlepower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stGloryUserDetail::set_has_battlepower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stGloryUserDetail::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stGloryUserDetail::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stGloryUserDetail::battlepower() const {
  return battlepower_;
}
inline void stGloryUserDetail::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 headID = 8;
inline bool stGloryUserDetail::has_headid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stGloryUserDetail::set_has_headid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stGloryUserDetail::clear_has_headid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stGloryUserDetail::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::headid() const {
  return headid_;
}
inline void stGloryUserDetail::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 9;
inline bool stGloryUserDetail::has_bodyid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stGloryUserDetail::set_has_bodyid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stGloryUserDetail::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stGloryUserDetail::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::bodyid() const {
  return bodyid_;
}
inline void stGloryUserDetail::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 10;
inline bool stGloryUserDetail::has_weaponid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stGloryUserDetail::set_has_weaponid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stGloryUserDetail::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stGloryUserDetail::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::weaponid() const {
  return weaponid_;
}
inline void stGloryUserDetail::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 11;
inline bool stGloryUserDetail::has_cloackid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stGloryUserDetail::set_has_cloackid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stGloryUserDetail::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stGloryUserDetail::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::cloackid() const {
  return cloackid_;
}
inline void stGloryUserDetail::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 12;
inline bool stGloryUserDetail::has_wingid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stGloryUserDetail::set_has_wingid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stGloryUserDetail::clear_has_wingid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stGloryUserDetail::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::wingid() const {
  return wingid_;
}
inline void stGloryUserDetail::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 13;
inline bool stGloryUserDetail::has_shoeid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stGloryUserDetail::set_has_shoeid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stGloryUserDetail::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stGloryUserDetail::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::shoeid() const {
  return shoeid_;
}
inline void stGloryUserDetail::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 14;
inline bool stGloryUserDetail::has_fashionhair() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stGloryUserDetail::set_has_fashionhair() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stGloryUserDetail::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stGloryUserDetail::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 stGloryUserDetail::fashionhair() const {
  return fashionhair_;
}
inline void stGloryUserDetail::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 15;
inline bool stGloryUserDetail::has_fashionface() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stGloryUserDetail::set_has_fashionface() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stGloryUserDetail::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stGloryUserDetail::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 stGloryUserDetail::fashionface() const {
  return fashionface_;
}
inline void stGloryUserDetail::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 16;
inline bool stGloryUserDetail::has_fashionbody() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stGloryUserDetail::set_has_fashionbody() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stGloryUserDetail::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stGloryUserDetail::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 stGloryUserDetail::fashionbody() const {
  return fashionbody_;
}
inline void stGloryUserDetail::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 17;
inline bool stGloryUserDetail::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stGloryUserDetail::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stGloryUserDetail::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stGloryUserDetail::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 stGloryUserDetail::fashionweapon() const {
  return fashionweapon_;
}
inline void stGloryUserDetail::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 18;
inline bool stGloryUserDetail::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stGloryUserDetail::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stGloryUserDetail::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stGloryUserDetail::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 stGloryUserDetail::fashionshoe() const {
  return fashionshoe_;
}
inline void stGloryUserDetail::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 19;
inline bool stGloryUserDetail::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stGloryUserDetail::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stGloryUserDetail::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stGloryUserDetail::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 stGloryUserDetail::fashiondecoration() const {
  return fashiondecoration_;
}
inline void stGloryUserDetail::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 effectID = 20;
inline bool stGloryUserDetail::has_effectid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stGloryUserDetail::set_has_effectid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stGloryUserDetail::clear_has_effectid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stGloryUserDetail::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::effectid() const {
  return effectid_;
}
inline void stGloryUserDetail::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 21;
inline bool stGloryUserDetail::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stGloryUserDetail::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stGloryUserDetail::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stGloryUserDetail::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 stGloryUserDetail::wingbreaklv() const {
  return wingbreaklv_;
}
inline void stGloryUserDetail::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// optional uint32 killNum = 22;
inline bool stGloryUserDetail::has_killnum() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void stGloryUserDetail::set_has_killnum() {
  _has_bits_[0] |= 0x00200000u;
}
inline void stGloryUserDetail::clear_has_killnum() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void stGloryUserDetail::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 stGloryUserDetail::killnum() const {
  return killnum_;
}
inline void stGloryUserDetail::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional uint32 evenKillNum = 23;
inline bool stGloryUserDetail::has_evenkillnum() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void stGloryUserDetail::set_has_evenkillnum() {
  _has_bits_[0] |= 0x00400000u;
}
inline void stGloryUserDetail::clear_has_evenkillnum() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void stGloryUserDetail::clear_evenkillnum() {
  evenkillnum_ = 0u;
  clear_has_evenkillnum();
}
inline ::google::protobuf::uint32 stGloryUserDetail::evenkillnum() const {
  return evenkillnum_;
}
inline void stGloryUserDetail::set_evenkillnum(::google::protobuf::uint32 value) {
  set_has_evenkillnum();
  evenkillnum_ = value;
}

// optional uint32 totalKillNum = 24;
inline bool stGloryUserDetail::has_totalkillnum() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void stGloryUserDetail::set_has_totalkillnum() {
  _has_bits_[0] |= 0x00800000u;
}
inline void stGloryUserDetail::clear_has_totalkillnum() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void stGloryUserDetail::clear_totalkillnum() {
  totalkillnum_ = 0u;
  clear_has_totalkillnum();
}
inline ::google::protobuf::uint32 stGloryUserDetail::totalkillnum() const {
  return totalkillnum_;
}
inline void stGloryUserDetail::set_totalkillnum(::google::protobuf::uint32 value) {
  set_has_totalkillnum();
  totalkillnum_ = value;
}

// optional uint32 gloryVal = 25;
inline bool stGloryUserDetail::has_gloryval() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void stGloryUserDetail::set_has_gloryval() {
  _has_bits_[0] |= 0x01000000u;
}
inline void stGloryUserDetail::clear_has_gloryval() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void stGloryUserDetail::clear_gloryval() {
  gloryval_ = 0u;
  clear_has_gloryval();
}
inline ::google::protobuf::uint32 stGloryUserDetail::gloryval() const {
  return gloryval_;
}
inline void stGloryUserDetail::set_gloryval(::google::protobuf::uint32 value) {
  set_has_gloryval();
  gloryval_ = value;
}

// optional uint32 gloryActionTime = 26;
inline bool stGloryUserDetail::has_gloryactiontime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void stGloryUserDetail::set_has_gloryactiontime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void stGloryUserDetail::clear_has_gloryactiontime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void stGloryUserDetail::clear_gloryactiontime() {
  gloryactiontime_ = 0u;
  clear_has_gloryactiontime();
}
inline ::google::protobuf::uint32 stGloryUserDetail::gloryactiontime() const {
  return gloryactiontime_;
}
inline void stGloryUserDetail::set_gloryactiontime(::google::protobuf::uint32 value) {
  set_has_gloryactiontime();
  gloryactiontime_ = value;
}

// optional uint32 prostatedNum = 27;
inline bool stGloryUserDetail::has_prostatednum() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void stGloryUserDetail::set_has_prostatednum() {
  _has_bits_[0] |= 0x04000000u;
}
inline void stGloryUserDetail::clear_has_prostatednum() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void stGloryUserDetail::clear_prostatednum() {
  prostatednum_ = 0u;
  clear_has_prostatednum();
}
inline ::google::protobuf::uint32 stGloryUserDetail::prostatednum() const {
  return prostatednum_;
}
inline void stGloryUserDetail::set_prostatednum(::google::protobuf::uint32 value) {
  set_has_prostatednum();
  prostatednum_ = value;
}

// optional uint32 prostateTime = 28;
inline bool stGloryUserDetail::has_prostatetime() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void stGloryUserDetail::set_has_prostatetime() {
  _has_bits_[0] |= 0x08000000u;
}
inline void stGloryUserDetail::clear_has_prostatetime() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void stGloryUserDetail::clear_prostatetime() {
  prostatetime_ = 0u;
  clear_has_prostatetime();
}
inline ::google::protobuf::uint32 stGloryUserDetail::prostatetime() const {
  return prostatetime_;
}
inline void stGloryUserDetail::set_prostatetime(::google::protobuf::uint32 value) {
  set_has_prostatetime();
  prostatetime_ = value;
}

// optional uint32 normalId = 29;
inline bool stGloryUserDetail::has_normalid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void stGloryUserDetail::set_has_normalid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void stGloryUserDetail::clear_has_normalid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void stGloryUserDetail::clear_normalid() {
  normalid_ = 0u;
  clear_has_normalid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::normalid() const {
  return normalid_;
}
inline void stGloryUserDetail::set_normalid(::google::protobuf::uint32 value) {
  set_has_normalid();
  normalid_ = value;
}

// -------------------------------------------------------------------

// stGloryUser

// optional uint32 charID = 1;
inline bool stGloryUser::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGloryUser::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGloryUser::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGloryUser::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGloryUser::charid() const {
  return charid_;
}
inline void stGloryUser::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 areaCode = 2;
inline bool stGloryUser::has_areacode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGloryUser::set_has_areacode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGloryUser::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGloryUser::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stGloryUser::areacode() const {
  return areacode_;
}
inline void stGloryUser::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional string name = 3;
inline bool stGloryUser::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGloryUser::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGloryUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGloryUser::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stGloryUser::name() const {
  return *name_;
}
inline void stGloryUser::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGloryUser::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGloryUser::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGloryUser::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stGloryUser::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGloryUser::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 killNum = 4;
inline bool stGloryUser::has_killnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGloryUser::set_has_killnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGloryUser::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGloryUser::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 stGloryUser::killnum() const {
  return killnum_;
}
inline void stGloryUser::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional uint32 evenKillNum = 5;
inline bool stGloryUser::has_evenkillnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGloryUser::set_has_evenkillnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGloryUser::clear_has_evenkillnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGloryUser::clear_evenkillnum() {
  evenkillnum_ = 0u;
  clear_has_evenkillnum();
}
inline ::google::protobuf::uint32 stGloryUser::evenkillnum() const {
  return evenkillnum_;
}
inline void stGloryUser::set_evenkillnum(::google::protobuf::uint32 value) {
  set_has_evenkillnum();
  evenkillnum_ = value;
}

// optional uint32 totalKillNum = 6;
inline bool stGloryUser::has_totalkillnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stGloryUser::set_has_totalkillnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stGloryUser::clear_has_totalkillnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stGloryUser::clear_totalkillnum() {
  totalkillnum_ = 0u;
  clear_has_totalkillnum();
}
inline ::google::protobuf::uint32 stGloryUser::totalkillnum() const {
  return totalkillnum_;
}
inline void stGloryUser::set_totalkillnum(::google::protobuf::uint32 value) {
  set_has_totalkillnum();
  totalkillnum_ = value;
}

// optional uint32 gloryVal = 7;
inline bool stGloryUser::has_gloryval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stGloryUser::set_has_gloryval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stGloryUser::clear_has_gloryval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stGloryUser::clear_gloryval() {
  gloryval_ = 0u;
  clear_has_gloryval();
}
inline ::google::protobuf::uint32 stGloryUser::gloryval() const {
  return gloryval_;
}
inline void stGloryUser::set_gloryval(::google::protobuf::uint32 value) {
  set_has_gloryval();
  gloryval_ = value;
}

// optional uint32 gloryActionTime = 8;
inline bool stGloryUser::has_gloryactiontime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stGloryUser::set_has_gloryactiontime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stGloryUser::clear_has_gloryactiontime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stGloryUser::clear_gloryactiontime() {
  gloryactiontime_ = 0u;
  clear_has_gloryactiontime();
}
inline ::google::protobuf::uint32 stGloryUser::gloryactiontime() const {
  return gloryactiontime_;
}
inline void stGloryUser::set_gloryactiontime(::google::protobuf::uint32 value) {
  set_has_gloryactiontime();
  gloryactiontime_ = value;
}

// optional uint32 prostatedNum = 9;
inline bool stGloryUser::has_prostatednum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stGloryUser::set_has_prostatednum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stGloryUser::clear_has_prostatednum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stGloryUser::clear_prostatednum() {
  prostatednum_ = 0u;
  clear_has_prostatednum();
}
inline ::google::protobuf::uint32 stGloryUser::prostatednum() const {
  return prostatednum_;
}
inline void stGloryUser::set_prostatednum(::google::protobuf::uint32 value) {
  set_has_prostatednum();
  prostatednum_ = value;
}

// optional uint32 prostateTime = 10;
inline bool stGloryUser::has_prostatetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stGloryUser::set_has_prostatetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stGloryUser::clear_has_prostatetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stGloryUser::clear_prostatetime() {
  prostatetime_ = 0u;
  clear_has_prostatetime();
}
inline ::google::protobuf::uint32 stGloryUser::prostatetime() const {
  return prostatetime_;
}
inline void stGloryUser::set_prostatetime(::google::protobuf::uint32 value) {
  set_has_prostatetime();
  prostatetime_ = value;
}

// optional uint32 normalId = 11;
inline bool stGloryUser::has_normalid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stGloryUser::set_has_normalid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stGloryUser::clear_has_normalid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stGloryUser::clear_normalid() {
  normalid_ = 0u;
  clear_has_normalid();
}
inline ::google::protobuf::uint32 stGloryUser::normalid() const {
  return normalid_;
}
inline void stGloryUser::set_normalid(::google::protobuf::uint32 value) {
  set_has_normalid();
  normalid_ = value;
}

// -------------------------------------------------------------------

// stEnterResBattle

// optional uint32 charId = 1;
inline bool stEnterResBattle::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEnterResBattle::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEnterResBattle::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEnterResBattle::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stEnterResBattle::charid() const {
  return charid_;
}
inline void stEnterResBattle::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 copyMapLevel = 2;
inline bool stEnterResBattle::has_copymaplevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEnterResBattle::set_has_copymaplevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEnterResBattle::clear_has_copymaplevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEnterResBattle::clear_copymaplevel() {
  copymaplevel_ = 0u;
  clear_has_copymaplevel();
}
inline ::google::protobuf::uint32 stEnterResBattle::copymaplevel() const {
  return copymaplevel_;
}
inline void stEnterResBattle::set_copymaplevel(::google::protobuf::uint32 value) {
  set_has_copymaplevel();
  copymaplevel_ = value;
}

// optional uint32 guildId = 3;
inline bool stEnterResBattle::has_guildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stEnterResBattle::set_has_guildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stEnterResBattle::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stEnterResBattle::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stEnterResBattle::guildid() const {
  return guildid_;
}
inline void stEnterResBattle::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional .Global.stGloryUser self = 4;
inline bool stEnterResBattle::has_self() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stEnterResBattle::set_has_self() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stEnterResBattle::clear_has_self() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stEnterResBattle::clear_self() {
  if (self_ != NULL) self_->::Global::stGloryUser::Clear();
  clear_has_self();
}
inline const ::Global::stGloryUser& stEnterResBattle::self() const {
  return self_ != NULL ? *self_ : *default_instance_->self_;
}
inline ::Global::stGloryUser* stEnterResBattle::mutable_self() {
  set_has_self();
  if (self_ == NULL) self_ = new ::Global::stGloryUser;
  return self_;
}
inline ::Global::stGloryUser* stEnterResBattle::release_self() {
  clear_has_self();
  ::Global::stGloryUser* temp = self_;
  self_ = NULL;
  return temp;
}
inline void stEnterResBattle::set_allocated_self(::Global::stGloryUser* self) {
  delete self_;
  self_ = self;
  if (self) {
    set_has_self();
  } else {
    clear_has_self();
  }
}

// -------------------------------------------------------------------

// stBroadResBattleInvite

// optional uint32 charId = 1;
inline bool stBroadResBattleInvite::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBroadResBattleInvite::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBroadResBattleInvite::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBroadResBattleInvite::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::charid() const {
  return charid_;
}
inline void stBroadResBattleInvite::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stBroadResBattleInvite::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBroadResBattleInvite::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBroadResBattleInvite::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBroadResBattleInvite::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stBroadResBattleInvite::name() const {
  return *name_;
}
inline void stBroadResBattleInvite::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stBroadResBattleInvite::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stBroadResBattleInvite::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBroadResBattleInvite::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stBroadResBattleInvite::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBroadResBattleInvite::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 guildId = 3;
inline bool stBroadResBattleInvite::has_guildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBroadResBattleInvite::set_has_guildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBroadResBattleInvite::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBroadResBattleInvite::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::guildid() const {
  return guildid_;
}
inline void stBroadResBattleInvite::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 job = 4;
inline bool stBroadResBattleInvite::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stBroadResBattleInvite::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stBroadResBattleInvite::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stBroadResBattleInvite::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::job() const {
  return job_;
}
inline void stBroadResBattleInvite::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stBroadResBattleInvite::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stBroadResBattleInvite::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stBroadResBattleInvite::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stBroadResBattleInvite::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::sex() const {
  return sex_;
}
inline void stBroadResBattleInvite::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 battlePower = 6;
inline bool stBroadResBattleInvite::has_battlepower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stBroadResBattleInvite::set_has_battlepower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stBroadResBattleInvite::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stBroadResBattleInvite::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::battlepower() const {
  return battlepower_;
}
inline void stBroadResBattleInvite::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 vipLv = 7;
inline bool stBroadResBattleInvite::has_viplv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stBroadResBattleInvite::set_has_viplv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stBroadResBattleInvite::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stBroadResBattleInvite::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::viplv() const {
  return viplv_;
}
inline void stBroadResBattleInvite::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 instanceLvl = 8;
inline bool stBroadResBattleInvite::has_instancelvl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stBroadResBattleInvite::set_has_instancelvl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stBroadResBattleInvite::clear_has_instancelvl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stBroadResBattleInvite::clear_instancelvl() {
  instancelvl_ = 0u;
  clear_has_instancelvl();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::instancelvl() const {
  return instancelvl_;
}
inline void stBroadResBattleInvite::set_instancelvl(::google::protobuf::uint32 value) {
  set_has_instancelvl();
  instancelvl_ = value;
}

// -------------------------------------------------------------------

// stPubOffline

// optional string msg = 1;
inline bool stPubOffline::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPubOffline::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPubOffline::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPubOffline::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& stPubOffline::msg() const {
  return *msg_;
}
inline void stPubOffline::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stPubOffline::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stPubOffline::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPubOffline::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* stPubOffline::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPubOffline::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stDiscoverConsume

// optional uint32 charID = 1;
inline bool stDiscoverConsume::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDiscoverConsume::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDiscoverConsume::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDiscoverConsume::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDiscoverConsume::charid() const {
  return charid_;
}
inline void stDiscoverConsume::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynCoupleInfo

// optional uint32 coupleId = 1;
inline bool stSynCoupleInfo::has_coupleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynCoupleInfo::set_has_coupleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynCoupleInfo::clear_has_coupleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynCoupleInfo::clear_coupleid() {
  coupleid_ = 0u;
  clear_has_coupleid();
}
inline ::google::protobuf::uint32 stSynCoupleInfo::coupleid() const {
  return coupleid_;
}
inline void stSynCoupleInfo::set_coupleid(::google::protobuf::uint32 value) {
  set_has_coupleid();
  coupleid_ = value;
}

// optional uint32 charID = 2;
inline bool stSynCoupleInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynCoupleInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynCoupleInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynCoupleInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynCoupleInfo::charid() const {
  return charid_;
}
inline void stSynCoupleInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string myNewName = 3;
inline bool stSynCoupleInfo::has_mynewname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynCoupleInfo::set_has_mynewname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynCoupleInfo::clear_has_mynewname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynCoupleInfo::clear_mynewname() {
  if (mynewname_ != &::google::protobuf::internal::kEmptyString) {
    mynewname_->clear();
  }
  clear_has_mynewname();
}
inline const ::std::string& stSynCoupleInfo::mynewname() const {
  return *mynewname_;
}
inline void stSynCoupleInfo::set_mynewname(const ::std::string& value) {
  set_has_mynewname();
  if (mynewname_ == &::google::protobuf::internal::kEmptyString) {
    mynewname_ = new ::std::string;
  }
  mynewname_->assign(value);
}
inline void stSynCoupleInfo::set_mynewname(const char* value) {
  set_has_mynewname();
  if (mynewname_ == &::google::protobuf::internal::kEmptyString) {
    mynewname_ = new ::std::string;
  }
  mynewname_->assign(value);
}
inline void stSynCoupleInfo::set_mynewname(const char* value, size_t size) {
  set_has_mynewname();
  if (mynewname_ == &::google::protobuf::internal::kEmptyString) {
    mynewname_ = new ::std::string;
  }
  mynewname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynCoupleInfo::mutable_mynewname() {
  set_has_mynewname();
  if (mynewname_ == &::google::protobuf::internal::kEmptyString) {
    mynewname_ = new ::std::string;
  }
  return mynewname_;
}
inline ::std::string* stSynCoupleInfo::release_mynewname() {
  clear_has_mynewname();
  if (mynewname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mynewname_;
    mynewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynCoupleInfo::set_allocated_mynewname(::std::string* mynewname) {
  if (mynewname_ != &::google::protobuf::internal::kEmptyString) {
    delete mynewname_;
  }
  if (mynewname) {
    set_has_mynewname();
    mynewname_ = mynewname;
  } else {
    clear_has_mynewname();
    mynewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stSynResBattleUserData

// optional .Global.stGloryUser user = 1;
inline bool stSynResBattleUserData::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynResBattleUserData::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynResBattleUserData::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynResBattleUserData::clear_user() {
  if (user_ != NULL) user_->::Global::stGloryUser::Clear();
  clear_has_user();
}
inline const ::Global::stGloryUser& stSynResBattleUserData::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::Global::stGloryUser* stSynResBattleUserData::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::Global::stGloryUser;
  return user_;
}
inline ::Global::stGloryUser* stSynResBattleUserData::release_user() {
  clear_has_user();
  ::Global::stGloryUser* temp = user_;
  user_ = NULL;
  return temp;
}
inline void stSynResBattleUserData::set_allocated_user(::Global::stGloryUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// -------------------------------------------------------------------

// stSynResBattleTop50

// repeated .Global.stGloryUserPart detail = 1;
inline int stSynResBattleTop50::detail_size() const {
  return detail_.size();
}
inline void stSynResBattleTop50::clear_detail() {
  detail_.Clear();
}
inline const ::Global::stGloryUserPart& stSynResBattleTop50::detail(int index) const {
  return detail_.Get(index);
}
inline ::Global::stGloryUserPart* stSynResBattleTop50::mutable_detail(int index) {
  return detail_.Mutable(index);
}
inline ::Global::stGloryUserPart* stSynResBattleTop50::add_detail() {
  return detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stGloryUserPart >&
stSynResBattleTop50::detail() const {
  return detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stGloryUserPart >*
stSynResBattleTop50::mutable_detail() {
  return &detail_;
}

// -------------------------------------------------------------------

// stSynResBattleKing

// optional bool clear = 1;
inline bool stSynResBattleKing::has_clear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynResBattleKing::set_has_clear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynResBattleKing::clear_has_clear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynResBattleKing::clear_clear() {
  clear_ = false;
  clear_has_clear();
}
inline bool stSynResBattleKing::clear() const {
  return clear_;
}
inline void stSynResBattleKing::set_clear(bool value) {
  set_has_clear();
  clear_ = value;
}

// optional .Global.stGloryUserDetail king = 2;
inline bool stSynResBattleKing::has_king() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynResBattleKing::set_has_king() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynResBattleKing::clear_has_king() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynResBattleKing::clear_king() {
  if (king_ != NULL) king_->::Global::stGloryUserDetail::Clear();
  clear_has_king();
}
inline const ::Global::stGloryUserDetail& stSynResBattleKing::king() const {
  return king_ != NULL ? *king_ : *default_instance_->king_;
}
inline ::Global::stGloryUserDetail* stSynResBattleKing::mutable_king() {
  set_has_king();
  if (king_ == NULL) king_ = new ::Global::stGloryUserDetail;
  return king_;
}
inline ::Global::stGloryUserDetail* stSynResBattleKing::release_king() {
  clear_has_king();
  ::Global::stGloryUserDetail* temp = king_;
  king_ = NULL;
  return temp;
}
inline void stSynResBattleKing::set_allocated_king(::Global::stGloryUserDetail* king) {
  delete king_;
  king_ = king;
  if (king) {
    set_has_king();
  } else {
    clear_has_king();
  }
}

// -------------------------------------------------------------------

// stReplyInviteResBattle

// optional uint32 charId = 1;
inline bool stReplyInviteResBattle::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReplyInviteResBattle::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReplyInviteResBattle::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReplyInviteResBattle::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReplyInviteResBattle::charid() const {
  return charid_;
}
inline void stReplyInviteResBattle::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 guildId = 2;
inline bool stReplyInviteResBattle::has_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReplyInviteResBattle::set_has_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReplyInviteResBattle::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReplyInviteResBattle::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stReplyInviteResBattle::guildid() const {
  return guildid_;
}
inline void stReplyInviteResBattle::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 inviteId = 3;
inline bool stReplyInviteResBattle::has_inviteid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReplyInviteResBattle::set_has_inviteid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReplyInviteResBattle::clear_has_inviteid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReplyInviteResBattle::clear_inviteid() {
  inviteid_ = 0u;
  clear_has_inviteid();
}
inline ::google::protobuf::uint32 stReplyInviteResBattle::inviteid() const {
  return inviteid_;
}
inline void stReplyInviteResBattle::set_inviteid(::google::protobuf::uint32 value) {
  set_has_inviteid();
  inviteid_ = value;
}

// optional .Global.stGloryUser self = 4;
inline bool stReplyInviteResBattle::has_self() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReplyInviteResBattle::set_has_self() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReplyInviteResBattle::clear_has_self() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReplyInviteResBattle::clear_self() {
  if (self_ != NULL) self_->::Global::stGloryUser::Clear();
  clear_has_self();
}
inline const ::Global::stGloryUser& stReplyInviteResBattle::self() const {
  return self_ != NULL ? *self_ : *default_instance_->self_;
}
inline ::Global::stGloryUser* stReplyInviteResBattle::mutable_self() {
  set_has_self();
  if (self_ == NULL) self_ = new ::Global::stGloryUser;
  return self_;
}
inline ::Global::stGloryUser* stReplyInviteResBattle::release_self() {
  clear_has_self();
  ::Global::stGloryUser* temp = self_;
  self_ = NULL;
  return temp;
}
inline void stReplyInviteResBattle::set_allocated_self(::Global::stGloryUser* self) {
  delete self_;
  self_ = self;
  if (self) {
    set_has_self();
  } else {
    clear_has_self();
  }
}

// -------------------------------------------------------------------

// stSynGloryKingTitle

// optional uint32 charId = 1;
inline bool stSynGloryKingTitle::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynGloryKingTitle::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynGloryKingTitle::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynGloryKingTitle::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynGloryKingTitle::charid() const {
  return charid_;
}
inline void stSynGloryKingTitle::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 expireTime = 2;
inline bool stSynGloryKingTitle::has_expiretime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynGloryKingTitle::set_has_expiretime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynGloryKingTitle::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynGloryKingTitle::clear_expiretime() {
  expiretime_ = 0u;
  clear_has_expiretime();
}
inline ::google::protobuf::uint32 stSynGloryKingTitle::expiretime() const {
  return expiretime_;
}
inline void stSynGloryKingTitle::set_expiretime(::google::protobuf::uint32 value) {
  set_has_expiretime();
  expiretime_ = value;
}

// -------------------------------------------------------------------

// stPubOnline

// optional string msg = 1;
inline bool stPubOnline::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPubOnline::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPubOnline::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPubOnline::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& stPubOnline::msg() const {
  return *msg_;
}
inline void stPubOnline::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stPubOnline::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stPubOnline::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPubOnline::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* stPubOnline::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPubOnline::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stResBattleSend2Pub

// optional .Global.stGloryUserDetail king = 1;
inline bool stResBattleSend2Pub::has_king() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResBattleSend2Pub::set_has_king() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResBattleSend2Pub::clear_has_king() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResBattleSend2Pub::clear_king() {
  if (king_ != NULL) king_->::Global::stGloryUserDetail::Clear();
  clear_has_king();
}
inline const ::Global::stGloryUserDetail& stResBattleSend2Pub::king() const {
  return king_ != NULL ? *king_ : *default_instance_->king_;
}
inline ::Global::stGloryUserDetail* stResBattleSend2Pub::mutable_king() {
  set_has_king();
  if (king_ == NULL) king_ = new ::Global::stGloryUserDetail;
  return king_;
}
inline ::Global::stGloryUserDetail* stResBattleSend2Pub::release_king() {
  clear_has_king();
  ::Global::stGloryUserDetail* temp = king_;
  king_ = NULL;
  return temp;
}
inline void stResBattleSend2Pub::set_allocated_king(::Global::stGloryUserDetail* king) {
  delete king_;
  king_ = king;
  if (king) {
    set_has_king();
  } else {
    clear_has_king();
  }
}

// repeated .Global.stGloryUserDetail detail = 2;
inline int stResBattleSend2Pub::detail_size() const {
  return detail_.size();
}
inline void stResBattleSend2Pub::clear_detail() {
  detail_.Clear();
}
inline const ::Global::stGloryUserDetail& stResBattleSend2Pub::detail(int index) const {
  return detail_.Get(index);
}
inline ::Global::stGloryUserDetail* stResBattleSend2Pub::mutable_detail(int index) {
  return detail_.Mutable(index);
}
inline ::Global::stGloryUserDetail* stResBattleSend2Pub::add_detail() {
  return detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stGloryUserDetail >&
stResBattleSend2Pub::detail() const {
  return detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stGloryUserDetail >*
stResBattleSend2Pub::mutable_detail() {
  return &detail_;
}

// -------------------------------------------------------------------

// stServerParamItem

// optional string name = 1;
inline bool stServerParamItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stServerParamItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stServerParamItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stServerParamItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stServerParamItem::name() const {
  return *name_;
}
inline void stServerParamItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stServerParamItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stServerParamItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stServerParamItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stServerParamItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stServerParamItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 2;
inline bool stServerParamItem::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stServerParamItem::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stServerParamItem::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stServerParamItem::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& stServerParamItem::value() const {
  return *value_;
}
inline void stServerParamItem::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void stServerParamItem::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void stServerParamItem::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stServerParamItem::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* stServerParamItem::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stServerParamItem::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stServerParamSend2Game

// repeated .Global.stServerParamItem params = 1;
inline int stServerParamSend2Game::params_size() const {
  return params_.size();
}
inline void stServerParamSend2Game::clear_params() {
  params_.Clear();
}
inline const ::Global::stServerParamItem& stServerParamSend2Game::params(int index) const {
  return params_.Get(index);
}
inline ::Global::stServerParamItem* stServerParamSend2Game::mutable_params(int index) {
  return params_.Mutable(index);
}
inline ::Global::stServerParamItem* stServerParamSend2Game::add_params() {
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stServerParamItem >&
stServerParamSend2Game::params() const {
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stServerParamItem >*
stServerParamSend2Game::mutable_params() {
  return &params_;
}

// -------------------------------------------------------------------

// stSynUserPhotoID

// optional uint32 charID = 1;
inline bool stSynUserPhotoID::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynUserPhotoID::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynUserPhotoID::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynUserPhotoID::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynUserPhotoID::charid() const {
  return charid_;
}
inline void stSynUserPhotoID::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 photoID = 2;
inline bool stSynUserPhotoID::has_photoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynUserPhotoID::set_has_photoid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynUserPhotoID::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynUserPhotoID::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynUserPhotoID::photoid() const {
  return photoid_;
}
inline void stSynUserPhotoID::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stUseLvlBox

// optional uint32 charID = 1;
inline bool stUseLvlBox::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUseLvlBox::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUseLvlBox::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUseLvlBox::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUseLvlBox::charid() const {
  return charid_;
}
inline void stUseLvlBox::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 bagtype = 2;
inline bool stUseLvlBox::has_bagtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUseLvlBox::set_has_bagtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUseLvlBox::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUseLvlBox::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stUseLvlBox::bagtype() const {
  return bagtype_;
}
inline void stUseLvlBox::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceid = 3;
inline bool stUseLvlBox::has_instanceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUseLvlBox::set_has_instanceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUseLvlBox::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUseLvlBox::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stUseLvlBox::instanceid() const {
  return instanceid_;
}
inline void stUseLvlBox::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// -------------------------------------------------------------------

// stUseLvlBoxRes

// optional uint32 charID = 1;
inline bool stUseLvlBoxRes::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUseLvlBoxRes::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUseLvlBoxRes::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUseLvlBoxRes::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUseLvlBoxRes::charid() const {
  return charid_;
}
inline void stUseLvlBoxRes::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 bagtype = 2;
inline bool stUseLvlBoxRes::has_bagtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUseLvlBoxRes::set_has_bagtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUseLvlBoxRes::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUseLvlBoxRes::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stUseLvlBoxRes::bagtype() const {
  return bagtype_;
}
inline void stUseLvlBoxRes::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceid = 3;
inline bool stUseLvlBoxRes::has_instanceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUseLvlBoxRes::set_has_instanceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUseLvlBoxRes::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUseLvlBoxRes::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stUseLvlBoxRes::instanceid() const {
  return instanceid_;
}
inline void stUseLvlBoxRes::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 maxLvl = 4;
inline bool stUseLvlBoxRes::has_maxlvl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUseLvlBoxRes::set_has_maxlvl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUseLvlBoxRes::clear_has_maxlvl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUseLvlBoxRes::clear_maxlvl() {
  maxlvl_ = 0u;
  clear_has_maxlvl();
}
inline ::google::protobuf::uint32 stUseLvlBoxRes::maxlvl() const {
  return maxlvl_;
}
inline void stUseLvlBoxRes::set_maxlvl(::google::protobuf::uint32 value) {
  set_has_maxlvl();
  maxlvl_ = value;
}

// -------------------------------------------------------------------

// stRechangeStatistics

// optional uint32 obtainDiamond = 1;
inline bool stRechangeStatistics::has_obtaindiamond() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRechangeStatistics::set_has_obtaindiamond() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRechangeStatistics::clear_has_obtaindiamond() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRechangeStatistics::clear_obtaindiamond() {
  obtaindiamond_ = 0u;
  clear_has_obtaindiamond();
}
inline ::google::protobuf::uint32 stRechangeStatistics::obtaindiamond() const {
  return obtaindiamond_;
}
inline void stRechangeStatistics::set_obtaindiamond(::google::protobuf::uint32 value) {
  set_has_obtaindiamond();
  obtaindiamond_ = value;
}

// optional uint32 giveDiamond = 2;
inline bool stRechangeStatistics::has_givediamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRechangeStatistics::set_has_givediamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRechangeStatistics::clear_has_givediamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRechangeStatistics::clear_givediamond() {
  givediamond_ = 0u;
  clear_has_givediamond();
}
inline ::google::protobuf::uint32 stRechangeStatistics::givediamond() const {
  return givediamond_;
}
inline void stRechangeStatistics::set_givediamond(::google::protobuf::uint32 value) {
  set_has_givediamond();
  givediamond_ = value;
}

// optional string data = 3;
inline bool stRechangeStatistics::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRechangeStatistics::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRechangeStatistics::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRechangeStatistics::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stRechangeStatistics::data() const {
  return *data_;
}
inline void stRechangeStatistics::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRechangeStatistics::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRechangeStatistics::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRechangeStatistics::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stRechangeStatistics::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRechangeStatistics::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charid = 4;
inline bool stRechangeStatistics::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRechangeStatistics::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRechangeStatistics::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRechangeStatistics::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRechangeStatistics::charid() const {
  return charid_;
}
inline void stRechangeStatistics::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 money = 5;
inline bool stRechangeStatistics::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRechangeStatistics::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRechangeStatistics::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRechangeStatistics::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 stRechangeStatistics::money() const {
  return money_;
}
inline void stRechangeStatistics::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// stNftItem

// optional uint32 itemid = 1;
inline bool stNftItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNftItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNftItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNftItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stNftItem::itemid() const {
  return itemid_;
}
inline void stNftItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 itemcnt = 2;
inline bool stNftItem::has_itemcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNftItem::set_has_itemcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNftItem::clear_has_itemcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNftItem::clear_itemcnt() {
  itemcnt_ = 0u;
  clear_has_itemcnt();
}
inline ::google::protobuf::uint32 stNftItem::itemcnt() const {
  return itemcnt_;
}
inline void stNftItem::set_itemcnt(::google::protobuf::uint32 value) {
  set_has_itemcnt();
  itemcnt_ = value;
}

// optional string itemname = 3;
inline bool stNftItem::has_itemname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNftItem::set_has_itemname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNftItem::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNftItem::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& stNftItem::itemname() const {
  return *itemname_;
}
inline void stNftItem::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void stNftItem::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void stNftItem::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNftItem::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  return itemname_;
}
inline ::std::string* stNftItem::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNftItem::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes url = 4;
inline bool stNftItem::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNftItem::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNftItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNftItem::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& stNftItem::url() const {
  return *url_;
}
inline void stNftItem::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void stNftItem::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void stNftItem::set_url(const void* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNftItem::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* stNftItem::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNftItem::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stGlobal2GameQueryUserNft

// optional uint32 webConnID = 1;
inline bool stGlobal2GameQueryUserNft::has_webconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGlobal2GameQueryUserNft::set_has_webconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGlobal2GameQueryUserNft::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGlobal2GameQueryUserNft::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stGlobal2GameQueryUserNft::webconnid() const {
  return webconnid_;
}
inline void stGlobal2GameQueryUserNft::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional uint32 charid = 2;
inline bool stGlobal2GameQueryUserNft::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGlobal2GameQueryUserNft::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGlobal2GameQueryUserNft::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGlobal2GameQueryUserNft::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGlobal2GameQueryUserNft::charid() const {
  return charid_;
}
inline void stGlobal2GameQueryUserNft::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGame2GlobalQueryUserNftResult

// optional uint32 webConnID = 1;
inline bool stGame2GlobalQueryUserNftResult::has_webconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGame2GlobalQueryUserNftResult::set_has_webconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGame2GlobalQueryUserNftResult::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGame2GlobalQueryUserNftResult::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stGame2GlobalQueryUserNftResult::webconnid() const {
  return webconnid_;
}
inline void stGame2GlobalQueryUserNftResult::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional uint32 charid = 2;
inline bool stGame2GlobalQueryUserNftResult::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGame2GlobalQueryUserNftResult::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGame2GlobalQueryUserNftResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGame2GlobalQueryUserNftResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGame2GlobalQueryUserNftResult::charid() const {
  return charid_;
}
inline void stGame2GlobalQueryUserNftResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 result = 3;
inline bool stGame2GlobalQueryUserNftResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGame2GlobalQueryUserNftResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGame2GlobalQueryUserNftResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGame2GlobalQueryUserNftResult::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 stGame2GlobalQueryUserNftResult::result() const {
  return result_;
}
inline void stGame2GlobalQueryUserNftResult::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// repeated .Global.stNftItem data = 4;
inline int stGame2GlobalQueryUserNftResult::data_size() const {
  return data_.size();
}
inline void stGame2GlobalQueryUserNftResult::clear_data() {
  data_.Clear();
}
inline const ::Global::stNftItem& stGame2GlobalQueryUserNftResult::data(int index) const {
  return data_.Get(index);
}
inline ::Global::stNftItem* stGame2GlobalQueryUserNftResult::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Global::stNftItem* stGame2GlobalQueryUserNftResult::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stNftItem >&
stGame2GlobalQueryUserNftResult::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stNftItem >*
stGame2GlobalQueryUserNftResult::mutable_data() {
  return &data_;
}

// optional uint32 vip = 5;
inline bool stGame2GlobalQueryUserNftResult::has_vip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGame2GlobalQueryUserNftResult::set_has_vip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGame2GlobalQueryUserNftResult::clear_has_vip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGame2GlobalQueryUserNftResult::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 stGame2GlobalQueryUserNftResult::vip() const {
  return vip_;
}
inline void stGame2GlobalQueryUserNftResult::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
}

// -------------------------------------------------------------------

// stGlobal2GameChangeNftItem

// optional uint32 webConnID = 1;
inline bool stGlobal2GameChangeNftItem::has_webconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGlobal2GameChangeNftItem::set_has_webconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGlobal2GameChangeNftItem::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGlobal2GameChangeNftItem::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stGlobal2GameChangeNftItem::webconnid() const {
  return webconnid_;
}
inline void stGlobal2GameChangeNftItem::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional uint32 charid = 2;
inline bool stGlobal2GameChangeNftItem::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGlobal2GameChangeNftItem::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGlobal2GameChangeNftItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGlobal2GameChangeNftItem::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGlobal2GameChangeNftItem::charid() const {
  return charid_;
}
inline void stGlobal2GameChangeNftItem::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 itemid = 3;
inline bool stGlobal2GameChangeNftItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGlobal2GameChangeNftItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGlobal2GameChangeNftItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGlobal2GameChangeNftItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stGlobal2GameChangeNftItem::itemid() const {
  return itemid_;
}
inline void stGlobal2GameChangeNftItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 count = 4;
inline bool stGlobal2GameChangeNftItem::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGlobal2GameChangeNftItem::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGlobal2GameChangeNftItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGlobal2GameChangeNftItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 stGlobal2GameChangeNftItem::count() const {
  return count_;
}
inline void stGlobal2GameChangeNftItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// stGame2GlobalChangeNftItemResult

// optional uint32 webConnID = 1;
inline bool stGame2GlobalChangeNftItemResult::has_webconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGame2GlobalChangeNftItemResult::set_has_webconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGame2GlobalChangeNftItemResult::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGame2GlobalChangeNftItemResult::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stGame2GlobalChangeNftItemResult::webconnid() const {
  return webconnid_;
}
inline void stGame2GlobalChangeNftItemResult::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional uint32 charid = 2;
inline bool stGame2GlobalChangeNftItemResult::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGame2GlobalChangeNftItemResult::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGame2GlobalChangeNftItemResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGame2GlobalChangeNftItemResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGame2GlobalChangeNftItemResult::charid() const {
  return charid_;
}
inline void stGame2GlobalChangeNftItemResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 result = 3;
inline bool stGame2GlobalChangeNftItemResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGame2GlobalChangeNftItemResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGame2GlobalChangeNftItemResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGame2GlobalChangeNftItemResult::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 stGame2GlobalChangeNftItemResult::result() const {
  return result_;
}
inline void stGame2GlobalChangeNftItemResult::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stGame2GlobalNftVipGift

// optional uint32 charid = 1;
inline bool stGame2GlobalNftVipGift::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGame2GlobalNftVipGift::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGame2GlobalNftVipGift::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGame2GlobalNftVipGift::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGame2GlobalNftVipGift::charid() const {
  return charid_;
}
inline void stGame2GlobalNftVipGift::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .Global.stSendMailAttach attaches = 2;
inline int stGame2GlobalNftVipGift::attaches_size() const {
  return attaches_.size();
}
inline void stGame2GlobalNftVipGift::clear_attaches() {
  attaches_.Clear();
}
inline const ::Global::stSendMailAttach& stGame2GlobalNftVipGift::attaches(int index) const {
  return attaches_.Get(index);
}
inline ::Global::stSendMailAttach* stGame2GlobalNftVipGift::mutable_attaches(int index) {
  return attaches_.Mutable(index);
}
inline ::Global::stSendMailAttach* stGame2GlobalNftVipGift::add_attaches() {
  return attaches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stSendMailAttach >&
stGame2GlobalNftVipGift::attaches() const {
  return attaches_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stSendMailAttach >*
stGame2GlobalNftVipGift::mutable_attaches() {
  return &attaches_;
}

// optional uint32 vipLv = 3;
inline bool stGame2GlobalNftVipGift::has_viplv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGame2GlobalNftVipGift::set_has_viplv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGame2GlobalNftVipGift::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGame2GlobalNftVipGift::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stGame2GlobalNftVipGift::viplv() const {
  return viplv_;
}
inline void stGame2GlobalNftVipGift::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// -------------------------------------------------------------------

// stRetNftOfflineUserData

// optional uint32 charid = 1;
inline bool stRetNftOfflineUserData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetNftOfflineUserData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetNftOfflineUserData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetNftOfflineUserData::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRetNftOfflineUserData::charid() const {
  return charid_;
}
inline void stRetNftOfflineUserData::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 dataSize = 2;
inline bool stRetNftOfflineUserData::has_datasize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetNftOfflineUserData::set_has_datasize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetNftOfflineUserData::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetNftOfflineUserData::clear_datasize() {
  datasize_ = 0u;
  clear_has_datasize();
}
inline ::google::protobuf::uint32 stRetNftOfflineUserData::datasize() const {
  return datasize_;
}
inline void stRetNftOfflineUserData::set_datasize(::google::protobuf::uint32 value) {
  set_has_datasize();
  datasize_ = value;
}

// optional bytes data = 3;
inline bool stRetNftOfflineUserData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetNftOfflineUserData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetNftOfflineUserData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetNftOfflineUserData::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stRetNftOfflineUserData::data() const {
  return *data_;
}
inline void stRetNftOfflineUserData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRetNftOfflineUserData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRetNftOfflineUserData::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetNftOfflineUserData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stRetNftOfflineUserData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetNftOfflineUserData::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 webConnID = 4;
inline bool stRetNftOfflineUserData::has_webconnid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetNftOfflineUserData::set_has_webconnid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetNftOfflineUserData::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetNftOfflineUserData::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stRetNftOfflineUserData::webconnid() const {
  return webconnid_;
}
inline void stRetNftOfflineUserData::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stRetChangeNftOfflineUserData

// optional uint32 charid = 1;
inline bool stRetChangeNftOfflineUserData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetChangeNftOfflineUserData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetChangeNftOfflineUserData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetChangeNftOfflineUserData::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRetChangeNftOfflineUserData::charid() const {
  return charid_;
}
inline void stRetChangeNftOfflineUserData::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 dataSize = 2;
inline bool stRetChangeNftOfflineUserData::has_datasize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetChangeNftOfflineUserData::set_has_datasize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetChangeNftOfflineUserData::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetChangeNftOfflineUserData::clear_datasize() {
  datasize_ = 0u;
  clear_has_datasize();
}
inline ::google::protobuf::uint32 stRetChangeNftOfflineUserData::datasize() const {
  return datasize_;
}
inline void stRetChangeNftOfflineUserData::set_datasize(::google::protobuf::uint32 value) {
  set_has_datasize();
  datasize_ = value;
}

// optional bytes data = 3;
inline bool stRetChangeNftOfflineUserData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetChangeNftOfflineUserData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetChangeNftOfflineUserData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetChangeNftOfflineUserData::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stRetChangeNftOfflineUserData::data() const {
  return *data_;
}
inline void stRetChangeNftOfflineUserData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRetChangeNftOfflineUserData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRetChangeNftOfflineUserData::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetChangeNftOfflineUserData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stRetChangeNftOfflineUserData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetChangeNftOfflineUserData::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 webConnID = 4;
inline bool stRetChangeNftOfflineUserData::has_webconnid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetChangeNftOfflineUserData::set_has_webconnid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetChangeNftOfflineUserData::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetChangeNftOfflineUserData::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stRetChangeNftOfflineUserData::webconnid() const {
  return webconnid_;
}
inline void stRetChangeNftOfflineUserData::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional uint32 itemID = 5;
inline bool stRetChangeNftOfflineUserData::has_itemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetChangeNftOfflineUserData::set_has_itemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetChangeNftOfflineUserData::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetChangeNftOfflineUserData::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stRetChangeNftOfflineUserData::itemid() const {
  return itemid_;
}
inline void stRetChangeNftOfflineUserData::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 count = 6;
inline bool stRetChangeNftOfflineUserData::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetChangeNftOfflineUserData::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetChangeNftOfflineUserData::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetChangeNftOfflineUserData::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 stRetChangeNftOfflineUserData::count() const {
  return count_;
}
inline void stRetChangeNftOfflineUserData::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// stSendUserLog

// repeated string logParam = 1;
inline int stSendUserLog::logparam_size() const {
  return logparam_.size();
}
inline void stSendUserLog::clear_logparam() {
  logparam_.Clear();
}
inline const ::std::string& stSendUserLog::logparam(int index) const {
  return logparam_.Get(index);
}
inline ::std::string* stSendUserLog::mutable_logparam(int index) {
  return logparam_.Mutable(index);
}
inline void stSendUserLog::set_logparam(int index, const ::std::string& value) {
  logparam_.Mutable(index)->assign(value);
}
inline void stSendUserLog::set_logparam(int index, const char* value) {
  logparam_.Mutable(index)->assign(value);
}
inline void stSendUserLog::set_logparam(int index, const char* value, size_t size) {
  logparam_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendUserLog::add_logparam() {
  return logparam_.Add();
}
inline void stSendUserLog::add_logparam(const ::std::string& value) {
  logparam_.Add()->assign(value);
}
inline void stSendUserLog::add_logparam(const char* value) {
  logparam_.Add()->assign(value);
}
inline void stSendUserLog::add_logparam(const char* value, size_t size) {
  logparam_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
stSendUserLog::logparam() const {
  return logparam_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
stSendUserLog::mutable_logparam() {
  return &logparam_;
}

// -------------------------------------------------------------------

// stReqKillUserOut

// optional uint32 charID = 1;
inline bool stReqKillUserOut::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqKillUserOut::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqKillUserOut::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqKillUserOut::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqKillUserOut::charid() const {
  return charid_;
}
inline void stReqKillUserOut::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 webConnID = 2;
inline bool stReqKillUserOut::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqKillUserOut::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqKillUserOut::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqKillUserOut::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stReqKillUserOut::webconnid() const {
  return webconnid_;
}
inline void stReqKillUserOut::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stKillUserOutResult

// optional bool result = 1;
inline bool stKillUserOutResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stKillUserOutResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stKillUserOutResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stKillUserOutResult::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool stKillUserOutResult::result() const {
  return result_;
}
inline void stKillUserOutResult::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional uint32 webConnID = 2;
inline bool stKillUserOutResult::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stKillUserOutResult::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stKillUserOutResult::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stKillUserOutResult::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stKillUserOutResult::webconnid() const {
  return webconnid_;
}
inline void stKillUserOutResult::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stReqSetUserGMType

// optional uint32 charID = 1;
inline bool stReqSetUserGMType::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSetUserGMType::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSetUserGMType::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSetUserGMType::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqSetUserGMType::charid() const {
  return charid_;
}
inline void stReqSetUserGMType::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 gmValue = 2;
inline bool stReqSetUserGMType::has_gmvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqSetUserGMType::set_has_gmvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqSetUserGMType::clear_has_gmvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqSetUserGMType::clear_gmvalue() {
  gmvalue_ = 0u;
  clear_has_gmvalue();
}
inline ::google::protobuf::uint32 stReqSetUserGMType::gmvalue() const {
  return gmvalue_;
}
inline void stReqSetUserGMType::set_gmvalue(::google::protobuf::uint32 value) {
  set_has_gmvalue();
  gmvalue_ = value;
}

// optional uint32 webConnID = 3;
inline bool stReqSetUserGMType::has_webconnid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqSetUserGMType::set_has_webconnid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqSetUserGMType::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqSetUserGMType::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stReqSetUserGMType::webconnid() const {
  return webconnid_;
}
inline void stReqSetUserGMType::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stSetUserGMTypeResult

// optional bool result = 1;
inline bool stSetUserGMTypeResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSetUserGMTypeResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSetUserGMTypeResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSetUserGMTypeResult::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool stSetUserGMTypeResult::result() const {
  return result_;
}
inline void stSetUserGMTypeResult::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional uint32 webConnID = 2;
inline bool stSetUserGMTypeResult::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSetUserGMTypeResult::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSetUserGMTypeResult::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSetUserGMTypeResult::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stSetUserGMTypeResult::webconnid() const {
  return webconnid_;
}
inline void stSetUserGMTypeResult::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stReqBanUser

// optional uint32 charID = 1;
inline bool stReqBanUser::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBanUser::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBanUser::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBanUser::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqBanUser::charid() const {
  return charid_;
}
inline void stReqBanUser::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 webConnID = 2;
inline bool stReqBanUser::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqBanUser::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqBanUser::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqBanUser::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stReqBanUser::webconnid() const {
  return webconnid_;
}
inline void stReqBanUser::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional bool ban = 3;
inline bool stReqBanUser::has_ban() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqBanUser::set_has_ban() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqBanUser::clear_has_ban() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqBanUser::clear_ban() {
  ban_ = false;
  clear_has_ban();
}
inline bool stReqBanUser::ban() const {
  return ban_;
}
inline void stReqBanUser::set_ban(bool value) {
  set_has_ban();
  ban_ = value;
}

// -------------------------------------------------------------------

// stBanUserResult

// optional uint32 webConnID = 1;
inline bool stBanUserResult::has_webconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBanUserResult::set_has_webconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBanUserResult::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBanUserResult::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stBanUserResult::webconnid() const {
  return webconnid_;
}
inline void stBanUserResult::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional bool result = 2;
inline bool stBanUserResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBanUserResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBanUserResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBanUserResult::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool stBanUserResult::result() const {
  return result_;
}
inline void stBanUserResult::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSendMailAttach

// optional uint32 itemID = 1;
inline bool stSendMailAttach::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendMailAttach::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendMailAttach::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendMailAttach::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stSendMailAttach::itemid() const {
  return itemid_;
}
inline void stSendMailAttach::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stSendMailAttach::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendMailAttach::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendMailAttach::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendMailAttach::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSendMailAttach::num() const {
  return num_;
}
inline void stSendMailAttach::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSendMail2User

// optional string title = 1;
inline bool stSendMail2User::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendMail2User::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendMail2User::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendMail2User::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& stSendMail2User::title() const {
  return *title_;
}
inline void stSendMail2User::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void stSendMail2User::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void stSendMail2User::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendMail2User::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* stSendMail2User::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendMail2User::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 2;
inline bool stSendMail2User::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendMail2User::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendMail2User::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendMail2User::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& stSendMail2User::content() const {
  return *content_;
}
inline void stSendMail2User::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stSendMail2User::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stSendMail2User::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendMail2User::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* stSendMail2User::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendMail2User::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 userList = 3;
inline int stSendMail2User::userlist_size() const {
  return userlist_.size();
}
inline void stSendMail2User::clear_userlist() {
  userlist_.Clear();
}
inline ::google::protobuf::uint32 stSendMail2User::userlist(int index) const {
  return userlist_.Get(index);
}
inline void stSendMail2User::set_userlist(int index, ::google::protobuf::uint32 value) {
  userlist_.Set(index, value);
}
inline void stSendMail2User::add_userlist(::google::protobuf::uint32 value) {
  userlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stSendMail2User::userlist() const {
  return userlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stSendMail2User::mutable_userlist() {
  return &userlist_;
}

// repeated .Global.stSendMailAttach attaches = 4;
inline int stSendMail2User::attaches_size() const {
  return attaches_.size();
}
inline void stSendMail2User::clear_attaches() {
  attaches_.Clear();
}
inline const ::Global::stSendMailAttach& stSendMail2User::attaches(int index) const {
  return attaches_.Get(index);
}
inline ::Global::stSendMailAttach* stSendMail2User::mutable_attaches(int index) {
  return attaches_.Mutable(index);
}
inline ::Global::stSendMailAttach* stSendMail2User::add_attaches() {
  return attaches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stSendMailAttach >&
stSendMail2User::attaches() const {
  return attaches_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stSendMailAttach >*
stSendMail2User::mutable_attaches() {
  return &attaches_;
}

// optional uint32 webConnID = 5;
inline bool stSendMail2User::has_webconnid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSendMail2User::set_has_webconnid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSendMail2User::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSendMail2User::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stSendMail2User::webconnid() const {
  return webconnid_;
}
inline void stSendMail2User::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional string tag = 6;
inline bool stSendMail2User::has_tag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSendMail2User::set_has_tag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSendMail2User::clear_has_tag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSendMail2User::clear_tag() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& stSendMail2User::tag() const {
  return *tag_;
}
inline void stSendMail2User::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void stSendMail2User::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void stSendMail2User::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendMail2User::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  return tag_;
}
inline ::std::string* stSendMail2User::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendMail2User::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool bAll = 7;
inline bool stSendMail2User::has_ball() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSendMail2User::set_has_ball() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSendMail2User::clear_has_ball() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSendMail2User::clear_ball() {
  ball_ = false;
  clear_has_ball();
}
inline bool stSendMail2User::ball() const {
  return ball_;
}
inline void stSendMail2User::set_ball(bool value) {
  set_has_ball();
  ball_ = value;
}

// -------------------------------------------------------------------

// stSendMail2UserResult

// optional bool result = 1;
inline bool stSendMail2UserResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendMail2UserResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendMail2UserResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendMail2UserResult::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool stSendMail2UserResult::result() const {
  return result_;
}
inline void stSendMail2UserResult::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional uint32 webConnID = 2;
inline bool stSendMail2UserResult::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendMail2UserResult::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendMail2UserResult::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendMail2UserResult::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stSendMail2UserResult::webconnid() const {
  return webconnid_;
}
inline void stSendMail2UserResult::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional string tag = 3;
inline bool stSendMail2UserResult::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSendMail2UserResult::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSendMail2UserResult::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSendMail2UserResult::clear_tag() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& stSendMail2UserResult::tag() const {
  return *tag_;
}
inline void stSendMail2UserResult::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void stSendMail2UserResult::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void stSendMail2UserResult::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendMail2UserResult::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  return tag_;
}
inline ::std::string* stSendMail2UserResult::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendMail2UserResult::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stWebMotifyUserInfo

// optional uint32 charID = 1;
inline bool stWebMotifyUserInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stWebMotifyUserInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stWebMotifyUserInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stWebMotifyUserInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stWebMotifyUserInfo::charid() const {
  return charid_;
}
inline void stWebMotifyUserInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 newbieGuideID = 2;
inline bool stWebMotifyUserInfo::has_newbieguideid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stWebMotifyUserInfo::set_has_newbieguideid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stWebMotifyUserInfo::clear_has_newbieguideid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stWebMotifyUserInfo::clear_newbieguideid() {
  newbieguideid_ = 0u;
  clear_has_newbieguideid();
}
inline ::google::protobuf::uint32 stWebMotifyUserInfo::newbieguideid() const {
  return newbieguideid_;
}
inline void stWebMotifyUserInfo::set_newbieguideid(::google::protobuf::uint32 value) {
  set_has_newbieguideid();
  newbieguideid_ = value;
}

// optional uint32 webConnID = 3;
inline bool stWebMotifyUserInfo::has_webconnid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stWebMotifyUserInfo::set_has_webconnid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stWebMotifyUserInfo::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stWebMotifyUserInfo::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stWebMotifyUserInfo::webconnid() const {
  return webconnid_;
}
inline void stWebMotifyUserInfo::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional uint32 goldCoin = 4;
inline bool stWebMotifyUserInfo::has_goldcoin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stWebMotifyUserInfo::set_has_goldcoin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stWebMotifyUserInfo::clear_has_goldcoin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stWebMotifyUserInfo::clear_goldcoin() {
  goldcoin_ = 0u;
  clear_has_goldcoin();
}
inline ::google::protobuf::uint32 stWebMotifyUserInfo::goldcoin() const {
  return goldcoin_;
}
inline void stWebMotifyUserInfo::set_goldcoin(::google::protobuf::uint32 value) {
  set_has_goldcoin();
  goldcoin_ = value;
}

// optional uint32 diamond = 5;
inline bool stWebMotifyUserInfo::has_diamond() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stWebMotifyUserInfo::set_has_diamond() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stWebMotifyUserInfo::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stWebMotifyUserInfo::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 stWebMotifyUserInfo::diamond() const {
  return diamond_;
}
inline void stWebMotifyUserInfo::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional uint32 vipPoint = 6;
inline bool stWebMotifyUserInfo::has_vippoint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stWebMotifyUserInfo::set_has_vippoint() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stWebMotifyUserInfo::clear_has_vippoint() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stWebMotifyUserInfo::clear_vippoint() {
  vippoint_ = 0u;
  clear_has_vippoint();
}
inline ::google::protobuf::uint32 stWebMotifyUserInfo::vippoint() const {
  return vippoint_;
}
inline void stWebMotifyUserInfo::set_vippoint(::google::protobuf::uint32 value) {
  set_has_vippoint();
  vippoint_ = value;
}

// -------------------------------------------------------------------

// stWebMotifyUserInfoRet

// optional uint32 charID = 1;
inline bool stWebMotifyUserInfoRet::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stWebMotifyUserInfoRet::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stWebMotifyUserInfoRet::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stWebMotifyUserInfoRet::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stWebMotifyUserInfoRet::charid() const {
  return charid_;
}
inline void stWebMotifyUserInfoRet::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 webConnID = 2;
inline bool stWebMotifyUserInfoRet::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stWebMotifyUserInfoRet::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stWebMotifyUserInfoRet::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stWebMotifyUserInfoRet::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stWebMotifyUserInfoRet::webconnid() const {
  return webconnid_;
}
inline void stWebMotifyUserInfoRet::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional bool result = 3;
inline bool stWebMotifyUserInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stWebMotifyUserInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stWebMotifyUserInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stWebMotifyUserInfoRet::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool stWebMotifyUserInfoRet::result() const {
  return result_;
}
inline void stWebMotifyUserInfoRet::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stAddOrUpdateNotice

// optional uint32 noticeID = 1;
inline bool stAddOrUpdateNotice::has_noticeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddOrUpdateNotice::set_has_noticeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddOrUpdateNotice::clear_has_noticeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddOrUpdateNotice::clear_noticeid() {
  noticeid_ = 0u;
  clear_has_noticeid();
}
inline ::google::protobuf::uint32 stAddOrUpdateNotice::noticeid() const {
  return noticeid_;
}
inline void stAddOrUpdateNotice::set_noticeid(::google::protobuf::uint32 value) {
  set_has_noticeid();
  noticeid_ = value;
}

// optional int32 interval = 2;
inline bool stAddOrUpdateNotice::has_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAddOrUpdateNotice::set_has_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAddOrUpdateNotice::clear_has_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAddOrUpdateNotice::clear_interval() {
  interval_ = 0;
  clear_has_interval();
}
inline ::google::protobuf::int32 stAddOrUpdateNotice::interval() const {
  return interval_;
}
inline void stAddOrUpdateNotice::set_interval(::google::protobuf::int32 value) {
  set_has_interval();
  interval_ = value;
}

// optional uint32 num = 3;
inline bool stAddOrUpdateNotice::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAddOrUpdateNotice::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAddOrUpdateNotice::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAddOrUpdateNotice::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stAddOrUpdateNotice::num() const {
  return num_;
}
inline void stAddOrUpdateNotice::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional string content = 4;
inline bool stAddOrUpdateNotice::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stAddOrUpdateNotice::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stAddOrUpdateNotice::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stAddOrUpdateNotice::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& stAddOrUpdateNotice::content() const {
  return *content_;
}
inline void stAddOrUpdateNotice::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stAddOrUpdateNotice::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stAddOrUpdateNotice::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stAddOrUpdateNotice::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* stAddOrUpdateNotice::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stAddOrUpdateNotice::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Global.eNoticeOp op = 5;
inline bool stAddOrUpdateNotice::has_op() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stAddOrUpdateNotice::set_has_op() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stAddOrUpdateNotice::clear_has_op() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stAddOrUpdateNotice::clear_op() {
  op_ = 1;
  clear_has_op();
}
inline ::Global::eNoticeOp stAddOrUpdateNotice::op() const {
  return static_cast< ::Global::eNoticeOp >(op_);
}
inline void stAddOrUpdateNotice::set_op(::Global::eNoticeOp value) {
  assert(::Global::eNoticeOp_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional uint32 noticePosition = 6;
inline bool stAddOrUpdateNotice::has_noticeposition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stAddOrUpdateNotice::set_has_noticeposition() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stAddOrUpdateNotice::clear_has_noticeposition() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stAddOrUpdateNotice::clear_noticeposition() {
  noticeposition_ = 0u;
  clear_has_noticeposition();
}
inline ::google::protobuf::uint32 stAddOrUpdateNotice::noticeposition() const {
  return noticeposition_;
}
inline void stAddOrUpdateNotice::set_noticeposition(::google::protobuf::uint32 value) {
  set_has_noticeposition();
  noticeposition_ = value;
}

// optional uint32 beginTime = 7;
inline bool stAddOrUpdateNotice::has_begintime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stAddOrUpdateNotice::set_has_begintime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stAddOrUpdateNotice::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stAddOrUpdateNotice::clear_begintime() {
  begintime_ = 0u;
  clear_has_begintime();
}
inline ::google::protobuf::uint32 stAddOrUpdateNotice::begintime() const {
  return begintime_;
}
inline void stAddOrUpdateNotice::set_begintime(::google::protobuf::uint32 value) {
  set_has_begintime();
  begintime_ = value;
}

// -------------------------------------------------------------------

// stDelNotice

// optional uint32 noticeID = 1;
inline bool stDelNotice::has_noticeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDelNotice::set_has_noticeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDelNotice::clear_has_noticeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDelNotice::clear_noticeid() {
  noticeid_ = 0u;
  clear_has_noticeid();
}
inline ::google::protobuf::uint32 stDelNotice::noticeid() const {
  return noticeid_;
}
inline void stDelNotice::set_noticeid(::google::protobuf::uint32 value) {
  set_has_noticeid();
  noticeid_ = value;
}

// -------------------------------------------------------------------

// stWebNotifyRechargeInfo

// optional uint32 charID = 1;
inline bool stWebNotifyRechargeInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stWebNotifyRechargeInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stWebNotifyRechargeInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stWebNotifyRechargeInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stWebNotifyRechargeInfo::charid() const {
  return charid_;
}
inline void stWebNotifyRechargeInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 money = 2;
inline bool stWebNotifyRechargeInfo::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stWebNotifyRechargeInfo::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stWebNotifyRechargeInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stWebNotifyRechargeInfo::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 stWebNotifyRechargeInfo::money() const {
  return money_;
}
inline void stWebNotifyRechargeInfo::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// optional uint32 itemID = 3;
inline bool stWebNotifyRechargeInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stWebNotifyRechargeInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stWebNotifyRechargeInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stWebNotifyRechargeInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stWebNotifyRechargeInfo::itemid() const {
  return itemid_;
}
inline void stWebNotifyRechargeInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string tid = 4;
inline bool stWebNotifyRechargeInfo::has_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stWebNotifyRechargeInfo::set_has_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stWebNotifyRechargeInfo::clear_has_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stWebNotifyRechargeInfo::clear_tid() {
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    tid_->clear();
  }
  clear_has_tid();
}
inline const ::std::string& stWebNotifyRechargeInfo::tid() const {
  return *tid_;
}
inline void stWebNotifyRechargeInfo::set_tid(const ::std::string& value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
}
inline void stWebNotifyRechargeInfo::set_tid(const char* value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
}
inline void stWebNotifyRechargeInfo::set_tid(const char* value, size_t size) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stWebNotifyRechargeInfo::mutable_tid() {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  return tid_;
}
inline ::std::string* stWebNotifyRechargeInfo::release_tid() {
  clear_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tid_;
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stWebNotifyRechargeInfo::set_allocated_tid(::std::string* tid) {
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    delete tid_;
  }
  if (tid) {
    set_has_tid();
    tid_ = tid;
  } else {
    clear_has_tid();
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string account = 5;
inline bool stWebNotifyRechargeInfo::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stWebNotifyRechargeInfo::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stWebNotifyRechargeInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stWebNotifyRechargeInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stWebNotifyRechargeInfo::account() const {
  return *account_;
}
inline void stWebNotifyRechargeInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stWebNotifyRechargeInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stWebNotifyRechargeInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stWebNotifyRechargeInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stWebNotifyRechargeInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stWebNotifyRechargeInfo::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 opID = 6;
inline bool stWebNotifyRechargeInfo::has_opid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stWebNotifyRechargeInfo::set_has_opid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stWebNotifyRechargeInfo::clear_has_opid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stWebNotifyRechargeInfo::clear_opid() {
  opid_ = 0u;
  clear_has_opid();
}
inline ::google::protobuf::uint32 stWebNotifyRechargeInfo::opid() const {
  return opid_;
}
inline void stWebNotifyRechargeInfo::set_opid(::google::protobuf::uint32 value) {
  set_has_opid();
  opid_ = value;
}

// optional bool isExtend = 7;
inline bool stWebNotifyRechargeInfo::has_isextend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stWebNotifyRechargeInfo::set_has_isextend() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stWebNotifyRechargeInfo::clear_has_isextend() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stWebNotifyRechargeInfo::clear_isextend() {
  isextend_ = false;
  clear_has_isextend();
}
inline bool stWebNotifyRechargeInfo::isextend() const {
  return isextend_;
}
inline void stWebNotifyRechargeInfo::set_isextend(bool value) {
  set_has_isextend();
  isextend_ = value;
}

// optional string data = 8;
inline bool stWebNotifyRechargeInfo::has_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stWebNotifyRechargeInfo::set_has_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stWebNotifyRechargeInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stWebNotifyRechargeInfo::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stWebNotifyRechargeInfo::data() const {
  return *data_;
}
inline void stWebNotifyRechargeInfo::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stWebNotifyRechargeInfo::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stWebNotifyRechargeInfo::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stWebNotifyRechargeInfo::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stWebNotifyRechargeInfo::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stWebNotifyRechargeInfo::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 payChannel = 9;
inline bool stWebNotifyRechargeInfo::has_paychannel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stWebNotifyRechargeInfo::set_has_paychannel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stWebNotifyRechargeInfo::clear_has_paychannel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stWebNotifyRechargeInfo::clear_paychannel() {
  paychannel_ = 0u;
  clear_has_paychannel();
}
inline ::google::protobuf::uint32 stWebNotifyRechargeInfo::paychannel() const {
  return paychannel_;
}
inline void stWebNotifyRechargeInfo::set_paychannel(::google::protobuf::uint32 value) {
  set_has_paychannel();
  paychannel_ = value;
}

// -------------------------------------------------------------------

// stAddGiftBagCfg

// optional uint32 id = 1;
inline bool stAddGiftBagCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddGiftBagCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddGiftBagCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddGiftBagCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stAddGiftBagCfg::id() const {
  return id_;
}
inline void stAddGiftBagCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string content = 2;
inline bool stAddGiftBagCfg::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAddGiftBagCfg::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAddGiftBagCfg::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAddGiftBagCfg::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& stAddGiftBagCfg::content() const {
  return *content_;
}
inline void stAddGiftBagCfg::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stAddGiftBagCfg::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stAddGiftBagCfg::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stAddGiftBagCfg::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* stAddGiftBagCfg::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stAddGiftBagCfg::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stDelGiftBagCfg

// optional uint32 id = 1;
inline bool stDelGiftBagCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDelGiftBagCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDelGiftBagCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDelGiftBagCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stDelGiftBagCfg::id() const {
  return id_;
}
inline void stDelGiftBagCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stAddBlackAndWhite

// repeated string blackList = 1;
inline int stAddBlackAndWhite::blacklist_size() const {
  return blacklist_.size();
}
inline void stAddBlackAndWhite::clear_blacklist() {
  blacklist_.Clear();
}
inline const ::std::string& stAddBlackAndWhite::blacklist(int index) const {
  return blacklist_.Get(index);
}
inline ::std::string* stAddBlackAndWhite::mutable_blacklist(int index) {
  return blacklist_.Mutable(index);
}
inline void stAddBlackAndWhite::set_blacklist(int index, const ::std::string& value) {
  blacklist_.Mutable(index)->assign(value);
}
inline void stAddBlackAndWhite::set_blacklist(int index, const char* value) {
  blacklist_.Mutable(index)->assign(value);
}
inline void stAddBlackAndWhite::set_blacklist(int index, const char* value, size_t size) {
  blacklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stAddBlackAndWhite::add_blacklist() {
  return blacklist_.Add();
}
inline void stAddBlackAndWhite::add_blacklist(const ::std::string& value) {
  blacklist_.Add()->assign(value);
}
inline void stAddBlackAndWhite::add_blacklist(const char* value) {
  blacklist_.Add()->assign(value);
}
inline void stAddBlackAndWhite::add_blacklist(const char* value, size_t size) {
  blacklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
stAddBlackAndWhite::blacklist() const {
  return blacklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
stAddBlackAndWhite::mutable_blacklist() {
  return &blacklist_;
}

// repeated string whiteList = 2;
inline int stAddBlackAndWhite::whitelist_size() const {
  return whitelist_.size();
}
inline void stAddBlackAndWhite::clear_whitelist() {
  whitelist_.Clear();
}
inline const ::std::string& stAddBlackAndWhite::whitelist(int index) const {
  return whitelist_.Get(index);
}
inline ::std::string* stAddBlackAndWhite::mutable_whitelist(int index) {
  return whitelist_.Mutable(index);
}
inline void stAddBlackAndWhite::set_whitelist(int index, const ::std::string& value) {
  whitelist_.Mutable(index)->assign(value);
}
inline void stAddBlackAndWhite::set_whitelist(int index, const char* value) {
  whitelist_.Mutable(index)->assign(value);
}
inline void stAddBlackAndWhite::set_whitelist(int index, const char* value, size_t size) {
  whitelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stAddBlackAndWhite::add_whitelist() {
  return whitelist_.Add();
}
inline void stAddBlackAndWhite::add_whitelist(const ::std::string& value) {
  whitelist_.Add()->assign(value);
}
inline void stAddBlackAndWhite::add_whitelist(const char* value) {
  whitelist_.Add()->assign(value);
}
inline void stAddBlackAndWhite::add_whitelist(const char* value, size_t size) {
  whitelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
stAddBlackAndWhite::whitelist() const {
  return whitelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
stAddBlackAndWhite::mutable_whitelist() {
  return &whitelist_;
}

// -------------------------------------------------------------------

// stSetServerMaintenanceTime

// optional string opTime = 1;
inline bool stSetServerMaintenanceTime::has_optime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSetServerMaintenanceTime::set_has_optime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSetServerMaintenanceTime::clear_has_optime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSetServerMaintenanceTime::clear_optime() {
  if (optime_ != &::google::protobuf::internal::kEmptyString) {
    optime_->clear();
  }
  clear_has_optime();
}
inline const ::std::string& stSetServerMaintenanceTime::optime() const {
  return *optime_;
}
inline void stSetServerMaintenanceTime::set_optime(const ::std::string& value) {
  set_has_optime();
  if (optime_ == &::google::protobuf::internal::kEmptyString) {
    optime_ = new ::std::string;
  }
  optime_->assign(value);
}
inline void stSetServerMaintenanceTime::set_optime(const char* value) {
  set_has_optime();
  if (optime_ == &::google::protobuf::internal::kEmptyString) {
    optime_ = new ::std::string;
  }
  optime_->assign(value);
}
inline void stSetServerMaintenanceTime::set_optime(const char* value, size_t size) {
  set_has_optime();
  if (optime_ == &::google::protobuf::internal::kEmptyString) {
    optime_ = new ::std::string;
  }
  optime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSetServerMaintenanceTime::mutable_optime() {
  set_has_optime();
  if (optime_ == &::google::protobuf::internal::kEmptyString) {
    optime_ = new ::std::string;
  }
  return optime_;
}
inline ::std::string* stSetServerMaintenanceTime::release_optime() {
  clear_has_optime();
  if (optime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = optime_;
    optime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSetServerMaintenanceTime::set_allocated_optime(::std::string* optime) {
  if (optime_ != &::google::protobuf::internal::kEmptyString) {
    delete optime_;
  }
  if (optime) {
    set_has_optime();
    optime_ = optime;
  } else {
    clear_has_optime();
    optime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 opDuring = 2;
inline bool stSetServerMaintenanceTime::has_opduring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSetServerMaintenanceTime::set_has_opduring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSetServerMaintenanceTime::clear_has_opduring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSetServerMaintenanceTime::clear_opduring() {
  opduring_ = 0u;
  clear_has_opduring();
}
inline ::google::protobuf::uint32 stSetServerMaintenanceTime::opduring() const {
  return opduring_;
}
inline void stSetServerMaintenanceTime::set_opduring(::google::protobuf::uint32 value) {
  set_has_opduring();
  opduring_ = value;
}

// -------------------------------------------------------------------

// stGetSvrConfig

// optional uint32 webConnID = 1;
inline bool stGetSvrConfig::has_webconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGetSvrConfig::set_has_webconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGetSvrConfig::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGetSvrConfig::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stGetSvrConfig::webconnid() const {
  return webconnid_;
}
inline void stGetSvrConfig::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stRetSvrConfig

// repeated .Global.stServerCfgPair cfgPair = 1;
inline int stRetSvrConfig::cfgpair_size() const {
  return cfgpair_.size();
}
inline void stRetSvrConfig::clear_cfgpair() {
  cfgpair_.Clear();
}
inline const ::Global::stServerCfgPair& stRetSvrConfig::cfgpair(int index) const {
  return cfgpair_.Get(index);
}
inline ::Global::stServerCfgPair* stRetSvrConfig::mutable_cfgpair(int index) {
  return cfgpair_.Mutable(index);
}
inline ::Global::stServerCfgPair* stRetSvrConfig::add_cfgpair() {
  return cfgpair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >&
stRetSvrConfig::cfgpair() const {
  return cfgpair_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >*
stRetSvrConfig::mutable_cfgpair() {
  return &cfgpair_;
}

// optional uint32 webConnID = 2;
inline bool stRetSvrConfig::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetSvrConfig::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetSvrConfig::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetSvrConfig::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stRetSvrConfig::webconnid() const {
  return webconnid_;
}
inline void stRetSvrConfig::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stUpdateSvrCfg

// repeated .Global.stServerCfgPair cfgPair = 1;
inline int stUpdateSvrCfg::cfgpair_size() const {
  return cfgpair_.size();
}
inline void stUpdateSvrCfg::clear_cfgpair() {
  cfgpair_.Clear();
}
inline const ::Global::stServerCfgPair& stUpdateSvrCfg::cfgpair(int index) const {
  return cfgpair_.Get(index);
}
inline ::Global::stServerCfgPair* stUpdateSvrCfg::mutable_cfgpair(int index) {
  return cfgpair_.Mutable(index);
}
inline ::Global::stServerCfgPair* stUpdateSvrCfg::add_cfgpair() {
  return cfgpair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >&
stUpdateSvrCfg::cfgpair() const {
  return cfgpair_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stServerCfgPair >*
stUpdateSvrCfg::mutable_cfgpair() {
  return &cfgpair_;
}

// -------------------------------------------------------------------

// stNotifyWebOnlineNum

// optional uint32 num = 1;
inline bool stNotifyWebOnlineNum::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyWebOnlineNum::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyWebOnlineNum::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyWebOnlineNum::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stNotifyWebOnlineNum::num() const {
  return num_;
}
inline void stNotifyWebOnlineNum::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stEnterSelectPage

// optional string account = 1;
inline bool stEnterSelectPage::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEnterSelectPage::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEnterSelectPage::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEnterSelectPage::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stEnterSelectPage::account() const {
  return *account_;
}
inline void stEnterSelectPage::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stEnterSelectPage::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stEnterSelectPage::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stEnterSelectPage::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stEnterSelectPage::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stEnterSelectPage::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceID = 2;
inline bool stEnterSelectPage::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEnterSelectPage::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEnterSelectPage::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEnterSelectPage::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& stEnterSelectPage::deviceid() const {
  return *deviceid_;
}
inline void stEnterSelectPage::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stEnterSelectPage::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stEnterSelectPage::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stEnterSelectPage::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* stEnterSelectPage::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stEnterSelectPage::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 opID = 3;
inline bool stEnterSelectPage::has_opid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stEnterSelectPage::set_has_opid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stEnterSelectPage::clear_has_opid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stEnterSelectPage::clear_opid() {
  opid_ = 0u;
  clear_has_opid();
}
inline ::google::protobuf::uint32 stEnterSelectPage::opid() const {
  return opid_;
}
inline void stEnterSelectPage::set_opid(::google::protobuf::uint32 value) {
  set_has_opid();
  opid_ = value;
}

// -------------------------------------------------------------------

// stNotifyWebCreateRole

// optional string account = 1;
inline bool stNotifyWebCreateRole::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyWebCreateRole::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyWebCreateRole::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyWebCreateRole::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stNotifyWebCreateRole::account() const {
  return *account_;
}
inline void stNotifyWebCreateRole::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stNotifyWebCreateRole::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stNotifyWebCreateRole::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNotifyWebCreateRole::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stNotifyWebCreateRole::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNotifyWebCreateRole::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 opID = 2;
inline bool stNotifyWebCreateRole::has_opid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyWebCreateRole::set_has_opid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyWebCreateRole::clear_has_opid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyWebCreateRole::clear_opid() {
  opid_ = 0u;
  clear_has_opid();
}
inline ::google::protobuf::uint32 stNotifyWebCreateRole::opid() const {
  return opid_;
}
inline void stNotifyWebCreateRole::set_opid(::google::protobuf::uint32 value) {
  set_has_opid();
  opid_ = value;
}

// optional string deviceID = 3;
inline bool stNotifyWebCreateRole::has_deviceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyWebCreateRole::set_has_deviceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyWebCreateRole::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyWebCreateRole::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& stNotifyWebCreateRole::deviceid() const {
  return *deviceid_;
}
inline void stNotifyWebCreateRole::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stNotifyWebCreateRole::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stNotifyWebCreateRole::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNotifyWebCreateRole::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* stNotifyWebCreateRole::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNotifyWebCreateRole::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stSendGuildLog

// optional string account = 1;
inline bool stSendGuildLog::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendGuildLog::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendGuildLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendGuildLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stSendGuildLog::account() const {
  return *account_;
}
inline void stSendGuildLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stSendGuildLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stSendGuildLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendGuildLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stSendGuildLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendGuildLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 opID = 2;
inline bool stSendGuildLog::has_opid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendGuildLog::set_has_opid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendGuildLog::clear_has_opid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendGuildLog::clear_opid() {
  opid_ = 0u;
  clear_has_opid();
}
inline ::google::protobuf::uint32 stSendGuildLog::opid() const {
  return opid_;
}
inline void stSendGuildLog::set_opid(::google::protobuf::uint32 value) {
  set_has_opid();
  opid_ = value;
}

// optional uint32 charID = 3;
inline bool stSendGuildLog::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSendGuildLog::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSendGuildLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSendGuildLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSendGuildLog::charid() const {
  return charid_;
}
inline void stSendGuildLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 level = 4;
inline bool stSendGuildLog::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSendGuildLog::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSendGuildLog::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSendGuildLog::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSendGuildLog::level() const {
  return level_;
}
inline void stSendGuildLog::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 vipLv = 5;
inline bool stSendGuildLog::has_viplv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSendGuildLog::set_has_viplv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSendGuildLog::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSendGuildLog::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stSendGuildLog::viplv() const {
  return viplv_;
}
inline void stSendGuildLog::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 guildID = 6;
inline bool stSendGuildLog::has_guildid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSendGuildLog::set_has_guildid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSendGuildLog::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSendGuildLog::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stSendGuildLog::guildid() const {
  return guildid_;
}
inline void stSendGuildLog::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string action = 7;
inline bool stSendGuildLog::has_action() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSendGuildLog::set_has_action() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSendGuildLog::clear_has_action() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSendGuildLog::clear_action() {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    action_->clear();
  }
  clear_has_action();
}
inline const ::std::string& stSendGuildLog::action() const {
  return *action_;
}
inline void stSendGuildLog::set_action(const ::std::string& value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void stSendGuildLog::set_action(const char* value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void stSendGuildLog::set_action(const char* value, size_t size) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendGuildLog::mutable_action() {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  return action_;
}
inline ::std::string* stSendGuildLog::release_action() {
  clear_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_;
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendGuildLog::set_allocated_action(::std::string* action) {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    delete action_;
  }
  if (action) {
    set_has_action();
    action_ = action;
  } else {
    clear_has_action();
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string opObjID = 8;
inline bool stSendGuildLog::has_opobjid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSendGuildLog::set_has_opobjid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSendGuildLog::clear_has_opobjid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSendGuildLog::clear_opobjid() {
  if (opobjid_ != &::google::protobuf::internal::kEmptyString) {
    opobjid_->clear();
  }
  clear_has_opobjid();
}
inline const ::std::string& stSendGuildLog::opobjid() const {
  return *opobjid_;
}
inline void stSendGuildLog::set_opobjid(const ::std::string& value) {
  set_has_opobjid();
  if (opobjid_ == &::google::protobuf::internal::kEmptyString) {
    opobjid_ = new ::std::string;
  }
  opobjid_->assign(value);
}
inline void stSendGuildLog::set_opobjid(const char* value) {
  set_has_opobjid();
  if (opobjid_ == &::google::protobuf::internal::kEmptyString) {
    opobjid_ = new ::std::string;
  }
  opobjid_->assign(value);
}
inline void stSendGuildLog::set_opobjid(const char* value, size_t size) {
  set_has_opobjid();
  if (opobjid_ == &::google::protobuf::internal::kEmptyString) {
    opobjid_ = new ::std::string;
  }
  opobjid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendGuildLog::mutable_opobjid() {
  set_has_opobjid();
  if (opobjid_ == &::google::protobuf::internal::kEmptyString) {
    opobjid_ = new ::std::string;
  }
  return opobjid_;
}
inline ::std::string* stSendGuildLog::release_opobjid() {
  clear_has_opobjid();
  if (opobjid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opobjid_;
    opobjid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendGuildLog::set_allocated_opobjid(::std::string* opobjid) {
  if (opobjid_ != &::google::protobuf::internal::kEmptyString) {
    delete opobjid_;
  }
  if (opobjid) {
    set_has_opobjid();
    opobjid_ = opobjid;
  } else {
    clear_has_opobjid();
    opobjid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 9;
inline bool stSendGuildLog::has_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSendGuildLog::set_has_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSendGuildLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSendGuildLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSendGuildLog::name() const {
  return *name_;
}
inline void stSendGuildLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSendGuildLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSendGuildLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendGuildLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSendGuildLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendGuildLog::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sstSendGuildResLog

// optional uint32 guildID = 1;
inline bool sstSendGuildResLog::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sstSendGuildResLog::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sstSendGuildResLog::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sstSendGuildResLog::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 sstSendGuildResLog::guildid() const {
  return guildid_;
}
inline void sstSendGuildResLog::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string res = 2;
inline bool sstSendGuildResLog::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sstSendGuildResLog::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sstSendGuildResLog::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sstSendGuildResLog::clear_res() {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    res_->clear();
  }
  clear_has_res();
}
inline const ::std::string& sstSendGuildResLog::res() const {
  return *res_;
}
inline void sstSendGuildResLog::set_res(const ::std::string& value) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(value);
}
inline void sstSendGuildResLog::set_res(const char* value) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(value);
}
inline void sstSendGuildResLog::set_res(const char* value, size_t size) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sstSendGuildResLog::mutable_res() {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  return res_;
}
inline ::std::string* sstSendGuildResLog::release_res() {
  clear_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_;
    res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sstSendGuildResLog::set_allocated_res(::std::string* res) {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    delete res_;
  }
  if (res) {
    set_has_res();
    res_ = res;
  } else {
    clear_has_res();
    res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 oldVal = 3;
inline bool sstSendGuildResLog::has_oldval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sstSendGuildResLog::set_has_oldval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sstSendGuildResLog::clear_has_oldval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sstSendGuildResLog::clear_oldval() {
  oldval_ = 0u;
  clear_has_oldval();
}
inline ::google::protobuf::uint32 sstSendGuildResLog::oldval() const {
  return oldval_;
}
inline void sstSendGuildResLog::set_oldval(::google::protobuf::uint32 value) {
  set_has_oldval();
  oldval_ = value;
}

// optional uint32 newVal = 4;
inline bool sstSendGuildResLog::has_newval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sstSendGuildResLog::set_has_newval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sstSendGuildResLog::clear_has_newval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sstSendGuildResLog::clear_newval() {
  newval_ = 0u;
  clear_has_newval();
}
inline ::google::protobuf::uint32 sstSendGuildResLog::newval() const {
  return newval_;
}
inline void sstSendGuildResLog::set_newval(::google::protobuf::uint32 value) {
  set_has_newval();
  newval_ = value;
}

// optional string reason = 5;
inline bool sstSendGuildResLog::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sstSendGuildResLog::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sstSendGuildResLog::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sstSendGuildResLog::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& sstSendGuildResLog::reason() const {
  return *reason_;
}
inline void sstSendGuildResLog::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void sstSendGuildResLog::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void sstSendGuildResLog::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sstSendGuildResLog::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* sstSendGuildResLog::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sstSendGuildResLog::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stSendModuleLog

// optional string account = 1;
inline bool stSendModuleLog::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendModuleLog::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendModuleLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendModuleLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stSendModuleLog::account() const {
  return *account_;
}
inline void stSendModuleLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stSendModuleLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stSendModuleLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendModuleLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stSendModuleLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendModuleLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 opID = 2;
inline bool stSendModuleLog::has_opid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendModuleLog::set_has_opid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendModuleLog::clear_has_opid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendModuleLog::clear_opid() {
  opid_ = 0u;
  clear_has_opid();
}
inline ::google::protobuf::uint32 stSendModuleLog::opid() const {
  return opid_;
}
inline void stSendModuleLog::set_opid(::google::protobuf::uint32 value) {
  set_has_opid();
  opid_ = value;
}

// optional uint32 charID = 3;
inline bool stSendModuleLog::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSendModuleLog::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSendModuleLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSendModuleLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSendModuleLog::charid() const {
  return charid_;
}
inline void stSendModuleLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 level = 4;
inline bool stSendModuleLog::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSendModuleLog::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSendModuleLog::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSendModuleLog::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSendModuleLog::level() const {
  return level_;
}
inline void stSendModuleLog::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 vipLv = 5;
inline bool stSendModuleLog::has_viplv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSendModuleLog::set_has_viplv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSendModuleLog::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSendModuleLog::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stSendModuleLog::viplv() const {
  return viplv_;
}
inline void stSendModuleLog::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional string module = 6;
inline bool stSendModuleLog::has_module() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSendModuleLog::set_has_module() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSendModuleLog::clear_has_module() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSendModuleLog::clear_module() {
  if (module_ != &::google::protobuf::internal::kEmptyString) {
    module_->clear();
  }
  clear_has_module();
}
inline const ::std::string& stSendModuleLog::module() const {
  return *module_;
}
inline void stSendModuleLog::set_module(const ::std::string& value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(value);
}
inline void stSendModuleLog::set_module(const char* value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(value);
}
inline void stSendModuleLog::set_module(const char* value, size_t size) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendModuleLog::mutable_module() {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  return module_;
}
inline ::std::string* stSendModuleLog::release_module() {
  clear_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = module_;
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendModuleLog::set_allocated_module(::std::string* module) {
  if (module_ != &::google::protobuf::internal::kEmptyString) {
    delete module_;
  }
  if (module) {
    set_has_module();
    module_ = module;
  } else {
    clear_has_module();
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 copymapID = 7;
inline bool stSendModuleLog::has_copymapid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSendModuleLog::set_has_copymapid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSendModuleLog::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSendModuleLog::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stSendModuleLog::copymapid() const {
  return copymapid_;
}
inline void stSendModuleLog::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// optional string otherCharID = 8;
inline bool stSendModuleLog::has_othercharid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSendModuleLog::set_has_othercharid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSendModuleLog::clear_has_othercharid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSendModuleLog::clear_othercharid() {
  if (othercharid_ != &::google::protobuf::internal::kEmptyString) {
    othercharid_->clear();
  }
  clear_has_othercharid();
}
inline const ::std::string& stSendModuleLog::othercharid() const {
  return *othercharid_;
}
inline void stSendModuleLog::set_othercharid(const ::std::string& value) {
  set_has_othercharid();
  if (othercharid_ == &::google::protobuf::internal::kEmptyString) {
    othercharid_ = new ::std::string;
  }
  othercharid_->assign(value);
}
inline void stSendModuleLog::set_othercharid(const char* value) {
  set_has_othercharid();
  if (othercharid_ == &::google::protobuf::internal::kEmptyString) {
    othercharid_ = new ::std::string;
  }
  othercharid_->assign(value);
}
inline void stSendModuleLog::set_othercharid(const char* value, size_t size) {
  set_has_othercharid();
  if (othercharid_ == &::google::protobuf::internal::kEmptyString) {
    othercharid_ = new ::std::string;
  }
  othercharid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendModuleLog::mutable_othercharid() {
  set_has_othercharid();
  if (othercharid_ == &::google::protobuf::internal::kEmptyString) {
    othercharid_ = new ::std::string;
  }
  return othercharid_;
}
inline ::std::string* stSendModuleLog::release_othercharid() {
  clear_has_othercharid();
  if (othercharid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = othercharid_;
    othercharid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendModuleLog::set_allocated_othercharid(::std::string* othercharid) {
  if (othercharid_ != &::google::protobuf::internal::kEmptyString) {
    delete othercharid_;
  }
  if (othercharid) {
    set_has_othercharid();
    othercharid_ = othercharid;
  } else {
    clear_has_othercharid();
    othercharid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool result = 9;
inline bool stSendModuleLog::has_result() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSendModuleLog::set_has_result() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSendModuleLog::clear_has_result() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSendModuleLog::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool stSendModuleLog::result() const {
  return result_;
}
inline void stSendModuleLog::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional uint32 oldRank = 10;
inline bool stSendModuleLog::has_oldrank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stSendModuleLog::set_has_oldrank() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stSendModuleLog::clear_has_oldrank() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stSendModuleLog::clear_oldrank() {
  oldrank_ = 0u;
  clear_has_oldrank();
}
inline ::google::protobuf::uint32 stSendModuleLog::oldrank() const {
  return oldrank_;
}
inline void stSendModuleLog::set_oldrank(::google::protobuf::uint32 value) {
  set_has_oldrank();
  oldrank_ = value;
}

// optional uint32 newRank = 11;
inline bool stSendModuleLog::has_newrank() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stSendModuleLog::set_has_newrank() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stSendModuleLog::clear_has_newrank() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stSendModuleLog::clear_newrank() {
  newrank_ = 0u;
  clear_has_newrank();
}
inline ::google::protobuf::uint32 stSendModuleLog::newrank() const {
  return newrank_;
}
inline void stSendModuleLog::set_newrank(::google::protobuf::uint32 value) {
  set_has_newrank();
  newrank_ = value;
}

// -------------------------------------------------------------------

// stReqGetTxGiftBag

// optional uint32 webConnID = 1;
inline bool stReqGetTxGiftBag::has_webconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGetTxGiftBag::set_has_webconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGetTxGiftBag::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGetTxGiftBag::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stReqGetTxGiftBag::webconnid() const {
  return webconnid_;
}
inline void stReqGetTxGiftBag::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional string openid = 2;
inline bool stReqGetTxGiftBag::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqGetTxGiftBag::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqGetTxGiftBag::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqGetTxGiftBag::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& stReqGetTxGiftBag::openid() const {
  return *openid_;
}
inline void stReqGetTxGiftBag::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void stReqGetTxGiftBag::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void stReqGetTxGiftBag::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqGetTxGiftBag::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* stReqGetTxGiftBag::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqGetTxGiftBag::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 taskID = 3;
inline bool stReqGetTxGiftBag::has_taskid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqGetTxGiftBag::set_has_taskid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqGetTxGiftBag::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqGetTxGiftBag::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 stReqGetTxGiftBag::taskid() const {
  return taskid_;
}
inline void stReqGetTxGiftBag::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional uint32 arewardID = 4;
inline bool stReqGetTxGiftBag::has_arewardid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqGetTxGiftBag::set_has_arewardid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqGetTxGiftBag::clear_has_arewardid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqGetTxGiftBag::clear_arewardid() {
  arewardid_ = 0u;
  clear_has_arewardid();
}
inline ::google::protobuf::uint32 stReqGetTxGiftBag::arewardid() const {
  return arewardid_;
}
inline void stReqGetTxGiftBag::set_arewardid(::google::protobuf::uint32 value) {
  set_has_arewardid();
  arewardid_ = value;
}

// optional string action = 5;
inline bool stReqGetTxGiftBag::has_action() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stReqGetTxGiftBag::set_has_action() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stReqGetTxGiftBag::clear_has_action() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stReqGetTxGiftBag::clear_action() {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    action_->clear();
  }
  clear_has_action();
}
inline const ::std::string& stReqGetTxGiftBag::action() const {
  return *action_;
}
inline void stReqGetTxGiftBag::set_action(const ::std::string& value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void stReqGetTxGiftBag::set_action(const char* value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void stReqGetTxGiftBag::set_action(const char* value, size_t size) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqGetTxGiftBag::mutable_action() {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  return action_;
}
inline ::std::string* stReqGetTxGiftBag::release_action() {
  clear_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_;
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqGetTxGiftBag::set_allocated_action(::std::string* action) {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    delete action_;
  }
  if (action) {
    set_has_action();
    action_ = action;
  } else {
    clear_has_action();
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string billno = 6;
inline bool stReqGetTxGiftBag::has_billno() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stReqGetTxGiftBag::set_has_billno() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stReqGetTxGiftBag::clear_has_billno() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stReqGetTxGiftBag::clear_billno() {
  if (billno_ != &::google::protobuf::internal::kEmptyString) {
    billno_->clear();
  }
  clear_has_billno();
}
inline const ::std::string& stReqGetTxGiftBag::billno() const {
  return *billno_;
}
inline void stReqGetTxGiftBag::set_billno(const ::std::string& value) {
  set_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    billno_ = new ::std::string;
  }
  billno_->assign(value);
}
inline void stReqGetTxGiftBag::set_billno(const char* value) {
  set_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    billno_ = new ::std::string;
  }
  billno_->assign(value);
}
inline void stReqGetTxGiftBag::set_billno(const char* value, size_t size) {
  set_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    billno_ = new ::std::string;
  }
  billno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqGetTxGiftBag::mutable_billno() {
  set_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    billno_ = new ::std::string;
  }
  return billno_;
}
inline ::std::string* stReqGetTxGiftBag::release_billno() {
  clear_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = billno_;
    billno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqGetTxGiftBag::set_allocated_billno(::std::string* billno) {
  if (billno_ != &::google::protobuf::internal::kEmptyString) {
    delete billno_;
  }
  if (billno) {
    set_has_billno();
    billno_ = billno;
  } else {
    clear_has_billno();
    billno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID = 7;
inline bool stReqGetTxGiftBag::has_charid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stReqGetTxGiftBag::set_has_charid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stReqGetTxGiftBag::clear_has_charid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stReqGetTxGiftBag::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqGetTxGiftBag::charid() const {
  return charid_;
}
inline void stReqGetTxGiftBag::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetGetTxGiftBag

// optional uint32 webConnID = 1;
inline bool stRetGetTxGiftBag::has_webconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetGetTxGiftBag::set_has_webconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetGetTxGiftBag::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetGetTxGiftBag::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stRetGetTxGiftBag::webconnid() const {
  return webconnid_;
}
inline void stRetGetTxGiftBag::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional uint32 result = 2;
inline bool stRetGetTxGiftBag::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetGetTxGiftBag::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetGetTxGiftBag::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetGetTxGiftBag::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 stRetGetTxGiftBag::result() const {
  return result_;
}
inline void stRetGetTxGiftBag::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional string msg = 3;
inline bool stRetGetTxGiftBag::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetGetTxGiftBag::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetGetTxGiftBag::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetGetTxGiftBag::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& stRetGetTxGiftBag::msg() const {
  return *msg_;
}
inline void stRetGetTxGiftBag::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stRetGetTxGiftBag::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stRetGetTxGiftBag::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetGetTxGiftBag::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* stRetGetTxGiftBag::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetGetTxGiftBag::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stUpdateSvrOpenTime

// optional uint32 time = 1;
inline bool stUpdateSvrOpenTime::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUpdateSvrOpenTime::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUpdateSvrOpenTime::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUpdateSvrOpenTime::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 stUpdateSvrOpenTime::time() const {
  return time_;
}
inline void stUpdateSvrOpenTime::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// stResourceChgLog

// optional uint32 charID = 1;
inline bool stResourceChgLog::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResourceChgLog::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResourceChgLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResourceChgLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResourceChgLog::charid() const {
  return charid_;
}
inline void stResourceChgLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 2;
inline bool stResourceChgLog::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stResourceChgLog::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stResourceChgLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stResourceChgLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stResourceChgLog::account() const {
  return *account_;
}
inline void stResourceChgLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stResourceChgLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stResourceChgLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stResourceChgLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stResourceChgLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stResourceChgLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool stResourceChgLog::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stResourceChgLog::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stResourceChgLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stResourceChgLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stResourceChgLog::name() const {
  return *name_;
}
inline void stResourceChgLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stResourceChgLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stResourceChgLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stResourceChgLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stResourceChgLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stResourceChgLog::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 resID = 4;
inline bool stResourceChgLog::has_resid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stResourceChgLog::set_has_resid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stResourceChgLog::clear_has_resid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stResourceChgLog::clear_resid() {
  resid_ = 0u;
  clear_has_resid();
}
inline ::google::protobuf::uint32 stResourceChgLog::resid() const {
  return resid_;
}
inline void stResourceChgLog::set_resid(::google::protobuf::uint32 value) {
  set_has_resid();
  resid_ = value;
}

// optional uint32 addNum = 5;
inline bool stResourceChgLog::has_addnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stResourceChgLog::set_has_addnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stResourceChgLog::clear_has_addnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stResourceChgLog::clear_addnum() {
  addnum_ = 0u;
  clear_has_addnum();
}
inline ::google::protobuf::uint32 stResourceChgLog::addnum() const {
  return addnum_;
}
inline void stResourceChgLog::set_addnum(::google::protobuf::uint32 value) {
  set_has_addnum();
  addnum_ = value;
}

// optional uint32 oldValue = 6;
inline bool stResourceChgLog::has_oldvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stResourceChgLog::set_has_oldvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stResourceChgLog::clear_has_oldvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stResourceChgLog::clear_oldvalue() {
  oldvalue_ = 0u;
  clear_has_oldvalue();
}
inline ::google::protobuf::uint32 stResourceChgLog::oldvalue() const {
  return oldvalue_;
}
inline void stResourceChgLog::set_oldvalue(::google::protobuf::uint32 value) {
  set_has_oldvalue();
  oldvalue_ = value;
}

// optional uint32 newValue = 7;
inline bool stResourceChgLog::has_newvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stResourceChgLog::set_has_newvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stResourceChgLog::clear_has_newvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stResourceChgLog::clear_newvalue() {
  newvalue_ = 0u;
  clear_has_newvalue();
}
inline ::google::protobuf::uint32 stResourceChgLog::newvalue() const {
  return newvalue_;
}
inline void stResourceChgLog::set_newvalue(::google::protobuf::uint32 value) {
  set_has_newvalue();
  newvalue_ = value;
}

// optional string reason = 8;
inline bool stResourceChgLog::has_reason() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stResourceChgLog::set_has_reason() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stResourceChgLog::clear_has_reason() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stResourceChgLog::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& stResourceChgLog::reason() const {
  return *reason_;
}
inline void stResourceChgLog::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void stResourceChgLog::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void stResourceChgLog::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stResourceChgLog::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* stResourceChgLog::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stResourceChgLog::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stUseInviteCode

// optional string code = 1;
inline bool stUseInviteCode::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUseInviteCode::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUseInviteCode::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUseInviteCode::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& stUseInviteCode::code() const {
  return *code_;
}
inline void stUseInviteCode::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void stUseInviteCode::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void stUseInviteCode::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUseInviteCode::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* stUseInviteCode::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUseInviteCode::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 webConnID = 2;
inline bool stUseInviteCode::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUseInviteCode::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUseInviteCode::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUseInviteCode::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stUseInviteCode::webconnid() const {
  return webconnid_;
}
inline void stUseInviteCode::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional string account = 3;
inline bool stUseInviteCode::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUseInviteCode::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUseInviteCode::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUseInviteCode::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stUseInviteCode::account() const {
  return *account_;
}
inline void stUseInviteCode::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stUseInviteCode::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stUseInviteCode::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUseInviteCode::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stUseInviteCode::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUseInviteCode::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string userId = 4;
inline bool stUseInviteCode::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUseInviteCode::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUseInviteCode::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUseInviteCode::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& stUseInviteCode::userid() const {
  return *userid_;
}
inline void stUseInviteCode::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void stUseInviteCode::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void stUseInviteCode::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUseInviteCode::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* stUseInviteCode::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUseInviteCode::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stUseInviteCodeCb

// optional string msg = 1;
inline bool stUseInviteCodeCb::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUseInviteCodeCb::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUseInviteCodeCb::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUseInviteCodeCb::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& stUseInviteCodeCb::msg() const {
  return *msg_;
}
inline void stUseInviteCodeCb::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stUseInviteCodeCb::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stUseInviteCodeCb::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUseInviteCodeCb::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* stUseInviteCodeCb::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUseInviteCodeCb::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 webConnID = 2;
inline bool stUseInviteCodeCb::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUseInviteCodeCb::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUseInviteCodeCb::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUseInviteCodeCb::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stUseInviteCodeCb::webconnid() const {
  return webconnid_;
}
inline void stUseInviteCodeCb::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional string account = 3;
inline bool stUseInviteCodeCb::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUseInviteCodeCb::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUseInviteCodeCb::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUseInviteCodeCb::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stUseInviteCodeCb::account() const {
  return *account_;
}
inline void stUseInviteCodeCb::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stUseInviteCodeCb::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stUseInviteCodeCb::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUseInviteCodeCb::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stUseInviteCodeCb::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUseInviteCodeCb::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string userId = 4;
inline bool stUseInviteCodeCb::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUseInviteCodeCb::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUseInviteCodeCb::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUseInviteCodeCb::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& stUseInviteCodeCb::userid() const {
  return *userid_;
}
inline void stUseInviteCodeCb::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void stUseInviteCodeCb::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void stUseInviteCodeCb::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUseInviteCodeCb::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* stUseInviteCodeCb::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUseInviteCodeCb::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqLimitPetActivityData

// optional string msg = 1;
inline bool stReqLimitPetActivityData::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLimitPetActivityData::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLimitPetActivityData::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLimitPetActivityData::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& stReqLimitPetActivityData::msg() const {
  return *msg_;
}
inline void stReqLimitPetActivityData::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stReqLimitPetActivityData::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stReqLimitPetActivityData::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqLimitPetActivityData::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* stReqLimitPetActivityData::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqLimitPetActivityData::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stAcitivityLimitPetItem

// optional uint32 id = 1;
inline bool stAcitivityLimitPetItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAcitivityLimitPetItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAcitivityLimitPetItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAcitivityLimitPetItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stAcitivityLimitPetItem::id() const {
  return id_;
}
inline void stAcitivityLimitPetItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 activiyId = 2;
inline bool stAcitivityLimitPetItem::has_activiyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAcitivityLimitPetItem::set_has_activiyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAcitivityLimitPetItem::clear_has_activiyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAcitivityLimitPetItem::clear_activiyid() {
  activiyid_ = 0u;
  clear_has_activiyid();
}
inline ::google::protobuf::uint32 stAcitivityLimitPetItem::activiyid() const {
  return activiyid_;
}
inline void stAcitivityLimitPetItem::set_activiyid(::google::protobuf::uint32 value) {
  set_has_activiyid();
  activiyid_ = value;
}

// optional uint32 startTime = 3;
inline bool stAcitivityLimitPetItem::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAcitivityLimitPetItem::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAcitivityLimitPetItem::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAcitivityLimitPetItem::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 stAcitivityLimitPetItem::starttime() const {
  return starttime_;
}
inline void stAcitivityLimitPetItem::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
}

// optional uint32 endTime = 4;
inline bool stAcitivityLimitPetItem::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stAcitivityLimitPetItem::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stAcitivityLimitPetItem::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stAcitivityLimitPetItem::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 stAcitivityLimitPetItem::endtime() const {
  return endtime_;
}
inline void stAcitivityLimitPetItem::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
}

// -------------------------------------------------------------------

// stSendLimitPetActivityData

// optional string msg = 1;
inline bool stSendLimitPetActivityData::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendLimitPetActivityData::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendLimitPetActivityData::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendLimitPetActivityData::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& stSendLimitPetActivityData::msg() const {
  return *msg_;
}
inline void stSendLimitPetActivityData::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stSendLimitPetActivityData::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stSendLimitPetActivityData::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendLimitPetActivityData::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* stSendLimitPetActivityData::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendLimitPetActivityData::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Global.stAcitivityLimitPetItem item = 2;
inline int stSendLimitPetActivityData::item_size() const {
  return item_.size();
}
inline void stSendLimitPetActivityData::clear_item() {
  item_.Clear();
}
inline const ::Global::stAcitivityLimitPetItem& stSendLimitPetActivityData::item(int index) const {
  return item_.Get(index);
}
inline ::Global::stAcitivityLimitPetItem* stSendLimitPetActivityData::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::Global::stAcitivityLimitPetItem* stSendLimitPetActivityData::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stAcitivityLimitPetItem >&
stSendLimitPetActivityData::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stAcitivityLimitPetItem >*
stSendLimitPetActivityData::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// stSendShutDown

// optional string msg = 1;
inline bool stSendShutDown::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendShutDown::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendShutDown::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendShutDown::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& stSendShutDown::msg() const {
  return *msg_;
}
inline void stSendShutDown::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stSendShutDown::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stSendShutDown::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendShutDown::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* stSendShutDown::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendShutDown::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stWeb2GlobalQueryUserNft

// optional uint32 webConnID = 1;
inline bool stWeb2GlobalQueryUserNft::has_webconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stWeb2GlobalQueryUserNft::set_has_webconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stWeb2GlobalQueryUserNft::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stWeb2GlobalQueryUserNft::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stWeb2GlobalQueryUserNft::webconnid() const {
  return webconnid_;
}
inline void stWeb2GlobalQueryUserNft::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional uint32 charid = 2;
inline bool stWeb2GlobalQueryUserNft::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stWeb2GlobalQueryUserNft::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stWeb2GlobalQueryUserNft::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stWeb2GlobalQueryUserNft::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stWeb2GlobalQueryUserNft::charid() const {
  return charid_;
}
inline void stWeb2GlobalQueryUserNft::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGlobal2WebQueryUserNftResult

// optional uint32 webConnID = 1;
inline bool stGlobal2WebQueryUserNftResult::has_webconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGlobal2WebQueryUserNftResult::set_has_webconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGlobal2WebQueryUserNftResult::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGlobal2WebQueryUserNftResult::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stGlobal2WebQueryUserNftResult::webconnid() const {
  return webconnid_;
}
inline void stGlobal2WebQueryUserNftResult::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional uint32 charid = 2;
inline bool stGlobal2WebQueryUserNftResult::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGlobal2WebQueryUserNftResult::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGlobal2WebQueryUserNftResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGlobal2WebQueryUserNftResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGlobal2WebQueryUserNftResult::charid() const {
  return charid_;
}
inline void stGlobal2WebQueryUserNftResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 result = 3;
inline bool stGlobal2WebQueryUserNftResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGlobal2WebQueryUserNftResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGlobal2WebQueryUserNftResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGlobal2WebQueryUserNftResult::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 stGlobal2WebQueryUserNftResult::result() const {
  return result_;
}
inline void stGlobal2WebQueryUserNftResult::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// repeated .Global.stNftItem data = 4;
inline int stGlobal2WebQueryUserNftResult::data_size() const {
  return data_.size();
}
inline void stGlobal2WebQueryUserNftResult::clear_data() {
  data_.Clear();
}
inline const ::Global::stNftItem& stGlobal2WebQueryUserNftResult::data(int index) const {
  return data_.Get(index);
}
inline ::Global::stNftItem* stGlobal2WebQueryUserNftResult::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Global::stNftItem* stGlobal2WebQueryUserNftResult::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Global::stNftItem >&
stGlobal2WebQueryUserNftResult::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Global::stNftItem >*
stGlobal2WebQueryUserNftResult::mutable_data() {
  return &data_;
}

// optional uint32 vip = 5;
inline bool stGlobal2WebQueryUserNftResult::has_vip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGlobal2WebQueryUserNftResult::set_has_vip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGlobal2WebQueryUserNftResult::clear_has_vip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGlobal2WebQueryUserNftResult::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 stGlobal2WebQueryUserNftResult::vip() const {
  return vip_;
}
inline void stGlobal2WebQueryUserNftResult::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
}

// -------------------------------------------------------------------

// stWeb2GlobalChangeNftItem

// optional uint32 webConnID = 1;
inline bool stWeb2GlobalChangeNftItem::has_webconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stWeb2GlobalChangeNftItem::set_has_webconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stWeb2GlobalChangeNftItem::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stWeb2GlobalChangeNftItem::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stWeb2GlobalChangeNftItem::webconnid() const {
  return webconnid_;
}
inline void stWeb2GlobalChangeNftItem::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional uint32 charid = 2;
inline bool stWeb2GlobalChangeNftItem::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stWeb2GlobalChangeNftItem::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stWeb2GlobalChangeNftItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stWeb2GlobalChangeNftItem::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stWeb2GlobalChangeNftItem::charid() const {
  return charid_;
}
inline void stWeb2GlobalChangeNftItem::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 itemid = 3;
inline bool stWeb2GlobalChangeNftItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stWeb2GlobalChangeNftItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stWeb2GlobalChangeNftItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stWeb2GlobalChangeNftItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stWeb2GlobalChangeNftItem::itemid() const {
  return itemid_;
}
inline void stWeb2GlobalChangeNftItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 count = 4;
inline bool stWeb2GlobalChangeNftItem::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stWeb2GlobalChangeNftItem::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stWeb2GlobalChangeNftItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stWeb2GlobalChangeNftItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 stWeb2GlobalChangeNftItem::count() const {
  return count_;
}
inline void stWeb2GlobalChangeNftItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// stGlobal2WebChangeNftItemResult

// optional uint32 webConnID = 1;
inline bool stGlobal2WebChangeNftItemResult::has_webconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGlobal2WebChangeNftItemResult::set_has_webconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGlobal2WebChangeNftItemResult::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGlobal2WebChangeNftItemResult::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stGlobal2WebChangeNftItemResult::webconnid() const {
  return webconnid_;
}
inline void stGlobal2WebChangeNftItemResult::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// optional uint32 charid = 2;
inline bool stGlobal2WebChangeNftItemResult::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGlobal2WebChangeNftItemResult::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGlobal2WebChangeNftItemResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGlobal2WebChangeNftItemResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGlobal2WebChangeNftItemResult::charid() const {
  return charid_;
}
inline void stGlobal2WebChangeNftItemResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 result = 3;
inline bool stGlobal2WebChangeNftItemResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGlobal2WebChangeNftItemResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGlobal2WebChangeNftItemResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGlobal2WebChangeNftItemResult::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 stGlobal2WebChangeNftItemResult::result() const {
  return result_;
}
inline void stGlobal2WebChangeNftItemResult::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Global

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stLoginGlobal_ProtoModID>() {
  return ::Global::stLoginGlobal_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stLoginGlobal_ProtoFunID>() {
  return ::Global::stLoginGlobal_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCreateRole_ProtoModID>() {
  return ::Global::stCreateRole_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCreateRole_ProtoFunID>() {
  return ::Global::stCreateRole_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCreateRoleResult_ProtoModID>() {
  return ::Global::stCreateRoleResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCreateRoleResult_ProtoFunID>() {
  return ::Global::stCreateRoleResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqSnapData_ProtoModID>() {
  return ::Global::stReqSnapData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqSnapData_ProtoFunID>() {
  return ::Global::stReqSnapData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetSnapData_ProtoModID>() {
  return ::Global::stRetSnapData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetSnapData_ProtoFunID>() {
  return ::Global::stRetSnapData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqLoadData_ProtoModID>() {
  return ::Global::stReqLoadData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqLoadData_ProtoFunID>() {
  return ::Global::stReqLoadData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGateForwardProto_ProtoModID>() {
  return ::Global::stGateForwardProto_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGateForwardProto_ProtoFunID>() {
  return ::Global::stGateForwardProto_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stForwardProto2Me_ProtoModID>() {
  return ::Global::stForwardProto2Me_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stForwardProto2Me_ProtoFunID>() {
  return ::Global::stForwardProto2Me_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBroadcastProto2AllUser_ProtoModID>() {
  return ::Global::stBroadcastProto2AllUser_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBroadcastProto2AllUser_ProtoFunID>() {
  return ::Global::stBroadcastProto2AllUser_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stLoginGlobalFail_FailReason>() {
  return ::Global::stLoginGlobalFail_FailReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stLoginGlobalFail_ProtoModID>() {
  return ::Global::stLoginGlobalFail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stLoginGlobalFail_ProtoFunID>() {
  return ::Global::stLoginGlobalFail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyLoginOut_ProtoModID>() {
  return ::Global::stNotifyLoginOut_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyLoginOut_ProtoFunID>() {
  return ::Global::stNotifyLoginOut_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGameSvrStartUp_ProtoModID>() {
  return ::Global::stGameSvrStartUp_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGameSvrStartUp_ProtoFunID>() {
  return ::Global::stGameSvrStartUp_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stKillUserOut_ProtoModID>() {
  return ::Global::stKillUserOut_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stKillUserOut_ProtoFunID>() {
  return ::Global::stKillUserOut_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyGateSvrCfg_ProtoModID>() {
  return ::Global::stNotifyGateSvrCfg_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyGateSvrCfg_ProtoFunID>() {
  return ::Global::stNotifyGateSvrCfg_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReloginGlobal_ProtoModID>() {
  return ::Global::stReloginGlobal_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReloginGlobal_ProtoFunID>() {
  return ::Global::stReloginGlobal_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stPlayerAutoConnect_ProtoModID>() {
  return ::Global::stPlayerAutoConnect_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stPlayerAutoConnect_ProtoFunID>() {
  return ::Global::stPlayerAutoConnect_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stClientLostConnect_ProtoModID>() {
  return ::Global::stClientLostConnect_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stClientLostConnect_ProtoFunID>() {
  return ::Global::stClientLostConnect_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stAskIsNewAccount_ProtoModID>() {
  return ::Global::stAskIsNewAccount_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stAskIsNewAccount_ProtoFunID>() {
  return ::Global::stAskIsNewAccount_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stIsNewAccount_ProtoModID>() {
  return ::Global::stIsNewAccount_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stIsNewAccount_ProtoFunID>() {
  return ::Global::stIsNewAccount_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSaveRoleInfo_ProtoModID>() {
  return ::Global::stSaveRoleInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSaveRoleInfo_ProtoFunID>() {
  return ::Global::stSaveRoleInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetRoleInfo_ProtoModID>() {
  return ::Global::stRetRoleInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetRoleInfo_ProtoFunID>() {
  return ::Global::stRetRoleInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserEnterMapSuccess_ProtoModID>() {
  return ::Global::stUserEnterMapSuccess_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserEnterMapSuccess_ProtoFunID>() {
  return ::Global::stUserEnterMapSuccess_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserRecharge_ProtoModID>() {
  return ::Global::stUserRecharge_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserRecharge_ProtoFunID>() {
  return ::Global::stUserRecharge_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stProcessGM_ProtoModID>() {
  return ::Global::stProcessGM_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stProcessGM_ProtoFunID>() {
  return ::Global::stProcessGM_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynFetchLilianNum_ProtoModID>() {
  return ::Global::stSynFetchLilianNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynFetchLilianNum_ProtoFunID>() {
  return ::Global::stSynFetchLilianNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynGuildID_ProtoModID>() {
  return ::Global::stSynGuildID_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynGuildID_ProtoFunID>() {
  return ::Global::stSynGuildID_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCreateGuild_ProtoModID>() {
  return ::Global::stCreateGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCreateGuild_ProtoFunID>() {
  return ::Global::stCreateGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCreateGuildDecMoney_ProtoModID>() {
  return ::Global::stCreateGuildDecMoney_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCreateGuildDecMoney_ProtoFunID>() {
  return ::Global::stCreateGuildDecMoney_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stForwardJoininGuild_ProtoModID>() {
  return ::Global::stForwardJoininGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stForwardJoininGuild_ProtoFunID>() {
  return ::Global::stForwardJoininGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stAddGuildContribute_ProtoModID>() {
  return ::Global::stAddGuildContribute_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stAddGuildContribute_ProtoFunID>() {
  return ::Global::stAddGuildContribute_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBroadcastGuildChatInfo_ProtoModID>() {
  return ::Global::stBroadcastGuildChatInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBroadcastGuildChatInfo_ProtoFunID>() {
  return ::Global::stBroadcastGuildChatInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGuildPray_ProtoModID>() {
  return ::Global::stGuildPray_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGuildPray_ProtoFunID>() {
  return ::Global::stGuildPray_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynUserLevel_ProtoModID>() {
  return ::Global::stSynUserLevel_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynUserLevel_ProtoFunID>() {
  return ::Global::stSynUserLevel_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynCopymapStarNum_ProtoModID>() {
  return ::Global::stSynCopymapStarNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynCopymapStarNum_ProtoFunID>() {
  return ::Global::stSynCopymapStarNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynUserBattlePower_ProtoModID>() {
  return ::Global::stSynUserBattlePower_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynUserBattlePower_ProtoFunID>() {
  return ::Global::stSynUserBattlePower_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendTeamChatInfo_ProtoModID>() {
  return ::Global::stSendTeamChatInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendTeamChatInfo_ProtoFunID>() {
  return ::Global::stSendTeamChatInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stTeamLeaveCopyMap_ProtoModID>() {
  return ::Global::stTeamLeaveCopyMap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stTeamLeaveCopyMap_ProtoFunID>() {
  return ::Global::stTeamLeaveCopyMap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stTreasureCombine_ProtoModID>() {
  return ::Global::stTreasureCombine_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stTreasureCombine_ProtoFunID>() {
  return ::Global::stTreasureCombine_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stTreasureCombineSuccess_ProtoModID>() {
  return ::Global::stTreasureCombineSuccess_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stTreasureCombineSuccess_ProtoFunID>() {
  return ::Global::stTreasureCombineSuccess_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBuyPeaceModubleTime_ProtoModID>() {
  return ::Global::stBuyPeaceModubleTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBuyPeaceModubleTime_ProtoFunID>() {
  return ::Global::stBuyPeaceModubleTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqChangeGameSvr_ProtoModID>() {
  return ::Global::stReqChangeGameSvr_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqChangeGameSvr_ProtoFunID>() {
  return ::Global::stReqChangeGameSvr_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stConfirmChangeGameSvr_ProtoModID>() {
  return ::Global::stConfirmChangeGameSvr_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stConfirmChangeGameSvr_ProtoFunID>() {
  return ::Global::stConfirmChangeGameSvr_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetOtherUserData2Me_ProtoModID>() {
  return ::Global::stRetOtherUserData2Me_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetOtherUserData2Me_ProtoFunID>() {
  return ::Global::stRetOtherUserData2Me_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stObtainItemFromMail_ProtoModID>() {
  return ::Global::stObtainItemFromMail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stObtainItemFromMail_ProtoFunID>() {
  return ::Global::stObtainItemFromMail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynAddTreasure_ProtoModID>() {
  return ::Global::stSynAddTreasure_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynAddTreasure_ProtoFunID>() {
  return ::Global::stSynAddTreasure_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBeginPKWithOther_ePKType>() {
  return ::Global::stBeginPKWithOther_ePKType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBeginPKWithOther_ProtoModID>() {
  return ::Global::stBeginPKWithOther_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBeginPKWithOther_ProtoFunID>() {
  return ::Global::stBeginPKWithOther_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserLeitaiChallenge_ProtoModID>() {
  return ::Global::stUserLeitaiChallenge_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserLeitaiChallenge_ProtoFunID>() {
  return ::Global::stUserLeitaiChallenge_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stArenaPKResult_ProtoModID>() {
  return ::Global::stArenaPKResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stArenaPKResult_ProtoFunID>() {
  return ::Global::stArenaPKResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynDrawHeroScore_ProtoModID>() {
  return ::Global::stSynDrawHeroScore_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynDrawHeroScore_ProtoFunID>() {
  return ::Global::stSynDrawHeroScore_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUpLeitaiUseTime_ProtoModID>() {
  return ::Global::stUpLeitaiUseTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUpLeitaiUseTime_ProtoFunID>() {
  return ::Global::stUpLeitaiUseTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserLeaveGuild_ProtoModID>() {
  return ::Global::stUserLeaveGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserLeaveGuild_ProtoFunID>() {
  return ::Global::stUserLeaveGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stTeamEnterCopyMap_ProtoModID>() {
  return ::Global::stTeamEnterCopyMap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stTeamEnterCopyMap_ProtoFunID>() {
  return ::Global::stTeamEnterCopyMap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOne2OnePVPEnterCopyMap_ProtoModID>() {
  return ::Global::stOne2OnePVPEnterCopyMap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOne2OnePVPEnterCopyMap_ProtoFunID>() {
  return ::Global::stOne2OnePVPEnterCopyMap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stForwardCapture_ProtoModID>() {
  return ::Global::stForwardCapture_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stForwardCapture_ProtoFunID>() {
  return ::Global::stForwardCapture_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCaptureReward_ProtoModID>() {
  return ::Global::stCaptureReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCaptureReward_ProtoFunID>() {
  return ::Global::stCaptureReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRealTimeBattleEnterCopymap_ProtoModID>() {
  return ::Global::stRealTimeBattleEnterCopymap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRealTimeBattleEnterCopymap_ProtoFunID>() {
  return ::Global::stRealTimeBattleEnterCopymap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyAddLilian_ProtoModID>() {
  return ::Global::stNotifyAddLilian_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyAddLilian_ProtoFunID>() {
  return ::Global::stNotifyAddLilian_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stEnterGuildCopymap_ProtoModID>() {
  return ::Global::stEnterGuildCopymap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stEnterGuildCopymap_ProtoFunID>() {
  return ::Global::stEnterGuildCopymap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynMyContribyte_ProtoModID>() {
  return ::Global::stSynMyContribyte_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynMyContribyte_ProtoFunID>() {
  return ::Global::stSynMyContribyte_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOnlineUserGMType_ProtoModID>() {
  return ::Global::stOnlineUserGMType_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOnlineUserGMType_ProtoFunID>() {
  return ::Global::stOnlineUserGMType_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stForbidOnlineUser_ProtoModID>() {
  return ::Global::stForbidOnlineUser_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stForbidOnlineUser_ProtoFunID>() {
  return ::Global::stForbidOnlineUser_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOne2OnePVPFinish_ProtoModID>() {
  return ::Global::stOne2OnePVPFinish_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOne2OnePVPFinish_ProtoFunID>() {
  return ::Global::stOne2OnePVPFinish_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynActivityConfig_ProtoModID>() {
  return ::Global::stSynActivityConfig_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynActivityConfig_ProtoFunID>() {
  return ::Global::stSynActivityConfig_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCaptureTreasureFail_ProtoModID>() {
  return ::Global::stCaptureTreasureFail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCaptureTreasureFail_ProtoFunID>() {
  return ::Global::stCaptureTreasureFail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynRankModuleInfo_ProtoModID>() {
  return ::Global::stSynRankModuleInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynRankModuleInfo_ProtoFunID>() {
  return ::Global::stSynRankModuleInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGiveGiftBagReward_ProtoModID>() {
  return ::Global::stGiveGiftBagReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGiveGiftBagReward_ProtoFunID>() {
  return ::Global::stGiveGiftBagReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyGameSvrCfg_ProtoModID>() {
  return ::Global::stNotifyGameSvrCfg_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyGameSvrCfg_ProtoFunID>() {
  return ::Global::stNotifyGameSvrCfg_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyCurEquipInfo_ProtoModID>() {
  return ::Global::stNotifyCurEquipInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyCurEquipInfo_ProtoFunID>() {
  return ::Global::stNotifyCurEquipInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReloginGame_ProtoModID>() {
  return ::Global::stReloginGame_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReloginGame_ProtoFunID>() {
  return ::Global::stReloginGame_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stTeamCopyMapFinish_ProtoModID>() {
  return ::Global::stTeamCopyMapFinish_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stTeamCopyMapFinish_ProtoFunID>() {
  return ::Global::stTeamCopyMapFinish_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserOnlineSendFirstKillInfo_ProtoModID>() {
  return ::Global::stUserOnlineSendFirstKillInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserOnlineSendFirstKillInfo_ProtoFunID>() {
  return ::Global::stUserOnlineSendFirstKillInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stTeamFinishFirstKill_ProtoModID>() {
  return ::Global::stTeamFinishFirstKill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stTeamFinishFirstKill_ProtoFunID>() {
  return ::Global::stTeamFinishFirstKill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSetClearWorldBossTime_ProtoModID>() {
  return ::Global::stSetClearWorldBossTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSetClearWorldBossTime_ProtoFunID>() {
  return ::Global::stSetClearWorldBossTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSetWorldBossBuyNum_ProtoModID>() {
  return ::Global::stSetWorldBossBuyNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSetWorldBossBuyNum_ProtoFunID>() {
  return ::Global::stSetWorldBossBuyNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserDecSP_ProtoModID>() {
  return ::Global::stUserDecSP_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserDecSP_ProtoFunID>() {
  return ::Global::stUserDecSP_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUsreDecLilian_ProtoModID>() {
  return ::Global::stUsreDecLilian_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUsreDecLilian_ProtoFunID>() {
  return ::Global::stUsreDecLilian_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGuildCopymapFail_ProtoModID>() {
  return ::Global::stGuildCopymapFail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGuildCopymapFail_ProtoFunID>() {
  return ::Global::stGuildCopymapFail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGuildCopymapKillBoss_ProtoModID>() {
  return ::Global::stGuildCopymapKillBoss_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGuildCopymapKillBoss_ProtoFunID>() {
  return ::Global::stGuildCopymapKillBoss_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWorldBossCopymapFail_ProtoModID>() {
  return ::Global::stWorldBossCopymapFail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWorldBossCopymapFail_ProtoFunID>() {
  return ::Global::stWorldBossCopymapFail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stKillWorldBoss_ProtoModID>() {
  return ::Global::stKillWorldBoss_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stKillWorldBoss_ProtoFunID>() {
  return ::Global::stKillWorldBoss_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDrawHeroScoreReward_ProtoModID>() {
  return ::Global::stDrawHeroScoreReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDrawHeroScoreReward_ProtoFunID>() {
  return ::Global::stDrawHeroScoreReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDrawHeroRankReward_ProtoModID>() {
  return ::Global::stDrawHeroRankReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDrawHeroRankReward_ProtoFunID>() {
  return ::Global::stDrawHeroRankReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSetCompensationID_ProtoModID>() {
  return ::Global::stSetCompensationID_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSetCompensationID_ProtoFunID>() {
  return ::Global::stSetCompensationID_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSetOpenServerDay_ProtoModID>() {
  return ::Global::stSetOpenServerDay_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSetOpenServerDay_ProtoFunID>() {
  return ::Global::stSetOpenServerDay_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynGuildLv2AllMember_ProtoModID>() {
  return ::Global::stSynGuildLv2AllMember_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynGuildLv2AllMember_ProtoFunID>() {
  return ::Global::stSynGuildLv2AllMember_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stForwardChgBadge_ProtoModID>() {
  return ::Global::stForwardChgBadge_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stForwardChgBadge_ProtoFunID>() {
  return ::Global::stForwardChgBadge_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWorldBossBuyDecDiamond_ProtoModID>() {
  return ::Global::stWorldBossBuyDecDiamond_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWorldBossBuyDecDiamond_ProtoFunID>() {
  return ::Global::stWorldBossBuyDecDiamond_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGuildDonateSuccess_ProtoModID>() {
  return ::Global::stGuildDonateSuccess_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGuildDonateSuccess_ProtoFunID>() {
  return ::Global::stGuildDonateSuccess_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserLeaveWorldBoss_ProtoModID>() {
  return ::Global::stUserLeaveWorldBoss_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserLeaveWorldBoss_ProtoFunID>() {
  return ::Global::stUserLeaveWorldBoss_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyGameAutoConnect_ProtoModID>() {
  return ::Global::stNotifyGameAutoConnect_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyGameAutoConnect_ProtoFunID>() {
  return ::Global::stNotifyGameAutoConnect_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stForwardDrawHeroScoreReward_ProtoModID>() {
  return ::Global::stForwardDrawHeroScoreReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stForwardDrawHeroScoreReward_ProtoFunID>() {
  return ::Global::stForwardDrawHeroScoreReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyArenaReward_ProtoModID>() {
  return ::Global::stNotifyArenaReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyArenaReward_ProtoFunID>() {
  return ::Global::stNotifyArenaReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::ForwardInvestgateResult_ProtoModID>() {
  return ::Global::ForwardInvestgateResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::ForwardInvestgateResult_ProtoFunID>() {
  return ::Global::ForwardInvestgateResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGMModifyUserInfo_ProtoModID>() {
  return ::Global::stGMModifyUserInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGMModifyUserInfo_ProtoFunID>() {
  return ::Global::stGMModifyUserInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynMyArenaRank_ProtoModID>() {
  return ::Global::stSynMyArenaRank_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynMyArenaRank_ProtoFunID>() {
  return ::Global::stSynMyArenaRank_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynVipLv_ProtoModID>() {
  return ::Global::stSynVipLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynVipLv_ProtoFunID>() {
  return ::Global::stSynVipLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyClearArenaCD_ProtoModID>() {
  return ::Global::stNotifyClearArenaCD_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyClearArenaCD_ProtoFunID>() {
  return ::Global::stNotifyClearArenaCD_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqResetArenaChallengeNum_ProtoModID>() {
  return ::Global::stReqResetArenaChallengeNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqResetArenaChallengeNum_ProtoFunID>() {
  return ::Global::stReqResetArenaChallengeNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotfiyResetChallengeNum_ProtoModID>() {
  return ::Global::stNotfiyResetChallengeNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotfiyResetChallengeNum_ProtoFunID>() {
  return ::Global::stNotfiyResetChallengeNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqResetInterceptNum_ProtoModID>() {
  return ::Global::stReqResetInterceptNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqResetInterceptNum_ProtoFunID>() {
  return ::Global::stReqResetInterceptNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyClearInterceptCD_ProtoModID>() {
  return ::Global::stNotifyClearInterceptCD_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyClearInterceptCD_ProtoFunID>() {
  return ::Global::stNotifyClearInterceptCD_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyResetInterceptNum_ProtoModID>() {
  return ::Global::stNotifyResetInterceptNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyResetInterceptNum_ProtoFunID>() {
  return ::Global::stNotifyResetInterceptNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyGuardQuality_ProtoModID>() {
  return ::Global::stNotifyGuardQuality_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyGuardQuality_ProtoFunID>() {
  return ::Global::stNotifyGuardQuality_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyGuardInspiredSuccess_ProtoModID>() {
  return ::Global::stNotifyGuardInspiredSuccess_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyGuardInspiredSuccess_ProtoFunID>() {
  return ::Global::stNotifyGuardInspiredSuccess_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqRefreshGuardQuality_ProtoModID>() {
  return ::Global::stReqRefreshGuardQuality_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqRefreshGuardQuality_ProtoFunID>() {
  return ::Global::stReqRefreshGuardQuality_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyClearOne2OneScore_ProtoModID>() {
  return ::Global::stNotifyClearOne2OneScore_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyClearOne2OneScore_ProtoFunID>() {
  return ::Global::stNotifyClearOne2OneScore_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stClearOne2OneScoreSuccess_ProtoModID>() {
  return ::Global::stClearOne2OneScoreSuccess_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stClearOne2OneScoreSuccess_ProtoFunID>() {
  return ::Global::stClearOne2OneScoreSuccess_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stInterceptReward_ProtoModID>() {
  return ::Global::stInterceptReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stInterceptReward_ProtoFunID>() {
  return ::Global::stInterceptReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stQuickFinishDecDiamond_ProtoModID>() {
  return ::Global::stQuickFinishDecDiamond_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stQuickFinishDecDiamond_ProtoFunID>() {
  return ::Global::stQuickFinishDecDiamond_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stQuickFinishDiamondSuccess_ProtoModID>() {
  return ::Global::stQuickFinishDiamondSuccess_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stQuickFinishDiamondSuccess_ProtoFunID>() {
  return ::Global::stQuickFinishDiamondSuccess_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOne2OnePkWithRobot_ProtoModID>() {
  return ::Global::stOne2OnePkWithRobot_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOne2OnePkWithRobot_ProtoFunID>() {
  return ::Global::stOne2OnePkWithRobot_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyUserBeginGuard_ProtoModID>() {
  return ::Global::stNotifyUserBeginGuard_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyUserBeginGuard_ProtoFunID>() {
  return ::Global::stNotifyUserBeginGuard_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyUserInterceptResult_ProtoModID>() {
  return ::Global::stNotifyUserInterceptResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyUserInterceptResult_ProtoFunID>() {
  return ::Global::stNotifyUserInterceptResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyCloseBetaReward_ProtoModID>() {
  return ::Global::stNotifyCloseBetaReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyCloseBetaReward_ProtoFunID>() {
  return ::Global::stNotifyCloseBetaReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stEnterManorFightMap_ProtoModID>() {
  return ::Global::stEnterManorFightMap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stEnterManorFightMap_ProtoFunID>() {
  return ::Global::stEnterManorFightMap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stFinishManorFight_ProtoModID>() {
  return ::Global::stFinishManorFight_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stFinishManorFight_ProtoFunID>() {
  return ::Global::stFinishManorFight_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExistName_eResult>() {
  return ::Global::stExistName_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExistName_ProtoModID>() {
  return ::Global::stExistName_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExistName_ProtoFunID>() {
  return ::Global::stExistName_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynName_ProtoModID>() {
  return ::Global::stSynName_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynName_ProtoFunID>() {
  return ::Global::stSynName_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynGloryfashionCharID_ProtoModID>() {
  return ::Global::stSynGloryfashionCharID_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynGloryfashionCharID_ProtoFunID>() {
  return ::Global::stSynGloryfashionCharID_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stAllDevilCall_ProtoModID>() {
  return ::Global::stAllDevilCall_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stAllDevilCall_ProtoFunID>() {
  return ::Global::stAllDevilCall_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDevilCallReward_ProtoModID>() {
  return ::Global::stDevilCallReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDevilCallReward_ProtoFunID>() {
  return ::Global::stDevilCallReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDevilCallRewardRet_ProtoModID>() {
  return ::Global::stDevilCallRewardRet_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDevilCallRewardRet_ProtoFunID>() {
  return ::Global::stDevilCallRewardRet_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDevilCall_ProtoModID>() {
  return ::Global::stDevilCall_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDevilCall_ProtoFunID>() {
  return ::Global::stDevilCall_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDevilCallRet_ProtoModID>() {
  return ::Global::stDevilCallRet_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDevilCallRet_ProtoFunID>() {
  return ::Global::stDevilCallRet_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDevilCallSummary_ProtoModID>() {
  return ::Global::stDevilCallSummary_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDevilCallSummary_ProtoFunID>() {
  return ::Global::stDevilCallSummary_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExpeditionInfo_ProtoModID>() {
  return ::Global::stExpeditionInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExpeditionInfo_ProtoFunID>() {
  return ::Global::stExpeditionInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExpedition_ProtoModID>() {
  return ::Global::stExpedition_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExpedition_ProtoFunID>() {
  return ::Global::stExpedition_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExpeditionRet_ProtoModID>() {
  return ::Global::stExpeditionRet_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExpeditionRet_ProtoFunID>() {
  return ::Global::stExpeditionRet_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExpeditionReward_ProtoModID>() {
  return ::Global::stExpeditionReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExpeditionReward_ProtoFunID>() {
  return ::Global::stExpeditionReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExpeditionRewardRet_ProtoModID>() {
  return ::Global::stExpeditionRewardRet_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExpeditionRewardRet_ProtoFunID>() {
  return ::Global::stExpeditionRewardRet_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stFastExpedition_ProtoModID>() {
  return ::Global::stFastExpedition_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stFastExpedition_ProtoFunID>() {
  return ::Global::stFastExpedition_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stFastExpeditionRet_ProtoModID>() {
  return ::Global::stFastExpeditionRet_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stFastExpeditionRet_ProtoFunID>() {
  return ::Global::stFastExpeditionRet_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCancelExpedition_ProtoModID>() {
  return ::Global::stCancelExpedition_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCancelExpedition_ProtoFunID>() {
  return ::Global::stCancelExpedition_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCancelExpeditionRet_ProtoModID>() {
  return ::Global::stCancelExpeditionRet_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCancelExpeditionRet_ProtoFunID>() {
  return ::Global::stCancelExpeditionRet_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExpeditionSummary_ProtoModID>() {
  return ::Global::stExpeditionSummary_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stExpeditionSummary_ProtoFunID>() {
  return ::Global::stExpeditionSummary_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGiveLilianDayTaskCb_ProtoModID>() {
  return ::Global::stGiveLilianDayTaskCb_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGiveLilianDayTaskCb_ProtoFunID>() {
  return ::Global::stGiveLilianDayTaskCb_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUpdateDamageRank_ProtoModID>() {
  return ::Global::stUpdateDamageRank_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUpdateDamageRank_ProtoFunID>() {
  return ::Global::stUpdateDamageRank_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNoticeSendRankInfo_ProtoModID>() {
  return ::Global::stNoticeSendRankInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNoticeSendRankInfo_ProtoFunID>() {
  return ::Global::stNoticeSendRankInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOperateActivityCb_ProtoModID>() {
  return ::Global::stOperateActivityCb_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOperateActivityCb_ProtoFunID>() {
  return ::Global::stOperateActivityCb_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOperateActivityReward_ProtoModID>() {
  return ::Global::stOperateActivityReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOperateActivityReward_ProtoFunID>() {
  return ::Global::stOperateActivityReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOperateActivityRewardCb_ProtoModID>() {
  return ::Global::stOperateActivityRewardCb_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOperateActivityRewardCb_ProtoFunID>() {
  return ::Global::stOperateActivityRewardCb_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOperateActivityLotteryReward_ProtoModID>() {
  return ::Global::stOperateActivityLotteryReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOperateActivityLotteryReward_ProtoFunID>() {
  return ::Global::stOperateActivityLotteryReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOperateActivityLotteryRewardCb_ProtoModID>() {
  return ::Global::stOperateActivityLotteryRewardCb_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOperateActivityLotteryRewardCb_ProtoFunID>() {
  return ::Global::stOperateActivityLotteryRewardCb_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqPayTypeCb_ProtoModID>() {
  return ::Global::stReqPayTypeCb_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqPayTypeCb_ProtoFunID>() {
  return ::Global::stReqPayTypeCb_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqUserRankInfo_ProtoModID>() {
  return ::Global::stReqUserRankInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqUserRankInfo_ProtoFunID>() {
  return ::Global::stReqUserRankInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserRankInfoResult_ProtoModID>() {
  return ::Global::stUserRankInfoResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUserRankInfoResult_ProtoFunID>() {
  return ::Global::stUserRankInfoResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stEmeraldDreamCopymapFail_ProtoModID>() {
  return ::Global::stEmeraldDreamCopymapFail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stEmeraldDreamCopymapFail_ProtoFunID>() {
  return ::Global::stEmeraldDreamCopymapFail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stKillEmeraldDreamBoss_ProtoModID>() {
  return ::Global::stKillEmeraldDreamBoss_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stKillEmeraldDreamBoss_ProtoFunID>() {
  return ::Global::stKillEmeraldDreamBoss_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::strRemoveNum_ProtoModID>() {
  return ::Global::strRemoveNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::strRemoveNum_ProtoFunID>() {
  return ::Global::strRemoveNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCopyMapInfo_ProtoModID>() {
  return ::Global::stCopyMapInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCopyMapInfo_ProtoFunID>() {
  return ::Global::stCopyMapInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCopyMapInfoResult_ProtoModID>() {
  return ::Global::stCopyMapInfoResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stCopyMapInfoResult_ProtoFunID>() {
  return ::Global::stCopyMapInfoResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRealTimeTeamMatch_ProtoModID>() {
  return ::Global::stRealTimeTeamMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRealTimeTeamMatch_ProtoFunID>() {
  return ::Global::stRealTimeTeamMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOnPubLeaveTeam_ProtoModID>() {
  return ::Global::stOnPubLeaveTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stOnPubLeaveTeam_ProtoFunID>() {
  return ::Global::stOnPubLeaveTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDeductMoney_ProtoModID>() {
  return ::Global::stDeductMoney_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDeductMoney_ProtoFunID>() {
  return ::Global::stDeductMoney_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDeductMoneyResult_eResult>() {
  return ::Global::stDeductMoneyResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDeductMoneyResult_ProtoModID>() {
  return ::Global::stDeductMoneyResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDeductMoneyResult_ProtoFunID>() {
  return ::Global::stDeductMoneyResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGiveReward_ProtoModID>() {
  return ::Global::stGiveReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGiveReward_ProtoFunID>() {
  return ::Global::stGiveReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGiveRewardResult_eResult>() {
  return ::Global::stGiveRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGiveRewardResult_ProtoModID>() {
  return ::Global::stGiveRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGiveRewardResult_ProtoFunID>() {
  return ::Global::stGiveRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqCheckMission_ProtoModID>() {
  return ::Global::stReqCheckMission_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqCheckMission_ProtoFunID>() {
  return ::Global::stReqCheckMission_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqCheckTask_ProtoModID>() {
  return ::Global::stReqCheckTask_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqCheckTask_ProtoFunID>() {
  return ::Global::stReqCheckTask_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqEnterTaskLv_ProtoModID>() {
  return ::Global::stReqEnterTaskLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqEnterTaskLv_ProtoFunID>() {
  return ::Global::stReqEnterTaskLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqDisbandTeam_ProtoModID>() {
  return ::Global::stReqDisbandTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqDisbandTeam_ProtoFunID>() {
  return ::Global::stReqDisbandTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqDrawInviteReward_ProtoModID>() {
  return ::Global::stReqDrawInviteReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqDrawInviteReward_ProtoFunID>() {
  return ::Global::stReqDrawInviteReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqDrawInviteRewardCb_ProtoModID>() {
  return ::Global::stReqDrawInviteRewardCb_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqDrawInviteRewardCb_ProtoFunID>() {
  return ::Global::stReqDrawInviteRewardCb_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqDrawUseInviteReward_ProtoModID>() {
  return ::Global::stReqDrawUseInviteReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqDrawUseInviteReward_ProtoFunID>() {
  return ::Global::stReqDrawUseInviteReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRoleInfo_ProtoModID>() {
  return ::Global::stRoleInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRoleInfo_ProtoFunID>() {
  return ::Global::stRoleInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stHeroLeagueEnterCopyMap_ProtoModID>() {
  return ::Global::stHeroLeagueEnterCopyMap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stHeroLeagueEnterCopyMap_ProtoFunID>() {
  return ::Global::stHeroLeagueEnterCopyMap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stHeroLeaguePkWithRobot_ProtoModID>() {
  return ::Global::stHeroLeaguePkWithRobot_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stHeroLeaguePkWithRobot_ProtoFunID>() {
  return ::Global::stHeroLeaguePkWithRobot_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqHeroLeagueCheck_eResult>() {
  return ::Global::stReqHeroLeagueCheck_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqHeroLeagueCheck_ProtoModID>() {
  return ::Global::stReqHeroLeagueCheck_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqHeroLeagueCheck_ProtoFunID>() {
  return ::Global::stReqHeroLeagueCheck_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stHeroLeagueMatch_ProtoModID>() {
  return ::Global::stHeroLeagueMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stHeroLeagueMatch_ProtoFunID>() {
  return ::Global::stHeroLeagueMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stHeroLeagueResult_ProtoModID>() {
  return ::Global::stHeroLeagueResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stHeroLeagueResult_ProtoFunID>() {
  return ::Global::stHeroLeagueResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynRoleList_ProtoModID>() {
  return ::Global::stSynRoleList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynRoleList_ProtoFunID>() {
  return ::Global::stSynRoleList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynRoleListResult_ProtoModID>() {
  return ::Global::stSynRoleListResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynRoleListResult_ProtoFunID>() {
  return ::Global::stSynRoleListResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqSynChampionInfo_ProtoModID>() {
  return ::Global::stReqSynChampionInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqSynChampionInfo_ProtoFunID>() {
  return ::Global::stReqSynChampionInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqWorskip_ProtoModID>() {
  return ::Global::stReqWorskip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqWorskip_ProtoFunID>() {
  return ::Global::stReqWorskip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWorskipResult_eResult>() {
  return ::Global::stWorskipResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWorskipResult_ProtoModID>() {
  return ::Global::stWorskipResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWorskipResult_ProtoFunID>() {
  return ::Global::stWorskipResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqRedPoint_ProtoModID>() {
  return ::Global::stReqRedPoint_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqRedPoint_ProtoFunID>() {
  return ::Global::stReqRedPoint_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRedPointResult_ProtoModID>() {
  return ::Global::stRedPointResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRedPointResult_ProtoFunID>() {
  return ::Global::stRedPointResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stInterceptResultToGlobal_ProtoModID>() {
  return ::Global::stInterceptResultToGlobal_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stInterceptResultToGlobal_ProtoFunID>() {
  return ::Global::stInterceptResultToGlobal_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetRoomInfo_ProtoModID>() {
  return ::Global::stRetRoomInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetRoomInfo_ProtoFunID>() {
  return ::Global::stRetRoomInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetAddTeamMember_ProtoModID>() {
  return ::Global::stRetAddTeamMember_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetAddTeamMember_ProtoFunID>() {
  return ::Global::stRetAddTeamMember_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqPropose_ProtoModID>() {
  return ::Global::stReqPropose_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqPropose_ProtoFunID>() {
  return ::Global::stReqPropose_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqAgreeMarry_ProtoModID>() {
  return ::Global::stReqAgreeMarry_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqAgreeMarry_ProtoFunID>() {
  return ::Global::stReqAgreeMarry_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqQuitWedding_ProtoModID>() {
  return ::Global::stReqQuitWedding_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqQuitWedding_ProtoFunID>() {
  return ::Global::stReqQuitWedding_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqReEnterWedding_ProtoModID>() {
  return ::Global::stReqReEnterWedding_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqReEnterWedding_ProtoFunID>() {
  return ::Global::stReqReEnterWedding_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqBuyFireWork_ProtoModID>() {
  return ::Global::stReqBuyFireWork_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqBuyFireWork_ProtoFunID>() {
  return ::Global::stReqBuyFireWork_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqAgreeInvite_ProtoModID>() {
  return ::Global::stReqAgreeInvite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqAgreeInvite_ProtoFunID>() {
  return ::Global::stReqAgreeInvite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqTakeCandy_ProtoModID>() {
  return ::Global::stReqTakeCandy_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqTakeCandy_ProtoFunID>() {
  return ::Global::stReqTakeCandy_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyCoupleMarry_ProtoModID>() {
  return ::Global::stNotifyCoupleMarry_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyCoupleMarry_ProtoFunID>() {
  return ::Global::stNotifyCoupleMarry_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendWeedingRing_ProtoModID>() {
  return ::Global::stSendWeedingRing_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendWeedingRing_ProtoFunID>() {
  return ::Global::stSendWeedingRing_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stMarryInfoCb_ProtoModID>() {
  return ::Global::stMarryInfoCb_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stMarryInfoCb_ProtoFunID>() {
  return ::Global::stMarryInfoCb_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUseFireWork_ProtoModID>() {
  return ::Global::stUseFireWork_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUseFireWork_ProtoFunID>() {
  return ::Global::stUseFireWork_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetMarryInfoToCouple_ProtoModID>() {
  return ::Global::stRetMarryInfoToCouple_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetMarryInfoToCouple_ProtoFunID>() {
  return ::Global::stRetMarryInfoToCouple_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyCoupleMarryCb_ProtoModID>() {
  return ::Global::stNotifyCoupleMarryCb_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyCoupleMarryCb_ProtoFunID>() {
  return ::Global::stNotifyCoupleMarryCb_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetForceDivorce_ProtoModID>() {
  return ::Global::stRetForceDivorce_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetForceDivorce_ProtoFunID>() {
  return ::Global::stRetForceDivorce_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetForceDivorceCb_ProtoModID>() {
  return ::Global::stRetForceDivorceCb_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetForceDivorceCb_ProtoFunID>() {
  return ::Global::stRetForceDivorceCb_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetRejectDivorce_ProtoModID>() {
  return ::Global::stRetRejectDivorce_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetRejectDivorce_ProtoFunID>() {
  return ::Global::stRetRejectDivorce_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetDelUserOnlineMarryInfo_ProtoModID>() {
  return ::Global::stRetDelUserOnlineMarryInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetDelUserOnlineMarryInfo_ProtoFunID>() {
  return ::Global::stRetDelUserOnlineMarryInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqSynGuildBlackMarketLv_ProtoModID>() {
  return ::Global::stReqSynGuildBlackMarketLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqSynGuildBlackMarketLv_ProtoFunID>() {
  return ::Global::stReqSynGuildBlackMarketLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynGuildBlackMarketLvResult_ProtoModID>() {
  return ::Global::stSynGuildBlackMarketLvResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynGuildBlackMarketLvResult_ProtoFunID>() {
  return ::Global::stSynGuildBlackMarketLvResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stEnterResBattle_ProtoModID>() {
  return ::Global::stEnterResBattle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stEnterResBattle_ProtoFunID>() {
  return ::Global::stEnterResBattle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBroadResBattleInvite_ProtoModID>() {
  return ::Global::stBroadResBattleInvite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBroadResBattleInvite_ProtoFunID>() {
  return ::Global::stBroadResBattleInvite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stPubOffline_ProtoModID>() {
  return ::Global::stPubOffline_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stPubOffline_ProtoFunID>() {
  return ::Global::stPubOffline_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDiscoverConsume_ProtoModID>() {
  return ::Global::stDiscoverConsume_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDiscoverConsume_ProtoFunID>() {
  return ::Global::stDiscoverConsume_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynCoupleInfo_ProtoModID>() {
  return ::Global::stSynCoupleInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynCoupleInfo_ProtoFunID>() {
  return ::Global::stSynCoupleInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynResBattleUserData_ProtoModID>() {
  return ::Global::stSynResBattleUserData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynResBattleUserData_ProtoFunID>() {
  return ::Global::stSynResBattleUserData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynResBattleTop50_ProtoModID>() {
  return ::Global::stSynResBattleTop50_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynResBattleTop50_ProtoFunID>() {
  return ::Global::stSynResBattleTop50_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynResBattleKing_ProtoModID>() {
  return ::Global::stSynResBattleKing_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynResBattleKing_ProtoFunID>() {
  return ::Global::stSynResBattleKing_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReplyInviteResBattle_ProtoModID>() {
  return ::Global::stReplyInviteResBattle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReplyInviteResBattle_ProtoFunID>() {
  return ::Global::stReplyInviteResBattle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynGloryKingTitle_ProtoModID>() {
  return ::Global::stSynGloryKingTitle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynGloryKingTitle_ProtoFunID>() {
  return ::Global::stSynGloryKingTitle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stPubOnline_ProtoModID>() {
  return ::Global::stPubOnline_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stPubOnline_ProtoFunID>() {
  return ::Global::stPubOnline_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stResBattleSend2Pub_ProtoModID>() {
  return ::Global::stResBattleSend2Pub_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stResBattleSend2Pub_ProtoFunID>() {
  return ::Global::stResBattleSend2Pub_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stServerParamSend2Game_ProtoModID>() {
  return ::Global::stServerParamSend2Game_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stServerParamSend2Game_ProtoFunID>() {
  return ::Global::stServerParamSend2Game_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynUserPhotoID_ProtoModID>() {
  return ::Global::stSynUserPhotoID_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSynUserPhotoID_ProtoFunID>() {
  return ::Global::stSynUserPhotoID_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUseLvlBox_ProtoModID>() {
  return ::Global::stUseLvlBox_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUseLvlBox_ProtoFunID>() {
  return ::Global::stUseLvlBox_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUseLvlBoxRes_ProtoModID>() {
  return ::Global::stUseLvlBoxRes_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUseLvlBoxRes_ProtoFunID>() {
  return ::Global::stUseLvlBoxRes_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRechangeStatistics_ProtoModID>() {
  return ::Global::stRechangeStatistics_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRechangeStatistics_ProtoFunID>() {
  return ::Global::stRechangeStatistics_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGlobal2GameQueryUserNft_ProtoModID>() {
  return ::Global::stGlobal2GameQueryUserNft_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGlobal2GameQueryUserNft_ProtoFunID>() {
  return ::Global::stGlobal2GameQueryUserNft_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGame2GlobalQueryUserNftResult_ProtoModID>() {
  return ::Global::stGame2GlobalQueryUserNftResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGame2GlobalQueryUserNftResult_ProtoFunID>() {
  return ::Global::stGame2GlobalQueryUserNftResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGlobal2GameChangeNftItem_ProtoModID>() {
  return ::Global::stGlobal2GameChangeNftItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGlobal2GameChangeNftItem_ProtoFunID>() {
  return ::Global::stGlobal2GameChangeNftItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGame2GlobalChangeNftItemResult_ProtoModID>() {
  return ::Global::stGame2GlobalChangeNftItemResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGame2GlobalChangeNftItemResult_ProtoFunID>() {
  return ::Global::stGame2GlobalChangeNftItemResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGame2GlobalNftVipGift_ProtoModID>() {
  return ::Global::stGame2GlobalNftVipGift_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGame2GlobalNftVipGift_ProtoFunID>() {
  return ::Global::stGame2GlobalNftVipGift_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetNftOfflineUserData_ProtoModID>() {
  return ::Global::stRetNftOfflineUserData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetNftOfflineUserData_ProtoFunID>() {
  return ::Global::stRetNftOfflineUserData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetChangeNftOfflineUserData_ProtoModID>() {
  return ::Global::stRetChangeNftOfflineUserData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetChangeNftOfflineUserData_ProtoFunID>() {
  return ::Global::stRetChangeNftOfflineUserData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendUserLog_ProtoModID>() {
  return ::Global::stSendUserLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendUserLog_ProtoFunID>() {
  return ::Global::stSendUserLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqKillUserOut_ProtoModID>() {
  return ::Global::stReqKillUserOut_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqKillUserOut_ProtoFunID>() {
  return ::Global::stReqKillUserOut_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stKillUserOutResult_ProtoModID>() {
  return ::Global::stKillUserOutResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stKillUserOutResult_ProtoFunID>() {
  return ::Global::stKillUserOutResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqSetUserGMType_ProtoModID>() {
  return ::Global::stReqSetUserGMType_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqSetUserGMType_ProtoFunID>() {
  return ::Global::stReqSetUserGMType_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSetUserGMTypeResult_ProtoModID>() {
  return ::Global::stSetUserGMTypeResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSetUserGMTypeResult_ProtoFunID>() {
  return ::Global::stSetUserGMTypeResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqBanUser_ProtoModID>() {
  return ::Global::stReqBanUser_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqBanUser_ProtoFunID>() {
  return ::Global::stReqBanUser_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBanUserResult_ProtoModID>() {
  return ::Global::stBanUserResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stBanUserResult_ProtoFunID>() {
  return ::Global::stBanUserResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendMail2User_ProtoModID>() {
  return ::Global::stSendMail2User_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendMail2User_ProtoFunID>() {
  return ::Global::stSendMail2User_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendMail2UserResult_ProtoModID>() {
  return ::Global::stSendMail2UserResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendMail2UserResult_ProtoFunID>() {
  return ::Global::stSendMail2UserResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWebMotifyUserInfo_ProtoModID>() {
  return ::Global::stWebMotifyUserInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWebMotifyUserInfo_ProtoFunID>() {
  return ::Global::stWebMotifyUserInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWebMotifyUserInfoRet_ProtoModID>() {
  return ::Global::stWebMotifyUserInfoRet_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWebMotifyUserInfoRet_ProtoFunID>() {
  return ::Global::stWebMotifyUserInfoRet_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stAddOrUpdateNotice_ProtoModID>() {
  return ::Global::stAddOrUpdateNotice_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stAddOrUpdateNotice_ProtoFunID>() {
  return ::Global::stAddOrUpdateNotice_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDelNotice_ProtoModID>() {
  return ::Global::stDelNotice_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDelNotice_ProtoFunID>() {
  return ::Global::stDelNotice_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWebNotifyRechargeInfo_ProtoModID>() {
  return ::Global::stWebNotifyRechargeInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWebNotifyRechargeInfo_ProtoFunID>() {
  return ::Global::stWebNotifyRechargeInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stAddGiftBagCfg_ProtoModID>() {
  return ::Global::stAddGiftBagCfg_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stAddGiftBagCfg_ProtoFunID>() {
  return ::Global::stAddGiftBagCfg_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDelGiftBagCfg_ProtoModID>() {
  return ::Global::stDelGiftBagCfg_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stDelGiftBagCfg_ProtoFunID>() {
  return ::Global::stDelGiftBagCfg_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stAddBlackAndWhite_ProtoModID>() {
  return ::Global::stAddBlackAndWhite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stAddBlackAndWhite_ProtoFunID>() {
  return ::Global::stAddBlackAndWhite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSetServerMaintenanceTime_ProtoModID>() {
  return ::Global::stSetServerMaintenanceTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSetServerMaintenanceTime_ProtoFunID>() {
  return ::Global::stSetServerMaintenanceTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGetSvrConfig_ProtoModID>() {
  return ::Global::stGetSvrConfig_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGetSvrConfig_ProtoFunID>() {
  return ::Global::stGetSvrConfig_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetSvrConfig_ProtoModID>() {
  return ::Global::stRetSvrConfig_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetSvrConfig_ProtoFunID>() {
  return ::Global::stRetSvrConfig_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUpdateSvrCfg_ProtoModID>() {
  return ::Global::stUpdateSvrCfg_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUpdateSvrCfg_ProtoFunID>() {
  return ::Global::stUpdateSvrCfg_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyWebOnlineNum_ProtoModID>() {
  return ::Global::stNotifyWebOnlineNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyWebOnlineNum_ProtoFunID>() {
  return ::Global::stNotifyWebOnlineNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stEnterSelectPage_ProtoModID>() {
  return ::Global::stEnterSelectPage_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stEnterSelectPage_ProtoFunID>() {
  return ::Global::stEnterSelectPage_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyWebCreateRole_ProtoModID>() {
  return ::Global::stNotifyWebCreateRole_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stNotifyWebCreateRole_ProtoFunID>() {
  return ::Global::stNotifyWebCreateRole_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendGuildLog_ProtoModID>() {
  return ::Global::stSendGuildLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendGuildLog_ProtoFunID>() {
  return ::Global::stSendGuildLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::sstSendGuildResLog_ProtoModID>() {
  return ::Global::sstSendGuildResLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::sstSendGuildResLog_ProtoFunID>() {
  return ::Global::sstSendGuildResLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendModuleLog_ProtoModID>() {
  return ::Global::stSendModuleLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendModuleLog_ProtoFunID>() {
  return ::Global::stSendModuleLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqGetTxGiftBag_ProtoModID>() {
  return ::Global::stReqGetTxGiftBag_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqGetTxGiftBag_ProtoFunID>() {
  return ::Global::stReqGetTxGiftBag_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetGetTxGiftBag_ProtoModID>() {
  return ::Global::stRetGetTxGiftBag_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stRetGetTxGiftBag_ProtoFunID>() {
  return ::Global::stRetGetTxGiftBag_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUpdateSvrOpenTime_ProtoModID>() {
  return ::Global::stUpdateSvrOpenTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUpdateSvrOpenTime_ProtoFunID>() {
  return ::Global::stUpdateSvrOpenTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stResourceChgLog_ProtoModID>() {
  return ::Global::stResourceChgLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stResourceChgLog_ProtoFunID>() {
  return ::Global::stResourceChgLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUseInviteCode_ProtoModID>() {
  return ::Global::stUseInviteCode_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUseInviteCode_ProtoFunID>() {
  return ::Global::stUseInviteCode_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUseInviteCodeCb_ProtoModID>() {
  return ::Global::stUseInviteCodeCb_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stUseInviteCodeCb_ProtoFunID>() {
  return ::Global::stUseInviteCodeCb_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqLimitPetActivityData_ProtoModID>() {
  return ::Global::stReqLimitPetActivityData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stReqLimitPetActivityData_ProtoFunID>() {
  return ::Global::stReqLimitPetActivityData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendLimitPetActivityData_ProtoModID>() {
  return ::Global::stSendLimitPetActivityData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendLimitPetActivityData_ProtoFunID>() {
  return ::Global::stSendLimitPetActivityData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendShutDown_ProtoModID>() {
  return ::Global::stSendShutDown_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stSendShutDown_ProtoFunID>() {
  return ::Global::stSendShutDown_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWeb2GlobalQueryUserNft_ProtoModID>() {
  return ::Global::stWeb2GlobalQueryUserNft_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWeb2GlobalQueryUserNft_ProtoFunID>() {
  return ::Global::stWeb2GlobalQueryUserNft_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGlobal2WebQueryUserNftResult_ProtoModID>() {
  return ::Global::stGlobal2WebQueryUserNftResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGlobal2WebQueryUserNftResult_ProtoFunID>() {
  return ::Global::stGlobal2WebQueryUserNftResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWeb2GlobalChangeNftItem_ProtoModID>() {
  return ::Global::stWeb2GlobalChangeNftItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stWeb2GlobalChangeNftItem_ProtoFunID>() {
  return ::Global::stWeb2GlobalChangeNftItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGlobal2WebChangeNftItemResult_ProtoModID>() {
  return ::Global::stGlobal2WebChangeNftItemResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::stGlobal2WebChangeNftItemResult_ProtoFunID>() {
  return ::Global::stGlobal2WebChangeNftItemResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::GlobalModID>() {
  return ::Global::GlobalModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::SaveType>() {
  return ::Global::SaveType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::eLoadRoleDataType>() {
  return ::Global::eLoadRoleDataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::eGMType>() {
  return ::Global::eGMType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::eRealTimePKType>() {
  return ::Global::eRealTimePKType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::eRankModule_ID>() {
  return ::Global::eRankModule_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Global::eNoticeOp>() {
  return ::Global::eNoticeOp_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Global_2eproto__INCLUDED
