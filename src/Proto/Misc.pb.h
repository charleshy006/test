// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Misc.proto

#ifndef PROTOBUF_Misc_2eproto__INCLUDED
#define PROTOBUF_Misc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ModID.pb.h"
// @@protoc_insertion_point(includes)

namespace MiscProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Misc_2eproto();
void protobuf_AssignDesc_Misc_2eproto();
void protobuf_ShutdownFile_Misc_2eproto();

class stSynMainSnalInfo;
class stSynMailAttach;
class stSynDetailMailInfo;
class stSynAllMail;
class stReqReadMail;
class stRetMailInfo;
class stReqFetchAttach;
class stFetchAttachResult;
class stReceiveMail;
class stReqRewardInfo;
class stRetRewardInfo;
class stReqSignReward;
class stGetSignRewardResult;
class stReqOpenSvrReward;
class stGetOpenSvrRewardResult;
class stReqLvReward;
class stLvRewardResult;
class stReqOnlineReward;
class stGetOnlineRewardResult;
class stBuyStarInfo;
class stReqBuyStar;
class stBuyStarResult;
class ReqOpenDrawWindow;
class stDrawWindowInfo;
class stReqDraw;
class stSynDrawItem;
class stDrawResult;
class stSynMyTitle;
class stActiveOneTitle;
class stActiveTitleResult;
class stObtainOneTitle;
class stBuyInvestPlan;
class stBuyInvestPlanResult;
class stReqInvestPlanReward;
class stInvestPlanRewardResult;
class stReqEatDinner;
class stEatDinnerResult;
class stSynActivityData;
class stReqOpenCaptureTreasure;
class stSynCaptureTreasureInfo;
class stRetCaptureTreasure;
class stReqCombineTreasure;
class stCombineTreasureResult;
class stBuyPeaceModuleTime;
class stBuyPeaceModuleTimeResult;
class stCaptureTreasureUserInfo;
class stReqChallengeUserList;
class stRetChallengeUserList;
class stCaptureUserTreasure;
class stSynCaptureReward;
class stCaptureUserTreasureResult;
class stSynTreasureNum;
class stCancelActiveTitle;
class stCancelActiveTitleResult;
class stSynSpriteInfo;
class stSynAllSprite;
class stReqUnlockedSprite;
class stUnlockedSpriteResult;
class stAddSprite;
class stReqLevelupSprite;
class stLevelupSpriteResult;
class stSpriteFollowMaster;
class stSpriteFollowMasterResult;
class stReqAvaibleActivity;
class stSynActivityStepReward;
class stSynActivityStepOptionalReward;
class stSynActivityStepInfo;
class stSynActivityInfo;
class stRetAvaibleActivity;
class stReqAcitivityReward;
class stActivityRewardResult;
class stReqWorldBossDamageRank;
class stWorldBossDamageSortItem;
class stRetWorldBossDamageRank;
class stReqOpenWorldBossWin;
class stRetOpenWorldBossWin;
class stReqBossWorldMatch;
class stRetBossWorldMatch;
class stReqClearWorldBossActivityCD;
class stClearWorldBossActivityCDResult;
class stReqRaiseDamageInWorldBoss;
class stRaiseDamageInWorldBossResult;
class stCancelWorldBossMatch;
class stCancelWorldBossMatchResult;
class stQueryDrawHeroActivity;
class stRetDrawHeroActivityInfo;
class stReqDrawHeroScoreReward;
class stDrawHeroScoreRewardRet;
class stReqDrawHeroRankReward;
class stDrawHeroRankReward;
class stReqCompensationList;
class stCompensationItem;
class stCompensationInfo;
class stRetCompensationList;
class stReqGotCompensation;
class stGotCompensationResult;
class stReq7DayActivityInfo;
class stSynSDGoalInfo;
class stRet7DayActivityInfo;
class stReqSevenDayReward;
class stSevenDayRewardRet;
class stSevenDayHasRewardTip;
class stAppStoreCfg;
class stOpenWindowTip;
class stReqRechargeActivityList;
class stSynRechargeActivityInfo;
class stRetRechargeActivityList;
class stReqRechargeActivtiyReward;
class stRetRechargeActivityReward;
class stSynInvestigation;
class stSynAllInvestigation;
class stInvestAnswer;
class stReqInvestgationReward;
class stInvestgationRewardResult;
class stReqActivityShop;
class stActivityShopList;
class stLuchShopInfo;
class stSynLuckShopTodayRecharge;
class stReqLuckShopReward;
class stLuckShopRewardResult;
class stSaveOpenLuckShopWinTime;
class stLuckShopRechargeMeetCondTime;
class stReqOpenGuardWin;
class stGuardEnemy;
class stGuardBaseInfo;
class stGuardDetailInfo;
class stGuardWinInfo;
class stResetInterceptCD;
class stResetInterceptCDResult;
class stResetInterceptNum;
class stResetInterceptNumResult;
class stReqGuardDetailInfo;
class stRetGuardDetailInfo;
class stReqIntercept;
class stIntercerptResult;
class stReqGuard;
class stRetGuardWin;
class stReqSummonHighQualityGuard;
class stSummonHighQualityGuardResult;
class stReqGuardInspired;
class stGuardInspiredResult;
class stReqRefreshGuardQuality;
class stRetRefreshGuardQualityResult;
class stReqCanHelpGuardFriend;
class stHelpGaurdFriendInfo;
class stRetCanHelpGuardFriend;
class stInviteFriendForHelpGuard;
class stInviteFriendForHelpGuardResult;
class stAskFriendHelpGuard;
class stReplyHelpGuard;
class stReplyHelpGuardResult;
class stUserAgreeHelpGuard;
class stBeginGuard;
class stBeginGuardResult;
class stInterceptInfo;
class stReqInterceptInfo;
class stRetInterceptInfo;
class stRechargeActivityInfoItem;
class stNotifyRechargeActivityInfo;
class stLuckShopRefreshResult;
class stNotifyGuardFinish;
class stNotifyFriendGuardFinish;
class stNotifyInterceptResult;
class stReplyNotifyIntercept;
class stQuickFinishGuard;
class stQuickFinishGuardResult;
class stNotifyDelTitle;
class stBeInterceptTip;
class stOnlineNotifyNewInterceptInfo;
class stReqOpenLimitFashionDrawWin;
class stRetLimitFashionDrawWinInfo;
class stReqDrawLimitFashion;
class stDrawLimitFashionResult;
class stExchangeItem;
class stSynExchangeActivityiStep;
class stSynExchangeActivity;
class stRetExchangeActivity;
class stReqExchangeItem;
class stExchangeItemResult;
class stRecycleRechargeActivity;
class stSendRecycleRechargeActivity;
class stReqRecycleRechargeActReward;
class stRetRecycleRechargeActReward;
class stCommonActInfoItem;
class stRefreshCommonActInfo;
class stReqAKeyFetchAttach;
class stAKeyFetchAttachResult;
class stReqGloryfashion;
class stGloryfashionResult;
class stDevilCallItem;
class stReqAllDevilCall;
class stRetAllDevilCall;
class stReqDevilCallReward;
class stRetDevilCallReward;
class stReqDevilCall;
class stRetDevilCall;
class stReqDevilCallSummary;
class stRetDevilCallSummary;
class stReqPayType;
class stRetPayType;
class stReqOperateActvity;
class stOperateActvityItemInfo;
class stOperateActvityItems;
class stRetOperateActvity;
class stReqOperateActvityReward;
class stRetOperateActvityReward;
class stReqIllusionSprite;
class stIllusionSpriteSkillItem;
class stRetIllusionSprite;
class illusionSpriteEatItem;
class stReqIllusionSpriteEat;
class stRetIllusionSpriteEat;
class stReqIllusionSpriteSkillUp;
class stRetIllusionSpriteSkillUp;
class stRepOpenDiscoverWindow;
class stOpenDiscoverWindowResult;
class stReqPlayDice;
class stPlayDiceResult;
class stReqGetOrGiveUpTask;
class stGetTaskResult;
class stGiveUpTaskResult;
class stReqRefreshNum;
class stRefreshNumResult;
class stReqGetIntegralReward;
class stGetIntegralRewardResult;
class stReqGiveReward;
class stGiveRewardResult;
class stReqLuckyDraw;
class stLuckyDrawPointRewardInfo;
class stLuckyDrawRewardInfo;
class stLuckyDrawUserInfo;
class stRetLuckyDraw;
class stReqLuckyDrawReward;
class stRetLuckyDrawReward;
class stReqLuckyDrawPointReward;
class stRetLuckyDrawPointReward;
class stReqRedPointRuls;
class stRedPointRulsResult;
class stReqInviteFriend;
class InviteFriendReward;
class stRetInviteFriend;
class stReqDrawInviteFriend;
class stRetDrawInviteFriend;
class stReqUseInviteCode;
class stRetUseInviteCode;
class stReqShareInvite;
class stRetShareInvite;
class stReqDailyShareInvite;
class stRetDailyShareInvite;
class stReqDrawDailyShareReward;
class stRetDrawDailyShareReward;
class stReqDrawOnceShareReward;
class stRetDrawOnceShareReward;
class stNotifyInterceptServerResult;
class stReqReceiveState;
class stReceiveStateResult;
class stReqReceiveReward;
class stReceiveRewardResult;
class stAcitivityLimitPetItem;
class stSendAllAcitivityLimitPet;
class stSendLateWalfareActivity;
class stReqDrawLateWalfare;
class stRetDrawLateWalfare;
class stResGetBackItem;
class stSendAllResGetBack;
class stReqDrawResGetBack;
class stRetDrawResGetBack;
class stReqDrawAllResGetBack;
class stRetDrawAllResGetBack;
class stReqOpenMonsterWindow;
class stOpenMonsterWindowResult;
class stReqAttackMonster;
class stAttackMonsterResult;
class stReqBuyAttackTime;
class stBuyAttackTimeResult;
class stReqAKeyAttackMonster;
class stAKeyAttackMonsterResult;
class stSynTipItem;
class stObtainItemTip;
class stUserOnline;
class stConsumeItemInfo;
class stReqMountLevelUp;
class stMountLevelUpResult;
class stReqButtleMount;
class stButtleMountResult;
class stReqMountFollow;
class stMountFollowResult;
class stReqMountUnreal;
class stMountUnrealResult;
class stReqOpenMountGrowWindow;
class stOpenMountGrowWindowResult;
class stRefreshBattle;
class stLevelWflfareInfo;
class stHasGotRewardWflfareInfo;
class stReqReceiveWflfare;
class stReceiveWflfareResult;
class stReqPaySign;
class stRetPaySign;
class stReqServerPay;
class stRetServerPay;
class stReqSummonReward;
class stSummonRewardResult;
class stReqSummonData;
class stSummonDataResult;
class stBuySummonPlanResult;
class stReqRechargeCheck;
class stRechargeCheckResult;

enum stSynAllMail_ProtoModID {
  stSynAllMail_ProtoModID_ModID = 8
};
bool stSynAllMail_ProtoModID_IsValid(int value);
const stSynAllMail_ProtoModID stSynAllMail_ProtoModID_ProtoModID_MIN = stSynAllMail_ProtoModID_ModID;
const stSynAllMail_ProtoModID stSynAllMail_ProtoModID_ProtoModID_MAX = stSynAllMail_ProtoModID_ModID;
const int stSynAllMail_ProtoModID_ProtoModID_ARRAYSIZE = stSynAllMail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAllMail_ProtoModID_descriptor();
inline const ::std::string& stSynAllMail_ProtoModID_Name(stSynAllMail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAllMail_ProtoModID_descriptor(), value);
}
inline bool stSynAllMail_ProtoModID_Parse(
    const ::std::string& name, stSynAllMail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAllMail_ProtoModID>(
    stSynAllMail_ProtoModID_descriptor(), name, value);
}
enum stSynAllMail_ProtoFunID {
  stSynAllMail_ProtoFunID_FunID = 1
};
bool stSynAllMail_ProtoFunID_IsValid(int value);
const stSynAllMail_ProtoFunID stSynAllMail_ProtoFunID_ProtoFunID_MIN = stSynAllMail_ProtoFunID_FunID;
const stSynAllMail_ProtoFunID stSynAllMail_ProtoFunID_ProtoFunID_MAX = stSynAllMail_ProtoFunID_FunID;
const int stSynAllMail_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynAllMail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAllMail_ProtoFunID_descriptor();
inline const ::std::string& stSynAllMail_ProtoFunID_Name(stSynAllMail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAllMail_ProtoFunID_descriptor(), value);
}
inline bool stSynAllMail_ProtoFunID_Parse(
    const ::std::string& name, stSynAllMail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAllMail_ProtoFunID>(
    stSynAllMail_ProtoFunID_descriptor(), name, value);
}
enum stReqReadMail_ProtoModID {
  stReqReadMail_ProtoModID_ModID = 8
};
bool stReqReadMail_ProtoModID_IsValid(int value);
const stReqReadMail_ProtoModID stReqReadMail_ProtoModID_ProtoModID_MIN = stReqReadMail_ProtoModID_ModID;
const stReqReadMail_ProtoModID stReqReadMail_ProtoModID_ProtoModID_MAX = stReqReadMail_ProtoModID_ModID;
const int stReqReadMail_ProtoModID_ProtoModID_ARRAYSIZE = stReqReadMail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReadMail_ProtoModID_descriptor();
inline const ::std::string& stReqReadMail_ProtoModID_Name(stReqReadMail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReadMail_ProtoModID_descriptor(), value);
}
inline bool stReqReadMail_ProtoModID_Parse(
    const ::std::string& name, stReqReadMail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReadMail_ProtoModID>(
    stReqReadMail_ProtoModID_descriptor(), name, value);
}
enum stReqReadMail_ProtoFunID {
  stReqReadMail_ProtoFunID_FunID = 2
};
bool stReqReadMail_ProtoFunID_IsValid(int value);
const stReqReadMail_ProtoFunID stReqReadMail_ProtoFunID_ProtoFunID_MIN = stReqReadMail_ProtoFunID_FunID;
const stReqReadMail_ProtoFunID stReqReadMail_ProtoFunID_ProtoFunID_MAX = stReqReadMail_ProtoFunID_FunID;
const int stReqReadMail_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqReadMail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReadMail_ProtoFunID_descriptor();
inline const ::std::string& stReqReadMail_ProtoFunID_Name(stReqReadMail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReadMail_ProtoFunID_descriptor(), value);
}
inline bool stReqReadMail_ProtoFunID_Parse(
    const ::std::string& name, stReqReadMail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReadMail_ProtoFunID>(
    stReqReadMail_ProtoFunID_descriptor(), name, value);
}
enum stRetMailInfo_ProtoModID {
  stRetMailInfo_ProtoModID_ModID = 8
};
bool stRetMailInfo_ProtoModID_IsValid(int value);
const stRetMailInfo_ProtoModID stRetMailInfo_ProtoModID_ProtoModID_MIN = stRetMailInfo_ProtoModID_ModID;
const stRetMailInfo_ProtoModID stRetMailInfo_ProtoModID_ProtoModID_MAX = stRetMailInfo_ProtoModID_ModID;
const int stRetMailInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetMailInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetMailInfo_ProtoModID_descriptor();
inline const ::std::string& stRetMailInfo_ProtoModID_Name(stRetMailInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetMailInfo_ProtoModID_descriptor(), value);
}
inline bool stRetMailInfo_ProtoModID_Parse(
    const ::std::string& name, stRetMailInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetMailInfo_ProtoModID>(
    stRetMailInfo_ProtoModID_descriptor(), name, value);
}
enum stRetMailInfo_ProtoFunID {
  stRetMailInfo_ProtoFunID_FunID = 3
};
bool stRetMailInfo_ProtoFunID_IsValid(int value);
const stRetMailInfo_ProtoFunID stRetMailInfo_ProtoFunID_ProtoFunID_MIN = stRetMailInfo_ProtoFunID_FunID;
const stRetMailInfo_ProtoFunID stRetMailInfo_ProtoFunID_ProtoFunID_MAX = stRetMailInfo_ProtoFunID_FunID;
const int stRetMailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetMailInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetMailInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetMailInfo_ProtoFunID_Name(stRetMailInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetMailInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetMailInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetMailInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetMailInfo_ProtoFunID>(
    stRetMailInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqFetchAttach_ProtoModID {
  stReqFetchAttach_ProtoModID_ModID = 8
};
bool stReqFetchAttach_ProtoModID_IsValid(int value);
const stReqFetchAttach_ProtoModID stReqFetchAttach_ProtoModID_ProtoModID_MIN = stReqFetchAttach_ProtoModID_ModID;
const stReqFetchAttach_ProtoModID stReqFetchAttach_ProtoModID_ProtoModID_MAX = stReqFetchAttach_ProtoModID_ModID;
const int stReqFetchAttach_ProtoModID_ProtoModID_ARRAYSIZE = stReqFetchAttach_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFetchAttach_ProtoModID_descriptor();
inline const ::std::string& stReqFetchAttach_ProtoModID_Name(stReqFetchAttach_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFetchAttach_ProtoModID_descriptor(), value);
}
inline bool stReqFetchAttach_ProtoModID_Parse(
    const ::std::string& name, stReqFetchAttach_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFetchAttach_ProtoModID>(
    stReqFetchAttach_ProtoModID_descriptor(), name, value);
}
enum stReqFetchAttach_ProtoFunID {
  stReqFetchAttach_ProtoFunID_FunID = 4
};
bool stReqFetchAttach_ProtoFunID_IsValid(int value);
const stReqFetchAttach_ProtoFunID stReqFetchAttach_ProtoFunID_ProtoFunID_MIN = stReqFetchAttach_ProtoFunID_FunID;
const stReqFetchAttach_ProtoFunID stReqFetchAttach_ProtoFunID_ProtoFunID_MAX = stReqFetchAttach_ProtoFunID_FunID;
const int stReqFetchAttach_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqFetchAttach_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFetchAttach_ProtoFunID_descriptor();
inline const ::std::string& stReqFetchAttach_ProtoFunID_Name(stReqFetchAttach_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFetchAttach_ProtoFunID_descriptor(), value);
}
inline bool stReqFetchAttach_ProtoFunID_Parse(
    const ::std::string& name, stReqFetchAttach_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFetchAttach_ProtoFunID>(
    stReqFetchAttach_ProtoFunID_descriptor(), name, value);
}
enum stFetchAttachResult_Result {
  stFetchAttachResult_Result_SUCCESS = 1,
  stFetchAttachResult_Result_ATTACH_NOT_EXIST = 2
};
bool stFetchAttachResult_Result_IsValid(int value);
const stFetchAttachResult_Result stFetchAttachResult_Result_Result_MIN = stFetchAttachResult_Result_SUCCESS;
const stFetchAttachResult_Result stFetchAttachResult_Result_Result_MAX = stFetchAttachResult_Result_ATTACH_NOT_EXIST;
const int stFetchAttachResult_Result_Result_ARRAYSIZE = stFetchAttachResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFetchAttachResult_Result_descriptor();
inline const ::std::string& stFetchAttachResult_Result_Name(stFetchAttachResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFetchAttachResult_Result_descriptor(), value);
}
inline bool stFetchAttachResult_Result_Parse(
    const ::std::string& name, stFetchAttachResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFetchAttachResult_Result>(
    stFetchAttachResult_Result_descriptor(), name, value);
}
enum stFetchAttachResult_ProtoModID {
  stFetchAttachResult_ProtoModID_ModID = 8
};
bool stFetchAttachResult_ProtoModID_IsValid(int value);
const stFetchAttachResult_ProtoModID stFetchAttachResult_ProtoModID_ProtoModID_MIN = stFetchAttachResult_ProtoModID_ModID;
const stFetchAttachResult_ProtoModID stFetchAttachResult_ProtoModID_ProtoModID_MAX = stFetchAttachResult_ProtoModID_ModID;
const int stFetchAttachResult_ProtoModID_ProtoModID_ARRAYSIZE = stFetchAttachResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFetchAttachResult_ProtoModID_descriptor();
inline const ::std::string& stFetchAttachResult_ProtoModID_Name(stFetchAttachResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFetchAttachResult_ProtoModID_descriptor(), value);
}
inline bool stFetchAttachResult_ProtoModID_Parse(
    const ::std::string& name, stFetchAttachResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFetchAttachResult_ProtoModID>(
    stFetchAttachResult_ProtoModID_descriptor(), name, value);
}
enum stFetchAttachResult_ProtoFunID {
  stFetchAttachResult_ProtoFunID_FunID = 5
};
bool stFetchAttachResult_ProtoFunID_IsValid(int value);
const stFetchAttachResult_ProtoFunID stFetchAttachResult_ProtoFunID_ProtoFunID_MIN = stFetchAttachResult_ProtoFunID_FunID;
const stFetchAttachResult_ProtoFunID stFetchAttachResult_ProtoFunID_ProtoFunID_MAX = stFetchAttachResult_ProtoFunID_FunID;
const int stFetchAttachResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stFetchAttachResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFetchAttachResult_ProtoFunID_descriptor();
inline const ::std::string& stFetchAttachResult_ProtoFunID_Name(stFetchAttachResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFetchAttachResult_ProtoFunID_descriptor(), value);
}
inline bool stFetchAttachResult_ProtoFunID_Parse(
    const ::std::string& name, stFetchAttachResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFetchAttachResult_ProtoFunID>(
    stFetchAttachResult_ProtoFunID_descriptor(), name, value);
}
enum stReceiveMail_ProtoModID {
  stReceiveMail_ProtoModID_ModID = 8
};
bool stReceiveMail_ProtoModID_IsValid(int value);
const stReceiveMail_ProtoModID stReceiveMail_ProtoModID_ProtoModID_MIN = stReceiveMail_ProtoModID_ModID;
const stReceiveMail_ProtoModID stReceiveMail_ProtoModID_ProtoModID_MAX = stReceiveMail_ProtoModID_ModID;
const int stReceiveMail_ProtoModID_ProtoModID_ARRAYSIZE = stReceiveMail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReceiveMail_ProtoModID_descriptor();
inline const ::std::string& stReceiveMail_ProtoModID_Name(stReceiveMail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReceiveMail_ProtoModID_descriptor(), value);
}
inline bool stReceiveMail_ProtoModID_Parse(
    const ::std::string& name, stReceiveMail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReceiveMail_ProtoModID>(
    stReceiveMail_ProtoModID_descriptor(), name, value);
}
enum stReceiveMail_ProtoFunID {
  stReceiveMail_ProtoFunID_FunID = 6
};
bool stReceiveMail_ProtoFunID_IsValid(int value);
const stReceiveMail_ProtoFunID stReceiveMail_ProtoFunID_ProtoFunID_MIN = stReceiveMail_ProtoFunID_FunID;
const stReceiveMail_ProtoFunID stReceiveMail_ProtoFunID_ProtoFunID_MAX = stReceiveMail_ProtoFunID_FunID;
const int stReceiveMail_ProtoFunID_ProtoFunID_ARRAYSIZE = stReceiveMail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReceiveMail_ProtoFunID_descriptor();
inline const ::std::string& stReceiveMail_ProtoFunID_Name(stReceiveMail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReceiveMail_ProtoFunID_descriptor(), value);
}
inline bool stReceiveMail_ProtoFunID_Parse(
    const ::std::string& name, stReceiveMail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReceiveMail_ProtoFunID>(
    stReceiveMail_ProtoFunID_descriptor(), name, value);
}
enum stReqRewardInfo_ProtoModID {
  stReqRewardInfo_ProtoModID_ModID = 8
};
bool stReqRewardInfo_ProtoModID_IsValid(int value);
const stReqRewardInfo_ProtoModID stReqRewardInfo_ProtoModID_ProtoModID_MIN = stReqRewardInfo_ProtoModID_ModID;
const stReqRewardInfo_ProtoModID stReqRewardInfo_ProtoModID_ProtoModID_MAX = stReqRewardInfo_ProtoModID_ModID;
const int stReqRewardInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqRewardInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRewardInfo_ProtoModID_descriptor();
inline const ::std::string& stReqRewardInfo_ProtoModID_Name(stReqRewardInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRewardInfo_ProtoModID_descriptor(), value);
}
inline bool stReqRewardInfo_ProtoModID_Parse(
    const ::std::string& name, stReqRewardInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRewardInfo_ProtoModID>(
    stReqRewardInfo_ProtoModID_descriptor(), name, value);
}
enum stReqRewardInfo_ProtoFunID {
  stReqRewardInfo_ProtoFunID_FunID = 7
};
bool stReqRewardInfo_ProtoFunID_IsValid(int value);
const stReqRewardInfo_ProtoFunID stReqRewardInfo_ProtoFunID_ProtoFunID_MIN = stReqRewardInfo_ProtoFunID_FunID;
const stReqRewardInfo_ProtoFunID stReqRewardInfo_ProtoFunID_ProtoFunID_MAX = stReqRewardInfo_ProtoFunID_FunID;
const int stReqRewardInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRewardInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRewardInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqRewardInfo_ProtoFunID_Name(stReqRewardInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRewardInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqRewardInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqRewardInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRewardInfo_ProtoFunID>(
    stReqRewardInfo_ProtoFunID_descriptor(), name, value);
}
enum stRetRewardInfo_ProtoModID {
  stRetRewardInfo_ProtoModID_ModID = 8
};
bool stRetRewardInfo_ProtoModID_IsValid(int value);
const stRetRewardInfo_ProtoModID stRetRewardInfo_ProtoModID_ProtoModID_MIN = stRetRewardInfo_ProtoModID_ModID;
const stRetRewardInfo_ProtoModID stRetRewardInfo_ProtoModID_ProtoModID_MAX = stRetRewardInfo_ProtoModID_ModID;
const int stRetRewardInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetRewardInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRewardInfo_ProtoModID_descriptor();
inline const ::std::string& stRetRewardInfo_ProtoModID_Name(stRetRewardInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRewardInfo_ProtoModID_descriptor(), value);
}
inline bool stRetRewardInfo_ProtoModID_Parse(
    const ::std::string& name, stRetRewardInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRewardInfo_ProtoModID>(
    stRetRewardInfo_ProtoModID_descriptor(), name, value);
}
enum stRetRewardInfo_ProtoFunID {
  stRetRewardInfo_ProtoFunID_FunID = 8
};
bool stRetRewardInfo_ProtoFunID_IsValid(int value);
const stRetRewardInfo_ProtoFunID stRetRewardInfo_ProtoFunID_ProtoFunID_MIN = stRetRewardInfo_ProtoFunID_FunID;
const stRetRewardInfo_ProtoFunID stRetRewardInfo_ProtoFunID_ProtoFunID_MAX = stRetRewardInfo_ProtoFunID_FunID;
const int stRetRewardInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRewardInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRewardInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetRewardInfo_ProtoFunID_Name(stRetRewardInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRewardInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetRewardInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetRewardInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRewardInfo_ProtoFunID>(
    stRetRewardInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqSignReward_ProtoModID {
  stReqSignReward_ProtoModID_ModID = 8
};
bool stReqSignReward_ProtoModID_IsValid(int value);
const stReqSignReward_ProtoModID stReqSignReward_ProtoModID_ProtoModID_MIN = stReqSignReward_ProtoModID_ModID;
const stReqSignReward_ProtoModID stReqSignReward_ProtoModID_ProtoModID_MAX = stReqSignReward_ProtoModID_ModID;
const int stReqSignReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqSignReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSignReward_ProtoModID_descriptor();
inline const ::std::string& stReqSignReward_ProtoModID_Name(stReqSignReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSignReward_ProtoModID_descriptor(), value);
}
inline bool stReqSignReward_ProtoModID_Parse(
    const ::std::string& name, stReqSignReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSignReward_ProtoModID>(
    stReqSignReward_ProtoModID_descriptor(), name, value);
}
enum stReqSignReward_ProtoFunID {
  stReqSignReward_ProtoFunID_FunID = 9
};
bool stReqSignReward_ProtoFunID_IsValid(int value);
const stReqSignReward_ProtoFunID stReqSignReward_ProtoFunID_ProtoFunID_MIN = stReqSignReward_ProtoFunID_FunID;
const stReqSignReward_ProtoFunID stReqSignReward_ProtoFunID_ProtoFunID_MAX = stReqSignReward_ProtoFunID_FunID;
const int stReqSignReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSignReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSignReward_ProtoFunID_descriptor();
inline const ::std::string& stReqSignReward_ProtoFunID_Name(stReqSignReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSignReward_ProtoFunID_descriptor(), value);
}
inline bool stReqSignReward_ProtoFunID_Parse(
    const ::std::string& name, stReqSignReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSignReward_ProtoFunID>(
    stReqSignReward_ProtoFunID_descriptor(), name, value);
}
enum stGetSignRewardResult_Result {
  stGetSignRewardResult_Result_SUCCESS = 1,
  stGetSignRewardResult_Result_HAS_GET_REWARD = 2,
  stGetSignRewardResult_Result_BAG_FULL = 3
};
bool stGetSignRewardResult_Result_IsValid(int value);
const stGetSignRewardResult_Result stGetSignRewardResult_Result_Result_MIN = stGetSignRewardResult_Result_SUCCESS;
const stGetSignRewardResult_Result stGetSignRewardResult_Result_Result_MAX = stGetSignRewardResult_Result_BAG_FULL;
const int stGetSignRewardResult_Result_Result_ARRAYSIZE = stGetSignRewardResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetSignRewardResult_Result_descriptor();
inline const ::std::string& stGetSignRewardResult_Result_Name(stGetSignRewardResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetSignRewardResult_Result_descriptor(), value);
}
inline bool stGetSignRewardResult_Result_Parse(
    const ::std::string& name, stGetSignRewardResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetSignRewardResult_Result>(
    stGetSignRewardResult_Result_descriptor(), name, value);
}
enum stGetSignRewardResult_ProtoModID {
  stGetSignRewardResult_ProtoModID_ModID = 8
};
bool stGetSignRewardResult_ProtoModID_IsValid(int value);
const stGetSignRewardResult_ProtoModID stGetSignRewardResult_ProtoModID_ProtoModID_MIN = stGetSignRewardResult_ProtoModID_ModID;
const stGetSignRewardResult_ProtoModID stGetSignRewardResult_ProtoModID_ProtoModID_MAX = stGetSignRewardResult_ProtoModID_ModID;
const int stGetSignRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stGetSignRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetSignRewardResult_ProtoModID_descriptor();
inline const ::std::string& stGetSignRewardResult_ProtoModID_Name(stGetSignRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetSignRewardResult_ProtoModID_descriptor(), value);
}
inline bool stGetSignRewardResult_ProtoModID_Parse(
    const ::std::string& name, stGetSignRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetSignRewardResult_ProtoModID>(
    stGetSignRewardResult_ProtoModID_descriptor(), name, value);
}
enum stGetSignRewardResult_ProtoFunID {
  stGetSignRewardResult_ProtoFunID_FunID = 10
};
bool stGetSignRewardResult_ProtoFunID_IsValid(int value);
const stGetSignRewardResult_ProtoFunID stGetSignRewardResult_ProtoFunID_ProtoFunID_MIN = stGetSignRewardResult_ProtoFunID_FunID;
const stGetSignRewardResult_ProtoFunID stGetSignRewardResult_ProtoFunID_ProtoFunID_MAX = stGetSignRewardResult_ProtoFunID_FunID;
const int stGetSignRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGetSignRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetSignRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stGetSignRewardResult_ProtoFunID_Name(stGetSignRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetSignRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stGetSignRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stGetSignRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetSignRewardResult_ProtoFunID>(
    stGetSignRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenSvrReward_ProtoModID {
  stReqOpenSvrReward_ProtoModID_ModID = 8
};
bool stReqOpenSvrReward_ProtoModID_IsValid(int value);
const stReqOpenSvrReward_ProtoModID stReqOpenSvrReward_ProtoModID_ProtoModID_MIN = stReqOpenSvrReward_ProtoModID_ModID;
const stReqOpenSvrReward_ProtoModID stReqOpenSvrReward_ProtoModID_ProtoModID_MAX = stReqOpenSvrReward_ProtoModID_ModID;
const int stReqOpenSvrReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenSvrReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenSvrReward_ProtoModID_descriptor();
inline const ::std::string& stReqOpenSvrReward_ProtoModID_Name(stReqOpenSvrReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenSvrReward_ProtoModID_descriptor(), value);
}
inline bool stReqOpenSvrReward_ProtoModID_Parse(
    const ::std::string& name, stReqOpenSvrReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenSvrReward_ProtoModID>(
    stReqOpenSvrReward_ProtoModID_descriptor(), name, value);
}
enum stReqOpenSvrReward_ProtoFunID {
  stReqOpenSvrReward_ProtoFunID_FunID = 11
};
bool stReqOpenSvrReward_ProtoFunID_IsValid(int value);
const stReqOpenSvrReward_ProtoFunID stReqOpenSvrReward_ProtoFunID_ProtoFunID_MIN = stReqOpenSvrReward_ProtoFunID_FunID;
const stReqOpenSvrReward_ProtoFunID stReqOpenSvrReward_ProtoFunID_ProtoFunID_MAX = stReqOpenSvrReward_ProtoFunID_FunID;
const int stReqOpenSvrReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenSvrReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenSvrReward_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenSvrReward_ProtoFunID_Name(stReqOpenSvrReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenSvrReward_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenSvrReward_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenSvrReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenSvrReward_ProtoFunID>(
    stReqOpenSvrReward_ProtoFunID_descriptor(), name, value);
}
enum stGetOpenSvrRewardResult_eResult {
  stGetOpenSvrRewardResult_eResult_eSUCCESS = 1,
  stGetOpenSvrRewardResult_eResult_eHAS_GET_REWARD = 2,
  stGetOpenSvrRewardResult_eResult_eBAG_FULL = 3
};
bool stGetOpenSvrRewardResult_eResult_IsValid(int value);
const stGetOpenSvrRewardResult_eResult stGetOpenSvrRewardResult_eResult_eResult_MIN = stGetOpenSvrRewardResult_eResult_eSUCCESS;
const stGetOpenSvrRewardResult_eResult stGetOpenSvrRewardResult_eResult_eResult_MAX = stGetOpenSvrRewardResult_eResult_eBAG_FULL;
const int stGetOpenSvrRewardResult_eResult_eResult_ARRAYSIZE = stGetOpenSvrRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetOpenSvrRewardResult_eResult_descriptor();
inline const ::std::string& stGetOpenSvrRewardResult_eResult_Name(stGetOpenSvrRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetOpenSvrRewardResult_eResult_descriptor(), value);
}
inline bool stGetOpenSvrRewardResult_eResult_Parse(
    const ::std::string& name, stGetOpenSvrRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetOpenSvrRewardResult_eResult>(
    stGetOpenSvrRewardResult_eResult_descriptor(), name, value);
}
enum stGetOpenSvrRewardResult_ProtoModID {
  stGetOpenSvrRewardResult_ProtoModID_ModID = 8
};
bool stGetOpenSvrRewardResult_ProtoModID_IsValid(int value);
const stGetOpenSvrRewardResult_ProtoModID stGetOpenSvrRewardResult_ProtoModID_ProtoModID_MIN = stGetOpenSvrRewardResult_ProtoModID_ModID;
const stGetOpenSvrRewardResult_ProtoModID stGetOpenSvrRewardResult_ProtoModID_ProtoModID_MAX = stGetOpenSvrRewardResult_ProtoModID_ModID;
const int stGetOpenSvrRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stGetOpenSvrRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetOpenSvrRewardResult_ProtoModID_descriptor();
inline const ::std::string& stGetOpenSvrRewardResult_ProtoModID_Name(stGetOpenSvrRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetOpenSvrRewardResult_ProtoModID_descriptor(), value);
}
inline bool stGetOpenSvrRewardResult_ProtoModID_Parse(
    const ::std::string& name, stGetOpenSvrRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetOpenSvrRewardResult_ProtoModID>(
    stGetOpenSvrRewardResult_ProtoModID_descriptor(), name, value);
}
enum stGetOpenSvrRewardResult_ProtoFunID {
  stGetOpenSvrRewardResult_ProtoFunID_FunID = 12
};
bool stGetOpenSvrRewardResult_ProtoFunID_IsValid(int value);
const stGetOpenSvrRewardResult_ProtoFunID stGetOpenSvrRewardResult_ProtoFunID_ProtoFunID_MIN = stGetOpenSvrRewardResult_ProtoFunID_FunID;
const stGetOpenSvrRewardResult_ProtoFunID stGetOpenSvrRewardResult_ProtoFunID_ProtoFunID_MAX = stGetOpenSvrRewardResult_ProtoFunID_FunID;
const int stGetOpenSvrRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGetOpenSvrRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetOpenSvrRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stGetOpenSvrRewardResult_ProtoFunID_Name(stGetOpenSvrRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetOpenSvrRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stGetOpenSvrRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stGetOpenSvrRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetOpenSvrRewardResult_ProtoFunID>(
    stGetOpenSvrRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqLvReward_ProtoModID {
  stReqLvReward_ProtoModID_ModID = 8
};
bool stReqLvReward_ProtoModID_IsValid(int value);
const stReqLvReward_ProtoModID stReqLvReward_ProtoModID_ProtoModID_MIN = stReqLvReward_ProtoModID_ModID;
const stReqLvReward_ProtoModID stReqLvReward_ProtoModID_ProtoModID_MAX = stReqLvReward_ProtoModID_ModID;
const int stReqLvReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqLvReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLvReward_ProtoModID_descriptor();
inline const ::std::string& stReqLvReward_ProtoModID_Name(stReqLvReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLvReward_ProtoModID_descriptor(), value);
}
inline bool stReqLvReward_ProtoModID_Parse(
    const ::std::string& name, stReqLvReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLvReward_ProtoModID>(
    stReqLvReward_ProtoModID_descriptor(), name, value);
}
enum stReqLvReward_ProtoFunID {
  stReqLvReward_ProtoFunID_FunID = 13
};
bool stReqLvReward_ProtoFunID_IsValid(int value);
const stReqLvReward_ProtoFunID stReqLvReward_ProtoFunID_ProtoFunID_MIN = stReqLvReward_ProtoFunID_FunID;
const stReqLvReward_ProtoFunID stReqLvReward_ProtoFunID_ProtoFunID_MAX = stReqLvReward_ProtoFunID_FunID;
const int stReqLvReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLvReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLvReward_ProtoFunID_descriptor();
inline const ::std::string& stReqLvReward_ProtoFunID_Name(stReqLvReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLvReward_ProtoFunID_descriptor(), value);
}
inline bool stReqLvReward_ProtoFunID_Parse(
    const ::std::string& name, stReqLvReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLvReward_ProtoFunID>(
    stReqLvReward_ProtoFunID_descriptor(), name, value);
}
enum stLvRewardResult_eResult {
  stLvRewardResult_eResult_eSUCCESS = 1,
  stLvRewardResult_eResult_eLEVEL_TOO_LOW = 2,
  stLvRewardResult_eResult_eHAS_NO_REWARD_LV = 3,
  stLvRewardResult_eResult_eINNER_ERROR = 4,
  stLvRewardResult_eResult_eBAG_SLOT_NOT_ENOUGH = 5
};
bool stLvRewardResult_eResult_IsValid(int value);
const stLvRewardResult_eResult stLvRewardResult_eResult_eResult_MIN = stLvRewardResult_eResult_eSUCCESS;
const stLvRewardResult_eResult stLvRewardResult_eResult_eResult_MAX = stLvRewardResult_eResult_eBAG_SLOT_NOT_ENOUGH;
const int stLvRewardResult_eResult_eResult_ARRAYSIZE = stLvRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLvRewardResult_eResult_descriptor();
inline const ::std::string& stLvRewardResult_eResult_Name(stLvRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLvRewardResult_eResult_descriptor(), value);
}
inline bool stLvRewardResult_eResult_Parse(
    const ::std::string& name, stLvRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLvRewardResult_eResult>(
    stLvRewardResult_eResult_descriptor(), name, value);
}
enum stLvRewardResult_ProtoModID {
  stLvRewardResult_ProtoModID_ModID = 8
};
bool stLvRewardResult_ProtoModID_IsValid(int value);
const stLvRewardResult_ProtoModID stLvRewardResult_ProtoModID_ProtoModID_MIN = stLvRewardResult_ProtoModID_ModID;
const stLvRewardResult_ProtoModID stLvRewardResult_ProtoModID_ProtoModID_MAX = stLvRewardResult_ProtoModID_ModID;
const int stLvRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stLvRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLvRewardResult_ProtoModID_descriptor();
inline const ::std::string& stLvRewardResult_ProtoModID_Name(stLvRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLvRewardResult_ProtoModID_descriptor(), value);
}
inline bool stLvRewardResult_ProtoModID_Parse(
    const ::std::string& name, stLvRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLvRewardResult_ProtoModID>(
    stLvRewardResult_ProtoModID_descriptor(), name, value);
}
enum stLvRewardResult_ProtoFunID {
  stLvRewardResult_ProtoFunID_FunID = 14
};
bool stLvRewardResult_ProtoFunID_IsValid(int value);
const stLvRewardResult_ProtoFunID stLvRewardResult_ProtoFunID_ProtoFunID_MIN = stLvRewardResult_ProtoFunID_FunID;
const stLvRewardResult_ProtoFunID stLvRewardResult_ProtoFunID_ProtoFunID_MAX = stLvRewardResult_ProtoFunID_FunID;
const int stLvRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stLvRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLvRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stLvRewardResult_ProtoFunID_Name(stLvRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLvRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stLvRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stLvRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLvRewardResult_ProtoFunID>(
    stLvRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqOnlineReward_ProtoModID {
  stReqOnlineReward_ProtoModID_ModID = 8
};
bool stReqOnlineReward_ProtoModID_IsValid(int value);
const stReqOnlineReward_ProtoModID stReqOnlineReward_ProtoModID_ProtoModID_MIN = stReqOnlineReward_ProtoModID_ModID;
const stReqOnlineReward_ProtoModID stReqOnlineReward_ProtoModID_ProtoModID_MAX = stReqOnlineReward_ProtoModID_ModID;
const int stReqOnlineReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqOnlineReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOnlineReward_ProtoModID_descriptor();
inline const ::std::string& stReqOnlineReward_ProtoModID_Name(stReqOnlineReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOnlineReward_ProtoModID_descriptor(), value);
}
inline bool stReqOnlineReward_ProtoModID_Parse(
    const ::std::string& name, stReqOnlineReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOnlineReward_ProtoModID>(
    stReqOnlineReward_ProtoModID_descriptor(), name, value);
}
enum stReqOnlineReward_ProtoFunID {
  stReqOnlineReward_ProtoFunID_FunID = 15
};
bool stReqOnlineReward_ProtoFunID_IsValid(int value);
const stReqOnlineReward_ProtoFunID stReqOnlineReward_ProtoFunID_ProtoFunID_MIN = stReqOnlineReward_ProtoFunID_FunID;
const stReqOnlineReward_ProtoFunID stReqOnlineReward_ProtoFunID_ProtoFunID_MAX = stReqOnlineReward_ProtoFunID_FunID;
const int stReqOnlineReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOnlineReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOnlineReward_ProtoFunID_descriptor();
inline const ::std::string& stReqOnlineReward_ProtoFunID_Name(stReqOnlineReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOnlineReward_ProtoFunID_descriptor(), value);
}
inline bool stReqOnlineReward_ProtoFunID_Parse(
    const ::std::string& name, stReqOnlineReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOnlineReward_ProtoFunID>(
    stReqOnlineReward_ProtoFunID_descriptor(), name, value);
}
enum stGetOnlineRewardResult_eResult {
  stGetOnlineRewardResult_eResult_eSUCCESS = 1,
  stGetOnlineRewardResult_eResult_eHAS_REMAIN_TIME = 2,
  stGetOnlineRewardResult_eResult_eBAG_FULL = 3,
  stGetOnlineRewardResult_eResult_eHAS_GOT_REWARD = 4,
  stGetOnlineRewardResult_eResult_eINNER_ERROR = 5
};
bool stGetOnlineRewardResult_eResult_IsValid(int value);
const stGetOnlineRewardResult_eResult stGetOnlineRewardResult_eResult_eResult_MIN = stGetOnlineRewardResult_eResult_eSUCCESS;
const stGetOnlineRewardResult_eResult stGetOnlineRewardResult_eResult_eResult_MAX = stGetOnlineRewardResult_eResult_eINNER_ERROR;
const int stGetOnlineRewardResult_eResult_eResult_ARRAYSIZE = stGetOnlineRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetOnlineRewardResult_eResult_descriptor();
inline const ::std::string& stGetOnlineRewardResult_eResult_Name(stGetOnlineRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetOnlineRewardResult_eResult_descriptor(), value);
}
inline bool stGetOnlineRewardResult_eResult_Parse(
    const ::std::string& name, stGetOnlineRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetOnlineRewardResult_eResult>(
    stGetOnlineRewardResult_eResult_descriptor(), name, value);
}
enum stGetOnlineRewardResult_ProtoModID {
  stGetOnlineRewardResult_ProtoModID_ModID = 8
};
bool stGetOnlineRewardResult_ProtoModID_IsValid(int value);
const stGetOnlineRewardResult_ProtoModID stGetOnlineRewardResult_ProtoModID_ProtoModID_MIN = stGetOnlineRewardResult_ProtoModID_ModID;
const stGetOnlineRewardResult_ProtoModID stGetOnlineRewardResult_ProtoModID_ProtoModID_MAX = stGetOnlineRewardResult_ProtoModID_ModID;
const int stGetOnlineRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stGetOnlineRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetOnlineRewardResult_ProtoModID_descriptor();
inline const ::std::string& stGetOnlineRewardResult_ProtoModID_Name(stGetOnlineRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetOnlineRewardResult_ProtoModID_descriptor(), value);
}
inline bool stGetOnlineRewardResult_ProtoModID_Parse(
    const ::std::string& name, stGetOnlineRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetOnlineRewardResult_ProtoModID>(
    stGetOnlineRewardResult_ProtoModID_descriptor(), name, value);
}
enum stGetOnlineRewardResult_ProtoFunID {
  stGetOnlineRewardResult_ProtoFunID_FunID = 16
};
bool stGetOnlineRewardResult_ProtoFunID_IsValid(int value);
const stGetOnlineRewardResult_ProtoFunID stGetOnlineRewardResult_ProtoFunID_ProtoFunID_MIN = stGetOnlineRewardResult_ProtoFunID_FunID;
const stGetOnlineRewardResult_ProtoFunID stGetOnlineRewardResult_ProtoFunID_ProtoFunID_MAX = stGetOnlineRewardResult_ProtoFunID_FunID;
const int stGetOnlineRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGetOnlineRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetOnlineRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stGetOnlineRewardResult_ProtoFunID_Name(stGetOnlineRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetOnlineRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stGetOnlineRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stGetOnlineRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetOnlineRewardResult_ProtoFunID>(
    stGetOnlineRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stBuyStarInfo_ProtoModID {
  stBuyStarInfo_ProtoModID_ModID = 8
};
bool stBuyStarInfo_ProtoModID_IsValid(int value);
const stBuyStarInfo_ProtoModID stBuyStarInfo_ProtoModID_ProtoModID_MIN = stBuyStarInfo_ProtoModID_ModID;
const stBuyStarInfo_ProtoModID stBuyStarInfo_ProtoModID_ProtoModID_MAX = stBuyStarInfo_ProtoModID_ModID;
const int stBuyStarInfo_ProtoModID_ProtoModID_ARRAYSIZE = stBuyStarInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyStarInfo_ProtoModID_descriptor();
inline const ::std::string& stBuyStarInfo_ProtoModID_Name(stBuyStarInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyStarInfo_ProtoModID_descriptor(), value);
}
inline bool stBuyStarInfo_ProtoModID_Parse(
    const ::std::string& name, stBuyStarInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyStarInfo_ProtoModID>(
    stBuyStarInfo_ProtoModID_descriptor(), name, value);
}
enum stBuyStarInfo_ProtoFunID {
  stBuyStarInfo_ProtoFunID_FunID = 17
};
bool stBuyStarInfo_ProtoFunID_IsValid(int value);
const stBuyStarInfo_ProtoFunID stBuyStarInfo_ProtoFunID_ProtoFunID_MIN = stBuyStarInfo_ProtoFunID_FunID;
const stBuyStarInfo_ProtoFunID stBuyStarInfo_ProtoFunID_ProtoFunID_MAX = stBuyStarInfo_ProtoFunID_FunID;
const int stBuyStarInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuyStarInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyStarInfo_ProtoFunID_descriptor();
inline const ::std::string& stBuyStarInfo_ProtoFunID_Name(stBuyStarInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyStarInfo_ProtoFunID_descriptor(), value);
}
inline bool stBuyStarInfo_ProtoFunID_Parse(
    const ::std::string& name, stBuyStarInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyStarInfo_ProtoFunID>(
    stBuyStarInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqBuyStar_ProtoModID {
  stReqBuyStar_ProtoModID_ModID = 8
};
bool stReqBuyStar_ProtoModID_IsValid(int value);
const stReqBuyStar_ProtoModID stReqBuyStar_ProtoModID_ProtoModID_MIN = stReqBuyStar_ProtoModID_ModID;
const stReqBuyStar_ProtoModID stReqBuyStar_ProtoModID_ProtoModID_MAX = stReqBuyStar_ProtoModID_ModID;
const int stReqBuyStar_ProtoModID_ProtoModID_ARRAYSIZE = stReqBuyStar_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyStar_ProtoModID_descriptor();
inline const ::std::string& stReqBuyStar_ProtoModID_Name(stReqBuyStar_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyStar_ProtoModID_descriptor(), value);
}
inline bool stReqBuyStar_ProtoModID_Parse(
    const ::std::string& name, stReqBuyStar_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyStar_ProtoModID>(
    stReqBuyStar_ProtoModID_descriptor(), name, value);
}
enum stReqBuyStar_ProtoFunID {
  stReqBuyStar_ProtoFunID_FunID = 18
};
bool stReqBuyStar_ProtoFunID_IsValid(int value);
const stReqBuyStar_ProtoFunID stReqBuyStar_ProtoFunID_ProtoFunID_MIN = stReqBuyStar_ProtoFunID_FunID;
const stReqBuyStar_ProtoFunID stReqBuyStar_ProtoFunID_ProtoFunID_MAX = stReqBuyStar_ProtoFunID_FunID;
const int stReqBuyStar_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBuyStar_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyStar_ProtoFunID_descriptor();
inline const ::std::string& stReqBuyStar_ProtoFunID_Name(stReqBuyStar_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyStar_ProtoFunID_descriptor(), value);
}
inline bool stReqBuyStar_ProtoFunID_Parse(
    const ::std::string& name, stReqBuyStar_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyStar_ProtoFunID>(
    stReqBuyStar_ProtoFunID_descriptor(), name, value);
}
enum stBuyStarResult_Result {
  stBuyStarResult_Result_SUCCESS = 1,
  stBuyStarResult_Result_ITEM_NOT_ENOUGH = 2,
  stBuyStarResult_Result_INNER_ERROR = 3
};
bool stBuyStarResult_Result_IsValid(int value);
const stBuyStarResult_Result stBuyStarResult_Result_Result_MIN = stBuyStarResult_Result_SUCCESS;
const stBuyStarResult_Result stBuyStarResult_Result_Result_MAX = stBuyStarResult_Result_INNER_ERROR;
const int stBuyStarResult_Result_Result_ARRAYSIZE = stBuyStarResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyStarResult_Result_descriptor();
inline const ::std::string& stBuyStarResult_Result_Name(stBuyStarResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyStarResult_Result_descriptor(), value);
}
inline bool stBuyStarResult_Result_Parse(
    const ::std::string& name, stBuyStarResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyStarResult_Result>(
    stBuyStarResult_Result_descriptor(), name, value);
}
enum stBuyStarResult_ProtoModID {
  stBuyStarResult_ProtoModID_ModID = 8
};
bool stBuyStarResult_ProtoModID_IsValid(int value);
const stBuyStarResult_ProtoModID stBuyStarResult_ProtoModID_ProtoModID_MIN = stBuyStarResult_ProtoModID_ModID;
const stBuyStarResult_ProtoModID stBuyStarResult_ProtoModID_ProtoModID_MAX = stBuyStarResult_ProtoModID_ModID;
const int stBuyStarResult_ProtoModID_ProtoModID_ARRAYSIZE = stBuyStarResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyStarResult_ProtoModID_descriptor();
inline const ::std::string& stBuyStarResult_ProtoModID_Name(stBuyStarResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyStarResult_ProtoModID_descriptor(), value);
}
inline bool stBuyStarResult_ProtoModID_Parse(
    const ::std::string& name, stBuyStarResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyStarResult_ProtoModID>(
    stBuyStarResult_ProtoModID_descriptor(), name, value);
}
enum stBuyStarResult_ProtoFunID {
  stBuyStarResult_ProtoFunID_FunID = 19
};
bool stBuyStarResult_ProtoFunID_IsValid(int value);
const stBuyStarResult_ProtoFunID stBuyStarResult_ProtoFunID_ProtoFunID_MIN = stBuyStarResult_ProtoFunID_FunID;
const stBuyStarResult_ProtoFunID stBuyStarResult_ProtoFunID_ProtoFunID_MAX = stBuyStarResult_ProtoFunID_FunID;
const int stBuyStarResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuyStarResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyStarResult_ProtoFunID_descriptor();
inline const ::std::string& stBuyStarResult_ProtoFunID_Name(stBuyStarResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyStarResult_ProtoFunID_descriptor(), value);
}
inline bool stBuyStarResult_ProtoFunID_Parse(
    const ::std::string& name, stBuyStarResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyStarResult_ProtoFunID>(
    stBuyStarResult_ProtoFunID_descriptor(), name, value);
}
enum ReqOpenDrawWindow_ProtoModID {
  ReqOpenDrawWindow_ProtoModID_ModID = 8
};
bool ReqOpenDrawWindow_ProtoModID_IsValid(int value);
const ReqOpenDrawWindow_ProtoModID ReqOpenDrawWindow_ProtoModID_ProtoModID_MIN = ReqOpenDrawWindow_ProtoModID_ModID;
const ReqOpenDrawWindow_ProtoModID ReqOpenDrawWindow_ProtoModID_ProtoModID_MAX = ReqOpenDrawWindow_ProtoModID_ModID;
const int ReqOpenDrawWindow_ProtoModID_ProtoModID_ARRAYSIZE = ReqOpenDrawWindow_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqOpenDrawWindow_ProtoModID_descriptor();
inline const ::std::string& ReqOpenDrawWindow_ProtoModID_Name(ReqOpenDrawWindow_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqOpenDrawWindow_ProtoModID_descriptor(), value);
}
inline bool ReqOpenDrawWindow_ProtoModID_Parse(
    const ::std::string& name, ReqOpenDrawWindow_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqOpenDrawWindow_ProtoModID>(
    ReqOpenDrawWindow_ProtoModID_descriptor(), name, value);
}
enum ReqOpenDrawWindow_ProtoFunID {
  ReqOpenDrawWindow_ProtoFunID_FunID = 20
};
bool ReqOpenDrawWindow_ProtoFunID_IsValid(int value);
const ReqOpenDrawWindow_ProtoFunID ReqOpenDrawWindow_ProtoFunID_ProtoFunID_MIN = ReqOpenDrawWindow_ProtoFunID_FunID;
const ReqOpenDrawWindow_ProtoFunID ReqOpenDrawWindow_ProtoFunID_ProtoFunID_MAX = ReqOpenDrawWindow_ProtoFunID_FunID;
const int ReqOpenDrawWindow_ProtoFunID_ProtoFunID_ARRAYSIZE = ReqOpenDrawWindow_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqOpenDrawWindow_ProtoFunID_descriptor();
inline const ::std::string& ReqOpenDrawWindow_ProtoFunID_Name(ReqOpenDrawWindow_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqOpenDrawWindow_ProtoFunID_descriptor(), value);
}
inline bool ReqOpenDrawWindow_ProtoFunID_Parse(
    const ::std::string& name, ReqOpenDrawWindow_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqOpenDrawWindow_ProtoFunID>(
    ReqOpenDrawWindow_ProtoFunID_descriptor(), name, value);
}
enum stDrawWindowInfo_ProtoModID {
  stDrawWindowInfo_ProtoModID_ModID = 8
};
bool stDrawWindowInfo_ProtoModID_IsValid(int value);
const stDrawWindowInfo_ProtoModID stDrawWindowInfo_ProtoModID_ProtoModID_MIN = stDrawWindowInfo_ProtoModID_ModID;
const stDrawWindowInfo_ProtoModID stDrawWindowInfo_ProtoModID_ProtoModID_MAX = stDrawWindowInfo_ProtoModID_ModID;
const int stDrawWindowInfo_ProtoModID_ProtoModID_ARRAYSIZE = stDrawWindowInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawWindowInfo_ProtoModID_descriptor();
inline const ::std::string& stDrawWindowInfo_ProtoModID_Name(stDrawWindowInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawWindowInfo_ProtoModID_descriptor(), value);
}
inline bool stDrawWindowInfo_ProtoModID_Parse(
    const ::std::string& name, stDrawWindowInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawWindowInfo_ProtoModID>(
    stDrawWindowInfo_ProtoModID_descriptor(), name, value);
}
enum stDrawWindowInfo_ProtoFunID {
  stDrawWindowInfo_ProtoFunID_FunID = 21
};
bool stDrawWindowInfo_ProtoFunID_IsValid(int value);
const stDrawWindowInfo_ProtoFunID stDrawWindowInfo_ProtoFunID_ProtoFunID_MIN = stDrawWindowInfo_ProtoFunID_FunID;
const stDrawWindowInfo_ProtoFunID stDrawWindowInfo_ProtoFunID_ProtoFunID_MAX = stDrawWindowInfo_ProtoFunID_FunID;
const int stDrawWindowInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stDrawWindowInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawWindowInfo_ProtoFunID_descriptor();
inline const ::std::string& stDrawWindowInfo_ProtoFunID_Name(stDrawWindowInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawWindowInfo_ProtoFunID_descriptor(), value);
}
inline bool stDrawWindowInfo_ProtoFunID_Parse(
    const ::std::string& name, stDrawWindowInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawWindowInfo_ProtoFunID>(
    stDrawWindowInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqDraw_ProtoModID {
  stReqDraw_ProtoModID_ModID = 8
};
bool stReqDraw_ProtoModID_IsValid(int value);
const stReqDraw_ProtoModID stReqDraw_ProtoModID_ProtoModID_MIN = stReqDraw_ProtoModID_ModID;
const stReqDraw_ProtoModID stReqDraw_ProtoModID_ProtoModID_MAX = stReqDraw_ProtoModID_ModID;
const int stReqDraw_ProtoModID_ProtoModID_ARRAYSIZE = stReqDraw_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDraw_ProtoModID_descriptor();
inline const ::std::string& stReqDraw_ProtoModID_Name(stReqDraw_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDraw_ProtoModID_descriptor(), value);
}
inline bool stReqDraw_ProtoModID_Parse(
    const ::std::string& name, stReqDraw_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDraw_ProtoModID>(
    stReqDraw_ProtoModID_descriptor(), name, value);
}
enum stReqDraw_ProtoFunID {
  stReqDraw_ProtoFunID_FunID = 22
};
bool stReqDraw_ProtoFunID_IsValid(int value);
const stReqDraw_ProtoFunID stReqDraw_ProtoFunID_ProtoFunID_MIN = stReqDraw_ProtoFunID_FunID;
const stReqDraw_ProtoFunID stReqDraw_ProtoFunID_ProtoFunID_MAX = stReqDraw_ProtoFunID_FunID;
const int stReqDraw_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDraw_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDraw_ProtoFunID_descriptor();
inline const ::std::string& stReqDraw_ProtoFunID_Name(stReqDraw_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDraw_ProtoFunID_descriptor(), value);
}
inline bool stReqDraw_ProtoFunID_Parse(
    const ::std::string& name, stReqDraw_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDraw_ProtoFunID>(
    stReqDraw_ProtoFunID_descriptor(), name, value);
}
enum stDrawResult_Result {
  stDrawResult_Result_SUCCESS = 1,
  stDrawResult_Result_MONEY_NOT_ENOUGH = 2,
  stDrawResult_Result_BAG_FULL = 3,
  stDrawResult_Result_DIAMOND_NOT_ENOUGH = 4
};
bool stDrawResult_Result_IsValid(int value);
const stDrawResult_Result stDrawResult_Result_Result_MIN = stDrawResult_Result_SUCCESS;
const stDrawResult_Result stDrawResult_Result_Result_MAX = stDrawResult_Result_DIAMOND_NOT_ENOUGH;
const int stDrawResult_Result_Result_ARRAYSIZE = stDrawResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawResult_Result_descriptor();
inline const ::std::string& stDrawResult_Result_Name(stDrawResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawResult_Result_descriptor(), value);
}
inline bool stDrawResult_Result_Parse(
    const ::std::string& name, stDrawResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawResult_Result>(
    stDrawResult_Result_descriptor(), name, value);
}
enum stDrawResult_ProtoModID {
  stDrawResult_ProtoModID_ModID = 8
};
bool stDrawResult_ProtoModID_IsValid(int value);
const stDrawResult_ProtoModID stDrawResult_ProtoModID_ProtoModID_MIN = stDrawResult_ProtoModID_ModID;
const stDrawResult_ProtoModID stDrawResult_ProtoModID_ProtoModID_MAX = stDrawResult_ProtoModID_ModID;
const int stDrawResult_ProtoModID_ProtoModID_ARRAYSIZE = stDrawResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawResult_ProtoModID_descriptor();
inline const ::std::string& stDrawResult_ProtoModID_Name(stDrawResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawResult_ProtoModID_descriptor(), value);
}
inline bool stDrawResult_ProtoModID_Parse(
    const ::std::string& name, stDrawResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawResult_ProtoModID>(
    stDrawResult_ProtoModID_descriptor(), name, value);
}
enum stDrawResult_ProtoFunID {
  stDrawResult_ProtoFunID_FunID = 23
};
bool stDrawResult_ProtoFunID_IsValid(int value);
const stDrawResult_ProtoFunID stDrawResult_ProtoFunID_ProtoFunID_MIN = stDrawResult_ProtoFunID_FunID;
const stDrawResult_ProtoFunID stDrawResult_ProtoFunID_ProtoFunID_MAX = stDrawResult_ProtoFunID_FunID;
const int stDrawResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stDrawResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawResult_ProtoFunID_descriptor();
inline const ::std::string& stDrawResult_ProtoFunID_Name(stDrawResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawResult_ProtoFunID_descriptor(), value);
}
inline bool stDrawResult_ProtoFunID_Parse(
    const ::std::string& name, stDrawResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawResult_ProtoFunID>(
    stDrawResult_ProtoFunID_descriptor(), name, value);
}
enum stSynMyTitle_ProtoModID {
  stSynMyTitle_ProtoModID_ModID = 8
};
bool stSynMyTitle_ProtoModID_IsValid(int value);
const stSynMyTitle_ProtoModID stSynMyTitle_ProtoModID_ProtoModID_MIN = stSynMyTitle_ProtoModID_ModID;
const stSynMyTitle_ProtoModID stSynMyTitle_ProtoModID_ProtoModID_MAX = stSynMyTitle_ProtoModID_ModID;
const int stSynMyTitle_ProtoModID_ProtoModID_ARRAYSIZE = stSynMyTitle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynMyTitle_ProtoModID_descriptor();
inline const ::std::string& stSynMyTitle_ProtoModID_Name(stSynMyTitle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynMyTitle_ProtoModID_descriptor(), value);
}
inline bool stSynMyTitle_ProtoModID_Parse(
    const ::std::string& name, stSynMyTitle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynMyTitle_ProtoModID>(
    stSynMyTitle_ProtoModID_descriptor(), name, value);
}
enum stSynMyTitle_ProtoFunID {
  stSynMyTitle_ProtoFunID_FunID = 24
};
bool stSynMyTitle_ProtoFunID_IsValid(int value);
const stSynMyTitle_ProtoFunID stSynMyTitle_ProtoFunID_ProtoFunID_MIN = stSynMyTitle_ProtoFunID_FunID;
const stSynMyTitle_ProtoFunID stSynMyTitle_ProtoFunID_ProtoFunID_MAX = stSynMyTitle_ProtoFunID_FunID;
const int stSynMyTitle_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynMyTitle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynMyTitle_ProtoFunID_descriptor();
inline const ::std::string& stSynMyTitle_ProtoFunID_Name(stSynMyTitle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynMyTitle_ProtoFunID_descriptor(), value);
}
inline bool stSynMyTitle_ProtoFunID_Parse(
    const ::std::string& name, stSynMyTitle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynMyTitle_ProtoFunID>(
    stSynMyTitle_ProtoFunID_descriptor(), name, value);
}
enum stActiveOneTitle_ProtoModID {
  stActiveOneTitle_ProtoModID_ModID = 8
};
bool stActiveOneTitle_ProtoModID_IsValid(int value);
const stActiveOneTitle_ProtoModID stActiveOneTitle_ProtoModID_ProtoModID_MIN = stActiveOneTitle_ProtoModID_ModID;
const stActiveOneTitle_ProtoModID stActiveOneTitle_ProtoModID_ProtoModID_MAX = stActiveOneTitle_ProtoModID_ModID;
const int stActiveOneTitle_ProtoModID_ProtoModID_ARRAYSIZE = stActiveOneTitle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stActiveOneTitle_ProtoModID_descriptor();
inline const ::std::string& stActiveOneTitle_ProtoModID_Name(stActiveOneTitle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stActiveOneTitle_ProtoModID_descriptor(), value);
}
inline bool stActiveOneTitle_ProtoModID_Parse(
    const ::std::string& name, stActiveOneTitle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stActiveOneTitle_ProtoModID>(
    stActiveOneTitle_ProtoModID_descriptor(), name, value);
}
enum stActiveOneTitle_ProtoFunID {
  stActiveOneTitle_ProtoFunID_FunID = 25
};
bool stActiveOneTitle_ProtoFunID_IsValid(int value);
const stActiveOneTitle_ProtoFunID stActiveOneTitle_ProtoFunID_ProtoFunID_MIN = stActiveOneTitle_ProtoFunID_FunID;
const stActiveOneTitle_ProtoFunID stActiveOneTitle_ProtoFunID_ProtoFunID_MAX = stActiveOneTitle_ProtoFunID_FunID;
const int stActiveOneTitle_ProtoFunID_ProtoFunID_ARRAYSIZE = stActiveOneTitle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stActiveOneTitle_ProtoFunID_descriptor();
inline const ::std::string& stActiveOneTitle_ProtoFunID_Name(stActiveOneTitle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stActiveOneTitle_ProtoFunID_descriptor(), value);
}
inline bool stActiveOneTitle_ProtoFunID_Parse(
    const ::std::string& name, stActiveOneTitle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stActiveOneTitle_ProtoFunID>(
    stActiveOneTitle_ProtoFunID_descriptor(), name, value);
}
enum stActiveTitleResult_eResult {
  stActiveTitleResult_eResult_SUCCESS = 1,
  stActiveTitleResult_eResult_TITLE_NOT_EXIST = 2
};
bool stActiveTitleResult_eResult_IsValid(int value);
const stActiveTitleResult_eResult stActiveTitleResult_eResult_eResult_MIN = stActiveTitleResult_eResult_SUCCESS;
const stActiveTitleResult_eResult stActiveTitleResult_eResult_eResult_MAX = stActiveTitleResult_eResult_TITLE_NOT_EXIST;
const int stActiveTitleResult_eResult_eResult_ARRAYSIZE = stActiveTitleResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stActiveTitleResult_eResult_descriptor();
inline const ::std::string& stActiveTitleResult_eResult_Name(stActiveTitleResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stActiveTitleResult_eResult_descriptor(), value);
}
inline bool stActiveTitleResult_eResult_Parse(
    const ::std::string& name, stActiveTitleResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stActiveTitleResult_eResult>(
    stActiveTitleResult_eResult_descriptor(), name, value);
}
enum stActiveTitleResult_ProtoModID {
  stActiveTitleResult_ProtoModID_ModID = 8
};
bool stActiveTitleResult_ProtoModID_IsValid(int value);
const stActiveTitleResult_ProtoModID stActiveTitleResult_ProtoModID_ProtoModID_MIN = stActiveTitleResult_ProtoModID_ModID;
const stActiveTitleResult_ProtoModID stActiveTitleResult_ProtoModID_ProtoModID_MAX = stActiveTitleResult_ProtoModID_ModID;
const int stActiveTitleResult_ProtoModID_ProtoModID_ARRAYSIZE = stActiveTitleResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stActiveTitleResult_ProtoModID_descriptor();
inline const ::std::string& stActiveTitleResult_ProtoModID_Name(stActiveTitleResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stActiveTitleResult_ProtoModID_descriptor(), value);
}
inline bool stActiveTitleResult_ProtoModID_Parse(
    const ::std::string& name, stActiveTitleResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stActiveTitleResult_ProtoModID>(
    stActiveTitleResult_ProtoModID_descriptor(), name, value);
}
enum stActiveTitleResult_ProtoFunID {
  stActiveTitleResult_ProtoFunID_FunID = 26
};
bool stActiveTitleResult_ProtoFunID_IsValid(int value);
const stActiveTitleResult_ProtoFunID stActiveTitleResult_ProtoFunID_ProtoFunID_MIN = stActiveTitleResult_ProtoFunID_FunID;
const stActiveTitleResult_ProtoFunID stActiveTitleResult_ProtoFunID_ProtoFunID_MAX = stActiveTitleResult_ProtoFunID_FunID;
const int stActiveTitleResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stActiveTitleResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stActiveTitleResult_ProtoFunID_descriptor();
inline const ::std::string& stActiveTitleResult_ProtoFunID_Name(stActiveTitleResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stActiveTitleResult_ProtoFunID_descriptor(), value);
}
inline bool stActiveTitleResult_ProtoFunID_Parse(
    const ::std::string& name, stActiveTitleResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stActiveTitleResult_ProtoFunID>(
    stActiveTitleResult_ProtoFunID_descriptor(), name, value);
}
enum stObtainOneTitle_ProtoModID {
  stObtainOneTitle_ProtoModID_ModID = 8
};
bool stObtainOneTitle_ProtoModID_IsValid(int value);
const stObtainOneTitle_ProtoModID stObtainOneTitle_ProtoModID_ProtoModID_MIN = stObtainOneTitle_ProtoModID_ModID;
const stObtainOneTitle_ProtoModID stObtainOneTitle_ProtoModID_ProtoModID_MAX = stObtainOneTitle_ProtoModID_ModID;
const int stObtainOneTitle_ProtoModID_ProtoModID_ARRAYSIZE = stObtainOneTitle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stObtainOneTitle_ProtoModID_descriptor();
inline const ::std::string& stObtainOneTitle_ProtoModID_Name(stObtainOneTitle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stObtainOneTitle_ProtoModID_descriptor(), value);
}
inline bool stObtainOneTitle_ProtoModID_Parse(
    const ::std::string& name, stObtainOneTitle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stObtainOneTitle_ProtoModID>(
    stObtainOneTitle_ProtoModID_descriptor(), name, value);
}
enum stObtainOneTitle_ProtoFunID {
  stObtainOneTitle_ProtoFunID_FunID = 27
};
bool stObtainOneTitle_ProtoFunID_IsValid(int value);
const stObtainOneTitle_ProtoFunID stObtainOneTitle_ProtoFunID_ProtoFunID_MIN = stObtainOneTitle_ProtoFunID_FunID;
const stObtainOneTitle_ProtoFunID stObtainOneTitle_ProtoFunID_ProtoFunID_MAX = stObtainOneTitle_ProtoFunID_FunID;
const int stObtainOneTitle_ProtoFunID_ProtoFunID_ARRAYSIZE = stObtainOneTitle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stObtainOneTitle_ProtoFunID_descriptor();
inline const ::std::string& stObtainOneTitle_ProtoFunID_Name(stObtainOneTitle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stObtainOneTitle_ProtoFunID_descriptor(), value);
}
inline bool stObtainOneTitle_ProtoFunID_Parse(
    const ::std::string& name, stObtainOneTitle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stObtainOneTitle_ProtoFunID>(
    stObtainOneTitle_ProtoFunID_descriptor(), name, value);
}
enum stBuyInvestPlan_ProtoModID {
  stBuyInvestPlan_ProtoModID_ModID = 8
};
bool stBuyInvestPlan_ProtoModID_IsValid(int value);
const stBuyInvestPlan_ProtoModID stBuyInvestPlan_ProtoModID_ProtoModID_MIN = stBuyInvestPlan_ProtoModID_ModID;
const stBuyInvestPlan_ProtoModID stBuyInvestPlan_ProtoModID_ProtoModID_MAX = stBuyInvestPlan_ProtoModID_ModID;
const int stBuyInvestPlan_ProtoModID_ProtoModID_ARRAYSIZE = stBuyInvestPlan_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyInvestPlan_ProtoModID_descriptor();
inline const ::std::string& stBuyInvestPlan_ProtoModID_Name(stBuyInvestPlan_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyInvestPlan_ProtoModID_descriptor(), value);
}
inline bool stBuyInvestPlan_ProtoModID_Parse(
    const ::std::string& name, stBuyInvestPlan_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyInvestPlan_ProtoModID>(
    stBuyInvestPlan_ProtoModID_descriptor(), name, value);
}
enum stBuyInvestPlan_ProtoFunID {
  stBuyInvestPlan_ProtoFunID_FunID = 28
};
bool stBuyInvestPlan_ProtoFunID_IsValid(int value);
const stBuyInvestPlan_ProtoFunID stBuyInvestPlan_ProtoFunID_ProtoFunID_MIN = stBuyInvestPlan_ProtoFunID_FunID;
const stBuyInvestPlan_ProtoFunID stBuyInvestPlan_ProtoFunID_ProtoFunID_MAX = stBuyInvestPlan_ProtoFunID_FunID;
const int stBuyInvestPlan_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuyInvestPlan_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyInvestPlan_ProtoFunID_descriptor();
inline const ::std::string& stBuyInvestPlan_ProtoFunID_Name(stBuyInvestPlan_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyInvestPlan_ProtoFunID_descriptor(), value);
}
inline bool stBuyInvestPlan_ProtoFunID_Parse(
    const ::std::string& name, stBuyInvestPlan_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyInvestPlan_ProtoFunID>(
    stBuyInvestPlan_ProtoFunID_descriptor(), name, value);
}
enum stBuyInvestPlanResult_eResult {
  stBuyInvestPlanResult_eResult_eSUCCESS = 1,
  stBuyInvestPlanResult_eResult_eDIAMOND_NOT_ENOGUH = 2,
  stBuyInvestPlanResult_eResult_eVIP_LV_TOO_LOW = 3,
  stBuyInvestPlanResult_eResult_eHAS_BUY = 4
};
bool stBuyInvestPlanResult_eResult_IsValid(int value);
const stBuyInvestPlanResult_eResult stBuyInvestPlanResult_eResult_eResult_MIN = stBuyInvestPlanResult_eResult_eSUCCESS;
const stBuyInvestPlanResult_eResult stBuyInvestPlanResult_eResult_eResult_MAX = stBuyInvestPlanResult_eResult_eHAS_BUY;
const int stBuyInvestPlanResult_eResult_eResult_ARRAYSIZE = stBuyInvestPlanResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyInvestPlanResult_eResult_descriptor();
inline const ::std::string& stBuyInvestPlanResult_eResult_Name(stBuyInvestPlanResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyInvestPlanResult_eResult_descriptor(), value);
}
inline bool stBuyInvestPlanResult_eResult_Parse(
    const ::std::string& name, stBuyInvestPlanResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyInvestPlanResult_eResult>(
    stBuyInvestPlanResult_eResult_descriptor(), name, value);
}
enum stBuyInvestPlanResult_ProtoModID {
  stBuyInvestPlanResult_ProtoModID_ModID = 8
};
bool stBuyInvestPlanResult_ProtoModID_IsValid(int value);
const stBuyInvestPlanResult_ProtoModID stBuyInvestPlanResult_ProtoModID_ProtoModID_MIN = stBuyInvestPlanResult_ProtoModID_ModID;
const stBuyInvestPlanResult_ProtoModID stBuyInvestPlanResult_ProtoModID_ProtoModID_MAX = stBuyInvestPlanResult_ProtoModID_ModID;
const int stBuyInvestPlanResult_ProtoModID_ProtoModID_ARRAYSIZE = stBuyInvestPlanResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyInvestPlanResult_ProtoModID_descriptor();
inline const ::std::string& stBuyInvestPlanResult_ProtoModID_Name(stBuyInvestPlanResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyInvestPlanResult_ProtoModID_descriptor(), value);
}
inline bool stBuyInvestPlanResult_ProtoModID_Parse(
    const ::std::string& name, stBuyInvestPlanResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyInvestPlanResult_ProtoModID>(
    stBuyInvestPlanResult_ProtoModID_descriptor(), name, value);
}
enum stBuyInvestPlanResult_ProtoFunID {
  stBuyInvestPlanResult_ProtoFunID_FunID = 29
};
bool stBuyInvestPlanResult_ProtoFunID_IsValid(int value);
const stBuyInvestPlanResult_ProtoFunID stBuyInvestPlanResult_ProtoFunID_ProtoFunID_MIN = stBuyInvestPlanResult_ProtoFunID_FunID;
const stBuyInvestPlanResult_ProtoFunID stBuyInvestPlanResult_ProtoFunID_ProtoFunID_MAX = stBuyInvestPlanResult_ProtoFunID_FunID;
const int stBuyInvestPlanResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuyInvestPlanResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyInvestPlanResult_ProtoFunID_descriptor();
inline const ::std::string& stBuyInvestPlanResult_ProtoFunID_Name(stBuyInvestPlanResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyInvestPlanResult_ProtoFunID_descriptor(), value);
}
inline bool stBuyInvestPlanResult_ProtoFunID_Parse(
    const ::std::string& name, stBuyInvestPlanResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyInvestPlanResult_ProtoFunID>(
    stBuyInvestPlanResult_ProtoFunID_descriptor(), name, value);
}
enum stReqInvestPlanReward_ProtoModID {
  stReqInvestPlanReward_ProtoModID_ModID = 8
};
bool stReqInvestPlanReward_ProtoModID_IsValid(int value);
const stReqInvestPlanReward_ProtoModID stReqInvestPlanReward_ProtoModID_ProtoModID_MIN = stReqInvestPlanReward_ProtoModID_ModID;
const stReqInvestPlanReward_ProtoModID stReqInvestPlanReward_ProtoModID_ProtoModID_MAX = stReqInvestPlanReward_ProtoModID_ModID;
const int stReqInvestPlanReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqInvestPlanReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqInvestPlanReward_ProtoModID_descriptor();
inline const ::std::string& stReqInvestPlanReward_ProtoModID_Name(stReqInvestPlanReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqInvestPlanReward_ProtoModID_descriptor(), value);
}
inline bool stReqInvestPlanReward_ProtoModID_Parse(
    const ::std::string& name, stReqInvestPlanReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqInvestPlanReward_ProtoModID>(
    stReqInvestPlanReward_ProtoModID_descriptor(), name, value);
}
enum stReqInvestPlanReward_ProtoFunID {
  stReqInvestPlanReward_ProtoFunID_FunID = 30
};
bool stReqInvestPlanReward_ProtoFunID_IsValid(int value);
const stReqInvestPlanReward_ProtoFunID stReqInvestPlanReward_ProtoFunID_ProtoFunID_MIN = stReqInvestPlanReward_ProtoFunID_FunID;
const stReqInvestPlanReward_ProtoFunID stReqInvestPlanReward_ProtoFunID_ProtoFunID_MAX = stReqInvestPlanReward_ProtoFunID_FunID;
const int stReqInvestPlanReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqInvestPlanReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqInvestPlanReward_ProtoFunID_descriptor();
inline const ::std::string& stReqInvestPlanReward_ProtoFunID_Name(stReqInvestPlanReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqInvestPlanReward_ProtoFunID_descriptor(), value);
}
inline bool stReqInvestPlanReward_ProtoFunID_Parse(
    const ::std::string& name, stReqInvestPlanReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqInvestPlanReward_ProtoFunID>(
    stReqInvestPlanReward_ProtoFunID_descriptor(), name, value);
}
enum stInvestPlanRewardResult_eResult {
  stInvestPlanRewardResult_eResult_eSUCCESS = 1,
  stInvestPlanRewardResult_eResult_eHAS_GET_REWARD = 2,
  stInvestPlanRewardResult_eResult_eHAS_NOT_BUY_INVEST_PLAN = 3
};
bool stInvestPlanRewardResult_eResult_IsValid(int value);
const stInvestPlanRewardResult_eResult stInvestPlanRewardResult_eResult_eResult_MIN = stInvestPlanRewardResult_eResult_eSUCCESS;
const stInvestPlanRewardResult_eResult stInvestPlanRewardResult_eResult_eResult_MAX = stInvestPlanRewardResult_eResult_eHAS_NOT_BUY_INVEST_PLAN;
const int stInvestPlanRewardResult_eResult_eResult_ARRAYSIZE = stInvestPlanRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInvestPlanRewardResult_eResult_descriptor();
inline const ::std::string& stInvestPlanRewardResult_eResult_Name(stInvestPlanRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInvestPlanRewardResult_eResult_descriptor(), value);
}
inline bool stInvestPlanRewardResult_eResult_Parse(
    const ::std::string& name, stInvestPlanRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInvestPlanRewardResult_eResult>(
    stInvestPlanRewardResult_eResult_descriptor(), name, value);
}
enum stInvestPlanRewardResult_ProtoModID {
  stInvestPlanRewardResult_ProtoModID_ModID = 8
};
bool stInvestPlanRewardResult_ProtoModID_IsValid(int value);
const stInvestPlanRewardResult_ProtoModID stInvestPlanRewardResult_ProtoModID_ProtoModID_MIN = stInvestPlanRewardResult_ProtoModID_ModID;
const stInvestPlanRewardResult_ProtoModID stInvestPlanRewardResult_ProtoModID_ProtoModID_MAX = stInvestPlanRewardResult_ProtoModID_ModID;
const int stInvestPlanRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stInvestPlanRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInvestPlanRewardResult_ProtoModID_descriptor();
inline const ::std::string& stInvestPlanRewardResult_ProtoModID_Name(stInvestPlanRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInvestPlanRewardResult_ProtoModID_descriptor(), value);
}
inline bool stInvestPlanRewardResult_ProtoModID_Parse(
    const ::std::string& name, stInvestPlanRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInvestPlanRewardResult_ProtoModID>(
    stInvestPlanRewardResult_ProtoModID_descriptor(), name, value);
}
enum stInvestPlanRewardResult_ProtoFunID {
  stInvestPlanRewardResult_ProtoFunID_FunID = 31
};
bool stInvestPlanRewardResult_ProtoFunID_IsValid(int value);
const stInvestPlanRewardResult_ProtoFunID stInvestPlanRewardResult_ProtoFunID_ProtoFunID_MIN = stInvestPlanRewardResult_ProtoFunID_FunID;
const stInvestPlanRewardResult_ProtoFunID stInvestPlanRewardResult_ProtoFunID_ProtoFunID_MAX = stInvestPlanRewardResult_ProtoFunID_FunID;
const int stInvestPlanRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stInvestPlanRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInvestPlanRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stInvestPlanRewardResult_ProtoFunID_Name(stInvestPlanRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInvestPlanRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stInvestPlanRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stInvestPlanRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInvestPlanRewardResult_ProtoFunID>(
    stInvestPlanRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqEatDinner_ProtoModID {
  stReqEatDinner_ProtoModID_ModID = 8
};
bool stReqEatDinner_ProtoModID_IsValid(int value);
const stReqEatDinner_ProtoModID stReqEatDinner_ProtoModID_ProtoModID_MIN = stReqEatDinner_ProtoModID_ModID;
const stReqEatDinner_ProtoModID stReqEatDinner_ProtoModID_ProtoModID_MAX = stReqEatDinner_ProtoModID_ModID;
const int stReqEatDinner_ProtoModID_ProtoModID_ARRAYSIZE = stReqEatDinner_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEatDinner_ProtoModID_descriptor();
inline const ::std::string& stReqEatDinner_ProtoModID_Name(stReqEatDinner_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEatDinner_ProtoModID_descriptor(), value);
}
inline bool stReqEatDinner_ProtoModID_Parse(
    const ::std::string& name, stReqEatDinner_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEatDinner_ProtoModID>(
    stReqEatDinner_ProtoModID_descriptor(), name, value);
}
enum stReqEatDinner_ProtoFunID {
  stReqEatDinner_ProtoFunID_FunID = 32
};
bool stReqEatDinner_ProtoFunID_IsValid(int value);
const stReqEatDinner_ProtoFunID stReqEatDinner_ProtoFunID_ProtoFunID_MIN = stReqEatDinner_ProtoFunID_FunID;
const stReqEatDinner_ProtoFunID stReqEatDinner_ProtoFunID_ProtoFunID_MAX = stReqEatDinner_ProtoFunID_FunID;
const int stReqEatDinner_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqEatDinner_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEatDinner_ProtoFunID_descriptor();
inline const ::std::string& stReqEatDinner_ProtoFunID_Name(stReqEatDinner_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEatDinner_ProtoFunID_descriptor(), value);
}
inline bool stReqEatDinner_ProtoFunID_Parse(
    const ::std::string& name, stReqEatDinner_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEatDinner_ProtoFunID>(
    stReqEatDinner_ProtoFunID_descriptor(), name, value);
}
enum stEatDinnerResult_eResult {
  stEatDinnerResult_eResult_eSUCCESS = 1,
  stEatDinnerResult_eResult_eTIME_LIMIT = 2,
  stEatDinnerResult_eResult_eHAS_EAT = 3,
  stEatDinnerResult_eResult_eEAT_DINNER_NUM_OUT = 4
};
bool stEatDinnerResult_eResult_IsValid(int value);
const stEatDinnerResult_eResult stEatDinnerResult_eResult_eResult_MIN = stEatDinnerResult_eResult_eSUCCESS;
const stEatDinnerResult_eResult stEatDinnerResult_eResult_eResult_MAX = stEatDinnerResult_eResult_eEAT_DINNER_NUM_OUT;
const int stEatDinnerResult_eResult_eResult_ARRAYSIZE = stEatDinnerResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEatDinnerResult_eResult_descriptor();
inline const ::std::string& stEatDinnerResult_eResult_Name(stEatDinnerResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEatDinnerResult_eResult_descriptor(), value);
}
inline bool stEatDinnerResult_eResult_Parse(
    const ::std::string& name, stEatDinnerResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEatDinnerResult_eResult>(
    stEatDinnerResult_eResult_descriptor(), name, value);
}
enum stEatDinnerResult_ProtoModID {
  stEatDinnerResult_ProtoModID_ModID = 8
};
bool stEatDinnerResult_ProtoModID_IsValid(int value);
const stEatDinnerResult_ProtoModID stEatDinnerResult_ProtoModID_ProtoModID_MIN = stEatDinnerResult_ProtoModID_ModID;
const stEatDinnerResult_ProtoModID stEatDinnerResult_ProtoModID_ProtoModID_MAX = stEatDinnerResult_ProtoModID_ModID;
const int stEatDinnerResult_ProtoModID_ProtoModID_ARRAYSIZE = stEatDinnerResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEatDinnerResult_ProtoModID_descriptor();
inline const ::std::string& stEatDinnerResult_ProtoModID_Name(stEatDinnerResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEatDinnerResult_ProtoModID_descriptor(), value);
}
inline bool stEatDinnerResult_ProtoModID_Parse(
    const ::std::string& name, stEatDinnerResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEatDinnerResult_ProtoModID>(
    stEatDinnerResult_ProtoModID_descriptor(), name, value);
}
enum stEatDinnerResult_ProtoFunID {
  stEatDinnerResult_ProtoFunID_FunID = 33
};
bool stEatDinnerResult_ProtoFunID_IsValid(int value);
const stEatDinnerResult_ProtoFunID stEatDinnerResult_ProtoFunID_ProtoFunID_MIN = stEatDinnerResult_ProtoFunID_FunID;
const stEatDinnerResult_ProtoFunID stEatDinnerResult_ProtoFunID_ProtoFunID_MAX = stEatDinnerResult_ProtoFunID_FunID;
const int stEatDinnerResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stEatDinnerResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEatDinnerResult_ProtoFunID_descriptor();
inline const ::std::string& stEatDinnerResult_ProtoFunID_Name(stEatDinnerResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEatDinnerResult_ProtoFunID_descriptor(), value);
}
inline bool stEatDinnerResult_ProtoFunID_Parse(
    const ::std::string& name, stEatDinnerResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEatDinnerResult_ProtoFunID>(
    stEatDinnerResult_ProtoFunID_descriptor(), name, value);
}
enum stSynActivityData_ProtoModID {
  stSynActivityData_ProtoModID_ModID = 8
};
bool stSynActivityData_ProtoModID_IsValid(int value);
const stSynActivityData_ProtoModID stSynActivityData_ProtoModID_ProtoModID_MIN = stSynActivityData_ProtoModID_ModID;
const stSynActivityData_ProtoModID stSynActivityData_ProtoModID_ProtoModID_MAX = stSynActivityData_ProtoModID_ModID;
const int stSynActivityData_ProtoModID_ProtoModID_ARRAYSIZE = stSynActivityData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynActivityData_ProtoModID_descriptor();
inline const ::std::string& stSynActivityData_ProtoModID_Name(stSynActivityData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynActivityData_ProtoModID_descriptor(), value);
}
inline bool stSynActivityData_ProtoModID_Parse(
    const ::std::string& name, stSynActivityData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynActivityData_ProtoModID>(
    stSynActivityData_ProtoModID_descriptor(), name, value);
}
enum stSynActivityData_ProtoFunID {
  stSynActivityData_ProtoFunID_FunID = 34
};
bool stSynActivityData_ProtoFunID_IsValid(int value);
const stSynActivityData_ProtoFunID stSynActivityData_ProtoFunID_ProtoFunID_MIN = stSynActivityData_ProtoFunID_FunID;
const stSynActivityData_ProtoFunID stSynActivityData_ProtoFunID_ProtoFunID_MAX = stSynActivityData_ProtoFunID_FunID;
const int stSynActivityData_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynActivityData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynActivityData_ProtoFunID_descriptor();
inline const ::std::string& stSynActivityData_ProtoFunID_Name(stSynActivityData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynActivityData_ProtoFunID_descriptor(), value);
}
inline bool stSynActivityData_ProtoFunID_Parse(
    const ::std::string& name, stSynActivityData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynActivityData_ProtoFunID>(
    stSynActivityData_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenCaptureTreasure_ProtoModID {
  stReqOpenCaptureTreasure_ProtoModID_ModID = 8
};
bool stReqOpenCaptureTreasure_ProtoModID_IsValid(int value);
const stReqOpenCaptureTreasure_ProtoModID stReqOpenCaptureTreasure_ProtoModID_ProtoModID_MIN = stReqOpenCaptureTreasure_ProtoModID_ModID;
const stReqOpenCaptureTreasure_ProtoModID stReqOpenCaptureTreasure_ProtoModID_ProtoModID_MAX = stReqOpenCaptureTreasure_ProtoModID_ModID;
const int stReqOpenCaptureTreasure_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenCaptureTreasure_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenCaptureTreasure_ProtoModID_descriptor();
inline const ::std::string& stReqOpenCaptureTreasure_ProtoModID_Name(stReqOpenCaptureTreasure_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenCaptureTreasure_ProtoModID_descriptor(), value);
}
inline bool stReqOpenCaptureTreasure_ProtoModID_Parse(
    const ::std::string& name, stReqOpenCaptureTreasure_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenCaptureTreasure_ProtoModID>(
    stReqOpenCaptureTreasure_ProtoModID_descriptor(), name, value);
}
enum stReqOpenCaptureTreasure_ProtoFunID {
  stReqOpenCaptureTreasure_ProtoFunID_FunID = 35
};
bool stReqOpenCaptureTreasure_ProtoFunID_IsValid(int value);
const stReqOpenCaptureTreasure_ProtoFunID stReqOpenCaptureTreasure_ProtoFunID_ProtoFunID_MIN = stReqOpenCaptureTreasure_ProtoFunID_FunID;
const stReqOpenCaptureTreasure_ProtoFunID stReqOpenCaptureTreasure_ProtoFunID_ProtoFunID_MAX = stReqOpenCaptureTreasure_ProtoFunID_FunID;
const int stReqOpenCaptureTreasure_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenCaptureTreasure_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenCaptureTreasure_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenCaptureTreasure_ProtoFunID_Name(stReqOpenCaptureTreasure_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenCaptureTreasure_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenCaptureTreasure_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenCaptureTreasure_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenCaptureTreasure_ProtoFunID>(
    stReqOpenCaptureTreasure_ProtoFunID_descriptor(), name, value);
}
enum stRetCaptureTreasure_ProtoModID {
  stRetCaptureTreasure_ProtoModID_ModID = 8
};
bool stRetCaptureTreasure_ProtoModID_IsValid(int value);
const stRetCaptureTreasure_ProtoModID stRetCaptureTreasure_ProtoModID_ProtoModID_MIN = stRetCaptureTreasure_ProtoModID_ModID;
const stRetCaptureTreasure_ProtoModID stRetCaptureTreasure_ProtoModID_ProtoModID_MAX = stRetCaptureTreasure_ProtoModID_ModID;
const int stRetCaptureTreasure_ProtoModID_ProtoModID_ARRAYSIZE = stRetCaptureTreasure_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCaptureTreasure_ProtoModID_descriptor();
inline const ::std::string& stRetCaptureTreasure_ProtoModID_Name(stRetCaptureTreasure_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCaptureTreasure_ProtoModID_descriptor(), value);
}
inline bool stRetCaptureTreasure_ProtoModID_Parse(
    const ::std::string& name, stRetCaptureTreasure_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCaptureTreasure_ProtoModID>(
    stRetCaptureTreasure_ProtoModID_descriptor(), name, value);
}
enum stRetCaptureTreasure_ProtoFunID {
  stRetCaptureTreasure_ProtoFunID_FunID = 36
};
bool stRetCaptureTreasure_ProtoFunID_IsValid(int value);
const stRetCaptureTreasure_ProtoFunID stRetCaptureTreasure_ProtoFunID_ProtoFunID_MIN = stRetCaptureTreasure_ProtoFunID_FunID;
const stRetCaptureTreasure_ProtoFunID stRetCaptureTreasure_ProtoFunID_ProtoFunID_MAX = stRetCaptureTreasure_ProtoFunID_FunID;
const int stRetCaptureTreasure_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetCaptureTreasure_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCaptureTreasure_ProtoFunID_descriptor();
inline const ::std::string& stRetCaptureTreasure_ProtoFunID_Name(stRetCaptureTreasure_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCaptureTreasure_ProtoFunID_descriptor(), value);
}
inline bool stRetCaptureTreasure_ProtoFunID_Parse(
    const ::std::string& name, stRetCaptureTreasure_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCaptureTreasure_ProtoFunID>(
    stRetCaptureTreasure_ProtoFunID_descriptor(), name, value);
}
enum stReqCombineTreasure_ProtoModID {
  stReqCombineTreasure_ProtoModID_ModID = 8
};
bool stReqCombineTreasure_ProtoModID_IsValid(int value);
const stReqCombineTreasure_ProtoModID stReqCombineTreasure_ProtoModID_ProtoModID_MIN = stReqCombineTreasure_ProtoModID_ModID;
const stReqCombineTreasure_ProtoModID stReqCombineTreasure_ProtoModID_ProtoModID_MAX = stReqCombineTreasure_ProtoModID_ModID;
const int stReqCombineTreasure_ProtoModID_ProtoModID_ARRAYSIZE = stReqCombineTreasure_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCombineTreasure_ProtoModID_descriptor();
inline const ::std::string& stReqCombineTreasure_ProtoModID_Name(stReqCombineTreasure_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCombineTreasure_ProtoModID_descriptor(), value);
}
inline bool stReqCombineTreasure_ProtoModID_Parse(
    const ::std::string& name, stReqCombineTreasure_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCombineTreasure_ProtoModID>(
    stReqCombineTreasure_ProtoModID_descriptor(), name, value);
}
enum stReqCombineTreasure_ProtoFunID {
  stReqCombineTreasure_ProtoFunID_FunID = 37
};
bool stReqCombineTreasure_ProtoFunID_IsValid(int value);
const stReqCombineTreasure_ProtoFunID stReqCombineTreasure_ProtoFunID_ProtoFunID_MIN = stReqCombineTreasure_ProtoFunID_FunID;
const stReqCombineTreasure_ProtoFunID stReqCombineTreasure_ProtoFunID_ProtoFunID_MAX = stReqCombineTreasure_ProtoFunID_FunID;
const int stReqCombineTreasure_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCombineTreasure_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCombineTreasure_ProtoFunID_descriptor();
inline const ::std::string& stReqCombineTreasure_ProtoFunID_Name(stReqCombineTreasure_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCombineTreasure_ProtoFunID_descriptor(), value);
}
inline bool stReqCombineTreasure_ProtoFunID_Parse(
    const ::std::string& name, stReqCombineTreasure_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCombineTreasure_ProtoFunID>(
    stReqCombineTreasure_ProtoFunID_descriptor(), name, value);
}
enum stCombineTreasureResult_eResult {
  stCombineTreasureResult_eResult_eSUCCESS = 1,
  stCombineTreasureResult_eResult_eTREASURE_NOT_ENOUGH = 2,
  stCombineTreasureResult_eResult_eBAG_FULL = 3,
  stCombineTreasureResult_eResult_eINNER_ERROR = 4
};
bool stCombineTreasureResult_eResult_IsValid(int value);
const stCombineTreasureResult_eResult stCombineTreasureResult_eResult_eResult_MIN = stCombineTreasureResult_eResult_eSUCCESS;
const stCombineTreasureResult_eResult stCombineTreasureResult_eResult_eResult_MAX = stCombineTreasureResult_eResult_eINNER_ERROR;
const int stCombineTreasureResult_eResult_eResult_ARRAYSIZE = stCombineTreasureResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCombineTreasureResult_eResult_descriptor();
inline const ::std::string& stCombineTreasureResult_eResult_Name(stCombineTreasureResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCombineTreasureResult_eResult_descriptor(), value);
}
inline bool stCombineTreasureResult_eResult_Parse(
    const ::std::string& name, stCombineTreasureResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCombineTreasureResult_eResult>(
    stCombineTreasureResult_eResult_descriptor(), name, value);
}
enum stCombineTreasureResult_ProtoModID {
  stCombineTreasureResult_ProtoModID_ModID = 8
};
bool stCombineTreasureResult_ProtoModID_IsValid(int value);
const stCombineTreasureResult_ProtoModID stCombineTreasureResult_ProtoModID_ProtoModID_MIN = stCombineTreasureResult_ProtoModID_ModID;
const stCombineTreasureResult_ProtoModID stCombineTreasureResult_ProtoModID_ProtoModID_MAX = stCombineTreasureResult_ProtoModID_ModID;
const int stCombineTreasureResult_ProtoModID_ProtoModID_ARRAYSIZE = stCombineTreasureResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCombineTreasureResult_ProtoModID_descriptor();
inline const ::std::string& stCombineTreasureResult_ProtoModID_Name(stCombineTreasureResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCombineTreasureResult_ProtoModID_descriptor(), value);
}
inline bool stCombineTreasureResult_ProtoModID_Parse(
    const ::std::string& name, stCombineTreasureResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCombineTreasureResult_ProtoModID>(
    stCombineTreasureResult_ProtoModID_descriptor(), name, value);
}
enum stCombineTreasureResult_ProtoFunID {
  stCombineTreasureResult_ProtoFunID_FunID = 38
};
bool stCombineTreasureResult_ProtoFunID_IsValid(int value);
const stCombineTreasureResult_ProtoFunID stCombineTreasureResult_ProtoFunID_ProtoFunID_MIN = stCombineTreasureResult_ProtoFunID_FunID;
const stCombineTreasureResult_ProtoFunID stCombineTreasureResult_ProtoFunID_ProtoFunID_MAX = stCombineTreasureResult_ProtoFunID_FunID;
const int stCombineTreasureResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCombineTreasureResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCombineTreasureResult_ProtoFunID_descriptor();
inline const ::std::string& stCombineTreasureResult_ProtoFunID_Name(stCombineTreasureResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCombineTreasureResult_ProtoFunID_descriptor(), value);
}
inline bool stCombineTreasureResult_ProtoFunID_Parse(
    const ::std::string& name, stCombineTreasureResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCombineTreasureResult_ProtoFunID>(
    stCombineTreasureResult_ProtoFunID_descriptor(), name, value);
}
enum stBuyPeaceModuleTime_eType {
  stBuyPeaceModuleTime_eType_e1_HOUR_ITEM = 1,
  stBuyPeaceModuleTime_eType_e3_HOUR_ITEM = 2,
  stBuyPeaceModuleTime_eType_e12_HOUR_ITEM = 3,
  stBuyPeaceModuleTime_eType_e10_DIAMOND = 4
};
bool stBuyPeaceModuleTime_eType_IsValid(int value);
const stBuyPeaceModuleTime_eType stBuyPeaceModuleTime_eType_eType_MIN = stBuyPeaceModuleTime_eType_e1_HOUR_ITEM;
const stBuyPeaceModuleTime_eType stBuyPeaceModuleTime_eType_eType_MAX = stBuyPeaceModuleTime_eType_e10_DIAMOND;
const int stBuyPeaceModuleTime_eType_eType_ARRAYSIZE = stBuyPeaceModuleTime_eType_eType_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTime_eType_descriptor();
inline const ::std::string& stBuyPeaceModuleTime_eType_Name(stBuyPeaceModuleTime_eType value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyPeaceModuleTime_eType_descriptor(), value);
}
inline bool stBuyPeaceModuleTime_eType_Parse(
    const ::std::string& name, stBuyPeaceModuleTime_eType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyPeaceModuleTime_eType>(
    stBuyPeaceModuleTime_eType_descriptor(), name, value);
}
enum stBuyPeaceModuleTime_ProtoModID {
  stBuyPeaceModuleTime_ProtoModID_ModID = 8
};
bool stBuyPeaceModuleTime_ProtoModID_IsValid(int value);
const stBuyPeaceModuleTime_ProtoModID stBuyPeaceModuleTime_ProtoModID_ProtoModID_MIN = stBuyPeaceModuleTime_ProtoModID_ModID;
const stBuyPeaceModuleTime_ProtoModID stBuyPeaceModuleTime_ProtoModID_ProtoModID_MAX = stBuyPeaceModuleTime_ProtoModID_ModID;
const int stBuyPeaceModuleTime_ProtoModID_ProtoModID_ARRAYSIZE = stBuyPeaceModuleTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTime_ProtoModID_descriptor();
inline const ::std::string& stBuyPeaceModuleTime_ProtoModID_Name(stBuyPeaceModuleTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyPeaceModuleTime_ProtoModID_descriptor(), value);
}
inline bool stBuyPeaceModuleTime_ProtoModID_Parse(
    const ::std::string& name, stBuyPeaceModuleTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyPeaceModuleTime_ProtoModID>(
    stBuyPeaceModuleTime_ProtoModID_descriptor(), name, value);
}
enum stBuyPeaceModuleTime_ProtoFunID {
  stBuyPeaceModuleTime_ProtoFunID_FunID = 39
};
bool stBuyPeaceModuleTime_ProtoFunID_IsValid(int value);
const stBuyPeaceModuleTime_ProtoFunID stBuyPeaceModuleTime_ProtoFunID_ProtoFunID_MIN = stBuyPeaceModuleTime_ProtoFunID_FunID;
const stBuyPeaceModuleTime_ProtoFunID stBuyPeaceModuleTime_ProtoFunID_ProtoFunID_MAX = stBuyPeaceModuleTime_ProtoFunID_FunID;
const int stBuyPeaceModuleTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuyPeaceModuleTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTime_ProtoFunID_descriptor();
inline const ::std::string& stBuyPeaceModuleTime_ProtoFunID_Name(stBuyPeaceModuleTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyPeaceModuleTime_ProtoFunID_descriptor(), value);
}
inline bool stBuyPeaceModuleTime_ProtoFunID_Parse(
    const ::std::string& name, stBuyPeaceModuleTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyPeaceModuleTime_ProtoFunID>(
    stBuyPeaceModuleTime_ProtoFunID_descriptor(), name, value);
}
enum stBuyPeaceModuleTimeResult_eResult {
  stBuyPeaceModuleTimeResult_eResult_eSUCCESS = 1,
  stBuyPeaceModuleTimeResult_eResult_eHAS_NO_ITEM = 2,
  stBuyPeaceModuleTimeResult_eResult_eDIAMOND_NOT_ENOUGH = 3
};
bool stBuyPeaceModuleTimeResult_eResult_IsValid(int value);
const stBuyPeaceModuleTimeResult_eResult stBuyPeaceModuleTimeResult_eResult_eResult_MIN = stBuyPeaceModuleTimeResult_eResult_eSUCCESS;
const stBuyPeaceModuleTimeResult_eResult stBuyPeaceModuleTimeResult_eResult_eResult_MAX = stBuyPeaceModuleTimeResult_eResult_eDIAMOND_NOT_ENOUGH;
const int stBuyPeaceModuleTimeResult_eResult_eResult_ARRAYSIZE = stBuyPeaceModuleTimeResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTimeResult_eResult_descriptor();
inline const ::std::string& stBuyPeaceModuleTimeResult_eResult_Name(stBuyPeaceModuleTimeResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyPeaceModuleTimeResult_eResult_descriptor(), value);
}
inline bool stBuyPeaceModuleTimeResult_eResult_Parse(
    const ::std::string& name, stBuyPeaceModuleTimeResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyPeaceModuleTimeResult_eResult>(
    stBuyPeaceModuleTimeResult_eResult_descriptor(), name, value);
}
enum stBuyPeaceModuleTimeResult_ProtoModID {
  stBuyPeaceModuleTimeResult_ProtoModID_ModID = 8
};
bool stBuyPeaceModuleTimeResult_ProtoModID_IsValid(int value);
const stBuyPeaceModuleTimeResult_ProtoModID stBuyPeaceModuleTimeResult_ProtoModID_ProtoModID_MIN = stBuyPeaceModuleTimeResult_ProtoModID_ModID;
const stBuyPeaceModuleTimeResult_ProtoModID stBuyPeaceModuleTimeResult_ProtoModID_ProtoModID_MAX = stBuyPeaceModuleTimeResult_ProtoModID_ModID;
const int stBuyPeaceModuleTimeResult_ProtoModID_ProtoModID_ARRAYSIZE = stBuyPeaceModuleTimeResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTimeResult_ProtoModID_descriptor();
inline const ::std::string& stBuyPeaceModuleTimeResult_ProtoModID_Name(stBuyPeaceModuleTimeResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyPeaceModuleTimeResult_ProtoModID_descriptor(), value);
}
inline bool stBuyPeaceModuleTimeResult_ProtoModID_Parse(
    const ::std::string& name, stBuyPeaceModuleTimeResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyPeaceModuleTimeResult_ProtoModID>(
    stBuyPeaceModuleTimeResult_ProtoModID_descriptor(), name, value);
}
enum stBuyPeaceModuleTimeResult_ProtoFunID {
  stBuyPeaceModuleTimeResult_ProtoFunID_FunID = 40
};
bool stBuyPeaceModuleTimeResult_ProtoFunID_IsValid(int value);
const stBuyPeaceModuleTimeResult_ProtoFunID stBuyPeaceModuleTimeResult_ProtoFunID_ProtoFunID_MIN = stBuyPeaceModuleTimeResult_ProtoFunID_FunID;
const stBuyPeaceModuleTimeResult_ProtoFunID stBuyPeaceModuleTimeResult_ProtoFunID_ProtoFunID_MAX = stBuyPeaceModuleTimeResult_ProtoFunID_FunID;
const int stBuyPeaceModuleTimeResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuyPeaceModuleTimeResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTimeResult_ProtoFunID_descriptor();
inline const ::std::string& stBuyPeaceModuleTimeResult_ProtoFunID_Name(stBuyPeaceModuleTimeResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyPeaceModuleTimeResult_ProtoFunID_descriptor(), value);
}
inline bool stBuyPeaceModuleTimeResult_ProtoFunID_Parse(
    const ::std::string& name, stBuyPeaceModuleTimeResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyPeaceModuleTimeResult_ProtoFunID>(
    stBuyPeaceModuleTimeResult_ProtoFunID_descriptor(), name, value);
}
enum stReqChallengeUserList_ProtoModID {
  stReqChallengeUserList_ProtoModID_ModID = 8
};
bool stReqChallengeUserList_ProtoModID_IsValid(int value);
const stReqChallengeUserList_ProtoModID stReqChallengeUserList_ProtoModID_ProtoModID_MIN = stReqChallengeUserList_ProtoModID_ModID;
const stReqChallengeUserList_ProtoModID stReqChallengeUserList_ProtoModID_ProtoModID_MAX = stReqChallengeUserList_ProtoModID_ModID;
const int stReqChallengeUserList_ProtoModID_ProtoModID_ARRAYSIZE = stReqChallengeUserList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChallengeUserList_ProtoModID_descriptor();
inline const ::std::string& stReqChallengeUserList_ProtoModID_Name(stReqChallengeUserList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChallengeUserList_ProtoModID_descriptor(), value);
}
inline bool stReqChallengeUserList_ProtoModID_Parse(
    const ::std::string& name, stReqChallengeUserList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChallengeUserList_ProtoModID>(
    stReqChallengeUserList_ProtoModID_descriptor(), name, value);
}
enum stReqChallengeUserList_ProtoFunID {
  stReqChallengeUserList_ProtoFunID_FunID = 41
};
bool stReqChallengeUserList_ProtoFunID_IsValid(int value);
const stReqChallengeUserList_ProtoFunID stReqChallengeUserList_ProtoFunID_ProtoFunID_MIN = stReqChallengeUserList_ProtoFunID_FunID;
const stReqChallengeUserList_ProtoFunID stReqChallengeUserList_ProtoFunID_ProtoFunID_MAX = stReqChallengeUserList_ProtoFunID_FunID;
const int stReqChallengeUserList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqChallengeUserList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChallengeUserList_ProtoFunID_descriptor();
inline const ::std::string& stReqChallengeUserList_ProtoFunID_Name(stReqChallengeUserList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChallengeUserList_ProtoFunID_descriptor(), value);
}
inline bool stReqChallengeUserList_ProtoFunID_Parse(
    const ::std::string& name, stReqChallengeUserList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChallengeUserList_ProtoFunID>(
    stReqChallengeUserList_ProtoFunID_descriptor(), name, value);
}
enum stRetChallengeUserList_ProtoModID {
  stRetChallengeUserList_ProtoModID_ModID = 8
};
bool stRetChallengeUserList_ProtoModID_IsValid(int value);
const stRetChallengeUserList_ProtoModID stRetChallengeUserList_ProtoModID_ProtoModID_MIN = stRetChallengeUserList_ProtoModID_ModID;
const stRetChallengeUserList_ProtoModID stRetChallengeUserList_ProtoModID_ProtoModID_MAX = stRetChallengeUserList_ProtoModID_ModID;
const int stRetChallengeUserList_ProtoModID_ProtoModID_ARRAYSIZE = stRetChallengeUserList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetChallengeUserList_ProtoModID_descriptor();
inline const ::std::string& stRetChallengeUserList_ProtoModID_Name(stRetChallengeUserList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetChallengeUserList_ProtoModID_descriptor(), value);
}
inline bool stRetChallengeUserList_ProtoModID_Parse(
    const ::std::string& name, stRetChallengeUserList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetChallengeUserList_ProtoModID>(
    stRetChallengeUserList_ProtoModID_descriptor(), name, value);
}
enum stRetChallengeUserList_ProtoFunID {
  stRetChallengeUserList_ProtoFunID_FunID = 42
};
bool stRetChallengeUserList_ProtoFunID_IsValid(int value);
const stRetChallengeUserList_ProtoFunID stRetChallengeUserList_ProtoFunID_ProtoFunID_MIN = stRetChallengeUserList_ProtoFunID_FunID;
const stRetChallengeUserList_ProtoFunID stRetChallengeUserList_ProtoFunID_ProtoFunID_MAX = stRetChallengeUserList_ProtoFunID_FunID;
const int stRetChallengeUserList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetChallengeUserList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetChallengeUserList_ProtoFunID_descriptor();
inline const ::std::string& stRetChallengeUserList_ProtoFunID_Name(stRetChallengeUserList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetChallengeUserList_ProtoFunID_descriptor(), value);
}
inline bool stRetChallengeUserList_ProtoFunID_Parse(
    const ::std::string& name, stRetChallengeUserList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetChallengeUserList_ProtoFunID>(
    stRetChallengeUserList_ProtoFunID_descriptor(), name, value);
}
enum stCaptureUserTreasure_ProtoModID {
  stCaptureUserTreasure_ProtoModID_ModID = 8
};
bool stCaptureUserTreasure_ProtoModID_IsValid(int value);
const stCaptureUserTreasure_ProtoModID stCaptureUserTreasure_ProtoModID_ProtoModID_MIN = stCaptureUserTreasure_ProtoModID_ModID;
const stCaptureUserTreasure_ProtoModID stCaptureUserTreasure_ProtoModID_ProtoModID_MAX = stCaptureUserTreasure_ProtoModID_ModID;
const int stCaptureUserTreasure_ProtoModID_ProtoModID_ARRAYSIZE = stCaptureUserTreasure_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCaptureUserTreasure_ProtoModID_descriptor();
inline const ::std::string& stCaptureUserTreasure_ProtoModID_Name(stCaptureUserTreasure_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCaptureUserTreasure_ProtoModID_descriptor(), value);
}
inline bool stCaptureUserTreasure_ProtoModID_Parse(
    const ::std::string& name, stCaptureUserTreasure_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCaptureUserTreasure_ProtoModID>(
    stCaptureUserTreasure_ProtoModID_descriptor(), name, value);
}
enum stCaptureUserTreasure_ProtoFunID {
  stCaptureUserTreasure_ProtoFunID_FunID = 43
};
bool stCaptureUserTreasure_ProtoFunID_IsValid(int value);
const stCaptureUserTreasure_ProtoFunID stCaptureUserTreasure_ProtoFunID_ProtoFunID_MIN = stCaptureUserTreasure_ProtoFunID_FunID;
const stCaptureUserTreasure_ProtoFunID stCaptureUserTreasure_ProtoFunID_ProtoFunID_MAX = stCaptureUserTreasure_ProtoFunID_FunID;
const int stCaptureUserTreasure_ProtoFunID_ProtoFunID_ARRAYSIZE = stCaptureUserTreasure_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCaptureUserTreasure_ProtoFunID_descriptor();
inline const ::std::string& stCaptureUserTreasure_ProtoFunID_Name(stCaptureUserTreasure_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCaptureUserTreasure_ProtoFunID_descriptor(), value);
}
inline bool stCaptureUserTreasure_ProtoFunID_Parse(
    const ::std::string& name, stCaptureUserTreasure_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCaptureUserTreasure_ProtoFunID>(
    stCaptureUserTreasure_ProtoFunID_descriptor(), name, value);
}
enum stCaptureUserTreasureResult_eResult {
  stCaptureUserTreasureResult_eResult_eSUCCESS = 1,
  stCaptureUserTreasureResult_eResult_eFAIL = 2,
  stCaptureUserTreasureResult_eResult_eINNER_ERROR = 3,
  stCaptureUserTreasureResult_eResult_eSP_NOT_ENOUGH = 4,
  stCaptureUserTreasureResult_eResult_eBAG_FULL = 5,
  stCaptureUserTreasureResult_eResult_eNOT_IN_OPEN_TIME = 6
};
bool stCaptureUserTreasureResult_eResult_IsValid(int value);
const stCaptureUserTreasureResult_eResult stCaptureUserTreasureResult_eResult_eResult_MIN = stCaptureUserTreasureResult_eResult_eSUCCESS;
const stCaptureUserTreasureResult_eResult stCaptureUserTreasureResult_eResult_eResult_MAX = stCaptureUserTreasureResult_eResult_eNOT_IN_OPEN_TIME;
const int stCaptureUserTreasureResult_eResult_eResult_ARRAYSIZE = stCaptureUserTreasureResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCaptureUserTreasureResult_eResult_descriptor();
inline const ::std::string& stCaptureUserTreasureResult_eResult_Name(stCaptureUserTreasureResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCaptureUserTreasureResult_eResult_descriptor(), value);
}
inline bool stCaptureUserTreasureResult_eResult_Parse(
    const ::std::string& name, stCaptureUserTreasureResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCaptureUserTreasureResult_eResult>(
    stCaptureUserTreasureResult_eResult_descriptor(), name, value);
}
enum stCaptureUserTreasureResult_ProtoModID {
  stCaptureUserTreasureResult_ProtoModID_ModID = 8
};
bool stCaptureUserTreasureResult_ProtoModID_IsValid(int value);
const stCaptureUserTreasureResult_ProtoModID stCaptureUserTreasureResult_ProtoModID_ProtoModID_MIN = stCaptureUserTreasureResult_ProtoModID_ModID;
const stCaptureUserTreasureResult_ProtoModID stCaptureUserTreasureResult_ProtoModID_ProtoModID_MAX = stCaptureUserTreasureResult_ProtoModID_ModID;
const int stCaptureUserTreasureResult_ProtoModID_ProtoModID_ARRAYSIZE = stCaptureUserTreasureResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCaptureUserTreasureResult_ProtoModID_descriptor();
inline const ::std::string& stCaptureUserTreasureResult_ProtoModID_Name(stCaptureUserTreasureResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCaptureUserTreasureResult_ProtoModID_descriptor(), value);
}
inline bool stCaptureUserTreasureResult_ProtoModID_Parse(
    const ::std::string& name, stCaptureUserTreasureResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCaptureUserTreasureResult_ProtoModID>(
    stCaptureUserTreasureResult_ProtoModID_descriptor(), name, value);
}
enum stCaptureUserTreasureResult_ProtoFunID {
  stCaptureUserTreasureResult_ProtoFunID_FunID = 44
};
bool stCaptureUserTreasureResult_ProtoFunID_IsValid(int value);
const stCaptureUserTreasureResult_ProtoFunID stCaptureUserTreasureResult_ProtoFunID_ProtoFunID_MIN = stCaptureUserTreasureResult_ProtoFunID_FunID;
const stCaptureUserTreasureResult_ProtoFunID stCaptureUserTreasureResult_ProtoFunID_ProtoFunID_MAX = stCaptureUserTreasureResult_ProtoFunID_FunID;
const int stCaptureUserTreasureResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCaptureUserTreasureResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCaptureUserTreasureResult_ProtoFunID_descriptor();
inline const ::std::string& stCaptureUserTreasureResult_ProtoFunID_Name(stCaptureUserTreasureResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCaptureUserTreasureResult_ProtoFunID_descriptor(), value);
}
inline bool stCaptureUserTreasureResult_ProtoFunID_Parse(
    const ::std::string& name, stCaptureUserTreasureResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCaptureUserTreasureResult_ProtoFunID>(
    stCaptureUserTreasureResult_ProtoFunID_descriptor(), name, value);
}
enum stSynTreasureNum_ProtoModID {
  stSynTreasureNum_ProtoModID_ModID = 8
};
bool stSynTreasureNum_ProtoModID_IsValid(int value);
const stSynTreasureNum_ProtoModID stSynTreasureNum_ProtoModID_ProtoModID_MIN = stSynTreasureNum_ProtoModID_ModID;
const stSynTreasureNum_ProtoModID stSynTreasureNum_ProtoModID_ProtoModID_MAX = stSynTreasureNum_ProtoModID_ModID;
const int stSynTreasureNum_ProtoModID_ProtoModID_ARRAYSIZE = stSynTreasureNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynTreasureNum_ProtoModID_descriptor();
inline const ::std::string& stSynTreasureNum_ProtoModID_Name(stSynTreasureNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynTreasureNum_ProtoModID_descriptor(), value);
}
inline bool stSynTreasureNum_ProtoModID_Parse(
    const ::std::string& name, stSynTreasureNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynTreasureNum_ProtoModID>(
    stSynTreasureNum_ProtoModID_descriptor(), name, value);
}
enum stSynTreasureNum_ProtoFunID {
  stSynTreasureNum_ProtoFunID_FunID = 45
};
bool stSynTreasureNum_ProtoFunID_IsValid(int value);
const stSynTreasureNum_ProtoFunID stSynTreasureNum_ProtoFunID_ProtoFunID_MIN = stSynTreasureNum_ProtoFunID_FunID;
const stSynTreasureNum_ProtoFunID stSynTreasureNum_ProtoFunID_ProtoFunID_MAX = stSynTreasureNum_ProtoFunID_FunID;
const int stSynTreasureNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynTreasureNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynTreasureNum_ProtoFunID_descriptor();
inline const ::std::string& stSynTreasureNum_ProtoFunID_Name(stSynTreasureNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynTreasureNum_ProtoFunID_descriptor(), value);
}
inline bool stSynTreasureNum_ProtoFunID_Parse(
    const ::std::string& name, stSynTreasureNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynTreasureNum_ProtoFunID>(
    stSynTreasureNum_ProtoFunID_descriptor(), name, value);
}
enum stCancelActiveTitle_ProtoModID {
  stCancelActiveTitle_ProtoModID_ModID = 8
};
bool stCancelActiveTitle_ProtoModID_IsValid(int value);
const stCancelActiveTitle_ProtoModID stCancelActiveTitle_ProtoModID_ProtoModID_MIN = stCancelActiveTitle_ProtoModID_ModID;
const stCancelActiveTitle_ProtoModID stCancelActiveTitle_ProtoModID_ProtoModID_MAX = stCancelActiveTitle_ProtoModID_ModID;
const int stCancelActiveTitle_ProtoModID_ProtoModID_ARRAYSIZE = stCancelActiveTitle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelActiveTitle_ProtoModID_descriptor();
inline const ::std::string& stCancelActiveTitle_ProtoModID_Name(stCancelActiveTitle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelActiveTitle_ProtoModID_descriptor(), value);
}
inline bool stCancelActiveTitle_ProtoModID_Parse(
    const ::std::string& name, stCancelActiveTitle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelActiveTitle_ProtoModID>(
    stCancelActiveTitle_ProtoModID_descriptor(), name, value);
}
enum stCancelActiveTitle_ProtoFunID {
  stCancelActiveTitle_ProtoFunID_FunID = 46
};
bool stCancelActiveTitle_ProtoFunID_IsValid(int value);
const stCancelActiveTitle_ProtoFunID stCancelActiveTitle_ProtoFunID_ProtoFunID_MIN = stCancelActiveTitle_ProtoFunID_FunID;
const stCancelActiveTitle_ProtoFunID stCancelActiveTitle_ProtoFunID_ProtoFunID_MAX = stCancelActiveTitle_ProtoFunID_FunID;
const int stCancelActiveTitle_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelActiveTitle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelActiveTitle_ProtoFunID_descriptor();
inline const ::std::string& stCancelActiveTitle_ProtoFunID_Name(stCancelActiveTitle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelActiveTitle_ProtoFunID_descriptor(), value);
}
inline bool stCancelActiveTitle_ProtoFunID_Parse(
    const ::std::string& name, stCancelActiveTitle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelActiveTitle_ProtoFunID>(
    stCancelActiveTitle_ProtoFunID_descriptor(), name, value);
}
enum stCancelActiveTitleResult_ProtoModID {
  stCancelActiveTitleResult_ProtoModID_ModID = 8
};
bool stCancelActiveTitleResult_ProtoModID_IsValid(int value);
const stCancelActiveTitleResult_ProtoModID stCancelActiveTitleResult_ProtoModID_ProtoModID_MIN = stCancelActiveTitleResult_ProtoModID_ModID;
const stCancelActiveTitleResult_ProtoModID stCancelActiveTitleResult_ProtoModID_ProtoModID_MAX = stCancelActiveTitleResult_ProtoModID_ModID;
const int stCancelActiveTitleResult_ProtoModID_ProtoModID_ARRAYSIZE = stCancelActiveTitleResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelActiveTitleResult_ProtoModID_descriptor();
inline const ::std::string& stCancelActiveTitleResult_ProtoModID_Name(stCancelActiveTitleResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelActiveTitleResult_ProtoModID_descriptor(), value);
}
inline bool stCancelActiveTitleResult_ProtoModID_Parse(
    const ::std::string& name, stCancelActiveTitleResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelActiveTitleResult_ProtoModID>(
    stCancelActiveTitleResult_ProtoModID_descriptor(), name, value);
}
enum stCancelActiveTitleResult_ProtoFunID {
  stCancelActiveTitleResult_ProtoFunID_FunID = 47
};
bool stCancelActiveTitleResult_ProtoFunID_IsValid(int value);
const stCancelActiveTitleResult_ProtoFunID stCancelActiveTitleResult_ProtoFunID_ProtoFunID_MIN = stCancelActiveTitleResult_ProtoFunID_FunID;
const stCancelActiveTitleResult_ProtoFunID stCancelActiveTitleResult_ProtoFunID_ProtoFunID_MAX = stCancelActiveTitleResult_ProtoFunID_FunID;
const int stCancelActiveTitleResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelActiveTitleResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelActiveTitleResult_ProtoFunID_descriptor();
inline const ::std::string& stCancelActiveTitleResult_ProtoFunID_Name(stCancelActiveTitleResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelActiveTitleResult_ProtoFunID_descriptor(), value);
}
inline bool stCancelActiveTitleResult_ProtoFunID_Parse(
    const ::std::string& name, stCancelActiveTitleResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelActiveTitleResult_ProtoFunID>(
    stCancelActiveTitleResult_ProtoFunID_descriptor(), name, value);
}
enum stSynAllSprite_ProtoModID {
  stSynAllSprite_ProtoModID_ModID = 8
};
bool stSynAllSprite_ProtoModID_IsValid(int value);
const stSynAllSprite_ProtoModID stSynAllSprite_ProtoModID_ProtoModID_MIN = stSynAllSprite_ProtoModID_ModID;
const stSynAllSprite_ProtoModID stSynAllSprite_ProtoModID_ProtoModID_MAX = stSynAllSprite_ProtoModID_ModID;
const int stSynAllSprite_ProtoModID_ProtoModID_ARRAYSIZE = stSynAllSprite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAllSprite_ProtoModID_descriptor();
inline const ::std::string& stSynAllSprite_ProtoModID_Name(stSynAllSprite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAllSprite_ProtoModID_descriptor(), value);
}
inline bool stSynAllSprite_ProtoModID_Parse(
    const ::std::string& name, stSynAllSprite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAllSprite_ProtoModID>(
    stSynAllSprite_ProtoModID_descriptor(), name, value);
}
enum stSynAllSprite_ProtoFunID {
  stSynAllSprite_ProtoFunID_FunID = 48
};
bool stSynAllSprite_ProtoFunID_IsValid(int value);
const stSynAllSprite_ProtoFunID stSynAllSprite_ProtoFunID_ProtoFunID_MIN = stSynAllSprite_ProtoFunID_FunID;
const stSynAllSprite_ProtoFunID stSynAllSprite_ProtoFunID_ProtoFunID_MAX = stSynAllSprite_ProtoFunID_FunID;
const int stSynAllSprite_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynAllSprite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAllSprite_ProtoFunID_descriptor();
inline const ::std::string& stSynAllSprite_ProtoFunID_Name(stSynAllSprite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAllSprite_ProtoFunID_descriptor(), value);
}
inline bool stSynAllSprite_ProtoFunID_Parse(
    const ::std::string& name, stSynAllSprite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAllSprite_ProtoFunID>(
    stSynAllSprite_ProtoFunID_descriptor(), name, value);
}
enum stReqUnlockedSprite_ProtoModID {
  stReqUnlockedSprite_ProtoModID_ModID = 8
};
bool stReqUnlockedSprite_ProtoModID_IsValid(int value);
const stReqUnlockedSprite_ProtoModID stReqUnlockedSprite_ProtoModID_ProtoModID_MIN = stReqUnlockedSprite_ProtoModID_ModID;
const stReqUnlockedSprite_ProtoModID stReqUnlockedSprite_ProtoModID_ProtoModID_MAX = stReqUnlockedSprite_ProtoModID_ModID;
const int stReqUnlockedSprite_ProtoModID_ProtoModID_ARRAYSIZE = stReqUnlockedSprite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUnlockedSprite_ProtoModID_descriptor();
inline const ::std::string& stReqUnlockedSprite_ProtoModID_Name(stReqUnlockedSprite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUnlockedSprite_ProtoModID_descriptor(), value);
}
inline bool stReqUnlockedSprite_ProtoModID_Parse(
    const ::std::string& name, stReqUnlockedSprite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUnlockedSprite_ProtoModID>(
    stReqUnlockedSprite_ProtoModID_descriptor(), name, value);
}
enum stReqUnlockedSprite_ProtoFunID {
  stReqUnlockedSprite_ProtoFunID_FunID = 49
};
bool stReqUnlockedSprite_ProtoFunID_IsValid(int value);
const stReqUnlockedSprite_ProtoFunID stReqUnlockedSprite_ProtoFunID_ProtoFunID_MIN = stReqUnlockedSprite_ProtoFunID_FunID;
const stReqUnlockedSprite_ProtoFunID stReqUnlockedSprite_ProtoFunID_ProtoFunID_MAX = stReqUnlockedSprite_ProtoFunID_FunID;
const int stReqUnlockedSprite_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqUnlockedSprite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUnlockedSprite_ProtoFunID_descriptor();
inline const ::std::string& stReqUnlockedSprite_ProtoFunID_Name(stReqUnlockedSprite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUnlockedSprite_ProtoFunID_descriptor(), value);
}
inline bool stReqUnlockedSprite_ProtoFunID_Parse(
    const ::std::string& name, stReqUnlockedSprite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUnlockedSprite_ProtoFunID>(
    stReqUnlockedSprite_ProtoFunID_descriptor(), name, value);
}
enum stUnlockedSpriteResult_eResult {
  stUnlockedSpriteResult_eResult_eLevel_Not_Meet = 1,
  stUnlockedSpriteResult_eResult_eVipLv_Not_Meet = 2,
  stUnlockedSpriteResult_eResult_eInner_Error = 33,
  stUnlockedSpriteResult_eResult_eSuccess = 4
};
bool stUnlockedSpriteResult_eResult_IsValid(int value);
const stUnlockedSpriteResult_eResult stUnlockedSpriteResult_eResult_eResult_MIN = stUnlockedSpriteResult_eResult_eLevel_Not_Meet;
const stUnlockedSpriteResult_eResult stUnlockedSpriteResult_eResult_eResult_MAX = stUnlockedSpriteResult_eResult_eInner_Error;
const int stUnlockedSpriteResult_eResult_eResult_ARRAYSIZE = stUnlockedSpriteResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnlockedSpriteResult_eResult_descriptor();
inline const ::std::string& stUnlockedSpriteResult_eResult_Name(stUnlockedSpriteResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnlockedSpriteResult_eResult_descriptor(), value);
}
inline bool stUnlockedSpriteResult_eResult_Parse(
    const ::std::string& name, stUnlockedSpriteResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnlockedSpriteResult_eResult>(
    stUnlockedSpriteResult_eResult_descriptor(), name, value);
}
enum stUnlockedSpriteResult_ProtoModID {
  stUnlockedSpriteResult_ProtoModID_ModID = 8
};
bool stUnlockedSpriteResult_ProtoModID_IsValid(int value);
const stUnlockedSpriteResult_ProtoModID stUnlockedSpriteResult_ProtoModID_ProtoModID_MIN = stUnlockedSpriteResult_ProtoModID_ModID;
const stUnlockedSpriteResult_ProtoModID stUnlockedSpriteResult_ProtoModID_ProtoModID_MAX = stUnlockedSpriteResult_ProtoModID_ModID;
const int stUnlockedSpriteResult_ProtoModID_ProtoModID_ARRAYSIZE = stUnlockedSpriteResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnlockedSpriteResult_ProtoModID_descriptor();
inline const ::std::string& stUnlockedSpriteResult_ProtoModID_Name(stUnlockedSpriteResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnlockedSpriteResult_ProtoModID_descriptor(), value);
}
inline bool stUnlockedSpriteResult_ProtoModID_Parse(
    const ::std::string& name, stUnlockedSpriteResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnlockedSpriteResult_ProtoModID>(
    stUnlockedSpriteResult_ProtoModID_descriptor(), name, value);
}
enum stUnlockedSpriteResult_ProtoFunID {
  stUnlockedSpriteResult_ProtoFunID_FunID = 50
};
bool stUnlockedSpriteResult_ProtoFunID_IsValid(int value);
const stUnlockedSpriteResult_ProtoFunID stUnlockedSpriteResult_ProtoFunID_ProtoFunID_MIN = stUnlockedSpriteResult_ProtoFunID_FunID;
const stUnlockedSpriteResult_ProtoFunID stUnlockedSpriteResult_ProtoFunID_ProtoFunID_MAX = stUnlockedSpriteResult_ProtoFunID_FunID;
const int stUnlockedSpriteResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stUnlockedSpriteResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnlockedSpriteResult_ProtoFunID_descriptor();
inline const ::std::string& stUnlockedSpriteResult_ProtoFunID_Name(stUnlockedSpriteResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnlockedSpriteResult_ProtoFunID_descriptor(), value);
}
inline bool stUnlockedSpriteResult_ProtoFunID_Parse(
    const ::std::string& name, stUnlockedSpriteResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnlockedSpriteResult_ProtoFunID>(
    stUnlockedSpriteResult_ProtoFunID_descriptor(), name, value);
}
enum stAddSprite_ProtoModID {
  stAddSprite_ProtoModID_ModID = 8
};
bool stAddSprite_ProtoModID_IsValid(int value);
const stAddSprite_ProtoModID stAddSprite_ProtoModID_ProtoModID_MIN = stAddSprite_ProtoModID_ModID;
const stAddSprite_ProtoModID stAddSprite_ProtoModID_ProtoModID_MAX = stAddSprite_ProtoModID_ModID;
const int stAddSprite_ProtoModID_ProtoModID_ARRAYSIZE = stAddSprite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddSprite_ProtoModID_descriptor();
inline const ::std::string& stAddSprite_ProtoModID_Name(stAddSprite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddSprite_ProtoModID_descriptor(), value);
}
inline bool stAddSprite_ProtoModID_Parse(
    const ::std::string& name, stAddSprite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddSprite_ProtoModID>(
    stAddSprite_ProtoModID_descriptor(), name, value);
}
enum stAddSprite_ProtoFunID {
  stAddSprite_ProtoFunID_FunID = 51
};
bool stAddSprite_ProtoFunID_IsValid(int value);
const stAddSprite_ProtoFunID stAddSprite_ProtoFunID_ProtoFunID_MIN = stAddSprite_ProtoFunID_FunID;
const stAddSprite_ProtoFunID stAddSprite_ProtoFunID_ProtoFunID_MAX = stAddSprite_ProtoFunID_FunID;
const int stAddSprite_ProtoFunID_ProtoFunID_ARRAYSIZE = stAddSprite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddSprite_ProtoFunID_descriptor();
inline const ::std::string& stAddSprite_ProtoFunID_Name(stAddSprite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddSprite_ProtoFunID_descriptor(), value);
}
inline bool stAddSprite_ProtoFunID_Parse(
    const ::std::string& name, stAddSprite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddSprite_ProtoFunID>(
    stAddSprite_ProtoFunID_descriptor(), name, value);
}
enum stReqLevelupSprite_ProtoModID {
  stReqLevelupSprite_ProtoModID_ModID = 8
};
bool stReqLevelupSprite_ProtoModID_IsValid(int value);
const stReqLevelupSprite_ProtoModID stReqLevelupSprite_ProtoModID_ProtoModID_MIN = stReqLevelupSprite_ProtoModID_ModID;
const stReqLevelupSprite_ProtoModID stReqLevelupSprite_ProtoModID_ProtoModID_MAX = stReqLevelupSprite_ProtoModID_ModID;
const int stReqLevelupSprite_ProtoModID_ProtoModID_ARRAYSIZE = stReqLevelupSprite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLevelupSprite_ProtoModID_descriptor();
inline const ::std::string& stReqLevelupSprite_ProtoModID_Name(stReqLevelupSprite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLevelupSprite_ProtoModID_descriptor(), value);
}
inline bool stReqLevelupSprite_ProtoModID_Parse(
    const ::std::string& name, stReqLevelupSprite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLevelupSprite_ProtoModID>(
    stReqLevelupSprite_ProtoModID_descriptor(), name, value);
}
enum stReqLevelupSprite_ProtoFunID {
  stReqLevelupSprite_ProtoFunID_FunID = 52
};
bool stReqLevelupSprite_ProtoFunID_IsValid(int value);
const stReqLevelupSprite_ProtoFunID stReqLevelupSprite_ProtoFunID_ProtoFunID_MIN = stReqLevelupSprite_ProtoFunID_FunID;
const stReqLevelupSprite_ProtoFunID stReqLevelupSprite_ProtoFunID_ProtoFunID_MAX = stReqLevelupSprite_ProtoFunID_FunID;
const int stReqLevelupSprite_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLevelupSprite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLevelupSprite_ProtoFunID_descriptor();
inline const ::std::string& stReqLevelupSprite_ProtoFunID_Name(stReqLevelupSprite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLevelupSprite_ProtoFunID_descriptor(), value);
}
inline bool stReqLevelupSprite_ProtoFunID_Parse(
    const ::std::string& name, stReqLevelupSprite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLevelupSprite_ProtoFunID>(
    stReqLevelupSprite_ProtoFunID_descriptor(), name, value);
}
enum stLevelupSpriteResult_eResult {
  stLevelupSpriteResult_eResult_eSuccess = 1,
  stLevelupSpriteResult_eResult_eInner_Error = 2,
  stLevelupSpriteResult_eResult_eConsume_Res_Not_Enough = 3,
  stLevelupSpriteResult_eResult_eRole_Level_Limit = 4,
  stLevelupSpriteResult_eResult_eHas_Not_Unlocked = 5,
  stLevelupSpriteResult_eResult_eLevel_Full = 6,
  stLevelupSpriteResult_eResult_eSprite_Not_Exist = 7
};
bool stLevelupSpriteResult_eResult_IsValid(int value);
const stLevelupSpriteResult_eResult stLevelupSpriteResult_eResult_eResult_MIN = stLevelupSpriteResult_eResult_eSuccess;
const stLevelupSpriteResult_eResult stLevelupSpriteResult_eResult_eResult_MAX = stLevelupSpriteResult_eResult_eSprite_Not_Exist;
const int stLevelupSpriteResult_eResult_eResult_ARRAYSIZE = stLevelupSpriteResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelupSpriteResult_eResult_descriptor();
inline const ::std::string& stLevelupSpriteResult_eResult_Name(stLevelupSpriteResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelupSpriteResult_eResult_descriptor(), value);
}
inline bool stLevelupSpriteResult_eResult_Parse(
    const ::std::string& name, stLevelupSpriteResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelupSpriteResult_eResult>(
    stLevelupSpriteResult_eResult_descriptor(), name, value);
}
enum stLevelupSpriteResult_ProtoModID {
  stLevelupSpriteResult_ProtoModID_ModID = 8
};
bool stLevelupSpriteResult_ProtoModID_IsValid(int value);
const stLevelupSpriteResult_ProtoModID stLevelupSpriteResult_ProtoModID_ProtoModID_MIN = stLevelupSpriteResult_ProtoModID_ModID;
const stLevelupSpriteResult_ProtoModID stLevelupSpriteResult_ProtoModID_ProtoModID_MAX = stLevelupSpriteResult_ProtoModID_ModID;
const int stLevelupSpriteResult_ProtoModID_ProtoModID_ARRAYSIZE = stLevelupSpriteResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelupSpriteResult_ProtoModID_descriptor();
inline const ::std::string& stLevelupSpriteResult_ProtoModID_Name(stLevelupSpriteResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelupSpriteResult_ProtoModID_descriptor(), value);
}
inline bool stLevelupSpriteResult_ProtoModID_Parse(
    const ::std::string& name, stLevelupSpriteResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelupSpriteResult_ProtoModID>(
    stLevelupSpriteResult_ProtoModID_descriptor(), name, value);
}
enum stLevelupSpriteResult_ProtoFunID {
  stLevelupSpriteResult_ProtoFunID_FunID = 53
};
bool stLevelupSpriteResult_ProtoFunID_IsValid(int value);
const stLevelupSpriteResult_ProtoFunID stLevelupSpriteResult_ProtoFunID_ProtoFunID_MIN = stLevelupSpriteResult_ProtoFunID_FunID;
const stLevelupSpriteResult_ProtoFunID stLevelupSpriteResult_ProtoFunID_ProtoFunID_MAX = stLevelupSpriteResult_ProtoFunID_FunID;
const int stLevelupSpriteResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stLevelupSpriteResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelupSpriteResult_ProtoFunID_descriptor();
inline const ::std::string& stLevelupSpriteResult_ProtoFunID_Name(stLevelupSpriteResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelupSpriteResult_ProtoFunID_descriptor(), value);
}
inline bool stLevelupSpriteResult_ProtoFunID_Parse(
    const ::std::string& name, stLevelupSpriteResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelupSpriteResult_ProtoFunID>(
    stLevelupSpriteResult_ProtoFunID_descriptor(), name, value);
}
enum stSpriteFollowMaster_ProtoModID {
  stSpriteFollowMaster_ProtoModID_ModID = 8
};
bool stSpriteFollowMaster_ProtoModID_IsValid(int value);
const stSpriteFollowMaster_ProtoModID stSpriteFollowMaster_ProtoModID_ProtoModID_MIN = stSpriteFollowMaster_ProtoModID_ModID;
const stSpriteFollowMaster_ProtoModID stSpriteFollowMaster_ProtoModID_ProtoModID_MAX = stSpriteFollowMaster_ProtoModID_ModID;
const int stSpriteFollowMaster_ProtoModID_ProtoModID_ARRAYSIZE = stSpriteFollowMaster_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSpriteFollowMaster_ProtoModID_descriptor();
inline const ::std::string& stSpriteFollowMaster_ProtoModID_Name(stSpriteFollowMaster_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSpriteFollowMaster_ProtoModID_descriptor(), value);
}
inline bool stSpriteFollowMaster_ProtoModID_Parse(
    const ::std::string& name, stSpriteFollowMaster_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSpriteFollowMaster_ProtoModID>(
    stSpriteFollowMaster_ProtoModID_descriptor(), name, value);
}
enum stSpriteFollowMaster_ProtoFunID {
  stSpriteFollowMaster_ProtoFunID_FunID = 54
};
bool stSpriteFollowMaster_ProtoFunID_IsValid(int value);
const stSpriteFollowMaster_ProtoFunID stSpriteFollowMaster_ProtoFunID_ProtoFunID_MIN = stSpriteFollowMaster_ProtoFunID_FunID;
const stSpriteFollowMaster_ProtoFunID stSpriteFollowMaster_ProtoFunID_ProtoFunID_MAX = stSpriteFollowMaster_ProtoFunID_FunID;
const int stSpriteFollowMaster_ProtoFunID_ProtoFunID_ARRAYSIZE = stSpriteFollowMaster_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSpriteFollowMaster_ProtoFunID_descriptor();
inline const ::std::string& stSpriteFollowMaster_ProtoFunID_Name(stSpriteFollowMaster_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSpriteFollowMaster_ProtoFunID_descriptor(), value);
}
inline bool stSpriteFollowMaster_ProtoFunID_Parse(
    const ::std::string& name, stSpriteFollowMaster_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSpriteFollowMaster_ProtoFunID>(
    stSpriteFollowMaster_ProtoFunID_descriptor(), name, value);
}
enum stSpriteFollowMasterResult_eResult {
  stSpriteFollowMasterResult_eResult_eSucess = 1,
  stSpriteFollowMasterResult_eResult_eFail = 2
};
bool stSpriteFollowMasterResult_eResult_IsValid(int value);
const stSpriteFollowMasterResult_eResult stSpriteFollowMasterResult_eResult_eResult_MIN = stSpriteFollowMasterResult_eResult_eSucess;
const stSpriteFollowMasterResult_eResult stSpriteFollowMasterResult_eResult_eResult_MAX = stSpriteFollowMasterResult_eResult_eFail;
const int stSpriteFollowMasterResult_eResult_eResult_ARRAYSIZE = stSpriteFollowMasterResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSpriteFollowMasterResult_eResult_descriptor();
inline const ::std::string& stSpriteFollowMasterResult_eResult_Name(stSpriteFollowMasterResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSpriteFollowMasterResult_eResult_descriptor(), value);
}
inline bool stSpriteFollowMasterResult_eResult_Parse(
    const ::std::string& name, stSpriteFollowMasterResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSpriteFollowMasterResult_eResult>(
    stSpriteFollowMasterResult_eResult_descriptor(), name, value);
}
enum stSpriteFollowMasterResult_ProtoModID {
  stSpriteFollowMasterResult_ProtoModID_ModID = 8
};
bool stSpriteFollowMasterResult_ProtoModID_IsValid(int value);
const stSpriteFollowMasterResult_ProtoModID stSpriteFollowMasterResult_ProtoModID_ProtoModID_MIN = stSpriteFollowMasterResult_ProtoModID_ModID;
const stSpriteFollowMasterResult_ProtoModID stSpriteFollowMasterResult_ProtoModID_ProtoModID_MAX = stSpriteFollowMasterResult_ProtoModID_ModID;
const int stSpriteFollowMasterResult_ProtoModID_ProtoModID_ARRAYSIZE = stSpriteFollowMasterResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSpriteFollowMasterResult_ProtoModID_descriptor();
inline const ::std::string& stSpriteFollowMasterResult_ProtoModID_Name(stSpriteFollowMasterResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSpriteFollowMasterResult_ProtoModID_descriptor(), value);
}
inline bool stSpriteFollowMasterResult_ProtoModID_Parse(
    const ::std::string& name, stSpriteFollowMasterResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSpriteFollowMasterResult_ProtoModID>(
    stSpriteFollowMasterResult_ProtoModID_descriptor(), name, value);
}
enum stSpriteFollowMasterResult_ProtoFunID {
  stSpriteFollowMasterResult_ProtoFunID_FunID = 55
};
bool stSpriteFollowMasterResult_ProtoFunID_IsValid(int value);
const stSpriteFollowMasterResult_ProtoFunID stSpriteFollowMasterResult_ProtoFunID_ProtoFunID_MIN = stSpriteFollowMasterResult_ProtoFunID_FunID;
const stSpriteFollowMasterResult_ProtoFunID stSpriteFollowMasterResult_ProtoFunID_ProtoFunID_MAX = stSpriteFollowMasterResult_ProtoFunID_FunID;
const int stSpriteFollowMasterResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSpriteFollowMasterResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSpriteFollowMasterResult_ProtoFunID_descriptor();
inline const ::std::string& stSpriteFollowMasterResult_ProtoFunID_Name(stSpriteFollowMasterResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSpriteFollowMasterResult_ProtoFunID_descriptor(), value);
}
inline bool stSpriteFollowMasterResult_ProtoFunID_Parse(
    const ::std::string& name, stSpriteFollowMasterResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSpriteFollowMasterResult_ProtoFunID>(
    stSpriteFollowMasterResult_ProtoFunID_descriptor(), name, value);
}
enum stReqAvaibleActivity_ProtoModID {
  stReqAvaibleActivity_ProtoModID_ModID = 8
};
bool stReqAvaibleActivity_ProtoModID_IsValid(int value);
const stReqAvaibleActivity_ProtoModID stReqAvaibleActivity_ProtoModID_ProtoModID_MIN = stReqAvaibleActivity_ProtoModID_ModID;
const stReqAvaibleActivity_ProtoModID stReqAvaibleActivity_ProtoModID_ProtoModID_MAX = stReqAvaibleActivity_ProtoModID_ModID;
const int stReqAvaibleActivity_ProtoModID_ProtoModID_ARRAYSIZE = stReqAvaibleActivity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAvaibleActivity_ProtoModID_descriptor();
inline const ::std::string& stReqAvaibleActivity_ProtoModID_Name(stReqAvaibleActivity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAvaibleActivity_ProtoModID_descriptor(), value);
}
inline bool stReqAvaibleActivity_ProtoModID_Parse(
    const ::std::string& name, stReqAvaibleActivity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAvaibleActivity_ProtoModID>(
    stReqAvaibleActivity_ProtoModID_descriptor(), name, value);
}
enum stReqAvaibleActivity_ProtoFunID {
  stReqAvaibleActivity_ProtoFunID_FunID = 56
};
bool stReqAvaibleActivity_ProtoFunID_IsValid(int value);
const stReqAvaibleActivity_ProtoFunID stReqAvaibleActivity_ProtoFunID_ProtoFunID_MIN = stReqAvaibleActivity_ProtoFunID_FunID;
const stReqAvaibleActivity_ProtoFunID stReqAvaibleActivity_ProtoFunID_ProtoFunID_MAX = stReqAvaibleActivity_ProtoFunID_FunID;
const int stReqAvaibleActivity_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAvaibleActivity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAvaibleActivity_ProtoFunID_descriptor();
inline const ::std::string& stReqAvaibleActivity_ProtoFunID_Name(stReqAvaibleActivity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAvaibleActivity_ProtoFunID_descriptor(), value);
}
inline bool stReqAvaibleActivity_ProtoFunID_Parse(
    const ::std::string& name, stReqAvaibleActivity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAvaibleActivity_ProtoFunID>(
    stReqAvaibleActivity_ProtoFunID_descriptor(), name, value);
}
enum stRetAvaibleActivity_ProtoModID {
  stRetAvaibleActivity_ProtoModID_ModID = 8
};
bool stRetAvaibleActivity_ProtoModID_IsValid(int value);
const stRetAvaibleActivity_ProtoModID stRetAvaibleActivity_ProtoModID_ProtoModID_MIN = stRetAvaibleActivity_ProtoModID_ModID;
const stRetAvaibleActivity_ProtoModID stRetAvaibleActivity_ProtoModID_ProtoModID_MAX = stRetAvaibleActivity_ProtoModID_ModID;
const int stRetAvaibleActivity_ProtoModID_ProtoModID_ARRAYSIZE = stRetAvaibleActivity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetAvaibleActivity_ProtoModID_descriptor();
inline const ::std::string& stRetAvaibleActivity_ProtoModID_Name(stRetAvaibleActivity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetAvaibleActivity_ProtoModID_descriptor(), value);
}
inline bool stRetAvaibleActivity_ProtoModID_Parse(
    const ::std::string& name, stRetAvaibleActivity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetAvaibleActivity_ProtoModID>(
    stRetAvaibleActivity_ProtoModID_descriptor(), name, value);
}
enum stRetAvaibleActivity_ProtoFunID {
  stRetAvaibleActivity_ProtoFunID_FunID = 57
};
bool stRetAvaibleActivity_ProtoFunID_IsValid(int value);
const stRetAvaibleActivity_ProtoFunID stRetAvaibleActivity_ProtoFunID_ProtoFunID_MIN = stRetAvaibleActivity_ProtoFunID_FunID;
const stRetAvaibleActivity_ProtoFunID stRetAvaibleActivity_ProtoFunID_ProtoFunID_MAX = stRetAvaibleActivity_ProtoFunID_FunID;
const int stRetAvaibleActivity_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetAvaibleActivity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetAvaibleActivity_ProtoFunID_descriptor();
inline const ::std::string& stRetAvaibleActivity_ProtoFunID_Name(stRetAvaibleActivity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetAvaibleActivity_ProtoFunID_descriptor(), value);
}
inline bool stRetAvaibleActivity_ProtoFunID_Parse(
    const ::std::string& name, stRetAvaibleActivity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetAvaibleActivity_ProtoFunID>(
    stRetAvaibleActivity_ProtoFunID_descriptor(), name, value);
}
enum stReqAcitivityReward_ProtoModID {
  stReqAcitivityReward_ProtoModID_ModID = 8
};
bool stReqAcitivityReward_ProtoModID_IsValid(int value);
const stReqAcitivityReward_ProtoModID stReqAcitivityReward_ProtoModID_ProtoModID_MIN = stReqAcitivityReward_ProtoModID_ModID;
const stReqAcitivityReward_ProtoModID stReqAcitivityReward_ProtoModID_ProtoModID_MAX = stReqAcitivityReward_ProtoModID_ModID;
const int stReqAcitivityReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqAcitivityReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAcitivityReward_ProtoModID_descriptor();
inline const ::std::string& stReqAcitivityReward_ProtoModID_Name(stReqAcitivityReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAcitivityReward_ProtoModID_descriptor(), value);
}
inline bool stReqAcitivityReward_ProtoModID_Parse(
    const ::std::string& name, stReqAcitivityReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAcitivityReward_ProtoModID>(
    stReqAcitivityReward_ProtoModID_descriptor(), name, value);
}
enum stReqAcitivityReward_ProtoFunID {
  stReqAcitivityReward_ProtoFunID_FunID = 58
};
bool stReqAcitivityReward_ProtoFunID_IsValid(int value);
const stReqAcitivityReward_ProtoFunID stReqAcitivityReward_ProtoFunID_ProtoFunID_MIN = stReqAcitivityReward_ProtoFunID_FunID;
const stReqAcitivityReward_ProtoFunID stReqAcitivityReward_ProtoFunID_ProtoFunID_MAX = stReqAcitivityReward_ProtoFunID_FunID;
const int stReqAcitivityReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAcitivityReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAcitivityReward_ProtoFunID_descriptor();
inline const ::std::string& stReqAcitivityReward_ProtoFunID_Name(stReqAcitivityReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAcitivityReward_ProtoFunID_descriptor(), value);
}
inline bool stReqAcitivityReward_ProtoFunID_Parse(
    const ::std::string& name, stReqAcitivityReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAcitivityReward_ProtoFunID>(
    stReqAcitivityReward_ProtoFunID_descriptor(), name, value);
}
enum stActivityRewardResult_eResult {
  stActivityRewardResult_eResult_eSuccess = 1,
  stActivityRewardResult_eResult_eHas_Got_Reward = 2,
  stActivityRewardResult_eResult_eCond_Not_Meet = 3,
  stActivityRewardResult_eResult_eSelect_Not_Exist = 4,
  stActivityRewardResult_eResult_eBag_Full = 5
};
bool stActivityRewardResult_eResult_IsValid(int value);
const stActivityRewardResult_eResult stActivityRewardResult_eResult_eResult_MIN = stActivityRewardResult_eResult_eSuccess;
const stActivityRewardResult_eResult stActivityRewardResult_eResult_eResult_MAX = stActivityRewardResult_eResult_eBag_Full;
const int stActivityRewardResult_eResult_eResult_ARRAYSIZE = stActivityRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stActivityRewardResult_eResult_descriptor();
inline const ::std::string& stActivityRewardResult_eResult_Name(stActivityRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stActivityRewardResult_eResult_descriptor(), value);
}
inline bool stActivityRewardResult_eResult_Parse(
    const ::std::string& name, stActivityRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stActivityRewardResult_eResult>(
    stActivityRewardResult_eResult_descriptor(), name, value);
}
enum stActivityRewardResult_ProtoModID {
  stActivityRewardResult_ProtoModID_ModID = 8
};
bool stActivityRewardResult_ProtoModID_IsValid(int value);
const stActivityRewardResult_ProtoModID stActivityRewardResult_ProtoModID_ProtoModID_MIN = stActivityRewardResult_ProtoModID_ModID;
const stActivityRewardResult_ProtoModID stActivityRewardResult_ProtoModID_ProtoModID_MAX = stActivityRewardResult_ProtoModID_ModID;
const int stActivityRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stActivityRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stActivityRewardResult_ProtoModID_descriptor();
inline const ::std::string& stActivityRewardResult_ProtoModID_Name(stActivityRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stActivityRewardResult_ProtoModID_descriptor(), value);
}
inline bool stActivityRewardResult_ProtoModID_Parse(
    const ::std::string& name, stActivityRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stActivityRewardResult_ProtoModID>(
    stActivityRewardResult_ProtoModID_descriptor(), name, value);
}
enum stActivityRewardResult_ProtoFunID {
  stActivityRewardResult_ProtoFunID_FunID = 59
};
bool stActivityRewardResult_ProtoFunID_IsValid(int value);
const stActivityRewardResult_ProtoFunID stActivityRewardResult_ProtoFunID_ProtoFunID_MIN = stActivityRewardResult_ProtoFunID_FunID;
const stActivityRewardResult_ProtoFunID stActivityRewardResult_ProtoFunID_ProtoFunID_MAX = stActivityRewardResult_ProtoFunID_FunID;
const int stActivityRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stActivityRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stActivityRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stActivityRewardResult_ProtoFunID_Name(stActivityRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stActivityRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stActivityRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stActivityRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stActivityRewardResult_ProtoFunID>(
    stActivityRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqWorldBossDamageRank_ProtoModID {
  stReqWorldBossDamageRank_ProtoModID_ModID = 8
};
bool stReqWorldBossDamageRank_ProtoModID_IsValid(int value);
const stReqWorldBossDamageRank_ProtoModID stReqWorldBossDamageRank_ProtoModID_ProtoModID_MIN = stReqWorldBossDamageRank_ProtoModID_ModID;
const stReqWorldBossDamageRank_ProtoModID stReqWorldBossDamageRank_ProtoModID_ProtoModID_MAX = stReqWorldBossDamageRank_ProtoModID_ModID;
const int stReqWorldBossDamageRank_ProtoModID_ProtoModID_ARRAYSIZE = stReqWorldBossDamageRank_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqWorldBossDamageRank_ProtoModID_descriptor();
inline const ::std::string& stReqWorldBossDamageRank_ProtoModID_Name(stReqWorldBossDamageRank_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqWorldBossDamageRank_ProtoModID_descriptor(), value);
}
inline bool stReqWorldBossDamageRank_ProtoModID_Parse(
    const ::std::string& name, stReqWorldBossDamageRank_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqWorldBossDamageRank_ProtoModID>(
    stReqWorldBossDamageRank_ProtoModID_descriptor(), name, value);
}
enum stReqWorldBossDamageRank_ProtoFunID {
  stReqWorldBossDamageRank_ProtoFunID_FunID = 60
};
bool stReqWorldBossDamageRank_ProtoFunID_IsValid(int value);
const stReqWorldBossDamageRank_ProtoFunID stReqWorldBossDamageRank_ProtoFunID_ProtoFunID_MIN = stReqWorldBossDamageRank_ProtoFunID_FunID;
const stReqWorldBossDamageRank_ProtoFunID stReqWorldBossDamageRank_ProtoFunID_ProtoFunID_MAX = stReqWorldBossDamageRank_ProtoFunID_FunID;
const int stReqWorldBossDamageRank_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqWorldBossDamageRank_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqWorldBossDamageRank_ProtoFunID_descriptor();
inline const ::std::string& stReqWorldBossDamageRank_ProtoFunID_Name(stReqWorldBossDamageRank_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqWorldBossDamageRank_ProtoFunID_descriptor(), value);
}
inline bool stReqWorldBossDamageRank_ProtoFunID_Parse(
    const ::std::string& name, stReqWorldBossDamageRank_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqWorldBossDamageRank_ProtoFunID>(
    stReqWorldBossDamageRank_ProtoFunID_descriptor(), name, value);
}
enum stRetWorldBossDamageRank_ProtoModID {
  stRetWorldBossDamageRank_ProtoModID_ModID = 8
};
bool stRetWorldBossDamageRank_ProtoModID_IsValid(int value);
const stRetWorldBossDamageRank_ProtoModID stRetWorldBossDamageRank_ProtoModID_ProtoModID_MIN = stRetWorldBossDamageRank_ProtoModID_ModID;
const stRetWorldBossDamageRank_ProtoModID stRetWorldBossDamageRank_ProtoModID_ProtoModID_MAX = stRetWorldBossDamageRank_ProtoModID_ModID;
const int stRetWorldBossDamageRank_ProtoModID_ProtoModID_ARRAYSIZE = stRetWorldBossDamageRank_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetWorldBossDamageRank_ProtoModID_descriptor();
inline const ::std::string& stRetWorldBossDamageRank_ProtoModID_Name(stRetWorldBossDamageRank_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetWorldBossDamageRank_ProtoModID_descriptor(), value);
}
inline bool stRetWorldBossDamageRank_ProtoModID_Parse(
    const ::std::string& name, stRetWorldBossDamageRank_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetWorldBossDamageRank_ProtoModID>(
    stRetWorldBossDamageRank_ProtoModID_descriptor(), name, value);
}
enum stRetWorldBossDamageRank_ProtoFunID {
  stRetWorldBossDamageRank_ProtoFunID_FunID = 61
};
bool stRetWorldBossDamageRank_ProtoFunID_IsValid(int value);
const stRetWorldBossDamageRank_ProtoFunID stRetWorldBossDamageRank_ProtoFunID_ProtoFunID_MIN = stRetWorldBossDamageRank_ProtoFunID_FunID;
const stRetWorldBossDamageRank_ProtoFunID stRetWorldBossDamageRank_ProtoFunID_ProtoFunID_MAX = stRetWorldBossDamageRank_ProtoFunID_FunID;
const int stRetWorldBossDamageRank_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetWorldBossDamageRank_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetWorldBossDamageRank_ProtoFunID_descriptor();
inline const ::std::string& stRetWorldBossDamageRank_ProtoFunID_Name(stRetWorldBossDamageRank_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetWorldBossDamageRank_ProtoFunID_descriptor(), value);
}
inline bool stRetWorldBossDamageRank_ProtoFunID_Parse(
    const ::std::string& name, stRetWorldBossDamageRank_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetWorldBossDamageRank_ProtoFunID>(
    stRetWorldBossDamageRank_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenWorldBossWin_ProtoModID {
  stReqOpenWorldBossWin_ProtoModID_ModID = 8
};
bool stReqOpenWorldBossWin_ProtoModID_IsValid(int value);
const stReqOpenWorldBossWin_ProtoModID stReqOpenWorldBossWin_ProtoModID_ProtoModID_MIN = stReqOpenWorldBossWin_ProtoModID_ModID;
const stReqOpenWorldBossWin_ProtoModID stReqOpenWorldBossWin_ProtoModID_ProtoModID_MAX = stReqOpenWorldBossWin_ProtoModID_ModID;
const int stReqOpenWorldBossWin_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenWorldBossWin_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenWorldBossWin_ProtoModID_descriptor();
inline const ::std::string& stReqOpenWorldBossWin_ProtoModID_Name(stReqOpenWorldBossWin_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenWorldBossWin_ProtoModID_descriptor(), value);
}
inline bool stReqOpenWorldBossWin_ProtoModID_Parse(
    const ::std::string& name, stReqOpenWorldBossWin_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenWorldBossWin_ProtoModID>(
    stReqOpenWorldBossWin_ProtoModID_descriptor(), name, value);
}
enum stReqOpenWorldBossWin_ProtoFunID {
  stReqOpenWorldBossWin_ProtoFunID_FunID = 62
};
bool stReqOpenWorldBossWin_ProtoFunID_IsValid(int value);
const stReqOpenWorldBossWin_ProtoFunID stReqOpenWorldBossWin_ProtoFunID_ProtoFunID_MIN = stReqOpenWorldBossWin_ProtoFunID_FunID;
const stReqOpenWorldBossWin_ProtoFunID stReqOpenWorldBossWin_ProtoFunID_ProtoFunID_MAX = stReqOpenWorldBossWin_ProtoFunID_FunID;
const int stReqOpenWorldBossWin_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenWorldBossWin_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenWorldBossWin_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenWorldBossWin_ProtoFunID_Name(stReqOpenWorldBossWin_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenWorldBossWin_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenWorldBossWin_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenWorldBossWin_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenWorldBossWin_ProtoFunID>(
    stReqOpenWorldBossWin_ProtoFunID_descriptor(), name, value);
}
enum stRetOpenWorldBossWin_ProtoModID {
  stRetOpenWorldBossWin_ProtoModID_ModID = 8
};
bool stRetOpenWorldBossWin_ProtoModID_IsValid(int value);
const stRetOpenWorldBossWin_ProtoModID stRetOpenWorldBossWin_ProtoModID_ProtoModID_MIN = stRetOpenWorldBossWin_ProtoModID_ModID;
const stRetOpenWorldBossWin_ProtoModID stRetOpenWorldBossWin_ProtoModID_ProtoModID_MAX = stRetOpenWorldBossWin_ProtoModID_ModID;
const int stRetOpenWorldBossWin_ProtoModID_ProtoModID_ARRAYSIZE = stRetOpenWorldBossWin_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOpenWorldBossWin_ProtoModID_descriptor();
inline const ::std::string& stRetOpenWorldBossWin_ProtoModID_Name(stRetOpenWorldBossWin_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOpenWorldBossWin_ProtoModID_descriptor(), value);
}
inline bool stRetOpenWorldBossWin_ProtoModID_Parse(
    const ::std::string& name, stRetOpenWorldBossWin_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOpenWorldBossWin_ProtoModID>(
    stRetOpenWorldBossWin_ProtoModID_descriptor(), name, value);
}
enum stRetOpenWorldBossWin_ProtoFunID {
  stRetOpenWorldBossWin_ProtoFunID_FunID = 63
};
bool stRetOpenWorldBossWin_ProtoFunID_IsValid(int value);
const stRetOpenWorldBossWin_ProtoFunID stRetOpenWorldBossWin_ProtoFunID_ProtoFunID_MIN = stRetOpenWorldBossWin_ProtoFunID_FunID;
const stRetOpenWorldBossWin_ProtoFunID stRetOpenWorldBossWin_ProtoFunID_ProtoFunID_MAX = stRetOpenWorldBossWin_ProtoFunID_FunID;
const int stRetOpenWorldBossWin_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetOpenWorldBossWin_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOpenWorldBossWin_ProtoFunID_descriptor();
inline const ::std::string& stRetOpenWorldBossWin_ProtoFunID_Name(stRetOpenWorldBossWin_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOpenWorldBossWin_ProtoFunID_descriptor(), value);
}
inline bool stRetOpenWorldBossWin_ProtoFunID_Parse(
    const ::std::string& name, stRetOpenWorldBossWin_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOpenWorldBossWin_ProtoFunID>(
    stRetOpenWorldBossWin_ProtoFunID_descriptor(), name, value);
}
enum stReqBossWorldMatch_ProtoModID {
  stReqBossWorldMatch_ProtoModID_ModID = 8
};
bool stReqBossWorldMatch_ProtoModID_IsValid(int value);
const stReqBossWorldMatch_ProtoModID stReqBossWorldMatch_ProtoModID_ProtoModID_MIN = stReqBossWorldMatch_ProtoModID_ModID;
const stReqBossWorldMatch_ProtoModID stReqBossWorldMatch_ProtoModID_ProtoModID_MAX = stReqBossWorldMatch_ProtoModID_ModID;
const int stReqBossWorldMatch_ProtoModID_ProtoModID_ARRAYSIZE = stReqBossWorldMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBossWorldMatch_ProtoModID_descriptor();
inline const ::std::string& stReqBossWorldMatch_ProtoModID_Name(stReqBossWorldMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBossWorldMatch_ProtoModID_descriptor(), value);
}
inline bool stReqBossWorldMatch_ProtoModID_Parse(
    const ::std::string& name, stReqBossWorldMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBossWorldMatch_ProtoModID>(
    stReqBossWorldMatch_ProtoModID_descriptor(), name, value);
}
enum stReqBossWorldMatch_ProtoFunID {
  stReqBossWorldMatch_ProtoFunID_FunID = 64
};
bool stReqBossWorldMatch_ProtoFunID_IsValid(int value);
const stReqBossWorldMatch_ProtoFunID stReqBossWorldMatch_ProtoFunID_ProtoFunID_MIN = stReqBossWorldMatch_ProtoFunID_FunID;
const stReqBossWorldMatch_ProtoFunID stReqBossWorldMatch_ProtoFunID_ProtoFunID_MAX = stReqBossWorldMatch_ProtoFunID_FunID;
const int stReqBossWorldMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBossWorldMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBossWorldMatch_ProtoFunID_descriptor();
inline const ::std::string& stReqBossWorldMatch_ProtoFunID_Name(stReqBossWorldMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBossWorldMatch_ProtoFunID_descriptor(), value);
}
inline bool stReqBossWorldMatch_ProtoFunID_Parse(
    const ::std::string& name, stReqBossWorldMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBossWorldMatch_ProtoFunID>(
    stReqBossWorldMatch_ProtoFunID_descriptor(), name, value);
}
enum stRetBossWorldMatch_eResult {
  stRetBossWorldMatch_eResult_eSuccess = 1,
  stRetBossWorldMatch_eResult_eWait = 2,
  stRetBossWorldMatch_eResult_eNot_Open = 3,
  stRetBossWorldMatch_eResult_eActivity_End = 4,
  stRetBossWorldMatch_eResult_eLevel_Too_Low = 5,
  stRetBossWorldMatch_eResult_eBoss_Die = 6,
  stRetBossWorldMatch_eResult_eCool_Down = 7
};
bool stRetBossWorldMatch_eResult_IsValid(int value);
const stRetBossWorldMatch_eResult stRetBossWorldMatch_eResult_eResult_MIN = stRetBossWorldMatch_eResult_eSuccess;
const stRetBossWorldMatch_eResult stRetBossWorldMatch_eResult_eResult_MAX = stRetBossWorldMatch_eResult_eCool_Down;
const int stRetBossWorldMatch_eResult_eResult_ARRAYSIZE = stRetBossWorldMatch_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetBossWorldMatch_eResult_descriptor();
inline const ::std::string& stRetBossWorldMatch_eResult_Name(stRetBossWorldMatch_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetBossWorldMatch_eResult_descriptor(), value);
}
inline bool stRetBossWorldMatch_eResult_Parse(
    const ::std::string& name, stRetBossWorldMatch_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetBossWorldMatch_eResult>(
    stRetBossWorldMatch_eResult_descriptor(), name, value);
}
enum stRetBossWorldMatch_ProtoModID {
  stRetBossWorldMatch_ProtoModID_ModID = 8
};
bool stRetBossWorldMatch_ProtoModID_IsValid(int value);
const stRetBossWorldMatch_ProtoModID stRetBossWorldMatch_ProtoModID_ProtoModID_MIN = stRetBossWorldMatch_ProtoModID_ModID;
const stRetBossWorldMatch_ProtoModID stRetBossWorldMatch_ProtoModID_ProtoModID_MAX = stRetBossWorldMatch_ProtoModID_ModID;
const int stRetBossWorldMatch_ProtoModID_ProtoModID_ARRAYSIZE = stRetBossWorldMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetBossWorldMatch_ProtoModID_descriptor();
inline const ::std::string& stRetBossWorldMatch_ProtoModID_Name(stRetBossWorldMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetBossWorldMatch_ProtoModID_descriptor(), value);
}
inline bool stRetBossWorldMatch_ProtoModID_Parse(
    const ::std::string& name, stRetBossWorldMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetBossWorldMatch_ProtoModID>(
    stRetBossWorldMatch_ProtoModID_descriptor(), name, value);
}
enum stRetBossWorldMatch_ProtoFunID {
  stRetBossWorldMatch_ProtoFunID_FunID = 65
};
bool stRetBossWorldMatch_ProtoFunID_IsValid(int value);
const stRetBossWorldMatch_ProtoFunID stRetBossWorldMatch_ProtoFunID_ProtoFunID_MIN = stRetBossWorldMatch_ProtoFunID_FunID;
const stRetBossWorldMatch_ProtoFunID stRetBossWorldMatch_ProtoFunID_ProtoFunID_MAX = stRetBossWorldMatch_ProtoFunID_FunID;
const int stRetBossWorldMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetBossWorldMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetBossWorldMatch_ProtoFunID_descriptor();
inline const ::std::string& stRetBossWorldMatch_ProtoFunID_Name(stRetBossWorldMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetBossWorldMatch_ProtoFunID_descriptor(), value);
}
inline bool stRetBossWorldMatch_ProtoFunID_Parse(
    const ::std::string& name, stRetBossWorldMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetBossWorldMatch_ProtoFunID>(
    stRetBossWorldMatch_ProtoFunID_descriptor(), name, value);
}
enum stReqClearWorldBossActivityCD_ProtoModID {
  stReqClearWorldBossActivityCD_ProtoModID_ModID = 8
};
bool stReqClearWorldBossActivityCD_ProtoModID_IsValid(int value);
const stReqClearWorldBossActivityCD_ProtoModID stReqClearWorldBossActivityCD_ProtoModID_ProtoModID_MIN = stReqClearWorldBossActivityCD_ProtoModID_ModID;
const stReqClearWorldBossActivityCD_ProtoModID stReqClearWorldBossActivityCD_ProtoModID_ProtoModID_MAX = stReqClearWorldBossActivityCD_ProtoModID_ModID;
const int stReqClearWorldBossActivityCD_ProtoModID_ProtoModID_ARRAYSIZE = stReqClearWorldBossActivityCD_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqClearWorldBossActivityCD_ProtoModID_descriptor();
inline const ::std::string& stReqClearWorldBossActivityCD_ProtoModID_Name(stReqClearWorldBossActivityCD_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqClearWorldBossActivityCD_ProtoModID_descriptor(), value);
}
inline bool stReqClearWorldBossActivityCD_ProtoModID_Parse(
    const ::std::string& name, stReqClearWorldBossActivityCD_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqClearWorldBossActivityCD_ProtoModID>(
    stReqClearWorldBossActivityCD_ProtoModID_descriptor(), name, value);
}
enum stReqClearWorldBossActivityCD_ProtoFunID {
  stReqClearWorldBossActivityCD_ProtoFunID_FunID = 66
};
bool stReqClearWorldBossActivityCD_ProtoFunID_IsValid(int value);
const stReqClearWorldBossActivityCD_ProtoFunID stReqClearWorldBossActivityCD_ProtoFunID_ProtoFunID_MIN = stReqClearWorldBossActivityCD_ProtoFunID_FunID;
const stReqClearWorldBossActivityCD_ProtoFunID stReqClearWorldBossActivityCD_ProtoFunID_ProtoFunID_MAX = stReqClearWorldBossActivityCD_ProtoFunID_FunID;
const int stReqClearWorldBossActivityCD_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqClearWorldBossActivityCD_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqClearWorldBossActivityCD_ProtoFunID_descriptor();
inline const ::std::string& stReqClearWorldBossActivityCD_ProtoFunID_Name(stReqClearWorldBossActivityCD_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqClearWorldBossActivityCD_ProtoFunID_descriptor(), value);
}
inline bool stReqClearWorldBossActivityCD_ProtoFunID_Parse(
    const ::std::string& name, stReqClearWorldBossActivityCD_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqClearWorldBossActivityCD_ProtoFunID>(
    stReqClearWorldBossActivityCD_ProtoFunID_descriptor(), name, value);
}
enum stClearWorldBossActivityCDResult_eResult {
  stClearWorldBossActivityCDResult_eResult_eSuccess = 1,
  stClearWorldBossActivityCDResult_eResult_eDiamond_Not_Enough = 2
};
bool stClearWorldBossActivityCDResult_eResult_IsValid(int value);
const stClearWorldBossActivityCDResult_eResult stClearWorldBossActivityCDResult_eResult_eResult_MIN = stClearWorldBossActivityCDResult_eResult_eSuccess;
const stClearWorldBossActivityCDResult_eResult stClearWorldBossActivityCDResult_eResult_eResult_MAX = stClearWorldBossActivityCDResult_eResult_eDiamond_Not_Enough;
const int stClearWorldBossActivityCDResult_eResult_eResult_ARRAYSIZE = stClearWorldBossActivityCDResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stClearWorldBossActivityCDResult_eResult_descriptor();
inline const ::std::string& stClearWorldBossActivityCDResult_eResult_Name(stClearWorldBossActivityCDResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stClearWorldBossActivityCDResult_eResult_descriptor(), value);
}
inline bool stClearWorldBossActivityCDResult_eResult_Parse(
    const ::std::string& name, stClearWorldBossActivityCDResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stClearWorldBossActivityCDResult_eResult>(
    stClearWorldBossActivityCDResult_eResult_descriptor(), name, value);
}
enum stClearWorldBossActivityCDResult_ProtoModID {
  stClearWorldBossActivityCDResult_ProtoModID_ModID = 8
};
bool stClearWorldBossActivityCDResult_ProtoModID_IsValid(int value);
const stClearWorldBossActivityCDResult_ProtoModID stClearWorldBossActivityCDResult_ProtoModID_ProtoModID_MIN = stClearWorldBossActivityCDResult_ProtoModID_ModID;
const stClearWorldBossActivityCDResult_ProtoModID stClearWorldBossActivityCDResult_ProtoModID_ProtoModID_MAX = stClearWorldBossActivityCDResult_ProtoModID_ModID;
const int stClearWorldBossActivityCDResult_ProtoModID_ProtoModID_ARRAYSIZE = stClearWorldBossActivityCDResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stClearWorldBossActivityCDResult_ProtoModID_descriptor();
inline const ::std::string& stClearWorldBossActivityCDResult_ProtoModID_Name(stClearWorldBossActivityCDResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stClearWorldBossActivityCDResult_ProtoModID_descriptor(), value);
}
inline bool stClearWorldBossActivityCDResult_ProtoModID_Parse(
    const ::std::string& name, stClearWorldBossActivityCDResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stClearWorldBossActivityCDResult_ProtoModID>(
    stClearWorldBossActivityCDResult_ProtoModID_descriptor(), name, value);
}
enum stClearWorldBossActivityCDResult_ProtoFunID {
  stClearWorldBossActivityCDResult_ProtoFunID_FunID = 67
};
bool stClearWorldBossActivityCDResult_ProtoFunID_IsValid(int value);
const stClearWorldBossActivityCDResult_ProtoFunID stClearWorldBossActivityCDResult_ProtoFunID_ProtoFunID_MIN = stClearWorldBossActivityCDResult_ProtoFunID_FunID;
const stClearWorldBossActivityCDResult_ProtoFunID stClearWorldBossActivityCDResult_ProtoFunID_ProtoFunID_MAX = stClearWorldBossActivityCDResult_ProtoFunID_FunID;
const int stClearWorldBossActivityCDResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stClearWorldBossActivityCDResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stClearWorldBossActivityCDResult_ProtoFunID_descriptor();
inline const ::std::string& stClearWorldBossActivityCDResult_ProtoFunID_Name(stClearWorldBossActivityCDResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stClearWorldBossActivityCDResult_ProtoFunID_descriptor(), value);
}
inline bool stClearWorldBossActivityCDResult_ProtoFunID_Parse(
    const ::std::string& name, stClearWorldBossActivityCDResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stClearWorldBossActivityCDResult_ProtoFunID>(
    stClearWorldBossActivityCDResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRaiseDamageInWorldBoss_ProtoModID {
  stReqRaiseDamageInWorldBoss_ProtoModID_ModID = 8
};
bool stReqRaiseDamageInWorldBoss_ProtoModID_IsValid(int value);
const stReqRaiseDamageInWorldBoss_ProtoModID stReqRaiseDamageInWorldBoss_ProtoModID_ProtoModID_MIN = stReqRaiseDamageInWorldBoss_ProtoModID_ModID;
const stReqRaiseDamageInWorldBoss_ProtoModID stReqRaiseDamageInWorldBoss_ProtoModID_ProtoModID_MAX = stReqRaiseDamageInWorldBoss_ProtoModID_ModID;
const int stReqRaiseDamageInWorldBoss_ProtoModID_ProtoModID_ARRAYSIZE = stReqRaiseDamageInWorldBoss_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRaiseDamageInWorldBoss_ProtoModID_descriptor();
inline const ::std::string& stReqRaiseDamageInWorldBoss_ProtoModID_Name(stReqRaiseDamageInWorldBoss_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRaiseDamageInWorldBoss_ProtoModID_descriptor(), value);
}
inline bool stReqRaiseDamageInWorldBoss_ProtoModID_Parse(
    const ::std::string& name, stReqRaiseDamageInWorldBoss_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRaiseDamageInWorldBoss_ProtoModID>(
    stReqRaiseDamageInWorldBoss_ProtoModID_descriptor(), name, value);
}
enum stReqRaiseDamageInWorldBoss_ProtoFunID {
  stReqRaiseDamageInWorldBoss_ProtoFunID_FunID = 68
};
bool stReqRaiseDamageInWorldBoss_ProtoFunID_IsValid(int value);
const stReqRaiseDamageInWorldBoss_ProtoFunID stReqRaiseDamageInWorldBoss_ProtoFunID_ProtoFunID_MIN = stReqRaiseDamageInWorldBoss_ProtoFunID_FunID;
const stReqRaiseDamageInWorldBoss_ProtoFunID stReqRaiseDamageInWorldBoss_ProtoFunID_ProtoFunID_MAX = stReqRaiseDamageInWorldBoss_ProtoFunID_FunID;
const int stReqRaiseDamageInWorldBoss_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRaiseDamageInWorldBoss_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRaiseDamageInWorldBoss_ProtoFunID_descriptor();
inline const ::std::string& stReqRaiseDamageInWorldBoss_ProtoFunID_Name(stReqRaiseDamageInWorldBoss_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRaiseDamageInWorldBoss_ProtoFunID_descriptor(), value);
}
inline bool stReqRaiseDamageInWorldBoss_ProtoFunID_Parse(
    const ::std::string& name, stReqRaiseDamageInWorldBoss_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRaiseDamageInWorldBoss_ProtoFunID>(
    stReqRaiseDamageInWorldBoss_ProtoFunID_descriptor(), name, value);
}
enum stRaiseDamageInWorldBossResult_eResult {
  stRaiseDamageInWorldBossResult_eResult_eSuccess = 1,
  stRaiseDamageInWorldBossResult_eResult_eDaimond_Not_Enough = 2,
  stRaiseDamageInWorldBossResult_eResult_eTime_Out = 3
};
bool stRaiseDamageInWorldBossResult_eResult_IsValid(int value);
const stRaiseDamageInWorldBossResult_eResult stRaiseDamageInWorldBossResult_eResult_eResult_MIN = stRaiseDamageInWorldBossResult_eResult_eSuccess;
const stRaiseDamageInWorldBossResult_eResult stRaiseDamageInWorldBossResult_eResult_eResult_MAX = stRaiseDamageInWorldBossResult_eResult_eTime_Out;
const int stRaiseDamageInWorldBossResult_eResult_eResult_ARRAYSIZE = stRaiseDamageInWorldBossResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRaiseDamageInWorldBossResult_eResult_descriptor();
inline const ::std::string& stRaiseDamageInWorldBossResult_eResult_Name(stRaiseDamageInWorldBossResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRaiseDamageInWorldBossResult_eResult_descriptor(), value);
}
inline bool stRaiseDamageInWorldBossResult_eResult_Parse(
    const ::std::string& name, stRaiseDamageInWorldBossResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRaiseDamageInWorldBossResult_eResult>(
    stRaiseDamageInWorldBossResult_eResult_descriptor(), name, value);
}
enum stRaiseDamageInWorldBossResult_ProtoModID {
  stRaiseDamageInWorldBossResult_ProtoModID_ModID = 8
};
bool stRaiseDamageInWorldBossResult_ProtoModID_IsValid(int value);
const stRaiseDamageInWorldBossResult_ProtoModID stRaiseDamageInWorldBossResult_ProtoModID_ProtoModID_MIN = stRaiseDamageInWorldBossResult_ProtoModID_ModID;
const stRaiseDamageInWorldBossResult_ProtoModID stRaiseDamageInWorldBossResult_ProtoModID_ProtoModID_MAX = stRaiseDamageInWorldBossResult_ProtoModID_ModID;
const int stRaiseDamageInWorldBossResult_ProtoModID_ProtoModID_ARRAYSIZE = stRaiseDamageInWorldBossResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRaiseDamageInWorldBossResult_ProtoModID_descriptor();
inline const ::std::string& stRaiseDamageInWorldBossResult_ProtoModID_Name(stRaiseDamageInWorldBossResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRaiseDamageInWorldBossResult_ProtoModID_descriptor(), value);
}
inline bool stRaiseDamageInWorldBossResult_ProtoModID_Parse(
    const ::std::string& name, stRaiseDamageInWorldBossResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRaiseDamageInWorldBossResult_ProtoModID>(
    stRaiseDamageInWorldBossResult_ProtoModID_descriptor(), name, value);
}
enum stRaiseDamageInWorldBossResult_ProtoFunID {
  stRaiseDamageInWorldBossResult_ProtoFunID_FunID = 69
};
bool stRaiseDamageInWorldBossResult_ProtoFunID_IsValid(int value);
const stRaiseDamageInWorldBossResult_ProtoFunID stRaiseDamageInWorldBossResult_ProtoFunID_ProtoFunID_MIN = stRaiseDamageInWorldBossResult_ProtoFunID_FunID;
const stRaiseDamageInWorldBossResult_ProtoFunID stRaiseDamageInWorldBossResult_ProtoFunID_ProtoFunID_MAX = stRaiseDamageInWorldBossResult_ProtoFunID_FunID;
const int stRaiseDamageInWorldBossResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRaiseDamageInWorldBossResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRaiseDamageInWorldBossResult_ProtoFunID_descriptor();
inline const ::std::string& stRaiseDamageInWorldBossResult_ProtoFunID_Name(stRaiseDamageInWorldBossResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRaiseDamageInWorldBossResult_ProtoFunID_descriptor(), value);
}
inline bool stRaiseDamageInWorldBossResult_ProtoFunID_Parse(
    const ::std::string& name, stRaiseDamageInWorldBossResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRaiseDamageInWorldBossResult_ProtoFunID>(
    stRaiseDamageInWorldBossResult_ProtoFunID_descriptor(), name, value);
}
enum stCancelWorldBossMatch_ProtoModID {
  stCancelWorldBossMatch_ProtoModID_ModID = 8
};
bool stCancelWorldBossMatch_ProtoModID_IsValid(int value);
const stCancelWorldBossMatch_ProtoModID stCancelWorldBossMatch_ProtoModID_ProtoModID_MIN = stCancelWorldBossMatch_ProtoModID_ModID;
const stCancelWorldBossMatch_ProtoModID stCancelWorldBossMatch_ProtoModID_ProtoModID_MAX = stCancelWorldBossMatch_ProtoModID_ModID;
const int stCancelWorldBossMatch_ProtoModID_ProtoModID_ARRAYSIZE = stCancelWorldBossMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatch_ProtoModID_descriptor();
inline const ::std::string& stCancelWorldBossMatch_ProtoModID_Name(stCancelWorldBossMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelWorldBossMatch_ProtoModID_descriptor(), value);
}
inline bool stCancelWorldBossMatch_ProtoModID_Parse(
    const ::std::string& name, stCancelWorldBossMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelWorldBossMatch_ProtoModID>(
    stCancelWorldBossMatch_ProtoModID_descriptor(), name, value);
}
enum stCancelWorldBossMatch_ProtoFunID {
  stCancelWorldBossMatch_ProtoFunID_FunID = 70
};
bool stCancelWorldBossMatch_ProtoFunID_IsValid(int value);
const stCancelWorldBossMatch_ProtoFunID stCancelWorldBossMatch_ProtoFunID_ProtoFunID_MIN = stCancelWorldBossMatch_ProtoFunID_FunID;
const stCancelWorldBossMatch_ProtoFunID stCancelWorldBossMatch_ProtoFunID_ProtoFunID_MAX = stCancelWorldBossMatch_ProtoFunID_FunID;
const int stCancelWorldBossMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelWorldBossMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatch_ProtoFunID_descriptor();
inline const ::std::string& stCancelWorldBossMatch_ProtoFunID_Name(stCancelWorldBossMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelWorldBossMatch_ProtoFunID_descriptor(), value);
}
inline bool stCancelWorldBossMatch_ProtoFunID_Parse(
    const ::std::string& name, stCancelWorldBossMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelWorldBossMatch_ProtoFunID>(
    stCancelWorldBossMatch_ProtoFunID_descriptor(), name, value);
}
enum stCancelWorldBossMatchResult_eResult {
  stCancelWorldBossMatchResult_eResult_eSuccess = 1,
  stCancelWorldBossMatchResult_eResult_eFail = 2
};
bool stCancelWorldBossMatchResult_eResult_IsValid(int value);
const stCancelWorldBossMatchResult_eResult stCancelWorldBossMatchResult_eResult_eResult_MIN = stCancelWorldBossMatchResult_eResult_eSuccess;
const stCancelWorldBossMatchResult_eResult stCancelWorldBossMatchResult_eResult_eResult_MAX = stCancelWorldBossMatchResult_eResult_eFail;
const int stCancelWorldBossMatchResult_eResult_eResult_ARRAYSIZE = stCancelWorldBossMatchResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatchResult_eResult_descriptor();
inline const ::std::string& stCancelWorldBossMatchResult_eResult_Name(stCancelWorldBossMatchResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelWorldBossMatchResult_eResult_descriptor(), value);
}
inline bool stCancelWorldBossMatchResult_eResult_Parse(
    const ::std::string& name, stCancelWorldBossMatchResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelWorldBossMatchResult_eResult>(
    stCancelWorldBossMatchResult_eResult_descriptor(), name, value);
}
enum stCancelWorldBossMatchResult_ProtoModID {
  stCancelWorldBossMatchResult_ProtoModID_ModID = 8
};
bool stCancelWorldBossMatchResult_ProtoModID_IsValid(int value);
const stCancelWorldBossMatchResult_ProtoModID stCancelWorldBossMatchResult_ProtoModID_ProtoModID_MIN = stCancelWorldBossMatchResult_ProtoModID_ModID;
const stCancelWorldBossMatchResult_ProtoModID stCancelWorldBossMatchResult_ProtoModID_ProtoModID_MAX = stCancelWorldBossMatchResult_ProtoModID_ModID;
const int stCancelWorldBossMatchResult_ProtoModID_ProtoModID_ARRAYSIZE = stCancelWorldBossMatchResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatchResult_ProtoModID_descriptor();
inline const ::std::string& stCancelWorldBossMatchResult_ProtoModID_Name(stCancelWorldBossMatchResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelWorldBossMatchResult_ProtoModID_descriptor(), value);
}
inline bool stCancelWorldBossMatchResult_ProtoModID_Parse(
    const ::std::string& name, stCancelWorldBossMatchResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelWorldBossMatchResult_ProtoModID>(
    stCancelWorldBossMatchResult_ProtoModID_descriptor(), name, value);
}
enum stCancelWorldBossMatchResult_ProtoFunID {
  stCancelWorldBossMatchResult_ProtoFunID_FunID = 71
};
bool stCancelWorldBossMatchResult_ProtoFunID_IsValid(int value);
const stCancelWorldBossMatchResult_ProtoFunID stCancelWorldBossMatchResult_ProtoFunID_ProtoFunID_MIN = stCancelWorldBossMatchResult_ProtoFunID_FunID;
const stCancelWorldBossMatchResult_ProtoFunID stCancelWorldBossMatchResult_ProtoFunID_ProtoFunID_MAX = stCancelWorldBossMatchResult_ProtoFunID_FunID;
const int stCancelWorldBossMatchResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelWorldBossMatchResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatchResult_ProtoFunID_descriptor();
inline const ::std::string& stCancelWorldBossMatchResult_ProtoFunID_Name(stCancelWorldBossMatchResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelWorldBossMatchResult_ProtoFunID_descriptor(), value);
}
inline bool stCancelWorldBossMatchResult_ProtoFunID_Parse(
    const ::std::string& name, stCancelWorldBossMatchResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelWorldBossMatchResult_ProtoFunID>(
    stCancelWorldBossMatchResult_ProtoFunID_descriptor(), name, value);
}
enum stQueryDrawHeroActivity_ProtoModID {
  stQueryDrawHeroActivity_ProtoModID_ModID = 8
};
bool stQueryDrawHeroActivity_ProtoModID_IsValid(int value);
const stQueryDrawHeroActivity_ProtoModID stQueryDrawHeroActivity_ProtoModID_ProtoModID_MIN = stQueryDrawHeroActivity_ProtoModID_ModID;
const stQueryDrawHeroActivity_ProtoModID stQueryDrawHeroActivity_ProtoModID_ProtoModID_MAX = stQueryDrawHeroActivity_ProtoModID_ModID;
const int stQueryDrawHeroActivity_ProtoModID_ProtoModID_ARRAYSIZE = stQueryDrawHeroActivity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQueryDrawHeroActivity_ProtoModID_descriptor();
inline const ::std::string& stQueryDrawHeroActivity_ProtoModID_Name(stQueryDrawHeroActivity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQueryDrawHeroActivity_ProtoModID_descriptor(), value);
}
inline bool stQueryDrawHeroActivity_ProtoModID_Parse(
    const ::std::string& name, stQueryDrawHeroActivity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQueryDrawHeroActivity_ProtoModID>(
    stQueryDrawHeroActivity_ProtoModID_descriptor(), name, value);
}
enum stQueryDrawHeroActivity_ProtoFunID {
  stQueryDrawHeroActivity_ProtoFunID_FunID = 72
};
bool stQueryDrawHeroActivity_ProtoFunID_IsValid(int value);
const stQueryDrawHeroActivity_ProtoFunID stQueryDrawHeroActivity_ProtoFunID_ProtoFunID_MIN = stQueryDrawHeroActivity_ProtoFunID_FunID;
const stQueryDrawHeroActivity_ProtoFunID stQueryDrawHeroActivity_ProtoFunID_ProtoFunID_MAX = stQueryDrawHeroActivity_ProtoFunID_FunID;
const int stQueryDrawHeroActivity_ProtoFunID_ProtoFunID_ARRAYSIZE = stQueryDrawHeroActivity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQueryDrawHeroActivity_ProtoFunID_descriptor();
inline const ::std::string& stQueryDrawHeroActivity_ProtoFunID_Name(stQueryDrawHeroActivity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQueryDrawHeroActivity_ProtoFunID_descriptor(), value);
}
inline bool stQueryDrawHeroActivity_ProtoFunID_Parse(
    const ::std::string& name, stQueryDrawHeroActivity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQueryDrawHeroActivity_ProtoFunID>(
    stQueryDrawHeroActivity_ProtoFunID_descriptor(), name, value);
}
enum stRetDrawHeroActivityInfo_ProtoModID {
  stRetDrawHeroActivityInfo_ProtoModID_ModID = 8
};
bool stRetDrawHeroActivityInfo_ProtoModID_IsValid(int value);
const stRetDrawHeroActivityInfo_ProtoModID stRetDrawHeroActivityInfo_ProtoModID_ProtoModID_MIN = stRetDrawHeroActivityInfo_ProtoModID_ModID;
const stRetDrawHeroActivityInfo_ProtoModID stRetDrawHeroActivityInfo_ProtoModID_ProtoModID_MAX = stRetDrawHeroActivityInfo_ProtoModID_ModID;
const int stRetDrawHeroActivityInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetDrawHeroActivityInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawHeroActivityInfo_ProtoModID_descriptor();
inline const ::std::string& stRetDrawHeroActivityInfo_ProtoModID_Name(stRetDrawHeroActivityInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawHeroActivityInfo_ProtoModID_descriptor(), value);
}
inline bool stRetDrawHeroActivityInfo_ProtoModID_Parse(
    const ::std::string& name, stRetDrawHeroActivityInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawHeroActivityInfo_ProtoModID>(
    stRetDrawHeroActivityInfo_ProtoModID_descriptor(), name, value);
}
enum stRetDrawHeroActivityInfo_ProtoFunID {
  stRetDrawHeroActivityInfo_ProtoFunID_FunID = 73
};
bool stRetDrawHeroActivityInfo_ProtoFunID_IsValid(int value);
const stRetDrawHeroActivityInfo_ProtoFunID stRetDrawHeroActivityInfo_ProtoFunID_ProtoFunID_MIN = stRetDrawHeroActivityInfo_ProtoFunID_FunID;
const stRetDrawHeroActivityInfo_ProtoFunID stRetDrawHeroActivityInfo_ProtoFunID_ProtoFunID_MAX = stRetDrawHeroActivityInfo_ProtoFunID_FunID;
const int stRetDrawHeroActivityInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDrawHeroActivityInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawHeroActivityInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetDrawHeroActivityInfo_ProtoFunID_Name(stRetDrawHeroActivityInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawHeroActivityInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetDrawHeroActivityInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetDrawHeroActivityInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawHeroActivityInfo_ProtoFunID>(
    stRetDrawHeroActivityInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawHeroScoreReward_ProtoModID {
  stReqDrawHeroScoreReward_ProtoModID_ModID = 8
};
bool stReqDrawHeroScoreReward_ProtoModID_IsValid(int value);
const stReqDrawHeroScoreReward_ProtoModID stReqDrawHeroScoreReward_ProtoModID_ProtoModID_MIN = stReqDrawHeroScoreReward_ProtoModID_ModID;
const stReqDrawHeroScoreReward_ProtoModID stReqDrawHeroScoreReward_ProtoModID_ProtoModID_MAX = stReqDrawHeroScoreReward_ProtoModID_ModID;
const int stReqDrawHeroScoreReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawHeroScoreReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawHeroScoreReward_ProtoModID_descriptor();
inline const ::std::string& stReqDrawHeroScoreReward_ProtoModID_Name(stReqDrawHeroScoreReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawHeroScoreReward_ProtoModID_descriptor(), value);
}
inline bool stReqDrawHeroScoreReward_ProtoModID_Parse(
    const ::std::string& name, stReqDrawHeroScoreReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawHeroScoreReward_ProtoModID>(
    stReqDrawHeroScoreReward_ProtoModID_descriptor(), name, value);
}
enum stReqDrawHeroScoreReward_ProtoFunID {
  stReqDrawHeroScoreReward_ProtoFunID_FunID = 74
};
bool stReqDrawHeroScoreReward_ProtoFunID_IsValid(int value);
const stReqDrawHeroScoreReward_ProtoFunID stReqDrawHeroScoreReward_ProtoFunID_ProtoFunID_MIN = stReqDrawHeroScoreReward_ProtoFunID_FunID;
const stReqDrawHeroScoreReward_ProtoFunID stReqDrawHeroScoreReward_ProtoFunID_ProtoFunID_MAX = stReqDrawHeroScoreReward_ProtoFunID_FunID;
const int stReqDrawHeroScoreReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawHeroScoreReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawHeroScoreReward_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawHeroScoreReward_ProtoFunID_Name(stReqDrawHeroScoreReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawHeroScoreReward_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawHeroScoreReward_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawHeroScoreReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawHeroScoreReward_ProtoFunID>(
    stReqDrawHeroScoreReward_ProtoFunID_descriptor(), name, value);
}
enum stDrawHeroScoreRewardRet_eResult {
  stDrawHeroScoreRewardRet_eResult_eSuccess = 1,
  stDrawHeroScoreRewardRet_eResult_eScore_Not_Enough = 2,
  stDrawHeroScoreRewardRet_eResult_eHas_Got_Reward = 3,
  stDrawHeroScoreRewardRet_eResult_eInner_Error = 4,
  stDrawHeroScoreRewardRet_eResult_eBagFull = 5
};
bool stDrawHeroScoreRewardRet_eResult_IsValid(int value);
const stDrawHeroScoreRewardRet_eResult stDrawHeroScoreRewardRet_eResult_eResult_MIN = stDrawHeroScoreRewardRet_eResult_eSuccess;
const stDrawHeroScoreRewardRet_eResult stDrawHeroScoreRewardRet_eResult_eResult_MAX = stDrawHeroScoreRewardRet_eResult_eBagFull;
const int stDrawHeroScoreRewardRet_eResult_eResult_ARRAYSIZE = stDrawHeroScoreRewardRet_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawHeroScoreRewardRet_eResult_descriptor();
inline const ::std::string& stDrawHeroScoreRewardRet_eResult_Name(stDrawHeroScoreRewardRet_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawHeroScoreRewardRet_eResult_descriptor(), value);
}
inline bool stDrawHeroScoreRewardRet_eResult_Parse(
    const ::std::string& name, stDrawHeroScoreRewardRet_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawHeroScoreRewardRet_eResult>(
    stDrawHeroScoreRewardRet_eResult_descriptor(), name, value);
}
enum stDrawHeroScoreRewardRet_ProtoModID {
  stDrawHeroScoreRewardRet_ProtoModID_ModID = 8
};
bool stDrawHeroScoreRewardRet_ProtoModID_IsValid(int value);
const stDrawHeroScoreRewardRet_ProtoModID stDrawHeroScoreRewardRet_ProtoModID_ProtoModID_MIN = stDrawHeroScoreRewardRet_ProtoModID_ModID;
const stDrawHeroScoreRewardRet_ProtoModID stDrawHeroScoreRewardRet_ProtoModID_ProtoModID_MAX = stDrawHeroScoreRewardRet_ProtoModID_ModID;
const int stDrawHeroScoreRewardRet_ProtoModID_ProtoModID_ARRAYSIZE = stDrawHeroScoreRewardRet_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawHeroScoreRewardRet_ProtoModID_descriptor();
inline const ::std::string& stDrawHeroScoreRewardRet_ProtoModID_Name(stDrawHeroScoreRewardRet_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawHeroScoreRewardRet_ProtoModID_descriptor(), value);
}
inline bool stDrawHeroScoreRewardRet_ProtoModID_Parse(
    const ::std::string& name, stDrawHeroScoreRewardRet_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawHeroScoreRewardRet_ProtoModID>(
    stDrawHeroScoreRewardRet_ProtoModID_descriptor(), name, value);
}
enum stDrawHeroScoreRewardRet_ProtoFunID {
  stDrawHeroScoreRewardRet_ProtoFunID_FunID = 75
};
bool stDrawHeroScoreRewardRet_ProtoFunID_IsValid(int value);
const stDrawHeroScoreRewardRet_ProtoFunID stDrawHeroScoreRewardRet_ProtoFunID_ProtoFunID_MIN = stDrawHeroScoreRewardRet_ProtoFunID_FunID;
const stDrawHeroScoreRewardRet_ProtoFunID stDrawHeroScoreRewardRet_ProtoFunID_ProtoFunID_MAX = stDrawHeroScoreRewardRet_ProtoFunID_FunID;
const int stDrawHeroScoreRewardRet_ProtoFunID_ProtoFunID_ARRAYSIZE = stDrawHeroScoreRewardRet_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawHeroScoreRewardRet_ProtoFunID_descriptor();
inline const ::std::string& stDrawHeroScoreRewardRet_ProtoFunID_Name(stDrawHeroScoreRewardRet_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawHeroScoreRewardRet_ProtoFunID_descriptor(), value);
}
inline bool stDrawHeroScoreRewardRet_ProtoFunID_Parse(
    const ::std::string& name, stDrawHeroScoreRewardRet_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawHeroScoreRewardRet_ProtoFunID>(
    stDrawHeroScoreRewardRet_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawHeroRankReward_ProtoModID {
  stReqDrawHeroRankReward_ProtoModID_ModID = 8
};
bool stReqDrawHeroRankReward_ProtoModID_IsValid(int value);
const stReqDrawHeroRankReward_ProtoModID stReqDrawHeroRankReward_ProtoModID_ProtoModID_MIN = stReqDrawHeroRankReward_ProtoModID_ModID;
const stReqDrawHeroRankReward_ProtoModID stReqDrawHeroRankReward_ProtoModID_ProtoModID_MAX = stReqDrawHeroRankReward_ProtoModID_ModID;
const int stReqDrawHeroRankReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawHeroRankReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawHeroRankReward_ProtoModID_descriptor();
inline const ::std::string& stReqDrawHeroRankReward_ProtoModID_Name(stReqDrawHeroRankReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawHeroRankReward_ProtoModID_descriptor(), value);
}
inline bool stReqDrawHeroRankReward_ProtoModID_Parse(
    const ::std::string& name, stReqDrawHeroRankReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawHeroRankReward_ProtoModID>(
    stReqDrawHeroRankReward_ProtoModID_descriptor(), name, value);
}
enum stReqDrawHeroRankReward_ProtoFunID {
  stReqDrawHeroRankReward_ProtoFunID_FunID = 76
};
bool stReqDrawHeroRankReward_ProtoFunID_IsValid(int value);
const stReqDrawHeroRankReward_ProtoFunID stReqDrawHeroRankReward_ProtoFunID_ProtoFunID_MIN = stReqDrawHeroRankReward_ProtoFunID_FunID;
const stReqDrawHeroRankReward_ProtoFunID stReqDrawHeroRankReward_ProtoFunID_ProtoFunID_MAX = stReqDrawHeroRankReward_ProtoFunID_FunID;
const int stReqDrawHeroRankReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawHeroRankReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawHeroRankReward_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawHeroRankReward_ProtoFunID_Name(stReqDrawHeroRankReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawHeroRankReward_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawHeroRankReward_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawHeroRankReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawHeroRankReward_ProtoFunID>(
    stReqDrawHeroRankReward_ProtoFunID_descriptor(), name, value);
}
enum stDrawHeroRankReward_eResult {
  stDrawHeroRankReward_eResult_eSuccess = 1,
  stDrawHeroRankReward_eResult_eHas_No_Rewards = 2,
  stDrawHeroRankReward_eResult_eHas_Got_Reward = 3,
  stDrawHeroRankReward_eResult_eInner_Error = 4
};
bool stDrawHeroRankReward_eResult_IsValid(int value);
const stDrawHeroRankReward_eResult stDrawHeroRankReward_eResult_eResult_MIN = stDrawHeroRankReward_eResult_eSuccess;
const stDrawHeroRankReward_eResult stDrawHeroRankReward_eResult_eResult_MAX = stDrawHeroRankReward_eResult_eInner_Error;
const int stDrawHeroRankReward_eResult_eResult_ARRAYSIZE = stDrawHeroRankReward_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_eResult_descriptor();
inline const ::std::string& stDrawHeroRankReward_eResult_Name(stDrawHeroRankReward_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawHeroRankReward_eResult_descriptor(), value);
}
inline bool stDrawHeroRankReward_eResult_Parse(
    const ::std::string& name, stDrawHeroRankReward_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawHeroRankReward_eResult>(
    stDrawHeroRankReward_eResult_descriptor(), name, value);
}
enum stDrawHeroRankReward_ProtoModID {
  stDrawHeroRankReward_ProtoModID_ModID = 8
};
bool stDrawHeroRankReward_ProtoModID_IsValid(int value);
const stDrawHeroRankReward_ProtoModID stDrawHeroRankReward_ProtoModID_ProtoModID_MIN = stDrawHeroRankReward_ProtoModID_ModID;
const stDrawHeroRankReward_ProtoModID stDrawHeroRankReward_ProtoModID_ProtoModID_MAX = stDrawHeroRankReward_ProtoModID_ModID;
const int stDrawHeroRankReward_ProtoModID_ProtoModID_ARRAYSIZE = stDrawHeroRankReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_ProtoModID_descriptor();
inline const ::std::string& stDrawHeroRankReward_ProtoModID_Name(stDrawHeroRankReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawHeroRankReward_ProtoModID_descriptor(), value);
}
inline bool stDrawHeroRankReward_ProtoModID_Parse(
    const ::std::string& name, stDrawHeroRankReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawHeroRankReward_ProtoModID>(
    stDrawHeroRankReward_ProtoModID_descriptor(), name, value);
}
enum stDrawHeroRankReward_ProtoFunID {
  stDrawHeroRankReward_ProtoFunID_FunID = 77
};
bool stDrawHeroRankReward_ProtoFunID_IsValid(int value);
const stDrawHeroRankReward_ProtoFunID stDrawHeroRankReward_ProtoFunID_ProtoFunID_MIN = stDrawHeroRankReward_ProtoFunID_FunID;
const stDrawHeroRankReward_ProtoFunID stDrawHeroRankReward_ProtoFunID_ProtoFunID_MAX = stDrawHeroRankReward_ProtoFunID_FunID;
const int stDrawHeroRankReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stDrawHeroRankReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_ProtoFunID_descriptor();
inline const ::std::string& stDrawHeroRankReward_ProtoFunID_Name(stDrawHeroRankReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawHeroRankReward_ProtoFunID_descriptor(), value);
}
inline bool stDrawHeroRankReward_ProtoFunID_Parse(
    const ::std::string& name, stDrawHeroRankReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawHeroRankReward_ProtoFunID>(
    stDrawHeroRankReward_ProtoFunID_descriptor(), name, value);
}
enum stReqCompensationList_ProtoModID {
  stReqCompensationList_ProtoModID_ModID = 8
};
bool stReqCompensationList_ProtoModID_IsValid(int value);
const stReqCompensationList_ProtoModID stReqCompensationList_ProtoModID_ProtoModID_MIN = stReqCompensationList_ProtoModID_ModID;
const stReqCompensationList_ProtoModID stReqCompensationList_ProtoModID_ProtoModID_MAX = stReqCompensationList_ProtoModID_ModID;
const int stReqCompensationList_ProtoModID_ProtoModID_ARRAYSIZE = stReqCompensationList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCompensationList_ProtoModID_descriptor();
inline const ::std::string& stReqCompensationList_ProtoModID_Name(stReqCompensationList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCompensationList_ProtoModID_descriptor(), value);
}
inline bool stReqCompensationList_ProtoModID_Parse(
    const ::std::string& name, stReqCompensationList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCompensationList_ProtoModID>(
    stReqCompensationList_ProtoModID_descriptor(), name, value);
}
enum stReqCompensationList_ProtoFunID {
  stReqCompensationList_ProtoFunID_FunID = 78
};
bool stReqCompensationList_ProtoFunID_IsValid(int value);
const stReqCompensationList_ProtoFunID stReqCompensationList_ProtoFunID_ProtoFunID_MIN = stReqCompensationList_ProtoFunID_FunID;
const stReqCompensationList_ProtoFunID stReqCompensationList_ProtoFunID_ProtoFunID_MAX = stReqCompensationList_ProtoFunID_FunID;
const int stReqCompensationList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCompensationList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCompensationList_ProtoFunID_descriptor();
inline const ::std::string& stReqCompensationList_ProtoFunID_Name(stReqCompensationList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCompensationList_ProtoFunID_descriptor(), value);
}
inline bool stReqCompensationList_ProtoFunID_Parse(
    const ::std::string& name, stReqCompensationList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCompensationList_ProtoFunID>(
    stReqCompensationList_ProtoFunID_descriptor(), name, value);
}
enum stRetCompensationList_ProtoModID {
  stRetCompensationList_ProtoModID_ModID = 8
};
bool stRetCompensationList_ProtoModID_IsValid(int value);
const stRetCompensationList_ProtoModID stRetCompensationList_ProtoModID_ProtoModID_MIN = stRetCompensationList_ProtoModID_ModID;
const stRetCompensationList_ProtoModID stRetCompensationList_ProtoModID_ProtoModID_MAX = stRetCompensationList_ProtoModID_ModID;
const int stRetCompensationList_ProtoModID_ProtoModID_ARRAYSIZE = stRetCompensationList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCompensationList_ProtoModID_descriptor();
inline const ::std::string& stRetCompensationList_ProtoModID_Name(stRetCompensationList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCompensationList_ProtoModID_descriptor(), value);
}
inline bool stRetCompensationList_ProtoModID_Parse(
    const ::std::string& name, stRetCompensationList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCompensationList_ProtoModID>(
    stRetCompensationList_ProtoModID_descriptor(), name, value);
}
enum stRetCompensationList_ProtoFunID {
  stRetCompensationList_ProtoFunID_FunID = 79
};
bool stRetCompensationList_ProtoFunID_IsValid(int value);
const stRetCompensationList_ProtoFunID stRetCompensationList_ProtoFunID_ProtoFunID_MIN = stRetCompensationList_ProtoFunID_FunID;
const stRetCompensationList_ProtoFunID stRetCompensationList_ProtoFunID_ProtoFunID_MAX = stRetCompensationList_ProtoFunID_FunID;
const int stRetCompensationList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetCompensationList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCompensationList_ProtoFunID_descriptor();
inline const ::std::string& stRetCompensationList_ProtoFunID_Name(stRetCompensationList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCompensationList_ProtoFunID_descriptor(), value);
}
inline bool stRetCompensationList_ProtoFunID_Parse(
    const ::std::string& name, stRetCompensationList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCompensationList_ProtoFunID>(
    stRetCompensationList_ProtoFunID_descriptor(), name, value);
}
enum stReqGotCompensation_ProtoModID {
  stReqGotCompensation_ProtoModID_ModID = 8
};
bool stReqGotCompensation_ProtoModID_IsValid(int value);
const stReqGotCompensation_ProtoModID stReqGotCompensation_ProtoModID_ProtoModID_MIN = stReqGotCompensation_ProtoModID_ModID;
const stReqGotCompensation_ProtoModID stReqGotCompensation_ProtoModID_ProtoModID_MAX = stReqGotCompensation_ProtoModID_ModID;
const int stReqGotCompensation_ProtoModID_ProtoModID_ARRAYSIZE = stReqGotCompensation_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGotCompensation_ProtoModID_descriptor();
inline const ::std::string& stReqGotCompensation_ProtoModID_Name(stReqGotCompensation_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGotCompensation_ProtoModID_descriptor(), value);
}
inline bool stReqGotCompensation_ProtoModID_Parse(
    const ::std::string& name, stReqGotCompensation_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGotCompensation_ProtoModID>(
    stReqGotCompensation_ProtoModID_descriptor(), name, value);
}
enum stReqGotCompensation_ProtoFunID {
  stReqGotCompensation_ProtoFunID_FunID = 80
};
bool stReqGotCompensation_ProtoFunID_IsValid(int value);
const stReqGotCompensation_ProtoFunID stReqGotCompensation_ProtoFunID_ProtoFunID_MIN = stReqGotCompensation_ProtoFunID_FunID;
const stReqGotCompensation_ProtoFunID stReqGotCompensation_ProtoFunID_ProtoFunID_MAX = stReqGotCompensation_ProtoFunID_FunID;
const int stReqGotCompensation_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGotCompensation_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGotCompensation_ProtoFunID_descriptor();
inline const ::std::string& stReqGotCompensation_ProtoFunID_Name(stReqGotCompensation_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGotCompensation_ProtoFunID_descriptor(), value);
}
inline bool stReqGotCompensation_ProtoFunID_Parse(
    const ::std::string& name, stReqGotCompensation_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGotCompensation_ProtoFunID>(
    stReqGotCompensation_ProtoFunID_descriptor(), name, value);
}
enum stGotCompensationResult_eResult {
  stGotCompensationResult_eResult_eSuccess = 1,
  stGotCompensationResult_eResult_eHas_Got = 2
};
bool stGotCompensationResult_eResult_IsValid(int value);
const stGotCompensationResult_eResult stGotCompensationResult_eResult_eResult_MIN = stGotCompensationResult_eResult_eSuccess;
const stGotCompensationResult_eResult stGotCompensationResult_eResult_eResult_MAX = stGotCompensationResult_eResult_eHas_Got;
const int stGotCompensationResult_eResult_eResult_ARRAYSIZE = stGotCompensationResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGotCompensationResult_eResult_descriptor();
inline const ::std::string& stGotCompensationResult_eResult_Name(stGotCompensationResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGotCompensationResult_eResult_descriptor(), value);
}
inline bool stGotCompensationResult_eResult_Parse(
    const ::std::string& name, stGotCompensationResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGotCompensationResult_eResult>(
    stGotCompensationResult_eResult_descriptor(), name, value);
}
enum stGotCompensationResult_ProtoModID {
  stGotCompensationResult_ProtoModID_ModID = 8
};
bool stGotCompensationResult_ProtoModID_IsValid(int value);
const stGotCompensationResult_ProtoModID stGotCompensationResult_ProtoModID_ProtoModID_MIN = stGotCompensationResult_ProtoModID_ModID;
const stGotCompensationResult_ProtoModID stGotCompensationResult_ProtoModID_ProtoModID_MAX = stGotCompensationResult_ProtoModID_ModID;
const int stGotCompensationResult_ProtoModID_ProtoModID_ARRAYSIZE = stGotCompensationResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGotCompensationResult_ProtoModID_descriptor();
inline const ::std::string& stGotCompensationResult_ProtoModID_Name(stGotCompensationResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGotCompensationResult_ProtoModID_descriptor(), value);
}
inline bool stGotCompensationResult_ProtoModID_Parse(
    const ::std::string& name, stGotCompensationResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGotCompensationResult_ProtoModID>(
    stGotCompensationResult_ProtoModID_descriptor(), name, value);
}
enum stGotCompensationResult_ProtoFunID {
  stGotCompensationResult_ProtoFunID_FunID = 81
};
bool stGotCompensationResult_ProtoFunID_IsValid(int value);
const stGotCompensationResult_ProtoFunID stGotCompensationResult_ProtoFunID_ProtoFunID_MIN = stGotCompensationResult_ProtoFunID_FunID;
const stGotCompensationResult_ProtoFunID stGotCompensationResult_ProtoFunID_ProtoFunID_MAX = stGotCompensationResult_ProtoFunID_FunID;
const int stGotCompensationResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGotCompensationResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGotCompensationResult_ProtoFunID_descriptor();
inline const ::std::string& stGotCompensationResult_ProtoFunID_Name(stGotCompensationResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGotCompensationResult_ProtoFunID_descriptor(), value);
}
inline bool stGotCompensationResult_ProtoFunID_Parse(
    const ::std::string& name, stGotCompensationResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGotCompensationResult_ProtoFunID>(
    stGotCompensationResult_ProtoFunID_descriptor(), name, value);
}
enum stReq7DayActivityInfo_ProtoModID {
  stReq7DayActivityInfo_ProtoModID_ModID = 8
};
bool stReq7DayActivityInfo_ProtoModID_IsValid(int value);
const stReq7DayActivityInfo_ProtoModID stReq7DayActivityInfo_ProtoModID_ProtoModID_MIN = stReq7DayActivityInfo_ProtoModID_ModID;
const stReq7DayActivityInfo_ProtoModID stReq7DayActivityInfo_ProtoModID_ProtoModID_MAX = stReq7DayActivityInfo_ProtoModID_ModID;
const int stReq7DayActivityInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReq7DayActivityInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReq7DayActivityInfo_ProtoModID_descriptor();
inline const ::std::string& stReq7DayActivityInfo_ProtoModID_Name(stReq7DayActivityInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReq7DayActivityInfo_ProtoModID_descriptor(), value);
}
inline bool stReq7DayActivityInfo_ProtoModID_Parse(
    const ::std::string& name, stReq7DayActivityInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReq7DayActivityInfo_ProtoModID>(
    stReq7DayActivityInfo_ProtoModID_descriptor(), name, value);
}
enum stReq7DayActivityInfo_ProtoFunID {
  stReq7DayActivityInfo_ProtoFunID_FunID = 82
};
bool stReq7DayActivityInfo_ProtoFunID_IsValid(int value);
const stReq7DayActivityInfo_ProtoFunID stReq7DayActivityInfo_ProtoFunID_ProtoFunID_MIN = stReq7DayActivityInfo_ProtoFunID_FunID;
const stReq7DayActivityInfo_ProtoFunID stReq7DayActivityInfo_ProtoFunID_ProtoFunID_MAX = stReq7DayActivityInfo_ProtoFunID_FunID;
const int stReq7DayActivityInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReq7DayActivityInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReq7DayActivityInfo_ProtoFunID_descriptor();
inline const ::std::string& stReq7DayActivityInfo_ProtoFunID_Name(stReq7DayActivityInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReq7DayActivityInfo_ProtoFunID_descriptor(), value);
}
inline bool stReq7DayActivityInfo_ProtoFunID_Parse(
    const ::std::string& name, stReq7DayActivityInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReq7DayActivityInfo_ProtoFunID>(
    stReq7DayActivityInfo_ProtoFunID_descriptor(), name, value);
}
enum stRet7DayActivityInfo_ProtoModID {
  stRet7DayActivityInfo_ProtoModID_ModID = 8
};
bool stRet7DayActivityInfo_ProtoModID_IsValid(int value);
const stRet7DayActivityInfo_ProtoModID stRet7DayActivityInfo_ProtoModID_ProtoModID_MIN = stRet7DayActivityInfo_ProtoModID_ModID;
const stRet7DayActivityInfo_ProtoModID stRet7DayActivityInfo_ProtoModID_ProtoModID_MAX = stRet7DayActivityInfo_ProtoModID_ModID;
const int stRet7DayActivityInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRet7DayActivityInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRet7DayActivityInfo_ProtoModID_descriptor();
inline const ::std::string& stRet7DayActivityInfo_ProtoModID_Name(stRet7DayActivityInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRet7DayActivityInfo_ProtoModID_descriptor(), value);
}
inline bool stRet7DayActivityInfo_ProtoModID_Parse(
    const ::std::string& name, stRet7DayActivityInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRet7DayActivityInfo_ProtoModID>(
    stRet7DayActivityInfo_ProtoModID_descriptor(), name, value);
}
enum stRet7DayActivityInfo_ProtoFunID {
  stRet7DayActivityInfo_ProtoFunID_FunID = 83
};
bool stRet7DayActivityInfo_ProtoFunID_IsValid(int value);
const stRet7DayActivityInfo_ProtoFunID stRet7DayActivityInfo_ProtoFunID_ProtoFunID_MIN = stRet7DayActivityInfo_ProtoFunID_FunID;
const stRet7DayActivityInfo_ProtoFunID stRet7DayActivityInfo_ProtoFunID_ProtoFunID_MAX = stRet7DayActivityInfo_ProtoFunID_FunID;
const int stRet7DayActivityInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRet7DayActivityInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRet7DayActivityInfo_ProtoFunID_descriptor();
inline const ::std::string& stRet7DayActivityInfo_ProtoFunID_Name(stRet7DayActivityInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRet7DayActivityInfo_ProtoFunID_descriptor(), value);
}
inline bool stRet7DayActivityInfo_ProtoFunID_Parse(
    const ::std::string& name, stRet7DayActivityInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRet7DayActivityInfo_ProtoFunID>(
    stRet7DayActivityInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqSevenDayReward_ProtoModID {
  stReqSevenDayReward_ProtoModID_ModID = 8
};
bool stReqSevenDayReward_ProtoModID_IsValid(int value);
const stReqSevenDayReward_ProtoModID stReqSevenDayReward_ProtoModID_ProtoModID_MIN = stReqSevenDayReward_ProtoModID_ModID;
const stReqSevenDayReward_ProtoModID stReqSevenDayReward_ProtoModID_ProtoModID_MAX = stReqSevenDayReward_ProtoModID_ModID;
const int stReqSevenDayReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqSevenDayReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSevenDayReward_ProtoModID_descriptor();
inline const ::std::string& stReqSevenDayReward_ProtoModID_Name(stReqSevenDayReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSevenDayReward_ProtoModID_descriptor(), value);
}
inline bool stReqSevenDayReward_ProtoModID_Parse(
    const ::std::string& name, stReqSevenDayReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSevenDayReward_ProtoModID>(
    stReqSevenDayReward_ProtoModID_descriptor(), name, value);
}
enum stReqSevenDayReward_ProtoFunID {
  stReqSevenDayReward_ProtoFunID_FunID = 84
};
bool stReqSevenDayReward_ProtoFunID_IsValid(int value);
const stReqSevenDayReward_ProtoFunID stReqSevenDayReward_ProtoFunID_ProtoFunID_MIN = stReqSevenDayReward_ProtoFunID_FunID;
const stReqSevenDayReward_ProtoFunID stReqSevenDayReward_ProtoFunID_ProtoFunID_MAX = stReqSevenDayReward_ProtoFunID_FunID;
const int stReqSevenDayReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSevenDayReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSevenDayReward_ProtoFunID_descriptor();
inline const ::std::string& stReqSevenDayReward_ProtoFunID_Name(stReqSevenDayReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSevenDayReward_ProtoFunID_descriptor(), value);
}
inline bool stReqSevenDayReward_ProtoFunID_Parse(
    const ::std::string& name, stReqSevenDayReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSevenDayReward_ProtoFunID>(
    stReqSevenDayReward_ProtoFunID_descriptor(), name, value);
}
enum stSevenDayRewardRet_eResult {
  stSevenDayRewardRet_eResult_eSuccess = 1,
  stSevenDayRewardRet_eResult_eCond_Not_Meet = 2,
  stSevenDayRewardRet_eResult_eHas_Got_Reward = 3,
  stSevenDayRewardRet_eResult_eInner_Error = 4,
  stSevenDayRewardRet_eResult_eBag_Full = 5,
  stSevenDayRewardRet_eResult_eNot_Enough_Diamond = 6
};
bool stSevenDayRewardRet_eResult_IsValid(int value);
const stSevenDayRewardRet_eResult stSevenDayRewardRet_eResult_eResult_MIN = stSevenDayRewardRet_eResult_eSuccess;
const stSevenDayRewardRet_eResult stSevenDayRewardRet_eResult_eResult_MAX = stSevenDayRewardRet_eResult_eNot_Enough_Diamond;
const int stSevenDayRewardRet_eResult_eResult_ARRAYSIZE = stSevenDayRewardRet_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSevenDayRewardRet_eResult_descriptor();
inline const ::std::string& stSevenDayRewardRet_eResult_Name(stSevenDayRewardRet_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSevenDayRewardRet_eResult_descriptor(), value);
}
inline bool stSevenDayRewardRet_eResult_Parse(
    const ::std::string& name, stSevenDayRewardRet_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSevenDayRewardRet_eResult>(
    stSevenDayRewardRet_eResult_descriptor(), name, value);
}
enum stSevenDayRewardRet_ProtoModID {
  stSevenDayRewardRet_ProtoModID_ModID = 8
};
bool stSevenDayRewardRet_ProtoModID_IsValid(int value);
const stSevenDayRewardRet_ProtoModID stSevenDayRewardRet_ProtoModID_ProtoModID_MIN = stSevenDayRewardRet_ProtoModID_ModID;
const stSevenDayRewardRet_ProtoModID stSevenDayRewardRet_ProtoModID_ProtoModID_MAX = stSevenDayRewardRet_ProtoModID_ModID;
const int stSevenDayRewardRet_ProtoModID_ProtoModID_ARRAYSIZE = stSevenDayRewardRet_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSevenDayRewardRet_ProtoModID_descriptor();
inline const ::std::string& stSevenDayRewardRet_ProtoModID_Name(stSevenDayRewardRet_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSevenDayRewardRet_ProtoModID_descriptor(), value);
}
inline bool stSevenDayRewardRet_ProtoModID_Parse(
    const ::std::string& name, stSevenDayRewardRet_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSevenDayRewardRet_ProtoModID>(
    stSevenDayRewardRet_ProtoModID_descriptor(), name, value);
}
enum stSevenDayRewardRet_ProtoFunID {
  stSevenDayRewardRet_ProtoFunID_FunID = 85
};
bool stSevenDayRewardRet_ProtoFunID_IsValid(int value);
const stSevenDayRewardRet_ProtoFunID stSevenDayRewardRet_ProtoFunID_ProtoFunID_MIN = stSevenDayRewardRet_ProtoFunID_FunID;
const stSevenDayRewardRet_ProtoFunID stSevenDayRewardRet_ProtoFunID_ProtoFunID_MAX = stSevenDayRewardRet_ProtoFunID_FunID;
const int stSevenDayRewardRet_ProtoFunID_ProtoFunID_ARRAYSIZE = stSevenDayRewardRet_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSevenDayRewardRet_ProtoFunID_descriptor();
inline const ::std::string& stSevenDayRewardRet_ProtoFunID_Name(stSevenDayRewardRet_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSevenDayRewardRet_ProtoFunID_descriptor(), value);
}
inline bool stSevenDayRewardRet_ProtoFunID_Parse(
    const ::std::string& name, stSevenDayRewardRet_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSevenDayRewardRet_ProtoFunID>(
    stSevenDayRewardRet_ProtoFunID_descriptor(), name, value);
}
enum stSevenDayHasRewardTip_ProtoModID {
  stSevenDayHasRewardTip_ProtoModID_ModID = 8
};
bool stSevenDayHasRewardTip_ProtoModID_IsValid(int value);
const stSevenDayHasRewardTip_ProtoModID stSevenDayHasRewardTip_ProtoModID_ProtoModID_MIN = stSevenDayHasRewardTip_ProtoModID_ModID;
const stSevenDayHasRewardTip_ProtoModID stSevenDayHasRewardTip_ProtoModID_ProtoModID_MAX = stSevenDayHasRewardTip_ProtoModID_ModID;
const int stSevenDayHasRewardTip_ProtoModID_ProtoModID_ARRAYSIZE = stSevenDayHasRewardTip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSevenDayHasRewardTip_ProtoModID_descriptor();
inline const ::std::string& stSevenDayHasRewardTip_ProtoModID_Name(stSevenDayHasRewardTip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSevenDayHasRewardTip_ProtoModID_descriptor(), value);
}
inline bool stSevenDayHasRewardTip_ProtoModID_Parse(
    const ::std::string& name, stSevenDayHasRewardTip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSevenDayHasRewardTip_ProtoModID>(
    stSevenDayHasRewardTip_ProtoModID_descriptor(), name, value);
}
enum stSevenDayHasRewardTip_ProtoFunID {
  stSevenDayHasRewardTip_ProtoFunID_FunID = 86
};
bool stSevenDayHasRewardTip_ProtoFunID_IsValid(int value);
const stSevenDayHasRewardTip_ProtoFunID stSevenDayHasRewardTip_ProtoFunID_ProtoFunID_MIN = stSevenDayHasRewardTip_ProtoFunID_FunID;
const stSevenDayHasRewardTip_ProtoFunID stSevenDayHasRewardTip_ProtoFunID_ProtoFunID_MAX = stSevenDayHasRewardTip_ProtoFunID_FunID;
const int stSevenDayHasRewardTip_ProtoFunID_ProtoFunID_ARRAYSIZE = stSevenDayHasRewardTip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSevenDayHasRewardTip_ProtoFunID_descriptor();
inline const ::std::string& stSevenDayHasRewardTip_ProtoFunID_Name(stSevenDayHasRewardTip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSevenDayHasRewardTip_ProtoFunID_descriptor(), value);
}
inline bool stSevenDayHasRewardTip_ProtoFunID_Parse(
    const ::std::string& name, stSevenDayHasRewardTip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSevenDayHasRewardTip_ProtoFunID>(
    stSevenDayHasRewardTip_ProtoFunID_descriptor(), name, value);
}
enum stAppStoreCfg_ProtoModID {
  stAppStoreCfg_ProtoModID_ModID = 8
};
bool stAppStoreCfg_ProtoModID_IsValid(int value);
const stAppStoreCfg_ProtoModID stAppStoreCfg_ProtoModID_ProtoModID_MIN = stAppStoreCfg_ProtoModID_ModID;
const stAppStoreCfg_ProtoModID stAppStoreCfg_ProtoModID_ProtoModID_MAX = stAppStoreCfg_ProtoModID_ModID;
const int stAppStoreCfg_ProtoModID_ProtoModID_ARRAYSIZE = stAppStoreCfg_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAppStoreCfg_ProtoModID_descriptor();
inline const ::std::string& stAppStoreCfg_ProtoModID_Name(stAppStoreCfg_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAppStoreCfg_ProtoModID_descriptor(), value);
}
inline bool stAppStoreCfg_ProtoModID_Parse(
    const ::std::string& name, stAppStoreCfg_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAppStoreCfg_ProtoModID>(
    stAppStoreCfg_ProtoModID_descriptor(), name, value);
}
enum stAppStoreCfg_ProtoFunID {
  stAppStoreCfg_ProtoFunID_FunID = 87
};
bool stAppStoreCfg_ProtoFunID_IsValid(int value);
const stAppStoreCfg_ProtoFunID stAppStoreCfg_ProtoFunID_ProtoFunID_MIN = stAppStoreCfg_ProtoFunID_FunID;
const stAppStoreCfg_ProtoFunID stAppStoreCfg_ProtoFunID_ProtoFunID_MAX = stAppStoreCfg_ProtoFunID_FunID;
const int stAppStoreCfg_ProtoFunID_ProtoFunID_ARRAYSIZE = stAppStoreCfg_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAppStoreCfg_ProtoFunID_descriptor();
inline const ::std::string& stAppStoreCfg_ProtoFunID_Name(stAppStoreCfg_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAppStoreCfg_ProtoFunID_descriptor(), value);
}
inline bool stAppStoreCfg_ProtoFunID_Parse(
    const ::std::string& name, stAppStoreCfg_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAppStoreCfg_ProtoFunID>(
    stAppStoreCfg_ProtoFunID_descriptor(), name, value);
}
enum stOpenWindowTip_eAction {
  stOpenWindowTip_eAction_eNotify_Download_New_Version = 1
};
bool stOpenWindowTip_eAction_IsValid(int value);
const stOpenWindowTip_eAction stOpenWindowTip_eAction_eAction_MIN = stOpenWindowTip_eAction_eNotify_Download_New_Version;
const stOpenWindowTip_eAction stOpenWindowTip_eAction_eAction_MAX = stOpenWindowTip_eAction_eNotify_Download_New_Version;
const int stOpenWindowTip_eAction_eAction_ARRAYSIZE = stOpenWindowTip_eAction_eAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenWindowTip_eAction_descriptor();
inline const ::std::string& stOpenWindowTip_eAction_Name(stOpenWindowTip_eAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenWindowTip_eAction_descriptor(), value);
}
inline bool stOpenWindowTip_eAction_Parse(
    const ::std::string& name, stOpenWindowTip_eAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenWindowTip_eAction>(
    stOpenWindowTip_eAction_descriptor(), name, value);
}
enum stOpenWindowTip_ProtoModID {
  stOpenWindowTip_ProtoModID_ModID = 8
};
bool stOpenWindowTip_ProtoModID_IsValid(int value);
const stOpenWindowTip_ProtoModID stOpenWindowTip_ProtoModID_ProtoModID_MIN = stOpenWindowTip_ProtoModID_ModID;
const stOpenWindowTip_ProtoModID stOpenWindowTip_ProtoModID_ProtoModID_MAX = stOpenWindowTip_ProtoModID_ModID;
const int stOpenWindowTip_ProtoModID_ProtoModID_ARRAYSIZE = stOpenWindowTip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenWindowTip_ProtoModID_descriptor();
inline const ::std::string& stOpenWindowTip_ProtoModID_Name(stOpenWindowTip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenWindowTip_ProtoModID_descriptor(), value);
}
inline bool stOpenWindowTip_ProtoModID_Parse(
    const ::std::string& name, stOpenWindowTip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenWindowTip_ProtoModID>(
    stOpenWindowTip_ProtoModID_descriptor(), name, value);
}
enum stOpenWindowTip_ProtoFunID {
  stOpenWindowTip_ProtoFunID_FunID = 88
};
bool stOpenWindowTip_ProtoFunID_IsValid(int value);
const stOpenWindowTip_ProtoFunID stOpenWindowTip_ProtoFunID_ProtoFunID_MIN = stOpenWindowTip_ProtoFunID_FunID;
const stOpenWindowTip_ProtoFunID stOpenWindowTip_ProtoFunID_ProtoFunID_MAX = stOpenWindowTip_ProtoFunID_FunID;
const int stOpenWindowTip_ProtoFunID_ProtoFunID_ARRAYSIZE = stOpenWindowTip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenWindowTip_ProtoFunID_descriptor();
inline const ::std::string& stOpenWindowTip_ProtoFunID_Name(stOpenWindowTip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenWindowTip_ProtoFunID_descriptor(), value);
}
inline bool stOpenWindowTip_ProtoFunID_Parse(
    const ::std::string& name, stOpenWindowTip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenWindowTip_ProtoFunID>(
    stOpenWindowTip_ProtoFunID_descriptor(), name, value);
}
enum stReqRechargeActivityList_ProtoModID {
  stReqRechargeActivityList_ProtoModID_ModID = 8
};
bool stReqRechargeActivityList_ProtoModID_IsValid(int value);
const stReqRechargeActivityList_ProtoModID stReqRechargeActivityList_ProtoModID_ProtoModID_MIN = stReqRechargeActivityList_ProtoModID_ModID;
const stReqRechargeActivityList_ProtoModID stReqRechargeActivityList_ProtoModID_ProtoModID_MAX = stReqRechargeActivityList_ProtoModID_ModID;
const int stReqRechargeActivityList_ProtoModID_ProtoModID_ARRAYSIZE = stReqRechargeActivityList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRechargeActivityList_ProtoModID_descriptor();
inline const ::std::string& stReqRechargeActivityList_ProtoModID_Name(stReqRechargeActivityList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRechargeActivityList_ProtoModID_descriptor(), value);
}
inline bool stReqRechargeActivityList_ProtoModID_Parse(
    const ::std::string& name, stReqRechargeActivityList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRechargeActivityList_ProtoModID>(
    stReqRechargeActivityList_ProtoModID_descriptor(), name, value);
}
enum stReqRechargeActivityList_ProtoFunID {
  stReqRechargeActivityList_ProtoFunID_FunID = 89
};
bool stReqRechargeActivityList_ProtoFunID_IsValid(int value);
const stReqRechargeActivityList_ProtoFunID stReqRechargeActivityList_ProtoFunID_ProtoFunID_MIN = stReqRechargeActivityList_ProtoFunID_FunID;
const stReqRechargeActivityList_ProtoFunID stReqRechargeActivityList_ProtoFunID_ProtoFunID_MAX = stReqRechargeActivityList_ProtoFunID_FunID;
const int stReqRechargeActivityList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRechargeActivityList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRechargeActivityList_ProtoFunID_descriptor();
inline const ::std::string& stReqRechargeActivityList_ProtoFunID_Name(stReqRechargeActivityList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRechargeActivityList_ProtoFunID_descriptor(), value);
}
inline bool stReqRechargeActivityList_ProtoFunID_Parse(
    const ::std::string& name, stReqRechargeActivityList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRechargeActivityList_ProtoFunID>(
    stReqRechargeActivityList_ProtoFunID_descriptor(), name, value);
}
enum stRetRechargeActivityList_ProtoModID {
  stRetRechargeActivityList_ProtoModID_ModID = 8
};
bool stRetRechargeActivityList_ProtoModID_IsValid(int value);
const stRetRechargeActivityList_ProtoModID stRetRechargeActivityList_ProtoModID_ProtoModID_MIN = stRetRechargeActivityList_ProtoModID_ModID;
const stRetRechargeActivityList_ProtoModID stRetRechargeActivityList_ProtoModID_ProtoModID_MAX = stRetRechargeActivityList_ProtoModID_ModID;
const int stRetRechargeActivityList_ProtoModID_ProtoModID_ARRAYSIZE = stRetRechargeActivityList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRechargeActivityList_ProtoModID_descriptor();
inline const ::std::string& stRetRechargeActivityList_ProtoModID_Name(stRetRechargeActivityList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRechargeActivityList_ProtoModID_descriptor(), value);
}
inline bool stRetRechargeActivityList_ProtoModID_Parse(
    const ::std::string& name, stRetRechargeActivityList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRechargeActivityList_ProtoModID>(
    stRetRechargeActivityList_ProtoModID_descriptor(), name, value);
}
enum stRetRechargeActivityList_ProtoFunID {
  stRetRechargeActivityList_ProtoFunID_FunID = 90
};
bool stRetRechargeActivityList_ProtoFunID_IsValid(int value);
const stRetRechargeActivityList_ProtoFunID stRetRechargeActivityList_ProtoFunID_ProtoFunID_MIN = stRetRechargeActivityList_ProtoFunID_FunID;
const stRetRechargeActivityList_ProtoFunID stRetRechargeActivityList_ProtoFunID_ProtoFunID_MAX = stRetRechargeActivityList_ProtoFunID_FunID;
const int stRetRechargeActivityList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRechargeActivityList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRechargeActivityList_ProtoFunID_descriptor();
inline const ::std::string& stRetRechargeActivityList_ProtoFunID_Name(stRetRechargeActivityList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRechargeActivityList_ProtoFunID_descriptor(), value);
}
inline bool stRetRechargeActivityList_ProtoFunID_Parse(
    const ::std::string& name, stRetRechargeActivityList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRechargeActivityList_ProtoFunID>(
    stRetRechargeActivityList_ProtoFunID_descriptor(), name, value);
}
enum stReqRechargeActivtiyReward_ProtoModID {
  stReqRechargeActivtiyReward_ProtoModID_ModID = 8
};
bool stReqRechargeActivtiyReward_ProtoModID_IsValid(int value);
const stReqRechargeActivtiyReward_ProtoModID stReqRechargeActivtiyReward_ProtoModID_ProtoModID_MIN = stReqRechargeActivtiyReward_ProtoModID_ModID;
const stReqRechargeActivtiyReward_ProtoModID stReqRechargeActivtiyReward_ProtoModID_ProtoModID_MAX = stReqRechargeActivtiyReward_ProtoModID_ModID;
const int stReqRechargeActivtiyReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqRechargeActivtiyReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRechargeActivtiyReward_ProtoModID_descriptor();
inline const ::std::string& stReqRechargeActivtiyReward_ProtoModID_Name(stReqRechargeActivtiyReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRechargeActivtiyReward_ProtoModID_descriptor(), value);
}
inline bool stReqRechargeActivtiyReward_ProtoModID_Parse(
    const ::std::string& name, stReqRechargeActivtiyReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRechargeActivtiyReward_ProtoModID>(
    stReqRechargeActivtiyReward_ProtoModID_descriptor(), name, value);
}
enum stReqRechargeActivtiyReward_ProtoFunID {
  stReqRechargeActivtiyReward_ProtoFunID_FunID = 91
};
bool stReqRechargeActivtiyReward_ProtoFunID_IsValid(int value);
const stReqRechargeActivtiyReward_ProtoFunID stReqRechargeActivtiyReward_ProtoFunID_ProtoFunID_MIN = stReqRechargeActivtiyReward_ProtoFunID_FunID;
const stReqRechargeActivtiyReward_ProtoFunID stReqRechargeActivtiyReward_ProtoFunID_ProtoFunID_MAX = stReqRechargeActivtiyReward_ProtoFunID_FunID;
const int stReqRechargeActivtiyReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRechargeActivtiyReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRechargeActivtiyReward_ProtoFunID_descriptor();
inline const ::std::string& stReqRechargeActivtiyReward_ProtoFunID_Name(stReqRechargeActivtiyReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRechargeActivtiyReward_ProtoFunID_descriptor(), value);
}
inline bool stReqRechargeActivtiyReward_ProtoFunID_Parse(
    const ::std::string& name, stReqRechargeActivtiyReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRechargeActivtiyReward_ProtoFunID>(
    stReqRechargeActivtiyReward_ProtoFunID_descriptor(), name, value);
}
enum stRetRechargeActivityReward_eResult {
  stRetRechargeActivityReward_eResult_eSuccess = 1,
  stRetRechargeActivityReward_eResult_eCond_Not_Meet = 2,
  stRetRechargeActivityReward_eResult_eBagFull = 3,
  stRetRechargeActivityReward_eResult_eHas_Got_Reward = 4,
  stRetRechargeActivityReward_eResult_eInner_Error = 5
};
bool stRetRechargeActivityReward_eResult_IsValid(int value);
const stRetRechargeActivityReward_eResult stRetRechargeActivityReward_eResult_eResult_MIN = stRetRechargeActivityReward_eResult_eSuccess;
const stRetRechargeActivityReward_eResult stRetRechargeActivityReward_eResult_eResult_MAX = stRetRechargeActivityReward_eResult_eInner_Error;
const int stRetRechargeActivityReward_eResult_eResult_ARRAYSIZE = stRetRechargeActivityReward_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRechargeActivityReward_eResult_descriptor();
inline const ::std::string& stRetRechargeActivityReward_eResult_Name(stRetRechargeActivityReward_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRechargeActivityReward_eResult_descriptor(), value);
}
inline bool stRetRechargeActivityReward_eResult_Parse(
    const ::std::string& name, stRetRechargeActivityReward_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRechargeActivityReward_eResult>(
    stRetRechargeActivityReward_eResult_descriptor(), name, value);
}
enum stRetRechargeActivityReward_ProtoModID {
  stRetRechargeActivityReward_ProtoModID_ModID = 8
};
bool stRetRechargeActivityReward_ProtoModID_IsValid(int value);
const stRetRechargeActivityReward_ProtoModID stRetRechargeActivityReward_ProtoModID_ProtoModID_MIN = stRetRechargeActivityReward_ProtoModID_ModID;
const stRetRechargeActivityReward_ProtoModID stRetRechargeActivityReward_ProtoModID_ProtoModID_MAX = stRetRechargeActivityReward_ProtoModID_ModID;
const int stRetRechargeActivityReward_ProtoModID_ProtoModID_ARRAYSIZE = stRetRechargeActivityReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRechargeActivityReward_ProtoModID_descriptor();
inline const ::std::string& stRetRechargeActivityReward_ProtoModID_Name(stRetRechargeActivityReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRechargeActivityReward_ProtoModID_descriptor(), value);
}
inline bool stRetRechargeActivityReward_ProtoModID_Parse(
    const ::std::string& name, stRetRechargeActivityReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRechargeActivityReward_ProtoModID>(
    stRetRechargeActivityReward_ProtoModID_descriptor(), name, value);
}
enum stRetRechargeActivityReward_ProtoFunID {
  stRetRechargeActivityReward_ProtoFunID_FunID = 92
};
bool stRetRechargeActivityReward_ProtoFunID_IsValid(int value);
const stRetRechargeActivityReward_ProtoFunID stRetRechargeActivityReward_ProtoFunID_ProtoFunID_MIN = stRetRechargeActivityReward_ProtoFunID_FunID;
const stRetRechargeActivityReward_ProtoFunID stRetRechargeActivityReward_ProtoFunID_ProtoFunID_MAX = stRetRechargeActivityReward_ProtoFunID_FunID;
const int stRetRechargeActivityReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRechargeActivityReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRechargeActivityReward_ProtoFunID_descriptor();
inline const ::std::string& stRetRechargeActivityReward_ProtoFunID_Name(stRetRechargeActivityReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRechargeActivityReward_ProtoFunID_descriptor(), value);
}
inline bool stRetRechargeActivityReward_ProtoFunID_Parse(
    const ::std::string& name, stRetRechargeActivityReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRechargeActivityReward_ProtoFunID>(
    stRetRechargeActivityReward_ProtoFunID_descriptor(), name, value);
}
enum stSynAllInvestigation_ProtoModID {
  stSynAllInvestigation_ProtoModID_ModID = 8
};
bool stSynAllInvestigation_ProtoModID_IsValid(int value);
const stSynAllInvestigation_ProtoModID stSynAllInvestigation_ProtoModID_ProtoModID_MIN = stSynAllInvestigation_ProtoModID_ModID;
const stSynAllInvestigation_ProtoModID stSynAllInvestigation_ProtoModID_ProtoModID_MAX = stSynAllInvestigation_ProtoModID_ModID;
const int stSynAllInvestigation_ProtoModID_ProtoModID_ARRAYSIZE = stSynAllInvestigation_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAllInvestigation_ProtoModID_descriptor();
inline const ::std::string& stSynAllInvestigation_ProtoModID_Name(stSynAllInvestigation_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAllInvestigation_ProtoModID_descriptor(), value);
}
inline bool stSynAllInvestigation_ProtoModID_Parse(
    const ::std::string& name, stSynAllInvestigation_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAllInvestigation_ProtoModID>(
    stSynAllInvestigation_ProtoModID_descriptor(), name, value);
}
enum stSynAllInvestigation_ProtoFunID {
  stSynAllInvestigation_ProtoFunID_FunID = 93
};
bool stSynAllInvestigation_ProtoFunID_IsValid(int value);
const stSynAllInvestigation_ProtoFunID stSynAllInvestigation_ProtoFunID_ProtoFunID_MIN = stSynAllInvestigation_ProtoFunID_FunID;
const stSynAllInvestigation_ProtoFunID stSynAllInvestigation_ProtoFunID_ProtoFunID_MAX = stSynAllInvestigation_ProtoFunID_FunID;
const int stSynAllInvestigation_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynAllInvestigation_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAllInvestigation_ProtoFunID_descriptor();
inline const ::std::string& stSynAllInvestigation_ProtoFunID_Name(stSynAllInvestigation_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAllInvestigation_ProtoFunID_descriptor(), value);
}
inline bool stSynAllInvestigation_ProtoFunID_Parse(
    const ::std::string& name, stSynAllInvestigation_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAllInvestigation_ProtoFunID>(
    stSynAllInvestigation_ProtoFunID_descriptor(), name, value);
}
enum stReqInvestgationReward_ProtoModID {
  stReqInvestgationReward_ProtoModID_ModID = 8
};
bool stReqInvestgationReward_ProtoModID_IsValid(int value);
const stReqInvestgationReward_ProtoModID stReqInvestgationReward_ProtoModID_ProtoModID_MIN = stReqInvestgationReward_ProtoModID_ModID;
const stReqInvestgationReward_ProtoModID stReqInvestgationReward_ProtoModID_ProtoModID_MAX = stReqInvestgationReward_ProtoModID_ModID;
const int stReqInvestgationReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqInvestgationReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqInvestgationReward_ProtoModID_descriptor();
inline const ::std::string& stReqInvestgationReward_ProtoModID_Name(stReqInvestgationReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqInvestgationReward_ProtoModID_descriptor(), value);
}
inline bool stReqInvestgationReward_ProtoModID_Parse(
    const ::std::string& name, stReqInvestgationReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqInvestgationReward_ProtoModID>(
    stReqInvestgationReward_ProtoModID_descriptor(), name, value);
}
enum stReqInvestgationReward_ProtoFunID {
  stReqInvestgationReward_ProtoFunID_FunID = 94
};
bool stReqInvestgationReward_ProtoFunID_IsValid(int value);
const stReqInvestgationReward_ProtoFunID stReqInvestgationReward_ProtoFunID_ProtoFunID_MIN = stReqInvestgationReward_ProtoFunID_FunID;
const stReqInvestgationReward_ProtoFunID stReqInvestgationReward_ProtoFunID_ProtoFunID_MAX = stReqInvestgationReward_ProtoFunID_FunID;
const int stReqInvestgationReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqInvestgationReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqInvestgationReward_ProtoFunID_descriptor();
inline const ::std::string& stReqInvestgationReward_ProtoFunID_Name(stReqInvestgationReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqInvestgationReward_ProtoFunID_descriptor(), value);
}
inline bool stReqInvestgationReward_ProtoFunID_Parse(
    const ::std::string& name, stReqInvestgationReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqInvestgationReward_ProtoFunID>(
    stReqInvestgationReward_ProtoFunID_descriptor(), name, value);
}
enum stInvestgationRewardResult_eResult {
  stInvestgationRewardResult_eResult_eInner_Error = 1,
  stInvestgationRewardResult_eResult_eHas_Got_Reward = 2,
  stInvestgationRewardResult_eResult_eBag_Full = 3,
  stInvestgationRewardResult_eResult_eSuccess = 4
};
bool stInvestgationRewardResult_eResult_IsValid(int value);
const stInvestgationRewardResult_eResult stInvestgationRewardResult_eResult_eResult_MIN = stInvestgationRewardResult_eResult_eInner_Error;
const stInvestgationRewardResult_eResult stInvestgationRewardResult_eResult_eResult_MAX = stInvestgationRewardResult_eResult_eSuccess;
const int stInvestgationRewardResult_eResult_eResult_ARRAYSIZE = stInvestgationRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInvestgationRewardResult_eResult_descriptor();
inline const ::std::string& stInvestgationRewardResult_eResult_Name(stInvestgationRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInvestgationRewardResult_eResult_descriptor(), value);
}
inline bool stInvestgationRewardResult_eResult_Parse(
    const ::std::string& name, stInvestgationRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInvestgationRewardResult_eResult>(
    stInvestgationRewardResult_eResult_descriptor(), name, value);
}
enum stInvestgationRewardResult_ProtoModID {
  stInvestgationRewardResult_ProtoModID_ModID = 8
};
bool stInvestgationRewardResult_ProtoModID_IsValid(int value);
const stInvestgationRewardResult_ProtoModID stInvestgationRewardResult_ProtoModID_ProtoModID_MIN = stInvestgationRewardResult_ProtoModID_ModID;
const stInvestgationRewardResult_ProtoModID stInvestgationRewardResult_ProtoModID_ProtoModID_MAX = stInvestgationRewardResult_ProtoModID_ModID;
const int stInvestgationRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stInvestgationRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInvestgationRewardResult_ProtoModID_descriptor();
inline const ::std::string& stInvestgationRewardResult_ProtoModID_Name(stInvestgationRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInvestgationRewardResult_ProtoModID_descriptor(), value);
}
inline bool stInvestgationRewardResult_ProtoModID_Parse(
    const ::std::string& name, stInvestgationRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInvestgationRewardResult_ProtoModID>(
    stInvestgationRewardResult_ProtoModID_descriptor(), name, value);
}
enum stInvestgationRewardResult_ProtoFunID {
  stInvestgationRewardResult_ProtoFunID_FunID = 95
};
bool stInvestgationRewardResult_ProtoFunID_IsValid(int value);
const stInvestgationRewardResult_ProtoFunID stInvestgationRewardResult_ProtoFunID_ProtoFunID_MIN = stInvestgationRewardResult_ProtoFunID_FunID;
const stInvestgationRewardResult_ProtoFunID stInvestgationRewardResult_ProtoFunID_ProtoFunID_MAX = stInvestgationRewardResult_ProtoFunID_FunID;
const int stInvestgationRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stInvestgationRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInvestgationRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stInvestgationRewardResult_ProtoFunID_Name(stInvestgationRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInvestgationRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stInvestgationRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stInvestgationRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInvestgationRewardResult_ProtoFunID>(
    stInvestgationRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqActivityShop_ProtoModID {
  stReqActivityShop_ProtoModID_ModID = 8
};
bool stReqActivityShop_ProtoModID_IsValid(int value);
const stReqActivityShop_ProtoModID stReqActivityShop_ProtoModID_ProtoModID_MIN = stReqActivityShop_ProtoModID_ModID;
const stReqActivityShop_ProtoModID stReqActivityShop_ProtoModID_ProtoModID_MAX = stReqActivityShop_ProtoModID_ModID;
const int stReqActivityShop_ProtoModID_ProtoModID_ARRAYSIZE = stReqActivityShop_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqActivityShop_ProtoModID_descriptor();
inline const ::std::string& stReqActivityShop_ProtoModID_Name(stReqActivityShop_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqActivityShop_ProtoModID_descriptor(), value);
}
inline bool stReqActivityShop_ProtoModID_Parse(
    const ::std::string& name, stReqActivityShop_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqActivityShop_ProtoModID>(
    stReqActivityShop_ProtoModID_descriptor(), name, value);
}
enum stReqActivityShop_ProtoFunID {
  stReqActivityShop_ProtoFunID_FunID = 96
};
bool stReqActivityShop_ProtoFunID_IsValid(int value);
const stReqActivityShop_ProtoFunID stReqActivityShop_ProtoFunID_ProtoFunID_MIN = stReqActivityShop_ProtoFunID_FunID;
const stReqActivityShop_ProtoFunID stReqActivityShop_ProtoFunID_ProtoFunID_MAX = stReqActivityShop_ProtoFunID_FunID;
const int stReqActivityShop_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqActivityShop_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqActivityShop_ProtoFunID_descriptor();
inline const ::std::string& stReqActivityShop_ProtoFunID_Name(stReqActivityShop_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqActivityShop_ProtoFunID_descriptor(), value);
}
inline bool stReqActivityShop_ProtoFunID_Parse(
    const ::std::string& name, stReqActivityShop_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqActivityShop_ProtoFunID>(
    stReqActivityShop_ProtoFunID_descriptor(), name, value);
}
enum stActivityShopList_ProtoModID {
  stActivityShopList_ProtoModID_ModID = 8
};
bool stActivityShopList_ProtoModID_IsValid(int value);
const stActivityShopList_ProtoModID stActivityShopList_ProtoModID_ProtoModID_MIN = stActivityShopList_ProtoModID_ModID;
const stActivityShopList_ProtoModID stActivityShopList_ProtoModID_ProtoModID_MAX = stActivityShopList_ProtoModID_ModID;
const int stActivityShopList_ProtoModID_ProtoModID_ARRAYSIZE = stActivityShopList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stActivityShopList_ProtoModID_descriptor();
inline const ::std::string& stActivityShopList_ProtoModID_Name(stActivityShopList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stActivityShopList_ProtoModID_descriptor(), value);
}
inline bool stActivityShopList_ProtoModID_Parse(
    const ::std::string& name, stActivityShopList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stActivityShopList_ProtoModID>(
    stActivityShopList_ProtoModID_descriptor(), name, value);
}
enum stActivityShopList_ProtoFunID {
  stActivityShopList_ProtoFunID_FunID = 97
};
bool stActivityShopList_ProtoFunID_IsValid(int value);
const stActivityShopList_ProtoFunID stActivityShopList_ProtoFunID_ProtoFunID_MIN = stActivityShopList_ProtoFunID_FunID;
const stActivityShopList_ProtoFunID stActivityShopList_ProtoFunID_ProtoFunID_MAX = stActivityShopList_ProtoFunID_FunID;
const int stActivityShopList_ProtoFunID_ProtoFunID_ARRAYSIZE = stActivityShopList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stActivityShopList_ProtoFunID_descriptor();
inline const ::std::string& stActivityShopList_ProtoFunID_Name(stActivityShopList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stActivityShopList_ProtoFunID_descriptor(), value);
}
inline bool stActivityShopList_ProtoFunID_Parse(
    const ::std::string& name, stActivityShopList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stActivityShopList_ProtoFunID>(
    stActivityShopList_ProtoFunID_descriptor(), name, value);
}
enum stLuchShopInfo_ProtoModID {
  stLuchShopInfo_ProtoModID_ModID = 8
};
bool stLuchShopInfo_ProtoModID_IsValid(int value);
const stLuchShopInfo_ProtoModID stLuchShopInfo_ProtoModID_ProtoModID_MIN = stLuchShopInfo_ProtoModID_ModID;
const stLuchShopInfo_ProtoModID stLuchShopInfo_ProtoModID_ProtoModID_MAX = stLuchShopInfo_ProtoModID_ModID;
const int stLuchShopInfo_ProtoModID_ProtoModID_ARRAYSIZE = stLuchShopInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLuchShopInfo_ProtoModID_descriptor();
inline const ::std::string& stLuchShopInfo_ProtoModID_Name(stLuchShopInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLuchShopInfo_ProtoModID_descriptor(), value);
}
inline bool stLuchShopInfo_ProtoModID_Parse(
    const ::std::string& name, stLuchShopInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLuchShopInfo_ProtoModID>(
    stLuchShopInfo_ProtoModID_descriptor(), name, value);
}
enum stLuchShopInfo_ProtoFunID {
  stLuchShopInfo_ProtoFunID_FunID = 98
};
bool stLuchShopInfo_ProtoFunID_IsValid(int value);
const stLuchShopInfo_ProtoFunID stLuchShopInfo_ProtoFunID_ProtoFunID_MIN = stLuchShopInfo_ProtoFunID_FunID;
const stLuchShopInfo_ProtoFunID stLuchShopInfo_ProtoFunID_ProtoFunID_MAX = stLuchShopInfo_ProtoFunID_FunID;
const int stLuchShopInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stLuchShopInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLuchShopInfo_ProtoFunID_descriptor();
inline const ::std::string& stLuchShopInfo_ProtoFunID_Name(stLuchShopInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLuchShopInfo_ProtoFunID_descriptor(), value);
}
inline bool stLuchShopInfo_ProtoFunID_Parse(
    const ::std::string& name, stLuchShopInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLuchShopInfo_ProtoFunID>(
    stLuchShopInfo_ProtoFunID_descriptor(), name, value);
}
enum stSynLuckShopTodayRecharge_ProtoModID {
  stSynLuckShopTodayRecharge_ProtoModID_ModID = 8
};
bool stSynLuckShopTodayRecharge_ProtoModID_IsValid(int value);
const stSynLuckShopTodayRecharge_ProtoModID stSynLuckShopTodayRecharge_ProtoModID_ProtoModID_MIN = stSynLuckShopTodayRecharge_ProtoModID_ModID;
const stSynLuckShopTodayRecharge_ProtoModID stSynLuckShopTodayRecharge_ProtoModID_ProtoModID_MAX = stSynLuckShopTodayRecharge_ProtoModID_ModID;
const int stSynLuckShopTodayRecharge_ProtoModID_ProtoModID_ARRAYSIZE = stSynLuckShopTodayRecharge_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynLuckShopTodayRecharge_ProtoModID_descriptor();
inline const ::std::string& stSynLuckShopTodayRecharge_ProtoModID_Name(stSynLuckShopTodayRecharge_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynLuckShopTodayRecharge_ProtoModID_descriptor(), value);
}
inline bool stSynLuckShopTodayRecharge_ProtoModID_Parse(
    const ::std::string& name, stSynLuckShopTodayRecharge_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynLuckShopTodayRecharge_ProtoModID>(
    stSynLuckShopTodayRecharge_ProtoModID_descriptor(), name, value);
}
enum stSynLuckShopTodayRecharge_ProtoFunID {
  stSynLuckShopTodayRecharge_ProtoFunID_FunID = 99
};
bool stSynLuckShopTodayRecharge_ProtoFunID_IsValid(int value);
const stSynLuckShopTodayRecharge_ProtoFunID stSynLuckShopTodayRecharge_ProtoFunID_ProtoFunID_MIN = stSynLuckShopTodayRecharge_ProtoFunID_FunID;
const stSynLuckShopTodayRecharge_ProtoFunID stSynLuckShopTodayRecharge_ProtoFunID_ProtoFunID_MAX = stSynLuckShopTodayRecharge_ProtoFunID_FunID;
const int stSynLuckShopTodayRecharge_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynLuckShopTodayRecharge_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynLuckShopTodayRecharge_ProtoFunID_descriptor();
inline const ::std::string& stSynLuckShopTodayRecharge_ProtoFunID_Name(stSynLuckShopTodayRecharge_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynLuckShopTodayRecharge_ProtoFunID_descriptor(), value);
}
inline bool stSynLuckShopTodayRecharge_ProtoFunID_Parse(
    const ::std::string& name, stSynLuckShopTodayRecharge_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynLuckShopTodayRecharge_ProtoFunID>(
    stSynLuckShopTodayRecharge_ProtoFunID_descriptor(), name, value);
}
enum stReqLuckShopReward_ProtoModID {
  stReqLuckShopReward_ProtoModID_ModID = 8
};
bool stReqLuckShopReward_ProtoModID_IsValid(int value);
const stReqLuckShopReward_ProtoModID stReqLuckShopReward_ProtoModID_ProtoModID_MIN = stReqLuckShopReward_ProtoModID_ModID;
const stReqLuckShopReward_ProtoModID stReqLuckShopReward_ProtoModID_ProtoModID_MAX = stReqLuckShopReward_ProtoModID_ModID;
const int stReqLuckShopReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqLuckShopReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLuckShopReward_ProtoModID_descriptor();
inline const ::std::string& stReqLuckShopReward_ProtoModID_Name(stReqLuckShopReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLuckShopReward_ProtoModID_descriptor(), value);
}
inline bool stReqLuckShopReward_ProtoModID_Parse(
    const ::std::string& name, stReqLuckShopReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLuckShopReward_ProtoModID>(
    stReqLuckShopReward_ProtoModID_descriptor(), name, value);
}
enum stReqLuckShopReward_ProtoFunID {
  stReqLuckShopReward_ProtoFunID_FunID = 100
};
bool stReqLuckShopReward_ProtoFunID_IsValid(int value);
const stReqLuckShopReward_ProtoFunID stReqLuckShopReward_ProtoFunID_ProtoFunID_MIN = stReqLuckShopReward_ProtoFunID_FunID;
const stReqLuckShopReward_ProtoFunID stReqLuckShopReward_ProtoFunID_ProtoFunID_MAX = stReqLuckShopReward_ProtoFunID_FunID;
const int stReqLuckShopReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLuckShopReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLuckShopReward_ProtoFunID_descriptor();
inline const ::std::string& stReqLuckShopReward_ProtoFunID_Name(stReqLuckShopReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLuckShopReward_ProtoFunID_descriptor(), value);
}
inline bool stReqLuckShopReward_ProtoFunID_Parse(
    const ::std::string& name, stReqLuckShopReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLuckShopReward_ProtoFunID>(
    stReqLuckShopReward_ProtoFunID_descriptor(), name, value);
}
enum stLuckShopRewardResult_eResult {
  stLuckShopRewardResult_eResult_eSuccess = 1,
  stLuckShopRewardResult_eResult_eHas_Got_Reward = 2,
  stLuckShopRewardResult_eResult_eRecharge_Not_Enough = 3,
  stLuckShopRewardResult_eResult_eBag_Full = 4,
  stLuckShopRewardResult_eResult_eInner_Error = 5
};
bool stLuckShopRewardResult_eResult_IsValid(int value);
const stLuckShopRewardResult_eResult stLuckShopRewardResult_eResult_eResult_MIN = stLuckShopRewardResult_eResult_eSuccess;
const stLuckShopRewardResult_eResult stLuckShopRewardResult_eResult_eResult_MAX = stLuckShopRewardResult_eResult_eInner_Error;
const int stLuckShopRewardResult_eResult_eResult_ARRAYSIZE = stLuckShopRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLuckShopRewardResult_eResult_descriptor();
inline const ::std::string& stLuckShopRewardResult_eResult_Name(stLuckShopRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLuckShopRewardResult_eResult_descriptor(), value);
}
inline bool stLuckShopRewardResult_eResult_Parse(
    const ::std::string& name, stLuckShopRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLuckShopRewardResult_eResult>(
    stLuckShopRewardResult_eResult_descriptor(), name, value);
}
enum stLuckShopRewardResult_ProtoModID {
  stLuckShopRewardResult_ProtoModID_ModID = 8
};
bool stLuckShopRewardResult_ProtoModID_IsValid(int value);
const stLuckShopRewardResult_ProtoModID stLuckShopRewardResult_ProtoModID_ProtoModID_MIN = stLuckShopRewardResult_ProtoModID_ModID;
const stLuckShopRewardResult_ProtoModID stLuckShopRewardResult_ProtoModID_ProtoModID_MAX = stLuckShopRewardResult_ProtoModID_ModID;
const int stLuckShopRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stLuckShopRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLuckShopRewardResult_ProtoModID_descriptor();
inline const ::std::string& stLuckShopRewardResult_ProtoModID_Name(stLuckShopRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLuckShopRewardResult_ProtoModID_descriptor(), value);
}
inline bool stLuckShopRewardResult_ProtoModID_Parse(
    const ::std::string& name, stLuckShopRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLuckShopRewardResult_ProtoModID>(
    stLuckShopRewardResult_ProtoModID_descriptor(), name, value);
}
enum stLuckShopRewardResult_ProtoFunID {
  stLuckShopRewardResult_ProtoFunID_FunID = 101
};
bool stLuckShopRewardResult_ProtoFunID_IsValid(int value);
const stLuckShopRewardResult_ProtoFunID stLuckShopRewardResult_ProtoFunID_ProtoFunID_MIN = stLuckShopRewardResult_ProtoFunID_FunID;
const stLuckShopRewardResult_ProtoFunID stLuckShopRewardResult_ProtoFunID_ProtoFunID_MAX = stLuckShopRewardResult_ProtoFunID_FunID;
const int stLuckShopRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stLuckShopRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLuckShopRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stLuckShopRewardResult_ProtoFunID_Name(stLuckShopRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLuckShopRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stLuckShopRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stLuckShopRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLuckShopRewardResult_ProtoFunID>(
    stLuckShopRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stSaveOpenLuckShopWinTime_ProtoModID {
  stSaveOpenLuckShopWinTime_ProtoModID_ModID = 8
};
bool stSaveOpenLuckShopWinTime_ProtoModID_IsValid(int value);
const stSaveOpenLuckShopWinTime_ProtoModID stSaveOpenLuckShopWinTime_ProtoModID_ProtoModID_MIN = stSaveOpenLuckShopWinTime_ProtoModID_ModID;
const stSaveOpenLuckShopWinTime_ProtoModID stSaveOpenLuckShopWinTime_ProtoModID_ProtoModID_MAX = stSaveOpenLuckShopWinTime_ProtoModID_ModID;
const int stSaveOpenLuckShopWinTime_ProtoModID_ProtoModID_ARRAYSIZE = stSaveOpenLuckShopWinTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSaveOpenLuckShopWinTime_ProtoModID_descriptor();
inline const ::std::string& stSaveOpenLuckShopWinTime_ProtoModID_Name(stSaveOpenLuckShopWinTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSaveOpenLuckShopWinTime_ProtoModID_descriptor(), value);
}
inline bool stSaveOpenLuckShopWinTime_ProtoModID_Parse(
    const ::std::string& name, stSaveOpenLuckShopWinTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSaveOpenLuckShopWinTime_ProtoModID>(
    stSaveOpenLuckShopWinTime_ProtoModID_descriptor(), name, value);
}
enum stSaveOpenLuckShopWinTime_ProtoFunID {
  stSaveOpenLuckShopWinTime_ProtoFunID_FunID = 102
};
bool stSaveOpenLuckShopWinTime_ProtoFunID_IsValid(int value);
const stSaveOpenLuckShopWinTime_ProtoFunID stSaveOpenLuckShopWinTime_ProtoFunID_ProtoFunID_MIN = stSaveOpenLuckShopWinTime_ProtoFunID_FunID;
const stSaveOpenLuckShopWinTime_ProtoFunID stSaveOpenLuckShopWinTime_ProtoFunID_ProtoFunID_MAX = stSaveOpenLuckShopWinTime_ProtoFunID_FunID;
const int stSaveOpenLuckShopWinTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stSaveOpenLuckShopWinTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSaveOpenLuckShopWinTime_ProtoFunID_descriptor();
inline const ::std::string& stSaveOpenLuckShopWinTime_ProtoFunID_Name(stSaveOpenLuckShopWinTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSaveOpenLuckShopWinTime_ProtoFunID_descriptor(), value);
}
inline bool stSaveOpenLuckShopWinTime_ProtoFunID_Parse(
    const ::std::string& name, stSaveOpenLuckShopWinTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSaveOpenLuckShopWinTime_ProtoFunID>(
    stSaveOpenLuckShopWinTime_ProtoFunID_descriptor(), name, value);
}
enum stLuckShopRechargeMeetCondTime_ProtoModID {
  stLuckShopRechargeMeetCondTime_ProtoModID_ModID = 8
};
bool stLuckShopRechargeMeetCondTime_ProtoModID_IsValid(int value);
const stLuckShopRechargeMeetCondTime_ProtoModID stLuckShopRechargeMeetCondTime_ProtoModID_ProtoModID_MIN = stLuckShopRechargeMeetCondTime_ProtoModID_ModID;
const stLuckShopRechargeMeetCondTime_ProtoModID stLuckShopRechargeMeetCondTime_ProtoModID_ProtoModID_MAX = stLuckShopRechargeMeetCondTime_ProtoModID_ModID;
const int stLuckShopRechargeMeetCondTime_ProtoModID_ProtoModID_ARRAYSIZE = stLuckShopRechargeMeetCondTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLuckShopRechargeMeetCondTime_ProtoModID_descriptor();
inline const ::std::string& stLuckShopRechargeMeetCondTime_ProtoModID_Name(stLuckShopRechargeMeetCondTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLuckShopRechargeMeetCondTime_ProtoModID_descriptor(), value);
}
inline bool stLuckShopRechargeMeetCondTime_ProtoModID_Parse(
    const ::std::string& name, stLuckShopRechargeMeetCondTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLuckShopRechargeMeetCondTime_ProtoModID>(
    stLuckShopRechargeMeetCondTime_ProtoModID_descriptor(), name, value);
}
enum stLuckShopRechargeMeetCondTime_ProtoFunID {
  stLuckShopRechargeMeetCondTime_ProtoFunID_FunID = 103
};
bool stLuckShopRechargeMeetCondTime_ProtoFunID_IsValid(int value);
const stLuckShopRechargeMeetCondTime_ProtoFunID stLuckShopRechargeMeetCondTime_ProtoFunID_ProtoFunID_MIN = stLuckShopRechargeMeetCondTime_ProtoFunID_FunID;
const stLuckShopRechargeMeetCondTime_ProtoFunID stLuckShopRechargeMeetCondTime_ProtoFunID_ProtoFunID_MAX = stLuckShopRechargeMeetCondTime_ProtoFunID_FunID;
const int stLuckShopRechargeMeetCondTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stLuckShopRechargeMeetCondTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLuckShopRechargeMeetCondTime_ProtoFunID_descriptor();
inline const ::std::string& stLuckShopRechargeMeetCondTime_ProtoFunID_Name(stLuckShopRechargeMeetCondTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLuckShopRechargeMeetCondTime_ProtoFunID_descriptor(), value);
}
inline bool stLuckShopRechargeMeetCondTime_ProtoFunID_Parse(
    const ::std::string& name, stLuckShopRechargeMeetCondTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLuckShopRechargeMeetCondTime_ProtoFunID>(
    stLuckShopRechargeMeetCondTime_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenGuardWin_ProtoModID {
  stReqOpenGuardWin_ProtoModID_ModID = 8
};
bool stReqOpenGuardWin_ProtoModID_IsValid(int value);
const stReqOpenGuardWin_ProtoModID stReqOpenGuardWin_ProtoModID_ProtoModID_MIN = stReqOpenGuardWin_ProtoModID_ModID;
const stReqOpenGuardWin_ProtoModID stReqOpenGuardWin_ProtoModID_ProtoModID_MAX = stReqOpenGuardWin_ProtoModID_ModID;
const int stReqOpenGuardWin_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenGuardWin_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenGuardWin_ProtoModID_descriptor();
inline const ::std::string& stReqOpenGuardWin_ProtoModID_Name(stReqOpenGuardWin_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenGuardWin_ProtoModID_descriptor(), value);
}
inline bool stReqOpenGuardWin_ProtoModID_Parse(
    const ::std::string& name, stReqOpenGuardWin_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenGuardWin_ProtoModID>(
    stReqOpenGuardWin_ProtoModID_descriptor(), name, value);
}
enum stReqOpenGuardWin_ProtoFunID {
  stReqOpenGuardWin_ProtoFunID_FunID = 104
};
bool stReqOpenGuardWin_ProtoFunID_IsValid(int value);
const stReqOpenGuardWin_ProtoFunID stReqOpenGuardWin_ProtoFunID_ProtoFunID_MIN = stReqOpenGuardWin_ProtoFunID_FunID;
const stReqOpenGuardWin_ProtoFunID stReqOpenGuardWin_ProtoFunID_ProtoFunID_MAX = stReqOpenGuardWin_ProtoFunID_FunID;
const int stReqOpenGuardWin_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenGuardWin_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenGuardWin_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenGuardWin_ProtoFunID_Name(stReqOpenGuardWin_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenGuardWin_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenGuardWin_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenGuardWin_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenGuardWin_ProtoFunID>(
    stReqOpenGuardWin_ProtoFunID_descriptor(), name, value);
}
enum stGuardWinInfo_ProtoModID {
  stGuardWinInfo_ProtoModID_ModID = 8
};
bool stGuardWinInfo_ProtoModID_IsValid(int value);
const stGuardWinInfo_ProtoModID stGuardWinInfo_ProtoModID_ProtoModID_MIN = stGuardWinInfo_ProtoModID_ModID;
const stGuardWinInfo_ProtoModID stGuardWinInfo_ProtoModID_ProtoModID_MAX = stGuardWinInfo_ProtoModID_ModID;
const int stGuardWinInfo_ProtoModID_ProtoModID_ARRAYSIZE = stGuardWinInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuardWinInfo_ProtoModID_descriptor();
inline const ::std::string& stGuardWinInfo_ProtoModID_Name(stGuardWinInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuardWinInfo_ProtoModID_descriptor(), value);
}
inline bool stGuardWinInfo_ProtoModID_Parse(
    const ::std::string& name, stGuardWinInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuardWinInfo_ProtoModID>(
    stGuardWinInfo_ProtoModID_descriptor(), name, value);
}
enum stGuardWinInfo_ProtoFunID {
  stGuardWinInfo_ProtoFunID_FunID = 105
};
bool stGuardWinInfo_ProtoFunID_IsValid(int value);
const stGuardWinInfo_ProtoFunID stGuardWinInfo_ProtoFunID_ProtoFunID_MIN = stGuardWinInfo_ProtoFunID_FunID;
const stGuardWinInfo_ProtoFunID stGuardWinInfo_ProtoFunID_ProtoFunID_MAX = stGuardWinInfo_ProtoFunID_FunID;
const int stGuardWinInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuardWinInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuardWinInfo_ProtoFunID_descriptor();
inline const ::std::string& stGuardWinInfo_ProtoFunID_Name(stGuardWinInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuardWinInfo_ProtoFunID_descriptor(), value);
}
inline bool stGuardWinInfo_ProtoFunID_Parse(
    const ::std::string& name, stGuardWinInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuardWinInfo_ProtoFunID>(
    stGuardWinInfo_ProtoFunID_descriptor(), name, value);
}
enum stResetInterceptCD_ProtoModID {
  stResetInterceptCD_ProtoModID_ModID = 8
};
bool stResetInterceptCD_ProtoModID_IsValid(int value);
const stResetInterceptCD_ProtoModID stResetInterceptCD_ProtoModID_ProtoModID_MIN = stResetInterceptCD_ProtoModID_ModID;
const stResetInterceptCD_ProtoModID stResetInterceptCD_ProtoModID_ProtoModID_MAX = stResetInterceptCD_ProtoModID_ModID;
const int stResetInterceptCD_ProtoModID_ProtoModID_ARRAYSIZE = stResetInterceptCD_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetInterceptCD_ProtoModID_descriptor();
inline const ::std::string& stResetInterceptCD_ProtoModID_Name(stResetInterceptCD_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetInterceptCD_ProtoModID_descriptor(), value);
}
inline bool stResetInterceptCD_ProtoModID_Parse(
    const ::std::string& name, stResetInterceptCD_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetInterceptCD_ProtoModID>(
    stResetInterceptCD_ProtoModID_descriptor(), name, value);
}
enum stResetInterceptCD_ProtoFunID {
  stResetInterceptCD_ProtoFunID_FunID = 106
};
bool stResetInterceptCD_ProtoFunID_IsValid(int value);
const stResetInterceptCD_ProtoFunID stResetInterceptCD_ProtoFunID_ProtoFunID_MIN = stResetInterceptCD_ProtoFunID_FunID;
const stResetInterceptCD_ProtoFunID stResetInterceptCD_ProtoFunID_ProtoFunID_MAX = stResetInterceptCD_ProtoFunID_FunID;
const int stResetInterceptCD_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetInterceptCD_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetInterceptCD_ProtoFunID_descriptor();
inline const ::std::string& stResetInterceptCD_ProtoFunID_Name(stResetInterceptCD_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetInterceptCD_ProtoFunID_descriptor(), value);
}
inline bool stResetInterceptCD_ProtoFunID_Parse(
    const ::std::string& name, stResetInterceptCD_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetInterceptCD_ProtoFunID>(
    stResetInterceptCD_ProtoFunID_descriptor(), name, value);
}
enum stResetInterceptCDResult_eResult {
  stResetInterceptCDResult_eResult_eSuccess = 1,
  stResetInterceptCDResult_eResult_eDiamond_Not_Enough = 2,
  stResetInterceptCDResult_eResult_eInner_Cfg_Error = 3
};
bool stResetInterceptCDResult_eResult_IsValid(int value);
const stResetInterceptCDResult_eResult stResetInterceptCDResult_eResult_eResult_MIN = stResetInterceptCDResult_eResult_eSuccess;
const stResetInterceptCDResult_eResult stResetInterceptCDResult_eResult_eResult_MAX = stResetInterceptCDResult_eResult_eInner_Cfg_Error;
const int stResetInterceptCDResult_eResult_eResult_ARRAYSIZE = stResetInterceptCDResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetInterceptCDResult_eResult_descriptor();
inline const ::std::string& stResetInterceptCDResult_eResult_Name(stResetInterceptCDResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetInterceptCDResult_eResult_descriptor(), value);
}
inline bool stResetInterceptCDResult_eResult_Parse(
    const ::std::string& name, stResetInterceptCDResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetInterceptCDResult_eResult>(
    stResetInterceptCDResult_eResult_descriptor(), name, value);
}
enum stResetInterceptCDResult_ProtoModID {
  stResetInterceptCDResult_ProtoModID_ModID = 8
};
bool stResetInterceptCDResult_ProtoModID_IsValid(int value);
const stResetInterceptCDResult_ProtoModID stResetInterceptCDResult_ProtoModID_ProtoModID_MIN = stResetInterceptCDResult_ProtoModID_ModID;
const stResetInterceptCDResult_ProtoModID stResetInterceptCDResult_ProtoModID_ProtoModID_MAX = stResetInterceptCDResult_ProtoModID_ModID;
const int stResetInterceptCDResult_ProtoModID_ProtoModID_ARRAYSIZE = stResetInterceptCDResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetInterceptCDResult_ProtoModID_descriptor();
inline const ::std::string& stResetInterceptCDResult_ProtoModID_Name(stResetInterceptCDResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetInterceptCDResult_ProtoModID_descriptor(), value);
}
inline bool stResetInterceptCDResult_ProtoModID_Parse(
    const ::std::string& name, stResetInterceptCDResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetInterceptCDResult_ProtoModID>(
    stResetInterceptCDResult_ProtoModID_descriptor(), name, value);
}
enum stResetInterceptCDResult_ProtoFunID {
  stResetInterceptCDResult_ProtoFunID_FunID = 107
};
bool stResetInterceptCDResult_ProtoFunID_IsValid(int value);
const stResetInterceptCDResult_ProtoFunID stResetInterceptCDResult_ProtoFunID_ProtoFunID_MIN = stResetInterceptCDResult_ProtoFunID_FunID;
const stResetInterceptCDResult_ProtoFunID stResetInterceptCDResult_ProtoFunID_ProtoFunID_MAX = stResetInterceptCDResult_ProtoFunID_FunID;
const int stResetInterceptCDResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetInterceptCDResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetInterceptCDResult_ProtoFunID_descriptor();
inline const ::std::string& stResetInterceptCDResult_ProtoFunID_Name(stResetInterceptCDResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetInterceptCDResult_ProtoFunID_descriptor(), value);
}
inline bool stResetInterceptCDResult_ProtoFunID_Parse(
    const ::std::string& name, stResetInterceptCDResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetInterceptCDResult_ProtoFunID>(
    stResetInterceptCDResult_ProtoFunID_descriptor(), name, value);
}
enum stResetInterceptNum_ProtoModID {
  stResetInterceptNum_ProtoModID_ModID = 8
};
bool stResetInterceptNum_ProtoModID_IsValid(int value);
const stResetInterceptNum_ProtoModID stResetInterceptNum_ProtoModID_ProtoModID_MIN = stResetInterceptNum_ProtoModID_ModID;
const stResetInterceptNum_ProtoModID stResetInterceptNum_ProtoModID_ProtoModID_MAX = stResetInterceptNum_ProtoModID_ModID;
const int stResetInterceptNum_ProtoModID_ProtoModID_ARRAYSIZE = stResetInterceptNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetInterceptNum_ProtoModID_descriptor();
inline const ::std::string& stResetInterceptNum_ProtoModID_Name(stResetInterceptNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetInterceptNum_ProtoModID_descriptor(), value);
}
inline bool stResetInterceptNum_ProtoModID_Parse(
    const ::std::string& name, stResetInterceptNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetInterceptNum_ProtoModID>(
    stResetInterceptNum_ProtoModID_descriptor(), name, value);
}
enum stResetInterceptNum_ProtoFunID {
  stResetInterceptNum_ProtoFunID_FunID = 108
};
bool stResetInterceptNum_ProtoFunID_IsValid(int value);
const stResetInterceptNum_ProtoFunID stResetInterceptNum_ProtoFunID_ProtoFunID_MIN = stResetInterceptNum_ProtoFunID_FunID;
const stResetInterceptNum_ProtoFunID stResetInterceptNum_ProtoFunID_ProtoFunID_MAX = stResetInterceptNum_ProtoFunID_FunID;
const int stResetInterceptNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetInterceptNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetInterceptNum_ProtoFunID_descriptor();
inline const ::std::string& stResetInterceptNum_ProtoFunID_Name(stResetInterceptNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetInterceptNum_ProtoFunID_descriptor(), value);
}
inline bool stResetInterceptNum_ProtoFunID_Parse(
    const ::std::string& name, stResetInterceptNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetInterceptNum_ProtoFunID>(
    stResetInterceptNum_ProtoFunID_descriptor(), name, value);
}
enum stResetInterceptNumResult_eResult {
  stResetInterceptNumResult_eResult_eSuccess = 1,
  stResetInterceptNumResult_eResult_eDiamond_Not_Enough = 2,
  stResetInterceptNumResult_eResult_eInner_Cfg_Error = 3,
  stResetInterceptNumResult_eResult_eNum_Use_Out = 4
};
bool stResetInterceptNumResult_eResult_IsValid(int value);
const stResetInterceptNumResult_eResult stResetInterceptNumResult_eResult_eResult_MIN = stResetInterceptNumResult_eResult_eSuccess;
const stResetInterceptNumResult_eResult stResetInterceptNumResult_eResult_eResult_MAX = stResetInterceptNumResult_eResult_eNum_Use_Out;
const int stResetInterceptNumResult_eResult_eResult_ARRAYSIZE = stResetInterceptNumResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetInterceptNumResult_eResult_descriptor();
inline const ::std::string& stResetInterceptNumResult_eResult_Name(stResetInterceptNumResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetInterceptNumResult_eResult_descriptor(), value);
}
inline bool stResetInterceptNumResult_eResult_Parse(
    const ::std::string& name, stResetInterceptNumResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetInterceptNumResult_eResult>(
    stResetInterceptNumResult_eResult_descriptor(), name, value);
}
enum stResetInterceptNumResult_ProtoModID {
  stResetInterceptNumResult_ProtoModID_ModID = 8
};
bool stResetInterceptNumResult_ProtoModID_IsValid(int value);
const stResetInterceptNumResult_ProtoModID stResetInterceptNumResult_ProtoModID_ProtoModID_MIN = stResetInterceptNumResult_ProtoModID_ModID;
const stResetInterceptNumResult_ProtoModID stResetInterceptNumResult_ProtoModID_ProtoModID_MAX = stResetInterceptNumResult_ProtoModID_ModID;
const int stResetInterceptNumResult_ProtoModID_ProtoModID_ARRAYSIZE = stResetInterceptNumResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetInterceptNumResult_ProtoModID_descriptor();
inline const ::std::string& stResetInterceptNumResult_ProtoModID_Name(stResetInterceptNumResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetInterceptNumResult_ProtoModID_descriptor(), value);
}
inline bool stResetInterceptNumResult_ProtoModID_Parse(
    const ::std::string& name, stResetInterceptNumResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetInterceptNumResult_ProtoModID>(
    stResetInterceptNumResult_ProtoModID_descriptor(), name, value);
}
enum stResetInterceptNumResult_ProtoFunID {
  stResetInterceptNumResult_ProtoFunID_FunID = 109
};
bool stResetInterceptNumResult_ProtoFunID_IsValid(int value);
const stResetInterceptNumResult_ProtoFunID stResetInterceptNumResult_ProtoFunID_ProtoFunID_MIN = stResetInterceptNumResult_ProtoFunID_FunID;
const stResetInterceptNumResult_ProtoFunID stResetInterceptNumResult_ProtoFunID_ProtoFunID_MAX = stResetInterceptNumResult_ProtoFunID_FunID;
const int stResetInterceptNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetInterceptNumResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetInterceptNumResult_ProtoFunID_descriptor();
inline const ::std::string& stResetInterceptNumResult_ProtoFunID_Name(stResetInterceptNumResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetInterceptNumResult_ProtoFunID_descriptor(), value);
}
inline bool stResetInterceptNumResult_ProtoFunID_Parse(
    const ::std::string& name, stResetInterceptNumResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetInterceptNumResult_ProtoFunID>(
    stResetInterceptNumResult_ProtoFunID_descriptor(), name, value);
}
enum stReqGuardDetailInfo_ProtoModID {
  stReqGuardDetailInfo_ProtoModID_ModID = 8
};
bool stReqGuardDetailInfo_ProtoModID_IsValid(int value);
const stReqGuardDetailInfo_ProtoModID stReqGuardDetailInfo_ProtoModID_ProtoModID_MIN = stReqGuardDetailInfo_ProtoModID_ModID;
const stReqGuardDetailInfo_ProtoModID stReqGuardDetailInfo_ProtoModID_ProtoModID_MAX = stReqGuardDetailInfo_ProtoModID_ModID;
const int stReqGuardDetailInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqGuardDetailInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuardDetailInfo_ProtoModID_descriptor();
inline const ::std::string& stReqGuardDetailInfo_ProtoModID_Name(stReqGuardDetailInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuardDetailInfo_ProtoModID_descriptor(), value);
}
inline bool stReqGuardDetailInfo_ProtoModID_Parse(
    const ::std::string& name, stReqGuardDetailInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuardDetailInfo_ProtoModID>(
    stReqGuardDetailInfo_ProtoModID_descriptor(), name, value);
}
enum stReqGuardDetailInfo_ProtoFunID {
  stReqGuardDetailInfo_ProtoFunID_FunID = 110
};
bool stReqGuardDetailInfo_ProtoFunID_IsValid(int value);
const stReqGuardDetailInfo_ProtoFunID stReqGuardDetailInfo_ProtoFunID_ProtoFunID_MIN = stReqGuardDetailInfo_ProtoFunID_FunID;
const stReqGuardDetailInfo_ProtoFunID stReqGuardDetailInfo_ProtoFunID_ProtoFunID_MAX = stReqGuardDetailInfo_ProtoFunID_FunID;
const int stReqGuardDetailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGuardDetailInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuardDetailInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqGuardDetailInfo_ProtoFunID_Name(stReqGuardDetailInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuardDetailInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqGuardDetailInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqGuardDetailInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuardDetailInfo_ProtoFunID>(
    stReqGuardDetailInfo_ProtoFunID_descriptor(), name, value);
}
enum stRetGuardDetailInfo_ProtoModID {
  stRetGuardDetailInfo_ProtoModID_ModID = 8
};
bool stRetGuardDetailInfo_ProtoModID_IsValid(int value);
const stRetGuardDetailInfo_ProtoModID stRetGuardDetailInfo_ProtoModID_ProtoModID_MIN = stRetGuardDetailInfo_ProtoModID_ModID;
const stRetGuardDetailInfo_ProtoModID stRetGuardDetailInfo_ProtoModID_ProtoModID_MAX = stRetGuardDetailInfo_ProtoModID_ModID;
const int stRetGuardDetailInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetGuardDetailInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuardDetailInfo_ProtoModID_descriptor();
inline const ::std::string& stRetGuardDetailInfo_ProtoModID_Name(stRetGuardDetailInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuardDetailInfo_ProtoModID_descriptor(), value);
}
inline bool stRetGuardDetailInfo_ProtoModID_Parse(
    const ::std::string& name, stRetGuardDetailInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuardDetailInfo_ProtoModID>(
    stRetGuardDetailInfo_ProtoModID_descriptor(), name, value);
}
enum stRetGuardDetailInfo_ProtoFunID {
  stRetGuardDetailInfo_ProtoFunID_FunID = 111
};
bool stRetGuardDetailInfo_ProtoFunID_IsValid(int value);
const stRetGuardDetailInfo_ProtoFunID stRetGuardDetailInfo_ProtoFunID_ProtoFunID_MIN = stRetGuardDetailInfo_ProtoFunID_FunID;
const stRetGuardDetailInfo_ProtoFunID stRetGuardDetailInfo_ProtoFunID_ProtoFunID_MAX = stRetGuardDetailInfo_ProtoFunID_FunID;
const int stRetGuardDetailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetGuardDetailInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuardDetailInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetGuardDetailInfo_ProtoFunID_Name(stRetGuardDetailInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuardDetailInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetGuardDetailInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetGuardDetailInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuardDetailInfo_ProtoFunID>(
    stRetGuardDetailInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqIntercept_ProtoModID {
  stReqIntercept_ProtoModID_ModID = 8
};
bool stReqIntercept_ProtoModID_IsValid(int value);
const stReqIntercept_ProtoModID stReqIntercept_ProtoModID_ProtoModID_MIN = stReqIntercept_ProtoModID_ModID;
const stReqIntercept_ProtoModID stReqIntercept_ProtoModID_ProtoModID_MAX = stReqIntercept_ProtoModID_ModID;
const int stReqIntercept_ProtoModID_ProtoModID_ARRAYSIZE = stReqIntercept_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqIntercept_ProtoModID_descriptor();
inline const ::std::string& stReqIntercept_ProtoModID_Name(stReqIntercept_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqIntercept_ProtoModID_descriptor(), value);
}
inline bool stReqIntercept_ProtoModID_Parse(
    const ::std::string& name, stReqIntercept_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqIntercept_ProtoModID>(
    stReqIntercept_ProtoModID_descriptor(), name, value);
}
enum stReqIntercept_ProtoFunID {
  stReqIntercept_ProtoFunID_FunID = 112
};
bool stReqIntercept_ProtoFunID_IsValid(int value);
const stReqIntercept_ProtoFunID stReqIntercept_ProtoFunID_ProtoFunID_MIN = stReqIntercept_ProtoFunID_FunID;
const stReqIntercept_ProtoFunID stReqIntercept_ProtoFunID_ProtoFunID_MAX = stReqIntercept_ProtoFunID_FunID;
const int stReqIntercept_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqIntercept_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqIntercept_ProtoFunID_descriptor();
inline const ::std::string& stReqIntercept_ProtoFunID_Name(stReqIntercept_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqIntercept_ProtoFunID_descriptor(), value);
}
inline bool stReqIntercept_ProtoFunID_Parse(
    const ::std::string& name, stReqIntercept_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqIntercept_ProtoFunID>(
    stReqIntercept_ProtoFunID_descriptor(), name, value);
}
enum stIntercerptResult_eResult {
  stIntercerptResult_eResult_eSuccess = 1,
  stIntercerptResult_eResult_eNot_Begin_Guard = 2,
  stIntercerptResult_eResult_eIntercept_Num_Use_Out = 3,
  stIntercerptResult_eResult_eBeing_Intercepted = 4,
  stIntercerptResult_eResult_eSafe_State = 5,
  stIntercerptResult_eResult_eBeIntercept_Num_Use_Out = 6,
  stIntercerptResult_eResult_eHelp_This_Guard = 7
};
bool stIntercerptResult_eResult_IsValid(int value);
const stIntercerptResult_eResult stIntercerptResult_eResult_eResult_MIN = stIntercerptResult_eResult_eSuccess;
const stIntercerptResult_eResult stIntercerptResult_eResult_eResult_MAX = stIntercerptResult_eResult_eHelp_This_Guard;
const int stIntercerptResult_eResult_eResult_ARRAYSIZE = stIntercerptResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stIntercerptResult_eResult_descriptor();
inline const ::std::string& stIntercerptResult_eResult_Name(stIntercerptResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stIntercerptResult_eResult_descriptor(), value);
}
inline bool stIntercerptResult_eResult_Parse(
    const ::std::string& name, stIntercerptResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stIntercerptResult_eResult>(
    stIntercerptResult_eResult_descriptor(), name, value);
}
enum stIntercerptResult_ProtoModID {
  stIntercerptResult_ProtoModID_ModID = 8
};
bool stIntercerptResult_ProtoModID_IsValid(int value);
const stIntercerptResult_ProtoModID stIntercerptResult_ProtoModID_ProtoModID_MIN = stIntercerptResult_ProtoModID_ModID;
const stIntercerptResult_ProtoModID stIntercerptResult_ProtoModID_ProtoModID_MAX = stIntercerptResult_ProtoModID_ModID;
const int stIntercerptResult_ProtoModID_ProtoModID_ARRAYSIZE = stIntercerptResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stIntercerptResult_ProtoModID_descriptor();
inline const ::std::string& stIntercerptResult_ProtoModID_Name(stIntercerptResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stIntercerptResult_ProtoModID_descriptor(), value);
}
inline bool stIntercerptResult_ProtoModID_Parse(
    const ::std::string& name, stIntercerptResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stIntercerptResult_ProtoModID>(
    stIntercerptResult_ProtoModID_descriptor(), name, value);
}
enum stIntercerptResult_ProtoFunID {
  stIntercerptResult_ProtoFunID_FunID = 113
};
bool stIntercerptResult_ProtoFunID_IsValid(int value);
const stIntercerptResult_ProtoFunID stIntercerptResult_ProtoFunID_ProtoFunID_MIN = stIntercerptResult_ProtoFunID_FunID;
const stIntercerptResult_ProtoFunID stIntercerptResult_ProtoFunID_ProtoFunID_MAX = stIntercerptResult_ProtoFunID_FunID;
const int stIntercerptResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stIntercerptResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stIntercerptResult_ProtoFunID_descriptor();
inline const ::std::string& stIntercerptResult_ProtoFunID_Name(stIntercerptResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stIntercerptResult_ProtoFunID_descriptor(), value);
}
inline bool stIntercerptResult_ProtoFunID_Parse(
    const ::std::string& name, stIntercerptResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stIntercerptResult_ProtoFunID>(
    stIntercerptResult_ProtoFunID_descriptor(), name, value);
}
enum stReqGuard_ProtoModID {
  stReqGuard_ProtoModID_ModID = 8
};
bool stReqGuard_ProtoModID_IsValid(int value);
const stReqGuard_ProtoModID stReqGuard_ProtoModID_ProtoModID_MIN = stReqGuard_ProtoModID_ModID;
const stReqGuard_ProtoModID stReqGuard_ProtoModID_ProtoModID_MAX = stReqGuard_ProtoModID_ModID;
const int stReqGuard_ProtoModID_ProtoModID_ARRAYSIZE = stReqGuard_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuard_ProtoModID_descriptor();
inline const ::std::string& stReqGuard_ProtoModID_Name(stReqGuard_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuard_ProtoModID_descriptor(), value);
}
inline bool stReqGuard_ProtoModID_Parse(
    const ::std::string& name, stReqGuard_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuard_ProtoModID>(
    stReqGuard_ProtoModID_descriptor(), name, value);
}
enum stReqGuard_ProtoFunID {
  stReqGuard_ProtoFunID_FunID = 114
};
bool stReqGuard_ProtoFunID_IsValid(int value);
const stReqGuard_ProtoFunID stReqGuard_ProtoFunID_ProtoFunID_MIN = stReqGuard_ProtoFunID_FunID;
const stReqGuard_ProtoFunID stReqGuard_ProtoFunID_ProtoFunID_MAX = stReqGuard_ProtoFunID_FunID;
const int stReqGuard_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGuard_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuard_ProtoFunID_descriptor();
inline const ::std::string& stReqGuard_ProtoFunID_Name(stReqGuard_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuard_ProtoFunID_descriptor(), value);
}
inline bool stReqGuard_ProtoFunID_Parse(
    const ::std::string& name, stReqGuard_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuard_ProtoFunID>(
    stReqGuard_ProtoFunID_descriptor(), name, value);
}
enum stRetGuardWin_ProtoModID {
  stRetGuardWin_ProtoModID_ModID = 8
};
bool stRetGuardWin_ProtoModID_IsValid(int value);
const stRetGuardWin_ProtoModID stRetGuardWin_ProtoModID_ProtoModID_MIN = stRetGuardWin_ProtoModID_ModID;
const stRetGuardWin_ProtoModID stRetGuardWin_ProtoModID_ProtoModID_MAX = stRetGuardWin_ProtoModID_ModID;
const int stRetGuardWin_ProtoModID_ProtoModID_ARRAYSIZE = stRetGuardWin_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuardWin_ProtoModID_descriptor();
inline const ::std::string& stRetGuardWin_ProtoModID_Name(stRetGuardWin_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuardWin_ProtoModID_descriptor(), value);
}
inline bool stRetGuardWin_ProtoModID_Parse(
    const ::std::string& name, stRetGuardWin_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuardWin_ProtoModID>(
    stRetGuardWin_ProtoModID_descriptor(), name, value);
}
enum stRetGuardWin_ProtoFunID {
  stRetGuardWin_ProtoFunID_FunID = 115
};
bool stRetGuardWin_ProtoFunID_IsValid(int value);
const stRetGuardWin_ProtoFunID stRetGuardWin_ProtoFunID_ProtoFunID_MIN = stRetGuardWin_ProtoFunID_FunID;
const stRetGuardWin_ProtoFunID stRetGuardWin_ProtoFunID_ProtoFunID_MAX = stRetGuardWin_ProtoFunID_FunID;
const int stRetGuardWin_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetGuardWin_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuardWin_ProtoFunID_descriptor();
inline const ::std::string& stRetGuardWin_ProtoFunID_Name(stRetGuardWin_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuardWin_ProtoFunID_descriptor(), value);
}
inline bool stRetGuardWin_ProtoFunID_Parse(
    const ::std::string& name, stRetGuardWin_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuardWin_ProtoFunID>(
    stRetGuardWin_ProtoFunID_descriptor(), name, value);
}
enum stReqSummonHighQualityGuard_ProtoModID {
  stReqSummonHighQualityGuard_ProtoModID_ModID = 8
};
bool stReqSummonHighQualityGuard_ProtoModID_IsValid(int value);
const stReqSummonHighQualityGuard_ProtoModID stReqSummonHighQualityGuard_ProtoModID_ProtoModID_MIN = stReqSummonHighQualityGuard_ProtoModID_ModID;
const stReqSummonHighQualityGuard_ProtoModID stReqSummonHighQualityGuard_ProtoModID_ProtoModID_MAX = stReqSummonHighQualityGuard_ProtoModID_ModID;
const int stReqSummonHighQualityGuard_ProtoModID_ProtoModID_ARRAYSIZE = stReqSummonHighQualityGuard_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSummonHighQualityGuard_ProtoModID_descriptor();
inline const ::std::string& stReqSummonHighQualityGuard_ProtoModID_Name(stReqSummonHighQualityGuard_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSummonHighQualityGuard_ProtoModID_descriptor(), value);
}
inline bool stReqSummonHighQualityGuard_ProtoModID_Parse(
    const ::std::string& name, stReqSummonHighQualityGuard_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSummonHighQualityGuard_ProtoModID>(
    stReqSummonHighQualityGuard_ProtoModID_descriptor(), name, value);
}
enum stReqSummonHighQualityGuard_ProtoFunID {
  stReqSummonHighQualityGuard_ProtoFunID_FunID = 116
};
bool stReqSummonHighQualityGuard_ProtoFunID_IsValid(int value);
const stReqSummonHighQualityGuard_ProtoFunID stReqSummonHighQualityGuard_ProtoFunID_ProtoFunID_MIN = stReqSummonHighQualityGuard_ProtoFunID_FunID;
const stReqSummonHighQualityGuard_ProtoFunID stReqSummonHighQualityGuard_ProtoFunID_ProtoFunID_MAX = stReqSummonHighQualityGuard_ProtoFunID_FunID;
const int stReqSummonHighQualityGuard_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSummonHighQualityGuard_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSummonHighQualityGuard_ProtoFunID_descriptor();
inline const ::std::string& stReqSummonHighQualityGuard_ProtoFunID_Name(stReqSummonHighQualityGuard_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSummonHighQualityGuard_ProtoFunID_descriptor(), value);
}
inline bool stReqSummonHighQualityGuard_ProtoFunID_Parse(
    const ::std::string& name, stReqSummonHighQualityGuard_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSummonHighQualityGuard_ProtoFunID>(
    stReqSummonHighQualityGuard_ProtoFunID_descriptor(), name, value);
}
enum stSummonHighQualityGuardResult_eResult {
  stSummonHighQualityGuardResult_eResult_eSuccess = 1,
  stSummonHighQualityGuardResult_eResult_eInner_Cfg_Error = 2,
  stSummonHighQualityGuardResult_eResult_eDiamond_Not_Enough = 3
};
bool stSummonHighQualityGuardResult_eResult_IsValid(int value);
const stSummonHighQualityGuardResult_eResult stSummonHighQualityGuardResult_eResult_eResult_MIN = stSummonHighQualityGuardResult_eResult_eSuccess;
const stSummonHighQualityGuardResult_eResult stSummonHighQualityGuardResult_eResult_eResult_MAX = stSummonHighQualityGuardResult_eResult_eDiamond_Not_Enough;
const int stSummonHighQualityGuardResult_eResult_eResult_ARRAYSIZE = stSummonHighQualityGuardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSummonHighQualityGuardResult_eResult_descriptor();
inline const ::std::string& stSummonHighQualityGuardResult_eResult_Name(stSummonHighQualityGuardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSummonHighQualityGuardResult_eResult_descriptor(), value);
}
inline bool stSummonHighQualityGuardResult_eResult_Parse(
    const ::std::string& name, stSummonHighQualityGuardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSummonHighQualityGuardResult_eResult>(
    stSummonHighQualityGuardResult_eResult_descriptor(), name, value);
}
enum stSummonHighQualityGuardResult_ProtoModID {
  stSummonHighQualityGuardResult_ProtoModID_ModID = 8
};
bool stSummonHighQualityGuardResult_ProtoModID_IsValid(int value);
const stSummonHighQualityGuardResult_ProtoModID stSummonHighQualityGuardResult_ProtoModID_ProtoModID_MIN = stSummonHighQualityGuardResult_ProtoModID_ModID;
const stSummonHighQualityGuardResult_ProtoModID stSummonHighQualityGuardResult_ProtoModID_ProtoModID_MAX = stSummonHighQualityGuardResult_ProtoModID_ModID;
const int stSummonHighQualityGuardResult_ProtoModID_ProtoModID_ARRAYSIZE = stSummonHighQualityGuardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSummonHighQualityGuardResult_ProtoModID_descriptor();
inline const ::std::string& stSummonHighQualityGuardResult_ProtoModID_Name(stSummonHighQualityGuardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSummonHighQualityGuardResult_ProtoModID_descriptor(), value);
}
inline bool stSummonHighQualityGuardResult_ProtoModID_Parse(
    const ::std::string& name, stSummonHighQualityGuardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSummonHighQualityGuardResult_ProtoModID>(
    stSummonHighQualityGuardResult_ProtoModID_descriptor(), name, value);
}
enum stSummonHighQualityGuardResult_ProtoFunID {
  stSummonHighQualityGuardResult_ProtoFunID_FunID = 117
};
bool stSummonHighQualityGuardResult_ProtoFunID_IsValid(int value);
const stSummonHighQualityGuardResult_ProtoFunID stSummonHighQualityGuardResult_ProtoFunID_ProtoFunID_MIN = stSummonHighQualityGuardResult_ProtoFunID_FunID;
const stSummonHighQualityGuardResult_ProtoFunID stSummonHighQualityGuardResult_ProtoFunID_ProtoFunID_MAX = stSummonHighQualityGuardResult_ProtoFunID_FunID;
const int stSummonHighQualityGuardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSummonHighQualityGuardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSummonHighQualityGuardResult_ProtoFunID_descriptor();
inline const ::std::string& stSummonHighQualityGuardResult_ProtoFunID_Name(stSummonHighQualityGuardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSummonHighQualityGuardResult_ProtoFunID_descriptor(), value);
}
inline bool stSummonHighQualityGuardResult_ProtoFunID_Parse(
    const ::std::string& name, stSummonHighQualityGuardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSummonHighQualityGuardResult_ProtoFunID>(
    stSummonHighQualityGuardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqGuardInspired_ProtoModID {
  stReqGuardInspired_ProtoModID_ModID = 8
};
bool stReqGuardInspired_ProtoModID_IsValid(int value);
const stReqGuardInspired_ProtoModID stReqGuardInspired_ProtoModID_ProtoModID_MIN = stReqGuardInspired_ProtoModID_ModID;
const stReqGuardInspired_ProtoModID stReqGuardInspired_ProtoModID_ProtoModID_MAX = stReqGuardInspired_ProtoModID_ModID;
const int stReqGuardInspired_ProtoModID_ProtoModID_ARRAYSIZE = stReqGuardInspired_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuardInspired_ProtoModID_descriptor();
inline const ::std::string& stReqGuardInspired_ProtoModID_Name(stReqGuardInspired_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuardInspired_ProtoModID_descriptor(), value);
}
inline bool stReqGuardInspired_ProtoModID_Parse(
    const ::std::string& name, stReqGuardInspired_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuardInspired_ProtoModID>(
    stReqGuardInspired_ProtoModID_descriptor(), name, value);
}
enum stReqGuardInspired_ProtoFunID {
  stReqGuardInspired_ProtoFunID_FunID = 118
};
bool stReqGuardInspired_ProtoFunID_IsValid(int value);
const stReqGuardInspired_ProtoFunID stReqGuardInspired_ProtoFunID_ProtoFunID_MIN = stReqGuardInspired_ProtoFunID_FunID;
const stReqGuardInspired_ProtoFunID stReqGuardInspired_ProtoFunID_ProtoFunID_MAX = stReqGuardInspired_ProtoFunID_FunID;
const int stReqGuardInspired_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGuardInspired_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuardInspired_ProtoFunID_descriptor();
inline const ::std::string& stReqGuardInspired_ProtoFunID_Name(stReqGuardInspired_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuardInspired_ProtoFunID_descriptor(), value);
}
inline bool stReqGuardInspired_ProtoFunID_Parse(
    const ::std::string& name, stReqGuardInspired_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuardInspired_ProtoFunID>(
    stReqGuardInspired_ProtoFunID_descriptor(), name, value);
}
enum stGuardInspiredResult_eResult {
  stGuardInspiredResult_eResult_eSuccess = 1,
  stGuardInspiredResult_eResult_eDiamond_Not_Enough = 2
};
bool stGuardInspiredResult_eResult_IsValid(int value);
const stGuardInspiredResult_eResult stGuardInspiredResult_eResult_eResult_MIN = stGuardInspiredResult_eResult_eSuccess;
const stGuardInspiredResult_eResult stGuardInspiredResult_eResult_eResult_MAX = stGuardInspiredResult_eResult_eDiamond_Not_Enough;
const int stGuardInspiredResult_eResult_eResult_ARRAYSIZE = stGuardInspiredResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuardInspiredResult_eResult_descriptor();
inline const ::std::string& stGuardInspiredResult_eResult_Name(stGuardInspiredResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuardInspiredResult_eResult_descriptor(), value);
}
inline bool stGuardInspiredResult_eResult_Parse(
    const ::std::string& name, stGuardInspiredResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuardInspiredResult_eResult>(
    stGuardInspiredResult_eResult_descriptor(), name, value);
}
enum stGuardInspiredResult_ProtoModID {
  stGuardInspiredResult_ProtoModID_ModID = 8
};
bool stGuardInspiredResult_ProtoModID_IsValid(int value);
const stGuardInspiredResult_ProtoModID stGuardInspiredResult_ProtoModID_ProtoModID_MIN = stGuardInspiredResult_ProtoModID_ModID;
const stGuardInspiredResult_ProtoModID stGuardInspiredResult_ProtoModID_ProtoModID_MAX = stGuardInspiredResult_ProtoModID_ModID;
const int stGuardInspiredResult_ProtoModID_ProtoModID_ARRAYSIZE = stGuardInspiredResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuardInspiredResult_ProtoModID_descriptor();
inline const ::std::string& stGuardInspiredResult_ProtoModID_Name(stGuardInspiredResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuardInspiredResult_ProtoModID_descriptor(), value);
}
inline bool stGuardInspiredResult_ProtoModID_Parse(
    const ::std::string& name, stGuardInspiredResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuardInspiredResult_ProtoModID>(
    stGuardInspiredResult_ProtoModID_descriptor(), name, value);
}
enum stGuardInspiredResult_ProtoFunID {
  stGuardInspiredResult_ProtoFunID_FunID = 119
};
bool stGuardInspiredResult_ProtoFunID_IsValid(int value);
const stGuardInspiredResult_ProtoFunID stGuardInspiredResult_ProtoFunID_ProtoFunID_MIN = stGuardInspiredResult_ProtoFunID_FunID;
const stGuardInspiredResult_ProtoFunID stGuardInspiredResult_ProtoFunID_ProtoFunID_MAX = stGuardInspiredResult_ProtoFunID_FunID;
const int stGuardInspiredResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuardInspiredResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuardInspiredResult_ProtoFunID_descriptor();
inline const ::std::string& stGuardInspiredResult_ProtoFunID_Name(stGuardInspiredResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuardInspiredResult_ProtoFunID_descriptor(), value);
}
inline bool stGuardInspiredResult_ProtoFunID_Parse(
    const ::std::string& name, stGuardInspiredResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuardInspiredResult_ProtoFunID>(
    stGuardInspiredResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRefreshGuardQuality_ProtoModID {
  stReqRefreshGuardQuality_ProtoModID_ModID = 8
};
bool stReqRefreshGuardQuality_ProtoModID_IsValid(int value);
const stReqRefreshGuardQuality_ProtoModID stReqRefreshGuardQuality_ProtoModID_ProtoModID_MIN = stReqRefreshGuardQuality_ProtoModID_ModID;
const stReqRefreshGuardQuality_ProtoModID stReqRefreshGuardQuality_ProtoModID_ProtoModID_MAX = stReqRefreshGuardQuality_ProtoModID_ModID;
const int stReqRefreshGuardQuality_ProtoModID_ProtoModID_ARRAYSIZE = stReqRefreshGuardQuality_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefreshGuardQuality_ProtoModID_descriptor();
inline const ::std::string& stReqRefreshGuardQuality_ProtoModID_Name(stReqRefreshGuardQuality_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefreshGuardQuality_ProtoModID_descriptor(), value);
}
inline bool stReqRefreshGuardQuality_ProtoModID_Parse(
    const ::std::string& name, stReqRefreshGuardQuality_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefreshGuardQuality_ProtoModID>(
    stReqRefreshGuardQuality_ProtoModID_descriptor(), name, value);
}
enum stReqRefreshGuardQuality_ProtoFunID {
  stReqRefreshGuardQuality_ProtoFunID_FunID = 120
};
bool stReqRefreshGuardQuality_ProtoFunID_IsValid(int value);
const stReqRefreshGuardQuality_ProtoFunID stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_MIN = stReqRefreshGuardQuality_ProtoFunID_FunID;
const stReqRefreshGuardQuality_ProtoFunID stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_MAX = stReqRefreshGuardQuality_ProtoFunID_FunID;
const int stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefreshGuardQuality_ProtoFunID_descriptor();
inline const ::std::string& stReqRefreshGuardQuality_ProtoFunID_Name(stReqRefreshGuardQuality_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefreshGuardQuality_ProtoFunID_descriptor(), value);
}
inline bool stReqRefreshGuardQuality_ProtoFunID_Parse(
    const ::std::string& name, stReqRefreshGuardQuality_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefreshGuardQuality_ProtoFunID>(
    stReqRefreshGuardQuality_ProtoFunID_descriptor(), name, value);
}
enum stRetRefreshGuardQualityResult_eResult {
  stRetRefreshGuardQualityResult_eResult_eSuccess = 1,
  stRetRefreshGuardQualityResult_eResult_eDiamond_Not_Enough = 2,
  stRetRefreshGuardQualityResult_eResult_eFail = 3
};
bool stRetRefreshGuardQualityResult_eResult_IsValid(int value);
const stRetRefreshGuardQualityResult_eResult stRetRefreshGuardQualityResult_eResult_eResult_MIN = stRetRefreshGuardQualityResult_eResult_eSuccess;
const stRetRefreshGuardQualityResult_eResult stRetRefreshGuardQualityResult_eResult_eResult_MAX = stRetRefreshGuardQualityResult_eResult_eFail;
const int stRetRefreshGuardQualityResult_eResult_eResult_ARRAYSIZE = stRetRefreshGuardQualityResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRefreshGuardQualityResult_eResult_descriptor();
inline const ::std::string& stRetRefreshGuardQualityResult_eResult_Name(stRetRefreshGuardQualityResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRefreshGuardQualityResult_eResult_descriptor(), value);
}
inline bool stRetRefreshGuardQualityResult_eResult_Parse(
    const ::std::string& name, stRetRefreshGuardQualityResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRefreshGuardQualityResult_eResult>(
    stRetRefreshGuardQualityResult_eResult_descriptor(), name, value);
}
enum stRetRefreshGuardQualityResult_ProtoModID {
  stRetRefreshGuardQualityResult_ProtoModID_ModID = 8
};
bool stRetRefreshGuardQualityResult_ProtoModID_IsValid(int value);
const stRetRefreshGuardQualityResult_ProtoModID stRetRefreshGuardQualityResult_ProtoModID_ProtoModID_MIN = stRetRefreshGuardQualityResult_ProtoModID_ModID;
const stRetRefreshGuardQualityResult_ProtoModID stRetRefreshGuardQualityResult_ProtoModID_ProtoModID_MAX = stRetRefreshGuardQualityResult_ProtoModID_ModID;
const int stRetRefreshGuardQualityResult_ProtoModID_ProtoModID_ARRAYSIZE = stRetRefreshGuardQualityResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRefreshGuardQualityResult_ProtoModID_descriptor();
inline const ::std::string& stRetRefreshGuardQualityResult_ProtoModID_Name(stRetRefreshGuardQualityResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRefreshGuardQualityResult_ProtoModID_descriptor(), value);
}
inline bool stRetRefreshGuardQualityResult_ProtoModID_Parse(
    const ::std::string& name, stRetRefreshGuardQualityResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRefreshGuardQualityResult_ProtoModID>(
    stRetRefreshGuardQualityResult_ProtoModID_descriptor(), name, value);
}
enum stRetRefreshGuardQualityResult_ProtoFunID {
  stRetRefreshGuardQualityResult_ProtoFunID_FunID = 121
};
bool stRetRefreshGuardQualityResult_ProtoFunID_IsValid(int value);
const stRetRefreshGuardQualityResult_ProtoFunID stRetRefreshGuardQualityResult_ProtoFunID_ProtoFunID_MIN = stRetRefreshGuardQualityResult_ProtoFunID_FunID;
const stRetRefreshGuardQualityResult_ProtoFunID stRetRefreshGuardQualityResult_ProtoFunID_ProtoFunID_MAX = stRetRefreshGuardQualityResult_ProtoFunID_FunID;
const int stRetRefreshGuardQualityResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRefreshGuardQualityResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRefreshGuardQualityResult_ProtoFunID_descriptor();
inline const ::std::string& stRetRefreshGuardQualityResult_ProtoFunID_Name(stRetRefreshGuardQualityResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRefreshGuardQualityResult_ProtoFunID_descriptor(), value);
}
inline bool stRetRefreshGuardQualityResult_ProtoFunID_Parse(
    const ::std::string& name, stRetRefreshGuardQualityResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRefreshGuardQualityResult_ProtoFunID>(
    stRetRefreshGuardQualityResult_ProtoFunID_descriptor(), name, value);
}
enum stReqCanHelpGuardFriend_ProtoModID {
  stReqCanHelpGuardFriend_ProtoModID_ModID = 8
};
bool stReqCanHelpGuardFriend_ProtoModID_IsValid(int value);
const stReqCanHelpGuardFriend_ProtoModID stReqCanHelpGuardFriend_ProtoModID_ProtoModID_MIN = stReqCanHelpGuardFriend_ProtoModID_ModID;
const stReqCanHelpGuardFriend_ProtoModID stReqCanHelpGuardFriend_ProtoModID_ProtoModID_MAX = stReqCanHelpGuardFriend_ProtoModID_ModID;
const int stReqCanHelpGuardFriend_ProtoModID_ProtoModID_ARRAYSIZE = stReqCanHelpGuardFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCanHelpGuardFriend_ProtoModID_descriptor();
inline const ::std::string& stReqCanHelpGuardFriend_ProtoModID_Name(stReqCanHelpGuardFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCanHelpGuardFriend_ProtoModID_descriptor(), value);
}
inline bool stReqCanHelpGuardFriend_ProtoModID_Parse(
    const ::std::string& name, stReqCanHelpGuardFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCanHelpGuardFriend_ProtoModID>(
    stReqCanHelpGuardFriend_ProtoModID_descriptor(), name, value);
}
enum stReqCanHelpGuardFriend_ProtoFunID {
  stReqCanHelpGuardFriend_ProtoFunID_FunID = 122
};
bool stReqCanHelpGuardFriend_ProtoFunID_IsValid(int value);
const stReqCanHelpGuardFriend_ProtoFunID stReqCanHelpGuardFriend_ProtoFunID_ProtoFunID_MIN = stReqCanHelpGuardFriend_ProtoFunID_FunID;
const stReqCanHelpGuardFriend_ProtoFunID stReqCanHelpGuardFriend_ProtoFunID_ProtoFunID_MAX = stReqCanHelpGuardFriend_ProtoFunID_FunID;
const int stReqCanHelpGuardFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCanHelpGuardFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCanHelpGuardFriend_ProtoFunID_descriptor();
inline const ::std::string& stReqCanHelpGuardFriend_ProtoFunID_Name(stReqCanHelpGuardFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCanHelpGuardFriend_ProtoFunID_descriptor(), value);
}
inline bool stReqCanHelpGuardFriend_ProtoFunID_Parse(
    const ::std::string& name, stReqCanHelpGuardFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCanHelpGuardFriend_ProtoFunID>(
    stReqCanHelpGuardFriend_ProtoFunID_descriptor(), name, value);
}
enum stRetCanHelpGuardFriend_ProtoModID {
  stRetCanHelpGuardFriend_ProtoModID_ModID = 8
};
bool stRetCanHelpGuardFriend_ProtoModID_IsValid(int value);
const stRetCanHelpGuardFriend_ProtoModID stRetCanHelpGuardFriend_ProtoModID_ProtoModID_MIN = stRetCanHelpGuardFriend_ProtoModID_ModID;
const stRetCanHelpGuardFriend_ProtoModID stRetCanHelpGuardFriend_ProtoModID_ProtoModID_MAX = stRetCanHelpGuardFriend_ProtoModID_ModID;
const int stRetCanHelpGuardFriend_ProtoModID_ProtoModID_ARRAYSIZE = stRetCanHelpGuardFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCanHelpGuardFriend_ProtoModID_descriptor();
inline const ::std::string& stRetCanHelpGuardFriend_ProtoModID_Name(stRetCanHelpGuardFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCanHelpGuardFriend_ProtoModID_descriptor(), value);
}
inline bool stRetCanHelpGuardFriend_ProtoModID_Parse(
    const ::std::string& name, stRetCanHelpGuardFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCanHelpGuardFriend_ProtoModID>(
    stRetCanHelpGuardFriend_ProtoModID_descriptor(), name, value);
}
enum stRetCanHelpGuardFriend_ProtoFunID {
  stRetCanHelpGuardFriend_ProtoFunID_FunID = 123
};
bool stRetCanHelpGuardFriend_ProtoFunID_IsValid(int value);
const stRetCanHelpGuardFriend_ProtoFunID stRetCanHelpGuardFriend_ProtoFunID_ProtoFunID_MIN = stRetCanHelpGuardFriend_ProtoFunID_FunID;
const stRetCanHelpGuardFriend_ProtoFunID stRetCanHelpGuardFriend_ProtoFunID_ProtoFunID_MAX = stRetCanHelpGuardFriend_ProtoFunID_FunID;
const int stRetCanHelpGuardFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetCanHelpGuardFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCanHelpGuardFriend_ProtoFunID_descriptor();
inline const ::std::string& stRetCanHelpGuardFriend_ProtoFunID_Name(stRetCanHelpGuardFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCanHelpGuardFriend_ProtoFunID_descriptor(), value);
}
inline bool stRetCanHelpGuardFriend_ProtoFunID_Parse(
    const ::std::string& name, stRetCanHelpGuardFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCanHelpGuardFriend_ProtoFunID>(
    stRetCanHelpGuardFriend_ProtoFunID_descriptor(), name, value);
}
enum stInviteFriendForHelpGuard_ProtoModID {
  stInviteFriendForHelpGuard_ProtoModID_ModID = 8
};
bool stInviteFriendForHelpGuard_ProtoModID_IsValid(int value);
const stInviteFriendForHelpGuard_ProtoModID stInviteFriendForHelpGuard_ProtoModID_ProtoModID_MIN = stInviteFriendForHelpGuard_ProtoModID_ModID;
const stInviteFriendForHelpGuard_ProtoModID stInviteFriendForHelpGuard_ProtoModID_ProtoModID_MAX = stInviteFriendForHelpGuard_ProtoModID_ModID;
const int stInviteFriendForHelpGuard_ProtoModID_ProtoModID_ARRAYSIZE = stInviteFriendForHelpGuard_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuard_ProtoModID_descriptor();
inline const ::std::string& stInviteFriendForHelpGuard_ProtoModID_Name(stInviteFriendForHelpGuard_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInviteFriendForHelpGuard_ProtoModID_descriptor(), value);
}
inline bool stInviteFriendForHelpGuard_ProtoModID_Parse(
    const ::std::string& name, stInviteFriendForHelpGuard_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInviteFriendForHelpGuard_ProtoModID>(
    stInviteFriendForHelpGuard_ProtoModID_descriptor(), name, value);
}
enum stInviteFriendForHelpGuard_ProtoFunID {
  stInviteFriendForHelpGuard_ProtoFunID_FunID = 124
};
bool stInviteFriendForHelpGuard_ProtoFunID_IsValid(int value);
const stInviteFriendForHelpGuard_ProtoFunID stInviteFriendForHelpGuard_ProtoFunID_ProtoFunID_MIN = stInviteFriendForHelpGuard_ProtoFunID_FunID;
const stInviteFriendForHelpGuard_ProtoFunID stInviteFriendForHelpGuard_ProtoFunID_ProtoFunID_MAX = stInviteFriendForHelpGuard_ProtoFunID_FunID;
const int stInviteFriendForHelpGuard_ProtoFunID_ProtoFunID_ARRAYSIZE = stInviteFriendForHelpGuard_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuard_ProtoFunID_descriptor();
inline const ::std::string& stInviteFriendForHelpGuard_ProtoFunID_Name(stInviteFriendForHelpGuard_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInviteFriendForHelpGuard_ProtoFunID_descriptor(), value);
}
inline bool stInviteFriendForHelpGuard_ProtoFunID_Parse(
    const ::std::string& name, stInviteFriendForHelpGuard_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInviteFriendForHelpGuard_ProtoFunID>(
    stInviteFriendForHelpGuard_ProtoFunID_descriptor(), name, value);
}
enum stInviteFriendForHelpGuardResult_eResult {
  stInviteFriendForHelpGuardResult_eResult_eSuccess = 1,
  stInviteFriendForHelpGuardResult_eResult_eHelp_Num_Use_Out = 2,
  stInviteFriendForHelpGuardResult_eResult_eNot_Online = 3,
  stInviteFriendForHelpGuardResult_eResult_eRefuse = 4
};
bool stInviteFriendForHelpGuardResult_eResult_IsValid(int value);
const stInviteFriendForHelpGuardResult_eResult stInviteFriendForHelpGuardResult_eResult_eResult_MIN = stInviteFriendForHelpGuardResult_eResult_eSuccess;
const stInviteFriendForHelpGuardResult_eResult stInviteFriendForHelpGuardResult_eResult_eResult_MAX = stInviteFriendForHelpGuardResult_eResult_eRefuse;
const int stInviteFriendForHelpGuardResult_eResult_eResult_ARRAYSIZE = stInviteFriendForHelpGuardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuardResult_eResult_descriptor();
inline const ::std::string& stInviteFriendForHelpGuardResult_eResult_Name(stInviteFriendForHelpGuardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInviteFriendForHelpGuardResult_eResult_descriptor(), value);
}
inline bool stInviteFriendForHelpGuardResult_eResult_Parse(
    const ::std::string& name, stInviteFriendForHelpGuardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInviteFriendForHelpGuardResult_eResult>(
    stInviteFriendForHelpGuardResult_eResult_descriptor(), name, value);
}
enum stInviteFriendForHelpGuardResult_ProtoModID {
  stInviteFriendForHelpGuardResult_ProtoModID_ModID = 8
};
bool stInviteFriendForHelpGuardResult_ProtoModID_IsValid(int value);
const stInviteFriendForHelpGuardResult_ProtoModID stInviteFriendForHelpGuardResult_ProtoModID_ProtoModID_MIN = stInviteFriendForHelpGuardResult_ProtoModID_ModID;
const stInviteFriendForHelpGuardResult_ProtoModID stInviteFriendForHelpGuardResult_ProtoModID_ProtoModID_MAX = stInviteFriendForHelpGuardResult_ProtoModID_ModID;
const int stInviteFriendForHelpGuardResult_ProtoModID_ProtoModID_ARRAYSIZE = stInviteFriendForHelpGuardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuardResult_ProtoModID_descriptor();
inline const ::std::string& stInviteFriendForHelpGuardResult_ProtoModID_Name(stInviteFriendForHelpGuardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInviteFriendForHelpGuardResult_ProtoModID_descriptor(), value);
}
inline bool stInviteFriendForHelpGuardResult_ProtoModID_Parse(
    const ::std::string& name, stInviteFriendForHelpGuardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInviteFriendForHelpGuardResult_ProtoModID>(
    stInviteFriendForHelpGuardResult_ProtoModID_descriptor(), name, value);
}
enum stInviteFriendForHelpGuardResult_ProtoFunID {
  stInviteFriendForHelpGuardResult_ProtoFunID_FunID = 125
};
bool stInviteFriendForHelpGuardResult_ProtoFunID_IsValid(int value);
const stInviteFriendForHelpGuardResult_ProtoFunID stInviteFriendForHelpGuardResult_ProtoFunID_ProtoFunID_MIN = stInviteFriendForHelpGuardResult_ProtoFunID_FunID;
const stInviteFriendForHelpGuardResult_ProtoFunID stInviteFriendForHelpGuardResult_ProtoFunID_ProtoFunID_MAX = stInviteFriendForHelpGuardResult_ProtoFunID_FunID;
const int stInviteFriendForHelpGuardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stInviteFriendForHelpGuardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuardResult_ProtoFunID_descriptor();
inline const ::std::string& stInviteFriendForHelpGuardResult_ProtoFunID_Name(stInviteFriendForHelpGuardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInviteFriendForHelpGuardResult_ProtoFunID_descriptor(), value);
}
inline bool stInviteFriendForHelpGuardResult_ProtoFunID_Parse(
    const ::std::string& name, stInviteFriendForHelpGuardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInviteFriendForHelpGuardResult_ProtoFunID>(
    stInviteFriendForHelpGuardResult_ProtoFunID_descriptor(), name, value);
}
enum stAskFriendHelpGuard_ProtoModID {
  stAskFriendHelpGuard_ProtoModID_ModID = 8
};
bool stAskFriendHelpGuard_ProtoModID_IsValid(int value);
const stAskFriendHelpGuard_ProtoModID stAskFriendHelpGuard_ProtoModID_ProtoModID_MIN = stAskFriendHelpGuard_ProtoModID_ModID;
const stAskFriendHelpGuard_ProtoModID stAskFriendHelpGuard_ProtoModID_ProtoModID_MAX = stAskFriendHelpGuard_ProtoModID_ModID;
const int stAskFriendHelpGuard_ProtoModID_ProtoModID_ARRAYSIZE = stAskFriendHelpGuard_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAskFriendHelpGuard_ProtoModID_descriptor();
inline const ::std::string& stAskFriendHelpGuard_ProtoModID_Name(stAskFriendHelpGuard_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAskFriendHelpGuard_ProtoModID_descriptor(), value);
}
inline bool stAskFriendHelpGuard_ProtoModID_Parse(
    const ::std::string& name, stAskFriendHelpGuard_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAskFriendHelpGuard_ProtoModID>(
    stAskFriendHelpGuard_ProtoModID_descriptor(), name, value);
}
enum stAskFriendHelpGuard_ProtoFunID {
  stAskFriendHelpGuard_ProtoFunID_FunID = 126
};
bool stAskFriendHelpGuard_ProtoFunID_IsValid(int value);
const stAskFriendHelpGuard_ProtoFunID stAskFriendHelpGuard_ProtoFunID_ProtoFunID_MIN = stAskFriendHelpGuard_ProtoFunID_FunID;
const stAskFriendHelpGuard_ProtoFunID stAskFriendHelpGuard_ProtoFunID_ProtoFunID_MAX = stAskFriendHelpGuard_ProtoFunID_FunID;
const int stAskFriendHelpGuard_ProtoFunID_ProtoFunID_ARRAYSIZE = stAskFriendHelpGuard_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAskFriendHelpGuard_ProtoFunID_descriptor();
inline const ::std::string& stAskFriendHelpGuard_ProtoFunID_Name(stAskFriendHelpGuard_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAskFriendHelpGuard_ProtoFunID_descriptor(), value);
}
inline bool stAskFriendHelpGuard_ProtoFunID_Parse(
    const ::std::string& name, stAskFriendHelpGuard_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAskFriendHelpGuard_ProtoFunID>(
    stAskFriendHelpGuard_ProtoFunID_descriptor(), name, value);
}
enum stReplyHelpGuard_ProtoModID {
  stReplyHelpGuard_ProtoModID_ModID = 8
};
bool stReplyHelpGuard_ProtoModID_IsValid(int value);
const stReplyHelpGuard_ProtoModID stReplyHelpGuard_ProtoModID_ProtoModID_MIN = stReplyHelpGuard_ProtoModID_ModID;
const stReplyHelpGuard_ProtoModID stReplyHelpGuard_ProtoModID_ProtoModID_MAX = stReplyHelpGuard_ProtoModID_ModID;
const int stReplyHelpGuard_ProtoModID_ProtoModID_ARRAYSIZE = stReplyHelpGuard_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyHelpGuard_ProtoModID_descriptor();
inline const ::std::string& stReplyHelpGuard_ProtoModID_Name(stReplyHelpGuard_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyHelpGuard_ProtoModID_descriptor(), value);
}
inline bool stReplyHelpGuard_ProtoModID_Parse(
    const ::std::string& name, stReplyHelpGuard_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyHelpGuard_ProtoModID>(
    stReplyHelpGuard_ProtoModID_descriptor(), name, value);
}
enum stReplyHelpGuard_ProtoFunID {
  stReplyHelpGuard_ProtoFunID_FunID = 127
};
bool stReplyHelpGuard_ProtoFunID_IsValid(int value);
const stReplyHelpGuard_ProtoFunID stReplyHelpGuard_ProtoFunID_ProtoFunID_MIN = stReplyHelpGuard_ProtoFunID_FunID;
const stReplyHelpGuard_ProtoFunID stReplyHelpGuard_ProtoFunID_ProtoFunID_MAX = stReplyHelpGuard_ProtoFunID_FunID;
const int stReplyHelpGuard_ProtoFunID_ProtoFunID_ARRAYSIZE = stReplyHelpGuard_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyHelpGuard_ProtoFunID_descriptor();
inline const ::std::string& stReplyHelpGuard_ProtoFunID_Name(stReplyHelpGuard_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyHelpGuard_ProtoFunID_descriptor(), value);
}
inline bool stReplyHelpGuard_ProtoFunID_Parse(
    const ::std::string& name, stReplyHelpGuard_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyHelpGuard_ProtoFunID>(
    stReplyHelpGuard_ProtoFunID_descriptor(), name, value);
}
enum stReplyHelpGuardResult_eResult {
  stReplyHelpGuardResult_eResult_eSuccess = 1,
  stReplyHelpGuardResult_eResult_eHas_Start = 2,
  stReplyHelpGuardResult_eResult_eHelp_Num_Use_Out = 3,
  stReplyHelpGuardResult_eResult_eHas_Friend_Help = 4
};
bool stReplyHelpGuardResult_eResult_IsValid(int value);
const stReplyHelpGuardResult_eResult stReplyHelpGuardResult_eResult_eResult_MIN = stReplyHelpGuardResult_eResult_eSuccess;
const stReplyHelpGuardResult_eResult stReplyHelpGuardResult_eResult_eResult_MAX = stReplyHelpGuardResult_eResult_eHas_Friend_Help;
const int stReplyHelpGuardResult_eResult_eResult_ARRAYSIZE = stReplyHelpGuardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyHelpGuardResult_eResult_descriptor();
inline const ::std::string& stReplyHelpGuardResult_eResult_Name(stReplyHelpGuardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyHelpGuardResult_eResult_descriptor(), value);
}
inline bool stReplyHelpGuardResult_eResult_Parse(
    const ::std::string& name, stReplyHelpGuardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyHelpGuardResult_eResult>(
    stReplyHelpGuardResult_eResult_descriptor(), name, value);
}
enum stReplyHelpGuardResult_ProtoModID {
  stReplyHelpGuardResult_ProtoModID_ModID = 8
};
bool stReplyHelpGuardResult_ProtoModID_IsValid(int value);
const stReplyHelpGuardResult_ProtoModID stReplyHelpGuardResult_ProtoModID_ProtoModID_MIN = stReplyHelpGuardResult_ProtoModID_ModID;
const stReplyHelpGuardResult_ProtoModID stReplyHelpGuardResult_ProtoModID_ProtoModID_MAX = stReplyHelpGuardResult_ProtoModID_ModID;
const int stReplyHelpGuardResult_ProtoModID_ProtoModID_ARRAYSIZE = stReplyHelpGuardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyHelpGuardResult_ProtoModID_descriptor();
inline const ::std::string& stReplyHelpGuardResult_ProtoModID_Name(stReplyHelpGuardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyHelpGuardResult_ProtoModID_descriptor(), value);
}
inline bool stReplyHelpGuardResult_ProtoModID_Parse(
    const ::std::string& name, stReplyHelpGuardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyHelpGuardResult_ProtoModID>(
    stReplyHelpGuardResult_ProtoModID_descriptor(), name, value);
}
enum stReplyHelpGuardResult_ProtoFunID {
  stReplyHelpGuardResult_ProtoFunID_FunID = 128
};
bool stReplyHelpGuardResult_ProtoFunID_IsValid(int value);
const stReplyHelpGuardResult_ProtoFunID stReplyHelpGuardResult_ProtoFunID_ProtoFunID_MIN = stReplyHelpGuardResult_ProtoFunID_FunID;
const stReplyHelpGuardResult_ProtoFunID stReplyHelpGuardResult_ProtoFunID_ProtoFunID_MAX = stReplyHelpGuardResult_ProtoFunID_FunID;
const int stReplyHelpGuardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stReplyHelpGuardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyHelpGuardResult_ProtoFunID_descriptor();
inline const ::std::string& stReplyHelpGuardResult_ProtoFunID_Name(stReplyHelpGuardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyHelpGuardResult_ProtoFunID_descriptor(), value);
}
inline bool stReplyHelpGuardResult_ProtoFunID_Parse(
    const ::std::string& name, stReplyHelpGuardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyHelpGuardResult_ProtoFunID>(
    stReplyHelpGuardResult_ProtoFunID_descriptor(), name, value);
}
enum stUserAgreeHelpGuard_ProtoModID {
  stUserAgreeHelpGuard_ProtoModID_ModID = 8
};
bool stUserAgreeHelpGuard_ProtoModID_IsValid(int value);
const stUserAgreeHelpGuard_ProtoModID stUserAgreeHelpGuard_ProtoModID_ProtoModID_MIN = stUserAgreeHelpGuard_ProtoModID_ModID;
const stUserAgreeHelpGuard_ProtoModID stUserAgreeHelpGuard_ProtoModID_ProtoModID_MAX = stUserAgreeHelpGuard_ProtoModID_ModID;
const int stUserAgreeHelpGuard_ProtoModID_ProtoModID_ARRAYSIZE = stUserAgreeHelpGuard_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserAgreeHelpGuard_ProtoModID_descriptor();
inline const ::std::string& stUserAgreeHelpGuard_ProtoModID_Name(stUserAgreeHelpGuard_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserAgreeHelpGuard_ProtoModID_descriptor(), value);
}
inline bool stUserAgreeHelpGuard_ProtoModID_Parse(
    const ::std::string& name, stUserAgreeHelpGuard_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserAgreeHelpGuard_ProtoModID>(
    stUserAgreeHelpGuard_ProtoModID_descriptor(), name, value);
}
enum stUserAgreeHelpGuard_ProtoFunID {
  stUserAgreeHelpGuard_ProtoFunID_FunID = 129
};
bool stUserAgreeHelpGuard_ProtoFunID_IsValid(int value);
const stUserAgreeHelpGuard_ProtoFunID stUserAgreeHelpGuard_ProtoFunID_ProtoFunID_MIN = stUserAgreeHelpGuard_ProtoFunID_FunID;
const stUserAgreeHelpGuard_ProtoFunID stUserAgreeHelpGuard_ProtoFunID_ProtoFunID_MAX = stUserAgreeHelpGuard_ProtoFunID_FunID;
const int stUserAgreeHelpGuard_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserAgreeHelpGuard_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserAgreeHelpGuard_ProtoFunID_descriptor();
inline const ::std::string& stUserAgreeHelpGuard_ProtoFunID_Name(stUserAgreeHelpGuard_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserAgreeHelpGuard_ProtoFunID_descriptor(), value);
}
inline bool stUserAgreeHelpGuard_ProtoFunID_Parse(
    const ::std::string& name, stUserAgreeHelpGuard_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserAgreeHelpGuard_ProtoFunID>(
    stUserAgreeHelpGuard_ProtoFunID_descriptor(), name, value);
}
enum stBeginGuard_ProtoModID {
  stBeginGuard_ProtoModID_ModID = 8
};
bool stBeginGuard_ProtoModID_IsValid(int value);
const stBeginGuard_ProtoModID stBeginGuard_ProtoModID_ProtoModID_MIN = stBeginGuard_ProtoModID_ModID;
const stBeginGuard_ProtoModID stBeginGuard_ProtoModID_ProtoModID_MAX = stBeginGuard_ProtoModID_ModID;
const int stBeginGuard_ProtoModID_ProtoModID_ARRAYSIZE = stBeginGuard_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeginGuard_ProtoModID_descriptor();
inline const ::std::string& stBeginGuard_ProtoModID_Name(stBeginGuard_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeginGuard_ProtoModID_descriptor(), value);
}
inline bool stBeginGuard_ProtoModID_Parse(
    const ::std::string& name, stBeginGuard_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeginGuard_ProtoModID>(
    stBeginGuard_ProtoModID_descriptor(), name, value);
}
enum stBeginGuard_ProtoFunID {
  stBeginGuard_ProtoFunID_FunID = 130
};
bool stBeginGuard_ProtoFunID_IsValid(int value);
const stBeginGuard_ProtoFunID stBeginGuard_ProtoFunID_ProtoFunID_MIN = stBeginGuard_ProtoFunID_FunID;
const stBeginGuard_ProtoFunID stBeginGuard_ProtoFunID_ProtoFunID_MAX = stBeginGuard_ProtoFunID_FunID;
const int stBeginGuard_ProtoFunID_ProtoFunID_ARRAYSIZE = stBeginGuard_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeginGuard_ProtoFunID_descriptor();
inline const ::std::string& stBeginGuard_ProtoFunID_Name(stBeginGuard_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeginGuard_ProtoFunID_descriptor(), value);
}
inline bool stBeginGuard_ProtoFunID_Parse(
    const ::std::string& name, stBeginGuard_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeginGuard_ProtoFunID>(
    stBeginGuard_ProtoFunID_descriptor(), name, value);
}
enum stBeginGuardResult_eResult {
  stBeginGuardResult_eResult_eSuccess = 1,
  stBeginGuardResult_eResult_eHas_Begin = 2,
  stBeginGuardResult_eResult_eUse_Out_Num = 3
};
bool stBeginGuardResult_eResult_IsValid(int value);
const stBeginGuardResult_eResult stBeginGuardResult_eResult_eResult_MIN = stBeginGuardResult_eResult_eSuccess;
const stBeginGuardResult_eResult stBeginGuardResult_eResult_eResult_MAX = stBeginGuardResult_eResult_eUse_Out_Num;
const int stBeginGuardResult_eResult_eResult_ARRAYSIZE = stBeginGuardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeginGuardResult_eResult_descriptor();
inline const ::std::string& stBeginGuardResult_eResult_Name(stBeginGuardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeginGuardResult_eResult_descriptor(), value);
}
inline bool stBeginGuardResult_eResult_Parse(
    const ::std::string& name, stBeginGuardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeginGuardResult_eResult>(
    stBeginGuardResult_eResult_descriptor(), name, value);
}
enum stBeginGuardResult_ProtoModID {
  stBeginGuardResult_ProtoModID_ModID = 8
};
bool stBeginGuardResult_ProtoModID_IsValid(int value);
const stBeginGuardResult_ProtoModID stBeginGuardResult_ProtoModID_ProtoModID_MIN = stBeginGuardResult_ProtoModID_ModID;
const stBeginGuardResult_ProtoModID stBeginGuardResult_ProtoModID_ProtoModID_MAX = stBeginGuardResult_ProtoModID_ModID;
const int stBeginGuardResult_ProtoModID_ProtoModID_ARRAYSIZE = stBeginGuardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeginGuardResult_ProtoModID_descriptor();
inline const ::std::string& stBeginGuardResult_ProtoModID_Name(stBeginGuardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeginGuardResult_ProtoModID_descriptor(), value);
}
inline bool stBeginGuardResult_ProtoModID_Parse(
    const ::std::string& name, stBeginGuardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeginGuardResult_ProtoModID>(
    stBeginGuardResult_ProtoModID_descriptor(), name, value);
}
enum stBeginGuardResult_ProtoFunID {
  stBeginGuardResult_ProtoFunID_FunID = 131
};
bool stBeginGuardResult_ProtoFunID_IsValid(int value);
const stBeginGuardResult_ProtoFunID stBeginGuardResult_ProtoFunID_ProtoFunID_MIN = stBeginGuardResult_ProtoFunID_FunID;
const stBeginGuardResult_ProtoFunID stBeginGuardResult_ProtoFunID_ProtoFunID_MAX = stBeginGuardResult_ProtoFunID_FunID;
const int stBeginGuardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stBeginGuardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeginGuardResult_ProtoFunID_descriptor();
inline const ::std::string& stBeginGuardResult_ProtoFunID_Name(stBeginGuardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeginGuardResult_ProtoFunID_descriptor(), value);
}
inline bool stBeginGuardResult_ProtoFunID_Parse(
    const ::std::string& name, stBeginGuardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeginGuardResult_ProtoFunID>(
    stBeginGuardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqInterceptInfo_ProtoModID {
  stReqInterceptInfo_ProtoModID_ModID = 8
};
bool stReqInterceptInfo_ProtoModID_IsValid(int value);
const stReqInterceptInfo_ProtoModID stReqInterceptInfo_ProtoModID_ProtoModID_MIN = stReqInterceptInfo_ProtoModID_ModID;
const stReqInterceptInfo_ProtoModID stReqInterceptInfo_ProtoModID_ProtoModID_MAX = stReqInterceptInfo_ProtoModID_ModID;
const int stReqInterceptInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqInterceptInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqInterceptInfo_ProtoModID_descriptor();
inline const ::std::string& stReqInterceptInfo_ProtoModID_Name(stReqInterceptInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqInterceptInfo_ProtoModID_descriptor(), value);
}
inline bool stReqInterceptInfo_ProtoModID_Parse(
    const ::std::string& name, stReqInterceptInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqInterceptInfo_ProtoModID>(
    stReqInterceptInfo_ProtoModID_descriptor(), name, value);
}
enum stReqInterceptInfo_ProtoFunID {
  stReqInterceptInfo_ProtoFunID_FunID = 132
};
bool stReqInterceptInfo_ProtoFunID_IsValid(int value);
const stReqInterceptInfo_ProtoFunID stReqInterceptInfo_ProtoFunID_ProtoFunID_MIN = stReqInterceptInfo_ProtoFunID_FunID;
const stReqInterceptInfo_ProtoFunID stReqInterceptInfo_ProtoFunID_ProtoFunID_MAX = stReqInterceptInfo_ProtoFunID_FunID;
const int stReqInterceptInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqInterceptInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqInterceptInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqInterceptInfo_ProtoFunID_Name(stReqInterceptInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqInterceptInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqInterceptInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqInterceptInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqInterceptInfo_ProtoFunID>(
    stReqInterceptInfo_ProtoFunID_descriptor(), name, value);
}
enum stRetInterceptInfo_ProtoModID {
  stRetInterceptInfo_ProtoModID_ModID = 8
};
bool stRetInterceptInfo_ProtoModID_IsValid(int value);
const stRetInterceptInfo_ProtoModID stRetInterceptInfo_ProtoModID_ProtoModID_MIN = stRetInterceptInfo_ProtoModID_ModID;
const stRetInterceptInfo_ProtoModID stRetInterceptInfo_ProtoModID_ProtoModID_MAX = stRetInterceptInfo_ProtoModID_ModID;
const int stRetInterceptInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetInterceptInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetInterceptInfo_ProtoModID_descriptor();
inline const ::std::string& stRetInterceptInfo_ProtoModID_Name(stRetInterceptInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetInterceptInfo_ProtoModID_descriptor(), value);
}
inline bool stRetInterceptInfo_ProtoModID_Parse(
    const ::std::string& name, stRetInterceptInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetInterceptInfo_ProtoModID>(
    stRetInterceptInfo_ProtoModID_descriptor(), name, value);
}
enum stRetInterceptInfo_ProtoFunID {
  stRetInterceptInfo_ProtoFunID_FunID = 133
};
bool stRetInterceptInfo_ProtoFunID_IsValid(int value);
const stRetInterceptInfo_ProtoFunID stRetInterceptInfo_ProtoFunID_ProtoFunID_MIN = stRetInterceptInfo_ProtoFunID_FunID;
const stRetInterceptInfo_ProtoFunID stRetInterceptInfo_ProtoFunID_ProtoFunID_MAX = stRetInterceptInfo_ProtoFunID_FunID;
const int stRetInterceptInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetInterceptInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetInterceptInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetInterceptInfo_ProtoFunID_Name(stRetInterceptInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetInterceptInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetInterceptInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetInterceptInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetInterceptInfo_ProtoFunID>(
    stRetInterceptInfo_ProtoFunID_descriptor(), name, value);
}
enum stNotifyRechargeActivityInfo_ProtoModID {
  stNotifyRechargeActivityInfo_ProtoModID_ModID = 8
};
bool stNotifyRechargeActivityInfo_ProtoModID_IsValid(int value);
const stNotifyRechargeActivityInfo_ProtoModID stNotifyRechargeActivityInfo_ProtoModID_ProtoModID_MIN = stNotifyRechargeActivityInfo_ProtoModID_ModID;
const stNotifyRechargeActivityInfo_ProtoModID stNotifyRechargeActivityInfo_ProtoModID_ProtoModID_MAX = stNotifyRechargeActivityInfo_ProtoModID_ModID;
const int stNotifyRechargeActivityInfo_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyRechargeActivityInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyRechargeActivityInfo_ProtoModID_descriptor();
inline const ::std::string& stNotifyRechargeActivityInfo_ProtoModID_Name(stNotifyRechargeActivityInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyRechargeActivityInfo_ProtoModID_descriptor(), value);
}
inline bool stNotifyRechargeActivityInfo_ProtoModID_Parse(
    const ::std::string& name, stNotifyRechargeActivityInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyRechargeActivityInfo_ProtoModID>(
    stNotifyRechargeActivityInfo_ProtoModID_descriptor(), name, value);
}
enum stNotifyRechargeActivityInfo_ProtoFunID {
  stNotifyRechargeActivityInfo_ProtoFunID_FunID = 134
};
bool stNotifyRechargeActivityInfo_ProtoFunID_IsValid(int value);
const stNotifyRechargeActivityInfo_ProtoFunID stNotifyRechargeActivityInfo_ProtoFunID_ProtoFunID_MIN = stNotifyRechargeActivityInfo_ProtoFunID_FunID;
const stNotifyRechargeActivityInfo_ProtoFunID stNotifyRechargeActivityInfo_ProtoFunID_ProtoFunID_MAX = stNotifyRechargeActivityInfo_ProtoFunID_FunID;
const int stNotifyRechargeActivityInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyRechargeActivityInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyRechargeActivityInfo_ProtoFunID_descriptor();
inline const ::std::string& stNotifyRechargeActivityInfo_ProtoFunID_Name(stNotifyRechargeActivityInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyRechargeActivityInfo_ProtoFunID_descriptor(), value);
}
inline bool stNotifyRechargeActivityInfo_ProtoFunID_Parse(
    const ::std::string& name, stNotifyRechargeActivityInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyRechargeActivityInfo_ProtoFunID>(
    stNotifyRechargeActivityInfo_ProtoFunID_descriptor(), name, value);
}
enum stLuckShopRefreshResult_ProtoModID {
  stLuckShopRefreshResult_ProtoModID_ModID = 8
};
bool stLuckShopRefreshResult_ProtoModID_IsValid(int value);
const stLuckShopRefreshResult_ProtoModID stLuckShopRefreshResult_ProtoModID_ProtoModID_MIN = stLuckShopRefreshResult_ProtoModID_ModID;
const stLuckShopRefreshResult_ProtoModID stLuckShopRefreshResult_ProtoModID_ProtoModID_MAX = stLuckShopRefreshResult_ProtoModID_ModID;
const int stLuckShopRefreshResult_ProtoModID_ProtoModID_ARRAYSIZE = stLuckShopRefreshResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLuckShopRefreshResult_ProtoModID_descriptor();
inline const ::std::string& stLuckShopRefreshResult_ProtoModID_Name(stLuckShopRefreshResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLuckShopRefreshResult_ProtoModID_descriptor(), value);
}
inline bool stLuckShopRefreshResult_ProtoModID_Parse(
    const ::std::string& name, stLuckShopRefreshResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLuckShopRefreshResult_ProtoModID>(
    stLuckShopRefreshResult_ProtoModID_descriptor(), name, value);
}
enum stLuckShopRefreshResult_ProtoFunID {
  stLuckShopRefreshResult_ProtoFunID_FunID = 135
};
bool stLuckShopRefreshResult_ProtoFunID_IsValid(int value);
const stLuckShopRefreshResult_ProtoFunID stLuckShopRefreshResult_ProtoFunID_ProtoFunID_MIN = stLuckShopRefreshResult_ProtoFunID_FunID;
const stLuckShopRefreshResult_ProtoFunID stLuckShopRefreshResult_ProtoFunID_ProtoFunID_MAX = stLuckShopRefreshResult_ProtoFunID_FunID;
const int stLuckShopRefreshResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stLuckShopRefreshResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLuckShopRefreshResult_ProtoFunID_descriptor();
inline const ::std::string& stLuckShopRefreshResult_ProtoFunID_Name(stLuckShopRefreshResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLuckShopRefreshResult_ProtoFunID_descriptor(), value);
}
inline bool stLuckShopRefreshResult_ProtoFunID_Parse(
    const ::std::string& name, stLuckShopRefreshResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLuckShopRefreshResult_ProtoFunID>(
    stLuckShopRefreshResult_ProtoFunID_descriptor(), name, value);
}
enum stNotifyGuardFinish_ProtoModID {
  stNotifyGuardFinish_ProtoModID_ModID = 8
};
bool stNotifyGuardFinish_ProtoModID_IsValid(int value);
const stNotifyGuardFinish_ProtoModID stNotifyGuardFinish_ProtoModID_ProtoModID_MIN = stNotifyGuardFinish_ProtoModID_ModID;
const stNotifyGuardFinish_ProtoModID stNotifyGuardFinish_ProtoModID_ProtoModID_MAX = stNotifyGuardFinish_ProtoModID_ModID;
const int stNotifyGuardFinish_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyGuardFinish_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGuardFinish_ProtoModID_descriptor();
inline const ::std::string& stNotifyGuardFinish_ProtoModID_Name(stNotifyGuardFinish_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGuardFinish_ProtoModID_descriptor(), value);
}
inline bool stNotifyGuardFinish_ProtoModID_Parse(
    const ::std::string& name, stNotifyGuardFinish_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGuardFinish_ProtoModID>(
    stNotifyGuardFinish_ProtoModID_descriptor(), name, value);
}
enum stNotifyGuardFinish_ProtoFunID {
  stNotifyGuardFinish_ProtoFunID_FunID = 136
};
bool stNotifyGuardFinish_ProtoFunID_IsValid(int value);
const stNotifyGuardFinish_ProtoFunID stNotifyGuardFinish_ProtoFunID_ProtoFunID_MIN = stNotifyGuardFinish_ProtoFunID_FunID;
const stNotifyGuardFinish_ProtoFunID stNotifyGuardFinish_ProtoFunID_ProtoFunID_MAX = stNotifyGuardFinish_ProtoFunID_FunID;
const int stNotifyGuardFinish_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyGuardFinish_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGuardFinish_ProtoFunID_descriptor();
inline const ::std::string& stNotifyGuardFinish_ProtoFunID_Name(stNotifyGuardFinish_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGuardFinish_ProtoFunID_descriptor(), value);
}
inline bool stNotifyGuardFinish_ProtoFunID_Parse(
    const ::std::string& name, stNotifyGuardFinish_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGuardFinish_ProtoFunID>(
    stNotifyGuardFinish_ProtoFunID_descriptor(), name, value);
}
enum stNotifyFriendGuardFinish_ProtoModID {
  stNotifyFriendGuardFinish_ProtoModID_ModID = 8
};
bool stNotifyFriendGuardFinish_ProtoModID_IsValid(int value);
const stNotifyFriendGuardFinish_ProtoModID stNotifyFriendGuardFinish_ProtoModID_ProtoModID_MIN = stNotifyFriendGuardFinish_ProtoModID_ModID;
const stNotifyFriendGuardFinish_ProtoModID stNotifyFriendGuardFinish_ProtoModID_ProtoModID_MAX = stNotifyFriendGuardFinish_ProtoModID_ModID;
const int stNotifyFriendGuardFinish_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyFriendGuardFinish_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyFriendGuardFinish_ProtoModID_descriptor();
inline const ::std::string& stNotifyFriendGuardFinish_ProtoModID_Name(stNotifyFriendGuardFinish_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyFriendGuardFinish_ProtoModID_descriptor(), value);
}
inline bool stNotifyFriendGuardFinish_ProtoModID_Parse(
    const ::std::string& name, stNotifyFriendGuardFinish_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyFriendGuardFinish_ProtoModID>(
    stNotifyFriendGuardFinish_ProtoModID_descriptor(), name, value);
}
enum stNotifyFriendGuardFinish_ProtoFunID {
  stNotifyFriendGuardFinish_ProtoFunID_FunID = 137
};
bool stNotifyFriendGuardFinish_ProtoFunID_IsValid(int value);
const stNotifyFriendGuardFinish_ProtoFunID stNotifyFriendGuardFinish_ProtoFunID_ProtoFunID_MIN = stNotifyFriendGuardFinish_ProtoFunID_FunID;
const stNotifyFriendGuardFinish_ProtoFunID stNotifyFriendGuardFinish_ProtoFunID_ProtoFunID_MAX = stNotifyFriendGuardFinish_ProtoFunID_FunID;
const int stNotifyFriendGuardFinish_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyFriendGuardFinish_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyFriendGuardFinish_ProtoFunID_descriptor();
inline const ::std::string& stNotifyFriendGuardFinish_ProtoFunID_Name(stNotifyFriendGuardFinish_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyFriendGuardFinish_ProtoFunID_descriptor(), value);
}
inline bool stNotifyFriendGuardFinish_ProtoFunID_Parse(
    const ::std::string& name, stNotifyFriendGuardFinish_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyFriendGuardFinish_ProtoFunID>(
    stNotifyFriendGuardFinish_ProtoFunID_descriptor(), name, value);
}
enum stNotifyInterceptResult_ProtoModID {
  stNotifyInterceptResult_ProtoModID_ModID = 8
};
bool stNotifyInterceptResult_ProtoModID_IsValid(int value);
const stNotifyInterceptResult_ProtoModID stNotifyInterceptResult_ProtoModID_ProtoModID_MIN = stNotifyInterceptResult_ProtoModID_ModID;
const stNotifyInterceptResult_ProtoModID stNotifyInterceptResult_ProtoModID_ProtoModID_MAX = stNotifyInterceptResult_ProtoModID_ModID;
const int stNotifyInterceptResult_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyInterceptResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyInterceptResult_ProtoModID_descriptor();
inline const ::std::string& stNotifyInterceptResult_ProtoModID_Name(stNotifyInterceptResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyInterceptResult_ProtoModID_descriptor(), value);
}
inline bool stNotifyInterceptResult_ProtoModID_Parse(
    const ::std::string& name, stNotifyInterceptResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyInterceptResult_ProtoModID>(
    stNotifyInterceptResult_ProtoModID_descriptor(), name, value);
}
enum stNotifyInterceptResult_ProtoFunID {
  stNotifyInterceptResult_ProtoFunID_FunID = 138
};
bool stNotifyInterceptResult_ProtoFunID_IsValid(int value);
const stNotifyInterceptResult_ProtoFunID stNotifyInterceptResult_ProtoFunID_ProtoFunID_MIN = stNotifyInterceptResult_ProtoFunID_FunID;
const stNotifyInterceptResult_ProtoFunID stNotifyInterceptResult_ProtoFunID_ProtoFunID_MAX = stNotifyInterceptResult_ProtoFunID_FunID;
const int stNotifyInterceptResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyInterceptResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyInterceptResult_ProtoFunID_descriptor();
inline const ::std::string& stNotifyInterceptResult_ProtoFunID_Name(stNotifyInterceptResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyInterceptResult_ProtoFunID_descriptor(), value);
}
inline bool stNotifyInterceptResult_ProtoFunID_Parse(
    const ::std::string& name, stNotifyInterceptResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyInterceptResult_ProtoFunID>(
    stNotifyInterceptResult_ProtoFunID_descriptor(), name, value);
}
enum stReplyNotifyIntercept_ProtoModID {
  stReplyNotifyIntercept_ProtoModID_ModID = 8
};
bool stReplyNotifyIntercept_ProtoModID_IsValid(int value);
const stReplyNotifyIntercept_ProtoModID stReplyNotifyIntercept_ProtoModID_ProtoModID_MIN = stReplyNotifyIntercept_ProtoModID_ModID;
const stReplyNotifyIntercept_ProtoModID stReplyNotifyIntercept_ProtoModID_ProtoModID_MAX = stReplyNotifyIntercept_ProtoModID_ModID;
const int stReplyNotifyIntercept_ProtoModID_ProtoModID_ARRAYSIZE = stReplyNotifyIntercept_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyNotifyIntercept_ProtoModID_descriptor();
inline const ::std::string& stReplyNotifyIntercept_ProtoModID_Name(stReplyNotifyIntercept_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyNotifyIntercept_ProtoModID_descriptor(), value);
}
inline bool stReplyNotifyIntercept_ProtoModID_Parse(
    const ::std::string& name, stReplyNotifyIntercept_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyNotifyIntercept_ProtoModID>(
    stReplyNotifyIntercept_ProtoModID_descriptor(), name, value);
}
enum stReplyNotifyIntercept_ProtoFunID {
  stReplyNotifyIntercept_ProtoFunID_FunID = 139
};
bool stReplyNotifyIntercept_ProtoFunID_IsValid(int value);
const stReplyNotifyIntercept_ProtoFunID stReplyNotifyIntercept_ProtoFunID_ProtoFunID_MIN = stReplyNotifyIntercept_ProtoFunID_FunID;
const stReplyNotifyIntercept_ProtoFunID stReplyNotifyIntercept_ProtoFunID_ProtoFunID_MAX = stReplyNotifyIntercept_ProtoFunID_FunID;
const int stReplyNotifyIntercept_ProtoFunID_ProtoFunID_ARRAYSIZE = stReplyNotifyIntercept_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyNotifyIntercept_ProtoFunID_descriptor();
inline const ::std::string& stReplyNotifyIntercept_ProtoFunID_Name(stReplyNotifyIntercept_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyNotifyIntercept_ProtoFunID_descriptor(), value);
}
inline bool stReplyNotifyIntercept_ProtoFunID_Parse(
    const ::std::string& name, stReplyNotifyIntercept_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyNotifyIntercept_ProtoFunID>(
    stReplyNotifyIntercept_ProtoFunID_descriptor(), name, value);
}
enum stQuickFinishGuard_ProtoModID {
  stQuickFinishGuard_ProtoModID_ModID = 8
};
bool stQuickFinishGuard_ProtoModID_IsValid(int value);
const stQuickFinishGuard_ProtoModID stQuickFinishGuard_ProtoModID_ProtoModID_MIN = stQuickFinishGuard_ProtoModID_ModID;
const stQuickFinishGuard_ProtoModID stQuickFinishGuard_ProtoModID_ProtoModID_MAX = stQuickFinishGuard_ProtoModID_ModID;
const int stQuickFinishGuard_ProtoModID_ProtoModID_ARRAYSIZE = stQuickFinishGuard_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQuickFinishGuard_ProtoModID_descriptor();
inline const ::std::string& stQuickFinishGuard_ProtoModID_Name(stQuickFinishGuard_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQuickFinishGuard_ProtoModID_descriptor(), value);
}
inline bool stQuickFinishGuard_ProtoModID_Parse(
    const ::std::string& name, stQuickFinishGuard_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQuickFinishGuard_ProtoModID>(
    stQuickFinishGuard_ProtoModID_descriptor(), name, value);
}
enum stQuickFinishGuard_ProtoFunID {
  stQuickFinishGuard_ProtoFunID_FunID = 140
};
bool stQuickFinishGuard_ProtoFunID_IsValid(int value);
const stQuickFinishGuard_ProtoFunID stQuickFinishGuard_ProtoFunID_ProtoFunID_MIN = stQuickFinishGuard_ProtoFunID_FunID;
const stQuickFinishGuard_ProtoFunID stQuickFinishGuard_ProtoFunID_ProtoFunID_MAX = stQuickFinishGuard_ProtoFunID_FunID;
const int stQuickFinishGuard_ProtoFunID_ProtoFunID_ARRAYSIZE = stQuickFinishGuard_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQuickFinishGuard_ProtoFunID_descriptor();
inline const ::std::string& stQuickFinishGuard_ProtoFunID_Name(stQuickFinishGuard_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQuickFinishGuard_ProtoFunID_descriptor(), value);
}
inline bool stQuickFinishGuard_ProtoFunID_Parse(
    const ::std::string& name, stQuickFinishGuard_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQuickFinishGuard_ProtoFunID>(
    stQuickFinishGuard_ProtoFunID_descriptor(), name, value);
}
enum stQuickFinishGuardResult_eResult {
  stQuickFinishGuardResult_eResult_eSuccess = 1,
  stQuickFinishGuardResult_eResult_eHas_Not_Begin = 2,
  stQuickFinishGuardResult_eResult_eDiamond_Not_Enough = 3,
  stQuickFinishGuardResult_eResult_eBeing_Intercepted = 4
};
bool stQuickFinishGuardResult_eResult_IsValid(int value);
const stQuickFinishGuardResult_eResult stQuickFinishGuardResult_eResult_eResult_MIN = stQuickFinishGuardResult_eResult_eSuccess;
const stQuickFinishGuardResult_eResult stQuickFinishGuardResult_eResult_eResult_MAX = stQuickFinishGuardResult_eResult_eBeing_Intercepted;
const int stQuickFinishGuardResult_eResult_eResult_ARRAYSIZE = stQuickFinishGuardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQuickFinishGuardResult_eResult_descriptor();
inline const ::std::string& stQuickFinishGuardResult_eResult_Name(stQuickFinishGuardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQuickFinishGuardResult_eResult_descriptor(), value);
}
inline bool stQuickFinishGuardResult_eResult_Parse(
    const ::std::string& name, stQuickFinishGuardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQuickFinishGuardResult_eResult>(
    stQuickFinishGuardResult_eResult_descriptor(), name, value);
}
enum stQuickFinishGuardResult_ProtoModID {
  stQuickFinishGuardResult_ProtoModID_ModID = 8
};
bool stQuickFinishGuardResult_ProtoModID_IsValid(int value);
const stQuickFinishGuardResult_ProtoModID stQuickFinishGuardResult_ProtoModID_ProtoModID_MIN = stQuickFinishGuardResult_ProtoModID_ModID;
const stQuickFinishGuardResult_ProtoModID stQuickFinishGuardResult_ProtoModID_ProtoModID_MAX = stQuickFinishGuardResult_ProtoModID_ModID;
const int stQuickFinishGuardResult_ProtoModID_ProtoModID_ARRAYSIZE = stQuickFinishGuardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQuickFinishGuardResult_ProtoModID_descriptor();
inline const ::std::string& stQuickFinishGuardResult_ProtoModID_Name(stQuickFinishGuardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQuickFinishGuardResult_ProtoModID_descriptor(), value);
}
inline bool stQuickFinishGuardResult_ProtoModID_Parse(
    const ::std::string& name, stQuickFinishGuardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQuickFinishGuardResult_ProtoModID>(
    stQuickFinishGuardResult_ProtoModID_descriptor(), name, value);
}
enum stQuickFinishGuardResult_ProtoFunID {
  stQuickFinishGuardResult_ProtoFunID_FunID = 141
};
bool stQuickFinishGuardResult_ProtoFunID_IsValid(int value);
const stQuickFinishGuardResult_ProtoFunID stQuickFinishGuardResult_ProtoFunID_ProtoFunID_MIN = stQuickFinishGuardResult_ProtoFunID_FunID;
const stQuickFinishGuardResult_ProtoFunID stQuickFinishGuardResult_ProtoFunID_ProtoFunID_MAX = stQuickFinishGuardResult_ProtoFunID_FunID;
const int stQuickFinishGuardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stQuickFinishGuardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQuickFinishGuardResult_ProtoFunID_descriptor();
inline const ::std::string& stQuickFinishGuardResult_ProtoFunID_Name(stQuickFinishGuardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQuickFinishGuardResult_ProtoFunID_descriptor(), value);
}
inline bool stQuickFinishGuardResult_ProtoFunID_Parse(
    const ::std::string& name, stQuickFinishGuardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQuickFinishGuardResult_ProtoFunID>(
    stQuickFinishGuardResult_ProtoFunID_descriptor(), name, value);
}
enum stNotifyDelTitle_ProtoModID {
  stNotifyDelTitle_ProtoModID_ModID = 8
};
bool stNotifyDelTitle_ProtoModID_IsValid(int value);
const stNotifyDelTitle_ProtoModID stNotifyDelTitle_ProtoModID_ProtoModID_MIN = stNotifyDelTitle_ProtoModID_ModID;
const stNotifyDelTitle_ProtoModID stNotifyDelTitle_ProtoModID_ProtoModID_MAX = stNotifyDelTitle_ProtoModID_ModID;
const int stNotifyDelTitle_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyDelTitle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyDelTitle_ProtoModID_descriptor();
inline const ::std::string& stNotifyDelTitle_ProtoModID_Name(stNotifyDelTitle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyDelTitle_ProtoModID_descriptor(), value);
}
inline bool stNotifyDelTitle_ProtoModID_Parse(
    const ::std::string& name, stNotifyDelTitle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyDelTitle_ProtoModID>(
    stNotifyDelTitle_ProtoModID_descriptor(), name, value);
}
enum stNotifyDelTitle_ProtoFunID {
  stNotifyDelTitle_ProtoFunID_FunID = 142
};
bool stNotifyDelTitle_ProtoFunID_IsValid(int value);
const stNotifyDelTitle_ProtoFunID stNotifyDelTitle_ProtoFunID_ProtoFunID_MIN = stNotifyDelTitle_ProtoFunID_FunID;
const stNotifyDelTitle_ProtoFunID stNotifyDelTitle_ProtoFunID_ProtoFunID_MAX = stNotifyDelTitle_ProtoFunID_FunID;
const int stNotifyDelTitle_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyDelTitle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyDelTitle_ProtoFunID_descriptor();
inline const ::std::string& stNotifyDelTitle_ProtoFunID_Name(stNotifyDelTitle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyDelTitle_ProtoFunID_descriptor(), value);
}
inline bool stNotifyDelTitle_ProtoFunID_Parse(
    const ::std::string& name, stNotifyDelTitle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyDelTitle_ProtoFunID>(
    stNotifyDelTitle_ProtoFunID_descriptor(), name, value);
}
enum stBeInterceptTip_ProtoModID {
  stBeInterceptTip_ProtoModID_ModID = 8
};
bool stBeInterceptTip_ProtoModID_IsValid(int value);
const stBeInterceptTip_ProtoModID stBeInterceptTip_ProtoModID_ProtoModID_MIN = stBeInterceptTip_ProtoModID_ModID;
const stBeInterceptTip_ProtoModID stBeInterceptTip_ProtoModID_ProtoModID_MAX = stBeInterceptTip_ProtoModID_ModID;
const int stBeInterceptTip_ProtoModID_ProtoModID_ARRAYSIZE = stBeInterceptTip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeInterceptTip_ProtoModID_descriptor();
inline const ::std::string& stBeInterceptTip_ProtoModID_Name(stBeInterceptTip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeInterceptTip_ProtoModID_descriptor(), value);
}
inline bool stBeInterceptTip_ProtoModID_Parse(
    const ::std::string& name, stBeInterceptTip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeInterceptTip_ProtoModID>(
    stBeInterceptTip_ProtoModID_descriptor(), name, value);
}
enum stBeInterceptTip_ProtoFunID {
  stBeInterceptTip_ProtoFunID_FunID = 143
};
bool stBeInterceptTip_ProtoFunID_IsValid(int value);
const stBeInterceptTip_ProtoFunID stBeInterceptTip_ProtoFunID_ProtoFunID_MIN = stBeInterceptTip_ProtoFunID_FunID;
const stBeInterceptTip_ProtoFunID stBeInterceptTip_ProtoFunID_ProtoFunID_MAX = stBeInterceptTip_ProtoFunID_FunID;
const int stBeInterceptTip_ProtoFunID_ProtoFunID_ARRAYSIZE = stBeInterceptTip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeInterceptTip_ProtoFunID_descriptor();
inline const ::std::string& stBeInterceptTip_ProtoFunID_Name(stBeInterceptTip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeInterceptTip_ProtoFunID_descriptor(), value);
}
inline bool stBeInterceptTip_ProtoFunID_Parse(
    const ::std::string& name, stBeInterceptTip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeInterceptTip_ProtoFunID>(
    stBeInterceptTip_ProtoFunID_descriptor(), name, value);
}
enum stOnlineNotifyNewInterceptInfo_ProtoModID {
  stOnlineNotifyNewInterceptInfo_ProtoModID_ModID = 8
};
bool stOnlineNotifyNewInterceptInfo_ProtoModID_IsValid(int value);
const stOnlineNotifyNewInterceptInfo_ProtoModID stOnlineNotifyNewInterceptInfo_ProtoModID_ProtoModID_MIN = stOnlineNotifyNewInterceptInfo_ProtoModID_ModID;
const stOnlineNotifyNewInterceptInfo_ProtoModID stOnlineNotifyNewInterceptInfo_ProtoModID_ProtoModID_MAX = stOnlineNotifyNewInterceptInfo_ProtoModID_ModID;
const int stOnlineNotifyNewInterceptInfo_ProtoModID_ProtoModID_ARRAYSIZE = stOnlineNotifyNewInterceptInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOnlineNotifyNewInterceptInfo_ProtoModID_descriptor();
inline const ::std::string& stOnlineNotifyNewInterceptInfo_ProtoModID_Name(stOnlineNotifyNewInterceptInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOnlineNotifyNewInterceptInfo_ProtoModID_descriptor(), value);
}
inline bool stOnlineNotifyNewInterceptInfo_ProtoModID_Parse(
    const ::std::string& name, stOnlineNotifyNewInterceptInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOnlineNotifyNewInterceptInfo_ProtoModID>(
    stOnlineNotifyNewInterceptInfo_ProtoModID_descriptor(), name, value);
}
enum stOnlineNotifyNewInterceptInfo_ProtoFunID {
  stOnlineNotifyNewInterceptInfo_ProtoFunID_FunID = 144
};
bool stOnlineNotifyNewInterceptInfo_ProtoFunID_IsValid(int value);
const stOnlineNotifyNewInterceptInfo_ProtoFunID stOnlineNotifyNewInterceptInfo_ProtoFunID_ProtoFunID_MIN = stOnlineNotifyNewInterceptInfo_ProtoFunID_FunID;
const stOnlineNotifyNewInterceptInfo_ProtoFunID stOnlineNotifyNewInterceptInfo_ProtoFunID_ProtoFunID_MAX = stOnlineNotifyNewInterceptInfo_ProtoFunID_FunID;
const int stOnlineNotifyNewInterceptInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stOnlineNotifyNewInterceptInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOnlineNotifyNewInterceptInfo_ProtoFunID_descriptor();
inline const ::std::string& stOnlineNotifyNewInterceptInfo_ProtoFunID_Name(stOnlineNotifyNewInterceptInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOnlineNotifyNewInterceptInfo_ProtoFunID_descriptor(), value);
}
inline bool stOnlineNotifyNewInterceptInfo_ProtoFunID_Parse(
    const ::std::string& name, stOnlineNotifyNewInterceptInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOnlineNotifyNewInterceptInfo_ProtoFunID>(
    stOnlineNotifyNewInterceptInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenLimitFashionDrawWin_ProtoModID {
  stReqOpenLimitFashionDrawWin_ProtoModID_ModID = 8
};
bool stReqOpenLimitFashionDrawWin_ProtoModID_IsValid(int value);
const stReqOpenLimitFashionDrawWin_ProtoModID stReqOpenLimitFashionDrawWin_ProtoModID_ProtoModID_MIN = stReqOpenLimitFashionDrawWin_ProtoModID_ModID;
const stReqOpenLimitFashionDrawWin_ProtoModID stReqOpenLimitFashionDrawWin_ProtoModID_ProtoModID_MAX = stReqOpenLimitFashionDrawWin_ProtoModID_ModID;
const int stReqOpenLimitFashionDrawWin_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenLimitFashionDrawWin_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenLimitFashionDrawWin_ProtoModID_descriptor();
inline const ::std::string& stReqOpenLimitFashionDrawWin_ProtoModID_Name(stReqOpenLimitFashionDrawWin_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenLimitFashionDrawWin_ProtoModID_descriptor(), value);
}
inline bool stReqOpenLimitFashionDrawWin_ProtoModID_Parse(
    const ::std::string& name, stReqOpenLimitFashionDrawWin_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenLimitFashionDrawWin_ProtoModID>(
    stReqOpenLimitFashionDrawWin_ProtoModID_descriptor(), name, value);
}
enum stReqOpenLimitFashionDrawWin_ProtoFunID {
  stReqOpenLimitFashionDrawWin_ProtoFunID_FunID = 145
};
bool stReqOpenLimitFashionDrawWin_ProtoFunID_IsValid(int value);
const stReqOpenLimitFashionDrawWin_ProtoFunID stReqOpenLimitFashionDrawWin_ProtoFunID_ProtoFunID_MIN = stReqOpenLimitFashionDrawWin_ProtoFunID_FunID;
const stReqOpenLimitFashionDrawWin_ProtoFunID stReqOpenLimitFashionDrawWin_ProtoFunID_ProtoFunID_MAX = stReqOpenLimitFashionDrawWin_ProtoFunID_FunID;
const int stReqOpenLimitFashionDrawWin_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenLimitFashionDrawWin_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenLimitFashionDrawWin_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenLimitFashionDrawWin_ProtoFunID_Name(stReqOpenLimitFashionDrawWin_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenLimitFashionDrawWin_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenLimitFashionDrawWin_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenLimitFashionDrawWin_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenLimitFashionDrawWin_ProtoFunID>(
    stReqOpenLimitFashionDrawWin_ProtoFunID_descriptor(), name, value);
}
enum stRetLimitFashionDrawWinInfo_ProtoModID {
  stRetLimitFashionDrawWinInfo_ProtoModID_ModID = 8
};
bool stRetLimitFashionDrawWinInfo_ProtoModID_IsValid(int value);
const stRetLimitFashionDrawWinInfo_ProtoModID stRetLimitFashionDrawWinInfo_ProtoModID_ProtoModID_MIN = stRetLimitFashionDrawWinInfo_ProtoModID_ModID;
const stRetLimitFashionDrawWinInfo_ProtoModID stRetLimitFashionDrawWinInfo_ProtoModID_ProtoModID_MAX = stRetLimitFashionDrawWinInfo_ProtoModID_ModID;
const int stRetLimitFashionDrawWinInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetLimitFashionDrawWinInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLimitFashionDrawWinInfo_ProtoModID_descriptor();
inline const ::std::string& stRetLimitFashionDrawWinInfo_ProtoModID_Name(stRetLimitFashionDrawWinInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLimitFashionDrawWinInfo_ProtoModID_descriptor(), value);
}
inline bool stRetLimitFashionDrawWinInfo_ProtoModID_Parse(
    const ::std::string& name, stRetLimitFashionDrawWinInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLimitFashionDrawWinInfo_ProtoModID>(
    stRetLimitFashionDrawWinInfo_ProtoModID_descriptor(), name, value);
}
enum stRetLimitFashionDrawWinInfo_ProtoFunID {
  stRetLimitFashionDrawWinInfo_ProtoFunID_FunID = 146
};
bool stRetLimitFashionDrawWinInfo_ProtoFunID_IsValid(int value);
const stRetLimitFashionDrawWinInfo_ProtoFunID stRetLimitFashionDrawWinInfo_ProtoFunID_ProtoFunID_MIN = stRetLimitFashionDrawWinInfo_ProtoFunID_FunID;
const stRetLimitFashionDrawWinInfo_ProtoFunID stRetLimitFashionDrawWinInfo_ProtoFunID_ProtoFunID_MAX = stRetLimitFashionDrawWinInfo_ProtoFunID_FunID;
const int stRetLimitFashionDrawWinInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetLimitFashionDrawWinInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLimitFashionDrawWinInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetLimitFashionDrawWinInfo_ProtoFunID_Name(stRetLimitFashionDrawWinInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLimitFashionDrawWinInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetLimitFashionDrawWinInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetLimitFashionDrawWinInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLimitFashionDrawWinInfo_ProtoFunID>(
    stRetLimitFashionDrawWinInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawLimitFashion_ProtoModID {
  stReqDrawLimitFashion_ProtoModID_ModID = 8
};
bool stReqDrawLimitFashion_ProtoModID_IsValid(int value);
const stReqDrawLimitFashion_ProtoModID stReqDrawLimitFashion_ProtoModID_ProtoModID_MIN = stReqDrawLimitFashion_ProtoModID_ModID;
const stReqDrawLimitFashion_ProtoModID stReqDrawLimitFashion_ProtoModID_ProtoModID_MAX = stReqDrawLimitFashion_ProtoModID_ModID;
const int stReqDrawLimitFashion_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawLimitFashion_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawLimitFashion_ProtoModID_descriptor();
inline const ::std::string& stReqDrawLimitFashion_ProtoModID_Name(stReqDrawLimitFashion_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawLimitFashion_ProtoModID_descriptor(), value);
}
inline bool stReqDrawLimitFashion_ProtoModID_Parse(
    const ::std::string& name, stReqDrawLimitFashion_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawLimitFashion_ProtoModID>(
    stReqDrawLimitFashion_ProtoModID_descriptor(), name, value);
}
enum stReqDrawLimitFashion_ProtoFunID {
  stReqDrawLimitFashion_ProtoFunID_FunID = 147
};
bool stReqDrawLimitFashion_ProtoFunID_IsValid(int value);
const stReqDrawLimitFashion_ProtoFunID stReqDrawLimitFashion_ProtoFunID_ProtoFunID_MIN = stReqDrawLimitFashion_ProtoFunID_FunID;
const stReqDrawLimitFashion_ProtoFunID stReqDrawLimitFashion_ProtoFunID_ProtoFunID_MAX = stReqDrawLimitFashion_ProtoFunID_FunID;
const int stReqDrawLimitFashion_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawLimitFashion_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawLimitFashion_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawLimitFashion_ProtoFunID_Name(stReqDrawLimitFashion_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawLimitFashion_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawLimitFashion_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawLimitFashion_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawLimitFashion_ProtoFunID>(
    stReqDrawLimitFashion_ProtoFunID_descriptor(), name, value);
}
enum stDrawLimitFashionResult_eResult {
  stDrawLimitFashionResult_eResult_eSuccess = 1,
  stDrawLimitFashionResult_eResult_eBag_Full = 2,
  stDrawLimitFashionResult_eResult_eHas_Not_Draw_Num = 3,
  stDrawLimitFashionResult_eResult_eActivity_Not_Open = 4,
  stDrawLimitFashionResult_eResult_eDraw_Out = 5
};
bool stDrawLimitFashionResult_eResult_IsValid(int value);
const stDrawLimitFashionResult_eResult stDrawLimitFashionResult_eResult_eResult_MIN = stDrawLimitFashionResult_eResult_eSuccess;
const stDrawLimitFashionResult_eResult stDrawLimitFashionResult_eResult_eResult_MAX = stDrawLimitFashionResult_eResult_eDraw_Out;
const int stDrawLimitFashionResult_eResult_eResult_ARRAYSIZE = stDrawLimitFashionResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawLimitFashionResult_eResult_descriptor();
inline const ::std::string& stDrawLimitFashionResult_eResult_Name(stDrawLimitFashionResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawLimitFashionResult_eResult_descriptor(), value);
}
inline bool stDrawLimitFashionResult_eResult_Parse(
    const ::std::string& name, stDrawLimitFashionResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawLimitFashionResult_eResult>(
    stDrawLimitFashionResult_eResult_descriptor(), name, value);
}
enum stDrawLimitFashionResult_ProtoModID {
  stDrawLimitFashionResult_ProtoModID_ModID = 8
};
bool stDrawLimitFashionResult_ProtoModID_IsValid(int value);
const stDrawLimitFashionResult_ProtoModID stDrawLimitFashionResult_ProtoModID_ProtoModID_MIN = stDrawLimitFashionResult_ProtoModID_ModID;
const stDrawLimitFashionResult_ProtoModID stDrawLimitFashionResult_ProtoModID_ProtoModID_MAX = stDrawLimitFashionResult_ProtoModID_ModID;
const int stDrawLimitFashionResult_ProtoModID_ProtoModID_ARRAYSIZE = stDrawLimitFashionResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawLimitFashionResult_ProtoModID_descriptor();
inline const ::std::string& stDrawLimitFashionResult_ProtoModID_Name(stDrawLimitFashionResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawLimitFashionResult_ProtoModID_descriptor(), value);
}
inline bool stDrawLimitFashionResult_ProtoModID_Parse(
    const ::std::string& name, stDrawLimitFashionResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawLimitFashionResult_ProtoModID>(
    stDrawLimitFashionResult_ProtoModID_descriptor(), name, value);
}
enum stDrawLimitFashionResult_ProtoFunID {
  stDrawLimitFashionResult_ProtoFunID_FunID = 148
};
bool stDrawLimitFashionResult_ProtoFunID_IsValid(int value);
const stDrawLimitFashionResult_ProtoFunID stDrawLimitFashionResult_ProtoFunID_ProtoFunID_MIN = stDrawLimitFashionResult_ProtoFunID_FunID;
const stDrawLimitFashionResult_ProtoFunID stDrawLimitFashionResult_ProtoFunID_ProtoFunID_MAX = stDrawLimitFashionResult_ProtoFunID_FunID;
const int stDrawLimitFashionResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stDrawLimitFashionResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawLimitFashionResult_ProtoFunID_descriptor();
inline const ::std::string& stDrawLimitFashionResult_ProtoFunID_Name(stDrawLimitFashionResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawLimitFashionResult_ProtoFunID_descriptor(), value);
}
inline bool stDrawLimitFashionResult_ProtoFunID_Parse(
    const ::std::string& name, stDrawLimitFashionResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawLimitFashionResult_ProtoFunID>(
    stDrawLimitFashionResult_ProtoFunID_descriptor(), name, value);
}
enum stRetExchangeActivity_ProtoModID {
  stRetExchangeActivity_ProtoModID_ModID = 8
};
bool stRetExchangeActivity_ProtoModID_IsValid(int value);
const stRetExchangeActivity_ProtoModID stRetExchangeActivity_ProtoModID_ProtoModID_MIN = stRetExchangeActivity_ProtoModID_ModID;
const stRetExchangeActivity_ProtoModID stRetExchangeActivity_ProtoModID_ProtoModID_MAX = stRetExchangeActivity_ProtoModID_ModID;
const int stRetExchangeActivity_ProtoModID_ProtoModID_ARRAYSIZE = stRetExchangeActivity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExchangeActivity_ProtoModID_descriptor();
inline const ::std::string& stRetExchangeActivity_ProtoModID_Name(stRetExchangeActivity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExchangeActivity_ProtoModID_descriptor(), value);
}
inline bool stRetExchangeActivity_ProtoModID_Parse(
    const ::std::string& name, stRetExchangeActivity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExchangeActivity_ProtoModID>(
    stRetExchangeActivity_ProtoModID_descriptor(), name, value);
}
enum stRetExchangeActivity_ProtoFunID {
  stRetExchangeActivity_ProtoFunID_FunID = 149
};
bool stRetExchangeActivity_ProtoFunID_IsValid(int value);
const stRetExchangeActivity_ProtoFunID stRetExchangeActivity_ProtoFunID_ProtoFunID_MIN = stRetExchangeActivity_ProtoFunID_FunID;
const stRetExchangeActivity_ProtoFunID stRetExchangeActivity_ProtoFunID_ProtoFunID_MAX = stRetExchangeActivity_ProtoFunID_FunID;
const int stRetExchangeActivity_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetExchangeActivity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExchangeActivity_ProtoFunID_descriptor();
inline const ::std::string& stRetExchangeActivity_ProtoFunID_Name(stRetExchangeActivity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExchangeActivity_ProtoFunID_descriptor(), value);
}
inline bool stRetExchangeActivity_ProtoFunID_Parse(
    const ::std::string& name, stRetExchangeActivity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExchangeActivity_ProtoFunID>(
    stRetExchangeActivity_ProtoFunID_descriptor(), name, value);
}
enum stReqExchangeItem_ProtoModID {
  stReqExchangeItem_ProtoModID_ModID = 8
};
bool stReqExchangeItem_ProtoModID_IsValid(int value);
const stReqExchangeItem_ProtoModID stReqExchangeItem_ProtoModID_ProtoModID_MIN = stReqExchangeItem_ProtoModID_ModID;
const stReqExchangeItem_ProtoModID stReqExchangeItem_ProtoModID_ProtoModID_MAX = stReqExchangeItem_ProtoModID_ModID;
const int stReqExchangeItem_ProtoModID_ProtoModID_ARRAYSIZE = stReqExchangeItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqExchangeItem_ProtoModID_descriptor();
inline const ::std::string& stReqExchangeItem_ProtoModID_Name(stReqExchangeItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqExchangeItem_ProtoModID_descriptor(), value);
}
inline bool stReqExchangeItem_ProtoModID_Parse(
    const ::std::string& name, stReqExchangeItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqExchangeItem_ProtoModID>(
    stReqExchangeItem_ProtoModID_descriptor(), name, value);
}
enum stReqExchangeItem_ProtoFunID {
  stReqExchangeItem_ProtoFunID_FunID = 150
};
bool stReqExchangeItem_ProtoFunID_IsValid(int value);
const stReqExchangeItem_ProtoFunID stReqExchangeItem_ProtoFunID_ProtoFunID_MIN = stReqExchangeItem_ProtoFunID_FunID;
const stReqExchangeItem_ProtoFunID stReqExchangeItem_ProtoFunID_ProtoFunID_MAX = stReqExchangeItem_ProtoFunID_FunID;
const int stReqExchangeItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqExchangeItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqExchangeItem_ProtoFunID_descriptor();
inline const ::std::string& stReqExchangeItem_ProtoFunID_Name(stReqExchangeItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqExchangeItem_ProtoFunID_descriptor(), value);
}
inline bool stReqExchangeItem_ProtoFunID_Parse(
    const ::std::string& name, stReqExchangeItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqExchangeItem_ProtoFunID>(
    stReqExchangeItem_ProtoFunID_descriptor(), name, value);
}
enum stExchangeItemResult_eResult {
  stExchangeItemResult_eResult_eSuccess = 1,
  stExchangeItemResult_eResult_eTime_Use_Out = 2,
  stExchangeItemResult_eResult_eBag_Full = 3,
  stExchangeItemResult_eResult_eActivity_Finish = 4,
  stExchangeItemResult_eResult_eHas_Not_Enough_Item = 5
};
bool stExchangeItemResult_eResult_IsValid(int value);
const stExchangeItemResult_eResult stExchangeItemResult_eResult_eResult_MIN = stExchangeItemResult_eResult_eSuccess;
const stExchangeItemResult_eResult stExchangeItemResult_eResult_eResult_MAX = stExchangeItemResult_eResult_eHas_Not_Enough_Item;
const int stExchangeItemResult_eResult_eResult_ARRAYSIZE = stExchangeItemResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExchangeItemResult_eResult_descriptor();
inline const ::std::string& stExchangeItemResult_eResult_Name(stExchangeItemResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExchangeItemResult_eResult_descriptor(), value);
}
inline bool stExchangeItemResult_eResult_Parse(
    const ::std::string& name, stExchangeItemResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExchangeItemResult_eResult>(
    stExchangeItemResult_eResult_descriptor(), name, value);
}
enum stExchangeItemResult_ProtoModID {
  stExchangeItemResult_ProtoModID_ModID = 8
};
bool stExchangeItemResult_ProtoModID_IsValid(int value);
const stExchangeItemResult_ProtoModID stExchangeItemResult_ProtoModID_ProtoModID_MIN = stExchangeItemResult_ProtoModID_ModID;
const stExchangeItemResult_ProtoModID stExchangeItemResult_ProtoModID_ProtoModID_MAX = stExchangeItemResult_ProtoModID_ModID;
const int stExchangeItemResult_ProtoModID_ProtoModID_ARRAYSIZE = stExchangeItemResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExchangeItemResult_ProtoModID_descriptor();
inline const ::std::string& stExchangeItemResult_ProtoModID_Name(stExchangeItemResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExchangeItemResult_ProtoModID_descriptor(), value);
}
inline bool stExchangeItemResult_ProtoModID_Parse(
    const ::std::string& name, stExchangeItemResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExchangeItemResult_ProtoModID>(
    stExchangeItemResult_ProtoModID_descriptor(), name, value);
}
enum stExchangeItemResult_ProtoFunID {
  stExchangeItemResult_ProtoFunID_FunID = 151
};
bool stExchangeItemResult_ProtoFunID_IsValid(int value);
const stExchangeItemResult_ProtoFunID stExchangeItemResult_ProtoFunID_ProtoFunID_MIN = stExchangeItemResult_ProtoFunID_FunID;
const stExchangeItemResult_ProtoFunID stExchangeItemResult_ProtoFunID_ProtoFunID_MAX = stExchangeItemResult_ProtoFunID_FunID;
const int stExchangeItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stExchangeItemResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExchangeItemResult_ProtoFunID_descriptor();
inline const ::std::string& stExchangeItemResult_ProtoFunID_Name(stExchangeItemResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExchangeItemResult_ProtoFunID_descriptor(), value);
}
inline bool stExchangeItemResult_ProtoFunID_Parse(
    const ::std::string& name, stExchangeItemResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExchangeItemResult_ProtoFunID>(
    stExchangeItemResult_ProtoFunID_descriptor(), name, value);
}
enum stSendRecycleRechargeActivity_ProtoModID {
  stSendRecycleRechargeActivity_ProtoModID_ModID = 8
};
bool stSendRecycleRechargeActivity_ProtoModID_IsValid(int value);
const stSendRecycleRechargeActivity_ProtoModID stSendRecycleRechargeActivity_ProtoModID_ProtoModID_MIN = stSendRecycleRechargeActivity_ProtoModID_ModID;
const stSendRecycleRechargeActivity_ProtoModID stSendRecycleRechargeActivity_ProtoModID_ProtoModID_MAX = stSendRecycleRechargeActivity_ProtoModID_ModID;
const int stSendRecycleRechargeActivity_ProtoModID_ProtoModID_ARRAYSIZE = stSendRecycleRechargeActivity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendRecycleRechargeActivity_ProtoModID_descriptor();
inline const ::std::string& stSendRecycleRechargeActivity_ProtoModID_Name(stSendRecycleRechargeActivity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendRecycleRechargeActivity_ProtoModID_descriptor(), value);
}
inline bool stSendRecycleRechargeActivity_ProtoModID_Parse(
    const ::std::string& name, stSendRecycleRechargeActivity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendRecycleRechargeActivity_ProtoModID>(
    stSendRecycleRechargeActivity_ProtoModID_descriptor(), name, value);
}
enum stSendRecycleRechargeActivity_ProtoFunID {
  stSendRecycleRechargeActivity_ProtoFunID_FunID = 152
};
bool stSendRecycleRechargeActivity_ProtoFunID_IsValid(int value);
const stSendRecycleRechargeActivity_ProtoFunID stSendRecycleRechargeActivity_ProtoFunID_ProtoFunID_MIN = stSendRecycleRechargeActivity_ProtoFunID_FunID;
const stSendRecycleRechargeActivity_ProtoFunID stSendRecycleRechargeActivity_ProtoFunID_ProtoFunID_MAX = stSendRecycleRechargeActivity_ProtoFunID_FunID;
const int stSendRecycleRechargeActivity_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendRecycleRechargeActivity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendRecycleRechargeActivity_ProtoFunID_descriptor();
inline const ::std::string& stSendRecycleRechargeActivity_ProtoFunID_Name(stSendRecycleRechargeActivity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendRecycleRechargeActivity_ProtoFunID_descriptor(), value);
}
inline bool stSendRecycleRechargeActivity_ProtoFunID_Parse(
    const ::std::string& name, stSendRecycleRechargeActivity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendRecycleRechargeActivity_ProtoFunID>(
    stSendRecycleRechargeActivity_ProtoFunID_descriptor(), name, value);
}
enum stReqRecycleRechargeActReward_ProtoModID {
  stReqRecycleRechargeActReward_ProtoModID_ModID = 8
};
bool stReqRecycleRechargeActReward_ProtoModID_IsValid(int value);
const stReqRecycleRechargeActReward_ProtoModID stReqRecycleRechargeActReward_ProtoModID_ProtoModID_MIN = stReqRecycleRechargeActReward_ProtoModID_ModID;
const stReqRecycleRechargeActReward_ProtoModID stReqRecycleRechargeActReward_ProtoModID_ProtoModID_MAX = stReqRecycleRechargeActReward_ProtoModID_ModID;
const int stReqRecycleRechargeActReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqRecycleRechargeActReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecycleRechargeActReward_ProtoModID_descriptor();
inline const ::std::string& stReqRecycleRechargeActReward_ProtoModID_Name(stReqRecycleRechargeActReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecycleRechargeActReward_ProtoModID_descriptor(), value);
}
inline bool stReqRecycleRechargeActReward_ProtoModID_Parse(
    const ::std::string& name, stReqRecycleRechargeActReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecycleRechargeActReward_ProtoModID>(
    stReqRecycleRechargeActReward_ProtoModID_descriptor(), name, value);
}
enum stReqRecycleRechargeActReward_ProtoFunID {
  stReqRecycleRechargeActReward_ProtoFunID_FunID = 153
};
bool stReqRecycleRechargeActReward_ProtoFunID_IsValid(int value);
const stReqRecycleRechargeActReward_ProtoFunID stReqRecycleRechargeActReward_ProtoFunID_ProtoFunID_MIN = stReqRecycleRechargeActReward_ProtoFunID_FunID;
const stReqRecycleRechargeActReward_ProtoFunID stReqRecycleRechargeActReward_ProtoFunID_ProtoFunID_MAX = stReqRecycleRechargeActReward_ProtoFunID_FunID;
const int stReqRecycleRechargeActReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRecycleRechargeActReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecycleRechargeActReward_ProtoFunID_descriptor();
inline const ::std::string& stReqRecycleRechargeActReward_ProtoFunID_Name(stReqRecycleRechargeActReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecycleRechargeActReward_ProtoFunID_descriptor(), value);
}
inline bool stReqRecycleRechargeActReward_ProtoFunID_Parse(
    const ::std::string& name, stReqRecycleRechargeActReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecycleRechargeActReward_ProtoFunID>(
    stReqRecycleRechargeActReward_ProtoFunID_descriptor(), name, value);
}
enum stRetRecycleRechargeActReward_eResult {
  stRetRecycleRechargeActReward_eResult_eSuccess = 1,
  stRetRecycleRechargeActReward_eResult_eBag_Full = 2,
  stRetRecycleRechargeActReward_eResult_eTime_Use_Out = 3,
  stRetRecycleRechargeActReward_eResult_eNot_Begin = 4,
  stRetRecycleRechargeActReward_eResult_eSelect_Not_Exist = 5,
  stRetRecycleRechargeActReward_eResult_eRecharge_Not_Enough = 6
};
bool stRetRecycleRechargeActReward_eResult_IsValid(int value);
const stRetRecycleRechargeActReward_eResult stRetRecycleRechargeActReward_eResult_eResult_MIN = stRetRecycleRechargeActReward_eResult_eSuccess;
const stRetRecycleRechargeActReward_eResult stRetRecycleRechargeActReward_eResult_eResult_MAX = stRetRecycleRechargeActReward_eResult_eRecharge_Not_Enough;
const int stRetRecycleRechargeActReward_eResult_eResult_ARRAYSIZE = stRetRecycleRechargeActReward_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRecycleRechargeActReward_eResult_descriptor();
inline const ::std::string& stRetRecycleRechargeActReward_eResult_Name(stRetRecycleRechargeActReward_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRecycleRechargeActReward_eResult_descriptor(), value);
}
inline bool stRetRecycleRechargeActReward_eResult_Parse(
    const ::std::string& name, stRetRecycleRechargeActReward_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRecycleRechargeActReward_eResult>(
    stRetRecycleRechargeActReward_eResult_descriptor(), name, value);
}
enum stRetRecycleRechargeActReward_ProtoModID {
  stRetRecycleRechargeActReward_ProtoModID_ModID = 8
};
bool stRetRecycleRechargeActReward_ProtoModID_IsValid(int value);
const stRetRecycleRechargeActReward_ProtoModID stRetRecycleRechargeActReward_ProtoModID_ProtoModID_MIN = stRetRecycleRechargeActReward_ProtoModID_ModID;
const stRetRecycleRechargeActReward_ProtoModID stRetRecycleRechargeActReward_ProtoModID_ProtoModID_MAX = stRetRecycleRechargeActReward_ProtoModID_ModID;
const int stRetRecycleRechargeActReward_ProtoModID_ProtoModID_ARRAYSIZE = stRetRecycleRechargeActReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRecycleRechargeActReward_ProtoModID_descriptor();
inline const ::std::string& stRetRecycleRechargeActReward_ProtoModID_Name(stRetRecycleRechargeActReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRecycleRechargeActReward_ProtoModID_descriptor(), value);
}
inline bool stRetRecycleRechargeActReward_ProtoModID_Parse(
    const ::std::string& name, stRetRecycleRechargeActReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRecycleRechargeActReward_ProtoModID>(
    stRetRecycleRechargeActReward_ProtoModID_descriptor(), name, value);
}
enum stRetRecycleRechargeActReward_ProtoFunID {
  stRetRecycleRechargeActReward_ProtoFunID_FunID = 154
};
bool stRetRecycleRechargeActReward_ProtoFunID_IsValid(int value);
const stRetRecycleRechargeActReward_ProtoFunID stRetRecycleRechargeActReward_ProtoFunID_ProtoFunID_MIN = stRetRecycleRechargeActReward_ProtoFunID_FunID;
const stRetRecycleRechargeActReward_ProtoFunID stRetRecycleRechargeActReward_ProtoFunID_ProtoFunID_MAX = stRetRecycleRechargeActReward_ProtoFunID_FunID;
const int stRetRecycleRechargeActReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRecycleRechargeActReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRecycleRechargeActReward_ProtoFunID_descriptor();
inline const ::std::string& stRetRecycleRechargeActReward_ProtoFunID_Name(stRetRecycleRechargeActReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRecycleRechargeActReward_ProtoFunID_descriptor(), value);
}
inline bool stRetRecycleRechargeActReward_ProtoFunID_Parse(
    const ::std::string& name, stRetRecycleRechargeActReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRecycleRechargeActReward_ProtoFunID>(
    stRetRecycleRechargeActReward_ProtoFunID_descriptor(), name, value);
}
enum stRefreshCommonActInfo_ProtoModID {
  stRefreshCommonActInfo_ProtoModID_ModID = 8
};
bool stRefreshCommonActInfo_ProtoModID_IsValid(int value);
const stRefreshCommonActInfo_ProtoModID stRefreshCommonActInfo_ProtoModID_ProtoModID_MIN = stRefreshCommonActInfo_ProtoModID_ModID;
const stRefreshCommonActInfo_ProtoModID stRefreshCommonActInfo_ProtoModID_ProtoModID_MAX = stRefreshCommonActInfo_ProtoModID_ModID;
const int stRefreshCommonActInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRefreshCommonActInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshCommonActInfo_ProtoModID_descriptor();
inline const ::std::string& stRefreshCommonActInfo_ProtoModID_Name(stRefreshCommonActInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshCommonActInfo_ProtoModID_descriptor(), value);
}
inline bool stRefreshCommonActInfo_ProtoModID_Parse(
    const ::std::string& name, stRefreshCommonActInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshCommonActInfo_ProtoModID>(
    stRefreshCommonActInfo_ProtoModID_descriptor(), name, value);
}
enum stRefreshCommonActInfo_ProtoFunID {
  stRefreshCommonActInfo_ProtoFunID_FunID = 155
};
bool stRefreshCommonActInfo_ProtoFunID_IsValid(int value);
const stRefreshCommonActInfo_ProtoFunID stRefreshCommonActInfo_ProtoFunID_ProtoFunID_MIN = stRefreshCommonActInfo_ProtoFunID_FunID;
const stRefreshCommonActInfo_ProtoFunID stRefreshCommonActInfo_ProtoFunID_ProtoFunID_MAX = stRefreshCommonActInfo_ProtoFunID_FunID;
const int stRefreshCommonActInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefreshCommonActInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshCommonActInfo_ProtoFunID_descriptor();
inline const ::std::string& stRefreshCommonActInfo_ProtoFunID_Name(stRefreshCommonActInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshCommonActInfo_ProtoFunID_descriptor(), value);
}
inline bool stRefreshCommonActInfo_ProtoFunID_Parse(
    const ::std::string& name, stRefreshCommonActInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshCommonActInfo_ProtoFunID>(
    stRefreshCommonActInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqAKeyFetchAttach_ProtoModID {
  stReqAKeyFetchAttach_ProtoModID_ModID = 8
};
bool stReqAKeyFetchAttach_ProtoModID_IsValid(int value);
const stReqAKeyFetchAttach_ProtoModID stReqAKeyFetchAttach_ProtoModID_ProtoModID_MIN = stReqAKeyFetchAttach_ProtoModID_ModID;
const stReqAKeyFetchAttach_ProtoModID stReqAKeyFetchAttach_ProtoModID_ProtoModID_MAX = stReqAKeyFetchAttach_ProtoModID_ModID;
const int stReqAKeyFetchAttach_ProtoModID_ProtoModID_ARRAYSIZE = stReqAKeyFetchAttach_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAKeyFetchAttach_ProtoModID_descriptor();
inline const ::std::string& stReqAKeyFetchAttach_ProtoModID_Name(stReqAKeyFetchAttach_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAKeyFetchAttach_ProtoModID_descriptor(), value);
}
inline bool stReqAKeyFetchAttach_ProtoModID_Parse(
    const ::std::string& name, stReqAKeyFetchAttach_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAKeyFetchAttach_ProtoModID>(
    stReqAKeyFetchAttach_ProtoModID_descriptor(), name, value);
}
enum stReqAKeyFetchAttach_ProtoFunID {
  stReqAKeyFetchAttach_ProtoFunID_FunID = 156
};
bool stReqAKeyFetchAttach_ProtoFunID_IsValid(int value);
const stReqAKeyFetchAttach_ProtoFunID stReqAKeyFetchAttach_ProtoFunID_ProtoFunID_MIN = stReqAKeyFetchAttach_ProtoFunID_FunID;
const stReqAKeyFetchAttach_ProtoFunID stReqAKeyFetchAttach_ProtoFunID_ProtoFunID_MAX = stReqAKeyFetchAttach_ProtoFunID_FunID;
const int stReqAKeyFetchAttach_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAKeyFetchAttach_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAKeyFetchAttach_ProtoFunID_descriptor();
inline const ::std::string& stReqAKeyFetchAttach_ProtoFunID_Name(stReqAKeyFetchAttach_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAKeyFetchAttach_ProtoFunID_descriptor(), value);
}
inline bool stReqAKeyFetchAttach_ProtoFunID_Parse(
    const ::std::string& name, stReqAKeyFetchAttach_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAKeyFetchAttach_ProtoFunID>(
    stReqAKeyFetchAttach_ProtoFunID_descriptor(), name, value);
}
enum stAKeyFetchAttachResult_Result {
  stAKeyFetchAttachResult_Result_SUCCESS = 1,
  stAKeyFetchAttachResult_Result_ATTACH_NOT_EXIST = 2
};
bool stAKeyFetchAttachResult_Result_IsValid(int value);
const stAKeyFetchAttachResult_Result stAKeyFetchAttachResult_Result_Result_MIN = stAKeyFetchAttachResult_Result_SUCCESS;
const stAKeyFetchAttachResult_Result stAKeyFetchAttachResult_Result_Result_MAX = stAKeyFetchAttachResult_Result_ATTACH_NOT_EXIST;
const int stAKeyFetchAttachResult_Result_Result_ARRAYSIZE = stAKeyFetchAttachResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAKeyFetchAttachResult_Result_descriptor();
inline const ::std::string& stAKeyFetchAttachResult_Result_Name(stAKeyFetchAttachResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAKeyFetchAttachResult_Result_descriptor(), value);
}
inline bool stAKeyFetchAttachResult_Result_Parse(
    const ::std::string& name, stAKeyFetchAttachResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAKeyFetchAttachResult_Result>(
    stAKeyFetchAttachResult_Result_descriptor(), name, value);
}
enum stAKeyFetchAttachResult_ProtoModID {
  stAKeyFetchAttachResult_ProtoModID_ModID = 8
};
bool stAKeyFetchAttachResult_ProtoModID_IsValid(int value);
const stAKeyFetchAttachResult_ProtoModID stAKeyFetchAttachResult_ProtoModID_ProtoModID_MIN = stAKeyFetchAttachResult_ProtoModID_ModID;
const stAKeyFetchAttachResult_ProtoModID stAKeyFetchAttachResult_ProtoModID_ProtoModID_MAX = stAKeyFetchAttachResult_ProtoModID_ModID;
const int stAKeyFetchAttachResult_ProtoModID_ProtoModID_ARRAYSIZE = stAKeyFetchAttachResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAKeyFetchAttachResult_ProtoModID_descriptor();
inline const ::std::string& stAKeyFetchAttachResult_ProtoModID_Name(stAKeyFetchAttachResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAKeyFetchAttachResult_ProtoModID_descriptor(), value);
}
inline bool stAKeyFetchAttachResult_ProtoModID_Parse(
    const ::std::string& name, stAKeyFetchAttachResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAKeyFetchAttachResult_ProtoModID>(
    stAKeyFetchAttachResult_ProtoModID_descriptor(), name, value);
}
enum stAKeyFetchAttachResult_ProtoFunID {
  stAKeyFetchAttachResult_ProtoFunID_FunID = 157
};
bool stAKeyFetchAttachResult_ProtoFunID_IsValid(int value);
const stAKeyFetchAttachResult_ProtoFunID stAKeyFetchAttachResult_ProtoFunID_ProtoFunID_MIN = stAKeyFetchAttachResult_ProtoFunID_FunID;
const stAKeyFetchAttachResult_ProtoFunID stAKeyFetchAttachResult_ProtoFunID_ProtoFunID_MAX = stAKeyFetchAttachResult_ProtoFunID_FunID;
const int stAKeyFetchAttachResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stAKeyFetchAttachResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAKeyFetchAttachResult_ProtoFunID_descriptor();
inline const ::std::string& stAKeyFetchAttachResult_ProtoFunID_Name(stAKeyFetchAttachResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAKeyFetchAttachResult_ProtoFunID_descriptor(), value);
}
inline bool stAKeyFetchAttachResult_ProtoFunID_Parse(
    const ::std::string& name, stAKeyFetchAttachResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAKeyFetchAttachResult_ProtoFunID>(
    stAKeyFetchAttachResult_ProtoFunID_descriptor(), name, value);
}
enum stReqGloryfashion_ProtoModID {
  stReqGloryfashion_ProtoModID_ModID = 8
};
bool stReqGloryfashion_ProtoModID_IsValid(int value);
const stReqGloryfashion_ProtoModID stReqGloryfashion_ProtoModID_ProtoModID_MIN = stReqGloryfashion_ProtoModID_ModID;
const stReqGloryfashion_ProtoModID stReqGloryfashion_ProtoModID_ProtoModID_MAX = stReqGloryfashion_ProtoModID_ModID;
const int stReqGloryfashion_ProtoModID_ProtoModID_ARRAYSIZE = stReqGloryfashion_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGloryfashion_ProtoModID_descriptor();
inline const ::std::string& stReqGloryfashion_ProtoModID_Name(stReqGloryfashion_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGloryfashion_ProtoModID_descriptor(), value);
}
inline bool stReqGloryfashion_ProtoModID_Parse(
    const ::std::string& name, stReqGloryfashion_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGloryfashion_ProtoModID>(
    stReqGloryfashion_ProtoModID_descriptor(), name, value);
}
enum stReqGloryfashion_ProtoFunID {
  stReqGloryfashion_ProtoFunID_FunID = 158
};
bool stReqGloryfashion_ProtoFunID_IsValid(int value);
const stReqGloryfashion_ProtoFunID stReqGloryfashion_ProtoFunID_ProtoFunID_MIN = stReqGloryfashion_ProtoFunID_FunID;
const stReqGloryfashion_ProtoFunID stReqGloryfashion_ProtoFunID_ProtoFunID_MAX = stReqGloryfashion_ProtoFunID_FunID;
const int stReqGloryfashion_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGloryfashion_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGloryfashion_ProtoFunID_descriptor();
inline const ::std::string& stReqGloryfashion_ProtoFunID_Name(stReqGloryfashion_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGloryfashion_ProtoFunID_descriptor(), value);
}
inline bool stReqGloryfashion_ProtoFunID_Parse(
    const ::std::string& name, stReqGloryfashion_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGloryfashion_ProtoFunID>(
    stReqGloryfashion_ProtoFunID_descriptor(), name, value);
}
enum stGloryfashionResult_eResult {
  stGloryfashionResult_eResult_eSuccess = 1,
  stGloryfashionResult_eResult_eRecharge_Not_Enough = 2,
  stGloryfashionResult_eResult_eBag_Full = 3,
  stGloryfashionResult_eResult_eNot_Open_Time = 4
};
bool stGloryfashionResult_eResult_IsValid(int value);
const stGloryfashionResult_eResult stGloryfashionResult_eResult_eResult_MIN = stGloryfashionResult_eResult_eSuccess;
const stGloryfashionResult_eResult stGloryfashionResult_eResult_eResult_MAX = stGloryfashionResult_eResult_eNot_Open_Time;
const int stGloryfashionResult_eResult_eResult_ARRAYSIZE = stGloryfashionResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGloryfashionResult_eResult_descriptor();
inline const ::std::string& stGloryfashionResult_eResult_Name(stGloryfashionResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGloryfashionResult_eResult_descriptor(), value);
}
inline bool stGloryfashionResult_eResult_Parse(
    const ::std::string& name, stGloryfashionResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGloryfashionResult_eResult>(
    stGloryfashionResult_eResult_descriptor(), name, value);
}
enum stGloryfashionResult_ProtoModID {
  stGloryfashionResult_ProtoModID_ModID = 8
};
bool stGloryfashionResult_ProtoModID_IsValid(int value);
const stGloryfashionResult_ProtoModID stGloryfashionResult_ProtoModID_ProtoModID_MIN = stGloryfashionResult_ProtoModID_ModID;
const stGloryfashionResult_ProtoModID stGloryfashionResult_ProtoModID_ProtoModID_MAX = stGloryfashionResult_ProtoModID_ModID;
const int stGloryfashionResult_ProtoModID_ProtoModID_ARRAYSIZE = stGloryfashionResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGloryfashionResult_ProtoModID_descriptor();
inline const ::std::string& stGloryfashionResult_ProtoModID_Name(stGloryfashionResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGloryfashionResult_ProtoModID_descriptor(), value);
}
inline bool stGloryfashionResult_ProtoModID_Parse(
    const ::std::string& name, stGloryfashionResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGloryfashionResult_ProtoModID>(
    stGloryfashionResult_ProtoModID_descriptor(), name, value);
}
enum stGloryfashionResult_ProtoFunID {
  stGloryfashionResult_ProtoFunID_FunID = 159
};
bool stGloryfashionResult_ProtoFunID_IsValid(int value);
const stGloryfashionResult_ProtoFunID stGloryfashionResult_ProtoFunID_ProtoFunID_MIN = stGloryfashionResult_ProtoFunID_FunID;
const stGloryfashionResult_ProtoFunID stGloryfashionResult_ProtoFunID_ProtoFunID_MAX = stGloryfashionResult_ProtoFunID_FunID;
const int stGloryfashionResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGloryfashionResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGloryfashionResult_ProtoFunID_descriptor();
inline const ::std::string& stGloryfashionResult_ProtoFunID_Name(stGloryfashionResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGloryfashionResult_ProtoFunID_descriptor(), value);
}
inline bool stGloryfashionResult_ProtoFunID_Parse(
    const ::std::string& name, stGloryfashionResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGloryfashionResult_ProtoFunID>(
    stGloryfashionResult_ProtoFunID_descriptor(), name, value);
}
enum stDevilCallItem_eRewardStatus {
  stDevilCallItem_eRewardStatus_eHas_Reward = 1,
  stDevilCallItem_eRewardStatus_eNo_Reward = 2,
  stDevilCallItem_eRewardStatus_eGot_Reward = 3
};
bool stDevilCallItem_eRewardStatus_IsValid(int value);
const stDevilCallItem_eRewardStatus stDevilCallItem_eRewardStatus_eRewardStatus_MIN = stDevilCallItem_eRewardStatus_eHas_Reward;
const stDevilCallItem_eRewardStatus stDevilCallItem_eRewardStatus_eRewardStatus_MAX = stDevilCallItem_eRewardStatus_eGot_Reward;
const int stDevilCallItem_eRewardStatus_eRewardStatus_ARRAYSIZE = stDevilCallItem_eRewardStatus_eRewardStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDevilCallItem_eRewardStatus_descriptor();
inline const ::std::string& stDevilCallItem_eRewardStatus_Name(stDevilCallItem_eRewardStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDevilCallItem_eRewardStatus_descriptor(), value);
}
inline bool stDevilCallItem_eRewardStatus_Parse(
    const ::std::string& name, stDevilCallItem_eRewardStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDevilCallItem_eRewardStatus>(
    stDevilCallItem_eRewardStatus_descriptor(), name, value);
}
enum stReqAllDevilCall_ProtoModID {
  stReqAllDevilCall_ProtoModID_ModID = 8
};
bool stReqAllDevilCall_ProtoModID_IsValid(int value);
const stReqAllDevilCall_ProtoModID stReqAllDevilCall_ProtoModID_ProtoModID_MIN = stReqAllDevilCall_ProtoModID_ModID;
const stReqAllDevilCall_ProtoModID stReqAllDevilCall_ProtoModID_ProtoModID_MAX = stReqAllDevilCall_ProtoModID_ModID;
const int stReqAllDevilCall_ProtoModID_ProtoModID_ARRAYSIZE = stReqAllDevilCall_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAllDevilCall_ProtoModID_descriptor();
inline const ::std::string& stReqAllDevilCall_ProtoModID_Name(stReqAllDevilCall_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAllDevilCall_ProtoModID_descriptor(), value);
}
inline bool stReqAllDevilCall_ProtoModID_Parse(
    const ::std::string& name, stReqAllDevilCall_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAllDevilCall_ProtoModID>(
    stReqAllDevilCall_ProtoModID_descriptor(), name, value);
}
enum stReqAllDevilCall_ProtoFunID {
  stReqAllDevilCall_ProtoFunID_FunID = 160
};
bool stReqAllDevilCall_ProtoFunID_IsValid(int value);
const stReqAllDevilCall_ProtoFunID stReqAllDevilCall_ProtoFunID_ProtoFunID_MIN = stReqAllDevilCall_ProtoFunID_FunID;
const stReqAllDevilCall_ProtoFunID stReqAllDevilCall_ProtoFunID_ProtoFunID_MAX = stReqAllDevilCall_ProtoFunID_FunID;
const int stReqAllDevilCall_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAllDevilCall_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAllDevilCall_ProtoFunID_descriptor();
inline const ::std::string& stReqAllDevilCall_ProtoFunID_Name(stReqAllDevilCall_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAllDevilCall_ProtoFunID_descriptor(), value);
}
inline bool stReqAllDevilCall_ProtoFunID_Parse(
    const ::std::string& name, stReqAllDevilCall_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAllDevilCall_ProtoFunID>(
    stReqAllDevilCall_ProtoFunID_descriptor(), name, value);
}
enum stRetAllDevilCall_eResult {
  stRetAllDevilCall_eResult_eSuccess = 1,
  stRetAllDevilCall_eResult_eLvl_Limit = 2
};
bool stRetAllDevilCall_eResult_IsValid(int value);
const stRetAllDevilCall_eResult stRetAllDevilCall_eResult_eResult_MIN = stRetAllDevilCall_eResult_eSuccess;
const stRetAllDevilCall_eResult stRetAllDevilCall_eResult_eResult_MAX = stRetAllDevilCall_eResult_eLvl_Limit;
const int stRetAllDevilCall_eResult_eResult_ARRAYSIZE = stRetAllDevilCall_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetAllDevilCall_eResult_descriptor();
inline const ::std::string& stRetAllDevilCall_eResult_Name(stRetAllDevilCall_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetAllDevilCall_eResult_descriptor(), value);
}
inline bool stRetAllDevilCall_eResult_Parse(
    const ::std::string& name, stRetAllDevilCall_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetAllDevilCall_eResult>(
    stRetAllDevilCall_eResult_descriptor(), name, value);
}
enum stRetAllDevilCall_ProtoModID {
  stRetAllDevilCall_ProtoModID_ModID = 8
};
bool stRetAllDevilCall_ProtoModID_IsValid(int value);
const stRetAllDevilCall_ProtoModID stRetAllDevilCall_ProtoModID_ProtoModID_MIN = stRetAllDevilCall_ProtoModID_ModID;
const stRetAllDevilCall_ProtoModID stRetAllDevilCall_ProtoModID_ProtoModID_MAX = stRetAllDevilCall_ProtoModID_ModID;
const int stRetAllDevilCall_ProtoModID_ProtoModID_ARRAYSIZE = stRetAllDevilCall_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetAllDevilCall_ProtoModID_descriptor();
inline const ::std::string& stRetAllDevilCall_ProtoModID_Name(stRetAllDevilCall_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetAllDevilCall_ProtoModID_descriptor(), value);
}
inline bool stRetAllDevilCall_ProtoModID_Parse(
    const ::std::string& name, stRetAllDevilCall_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetAllDevilCall_ProtoModID>(
    stRetAllDevilCall_ProtoModID_descriptor(), name, value);
}
enum stRetAllDevilCall_ProtoFunID {
  stRetAllDevilCall_ProtoFunID_FunID = 161
};
bool stRetAllDevilCall_ProtoFunID_IsValid(int value);
const stRetAllDevilCall_ProtoFunID stRetAllDevilCall_ProtoFunID_ProtoFunID_MIN = stRetAllDevilCall_ProtoFunID_FunID;
const stRetAllDevilCall_ProtoFunID stRetAllDevilCall_ProtoFunID_ProtoFunID_MAX = stRetAllDevilCall_ProtoFunID_FunID;
const int stRetAllDevilCall_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetAllDevilCall_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetAllDevilCall_ProtoFunID_descriptor();
inline const ::std::string& stRetAllDevilCall_ProtoFunID_Name(stRetAllDevilCall_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetAllDevilCall_ProtoFunID_descriptor(), value);
}
inline bool stRetAllDevilCall_ProtoFunID_Parse(
    const ::std::string& name, stRetAllDevilCall_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetAllDevilCall_ProtoFunID>(
    stRetAllDevilCall_ProtoFunID_descriptor(), name, value);
}
enum stReqDevilCallReward_eType {
  stReqDevilCallReward_eType_eBoss_Reward = 1,
  stReqDevilCallReward_eType_eCommon_Reward = 2
};
bool stReqDevilCallReward_eType_IsValid(int value);
const stReqDevilCallReward_eType stReqDevilCallReward_eType_eType_MIN = stReqDevilCallReward_eType_eBoss_Reward;
const stReqDevilCallReward_eType stReqDevilCallReward_eType_eType_MAX = stReqDevilCallReward_eType_eCommon_Reward;
const int stReqDevilCallReward_eType_eType_ARRAYSIZE = stReqDevilCallReward_eType_eType_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDevilCallReward_eType_descriptor();
inline const ::std::string& stReqDevilCallReward_eType_Name(stReqDevilCallReward_eType value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDevilCallReward_eType_descriptor(), value);
}
inline bool stReqDevilCallReward_eType_Parse(
    const ::std::string& name, stReqDevilCallReward_eType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDevilCallReward_eType>(
    stReqDevilCallReward_eType_descriptor(), name, value);
}
enum stReqDevilCallReward_ProtoModID {
  stReqDevilCallReward_ProtoModID_ModID = 8
};
bool stReqDevilCallReward_ProtoModID_IsValid(int value);
const stReqDevilCallReward_ProtoModID stReqDevilCallReward_ProtoModID_ProtoModID_MIN = stReqDevilCallReward_ProtoModID_ModID;
const stReqDevilCallReward_ProtoModID stReqDevilCallReward_ProtoModID_ProtoModID_MAX = stReqDevilCallReward_ProtoModID_ModID;
const int stReqDevilCallReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqDevilCallReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDevilCallReward_ProtoModID_descriptor();
inline const ::std::string& stReqDevilCallReward_ProtoModID_Name(stReqDevilCallReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDevilCallReward_ProtoModID_descriptor(), value);
}
inline bool stReqDevilCallReward_ProtoModID_Parse(
    const ::std::string& name, stReqDevilCallReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDevilCallReward_ProtoModID>(
    stReqDevilCallReward_ProtoModID_descriptor(), name, value);
}
enum stReqDevilCallReward_ProtoFunID {
  stReqDevilCallReward_ProtoFunID_FunID = 162
};
bool stReqDevilCallReward_ProtoFunID_IsValid(int value);
const stReqDevilCallReward_ProtoFunID stReqDevilCallReward_ProtoFunID_ProtoFunID_MIN = stReqDevilCallReward_ProtoFunID_FunID;
const stReqDevilCallReward_ProtoFunID stReqDevilCallReward_ProtoFunID_ProtoFunID_MAX = stReqDevilCallReward_ProtoFunID_FunID;
const int stReqDevilCallReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDevilCallReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDevilCallReward_ProtoFunID_descriptor();
inline const ::std::string& stReqDevilCallReward_ProtoFunID_Name(stReqDevilCallReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDevilCallReward_ProtoFunID_descriptor(), value);
}
inline bool stReqDevilCallReward_ProtoFunID_Parse(
    const ::std::string& name, stReqDevilCallReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDevilCallReward_ProtoFunID>(
    stReqDevilCallReward_ProtoFunID_descriptor(), name, value);
}
enum stRetDevilCallReward_eType {
  stRetDevilCallReward_eType_eBoss_Reward = 1,
  stRetDevilCallReward_eType_eCommon_Reward = 2
};
bool stRetDevilCallReward_eType_IsValid(int value);
const stRetDevilCallReward_eType stRetDevilCallReward_eType_eType_MIN = stRetDevilCallReward_eType_eBoss_Reward;
const stRetDevilCallReward_eType stRetDevilCallReward_eType_eType_MAX = stRetDevilCallReward_eType_eCommon_Reward;
const int stRetDevilCallReward_eType_eType_ARRAYSIZE = stRetDevilCallReward_eType_eType_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDevilCallReward_eType_descriptor();
inline const ::std::string& stRetDevilCallReward_eType_Name(stRetDevilCallReward_eType value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDevilCallReward_eType_descriptor(), value);
}
inline bool stRetDevilCallReward_eType_Parse(
    const ::std::string& name, stRetDevilCallReward_eType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDevilCallReward_eType>(
    stRetDevilCallReward_eType_descriptor(), name, value);
}
enum stRetDevilCallReward_eResult {
  stRetDevilCallReward_eResult_eSuccess = 1,
  stRetDevilCallReward_eResult_eNot_That_Reward = 2,
  stRetDevilCallReward_eResult_eAlready_Draw = 3,
  stRetDevilCallReward_eResult_eBag_Full = 4,
  stRetDevilCallReward_eResult_eLvl_limit = 5
};
bool stRetDevilCallReward_eResult_IsValid(int value);
const stRetDevilCallReward_eResult stRetDevilCallReward_eResult_eResult_MIN = stRetDevilCallReward_eResult_eSuccess;
const stRetDevilCallReward_eResult stRetDevilCallReward_eResult_eResult_MAX = stRetDevilCallReward_eResult_eLvl_limit;
const int stRetDevilCallReward_eResult_eResult_ARRAYSIZE = stRetDevilCallReward_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDevilCallReward_eResult_descriptor();
inline const ::std::string& stRetDevilCallReward_eResult_Name(stRetDevilCallReward_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDevilCallReward_eResult_descriptor(), value);
}
inline bool stRetDevilCallReward_eResult_Parse(
    const ::std::string& name, stRetDevilCallReward_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDevilCallReward_eResult>(
    stRetDevilCallReward_eResult_descriptor(), name, value);
}
enum stRetDevilCallReward_ProtoModID {
  stRetDevilCallReward_ProtoModID_ModID = 8
};
bool stRetDevilCallReward_ProtoModID_IsValid(int value);
const stRetDevilCallReward_ProtoModID stRetDevilCallReward_ProtoModID_ProtoModID_MIN = stRetDevilCallReward_ProtoModID_ModID;
const stRetDevilCallReward_ProtoModID stRetDevilCallReward_ProtoModID_ProtoModID_MAX = stRetDevilCallReward_ProtoModID_ModID;
const int stRetDevilCallReward_ProtoModID_ProtoModID_ARRAYSIZE = stRetDevilCallReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDevilCallReward_ProtoModID_descriptor();
inline const ::std::string& stRetDevilCallReward_ProtoModID_Name(stRetDevilCallReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDevilCallReward_ProtoModID_descriptor(), value);
}
inline bool stRetDevilCallReward_ProtoModID_Parse(
    const ::std::string& name, stRetDevilCallReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDevilCallReward_ProtoModID>(
    stRetDevilCallReward_ProtoModID_descriptor(), name, value);
}
enum stRetDevilCallReward_ProtoFunID {
  stRetDevilCallReward_ProtoFunID_FunID = 163
};
bool stRetDevilCallReward_ProtoFunID_IsValid(int value);
const stRetDevilCallReward_ProtoFunID stRetDevilCallReward_ProtoFunID_ProtoFunID_MIN = stRetDevilCallReward_ProtoFunID_FunID;
const stRetDevilCallReward_ProtoFunID stRetDevilCallReward_ProtoFunID_ProtoFunID_MAX = stRetDevilCallReward_ProtoFunID_FunID;
const int stRetDevilCallReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDevilCallReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDevilCallReward_ProtoFunID_descriptor();
inline const ::std::string& stRetDevilCallReward_ProtoFunID_Name(stRetDevilCallReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDevilCallReward_ProtoFunID_descriptor(), value);
}
inline bool stRetDevilCallReward_ProtoFunID_Parse(
    const ::std::string& name, stRetDevilCallReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDevilCallReward_ProtoFunID>(
    stRetDevilCallReward_ProtoFunID_descriptor(), name, value);
}
enum stReqDevilCall_ProtoModID {
  stReqDevilCall_ProtoModID_ModID = 8
};
bool stReqDevilCall_ProtoModID_IsValid(int value);
const stReqDevilCall_ProtoModID stReqDevilCall_ProtoModID_ProtoModID_MIN = stReqDevilCall_ProtoModID_ModID;
const stReqDevilCall_ProtoModID stReqDevilCall_ProtoModID_ProtoModID_MAX = stReqDevilCall_ProtoModID_ModID;
const int stReqDevilCall_ProtoModID_ProtoModID_ARRAYSIZE = stReqDevilCall_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDevilCall_ProtoModID_descriptor();
inline const ::std::string& stReqDevilCall_ProtoModID_Name(stReqDevilCall_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDevilCall_ProtoModID_descriptor(), value);
}
inline bool stReqDevilCall_ProtoModID_Parse(
    const ::std::string& name, stReqDevilCall_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDevilCall_ProtoModID>(
    stReqDevilCall_ProtoModID_descriptor(), name, value);
}
enum stReqDevilCall_ProtoFunID {
  stReqDevilCall_ProtoFunID_FunID = 164
};
bool stReqDevilCall_ProtoFunID_IsValid(int value);
const stReqDevilCall_ProtoFunID stReqDevilCall_ProtoFunID_ProtoFunID_MIN = stReqDevilCall_ProtoFunID_FunID;
const stReqDevilCall_ProtoFunID stReqDevilCall_ProtoFunID_ProtoFunID_MAX = stReqDevilCall_ProtoFunID_FunID;
const int stReqDevilCall_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDevilCall_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDevilCall_ProtoFunID_descriptor();
inline const ::std::string& stReqDevilCall_ProtoFunID_Name(stReqDevilCall_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDevilCall_ProtoFunID_descriptor(), value);
}
inline bool stReqDevilCall_ProtoFunID_Parse(
    const ::std::string& name, stReqDevilCall_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDevilCall_ProtoFunID>(
    stReqDevilCall_ProtoFunID_descriptor(), name, value);
}
enum stRetDevilCall_eResult {
  stRetDevilCall_eResult_eSuccess = 1,
  stRetDevilCall_eResult_eRes_Not_Enough = 2,
  stRetDevilCall_eResult_eBag_Full = 3,
  stRetDevilCall_eResult_eNot_Open = 4,
  stRetDevilCall_eResult_eNo_Such_Id = 5,
  stRetDevilCall_eResult_eLvl_limit = 6
};
bool stRetDevilCall_eResult_IsValid(int value);
const stRetDevilCall_eResult stRetDevilCall_eResult_eResult_MIN = stRetDevilCall_eResult_eSuccess;
const stRetDevilCall_eResult stRetDevilCall_eResult_eResult_MAX = stRetDevilCall_eResult_eLvl_limit;
const int stRetDevilCall_eResult_eResult_ARRAYSIZE = stRetDevilCall_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDevilCall_eResult_descriptor();
inline const ::std::string& stRetDevilCall_eResult_Name(stRetDevilCall_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDevilCall_eResult_descriptor(), value);
}
inline bool stRetDevilCall_eResult_Parse(
    const ::std::string& name, stRetDevilCall_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDevilCall_eResult>(
    stRetDevilCall_eResult_descriptor(), name, value);
}
enum stRetDevilCall_ProtoModID {
  stRetDevilCall_ProtoModID_ModID = 8
};
bool stRetDevilCall_ProtoModID_IsValid(int value);
const stRetDevilCall_ProtoModID stRetDevilCall_ProtoModID_ProtoModID_MIN = stRetDevilCall_ProtoModID_ModID;
const stRetDevilCall_ProtoModID stRetDevilCall_ProtoModID_ProtoModID_MAX = stRetDevilCall_ProtoModID_ModID;
const int stRetDevilCall_ProtoModID_ProtoModID_ARRAYSIZE = stRetDevilCall_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDevilCall_ProtoModID_descriptor();
inline const ::std::string& stRetDevilCall_ProtoModID_Name(stRetDevilCall_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDevilCall_ProtoModID_descriptor(), value);
}
inline bool stRetDevilCall_ProtoModID_Parse(
    const ::std::string& name, stRetDevilCall_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDevilCall_ProtoModID>(
    stRetDevilCall_ProtoModID_descriptor(), name, value);
}
enum stRetDevilCall_ProtoFunID {
  stRetDevilCall_ProtoFunID_FunID = 165
};
bool stRetDevilCall_ProtoFunID_IsValid(int value);
const stRetDevilCall_ProtoFunID stRetDevilCall_ProtoFunID_ProtoFunID_MIN = stRetDevilCall_ProtoFunID_FunID;
const stRetDevilCall_ProtoFunID stRetDevilCall_ProtoFunID_ProtoFunID_MAX = stRetDevilCall_ProtoFunID_FunID;
const int stRetDevilCall_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDevilCall_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDevilCall_ProtoFunID_descriptor();
inline const ::std::string& stRetDevilCall_ProtoFunID_Name(stRetDevilCall_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDevilCall_ProtoFunID_descriptor(), value);
}
inline bool stRetDevilCall_ProtoFunID_Parse(
    const ::std::string& name, stRetDevilCall_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDevilCall_ProtoFunID>(
    stRetDevilCall_ProtoFunID_descriptor(), name, value);
}
enum stReqDevilCallSummary_ProtoModID {
  stReqDevilCallSummary_ProtoModID_ModID = 8
};
bool stReqDevilCallSummary_ProtoModID_IsValid(int value);
const stReqDevilCallSummary_ProtoModID stReqDevilCallSummary_ProtoModID_ProtoModID_MIN = stReqDevilCallSummary_ProtoModID_ModID;
const stReqDevilCallSummary_ProtoModID stReqDevilCallSummary_ProtoModID_ProtoModID_MAX = stReqDevilCallSummary_ProtoModID_ModID;
const int stReqDevilCallSummary_ProtoModID_ProtoModID_ARRAYSIZE = stReqDevilCallSummary_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDevilCallSummary_ProtoModID_descriptor();
inline const ::std::string& stReqDevilCallSummary_ProtoModID_Name(stReqDevilCallSummary_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDevilCallSummary_ProtoModID_descriptor(), value);
}
inline bool stReqDevilCallSummary_ProtoModID_Parse(
    const ::std::string& name, stReqDevilCallSummary_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDevilCallSummary_ProtoModID>(
    stReqDevilCallSummary_ProtoModID_descriptor(), name, value);
}
enum stReqDevilCallSummary_ProtoFunID {
  stReqDevilCallSummary_ProtoFunID_FunID = 166
};
bool stReqDevilCallSummary_ProtoFunID_IsValid(int value);
const stReqDevilCallSummary_ProtoFunID stReqDevilCallSummary_ProtoFunID_ProtoFunID_MIN = stReqDevilCallSummary_ProtoFunID_FunID;
const stReqDevilCallSummary_ProtoFunID stReqDevilCallSummary_ProtoFunID_ProtoFunID_MAX = stReqDevilCallSummary_ProtoFunID_FunID;
const int stReqDevilCallSummary_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDevilCallSummary_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDevilCallSummary_ProtoFunID_descriptor();
inline const ::std::string& stReqDevilCallSummary_ProtoFunID_Name(stReqDevilCallSummary_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDevilCallSummary_ProtoFunID_descriptor(), value);
}
inline bool stReqDevilCallSummary_ProtoFunID_Parse(
    const ::std::string& name, stReqDevilCallSummary_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDevilCallSummary_ProtoFunID>(
    stReqDevilCallSummary_ProtoFunID_descriptor(), name, value);
}
enum stRetDevilCallSummary_ProtoModID {
  stRetDevilCallSummary_ProtoModID_ModID = 8
};
bool stRetDevilCallSummary_ProtoModID_IsValid(int value);
const stRetDevilCallSummary_ProtoModID stRetDevilCallSummary_ProtoModID_ProtoModID_MIN = stRetDevilCallSummary_ProtoModID_ModID;
const stRetDevilCallSummary_ProtoModID stRetDevilCallSummary_ProtoModID_ProtoModID_MAX = stRetDevilCallSummary_ProtoModID_ModID;
const int stRetDevilCallSummary_ProtoModID_ProtoModID_ARRAYSIZE = stRetDevilCallSummary_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDevilCallSummary_ProtoModID_descriptor();
inline const ::std::string& stRetDevilCallSummary_ProtoModID_Name(stRetDevilCallSummary_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDevilCallSummary_ProtoModID_descriptor(), value);
}
inline bool stRetDevilCallSummary_ProtoModID_Parse(
    const ::std::string& name, stRetDevilCallSummary_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDevilCallSummary_ProtoModID>(
    stRetDevilCallSummary_ProtoModID_descriptor(), name, value);
}
enum stRetDevilCallSummary_ProtoFunID {
  stRetDevilCallSummary_ProtoFunID_FunID = 167
};
bool stRetDevilCallSummary_ProtoFunID_IsValid(int value);
const stRetDevilCallSummary_ProtoFunID stRetDevilCallSummary_ProtoFunID_ProtoFunID_MIN = stRetDevilCallSummary_ProtoFunID_FunID;
const stRetDevilCallSummary_ProtoFunID stRetDevilCallSummary_ProtoFunID_ProtoFunID_MAX = stRetDevilCallSummary_ProtoFunID_FunID;
const int stRetDevilCallSummary_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDevilCallSummary_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDevilCallSummary_ProtoFunID_descriptor();
inline const ::std::string& stRetDevilCallSummary_ProtoFunID_Name(stRetDevilCallSummary_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDevilCallSummary_ProtoFunID_descriptor(), value);
}
inline bool stRetDevilCallSummary_ProtoFunID_Parse(
    const ::std::string& name, stRetDevilCallSummary_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDevilCallSummary_ProtoFunID>(
    stRetDevilCallSummary_ProtoFunID_descriptor(), name, value);
}
enum stReqPayType_ProtoModID {
  stReqPayType_ProtoModID_ModID = 8
};
bool stReqPayType_ProtoModID_IsValid(int value);
const stReqPayType_ProtoModID stReqPayType_ProtoModID_ProtoModID_MIN = stReqPayType_ProtoModID_ModID;
const stReqPayType_ProtoModID stReqPayType_ProtoModID_ProtoModID_MAX = stReqPayType_ProtoModID_ModID;
const int stReqPayType_ProtoModID_ProtoModID_ARRAYSIZE = stReqPayType_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPayType_ProtoModID_descriptor();
inline const ::std::string& stReqPayType_ProtoModID_Name(stReqPayType_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPayType_ProtoModID_descriptor(), value);
}
inline bool stReqPayType_ProtoModID_Parse(
    const ::std::string& name, stReqPayType_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPayType_ProtoModID>(
    stReqPayType_ProtoModID_descriptor(), name, value);
}
enum stReqPayType_ProtoFunID {
  stReqPayType_ProtoFunID_FunID = 168
};
bool stReqPayType_ProtoFunID_IsValid(int value);
const stReqPayType_ProtoFunID stReqPayType_ProtoFunID_ProtoFunID_MIN = stReqPayType_ProtoFunID_FunID;
const stReqPayType_ProtoFunID stReqPayType_ProtoFunID_ProtoFunID_MAX = stReqPayType_ProtoFunID_FunID;
const int stReqPayType_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqPayType_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPayType_ProtoFunID_descriptor();
inline const ::std::string& stReqPayType_ProtoFunID_Name(stReqPayType_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPayType_ProtoFunID_descriptor(), value);
}
inline bool stReqPayType_ProtoFunID_Parse(
    const ::std::string& name, stReqPayType_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPayType_ProtoFunID>(
    stReqPayType_ProtoFunID_descriptor(), name, value);
}
enum stRetPayType_eResult {
  stRetPayType_eResult_eSuccess = 1,
  stRetPayType_eResult_eNo_Such_Item = 2,
  stRetPayType_eResult_eSame_Order_Id = 3
};
bool stRetPayType_eResult_IsValid(int value);
const stRetPayType_eResult stRetPayType_eResult_eResult_MIN = stRetPayType_eResult_eSuccess;
const stRetPayType_eResult stRetPayType_eResult_eResult_MAX = stRetPayType_eResult_eSame_Order_Id;
const int stRetPayType_eResult_eResult_ARRAYSIZE = stRetPayType_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetPayType_eResult_descriptor();
inline const ::std::string& stRetPayType_eResult_Name(stRetPayType_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetPayType_eResult_descriptor(), value);
}
inline bool stRetPayType_eResult_Parse(
    const ::std::string& name, stRetPayType_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetPayType_eResult>(
    stRetPayType_eResult_descriptor(), name, value);
}
enum stRetPayType_ProtoModID {
  stRetPayType_ProtoModID_ModID = 8
};
bool stRetPayType_ProtoModID_IsValid(int value);
const stRetPayType_ProtoModID stRetPayType_ProtoModID_ProtoModID_MIN = stRetPayType_ProtoModID_ModID;
const stRetPayType_ProtoModID stRetPayType_ProtoModID_ProtoModID_MAX = stRetPayType_ProtoModID_ModID;
const int stRetPayType_ProtoModID_ProtoModID_ARRAYSIZE = stRetPayType_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetPayType_ProtoModID_descriptor();
inline const ::std::string& stRetPayType_ProtoModID_Name(stRetPayType_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetPayType_ProtoModID_descriptor(), value);
}
inline bool stRetPayType_ProtoModID_Parse(
    const ::std::string& name, stRetPayType_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetPayType_ProtoModID>(
    stRetPayType_ProtoModID_descriptor(), name, value);
}
enum stRetPayType_ProtoFunID {
  stRetPayType_ProtoFunID_FunID = 169
};
bool stRetPayType_ProtoFunID_IsValid(int value);
const stRetPayType_ProtoFunID stRetPayType_ProtoFunID_ProtoFunID_MIN = stRetPayType_ProtoFunID_FunID;
const stRetPayType_ProtoFunID stRetPayType_ProtoFunID_ProtoFunID_MAX = stRetPayType_ProtoFunID_FunID;
const int stRetPayType_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetPayType_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetPayType_ProtoFunID_descriptor();
inline const ::std::string& stRetPayType_ProtoFunID_Name(stRetPayType_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetPayType_ProtoFunID_descriptor(), value);
}
inline bool stRetPayType_ProtoFunID_Parse(
    const ::std::string& name, stRetPayType_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetPayType_ProtoFunID>(
    stRetPayType_ProtoFunID_descriptor(), name, value);
}
enum stReqOperateActvity_ProtoModID {
  stReqOperateActvity_ProtoModID_ModID = 8
};
bool stReqOperateActvity_ProtoModID_IsValid(int value);
const stReqOperateActvity_ProtoModID stReqOperateActvity_ProtoModID_ProtoModID_MIN = stReqOperateActvity_ProtoModID_ModID;
const stReqOperateActvity_ProtoModID stReqOperateActvity_ProtoModID_ProtoModID_MAX = stReqOperateActvity_ProtoModID_ModID;
const int stReqOperateActvity_ProtoModID_ProtoModID_ARRAYSIZE = stReqOperateActvity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOperateActvity_ProtoModID_descriptor();
inline const ::std::string& stReqOperateActvity_ProtoModID_Name(stReqOperateActvity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOperateActvity_ProtoModID_descriptor(), value);
}
inline bool stReqOperateActvity_ProtoModID_Parse(
    const ::std::string& name, stReqOperateActvity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOperateActvity_ProtoModID>(
    stReqOperateActvity_ProtoModID_descriptor(), name, value);
}
enum stReqOperateActvity_ProtoFunID {
  stReqOperateActvity_ProtoFunID_FunID = 170
};
bool stReqOperateActvity_ProtoFunID_IsValid(int value);
const stReqOperateActvity_ProtoFunID stReqOperateActvity_ProtoFunID_ProtoFunID_MIN = stReqOperateActvity_ProtoFunID_FunID;
const stReqOperateActvity_ProtoFunID stReqOperateActvity_ProtoFunID_ProtoFunID_MAX = stReqOperateActvity_ProtoFunID_FunID;
const int stReqOperateActvity_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOperateActvity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOperateActvity_ProtoFunID_descriptor();
inline const ::std::string& stReqOperateActvity_ProtoFunID_Name(stReqOperateActvity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOperateActvity_ProtoFunID_descriptor(), value);
}
inline bool stReqOperateActvity_ProtoFunID_Parse(
    const ::std::string& name, stReqOperateActvity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOperateActvity_ProtoFunID>(
    stReqOperateActvity_ProtoFunID_descriptor(), name, value);
}
enum stRetOperateActvity_ProtoModID {
  stRetOperateActvity_ProtoModID_ModID = 8
};
bool stRetOperateActvity_ProtoModID_IsValid(int value);
const stRetOperateActvity_ProtoModID stRetOperateActvity_ProtoModID_ProtoModID_MIN = stRetOperateActvity_ProtoModID_ModID;
const stRetOperateActvity_ProtoModID stRetOperateActvity_ProtoModID_ProtoModID_MAX = stRetOperateActvity_ProtoModID_ModID;
const int stRetOperateActvity_ProtoModID_ProtoModID_ARRAYSIZE = stRetOperateActvity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOperateActvity_ProtoModID_descriptor();
inline const ::std::string& stRetOperateActvity_ProtoModID_Name(stRetOperateActvity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOperateActvity_ProtoModID_descriptor(), value);
}
inline bool stRetOperateActvity_ProtoModID_Parse(
    const ::std::string& name, stRetOperateActvity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOperateActvity_ProtoModID>(
    stRetOperateActvity_ProtoModID_descriptor(), name, value);
}
enum stRetOperateActvity_ProtoFunID {
  stRetOperateActvity_ProtoFunID_FunID = 171
};
bool stRetOperateActvity_ProtoFunID_IsValid(int value);
const stRetOperateActvity_ProtoFunID stRetOperateActvity_ProtoFunID_ProtoFunID_MIN = stRetOperateActvity_ProtoFunID_FunID;
const stRetOperateActvity_ProtoFunID stRetOperateActvity_ProtoFunID_ProtoFunID_MAX = stRetOperateActvity_ProtoFunID_FunID;
const int stRetOperateActvity_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetOperateActvity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOperateActvity_ProtoFunID_descriptor();
inline const ::std::string& stRetOperateActvity_ProtoFunID_Name(stRetOperateActvity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOperateActvity_ProtoFunID_descriptor(), value);
}
inline bool stRetOperateActvity_ProtoFunID_Parse(
    const ::std::string& name, stRetOperateActvity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOperateActvity_ProtoFunID>(
    stRetOperateActvity_ProtoFunID_descriptor(), name, value);
}
enum stReqOperateActvityReward_ProtoModID {
  stReqOperateActvityReward_ProtoModID_ModID = 8
};
bool stReqOperateActvityReward_ProtoModID_IsValid(int value);
const stReqOperateActvityReward_ProtoModID stReqOperateActvityReward_ProtoModID_ProtoModID_MIN = stReqOperateActvityReward_ProtoModID_ModID;
const stReqOperateActvityReward_ProtoModID stReqOperateActvityReward_ProtoModID_ProtoModID_MAX = stReqOperateActvityReward_ProtoModID_ModID;
const int stReqOperateActvityReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqOperateActvityReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOperateActvityReward_ProtoModID_descriptor();
inline const ::std::string& stReqOperateActvityReward_ProtoModID_Name(stReqOperateActvityReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOperateActvityReward_ProtoModID_descriptor(), value);
}
inline bool stReqOperateActvityReward_ProtoModID_Parse(
    const ::std::string& name, stReqOperateActvityReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOperateActvityReward_ProtoModID>(
    stReqOperateActvityReward_ProtoModID_descriptor(), name, value);
}
enum stReqOperateActvityReward_ProtoFunID {
  stReqOperateActvityReward_ProtoFunID_FunID = 172
};
bool stReqOperateActvityReward_ProtoFunID_IsValid(int value);
const stReqOperateActvityReward_ProtoFunID stReqOperateActvityReward_ProtoFunID_ProtoFunID_MIN = stReqOperateActvityReward_ProtoFunID_FunID;
const stReqOperateActvityReward_ProtoFunID stReqOperateActvityReward_ProtoFunID_ProtoFunID_MAX = stReqOperateActvityReward_ProtoFunID_FunID;
const int stReqOperateActvityReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOperateActvityReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOperateActvityReward_ProtoFunID_descriptor();
inline const ::std::string& stReqOperateActvityReward_ProtoFunID_Name(stReqOperateActvityReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOperateActvityReward_ProtoFunID_descriptor(), value);
}
inline bool stReqOperateActvityReward_ProtoFunID_Parse(
    const ::std::string& name, stReqOperateActvityReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOperateActvityReward_ProtoFunID>(
    stReqOperateActvityReward_ProtoFunID_descriptor(), name, value);
}
enum stRetOperateActvityReward_Result {
  stRetOperateActvityReward_Result_SUCCESS = 1,
  stRetOperateActvityReward_Result_ACTIVITY_EXPIRE = 2,
  stRetOperateActvityReward_Result_INVALID_ID = 3,
  stRetOperateActvityReward_Result_INNER_ERROR = 4,
  stRetOperateActvityReward_Result_REWARD_ALREAD_DRAW = 5,
  stRetOperateActvityReward_Result_CONDITION_LIMIT = 6,
  stRetOperateActvityReward_Result_BAG_FULL = 7,
  stRetOperateActvityReward_Result_RESOURCE_LIMIT = 8
};
bool stRetOperateActvityReward_Result_IsValid(int value);
const stRetOperateActvityReward_Result stRetOperateActvityReward_Result_Result_MIN = stRetOperateActvityReward_Result_SUCCESS;
const stRetOperateActvityReward_Result stRetOperateActvityReward_Result_Result_MAX = stRetOperateActvityReward_Result_RESOURCE_LIMIT;
const int stRetOperateActvityReward_Result_Result_ARRAYSIZE = stRetOperateActvityReward_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOperateActvityReward_Result_descriptor();
inline const ::std::string& stRetOperateActvityReward_Result_Name(stRetOperateActvityReward_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOperateActvityReward_Result_descriptor(), value);
}
inline bool stRetOperateActvityReward_Result_Parse(
    const ::std::string& name, stRetOperateActvityReward_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOperateActvityReward_Result>(
    stRetOperateActvityReward_Result_descriptor(), name, value);
}
enum stRetOperateActvityReward_ProtoModID {
  stRetOperateActvityReward_ProtoModID_ModID = 8
};
bool stRetOperateActvityReward_ProtoModID_IsValid(int value);
const stRetOperateActvityReward_ProtoModID stRetOperateActvityReward_ProtoModID_ProtoModID_MIN = stRetOperateActvityReward_ProtoModID_ModID;
const stRetOperateActvityReward_ProtoModID stRetOperateActvityReward_ProtoModID_ProtoModID_MAX = stRetOperateActvityReward_ProtoModID_ModID;
const int stRetOperateActvityReward_ProtoModID_ProtoModID_ARRAYSIZE = stRetOperateActvityReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOperateActvityReward_ProtoModID_descriptor();
inline const ::std::string& stRetOperateActvityReward_ProtoModID_Name(stRetOperateActvityReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOperateActvityReward_ProtoModID_descriptor(), value);
}
inline bool stRetOperateActvityReward_ProtoModID_Parse(
    const ::std::string& name, stRetOperateActvityReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOperateActvityReward_ProtoModID>(
    stRetOperateActvityReward_ProtoModID_descriptor(), name, value);
}
enum stRetOperateActvityReward_ProtoFunID {
  stRetOperateActvityReward_ProtoFunID_FunID = 173
};
bool stRetOperateActvityReward_ProtoFunID_IsValid(int value);
const stRetOperateActvityReward_ProtoFunID stRetOperateActvityReward_ProtoFunID_ProtoFunID_MIN = stRetOperateActvityReward_ProtoFunID_FunID;
const stRetOperateActvityReward_ProtoFunID stRetOperateActvityReward_ProtoFunID_ProtoFunID_MAX = stRetOperateActvityReward_ProtoFunID_FunID;
const int stRetOperateActvityReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetOperateActvityReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOperateActvityReward_ProtoFunID_descriptor();
inline const ::std::string& stRetOperateActvityReward_ProtoFunID_Name(stRetOperateActvityReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOperateActvityReward_ProtoFunID_descriptor(), value);
}
inline bool stRetOperateActvityReward_ProtoFunID_Parse(
    const ::std::string& name, stRetOperateActvityReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOperateActvityReward_ProtoFunID>(
    stRetOperateActvityReward_ProtoFunID_descriptor(), name, value);
}
enum stReqIllusionSprite_ProtoModID {
  stReqIllusionSprite_ProtoModID_ModID = 8
};
bool stReqIllusionSprite_ProtoModID_IsValid(int value);
const stReqIllusionSprite_ProtoModID stReqIllusionSprite_ProtoModID_ProtoModID_MIN = stReqIllusionSprite_ProtoModID_ModID;
const stReqIllusionSprite_ProtoModID stReqIllusionSprite_ProtoModID_ProtoModID_MAX = stReqIllusionSprite_ProtoModID_ModID;
const int stReqIllusionSprite_ProtoModID_ProtoModID_ARRAYSIZE = stReqIllusionSprite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqIllusionSprite_ProtoModID_descriptor();
inline const ::std::string& stReqIllusionSprite_ProtoModID_Name(stReqIllusionSprite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqIllusionSprite_ProtoModID_descriptor(), value);
}
inline bool stReqIllusionSprite_ProtoModID_Parse(
    const ::std::string& name, stReqIllusionSprite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqIllusionSprite_ProtoModID>(
    stReqIllusionSprite_ProtoModID_descriptor(), name, value);
}
enum stReqIllusionSprite_ProtoFunID {
  stReqIllusionSprite_ProtoFunID_FunID = 174
};
bool stReqIllusionSprite_ProtoFunID_IsValid(int value);
const stReqIllusionSprite_ProtoFunID stReqIllusionSprite_ProtoFunID_ProtoFunID_MIN = stReqIllusionSprite_ProtoFunID_FunID;
const stReqIllusionSprite_ProtoFunID stReqIllusionSprite_ProtoFunID_ProtoFunID_MAX = stReqIllusionSprite_ProtoFunID_FunID;
const int stReqIllusionSprite_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqIllusionSprite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqIllusionSprite_ProtoFunID_descriptor();
inline const ::std::string& stReqIllusionSprite_ProtoFunID_Name(stReqIllusionSprite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqIllusionSprite_ProtoFunID_descriptor(), value);
}
inline bool stReqIllusionSprite_ProtoFunID_Parse(
    const ::std::string& name, stReqIllusionSprite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqIllusionSprite_ProtoFunID>(
    stReqIllusionSprite_ProtoFunID_descriptor(), name, value);
}
enum stRetIllusionSprite_eResult {
  stRetIllusionSprite_eResult_eSuccess = 1,
  stRetIllusionSprite_eResult_eNo_Such_Id = 2
};
bool stRetIllusionSprite_eResult_IsValid(int value);
const stRetIllusionSprite_eResult stRetIllusionSprite_eResult_eResult_MIN = stRetIllusionSprite_eResult_eSuccess;
const stRetIllusionSprite_eResult stRetIllusionSprite_eResult_eResult_MAX = stRetIllusionSprite_eResult_eNo_Such_Id;
const int stRetIllusionSprite_eResult_eResult_ARRAYSIZE = stRetIllusionSprite_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetIllusionSprite_eResult_descriptor();
inline const ::std::string& stRetIllusionSprite_eResult_Name(stRetIllusionSprite_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetIllusionSprite_eResult_descriptor(), value);
}
inline bool stRetIllusionSprite_eResult_Parse(
    const ::std::string& name, stRetIllusionSprite_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetIllusionSprite_eResult>(
    stRetIllusionSprite_eResult_descriptor(), name, value);
}
enum stRetIllusionSprite_ProtoModID {
  stRetIllusionSprite_ProtoModID_ModID = 8
};
bool stRetIllusionSprite_ProtoModID_IsValid(int value);
const stRetIllusionSprite_ProtoModID stRetIllusionSprite_ProtoModID_ProtoModID_MIN = stRetIllusionSprite_ProtoModID_ModID;
const stRetIllusionSprite_ProtoModID stRetIllusionSprite_ProtoModID_ProtoModID_MAX = stRetIllusionSprite_ProtoModID_ModID;
const int stRetIllusionSprite_ProtoModID_ProtoModID_ARRAYSIZE = stRetIllusionSprite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetIllusionSprite_ProtoModID_descriptor();
inline const ::std::string& stRetIllusionSprite_ProtoModID_Name(stRetIllusionSprite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetIllusionSprite_ProtoModID_descriptor(), value);
}
inline bool stRetIllusionSprite_ProtoModID_Parse(
    const ::std::string& name, stRetIllusionSprite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetIllusionSprite_ProtoModID>(
    stRetIllusionSprite_ProtoModID_descriptor(), name, value);
}
enum stRetIllusionSprite_ProtoFunID {
  stRetIllusionSprite_ProtoFunID_FunID = 175
};
bool stRetIllusionSprite_ProtoFunID_IsValid(int value);
const stRetIllusionSprite_ProtoFunID stRetIllusionSprite_ProtoFunID_ProtoFunID_MIN = stRetIllusionSprite_ProtoFunID_FunID;
const stRetIllusionSprite_ProtoFunID stRetIllusionSprite_ProtoFunID_ProtoFunID_MAX = stRetIllusionSprite_ProtoFunID_FunID;
const int stRetIllusionSprite_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetIllusionSprite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetIllusionSprite_ProtoFunID_descriptor();
inline const ::std::string& stRetIllusionSprite_ProtoFunID_Name(stRetIllusionSprite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetIllusionSprite_ProtoFunID_descriptor(), value);
}
inline bool stRetIllusionSprite_ProtoFunID_Parse(
    const ::std::string& name, stRetIllusionSprite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetIllusionSprite_ProtoFunID>(
    stRetIllusionSprite_ProtoFunID_descriptor(), name, value);
}
enum stReqIllusionSpriteEat_ProtoModID {
  stReqIllusionSpriteEat_ProtoModID_ModID = 8
};
bool stReqIllusionSpriteEat_ProtoModID_IsValid(int value);
const stReqIllusionSpriteEat_ProtoModID stReqIllusionSpriteEat_ProtoModID_ProtoModID_MIN = stReqIllusionSpriteEat_ProtoModID_ModID;
const stReqIllusionSpriteEat_ProtoModID stReqIllusionSpriteEat_ProtoModID_ProtoModID_MAX = stReqIllusionSpriteEat_ProtoModID_ModID;
const int stReqIllusionSpriteEat_ProtoModID_ProtoModID_ARRAYSIZE = stReqIllusionSpriteEat_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqIllusionSpriteEat_ProtoModID_descriptor();
inline const ::std::string& stReqIllusionSpriteEat_ProtoModID_Name(stReqIllusionSpriteEat_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqIllusionSpriteEat_ProtoModID_descriptor(), value);
}
inline bool stReqIllusionSpriteEat_ProtoModID_Parse(
    const ::std::string& name, stReqIllusionSpriteEat_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqIllusionSpriteEat_ProtoModID>(
    stReqIllusionSpriteEat_ProtoModID_descriptor(), name, value);
}
enum stReqIllusionSpriteEat_ProtoFunID {
  stReqIllusionSpriteEat_ProtoFunID_FunID = 176
};
bool stReqIllusionSpriteEat_ProtoFunID_IsValid(int value);
const stReqIllusionSpriteEat_ProtoFunID stReqIllusionSpriteEat_ProtoFunID_ProtoFunID_MIN = stReqIllusionSpriteEat_ProtoFunID_FunID;
const stReqIllusionSpriteEat_ProtoFunID stReqIllusionSpriteEat_ProtoFunID_ProtoFunID_MAX = stReqIllusionSpriteEat_ProtoFunID_FunID;
const int stReqIllusionSpriteEat_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqIllusionSpriteEat_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqIllusionSpriteEat_ProtoFunID_descriptor();
inline const ::std::string& stReqIllusionSpriteEat_ProtoFunID_Name(stReqIllusionSpriteEat_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqIllusionSpriteEat_ProtoFunID_descriptor(), value);
}
inline bool stReqIllusionSpriteEat_ProtoFunID_Parse(
    const ::std::string& name, stReqIllusionSpriteEat_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqIllusionSpriteEat_ProtoFunID>(
    stReqIllusionSpriteEat_ProtoFunID_descriptor(), name, value);
}
enum stRetIllusionSpriteEat_eResult {
  stRetIllusionSpriteEat_eResult_eSuccess = 1,
  stRetIllusionSpriteEat_eResult_eNo_Such_Id = 2,
  stRetIllusionSpriteEat_eResult_eInvalid_item = 3,
  stRetIllusionSpriteEat_eResult_eMax_Lvl_Limit = 4,
  stRetIllusionSpriteEat_eResult_eItem_Not_Enough = 5
};
bool stRetIllusionSpriteEat_eResult_IsValid(int value);
const stRetIllusionSpriteEat_eResult stRetIllusionSpriteEat_eResult_eResult_MIN = stRetIllusionSpriteEat_eResult_eSuccess;
const stRetIllusionSpriteEat_eResult stRetIllusionSpriteEat_eResult_eResult_MAX = stRetIllusionSpriteEat_eResult_eItem_Not_Enough;
const int stRetIllusionSpriteEat_eResult_eResult_ARRAYSIZE = stRetIllusionSpriteEat_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteEat_eResult_descriptor();
inline const ::std::string& stRetIllusionSpriteEat_eResult_Name(stRetIllusionSpriteEat_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetIllusionSpriteEat_eResult_descriptor(), value);
}
inline bool stRetIllusionSpriteEat_eResult_Parse(
    const ::std::string& name, stRetIllusionSpriteEat_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetIllusionSpriteEat_eResult>(
    stRetIllusionSpriteEat_eResult_descriptor(), name, value);
}
enum stRetIllusionSpriteEat_ProtoModID {
  stRetIllusionSpriteEat_ProtoModID_ModID = 8
};
bool stRetIllusionSpriteEat_ProtoModID_IsValid(int value);
const stRetIllusionSpriteEat_ProtoModID stRetIllusionSpriteEat_ProtoModID_ProtoModID_MIN = stRetIllusionSpriteEat_ProtoModID_ModID;
const stRetIllusionSpriteEat_ProtoModID stRetIllusionSpriteEat_ProtoModID_ProtoModID_MAX = stRetIllusionSpriteEat_ProtoModID_ModID;
const int stRetIllusionSpriteEat_ProtoModID_ProtoModID_ARRAYSIZE = stRetIllusionSpriteEat_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteEat_ProtoModID_descriptor();
inline const ::std::string& stRetIllusionSpriteEat_ProtoModID_Name(stRetIllusionSpriteEat_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetIllusionSpriteEat_ProtoModID_descriptor(), value);
}
inline bool stRetIllusionSpriteEat_ProtoModID_Parse(
    const ::std::string& name, stRetIllusionSpriteEat_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetIllusionSpriteEat_ProtoModID>(
    stRetIllusionSpriteEat_ProtoModID_descriptor(), name, value);
}
enum stRetIllusionSpriteEat_ProtoFunID {
  stRetIllusionSpriteEat_ProtoFunID_FunID = 177
};
bool stRetIllusionSpriteEat_ProtoFunID_IsValid(int value);
const stRetIllusionSpriteEat_ProtoFunID stRetIllusionSpriteEat_ProtoFunID_ProtoFunID_MIN = stRetIllusionSpriteEat_ProtoFunID_FunID;
const stRetIllusionSpriteEat_ProtoFunID stRetIllusionSpriteEat_ProtoFunID_ProtoFunID_MAX = stRetIllusionSpriteEat_ProtoFunID_FunID;
const int stRetIllusionSpriteEat_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetIllusionSpriteEat_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteEat_ProtoFunID_descriptor();
inline const ::std::string& stRetIllusionSpriteEat_ProtoFunID_Name(stRetIllusionSpriteEat_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetIllusionSpriteEat_ProtoFunID_descriptor(), value);
}
inline bool stRetIllusionSpriteEat_ProtoFunID_Parse(
    const ::std::string& name, stRetIllusionSpriteEat_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetIllusionSpriteEat_ProtoFunID>(
    stRetIllusionSpriteEat_ProtoFunID_descriptor(), name, value);
}
enum stReqIllusionSpriteSkillUp_ProtoModID {
  stReqIllusionSpriteSkillUp_ProtoModID_ModID = 8
};
bool stReqIllusionSpriteSkillUp_ProtoModID_IsValid(int value);
const stReqIllusionSpriteSkillUp_ProtoModID stReqIllusionSpriteSkillUp_ProtoModID_ProtoModID_MIN = stReqIllusionSpriteSkillUp_ProtoModID_ModID;
const stReqIllusionSpriteSkillUp_ProtoModID stReqIllusionSpriteSkillUp_ProtoModID_ProtoModID_MAX = stReqIllusionSpriteSkillUp_ProtoModID_ModID;
const int stReqIllusionSpriteSkillUp_ProtoModID_ProtoModID_ARRAYSIZE = stReqIllusionSpriteSkillUp_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqIllusionSpriteSkillUp_ProtoModID_descriptor();
inline const ::std::string& stReqIllusionSpriteSkillUp_ProtoModID_Name(stReqIllusionSpriteSkillUp_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqIllusionSpriteSkillUp_ProtoModID_descriptor(), value);
}
inline bool stReqIllusionSpriteSkillUp_ProtoModID_Parse(
    const ::std::string& name, stReqIllusionSpriteSkillUp_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqIllusionSpriteSkillUp_ProtoModID>(
    stReqIllusionSpriteSkillUp_ProtoModID_descriptor(), name, value);
}
enum stReqIllusionSpriteSkillUp_ProtoFunID {
  stReqIllusionSpriteSkillUp_ProtoFunID_FunID = 178
};
bool stReqIllusionSpriteSkillUp_ProtoFunID_IsValid(int value);
const stReqIllusionSpriteSkillUp_ProtoFunID stReqIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_MIN = stReqIllusionSpriteSkillUp_ProtoFunID_FunID;
const stReqIllusionSpriteSkillUp_ProtoFunID stReqIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_MAX = stReqIllusionSpriteSkillUp_ProtoFunID_FunID;
const int stReqIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqIllusionSpriteSkillUp_ProtoFunID_descriptor();
inline const ::std::string& stReqIllusionSpriteSkillUp_ProtoFunID_Name(stReqIllusionSpriteSkillUp_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqIllusionSpriteSkillUp_ProtoFunID_descriptor(), value);
}
inline bool stReqIllusionSpriteSkillUp_ProtoFunID_Parse(
    const ::std::string& name, stReqIllusionSpriteSkillUp_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqIllusionSpriteSkillUp_ProtoFunID>(
    stReqIllusionSpriteSkillUp_ProtoFunID_descriptor(), name, value);
}
enum stRetIllusionSpriteSkillUp_eResult {
  stRetIllusionSpriteSkillUp_eResult_eSuccess = 1,
  stRetIllusionSpriteSkillUp_eResult_eNo_Such_Id = 2,
  stRetIllusionSpriteSkillUp_eResult_eNo_Such_Skill_Id = 3,
  stRetIllusionSpriteSkillUp_eResult_eLess_Of_Talent_Num = 4,
  stRetIllusionSpriteSkillUp_eResult_eMax_Lvl_Limit = 5,
  stRetIllusionSpriteSkillUp_eResult_eLast_Skill_Lvl_Limit = 6,
  stRetIllusionSpriteSkillUp_eResult_eInner_Error = 7
};
bool stRetIllusionSpriteSkillUp_eResult_IsValid(int value);
const stRetIllusionSpriteSkillUp_eResult stRetIllusionSpriteSkillUp_eResult_eResult_MIN = stRetIllusionSpriteSkillUp_eResult_eSuccess;
const stRetIllusionSpriteSkillUp_eResult stRetIllusionSpriteSkillUp_eResult_eResult_MAX = stRetIllusionSpriteSkillUp_eResult_eInner_Error;
const int stRetIllusionSpriteSkillUp_eResult_eResult_ARRAYSIZE = stRetIllusionSpriteSkillUp_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteSkillUp_eResult_descriptor();
inline const ::std::string& stRetIllusionSpriteSkillUp_eResult_Name(stRetIllusionSpriteSkillUp_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetIllusionSpriteSkillUp_eResult_descriptor(), value);
}
inline bool stRetIllusionSpriteSkillUp_eResult_Parse(
    const ::std::string& name, stRetIllusionSpriteSkillUp_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetIllusionSpriteSkillUp_eResult>(
    stRetIllusionSpriteSkillUp_eResult_descriptor(), name, value);
}
enum stRetIllusionSpriteSkillUp_ProtoModID {
  stRetIllusionSpriteSkillUp_ProtoModID_ModID = 8
};
bool stRetIllusionSpriteSkillUp_ProtoModID_IsValid(int value);
const stRetIllusionSpriteSkillUp_ProtoModID stRetIllusionSpriteSkillUp_ProtoModID_ProtoModID_MIN = stRetIllusionSpriteSkillUp_ProtoModID_ModID;
const stRetIllusionSpriteSkillUp_ProtoModID stRetIllusionSpriteSkillUp_ProtoModID_ProtoModID_MAX = stRetIllusionSpriteSkillUp_ProtoModID_ModID;
const int stRetIllusionSpriteSkillUp_ProtoModID_ProtoModID_ARRAYSIZE = stRetIllusionSpriteSkillUp_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteSkillUp_ProtoModID_descriptor();
inline const ::std::string& stRetIllusionSpriteSkillUp_ProtoModID_Name(stRetIllusionSpriteSkillUp_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetIllusionSpriteSkillUp_ProtoModID_descriptor(), value);
}
inline bool stRetIllusionSpriteSkillUp_ProtoModID_Parse(
    const ::std::string& name, stRetIllusionSpriteSkillUp_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetIllusionSpriteSkillUp_ProtoModID>(
    stRetIllusionSpriteSkillUp_ProtoModID_descriptor(), name, value);
}
enum stRetIllusionSpriteSkillUp_ProtoFunID {
  stRetIllusionSpriteSkillUp_ProtoFunID_FunID = 179
};
bool stRetIllusionSpriteSkillUp_ProtoFunID_IsValid(int value);
const stRetIllusionSpriteSkillUp_ProtoFunID stRetIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_MIN = stRetIllusionSpriteSkillUp_ProtoFunID_FunID;
const stRetIllusionSpriteSkillUp_ProtoFunID stRetIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_MAX = stRetIllusionSpriteSkillUp_ProtoFunID_FunID;
const int stRetIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteSkillUp_ProtoFunID_descriptor();
inline const ::std::string& stRetIllusionSpriteSkillUp_ProtoFunID_Name(stRetIllusionSpriteSkillUp_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetIllusionSpriteSkillUp_ProtoFunID_descriptor(), value);
}
inline bool stRetIllusionSpriteSkillUp_ProtoFunID_Parse(
    const ::std::string& name, stRetIllusionSpriteSkillUp_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetIllusionSpriteSkillUp_ProtoFunID>(
    stRetIllusionSpriteSkillUp_ProtoFunID_descriptor(), name, value);
}
enum stRepOpenDiscoverWindow_ProtoModID {
  stRepOpenDiscoverWindow_ProtoModID_ModID = 8
};
bool stRepOpenDiscoverWindow_ProtoModID_IsValid(int value);
const stRepOpenDiscoverWindow_ProtoModID stRepOpenDiscoverWindow_ProtoModID_ProtoModID_MIN = stRepOpenDiscoverWindow_ProtoModID_ModID;
const stRepOpenDiscoverWindow_ProtoModID stRepOpenDiscoverWindow_ProtoModID_ProtoModID_MAX = stRepOpenDiscoverWindow_ProtoModID_ModID;
const int stRepOpenDiscoverWindow_ProtoModID_ProtoModID_ARRAYSIZE = stRepOpenDiscoverWindow_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRepOpenDiscoverWindow_ProtoModID_descriptor();
inline const ::std::string& stRepOpenDiscoverWindow_ProtoModID_Name(stRepOpenDiscoverWindow_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRepOpenDiscoverWindow_ProtoModID_descriptor(), value);
}
inline bool stRepOpenDiscoverWindow_ProtoModID_Parse(
    const ::std::string& name, stRepOpenDiscoverWindow_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRepOpenDiscoverWindow_ProtoModID>(
    stRepOpenDiscoverWindow_ProtoModID_descriptor(), name, value);
}
enum stRepOpenDiscoverWindow_ProtoFunID {
  stRepOpenDiscoverWindow_ProtoFunID_FunID = 180
};
bool stRepOpenDiscoverWindow_ProtoFunID_IsValid(int value);
const stRepOpenDiscoverWindow_ProtoFunID stRepOpenDiscoverWindow_ProtoFunID_ProtoFunID_MIN = stRepOpenDiscoverWindow_ProtoFunID_FunID;
const stRepOpenDiscoverWindow_ProtoFunID stRepOpenDiscoverWindow_ProtoFunID_ProtoFunID_MAX = stRepOpenDiscoverWindow_ProtoFunID_FunID;
const int stRepOpenDiscoverWindow_ProtoFunID_ProtoFunID_ARRAYSIZE = stRepOpenDiscoverWindow_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRepOpenDiscoverWindow_ProtoFunID_descriptor();
inline const ::std::string& stRepOpenDiscoverWindow_ProtoFunID_Name(stRepOpenDiscoverWindow_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRepOpenDiscoverWindow_ProtoFunID_descriptor(), value);
}
inline bool stRepOpenDiscoverWindow_ProtoFunID_Parse(
    const ::std::string& name, stRepOpenDiscoverWindow_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRepOpenDiscoverWindow_ProtoFunID>(
    stRepOpenDiscoverWindow_ProtoFunID_descriptor(), name, value);
}
enum stOpenDiscoverWindowResult_ProtoModID {
  stOpenDiscoverWindowResult_ProtoModID_ModID = 8
};
bool stOpenDiscoverWindowResult_ProtoModID_IsValid(int value);
const stOpenDiscoverWindowResult_ProtoModID stOpenDiscoverWindowResult_ProtoModID_ProtoModID_MIN = stOpenDiscoverWindowResult_ProtoModID_ModID;
const stOpenDiscoverWindowResult_ProtoModID stOpenDiscoverWindowResult_ProtoModID_ProtoModID_MAX = stOpenDiscoverWindowResult_ProtoModID_ModID;
const int stOpenDiscoverWindowResult_ProtoModID_ProtoModID_ARRAYSIZE = stOpenDiscoverWindowResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenDiscoverWindowResult_ProtoModID_descriptor();
inline const ::std::string& stOpenDiscoverWindowResult_ProtoModID_Name(stOpenDiscoverWindowResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenDiscoverWindowResult_ProtoModID_descriptor(), value);
}
inline bool stOpenDiscoverWindowResult_ProtoModID_Parse(
    const ::std::string& name, stOpenDiscoverWindowResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenDiscoverWindowResult_ProtoModID>(
    stOpenDiscoverWindowResult_ProtoModID_descriptor(), name, value);
}
enum stOpenDiscoverWindowResult_ProtoFunID {
  stOpenDiscoverWindowResult_ProtoFunID_FunID = 181
};
bool stOpenDiscoverWindowResult_ProtoFunID_IsValid(int value);
const stOpenDiscoverWindowResult_ProtoFunID stOpenDiscoverWindowResult_ProtoFunID_ProtoFunID_MIN = stOpenDiscoverWindowResult_ProtoFunID_FunID;
const stOpenDiscoverWindowResult_ProtoFunID stOpenDiscoverWindowResult_ProtoFunID_ProtoFunID_MAX = stOpenDiscoverWindowResult_ProtoFunID_FunID;
const int stOpenDiscoverWindowResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stOpenDiscoverWindowResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenDiscoverWindowResult_ProtoFunID_descriptor();
inline const ::std::string& stOpenDiscoverWindowResult_ProtoFunID_Name(stOpenDiscoverWindowResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenDiscoverWindowResult_ProtoFunID_descriptor(), value);
}
inline bool stOpenDiscoverWindowResult_ProtoFunID_Parse(
    const ::std::string& name, stOpenDiscoverWindowResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenDiscoverWindowResult_ProtoFunID>(
    stOpenDiscoverWindowResult_ProtoFunID_descriptor(), name, value);
}
enum stReqPlayDice_ProtoModID {
  stReqPlayDice_ProtoModID_ModID = 8
};
bool stReqPlayDice_ProtoModID_IsValid(int value);
const stReqPlayDice_ProtoModID stReqPlayDice_ProtoModID_ProtoModID_MIN = stReqPlayDice_ProtoModID_ModID;
const stReqPlayDice_ProtoModID stReqPlayDice_ProtoModID_ProtoModID_MAX = stReqPlayDice_ProtoModID_ModID;
const int stReqPlayDice_ProtoModID_ProtoModID_ARRAYSIZE = stReqPlayDice_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPlayDice_ProtoModID_descriptor();
inline const ::std::string& stReqPlayDice_ProtoModID_Name(stReqPlayDice_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPlayDice_ProtoModID_descriptor(), value);
}
inline bool stReqPlayDice_ProtoModID_Parse(
    const ::std::string& name, stReqPlayDice_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPlayDice_ProtoModID>(
    stReqPlayDice_ProtoModID_descriptor(), name, value);
}
enum stReqPlayDice_ProtoFunID {
  stReqPlayDice_ProtoFunID_FunID = 182
};
bool stReqPlayDice_ProtoFunID_IsValid(int value);
const stReqPlayDice_ProtoFunID stReqPlayDice_ProtoFunID_ProtoFunID_MIN = stReqPlayDice_ProtoFunID_FunID;
const stReqPlayDice_ProtoFunID stReqPlayDice_ProtoFunID_ProtoFunID_MAX = stReqPlayDice_ProtoFunID_FunID;
const int stReqPlayDice_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqPlayDice_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPlayDice_ProtoFunID_descriptor();
inline const ::std::string& stReqPlayDice_ProtoFunID_Name(stReqPlayDice_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPlayDice_ProtoFunID_descriptor(), value);
}
inline bool stReqPlayDice_ProtoFunID_Parse(
    const ::std::string& name, stReqPlayDice_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPlayDice_ProtoFunID>(
    stReqPlayDice_ProtoFunID_descriptor(), name, value);
}
enum stPlayDiceResult_eResult {
  stPlayDiceResult_eResult_eSuccess = 1,
  stPlayDiceResult_eResult_eNot_Dice_NUM = 2,
  stPlayDiceResult_eResult_eTask_Not_Finish = 3,
  stPlayDiceResult_eResult_eInner_Error = 4,
  stPlayDiceResult_eResult_eThe_End = 5
};
bool stPlayDiceResult_eResult_IsValid(int value);
const stPlayDiceResult_eResult stPlayDiceResult_eResult_eResult_MIN = stPlayDiceResult_eResult_eSuccess;
const stPlayDiceResult_eResult stPlayDiceResult_eResult_eResult_MAX = stPlayDiceResult_eResult_eThe_End;
const int stPlayDiceResult_eResult_eResult_ARRAYSIZE = stPlayDiceResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPlayDiceResult_eResult_descriptor();
inline const ::std::string& stPlayDiceResult_eResult_Name(stPlayDiceResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPlayDiceResult_eResult_descriptor(), value);
}
inline bool stPlayDiceResult_eResult_Parse(
    const ::std::string& name, stPlayDiceResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPlayDiceResult_eResult>(
    stPlayDiceResult_eResult_descriptor(), name, value);
}
enum stPlayDiceResult_ProtoModID {
  stPlayDiceResult_ProtoModID_ModID = 8
};
bool stPlayDiceResult_ProtoModID_IsValid(int value);
const stPlayDiceResult_ProtoModID stPlayDiceResult_ProtoModID_ProtoModID_MIN = stPlayDiceResult_ProtoModID_ModID;
const stPlayDiceResult_ProtoModID stPlayDiceResult_ProtoModID_ProtoModID_MAX = stPlayDiceResult_ProtoModID_ModID;
const int stPlayDiceResult_ProtoModID_ProtoModID_ARRAYSIZE = stPlayDiceResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPlayDiceResult_ProtoModID_descriptor();
inline const ::std::string& stPlayDiceResult_ProtoModID_Name(stPlayDiceResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPlayDiceResult_ProtoModID_descriptor(), value);
}
inline bool stPlayDiceResult_ProtoModID_Parse(
    const ::std::string& name, stPlayDiceResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPlayDiceResult_ProtoModID>(
    stPlayDiceResult_ProtoModID_descriptor(), name, value);
}
enum stPlayDiceResult_ProtoFunID {
  stPlayDiceResult_ProtoFunID_FunID = 183
};
bool stPlayDiceResult_ProtoFunID_IsValid(int value);
const stPlayDiceResult_ProtoFunID stPlayDiceResult_ProtoFunID_ProtoFunID_MIN = stPlayDiceResult_ProtoFunID_FunID;
const stPlayDiceResult_ProtoFunID stPlayDiceResult_ProtoFunID_ProtoFunID_MAX = stPlayDiceResult_ProtoFunID_FunID;
const int stPlayDiceResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stPlayDiceResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPlayDiceResult_ProtoFunID_descriptor();
inline const ::std::string& stPlayDiceResult_ProtoFunID_Name(stPlayDiceResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPlayDiceResult_ProtoFunID_descriptor(), value);
}
inline bool stPlayDiceResult_ProtoFunID_Parse(
    const ::std::string& name, stPlayDiceResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPlayDiceResult_ProtoFunID>(
    stPlayDiceResult_ProtoFunID_descriptor(), name, value);
}
enum stReqGetOrGiveUpTask_ProtoModID {
  stReqGetOrGiveUpTask_ProtoModID_ModID = 8
};
bool stReqGetOrGiveUpTask_ProtoModID_IsValid(int value);
const stReqGetOrGiveUpTask_ProtoModID stReqGetOrGiveUpTask_ProtoModID_ProtoModID_MIN = stReqGetOrGiveUpTask_ProtoModID_ModID;
const stReqGetOrGiveUpTask_ProtoModID stReqGetOrGiveUpTask_ProtoModID_ProtoModID_MAX = stReqGetOrGiveUpTask_ProtoModID_ModID;
const int stReqGetOrGiveUpTask_ProtoModID_ProtoModID_ARRAYSIZE = stReqGetOrGiveUpTask_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGetOrGiveUpTask_ProtoModID_descriptor();
inline const ::std::string& stReqGetOrGiveUpTask_ProtoModID_Name(stReqGetOrGiveUpTask_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGetOrGiveUpTask_ProtoModID_descriptor(), value);
}
inline bool stReqGetOrGiveUpTask_ProtoModID_Parse(
    const ::std::string& name, stReqGetOrGiveUpTask_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGetOrGiveUpTask_ProtoModID>(
    stReqGetOrGiveUpTask_ProtoModID_descriptor(), name, value);
}
enum stReqGetOrGiveUpTask_ProtoFunID {
  stReqGetOrGiveUpTask_ProtoFunID_FunID = 184
};
bool stReqGetOrGiveUpTask_ProtoFunID_IsValid(int value);
const stReqGetOrGiveUpTask_ProtoFunID stReqGetOrGiveUpTask_ProtoFunID_ProtoFunID_MIN = stReqGetOrGiveUpTask_ProtoFunID_FunID;
const stReqGetOrGiveUpTask_ProtoFunID stReqGetOrGiveUpTask_ProtoFunID_ProtoFunID_MAX = stReqGetOrGiveUpTask_ProtoFunID_FunID;
const int stReqGetOrGiveUpTask_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGetOrGiveUpTask_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGetOrGiveUpTask_ProtoFunID_descriptor();
inline const ::std::string& stReqGetOrGiveUpTask_ProtoFunID_Name(stReqGetOrGiveUpTask_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGetOrGiveUpTask_ProtoFunID_descriptor(), value);
}
inline bool stReqGetOrGiveUpTask_ProtoFunID_Parse(
    const ::std::string& name, stReqGetOrGiveUpTask_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGetOrGiveUpTask_ProtoFunID>(
    stReqGetOrGiveUpTask_ProtoFunID_descriptor(), name, value);
}
enum stGetTaskResult_eResult {
  stGetTaskResult_eResult_eSuccess = 1,
  stGetTaskResult_eResult_eThe_Begin = 2,
  stGetTaskResult_eResult_eTask_Not_Finish = 3,
  stGetTaskResult_eResult_eInner_Error = 4
};
bool stGetTaskResult_eResult_IsValid(int value);
const stGetTaskResult_eResult stGetTaskResult_eResult_eResult_MIN = stGetTaskResult_eResult_eSuccess;
const stGetTaskResult_eResult stGetTaskResult_eResult_eResult_MAX = stGetTaskResult_eResult_eInner_Error;
const int stGetTaskResult_eResult_eResult_ARRAYSIZE = stGetTaskResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetTaskResult_eResult_descriptor();
inline const ::std::string& stGetTaskResult_eResult_Name(stGetTaskResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetTaskResult_eResult_descriptor(), value);
}
inline bool stGetTaskResult_eResult_Parse(
    const ::std::string& name, stGetTaskResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetTaskResult_eResult>(
    stGetTaskResult_eResult_descriptor(), name, value);
}
enum stGetTaskResult_ProtoModID {
  stGetTaskResult_ProtoModID_ModID = 8
};
bool stGetTaskResult_ProtoModID_IsValid(int value);
const stGetTaskResult_ProtoModID stGetTaskResult_ProtoModID_ProtoModID_MIN = stGetTaskResult_ProtoModID_ModID;
const stGetTaskResult_ProtoModID stGetTaskResult_ProtoModID_ProtoModID_MAX = stGetTaskResult_ProtoModID_ModID;
const int stGetTaskResult_ProtoModID_ProtoModID_ARRAYSIZE = stGetTaskResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetTaskResult_ProtoModID_descriptor();
inline const ::std::string& stGetTaskResult_ProtoModID_Name(stGetTaskResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetTaskResult_ProtoModID_descriptor(), value);
}
inline bool stGetTaskResult_ProtoModID_Parse(
    const ::std::string& name, stGetTaskResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetTaskResult_ProtoModID>(
    stGetTaskResult_ProtoModID_descriptor(), name, value);
}
enum stGetTaskResult_ProtoFunID {
  stGetTaskResult_ProtoFunID_FunID = 185
};
bool stGetTaskResult_ProtoFunID_IsValid(int value);
const stGetTaskResult_ProtoFunID stGetTaskResult_ProtoFunID_ProtoFunID_MIN = stGetTaskResult_ProtoFunID_FunID;
const stGetTaskResult_ProtoFunID stGetTaskResult_ProtoFunID_ProtoFunID_MAX = stGetTaskResult_ProtoFunID_FunID;
const int stGetTaskResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGetTaskResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetTaskResult_ProtoFunID_descriptor();
inline const ::std::string& stGetTaskResult_ProtoFunID_Name(stGetTaskResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetTaskResult_ProtoFunID_descriptor(), value);
}
inline bool stGetTaskResult_ProtoFunID_Parse(
    const ::std::string& name, stGetTaskResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetTaskResult_ProtoFunID>(
    stGetTaskResult_ProtoFunID_descriptor(), name, value);
}
enum stGiveUpTaskResult_eResult {
  stGiveUpTaskResult_eResult_eSuccess = 1,
  stGiveUpTaskResult_eResult_eTask_Has_Receive = 2,
  stGiveUpTaskResult_eResult_eInner_Error = 3
};
bool stGiveUpTaskResult_eResult_IsValid(int value);
const stGiveUpTaskResult_eResult stGiveUpTaskResult_eResult_eResult_MIN = stGiveUpTaskResult_eResult_eSuccess;
const stGiveUpTaskResult_eResult stGiveUpTaskResult_eResult_eResult_MAX = stGiveUpTaskResult_eResult_eInner_Error;
const int stGiveUpTaskResult_eResult_eResult_ARRAYSIZE = stGiveUpTaskResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveUpTaskResult_eResult_descriptor();
inline const ::std::string& stGiveUpTaskResult_eResult_Name(stGiveUpTaskResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveUpTaskResult_eResult_descriptor(), value);
}
inline bool stGiveUpTaskResult_eResult_Parse(
    const ::std::string& name, stGiveUpTaskResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveUpTaskResult_eResult>(
    stGiveUpTaskResult_eResult_descriptor(), name, value);
}
enum stGiveUpTaskResult_ProtoModID {
  stGiveUpTaskResult_ProtoModID_ModID = 8
};
bool stGiveUpTaskResult_ProtoModID_IsValid(int value);
const stGiveUpTaskResult_ProtoModID stGiveUpTaskResult_ProtoModID_ProtoModID_MIN = stGiveUpTaskResult_ProtoModID_ModID;
const stGiveUpTaskResult_ProtoModID stGiveUpTaskResult_ProtoModID_ProtoModID_MAX = stGiveUpTaskResult_ProtoModID_ModID;
const int stGiveUpTaskResult_ProtoModID_ProtoModID_ARRAYSIZE = stGiveUpTaskResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveUpTaskResult_ProtoModID_descriptor();
inline const ::std::string& stGiveUpTaskResult_ProtoModID_Name(stGiveUpTaskResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveUpTaskResult_ProtoModID_descriptor(), value);
}
inline bool stGiveUpTaskResult_ProtoModID_Parse(
    const ::std::string& name, stGiveUpTaskResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveUpTaskResult_ProtoModID>(
    stGiveUpTaskResult_ProtoModID_descriptor(), name, value);
}
enum stGiveUpTaskResult_ProtoFunID {
  stGiveUpTaskResult_ProtoFunID_FunID = 186
};
bool stGiveUpTaskResult_ProtoFunID_IsValid(int value);
const stGiveUpTaskResult_ProtoFunID stGiveUpTaskResult_ProtoFunID_ProtoFunID_MIN = stGiveUpTaskResult_ProtoFunID_FunID;
const stGiveUpTaskResult_ProtoFunID stGiveUpTaskResult_ProtoFunID_ProtoFunID_MAX = stGiveUpTaskResult_ProtoFunID_FunID;
const int stGiveUpTaskResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGiveUpTaskResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveUpTaskResult_ProtoFunID_descriptor();
inline const ::std::string& stGiveUpTaskResult_ProtoFunID_Name(stGiveUpTaskResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveUpTaskResult_ProtoFunID_descriptor(), value);
}
inline bool stGiveUpTaskResult_ProtoFunID_Parse(
    const ::std::string& name, stGiveUpTaskResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveUpTaskResult_ProtoFunID>(
    stGiveUpTaskResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRefreshNum_ProtoModID {
  stReqRefreshNum_ProtoModID_ModID = 8
};
bool stReqRefreshNum_ProtoModID_IsValid(int value);
const stReqRefreshNum_ProtoModID stReqRefreshNum_ProtoModID_ProtoModID_MIN = stReqRefreshNum_ProtoModID_ModID;
const stReqRefreshNum_ProtoModID stReqRefreshNum_ProtoModID_ProtoModID_MAX = stReqRefreshNum_ProtoModID_ModID;
const int stReqRefreshNum_ProtoModID_ProtoModID_ARRAYSIZE = stReqRefreshNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefreshNum_ProtoModID_descriptor();
inline const ::std::string& stReqRefreshNum_ProtoModID_Name(stReqRefreshNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefreshNum_ProtoModID_descriptor(), value);
}
inline bool stReqRefreshNum_ProtoModID_Parse(
    const ::std::string& name, stReqRefreshNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefreshNum_ProtoModID>(
    stReqRefreshNum_ProtoModID_descriptor(), name, value);
}
enum stReqRefreshNum_ProtoFunID {
  stReqRefreshNum_ProtoFunID_FunID = 187
};
bool stReqRefreshNum_ProtoFunID_IsValid(int value);
const stReqRefreshNum_ProtoFunID stReqRefreshNum_ProtoFunID_ProtoFunID_MIN = stReqRefreshNum_ProtoFunID_FunID;
const stReqRefreshNum_ProtoFunID stReqRefreshNum_ProtoFunID_ProtoFunID_MAX = stReqRefreshNum_ProtoFunID_FunID;
const int stReqRefreshNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRefreshNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefreshNum_ProtoFunID_descriptor();
inline const ::std::string& stReqRefreshNum_ProtoFunID_Name(stReqRefreshNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefreshNum_ProtoFunID_descriptor(), value);
}
inline bool stReqRefreshNum_ProtoFunID_Parse(
    const ::std::string& name, stReqRefreshNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefreshNum_ProtoFunID>(
    stReqRefreshNum_ProtoFunID_descriptor(), name, value);
}
enum stRefreshNumResult_eResult {
  stRefreshNumResult_eResult_eSuccess = 1,
  stRefreshNumResult_eResult_eInner_Error = 2,
  stRefreshNumResult_eResult_eNum_Useless_Over = 3,
  stRefreshNumResult_eResult_eDIAMOND_NOT_ENOUGH = 4
};
bool stRefreshNumResult_eResult_IsValid(int value);
const stRefreshNumResult_eResult stRefreshNumResult_eResult_eResult_MIN = stRefreshNumResult_eResult_eSuccess;
const stRefreshNumResult_eResult stRefreshNumResult_eResult_eResult_MAX = stRefreshNumResult_eResult_eDIAMOND_NOT_ENOUGH;
const int stRefreshNumResult_eResult_eResult_ARRAYSIZE = stRefreshNumResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshNumResult_eResult_descriptor();
inline const ::std::string& stRefreshNumResult_eResult_Name(stRefreshNumResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshNumResult_eResult_descriptor(), value);
}
inline bool stRefreshNumResult_eResult_Parse(
    const ::std::string& name, stRefreshNumResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshNumResult_eResult>(
    stRefreshNumResult_eResult_descriptor(), name, value);
}
enum stRefreshNumResult_ProtoModID {
  stRefreshNumResult_ProtoModID_ModID = 8
};
bool stRefreshNumResult_ProtoModID_IsValid(int value);
const stRefreshNumResult_ProtoModID stRefreshNumResult_ProtoModID_ProtoModID_MIN = stRefreshNumResult_ProtoModID_ModID;
const stRefreshNumResult_ProtoModID stRefreshNumResult_ProtoModID_ProtoModID_MAX = stRefreshNumResult_ProtoModID_ModID;
const int stRefreshNumResult_ProtoModID_ProtoModID_ARRAYSIZE = stRefreshNumResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshNumResult_ProtoModID_descriptor();
inline const ::std::string& stRefreshNumResult_ProtoModID_Name(stRefreshNumResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshNumResult_ProtoModID_descriptor(), value);
}
inline bool stRefreshNumResult_ProtoModID_Parse(
    const ::std::string& name, stRefreshNumResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshNumResult_ProtoModID>(
    stRefreshNumResult_ProtoModID_descriptor(), name, value);
}
enum stRefreshNumResult_ProtoFunID {
  stRefreshNumResult_ProtoFunID_FunID = 188
};
bool stRefreshNumResult_ProtoFunID_IsValid(int value);
const stRefreshNumResult_ProtoFunID stRefreshNumResult_ProtoFunID_ProtoFunID_MIN = stRefreshNumResult_ProtoFunID_FunID;
const stRefreshNumResult_ProtoFunID stRefreshNumResult_ProtoFunID_ProtoFunID_MAX = stRefreshNumResult_ProtoFunID_FunID;
const int stRefreshNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefreshNumResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshNumResult_ProtoFunID_descriptor();
inline const ::std::string& stRefreshNumResult_ProtoFunID_Name(stRefreshNumResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshNumResult_ProtoFunID_descriptor(), value);
}
inline bool stRefreshNumResult_ProtoFunID_Parse(
    const ::std::string& name, stRefreshNumResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshNumResult_ProtoFunID>(
    stRefreshNumResult_ProtoFunID_descriptor(), name, value);
}
enum stReqGetIntegralReward_ProtoModID {
  stReqGetIntegralReward_ProtoModID_ModID = 8
};
bool stReqGetIntegralReward_ProtoModID_IsValid(int value);
const stReqGetIntegralReward_ProtoModID stReqGetIntegralReward_ProtoModID_ProtoModID_MIN = stReqGetIntegralReward_ProtoModID_ModID;
const stReqGetIntegralReward_ProtoModID stReqGetIntegralReward_ProtoModID_ProtoModID_MAX = stReqGetIntegralReward_ProtoModID_ModID;
const int stReqGetIntegralReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqGetIntegralReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGetIntegralReward_ProtoModID_descriptor();
inline const ::std::string& stReqGetIntegralReward_ProtoModID_Name(stReqGetIntegralReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGetIntegralReward_ProtoModID_descriptor(), value);
}
inline bool stReqGetIntegralReward_ProtoModID_Parse(
    const ::std::string& name, stReqGetIntegralReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGetIntegralReward_ProtoModID>(
    stReqGetIntegralReward_ProtoModID_descriptor(), name, value);
}
enum stReqGetIntegralReward_ProtoFunID {
  stReqGetIntegralReward_ProtoFunID_FunID = 189
};
bool stReqGetIntegralReward_ProtoFunID_IsValid(int value);
const stReqGetIntegralReward_ProtoFunID stReqGetIntegralReward_ProtoFunID_ProtoFunID_MIN = stReqGetIntegralReward_ProtoFunID_FunID;
const stReqGetIntegralReward_ProtoFunID stReqGetIntegralReward_ProtoFunID_ProtoFunID_MAX = stReqGetIntegralReward_ProtoFunID_FunID;
const int stReqGetIntegralReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGetIntegralReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGetIntegralReward_ProtoFunID_descriptor();
inline const ::std::string& stReqGetIntegralReward_ProtoFunID_Name(stReqGetIntegralReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGetIntegralReward_ProtoFunID_descriptor(), value);
}
inline bool stReqGetIntegralReward_ProtoFunID_Parse(
    const ::std::string& name, stReqGetIntegralReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGetIntegralReward_ProtoFunID>(
    stReqGetIntegralReward_ProtoFunID_descriptor(), name, value);
}
enum stGetIntegralRewardResult_eResult {
  stGetIntegralRewardResult_eResult_eSuccess = 1,
  stGetIntegralRewardResult_eResult_eInner_Error = 2,
  stGetIntegralRewardResult_eResult_eNum_Useless_Over = 3,
  stGetIntegralRewardResult_eResult_eHas_Received = 4,
  stGetIntegralRewardResult_eResult_eBAG_SLOT_NOT_ENOUGH = 5
};
bool stGetIntegralRewardResult_eResult_IsValid(int value);
const stGetIntegralRewardResult_eResult stGetIntegralRewardResult_eResult_eResult_MIN = stGetIntegralRewardResult_eResult_eSuccess;
const stGetIntegralRewardResult_eResult stGetIntegralRewardResult_eResult_eResult_MAX = stGetIntegralRewardResult_eResult_eBAG_SLOT_NOT_ENOUGH;
const int stGetIntegralRewardResult_eResult_eResult_ARRAYSIZE = stGetIntegralRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetIntegralRewardResult_eResult_descriptor();
inline const ::std::string& stGetIntegralRewardResult_eResult_Name(stGetIntegralRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetIntegralRewardResult_eResult_descriptor(), value);
}
inline bool stGetIntegralRewardResult_eResult_Parse(
    const ::std::string& name, stGetIntegralRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetIntegralRewardResult_eResult>(
    stGetIntegralRewardResult_eResult_descriptor(), name, value);
}
enum stGetIntegralRewardResult_ProtoModID {
  stGetIntegralRewardResult_ProtoModID_ModID = 8
};
bool stGetIntegralRewardResult_ProtoModID_IsValid(int value);
const stGetIntegralRewardResult_ProtoModID stGetIntegralRewardResult_ProtoModID_ProtoModID_MIN = stGetIntegralRewardResult_ProtoModID_ModID;
const stGetIntegralRewardResult_ProtoModID stGetIntegralRewardResult_ProtoModID_ProtoModID_MAX = stGetIntegralRewardResult_ProtoModID_ModID;
const int stGetIntegralRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stGetIntegralRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetIntegralRewardResult_ProtoModID_descriptor();
inline const ::std::string& stGetIntegralRewardResult_ProtoModID_Name(stGetIntegralRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetIntegralRewardResult_ProtoModID_descriptor(), value);
}
inline bool stGetIntegralRewardResult_ProtoModID_Parse(
    const ::std::string& name, stGetIntegralRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetIntegralRewardResult_ProtoModID>(
    stGetIntegralRewardResult_ProtoModID_descriptor(), name, value);
}
enum stGetIntegralRewardResult_ProtoFunID {
  stGetIntegralRewardResult_ProtoFunID_FunID = 190
};
bool stGetIntegralRewardResult_ProtoFunID_IsValid(int value);
const stGetIntegralRewardResult_ProtoFunID stGetIntegralRewardResult_ProtoFunID_ProtoFunID_MIN = stGetIntegralRewardResult_ProtoFunID_FunID;
const stGetIntegralRewardResult_ProtoFunID stGetIntegralRewardResult_ProtoFunID_ProtoFunID_MAX = stGetIntegralRewardResult_ProtoFunID_FunID;
const int stGetIntegralRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGetIntegralRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetIntegralRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stGetIntegralRewardResult_ProtoFunID_Name(stGetIntegralRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetIntegralRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stGetIntegralRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stGetIntegralRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetIntegralRewardResult_ProtoFunID>(
    stGetIntegralRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqGiveReward_ProtoModID {
  stReqGiveReward_ProtoModID_ModID = 8
};
bool stReqGiveReward_ProtoModID_IsValid(int value);
const stReqGiveReward_ProtoModID stReqGiveReward_ProtoModID_ProtoModID_MIN = stReqGiveReward_ProtoModID_ModID;
const stReqGiveReward_ProtoModID stReqGiveReward_ProtoModID_ProtoModID_MAX = stReqGiveReward_ProtoModID_ModID;
const int stReqGiveReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqGiveReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGiveReward_ProtoModID_descriptor();
inline const ::std::string& stReqGiveReward_ProtoModID_Name(stReqGiveReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGiveReward_ProtoModID_descriptor(), value);
}
inline bool stReqGiveReward_ProtoModID_Parse(
    const ::std::string& name, stReqGiveReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGiveReward_ProtoModID>(
    stReqGiveReward_ProtoModID_descriptor(), name, value);
}
enum stReqGiveReward_ProtoFunID {
  stReqGiveReward_ProtoFunID_FunID = 191
};
bool stReqGiveReward_ProtoFunID_IsValid(int value);
const stReqGiveReward_ProtoFunID stReqGiveReward_ProtoFunID_ProtoFunID_MIN = stReqGiveReward_ProtoFunID_FunID;
const stReqGiveReward_ProtoFunID stReqGiveReward_ProtoFunID_ProtoFunID_MAX = stReqGiveReward_ProtoFunID_FunID;
const int stReqGiveReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGiveReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGiveReward_ProtoFunID_descriptor();
inline const ::std::string& stReqGiveReward_ProtoFunID_Name(stReqGiveReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGiveReward_ProtoFunID_descriptor(), value);
}
inline bool stReqGiveReward_ProtoFunID_Parse(
    const ::std::string& name, stReqGiveReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGiveReward_ProtoFunID>(
    stReqGiveReward_ProtoFunID_descriptor(), name, value);
}
enum stGiveRewardResult_eResult {
  stGiveRewardResult_eResult_eSuccess = 1,
  stGiveRewardResult_eResult_eInner_Error = 2,
  stGiveRewardResult_eResult_eTask_Has_Receive = 3,
  stGiveRewardResult_eResult_eBAG_SLOT_NOT_ENOUGH = 5,
  stGiveRewardResult_eResult_eHas_Received = 6
};
bool stGiveRewardResult_eResult_IsValid(int value);
const stGiveRewardResult_eResult stGiveRewardResult_eResult_eResult_MIN = stGiveRewardResult_eResult_eSuccess;
const stGiveRewardResult_eResult stGiveRewardResult_eResult_eResult_MAX = stGiveRewardResult_eResult_eHas_Received;
const int stGiveRewardResult_eResult_eResult_ARRAYSIZE = stGiveRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveRewardResult_eResult_descriptor();
inline const ::std::string& stGiveRewardResult_eResult_Name(stGiveRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveRewardResult_eResult_descriptor(), value);
}
inline bool stGiveRewardResult_eResult_Parse(
    const ::std::string& name, stGiveRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveRewardResult_eResult>(
    stGiveRewardResult_eResult_descriptor(), name, value);
}
enum stGiveRewardResult_ProtoModID {
  stGiveRewardResult_ProtoModID_ModID = 8
};
bool stGiveRewardResult_ProtoModID_IsValid(int value);
const stGiveRewardResult_ProtoModID stGiveRewardResult_ProtoModID_ProtoModID_MIN = stGiveRewardResult_ProtoModID_ModID;
const stGiveRewardResult_ProtoModID stGiveRewardResult_ProtoModID_ProtoModID_MAX = stGiveRewardResult_ProtoModID_ModID;
const int stGiveRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stGiveRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveRewardResult_ProtoModID_descriptor();
inline const ::std::string& stGiveRewardResult_ProtoModID_Name(stGiveRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveRewardResult_ProtoModID_descriptor(), value);
}
inline bool stGiveRewardResult_ProtoModID_Parse(
    const ::std::string& name, stGiveRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveRewardResult_ProtoModID>(
    stGiveRewardResult_ProtoModID_descriptor(), name, value);
}
enum stGiveRewardResult_ProtoFunID {
  stGiveRewardResult_ProtoFunID_FunID = 192
};
bool stGiveRewardResult_ProtoFunID_IsValid(int value);
const stGiveRewardResult_ProtoFunID stGiveRewardResult_ProtoFunID_ProtoFunID_MIN = stGiveRewardResult_ProtoFunID_FunID;
const stGiveRewardResult_ProtoFunID stGiveRewardResult_ProtoFunID_ProtoFunID_MAX = stGiveRewardResult_ProtoFunID_FunID;
const int stGiveRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGiveRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stGiveRewardResult_ProtoFunID_Name(stGiveRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stGiveRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stGiveRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveRewardResult_ProtoFunID>(
    stGiveRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqLuckyDraw_ProtoModID {
  stReqLuckyDraw_ProtoModID_ModID = 8
};
bool stReqLuckyDraw_ProtoModID_IsValid(int value);
const stReqLuckyDraw_ProtoModID stReqLuckyDraw_ProtoModID_ProtoModID_MIN = stReqLuckyDraw_ProtoModID_ModID;
const stReqLuckyDraw_ProtoModID stReqLuckyDraw_ProtoModID_ProtoModID_MAX = stReqLuckyDraw_ProtoModID_ModID;
const int stReqLuckyDraw_ProtoModID_ProtoModID_ARRAYSIZE = stReqLuckyDraw_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLuckyDraw_ProtoModID_descriptor();
inline const ::std::string& stReqLuckyDraw_ProtoModID_Name(stReqLuckyDraw_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLuckyDraw_ProtoModID_descriptor(), value);
}
inline bool stReqLuckyDraw_ProtoModID_Parse(
    const ::std::string& name, stReqLuckyDraw_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLuckyDraw_ProtoModID>(
    stReqLuckyDraw_ProtoModID_descriptor(), name, value);
}
enum stReqLuckyDraw_ProtoFunID {
  stReqLuckyDraw_ProtoFunID_FunID = 193
};
bool stReqLuckyDraw_ProtoFunID_IsValid(int value);
const stReqLuckyDraw_ProtoFunID stReqLuckyDraw_ProtoFunID_ProtoFunID_MIN = stReqLuckyDraw_ProtoFunID_FunID;
const stReqLuckyDraw_ProtoFunID stReqLuckyDraw_ProtoFunID_ProtoFunID_MAX = stReqLuckyDraw_ProtoFunID_FunID;
const int stReqLuckyDraw_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLuckyDraw_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLuckyDraw_ProtoFunID_descriptor();
inline const ::std::string& stReqLuckyDraw_ProtoFunID_Name(stReqLuckyDraw_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLuckyDraw_ProtoFunID_descriptor(), value);
}
inline bool stReqLuckyDraw_ProtoFunID_Parse(
    const ::std::string& name, stReqLuckyDraw_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLuckyDraw_ProtoFunID>(
    stReqLuckyDraw_ProtoFunID_descriptor(), name, value);
}
enum stRetLuckyDraw_ProtoModID {
  stRetLuckyDraw_ProtoModID_ModID = 8
};
bool stRetLuckyDraw_ProtoModID_IsValid(int value);
const stRetLuckyDraw_ProtoModID stRetLuckyDraw_ProtoModID_ProtoModID_MIN = stRetLuckyDraw_ProtoModID_ModID;
const stRetLuckyDraw_ProtoModID stRetLuckyDraw_ProtoModID_ProtoModID_MAX = stRetLuckyDraw_ProtoModID_ModID;
const int stRetLuckyDraw_ProtoModID_ProtoModID_ARRAYSIZE = stRetLuckyDraw_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLuckyDraw_ProtoModID_descriptor();
inline const ::std::string& stRetLuckyDraw_ProtoModID_Name(stRetLuckyDraw_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLuckyDraw_ProtoModID_descriptor(), value);
}
inline bool stRetLuckyDraw_ProtoModID_Parse(
    const ::std::string& name, stRetLuckyDraw_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLuckyDraw_ProtoModID>(
    stRetLuckyDraw_ProtoModID_descriptor(), name, value);
}
enum stRetLuckyDraw_ProtoFunID {
  stRetLuckyDraw_ProtoFunID_FunID = 194
};
bool stRetLuckyDraw_ProtoFunID_IsValid(int value);
const stRetLuckyDraw_ProtoFunID stRetLuckyDraw_ProtoFunID_ProtoFunID_MIN = stRetLuckyDraw_ProtoFunID_FunID;
const stRetLuckyDraw_ProtoFunID stRetLuckyDraw_ProtoFunID_ProtoFunID_MAX = stRetLuckyDraw_ProtoFunID_FunID;
const int stRetLuckyDraw_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetLuckyDraw_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLuckyDraw_ProtoFunID_descriptor();
inline const ::std::string& stRetLuckyDraw_ProtoFunID_Name(stRetLuckyDraw_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLuckyDraw_ProtoFunID_descriptor(), value);
}
inline bool stRetLuckyDraw_ProtoFunID_Parse(
    const ::std::string& name, stRetLuckyDraw_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLuckyDraw_ProtoFunID>(
    stRetLuckyDraw_ProtoFunID_descriptor(), name, value);
}
enum stReqLuckyDrawReward_ProtoModID {
  stReqLuckyDrawReward_ProtoModID_ModID = 8
};
bool stReqLuckyDrawReward_ProtoModID_IsValid(int value);
const stReqLuckyDrawReward_ProtoModID stReqLuckyDrawReward_ProtoModID_ProtoModID_MIN = stReqLuckyDrawReward_ProtoModID_ModID;
const stReqLuckyDrawReward_ProtoModID stReqLuckyDrawReward_ProtoModID_ProtoModID_MAX = stReqLuckyDrawReward_ProtoModID_ModID;
const int stReqLuckyDrawReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqLuckyDrawReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLuckyDrawReward_ProtoModID_descriptor();
inline const ::std::string& stReqLuckyDrawReward_ProtoModID_Name(stReqLuckyDrawReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLuckyDrawReward_ProtoModID_descriptor(), value);
}
inline bool stReqLuckyDrawReward_ProtoModID_Parse(
    const ::std::string& name, stReqLuckyDrawReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLuckyDrawReward_ProtoModID>(
    stReqLuckyDrawReward_ProtoModID_descriptor(), name, value);
}
enum stReqLuckyDrawReward_ProtoFunID {
  stReqLuckyDrawReward_ProtoFunID_FunID = 195
};
bool stReqLuckyDrawReward_ProtoFunID_IsValid(int value);
const stReqLuckyDrawReward_ProtoFunID stReqLuckyDrawReward_ProtoFunID_ProtoFunID_MIN = stReqLuckyDrawReward_ProtoFunID_FunID;
const stReqLuckyDrawReward_ProtoFunID stReqLuckyDrawReward_ProtoFunID_ProtoFunID_MAX = stReqLuckyDrawReward_ProtoFunID_FunID;
const int stReqLuckyDrawReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLuckyDrawReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLuckyDrawReward_ProtoFunID_descriptor();
inline const ::std::string& stReqLuckyDrawReward_ProtoFunID_Name(stReqLuckyDrawReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLuckyDrawReward_ProtoFunID_descriptor(), value);
}
inline bool stReqLuckyDrawReward_ProtoFunID_Parse(
    const ::std::string& name, stReqLuckyDrawReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLuckyDrawReward_ProtoFunID>(
    stReqLuckyDrawReward_ProtoFunID_descriptor(), name, value);
}
enum stRetLuckyDrawReward_eResult {
  stRetLuckyDrawReward_eResult_eSuccess = 1,
  stRetLuckyDrawReward_eResult_eBag_Full = 2,
  stRetLuckyDrawReward_eResult_eDiamond_Less = 3,
  stRetLuckyDrawReward_eResult_eActivity_Expire = 4,
  stRetLuckyDrawReward_eResult_eNo_Such_Id = 5
};
bool stRetLuckyDrawReward_eResult_IsValid(int value);
const stRetLuckyDrawReward_eResult stRetLuckyDrawReward_eResult_eResult_MIN = stRetLuckyDrawReward_eResult_eSuccess;
const stRetLuckyDrawReward_eResult stRetLuckyDrawReward_eResult_eResult_MAX = stRetLuckyDrawReward_eResult_eNo_Such_Id;
const int stRetLuckyDrawReward_eResult_eResult_ARRAYSIZE = stRetLuckyDrawReward_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLuckyDrawReward_eResult_descriptor();
inline const ::std::string& stRetLuckyDrawReward_eResult_Name(stRetLuckyDrawReward_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLuckyDrawReward_eResult_descriptor(), value);
}
inline bool stRetLuckyDrawReward_eResult_Parse(
    const ::std::string& name, stRetLuckyDrawReward_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLuckyDrawReward_eResult>(
    stRetLuckyDrawReward_eResult_descriptor(), name, value);
}
enum stRetLuckyDrawReward_ProtoModID {
  stRetLuckyDrawReward_ProtoModID_ModID = 8
};
bool stRetLuckyDrawReward_ProtoModID_IsValid(int value);
const stRetLuckyDrawReward_ProtoModID stRetLuckyDrawReward_ProtoModID_ProtoModID_MIN = stRetLuckyDrawReward_ProtoModID_ModID;
const stRetLuckyDrawReward_ProtoModID stRetLuckyDrawReward_ProtoModID_ProtoModID_MAX = stRetLuckyDrawReward_ProtoModID_ModID;
const int stRetLuckyDrawReward_ProtoModID_ProtoModID_ARRAYSIZE = stRetLuckyDrawReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLuckyDrawReward_ProtoModID_descriptor();
inline const ::std::string& stRetLuckyDrawReward_ProtoModID_Name(stRetLuckyDrawReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLuckyDrawReward_ProtoModID_descriptor(), value);
}
inline bool stRetLuckyDrawReward_ProtoModID_Parse(
    const ::std::string& name, stRetLuckyDrawReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLuckyDrawReward_ProtoModID>(
    stRetLuckyDrawReward_ProtoModID_descriptor(), name, value);
}
enum stRetLuckyDrawReward_ProtoFunID {
  stRetLuckyDrawReward_ProtoFunID_FunID = 196
};
bool stRetLuckyDrawReward_ProtoFunID_IsValid(int value);
const stRetLuckyDrawReward_ProtoFunID stRetLuckyDrawReward_ProtoFunID_ProtoFunID_MIN = stRetLuckyDrawReward_ProtoFunID_FunID;
const stRetLuckyDrawReward_ProtoFunID stRetLuckyDrawReward_ProtoFunID_ProtoFunID_MAX = stRetLuckyDrawReward_ProtoFunID_FunID;
const int stRetLuckyDrawReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetLuckyDrawReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLuckyDrawReward_ProtoFunID_descriptor();
inline const ::std::string& stRetLuckyDrawReward_ProtoFunID_Name(stRetLuckyDrawReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLuckyDrawReward_ProtoFunID_descriptor(), value);
}
inline bool stRetLuckyDrawReward_ProtoFunID_Parse(
    const ::std::string& name, stRetLuckyDrawReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLuckyDrawReward_ProtoFunID>(
    stRetLuckyDrawReward_ProtoFunID_descriptor(), name, value);
}
enum stReqLuckyDrawPointReward_ProtoModID {
  stReqLuckyDrawPointReward_ProtoModID_ModID = 8
};
bool stReqLuckyDrawPointReward_ProtoModID_IsValid(int value);
const stReqLuckyDrawPointReward_ProtoModID stReqLuckyDrawPointReward_ProtoModID_ProtoModID_MIN = stReqLuckyDrawPointReward_ProtoModID_ModID;
const stReqLuckyDrawPointReward_ProtoModID stReqLuckyDrawPointReward_ProtoModID_ProtoModID_MAX = stReqLuckyDrawPointReward_ProtoModID_ModID;
const int stReqLuckyDrawPointReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqLuckyDrawPointReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLuckyDrawPointReward_ProtoModID_descriptor();
inline const ::std::string& stReqLuckyDrawPointReward_ProtoModID_Name(stReqLuckyDrawPointReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLuckyDrawPointReward_ProtoModID_descriptor(), value);
}
inline bool stReqLuckyDrawPointReward_ProtoModID_Parse(
    const ::std::string& name, stReqLuckyDrawPointReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLuckyDrawPointReward_ProtoModID>(
    stReqLuckyDrawPointReward_ProtoModID_descriptor(), name, value);
}
enum stReqLuckyDrawPointReward_ProtoFunID {
  stReqLuckyDrawPointReward_ProtoFunID_FunID = 197
};
bool stReqLuckyDrawPointReward_ProtoFunID_IsValid(int value);
const stReqLuckyDrawPointReward_ProtoFunID stReqLuckyDrawPointReward_ProtoFunID_ProtoFunID_MIN = stReqLuckyDrawPointReward_ProtoFunID_FunID;
const stReqLuckyDrawPointReward_ProtoFunID stReqLuckyDrawPointReward_ProtoFunID_ProtoFunID_MAX = stReqLuckyDrawPointReward_ProtoFunID_FunID;
const int stReqLuckyDrawPointReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLuckyDrawPointReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLuckyDrawPointReward_ProtoFunID_descriptor();
inline const ::std::string& stReqLuckyDrawPointReward_ProtoFunID_Name(stReqLuckyDrawPointReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLuckyDrawPointReward_ProtoFunID_descriptor(), value);
}
inline bool stReqLuckyDrawPointReward_ProtoFunID_Parse(
    const ::std::string& name, stReqLuckyDrawPointReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLuckyDrawPointReward_ProtoFunID>(
    stReqLuckyDrawPointReward_ProtoFunID_descriptor(), name, value);
}
enum stRetLuckyDrawPointReward_eResult {
  stRetLuckyDrawPointReward_eResult_eSuccess = 1,
  stRetLuckyDrawPointReward_eResult_eBag_Full = 2,
  stRetLuckyDrawPointReward_eResult_eDiamond_Less = 3,
  stRetLuckyDrawPointReward_eResult_eActivity_Expire = 4,
  stRetLuckyDrawPointReward_eResult_eNo_Such_Id = 5,
  stRetLuckyDrawPointReward_eResult_eAlready_Get = 6
};
bool stRetLuckyDrawPointReward_eResult_IsValid(int value);
const stRetLuckyDrawPointReward_eResult stRetLuckyDrawPointReward_eResult_eResult_MIN = stRetLuckyDrawPointReward_eResult_eSuccess;
const stRetLuckyDrawPointReward_eResult stRetLuckyDrawPointReward_eResult_eResult_MAX = stRetLuckyDrawPointReward_eResult_eAlready_Get;
const int stRetLuckyDrawPointReward_eResult_eResult_ARRAYSIZE = stRetLuckyDrawPointReward_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLuckyDrawPointReward_eResult_descriptor();
inline const ::std::string& stRetLuckyDrawPointReward_eResult_Name(stRetLuckyDrawPointReward_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLuckyDrawPointReward_eResult_descriptor(), value);
}
inline bool stRetLuckyDrawPointReward_eResult_Parse(
    const ::std::string& name, stRetLuckyDrawPointReward_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLuckyDrawPointReward_eResult>(
    stRetLuckyDrawPointReward_eResult_descriptor(), name, value);
}
enum stRetLuckyDrawPointReward_ProtoModID {
  stRetLuckyDrawPointReward_ProtoModID_ModID = 8
};
bool stRetLuckyDrawPointReward_ProtoModID_IsValid(int value);
const stRetLuckyDrawPointReward_ProtoModID stRetLuckyDrawPointReward_ProtoModID_ProtoModID_MIN = stRetLuckyDrawPointReward_ProtoModID_ModID;
const stRetLuckyDrawPointReward_ProtoModID stRetLuckyDrawPointReward_ProtoModID_ProtoModID_MAX = stRetLuckyDrawPointReward_ProtoModID_ModID;
const int stRetLuckyDrawPointReward_ProtoModID_ProtoModID_ARRAYSIZE = stRetLuckyDrawPointReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLuckyDrawPointReward_ProtoModID_descriptor();
inline const ::std::string& stRetLuckyDrawPointReward_ProtoModID_Name(stRetLuckyDrawPointReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLuckyDrawPointReward_ProtoModID_descriptor(), value);
}
inline bool stRetLuckyDrawPointReward_ProtoModID_Parse(
    const ::std::string& name, stRetLuckyDrawPointReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLuckyDrawPointReward_ProtoModID>(
    stRetLuckyDrawPointReward_ProtoModID_descriptor(), name, value);
}
enum stRetLuckyDrawPointReward_ProtoFunID {
  stRetLuckyDrawPointReward_ProtoFunID_FunID = 198
};
bool stRetLuckyDrawPointReward_ProtoFunID_IsValid(int value);
const stRetLuckyDrawPointReward_ProtoFunID stRetLuckyDrawPointReward_ProtoFunID_ProtoFunID_MIN = stRetLuckyDrawPointReward_ProtoFunID_FunID;
const stRetLuckyDrawPointReward_ProtoFunID stRetLuckyDrawPointReward_ProtoFunID_ProtoFunID_MAX = stRetLuckyDrawPointReward_ProtoFunID_FunID;
const int stRetLuckyDrawPointReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetLuckyDrawPointReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLuckyDrawPointReward_ProtoFunID_descriptor();
inline const ::std::string& stRetLuckyDrawPointReward_ProtoFunID_Name(stRetLuckyDrawPointReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLuckyDrawPointReward_ProtoFunID_descriptor(), value);
}
inline bool stRetLuckyDrawPointReward_ProtoFunID_Parse(
    const ::std::string& name, stRetLuckyDrawPointReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLuckyDrawPointReward_ProtoFunID>(
    stRetLuckyDrawPointReward_ProtoFunID_descriptor(), name, value);
}
enum stReqRedPointRuls_ProtoModID {
  stReqRedPointRuls_ProtoModID_ModID = 8
};
bool stReqRedPointRuls_ProtoModID_IsValid(int value);
const stReqRedPointRuls_ProtoModID stReqRedPointRuls_ProtoModID_ProtoModID_MIN = stReqRedPointRuls_ProtoModID_ModID;
const stReqRedPointRuls_ProtoModID stReqRedPointRuls_ProtoModID_ProtoModID_MAX = stReqRedPointRuls_ProtoModID_ModID;
const int stReqRedPointRuls_ProtoModID_ProtoModID_ARRAYSIZE = stReqRedPointRuls_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRedPointRuls_ProtoModID_descriptor();
inline const ::std::string& stReqRedPointRuls_ProtoModID_Name(stReqRedPointRuls_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRedPointRuls_ProtoModID_descriptor(), value);
}
inline bool stReqRedPointRuls_ProtoModID_Parse(
    const ::std::string& name, stReqRedPointRuls_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRedPointRuls_ProtoModID>(
    stReqRedPointRuls_ProtoModID_descriptor(), name, value);
}
enum stReqRedPointRuls_ProtoFunID {
  stReqRedPointRuls_ProtoFunID_FunID = 199
};
bool stReqRedPointRuls_ProtoFunID_IsValid(int value);
const stReqRedPointRuls_ProtoFunID stReqRedPointRuls_ProtoFunID_ProtoFunID_MIN = stReqRedPointRuls_ProtoFunID_FunID;
const stReqRedPointRuls_ProtoFunID stReqRedPointRuls_ProtoFunID_ProtoFunID_MAX = stReqRedPointRuls_ProtoFunID_FunID;
const int stReqRedPointRuls_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRedPointRuls_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRedPointRuls_ProtoFunID_descriptor();
inline const ::std::string& stReqRedPointRuls_ProtoFunID_Name(stReqRedPointRuls_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRedPointRuls_ProtoFunID_descriptor(), value);
}
inline bool stReqRedPointRuls_ProtoFunID_Parse(
    const ::std::string& name, stReqRedPointRuls_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRedPointRuls_ProtoFunID>(
    stReqRedPointRuls_ProtoFunID_descriptor(), name, value);
}
enum stRedPointRulsResult_ProtoModID {
  stRedPointRulsResult_ProtoModID_ModID = 8
};
bool stRedPointRulsResult_ProtoModID_IsValid(int value);
const stRedPointRulsResult_ProtoModID stRedPointRulsResult_ProtoModID_ProtoModID_MIN = stRedPointRulsResult_ProtoModID_ModID;
const stRedPointRulsResult_ProtoModID stRedPointRulsResult_ProtoModID_ProtoModID_MAX = stRedPointRulsResult_ProtoModID_ModID;
const int stRedPointRulsResult_ProtoModID_ProtoModID_ARRAYSIZE = stRedPointRulsResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRedPointRulsResult_ProtoModID_descriptor();
inline const ::std::string& stRedPointRulsResult_ProtoModID_Name(stRedPointRulsResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRedPointRulsResult_ProtoModID_descriptor(), value);
}
inline bool stRedPointRulsResult_ProtoModID_Parse(
    const ::std::string& name, stRedPointRulsResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRedPointRulsResult_ProtoModID>(
    stRedPointRulsResult_ProtoModID_descriptor(), name, value);
}
enum stRedPointRulsResult_ProtoFunID {
  stRedPointRulsResult_ProtoFunID_FunID = 200
};
bool stRedPointRulsResult_ProtoFunID_IsValid(int value);
const stRedPointRulsResult_ProtoFunID stRedPointRulsResult_ProtoFunID_ProtoFunID_MIN = stRedPointRulsResult_ProtoFunID_FunID;
const stRedPointRulsResult_ProtoFunID stRedPointRulsResult_ProtoFunID_ProtoFunID_MAX = stRedPointRulsResult_ProtoFunID_FunID;
const int stRedPointRulsResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRedPointRulsResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRedPointRulsResult_ProtoFunID_descriptor();
inline const ::std::string& stRedPointRulsResult_ProtoFunID_Name(stRedPointRulsResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRedPointRulsResult_ProtoFunID_descriptor(), value);
}
inline bool stRedPointRulsResult_ProtoFunID_Parse(
    const ::std::string& name, stRedPointRulsResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRedPointRulsResult_ProtoFunID>(
    stRedPointRulsResult_ProtoFunID_descriptor(), name, value);
}
enum stReqInviteFriend_ProtoModID {
  stReqInviteFriend_ProtoModID_ModID = 8
};
bool stReqInviteFriend_ProtoModID_IsValid(int value);
const stReqInviteFriend_ProtoModID stReqInviteFriend_ProtoModID_ProtoModID_MIN = stReqInviteFriend_ProtoModID_ModID;
const stReqInviteFriend_ProtoModID stReqInviteFriend_ProtoModID_ProtoModID_MAX = stReqInviteFriend_ProtoModID_ModID;
const int stReqInviteFriend_ProtoModID_ProtoModID_ARRAYSIZE = stReqInviteFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqInviteFriend_ProtoModID_descriptor();
inline const ::std::string& stReqInviteFriend_ProtoModID_Name(stReqInviteFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqInviteFriend_ProtoModID_descriptor(), value);
}
inline bool stReqInviteFriend_ProtoModID_Parse(
    const ::std::string& name, stReqInviteFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqInviteFriend_ProtoModID>(
    stReqInviteFriend_ProtoModID_descriptor(), name, value);
}
enum stReqInviteFriend_ProtoFunID {
  stReqInviteFriend_ProtoFunID_FunID = 201
};
bool stReqInviteFriend_ProtoFunID_IsValid(int value);
const stReqInviteFriend_ProtoFunID stReqInviteFriend_ProtoFunID_ProtoFunID_MIN = stReqInviteFriend_ProtoFunID_FunID;
const stReqInviteFriend_ProtoFunID stReqInviteFriend_ProtoFunID_ProtoFunID_MAX = stReqInviteFriend_ProtoFunID_FunID;
const int stReqInviteFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqInviteFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqInviteFriend_ProtoFunID_descriptor();
inline const ::std::string& stReqInviteFriend_ProtoFunID_Name(stReqInviteFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqInviteFriend_ProtoFunID_descriptor(), value);
}
inline bool stReqInviteFriend_ProtoFunID_Parse(
    const ::std::string& name, stReqInviteFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqInviteFriend_ProtoFunID>(
    stReqInviteFriend_ProtoFunID_descriptor(), name, value);
}
enum stRetInviteFriend_ProtoModID {
  stRetInviteFriend_ProtoModID_ModID = 8
};
bool stRetInviteFriend_ProtoModID_IsValid(int value);
const stRetInviteFriend_ProtoModID stRetInviteFriend_ProtoModID_ProtoModID_MIN = stRetInviteFriend_ProtoModID_ModID;
const stRetInviteFriend_ProtoModID stRetInviteFriend_ProtoModID_ProtoModID_MAX = stRetInviteFriend_ProtoModID_ModID;
const int stRetInviteFriend_ProtoModID_ProtoModID_ARRAYSIZE = stRetInviteFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetInviteFriend_ProtoModID_descriptor();
inline const ::std::string& stRetInviteFriend_ProtoModID_Name(stRetInviteFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetInviteFriend_ProtoModID_descriptor(), value);
}
inline bool stRetInviteFriend_ProtoModID_Parse(
    const ::std::string& name, stRetInviteFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetInviteFriend_ProtoModID>(
    stRetInviteFriend_ProtoModID_descriptor(), name, value);
}
enum stRetInviteFriend_ProtoFunID {
  stRetInviteFriend_ProtoFunID_FunID = 202
};
bool stRetInviteFriend_ProtoFunID_IsValid(int value);
const stRetInviteFriend_ProtoFunID stRetInviteFriend_ProtoFunID_ProtoFunID_MIN = stRetInviteFriend_ProtoFunID_FunID;
const stRetInviteFriend_ProtoFunID stRetInviteFriend_ProtoFunID_ProtoFunID_MAX = stRetInviteFriend_ProtoFunID_FunID;
const int stRetInviteFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetInviteFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetInviteFriend_ProtoFunID_descriptor();
inline const ::std::string& stRetInviteFriend_ProtoFunID_Name(stRetInviteFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetInviteFriend_ProtoFunID_descriptor(), value);
}
inline bool stRetInviteFriend_ProtoFunID_Parse(
    const ::std::string& name, stRetInviteFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetInviteFriend_ProtoFunID>(
    stRetInviteFriend_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawInviteFriend_ProtoModID {
  stReqDrawInviteFriend_ProtoModID_ModID = 8
};
bool stReqDrawInviteFriend_ProtoModID_IsValid(int value);
const stReqDrawInviteFriend_ProtoModID stReqDrawInviteFriend_ProtoModID_ProtoModID_MIN = stReqDrawInviteFriend_ProtoModID_ModID;
const stReqDrawInviteFriend_ProtoModID stReqDrawInviteFriend_ProtoModID_ProtoModID_MAX = stReqDrawInviteFriend_ProtoModID_ModID;
const int stReqDrawInviteFriend_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawInviteFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawInviteFriend_ProtoModID_descriptor();
inline const ::std::string& stReqDrawInviteFriend_ProtoModID_Name(stReqDrawInviteFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawInviteFriend_ProtoModID_descriptor(), value);
}
inline bool stReqDrawInviteFriend_ProtoModID_Parse(
    const ::std::string& name, stReqDrawInviteFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawInviteFriend_ProtoModID>(
    stReqDrawInviteFriend_ProtoModID_descriptor(), name, value);
}
enum stReqDrawInviteFriend_ProtoFunID {
  stReqDrawInviteFriend_ProtoFunID_FunID = 203
};
bool stReqDrawInviteFriend_ProtoFunID_IsValid(int value);
const stReqDrawInviteFriend_ProtoFunID stReqDrawInviteFriend_ProtoFunID_ProtoFunID_MIN = stReqDrawInviteFriend_ProtoFunID_FunID;
const stReqDrawInviteFriend_ProtoFunID stReqDrawInviteFriend_ProtoFunID_ProtoFunID_MAX = stReqDrawInviteFriend_ProtoFunID_FunID;
const int stReqDrawInviteFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawInviteFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawInviteFriend_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawInviteFriend_ProtoFunID_Name(stReqDrawInviteFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawInviteFriend_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawInviteFriend_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawInviteFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawInviteFriend_ProtoFunID>(
    stReqDrawInviteFriend_ProtoFunID_descriptor(), name, value);
}
enum stRetDrawInviteFriend_eResult {
  stRetDrawInviteFriend_eResult_eSuccess = 1,
  stRetDrawInviteFriend_eResult_eBag_Full = 2,
  stRetDrawInviteFriend_eResult_eLess_Of_Invite_Num = 3,
  stRetDrawInviteFriend_eResult_eNo_Such_Id = 4,
  stRetDrawInviteFriend_eResult_eAlready_Get = 5,
  stRetDrawInviteFriend_eResult_eNot_Find_Record = 6
};
bool stRetDrawInviteFriend_eResult_IsValid(int value);
const stRetDrawInviteFriend_eResult stRetDrawInviteFriend_eResult_eResult_MIN = stRetDrawInviteFriend_eResult_eSuccess;
const stRetDrawInviteFriend_eResult stRetDrawInviteFriend_eResult_eResult_MAX = stRetDrawInviteFriend_eResult_eNot_Find_Record;
const int stRetDrawInviteFriend_eResult_eResult_ARRAYSIZE = stRetDrawInviteFriend_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawInviteFriend_eResult_descriptor();
inline const ::std::string& stRetDrawInviteFriend_eResult_Name(stRetDrawInviteFriend_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawInviteFriend_eResult_descriptor(), value);
}
inline bool stRetDrawInviteFriend_eResult_Parse(
    const ::std::string& name, stRetDrawInviteFriend_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawInviteFriend_eResult>(
    stRetDrawInviteFriend_eResult_descriptor(), name, value);
}
enum stRetDrawInviteFriend_ProtoModID {
  stRetDrawInviteFriend_ProtoModID_ModID = 8
};
bool stRetDrawInviteFriend_ProtoModID_IsValid(int value);
const stRetDrawInviteFriend_ProtoModID stRetDrawInviteFriend_ProtoModID_ProtoModID_MIN = stRetDrawInviteFriend_ProtoModID_ModID;
const stRetDrawInviteFriend_ProtoModID stRetDrawInviteFriend_ProtoModID_ProtoModID_MAX = stRetDrawInviteFriend_ProtoModID_ModID;
const int stRetDrawInviteFriend_ProtoModID_ProtoModID_ARRAYSIZE = stRetDrawInviteFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawInviteFriend_ProtoModID_descriptor();
inline const ::std::string& stRetDrawInviteFriend_ProtoModID_Name(stRetDrawInviteFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawInviteFriend_ProtoModID_descriptor(), value);
}
inline bool stRetDrawInviteFriend_ProtoModID_Parse(
    const ::std::string& name, stRetDrawInviteFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawInviteFriend_ProtoModID>(
    stRetDrawInviteFriend_ProtoModID_descriptor(), name, value);
}
enum stRetDrawInviteFriend_ProtoFunID {
  stRetDrawInviteFriend_ProtoFunID_FunID = 204
};
bool stRetDrawInviteFriend_ProtoFunID_IsValid(int value);
const stRetDrawInviteFriend_ProtoFunID stRetDrawInviteFriend_ProtoFunID_ProtoFunID_MIN = stRetDrawInviteFriend_ProtoFunID_FunID;
const stRetDrawInviteFriend_ProtoFunID stRetDrawInviteFriend_ProtoFunID_ProtoFunID_MAX = stRetDrawInviteFriend_ProtoFunID_FunID;
const int stRetDrawInviteFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDrawInviteFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawInviteFriend_ProtoFunID_descriptor();
inline const ::std::string& stRetDrawInviteFriend_ProtoFunID_Name(stRetDrawInviteFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawInviteFriend_ProtoFunID_descriptor(), value);
}
inline bool stRetDrawInviteFriend_ProtoFunID_Parse(
    const ::std::string& name, stRetDrawInviteFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawInviteFriend_ProtoFunID>(
    stRetDrawInviteFriend_ProtoFunID_descriptor(), name, value);
}
enum stReqUseInviteCode_ProtoModID {
  stReqUseInviteCode_ProtoModID_ModID = 8
};
bool stReqUseInviteCode_ProtoModID_IsValid(int value);
const stReqUseInviteCode_ProtoModID stReqUseInviteCode_ProtoModID_ProtoModID_MIN = stReqUseInviteCode_ProtoModID_ModID;
const stReqUseInviteCode_ProtoModID stReqUseInviteCode_ProtoModID_ProtoModID_MAX = stReqUseInviteCode_ProtoModID_ModID;
const int stReqUseInviteCode_ProtoModID_ProtoModID_ARRAYSIZE = stReqUseInviteCode_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUseInviteCode_ProtoModID_descriptor();
inline const ::std::string& stReqUseInviteCode_ProtoModID_Name(stReqUseInviteCode_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUseInviteCode_ProtoModID_descriptor(), value);
}
inline bool stReqUseInviteCode_ProtoModID_Parse(
    const ::std::string& name, stReqUseInviteCode_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUseInviteCode_ProtoModID>(
    stReqUseInviteCode_ProtoModID_descriptor(), name, value);
}
enum stReqUseInviteCode_ProtoFunID {
  stReqUseInviteCode_ProtoFunID_FunID = 205
};
bool stReqUseInviteCode_ProtoFunID_IsValid(int value);
const stReqUseInviteCode_ProtoFunID stReqUseInviteCode_ProtoFunID_ProtoFunID_MIN = stReqUseInviteCode_ProtoFunID_FunID;
const stReqUseInviteCode_ProtoFunID stReqUseInviteCode_ProtoFunID_ProtoFunID_MAX = stReqUseInviteCode_ProtoFunID_FunID;
const int stReqUseInviteCode_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqUseInviteCode_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUseInviteCode_ProtoFunID_descriptor();
inline const ::std::string& stReqUseInviteCode_ProtoFunID_Name(stReqUseInviteCode_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUseInviteCode_ProtoFunID_descriptor(), value);
}
inline bool stReqUseInviteCode_ProtoFunID_Parse(
    const ::std::string& name, stReqUseInviteCode_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUseInviteCode_ProtoFunID>(
    stReqUseInviteCode_ProtoFunID_descriptor(), name, value);
}
enum stRetUseInviteCode_eResult {
  stRetUseInviteCode_eResult_eSuccess = 1,
  stRetUseInviteCode_eResult_eBag_Full = 2,
  stRetUseInviteCode_eResult_eNo_Such_Code = 3,
  stRetUseInviteCode_eResult_eAlready_Get = 4,
  stRetUseInviteCode_eResult_eNot_Find_Record = 5,
  stRetUseInviteCode_eResult_eInner_error = 6,
  stRetUseInviteCode_eResult_eLevel_Limit = 7,
  stRetUseInviteCode_eResult_eUse_Self_Code = 8
};
bool stRetUseInviteCode_eResult_IsValid(int value);
const stRetUseInviteCode_eResult stRetUseInviteCode_eResult_eResult_MIN = stRetUseInviteCode_eResult_eSuccess;
const stRetUseInviteCode_eResult stRetUseInviteCode_eResult_eResult_MAX = stRetUseInviteCode_eResult_eUse_Self_Code;
const int stRetUseInviteCode_eResult_eResult_ARRAYSIZE = stRetUseInviteCode_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseInviteCode_eResult_descriptor();
inline const ::std::string& stRetUseInviteCode_eResult_Name(stRetUseInviteCode_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseInviteCode_eResult_descriptor(), value);
}
inline bool stRetUseInviteCode_eResult_Parse(
    const ::std::string& name, stRetUseInviteCode_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseInviteCode_eResult>(
    stRetUseInviteCode_eResult_descriptor(), name, value);
}
enum stRetUseInviteCode_ProtoModID {
  stRetUseInviteCode_ProtoModID_ModID = 8
};
bool stRetUseInviteCode_ProtoModID_IsValid(int value);
const stRetUseInviteCode_ProtoModID stRetUseInviteCode_ProtoModID_ProtoModID_MIN = stRetUseInviteCode_ProtoModID_ModID;
const stRetUseInviteCode_ProtoModID stRetUseInviteCode_ProtoModID_ProtoModID_MAX = stRetUseInviteCode_ProtoModID_ModID;
const int stRetUseInviteCode_ProtoModID_ProtoModID_ARRAYSIZE = stRetUseInviteCode_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseInviteCode_ProtoModID_descriptor();
inline const ::std::string& stRetUseInviteCode_ProtoModID_Name(stRetUseInviteCode_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseInviteCode_ProtoModID_descriptor(), value);
}
inline bool stRetUseInviteCode_ProtoModID_Parse(
    const ::std::string& name, stRetUseInviteCode_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseInviteCode_ProtoModID>(
    stRetUseInviteCode_ProtoModID_descriptor(), name, value);
}
enum stRetUseInviteCode_ProtoFunID {
  stRetUseInviteCode_ProtoFunID_FunID = 206
};
bool stRetUseInviteCode_ProtoFunID_IsValid(int value);
const stRetUseInviteCode_ProtoFunID stRetUseInviteCode_ProtoFunID_ProtoFunID_MIN = stRetUseInviteCode_ProtoFunID_FunID;
const stRetUseInviteCode_ProtoFunID stRetUseInviteCode_ProtoFunID_ProtoFunID_MAX = stRetUseInviteCode_ProtoFunID_FunID;
const int stRetUseInviteCode_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetUseInviteCode_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseInviteCode_ProtoFunID_descriptor();
inline const ::std::string& stRetUseInviteCode_ProtoFunID_Name(stRetUseInviteCode_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseInviteCode_ProtoFunID_descriptor(), value);
}
inline bool stRetUseInviteCode_ProtoFunID_Parse(
    const ::std::string& name, stRetUseInviteCode_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseInviteCode_ProtoFunID>(
    stRetUseInviteCode_ProtoFunID_descriptor(), name, value);
}
enum stReqShareInvite_ProtoModID {
  stReqShareInvite_ProtoModID_ModID = 8
};
bool stReqShareInvite_ProtoModID_IsValid(int value);
const stReqShareInvite_ProtoModID stReqShareInvite_ProtoModID_ProtoModID_MIN = stReqShareInvite_ProtoModID_ModID;
const stReqShareInvite_ProtoModID stReqShareInvite_ProtoModID_ProtoModID_MAX = stReqShareInvite_ProtoModID_ModID;
const int stReqShareInvite_ProtoModID_ProtoModID_ARRAYSIZE = stReqShareInvite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqShareInvite_ProtoModID_descriptor();
inline const ::std::string& stReqShareInvite_ProtoModID_Name(stReqShareInvite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqShareInvite_ProtoModID_descriptor(), value);
}
inline bool stReqShareInvite_ProtoModID_Parse(
    const ::std::string& name, stReqShareInvite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqShareInvite_ProtoModID>(
    stReqShareInvite_ProtoModID_descriptor(), name, value);
}
enum stReqShareInvite_ProtoFunID {
  stReqShareInvite_ProtoFunID_FunID = 207
};
bool stReqShareInvite_ProtoFunID_IsValid(int value);
const stReqShareInvite_ProtoFunID stReqShareInvite_ProtoFunID_ProtoFunID_MIN = stReqShareInvite_ProtoFunID_FunID;
const stReqShareInvite_ProtoFunID stReqShareInvite_ProtoFunID_ProtoFunID_MAX = stReqShareInvite_ProtoFunID_FunID;
const int stReqShareInvite_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqShareInvite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqShareInvite_ProtoFunID_descriptor();
inline const ::std::string& stReqShareInvite_ProtoFunID_Name(stReqShareInvite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqShareInvite_ProtoFunID_descriptor(), value);
}
inline bool stReqShareInvite_ProtoFunID_Parse(
    const ::std::string& name, stReqShareInvite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqShareInvite_ProtoFunID>(
    stReqShareInvite_ProtoFunID_descriptor(), name, value);
}
enum stRetShareInvite_ProtoModID {
  stRetShareInvite_ProtoModID_ModID = 8
};
bool stRetShareInvite_ProtoModID_IsValid(int value);
const stRetShareInvite_ProtoModID stRetShareInvite_ProtoModID_ProtoModID_MIN = stRetShareInvite_ProtoModID_ModID;
const stRetShareInvite_ProtoModID stRetShareInvite_ProtoModID_ProtoModID_MAX = stRetShareInvite_ProtoModID_ModID;
const int stRetShareInvite_ProtoModID_ProtoModID_ARRAYSIZE = stRetShareInvite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetShareInvite_ProtoModID_descriptor();
inline const ::std::string& stRetShareInvite_ProtoModID_Name(stRetShareInvite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetShareInvite_ProtoModID_descriptor(), value);
}
inline bool stRetShareInvite_ProtoModID_Parse(
    const ::std::string& name, stRetShareInvite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetShareInvite_ProtoModID>(
    stRetShareInvite_ProtoModID_descriptor(), name, value);
}
enum stRetShareInvite_ProtoFunID {
  stRetShareInvite_ProtoFunID_FunID = 208
};
bool stRetShareInvite_ProtoFunID_IsValid(int value);
const stRetShareInvite_ProtoFunID stRetShareInvite_ProtoFunID_ProtoFunID_MIN = stRetShareInvite_ProtoFunID_FunID;
const stRetShareInvite_ProtoFunID stRetShareInvite_ProtoFunID_ProtoFunID_MAX = stRetShareInvite_ProtoFunID_FunID;
const int stRetShareInvite_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetShareInvite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetShareInvite_ProtoFunID_descriptor();
inline const ::std::string& stRetShareInvite_ProtoFunID_Name(stRetShareInvite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetShareInvite_ProtoFunID_descriptor(), value);
}
inline bool stRetShareInvite_ProtoFunID_Parse(
    const ::std::string& name, stRetShareInvite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetShareInvite_ProtoFunID>(
    stRetShareInvite_ProtoFunID_descriptor(), name, value);
}
enum stReqDailyShareInvite_ProtoModID {
  stReqDailyShareInvite_ProtoModID_ModID = 8
};
bool stReqDailyShareInvite_ProtoModID_IsValid(int value);
const stReqDailyShareInvite_ProtoModID stReqDailyShareInvite_ProtoModID_ProtoModID_MIN = stReqDailyShareInvite_ProtoModID_ModID;
const stReqDailyShareInvite_ProtoModID stReqDailyShareInvite_ProtoModID_ProtoModID_MAX = stReqDailyShareInvite_ProtoModID_ModID;
const int stReqDailyShareInvite_ProtoModID_ProtoModID_ARRAYSIZE = stReqDailyShareInvite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDailyShareInvite_ProtoModID_descriptor();
inline const ::std::string& stReqDailyShareInvite_ProtoModID_Name(stReqDailyShareInvite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDailyShareInvite_ProtoModID_descriptor(), value);
}
inline bool stReqDailyShareInvite_ProtoModID_Parse(
    const ::std::string& name, stReqDailyShareInvite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDailyShareInvite_ProtoModID>(
    stReqDailyShareInvite_ProtoModID_descriptor(), name, value);
}
enum stReqDailyShareInvite_ProtoFunID {
  stReqDailyShareInvite_ProtoFunID_FunID = 209
};
bool stReqDailyShareInvite_ProtoFunID_IsValid(int value);
const stReqDailyShareInvite_ProtoFunID stReqDailyShareInvite_ProtoFunID_ProtoFunID_MIN = stReqDailyShareInvite_ProtoFunID_FunID;
const stReqDailyShareInvite_ProtoFunID stReqDailyShareInvite_ProtoFunID_ProtoFunID_MAX = stReqDailyShareInvite_ProtoFunID_FunID;
const int stReqDailyShareInvite_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDailyShareInvite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDailyShareInvite_ProtoFunID_descriptor();
inline const ::std::string& stReqDailyShareInvite_ProtoFunID_Name(stReqDailyShareInvite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDailyShareInvite_ProtoFunID_descriptor(), value);
}
inline bool stReqDailyShareInvite_ProtoFunID_Parse(
    const ::std::string& name, stReqDailyShareInvite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDailyShareInvite_ProtoFunID>(
    stReqDailyShareInvite_ProtoFunID_descriptor(), name, value);
}
enum stRetDailyShareInvite_ProtoModID {
  stRetDailyShareInvite_ProtoModID_ModID = 8
};
bool stRetDailyShareInvite_ProtoModID_IsValid(int value);
const stRetDailyShareInvite_ProtoModID stRetDailyShareInvite_ProtoModID_ProtoModID_MIN = stRetDailyShareInvite_ProtoModID_ModID;
const stRetDailyShareInvite_ProtoModID stRetDailyShareInvite_ProtoModID_ProtoModID_MAX = stRetDailyShareInvite_ProtoModID_ModID;
const int stRetDailyShareInvite_ProtoModID_ProtoModID_ARRAYSIZE = stRetDailyShareInvite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDailyShareInvite_ProtoModID_descriptor();
inline const ::std::string& stRetDailyShareInvite_ProtoModID_Name(stRetDailyShareInvite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDailyShareInvite_ProtoModID_descriptor(), value);
}
inline bool stRetDailyShareInvite_ProtoModID_Parse(
    const ::std::string& name, stRetDailyShareInvite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDailyShareInvite_ProtoModID>(
    stRetDailyShareInvite_ProtoModID_descriptor(), name, value);
}
enum stRetDailyShareInvite_ProtoFunID {
  stRetDailyShareInvite_ProtoFunID_FunID = 210
};
bool stRetDailyShareInvite_ProtoFunID_IsValid(int value);
const stRetDailyShareInvite_ProtoFunID stRetDailyShareInvite_ProtoFunID_ProtoFunID_MIN = stRetDailyShareInvite_ProtoFunID_FunID;
const stRetDailyShareInvite_ProtoFunID stRetDailyShareInvite_ProtoFunID_ProtoFunID_MAX = stRetDailyShareInvite_ProtoFunID_FunID;
const int stRetDailyShareInvite_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDailyShareInvite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDailyShareInvite_ProtoFunID_descriptor();
inline const ::std::string& stRetDailyShareInvite_ProtoFunID_Name(stRetDailyShareInvite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDailyShareInvite_ProtoFunID_descriptor(), value);
}
inline bool stRetDailyShareInvite_ProtoFunID_Parse(
    const ::std::string& name, stRetDailyShareInvite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDailyShareInvite_ProtoFunID>(
    stRetDailyShareInvite_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawDailyShareReward_ProtoModID {
  stReqDrawDailyShareReward_ProtoModID_ModID = 8
};
bool stReqDrawDailyShareReward_ProtoModID_IsValid(int value);
const stReqDrawDailyShareReward_ProtoModID stReqDrawDailyShareReward_ProtoModID_ProtoModID_MIN = stReqDrawDailyShareReward_ProtoModID_ModID;
const stReqDrawDailyShareReward_ProtoModID stReqDrawDailyShareReward_ProtoModID_ProtoModID_MAX = stReqDrawDailyShareReward_ProtoModID_ModID;
const int stReqDrawDailyShareReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawDailyShareReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawDailyShareReward_ProtoModID_descriptor();
inline const ::std::string& stReqDrawDailyShareReward_ProtoModID_Name(stReqDrawDailyShareReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawDailyShareReward_ProtoModID_descriptor(), value);
}
inline bool stReqDrawDailyShareReward_ProtoModID_Parse(
    const ::std::string& name, stReqDrawDailyShareReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawDailyShareReward_ProtoModID>(
    stReqDrawDailyShareReward_ProtoModID_descriptor(), name, value);
}
enum stReqDrawDailyShareReward_ProtoFunID {
  stReqDrawDailyShareReward_ProtoFunID_FunID = 211
};
bool stReqDrawDailyShareReward_ProtoFunID_IsValid(int value);
const stReqDrawDailyShareReward_ProtoFunID stReqDrawDailyShareReward_ProtoFunID_ProtoFunID_MIN = stReqDrawDailyShareReward_ProtoFunID_FunID;
const stReqDrawDailyShareReward_ProtoFunID stReqDrawDailyShareReward_ProtoFunID_ProtoFunID_MAX = stReqDrawDailyShareReward_ProtoFunID_FunID;
const int stReqDrawDailyShareReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawDailyShareReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawDailyShareReward_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawDailyShareReward_ProtoFunID_Name(stReqDrawDailyShareReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawDailyShareReward_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawDailyShareReward_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawDailyShareReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawDailyShareReward_ProtoFunID>(
    stReqDrawDailyShareReward_ProtoFunID_descriptor(), name, value);
}
enum stRetDrawDailyShareReward_eResult {
  stRetDrawDailyShareReward_eResult_eSuccess = 1,
  stRetDrawDailyShareReward_eResult_eBag_Full = 2,
  stRetDrawDailyShareReward_eResult_eLess_Of_Num = 3,
  stRetDrawDailyShareReward_eResult_eAlready_Get = 4,
  stRetDrawDailyShareReward_eResult_eNot_Find_Id = 5
};
bool stRetDrawDailyShareReward_eResult_IsValid(int value);
const stRetDrawDailyShareReward_eResult stRetDrawDailyShareReward_eResult_eResult_MIN = stRetDrawDailyShareReward_eResult_eSuccess;
const stRetDrawDailyShareReward_eResult stRetDrawDailyShareReward_eResult_eResult_MAX = stRetDrawDailyShareReward_eResult_eNot_Find_Id;
const int stRetDrawDailyShareReward_eResult_eResult_ARRAYSIZE = stRetDrawDailyShareReward_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawDailyShareReward_eResult_descriptor();
inline const ::std::string& stRetDrawDailyShareReward_eResult_Name(stRetDrawDailyShareReward_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawDailyShareReward_eResult_descriptor(), value);
}
inline bool stRetDrawDailyShareReward_eResult_Parse(
    const ::std::string& name, stRetDrawDailyShareReward_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawDailyShareReward_eResult>(
    stRetDrawDailyShareReward_eResult_descriptor(), name, value);
}
enum stRetDrawDailyShareReward_ProtoModID {
  stRetDrawDailyShareReward_ProtoModID_ModID = 8
};
bool stRetDrawDailyShareReward_ProtoModID_IsValid(int value);
const stRetDrawDailyShareReward_ProtoModID stRetDrawDailyShareReward_ProtoModID_ProtoModID_MIN = stRetDrawDailyShareReward_ProtoModID_ModID;
const stRetDrawDailyShareReward_ProtoModID stRetDrawDailyShareReward_ProtoModID_ProtoModID_MAX = stRetDrawDailyShareReward_ProtoModID_ModID;
const int stRetDrawDailyShareReward_ProtoModID_ProtoModID_ARRAYSIZE = stRetDrawDailyShareReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawDailyShareReward_ProtoModID_descriptor();
inline const ::std::string& stRetDrawDailyShareReward_ProtoModID_Name(stRetDrawDailyShareReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawDailyShareReward_ProtoModID_descriptor(), value);
}
inline bool stRetDrawDailyShareReward_ProtoModID_Parse(
    const ::std::string& name, stRetDrawDailyShareReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawDailyShareReward_ProtoModID>(
    stRetDrawDailyShareReward_ProtoModID_descriptor(), name, value);
}
enum stRetDrawDailyShareReward_ProtoFunID {
  stRetDrawDailyShareReward_ProtoFunID_FunID = 212
};
bool stRetDrawDailyShareReward_ProtoFunID_IsValid(int value);
const stRetDrawDailyShareReward_ProtoFunID stRetDrawDailyShareReward_ProtoFunID_ProtoFunID_MIN = stRetDrawDailyShareReward_ProtoFunID_FunID;
const stRetDrawDailyShareReward_ProtoFunID stRetDrawDailyShareReward_ProtoFunID_ProtoFunID_MAX = stRetDrawDailyShareReward_ProtoFunID_FunID;
const int stRetDrawDailyShareReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDrawDailyShareReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawDailyShareReward_ProtoFunID_descriptor();
inline const ::std::string& stRetDrawDailyShareReward_ProtoFunID_Name(stRetDrawDailyShareReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawDailyShareReward_ProtoFunID_descriptor(), value);
}
inline bool stRetDrawDailyShareReward_ProtoFunID_Parse(
    const ::std::string& name, stRetDrawDailyShareReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawDailyShareReward_ProtoFunID>(
    stRetDrawDailyShareReward_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawOnceShareReward_ProtoModID {
  stReqDrawOnceShareReward_ProtoModID_ModID = 8
};
bool stReqDrawOnceShareReward_ProtoModID_IsValid(int value);
const stReqDrawOnceShareReward_ProtoModID stReqDrawOnceShareReward_ProtoModID_ProtoModID_MIN = stReqDrawOnceShareReward_ProtoModID_ModID;
const stReqDrawOnceShareReward_ProtoModID stReqDrawOnceShareReward_ProtoModID_ProtoModID_MAX = stReqDrawOnceShareReward_ProtoModID_ModID;
const int stReqDrawOnceShareReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawOnceShareReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawOnceShareReward_ProtoModID_descriptor();
inline const ::std::string& stReqDrawOnceShareReward_ProtoModID_Name(stReqDrawOnceShareReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawOnceShareReward_ProtoModID_descriptor(), value);
}
inline bool stReqDrawOnceShareReward_ProtoModID_Parse(
    const ::std::string& name, stReqDrawOnceShareReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawOnceShareReward_ProtoModID>(
    stReqDrawOnceShareReward_ProtoModID_descriptor(), name, value);
}
enum stReqDrawOnceShareReward_ProtoFunID {
  stReqDrawOnceShareReward_ProtoFunID_FunID = 213
};
bool stReqDrawOnceShareReward_ProtoFunID_IsValid(int value);
const stReqDrawOnceShareReward_ProtoFunID stReqDrawOnceShareReward_ProtoFunID_ProtoFunID_MIN = stReqDrawOnceShareReward_ProtoFunID_FunID;
const stReqDrawOnceShareReward_ProtoFunID stReqDrawOnceShareReward_ProtoFunID_ProtoFunID_MAX = stReqDrawOnceShareReward_ProtoFunID_FunID;
const int stReqDrawOnceShareReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawOnceShareReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawOnceShareReward_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawOnceShareReward_ProtoFunID_Name(stReqDrawOnceShareReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawOnceShareReward_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawOnceShareReward_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawOnceShareReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawOnceShareReward_ProtoFunID>(
    stReqDrawOnceShareReward_ProtoFunID_descriptor(), name, value);
}
enum stRetDrawOnceShareReward_eResult {
  stRetDrawOnceShareReward_eResult_eSuccess = 1,
  stRetDrawOnceShareReward_eResult_eBag_Full = 2,
  stRetDrawOnceShareReward_eResult_eAlready_Get = 3,
  stRetDrawOnceShareReward_eResult_eLess_Of_Num = 4
};
bool stRetDrawOnceShareReward_eResult_IsValid(int value);
const stRetDrawOnceShareReward_eResult stRetDrawOnceShareReward_eResult_eResult_MIN = stRetDrawOnceShareReward_eResult_eSuccess;
const stRetDrawOnceShareReward_eResult stRetDrawOnceShareReward_eResult_eResult_MAX = stRetDrawOnceShareReward_eResult_eLess_Of_Num;
const int stRetDrawOnceShareReward_eResult_eResult_ARRAYSIZE = stRetDrawOnceShareReward_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawOnceShareReward_eResult_descriptor();
inline const ::std::string& stRetDrawOnceShareReward_eResult_Name(stRetDrawOnceShareReward_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawOnceShareReward_eResult_descriptor(), value);
}
inline bool stRetDrawOnceShareReward_eResult_Parse(
    const ::std::string& name, stRetDrawOnceShareReward_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawOnceShareReward_eResult>(
    stRetDrawOnceShareReward_eResult_descriptor(), name, value);
}
enum stRetDrawOnceShareReward_ProtoModID {
  stRetDrawOnceShareReward_ProtoModID_ModID = 8
};
bool stRetDrawOnceShareReward_ProtoModID_IsValid(int value);
const stRetDrawOnceShareReward_ProtoModID stRetDrawOnceShareReward_ProtoModID_ProtoModID_MIN = stRetDrawOnceShareReward_ProtoModID_ModID;
const stRetDrawOnceShareReward_ProtoModID stRetDrawOnceShareReward_ProtoModID_ProtoModID_MAX = stRetDrawOnceShareReward_ProtoModID_ModID;
const int stRetDrawOnceShareReward_ProtoModID_ProtoModID_ARRAYSIZE = stRetDrawOnceShareReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawOnceShareReward_ProtoModID_descriptor();
inline const ::std::string& stRetDrawOnceShareReward_ProtoModID_Name(stRetDrawOnceShareReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawOnceShareReward_ProtoModID_descriptor(), value);
}
inline bool stRetDrawOnceShareReward_ProtoModID_Parse(
    const ::std::string& name, stRetDrawOnceShareReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawOnceShareReward_ProtoModID>(
    stRetDrawOnceShareReward_ProtoModID_descriptor(), name, value);
}
enum stRetDrawOnceShareReward_ProtoFunID {
  stRetDrawOnceShareReward_ProtoFunID_FunID = 214
};
bool stRetDrawOnceShareReward_ProtoFunID_IsValid(int value);
const stRetDrawOnceShareReward_ProtoFunID stRetDrawOnceShareReward_ProtoFunID_ProtoFunID_MIN = stRetDrawOnceShareReward_ProtoFunID_FunID;
const stRetDrawOnceShareReward_ProtoFunID stRetDrawOnceShareReward_ProtoFunID_ProtoFunID_MAX = stRetDrawOnceShareReward_ProtoFunID_FunID;
const int stRetDrawOnceShareReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDrawOnceShareReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawOnceShareReward_ProtoFunID_descriptor();
inline const ::std::string& stRetDrawOnceShareReward_ProtoFunID_Name(stRetDrawOnceShareReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawOnceShareReward_ProtoFunID_descriptor(), value);
}
inline bool stRetDrawOnceShareReward_ProtoFunID_Parse(
    const ::std::string& name, stRetDrawOnceShareReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawOnceShareReward_ProtoFunID>(
    stRetDrawOnceShareReward_ProtoFunID_descriptor(), name, value);
}
enum stNotifyInterceptServerResult_eResult {
  stNotifyInterceptServerResult_eResult_eWin = 1,
  stNotifyInterceptServerResult_eResult_eLose = 2,
  stNotifyInterceptServerResult_eResult_eTimeout = 3
};
bool stNotifyInterceptServerResult_eResult_IsValid(int value);
const stNotifyInterceptServerResult_eResult stNotifyInterceptServerResult_eResult_eResult_MIN = stNotifyInterceptServerResult_eResult_eWin;
const stNotifyInterceptServerResult_eResult stNotifyInterceptServerResult_eResult_eResult_MAX = stNotifyInterceptServerResult_eResult_eTimeout;
const int stNotifyInterceptServerResult_eResult_eResult_ARRAYSIZE = stNotifyInterceptServerResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyInterceptServerResult_eResult_descriptor();
inline const ::std::string& stNotifyInterceptServerResult_eResult_Name(stNotifyInterceptServerResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyInterceptServerResult_eResult_descriptor(), value);
}
inline bool stNotifyInterceptServerResult_eResult_Parse(
    const ::std::string& name, stNotifyInterceptServerResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyInterceptServerResult_eResult>(
    stNotifyInterceptServerResult_eResult_descriptor(), name, value);
}
enum stNotifyInterceptServerResult_ProtoModID {
  stNotifyInterceptServerResult_ProtoModID_ModID = 8
};
bool stNotifyInterceptServerResult_ProtoModID_IsValid(int value);
const stNotifyInterceptServerResult_ProtoModID stNotifyInterceptServerResult_ProtoModID_ProtoModID_MIN = stNotifyInterceptServerResult_ProtoModID_ModID;
const stNotifyInterceptServerResult_ProtoModID stNotifyInterceptServerResult_ProtoModID_ProtoModID_MAX = stNotifyInterceptServerResult_ProtoModID_ModID;
const int stNotifyInterceptServerResult_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyInterceptServerResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyInterceptServerResult_ProtoModID_descriptor();
inline const ::std::string& stNotifyInterceptServerResult_ProtoModID_Name(stNotifyInterceptServerResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyInterceptServerResult_ProtoModID_descriptor(), value);
}
inline bool stNotifyInterceptServerResult_ProtoModID_Parse(
    const ::std::string& name, stNotifyInterceptServerResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyInterceptServerResult_ProtoModID>(
    stNotifyInterceptServerResult_ProtoModID_descriptor(), name, value);
}
enum stNotifyInterceptServerResult_ProtoFunID {
  stNotifyInterceptServerResult_ProtoFunID_FunID = 215
};
bool stNotifyInterceptServerResult_ProtoFunID_IsValid(int value);
const stNotifyInterceptServerResult_ProtoFunID stNotifyInterceptServerResult_ProtoFunID_ProtoFunID_MIN = stNotifyInterceptServerResult_ProtoFunID_FunID;
const stNotifyInterceptServerResult_ProtoFunID stNotifyInterceptServerResult_ProtoFunID_ProtoFunID_MAX = stNotifyInterceptServerResult_ProtoFunID_FunID;
const int stNotifyInterceptServerResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyInterceptServerResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyInterceptServerResult_ProtoFunID_descriptor();
inline const ::std::string& stNotifyInterceptServerResult_ProtoFunID_Name(stNotifyInterceptServerResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyInterceptServerResult_ProtoFunID_descriptor(), value);
}
inline bool stNotifyInterceptServerResult_ProtoFunID_Parse(
    const ::std::string& name, stNotifyInterceptServerResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyInterceptServerResult_ProtoFunID>(
    stNotifyInterceptServerResult_ProtoFunID_descriptor(), name, value);
}
enum stReqReceiveState_ProtoModID {
  stReqReceiveState_ProtoModID_ModID = 8
};
bool stReqReceiveState_ProtoModID_IsValid(int value);
const stReqReceiveState_ProtoModID stReqReceiveState_ProtoModID_ProtoModID_MIN = stReqReceiveState_ProtoModID_ModID;
const stReqReceiveState_ProtoModID stReqReceiveState_ProtoModID_ProtoModID_MAX = stReqReceiveState_ProtoModID_ModID;
const int stReqReceiveState_ProtoModID_ProtoModID_ARRAYSIZE = stReqReceiveState_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReceiveState_ProtoModID_descriptor();
inline const ::std::string& stReqReceiveState_ProtoModID_Name(stReqReceiveState_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReceiveState_ProtoModID_descriptor(), value);
}
inline bool stReqReceiveState_ProtoModID_Parse(
    const ::std::string& name, stReqReceiveState_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReceiveState_ProtoModID>(
    stReqReceiveState_ProtoModID_descriptor(), name, value);
}
enum stReqReceiveState_ProtoFunID {
  stReqReceiveState_ProtoFunID_FunID = 216
};
bool stReqReceiveState_ProtoFunID_IsValid(int value);
const stReqReceiveState_ProtoFunID stReqReceiveState_ProtoFunID_ProtoFunID_MIN = stReqReceiveState_ProtoFunID_FunID;
const stReqReceiveState_ProtoFunID stReqReceiveState_ProtoFunID_ProtoFunID_MAX = stReqReceiveState_ProtoFunID_FunID;
const int stReqReceiveState_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqReceiveState_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReceiveState_ProtoFunID_descriptor();
inline const ::std::string& stReqReceiveState_ProtoFunID_Name(stReqReceiveState_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReceiveState_ProtoFunID_descriptor(), value);
}
inline bool stReqReceiveState_ProtoFunID_Parse(
    const ::std::string& name, stReqReceiveState_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReceiveState_ProtoFunID>(
    stReqReceiveState_ProtoFunID_descriptor(), name, value);
}
enum stReceiveStateResult_ProtoModID {
  stReceiveStateResult_ProtoModID_ModID = 8
};
bool stReceiveStateResult_ProtoModID_IsValid(int value);
const stReceiveStateResult_ProtoModID stReceiveStateResult_ProtoModID_ProtoModID_MIN = stReceiveStateResult_ProtoModID_ModID;
const stReceiveStateResult_ProtoModID stReceiveStateResult_ProtoModID_ProtoModID_MAX = stReceiveStateResult_ProtoModID_ModID;
const int stReceiveStateResult_ProtoModID_ProtoModID_ARRAYSIZE = stReceiveStateResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReceiveStateResult_ProtoModID_descriptor();
inline const ::std::string& stReceiveStateResult_ProtoModID_Name(stReceiveStateResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReceiveStateResult_ProtoModID_descriptor(), value);
}
inline bool stReceiveStateResult_ProtoModID_Parse(
    const ::std::string& name, stReceiveStateResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReceiveStateResult_ProtoModID>(
    stReceiveStateResult_ProtoModID_descriptor(), name, value);
}
enum stReceiveStateResult_ProtoFunID {
  stReceiveStateResult_ProtoFunID_FunID = 217
};
bool stReceiveStateResult_ProtoFunID_IsValid(int value);
const stReceiveStateResult_ProtoFunID stReceiveStateResult_ProtoFunID_ProtoFunID_MIN = stReceiveStateResult_ProtoFunID_FunID;
const stReceiveStateResult_ProtoFunID stReceiveStateResult_ProtoFunID_ProtoFunID_MAX = stReceiveStateResult_ProtoFunID_FunID;
const int stReceiveStateResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stReceiveStateResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReceiveStateResult_ProtoFunID_descriptor();
inline const ::std::string& stReceiveStateResult_ProtoFunID_Name(stReceiveStateResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReceiveStateResult_ProtoFunID_descriptor(), value);
}
inline bool stReceiveStateResult_ProtoFunID_Parse(
    const ::std::string& name, stReceiveStateResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReceiveStateResult_ProtoFunID>(
    stReceiveStateResult_ProtoFunID_descriptor(), name, value);
}
enum stReqReceiveReward_ProtoModID {
  stReqReceiveReward_ProtoModID_ModID = 8
};
bool stReqReceiveReward_ProtoModID_IsValid(int value);
const stReqReceiveReward_ProtoModID stReqReceiveReward_ProtoModID_ProtoModID_MIN = stReqReceiveReward_ProtoModID_ModID;
const stReqReceiveReward_ProtoModID stReqReceiveReward_ProtoModID_ProtoModID_MAX = stReqReceiveReward_ProtoModID_ModID;
const int stReqReceiveReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqReceiveReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReceiveReward_ProtoModID_descriptor();
inline const ::std::string& stReqReceiveReward_ProtoModID_Name(stReqReceiveReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReceiveReward_ProtoModID_descriptor(), value);
}
inline bool stReqReceiveReward_ProtoModID_Parse(
    const ::std::string& name, stReqReceiveReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReceiveReward_ProtoModID>(
    stReqReceiveReward_ProtoModID_descriptor(), name, value);
}
enum stReqReceiveReward_ProtoFunID {
  stReqReceiveReward_ProtoFunID_FunID = 218
};
bool stReqReceiveReward_ProtoFunID_IsValid(int value);
const stReqReceiveReward_ProtoFunID stReqReceiveReward_ProtoFunID_ProtoFunID_MIN = stReqReceiveReward_ProtoFunID_FunID;
const stReqReceiveReward_ProtoFunID stReqReceiveReward_ProtoFunID_ProtoFunID_MAX = stReqReceiveReward_ProtoFunID_FunID;
const int stReqReceiveReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqReceiveReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReceiveReward_ProtoFunID_descriptor();
inline const ::std::string& stReqReceiveReward_ProtoFunID_Name(stReqReceiveReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReceiveReward_ProtoFunID_descriptor(), value);
}
inline bool stReqReceiveReward_ProtoFunID_Parse(
    const ::std::string& name, stReqReceiveReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReceiveReward_ProtoFunID>(
    stReqReceiveReward_ProtoFunID_descriptor(), name, value);
}
enum stReceiveRewardResult_eResult {
  stReceiveRewardResult_eResult_eSuccess = 1,
  stReceiveRewardResult_eResult_eHas_Got_Reward = 2,
  stReceiveRewardResult_eResult_eRecharge_Not_Enough = 3,
  stReceiveRewardResult_eResult_eBag_Full = 4,
  stReceiveRewardResult_eResult_eInner_Error = 5,
  stReceiveRewardResult_eResult_eIs_Not_Open = 6
};
bool stReceiveRewardResult_eResult_IsValid(int value);
const stReceiveRewardResult_eResult stReceiveRewardResult_eResult_eResult_MIN = stReceiveRewardResult_eResult_eSuccess;
const stReceiveRewardResult_eResult stReceiveRewardResult_eResult_eResult_MAX = stReceiveRewardResult_eResult_eIs_Not_Open;
const int stReceiveRewardResult_eResult_eResult_ARRAYSIZE = stReceiveRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReceiveRewardResult_eResult_descriptor();
inline const ::std::string& stReceiveRewardResult_eResult_Name(stReceiveRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReceiveRewardResult_eResult_descriptor(), value);
}
inline bool stReceiveRewardResult_eResult_Parse(
    const ::std::string& name, stReceiveRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReceiveRewardResult_eResult>(
    stReceiveRewardResult_eResult_descriptor(), name, value);
}
enum stReceiveRewardResult_ProtoModID {
  stReceiveRewardResult_ProtoModID_ModID = 8
};
bool stReceiveRewardResult_ProtoModID_IsValid(int value);
const stReceiveRewardResult_ProtoModID stReceiveRewardResult_ProtoModID_ProtoModID_MIN = stReceiveRewardResult_ProtoModID_ModID;
const stReceiveRewardResult_ProtoModID stReceiveRewardResult_ProtoModID_ProtoModID_MAX = stReceiveRewardResult_ProtoModID_ModID;
const int stReceiveRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stReceiveRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReceiveRewardResult_ProtoModID_descriptor();
inline const ::std::string& stReceiveRewardResult_ProtoModID_Name(stReceiveRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReceiveRewardResult_ProtoModID_descriptor(), value);
}
inline bool stReceiveRewardResult_ProtoModID_Parse(
    const ::std::string& name, stReceiveRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReceiveRewardResult_ProtoModID>(
    stReceiveRewardResult_ProtoModID_descriptor(), name, value);
}
enum stReceiveRewardResult_ProtoFunID {
  stReceiveRewardResult_ProtoFunID_FunID = 219
};
bool stReceiveRewardResult_ProtoFunID_IsValid(int value);
const stReceiveRewardResult_ProtoFunID stReceiveRewardResult_ProtoFunID_ProtoFunID_MIN = stReceiveRewardResult_ProtoFunID_FunID;
const stReceiveRewardResult_ProtoFunID stReceiveRewardResult_ProtoFunID_ProtoFunID_MAX = stReceiveRewardResult_ProtoFunID_FunID;
const int stReceiveRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stReceiveRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReceiveRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stReceiveRewardResult_ProtoFunID_Name(stReceiveRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReceiveRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stReceiveRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stReceiveRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReceiveRewardResult_ProtoFunID>(
    stReceiveRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stSendAllAcitivityLimitPet_ProtoModID {
  stSendAllAcitivityLimitPet_ProtoModID_ModID = 8
};
bool stSendAllAcitivityLimitPet_ProtoModID_IsValid(int value);
const stSendAllAcitivityLimitPet_ProtoModID stSendAllAcitivityLimitPet_ProtoModID_ProtoModID_MIN = stSendAllAcitivityLimitPet_ProtoModID_ModID;
const stSendAllAcitivityLimitPet_ProtoModID stSendAllAcitivityLimitPet_ProtoModID_ProtoModID_MAX = stSendAllAcitivityLimitPet_ProtoModID_ModID;
const int stSendAllAcitivityLimitPet_ProtoModID_ProtoModID_ARRAYSIZE = stSendAllAcitivityLimitPet_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendAllAcitivityLimitPet_ProtoModID_descriptor();
inline const ::std::string& stSendAllAcitivityLimitPet_ProtoModID_Name(stSendAllAcitivityLimitPet_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendAllAcitivityLimitPet_ProtoModID_descriptor(), value);
}
inline bool stSendAllAcitivityLimitPet_ProtoModID_Parse(
    const ::std::string& name, stSendAllAcitivityLimitPet_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendAllAcitivityLimitPet_ProtoModID>(
    stSendAllAcitivityLimitPet_ProtoModID_descriptor(), name, value);
}
enum stSendAllAcitivityLimitPet_ProtoFunID {
  stSendAllAcitivityLimitPet_ProtoFunID_FunID = 220
};
bool stSendAllAcitivityLimitPet_ProtoFunID_IsValid(int value);
const stSendAllAcitivityLimitPet_ProtoFunID stSendAllAcitivityLimitPet_ProtoFunID_ProtoFunID_MIN = stSendAllAcitivityLimitPet_ProtoFunID_FunID;
const stSendAllAcitivityLimitPet_ProtoFunID stSendAllAcitivityLimitPet_ProtoFunID_ProtoFunID_MAX = stSendAllAcitivityLimitPet_ProtoFunID_FunID;
const int stSendAllAcitivityLimitPet_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendAllAcitivityLimitPet_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendAllAcitivityLimitPet_ProtoFunID_descriptor();
inline const ::std::string& stSendAllAcitivityLimitPet_ProtoFunID_Name(stSendAllAcitivityLimitPet_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendAllAcitivityLimitPet_ProtoFunID_descriptor(), value);
}
inline bool stSendAllAcitivityLimitPet_ProtoFunID_Parse(
    const ::std::string& name, stSendAllAcitivityLimitPet_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendAllAcitivityLimitPet_ProtoFunID>(
    stSendAllAcitivityLimitPet_ProtoFunID_descriptor(), name, value);
}
enum stSendLateWalfareActivity_ProtoModID {
  stSendLateWalfareActivity_ProtoModID_ModID = 8
};
bool stSendLateWalfareActivity_ProtoModID_IsValid(int value);
const stSendLateWalfareActivity_ProtoModID stSendLateWalfareActivity_ProtoModID_ProtoModID_MIN = stSendLateWalfareActivity_ProtoModID_ModID;
const stSendLateWalfareActivity_ProtoModID stSendLateWalfareActivity_ProtoModID_ProtoModID_MAX = stSendLateWalfareActivity_ProtoModID_ModID;
const int stSendLateWalfareActivity_ProtoModID_ProtoModID_ARRAYSIZE = stSendLateWalfareActivity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendLateWalfareActivity_ProtoModID_descriptor();
inline const ::std::string& stSendLateWalfareActivity_ProtoModID_Name(stSendLateWalfareActivity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendLateWalfareActivity_ProtoModID_descriptor(), value);
}
inline bool stSendLateWalfareActivity_ProtoModID_Parse(
    const ::std::string& name, stSendLateWalfareActivity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendLateWalfareActivity_ProtoModID>(
    stSendLateWalfareActivity_ProtoModID_descriptor(), name, value);
}
enum stSendLateWalfareActivity_ProtoFunID {
  stSendLateWalfareActivity_ProtoFunID_FunID = 221
};
bool stSendLateWalfareActivity_ProtoFunID_IsValid(int value);
const stSendLateWalfareActivity_ProtoFunID stSendLateWalfareActivity_ProtoFunID_ProtoFunID_MIN = stSendLateWalfareActivity_ProtoFunID_FunID;
const stSendLateWalfareActivity_ProtoFunID stSendLateWalfareActivity_ProtoFunID_ProtoFunID_MAX = stSendLateWalfareActivity_ProtoFunID_FunID;
const int stSendLateWalfareActivity_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendLateWalfareActivity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendLateWalfareActivity_ProtoFunID_descriptor();
inline const ::std::string& stSendLateWalfareActivity_ProtoFunID_Name(stSendLateWalfareActivity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendLateWalfareActivity_ProtoFunID_descriptor(), value);
}
inline bool stSendLateWalfareActivity_ProtoFunID_Parse(
    const ::std::string& name, stSendLateWalfareActivity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendLateWalfareActivity_ProtoFunID>(
    stSendLateWalfareActivity_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawLateWalfare_ProtoModID {
  stReqDrawLateWalfare_ProtoModID_ModID = 8
};
bool stReqDrawLateWalfare_ProtoModID_IsValid(int value);
const stReqDrawLateWalfare_ProtoModID stReqDrawLateWalfare_ProtoModID_ProtoModID_MIN = stReqDrawLateWalfare_ProtoModID_ModID;
const stReqDrawLateWalfare_ProtoModID stReqDrawLateWalfare_ProtoModID_ProtoModID_MAX = stReqDrawLateWalfare_ProtoModID_ModID;
const int stReqDrawLateWalfare_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawLateWalfare_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawLateWalfare_ProtoModID_descriptor();
inline const ::std::string& stReqDrawLateWalfare_ProtoModID_Name(stReqDrawLateWalfare_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawLateWalfare_ProtoModID_descriptor(), value);
}
inline bool stReqDrawLateWalfare_ProtoModID_Parse(
    const ::std::string& name, stReqDrawLateWalfare_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawLateWalfare_ProtoModID>(
    stReqDrawLateWalfare_ProtoModID_descriptor(), name, value);
}
enum stReqDrawLateWalfare_ProtoFunID {
  stReqDrawLateWalfare_ProtoFunID_FunID = 222
};
bool stReqDrawLateWalfare_ProtoFunID_IsValid(int value);
const stReqDrawLateWalfare_ProtoFunID stReqDrawLateWalfare_ProtoFunID_ProtoFunID_MIN = stReqDrawLateWalfare_ProtoFunID_FunID;
const stReqDrawLateWalfare_ProtoFunID stReqDrawLateWalfare_ProtoFunID_ProtoFunID_MAX = stReqDrawLateWalfare_ProtoFunID_FunID;
const int stReqDrawLateWalfare_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawLateWalfare_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawLateWalfare_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawLateWalfare_ProtoFunID_Name(stReqDrawLateWalfare_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawLateWalfare_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawLateWalfare_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawLateWalfare_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawLateWalfare_ProtoFunID>(
    stReqDrawLateWalfare_ProtoFunID_descriptor(), name, value);
}
enum stRetDrawLateWalfare_eResult {
  stRetDrawLateWalfare_eResult_eSuccess = 1,
  stRetDrawLateWalfare_eResult_eNot_Open = 2,
  stRetDrawLateWalfare_eResult_eAlread_Draw = 3,
  stRetDrawLateWalfare_eResult_eActivity_Expire = 4,
  stRetDrawLateWalfare_eResult_eNo_Such_Id = 5,
  stRetDrawLateWalfare_eResult_eDiamond_Not_Enough = 6
};
bool stRetDrawLateWalfare_eResult_IsValid(int value);
const stRetDrawLateWalfare_eResult stRetDrawLateWalfare_eResult_eResult_MIN = stRetDrawLateWalfare_eResult_eSuccess;
const stRetDrawLateWalfare_eResult stRetDrawLateWalfare_eResult_eResult_MAX = stRetDrawLateWalfare_eResult_eDiamond_Not_Enough;
const int stRetDrawLateWalfare_eResult_eResult_ARRAYSIZE = stRetDrawLateWalfare_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawLateWalfare_eResult_descriptor();
inline const ::std::string& stRetDrawLateWalfare_eResult_Name(stRetDrawLateWalfare_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawLateWalfare_eResult_descriptor(), value);
}
inline bool stRetDrawLateWalfare_eResult_Parse(
    const ::std::string& name, stRetDrawLateWalfare_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawLateWalfare_eResult>(
    stRetDrawLateWalfare_eResult_descriptor(), name, value);
}
enum stRetDrawLateWalfare_ProtoModID {
  stRetDrawLateWalfare_ProtoModID_ModID = 8
};
bool stRetDrawLateWalfare_ProtoModID_IsValid(int value);
const stRetDrawLateWalfare_ProtoModID stRetDrawLateWalfare_ProtoModID_ProtoModID_MIN = stRetDrawLateWalfare_ProtoModID_ModID;
const stRetDrawLateWalfare_ProtoModID stRetDrawLateWalfare_ProtoModID_ProtoModID_MAX = stRetDrawLateWalfare_ProtoModID_ModID;
const int stRetDrawLateWalfare_ProtoModID_ProtoModID_ARRAYSIZE = stRetDrawLateWalfare_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawLateWalfare_ProtoModID_descriptor();
inline const ::std::string& stRetDrawLateWalfare_ProtoModID_Name(stRetDrawLateWalfare_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawLateWalfare_ProtoModID_descriptor(), value);
}
inline bool stRetDrawLateWalfare_ProtoModID_Parse(
    const ::std::string& name, stRetDrawLateWalfare_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawLateWalfare_ProtoModID>(
    stRetDrawLateWalfare_ProtoModID_descriptor(), name, value);
}
enum stRetDrawLateWalfare_ProtoFunID {
  stRetDrawLateWalfare_ProtoFunID_FunID = 223
};
bool stRetDrawLateWalfare_ProtoFunID_IsValid(int value);
const stRetDrawLateWalfare_ProtoFunID stRetDrawLateWalfare_ProtoFunID_ProtoFunID_MIN = stRetDrawLateWalfare_ProtoFunID_FunID;
const stRetDrawLateWalfare_ProtoFunID stRetDrawLateWalfare_ProtoFunID_ProtoFunID_MAX = stRetDrawLateWalfare_ProtoFunID_FunID;
const int stRetDrawLateWalfare_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDrawLateWalfare_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawLateWalfare_ProtoFunID_descriptor();
inline const ::std::string& stRetDrawLateWalfare_ProtoFunID_Name(stRetDrawLateWalfare_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawLateWalfare_ProtoFunID_descriptor(), value);
}
inline bool stRetDrawLateWalfare_ProtoFunID_Parse(
    const ::std::string& name, stRetDrawLateWalfare_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawLateWalfare_ProtoFunID>(
    stRetDrawLateWalfare_ProtoFunID_descriptor(), name, value);
}
enum stSendAllResGetBack_ProtoModID {
  stSendAllResGetBack_ProtoModID_ModID = 8
};
bool stSendAllResGetBack_ProtoModID_IsValid(int value);
const stSendAllResGetBack_ProtoModID stSendAllResGetBack_ProtoModID_ProtoModID_MIN = stSendAllResGetBack_ProtoModID_ModID;
const stSendAllResGetBack_ProtoModID stSendAllResGetBack_ProtoModID_ProtoModID_MAX = stSendAllResGetBack_ProtoModID_ModID;
const int stSendAllResGetBack_ProtoModID_ProtoModID_ARRAYSIZE = stSendAllResGetBack_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendAllResGetBack_ProtoModID_descriptor();
inline const ::std::string& stSendAllResGetBack_ProtoModID_Name(stSendAllResGetBack_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendAllResGetBack_ProtoModID_descriptor(), value);
}
inline bool stSendAllResGetBack_ProtoModID_Parse(
    const ::std::string& name, stSendAllResGetBack_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendAllResGetBack_ProtoModID>(
    stSendAllResGetBack_ProtoModID_descriptor(), name, value);
}
enum stSendAllResGetBack_ProtoFunID {
  stSendAllResGetBack_ProtoFunID_FunID = 224
};
bool stSendAllResGetBack_ProtoFunID_IsValid(int value);
const stSendAllResGetBack_ProtoFunID stSendAllResGetBack_ProtoFunID_ProtoFunID_MIN = stSendAllResGetBack_ProtoFunID_FunID;
const stSendAllResGetBack_ProtoFunID stSendAllResGetBack_ProtoFunID_ProtoFunID_MAX = stSendAllResGetBack_ProtoFunID_FunID;
const int stSendAllResGetBack_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendAllResGetBack_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendAllResGetBack_ProtoFunID_descriptor();
inline const ::std::string& stSendAllResGetBack_ProtoFunID_Name(stSendAllResGetBack_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendAllResGetBack_ProtoFunID_descriptor(), value);
}
inline bool stSendAllResGetBack_ProtoFunID_Parse(
    const ::std::string& name, stSendAllResGetBack_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendAllResGetBack_ProtoFunID>(
    stSendAllResGetBack_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawResGetBack_ProtoModID {
  stReqDrawResGetBack_ProtoModID_ModID = 8
};
bool stReqDrawResGetBack_ProtoModID_IsValid(int value);
const stReqDrawResGetBack_ProtoModID stReqDrawResGetBack_ProtoModID_ProtoModID_MIN = stReqDrawResGetBack_ProtoModID_ModID;
const stReqDrawResGetBack_ProtoModID stReqDrawResGetBack_ProtoModID_ProtoModID_MAX = stReqDrawResGetBack_ProtoModID_ModID;
const int stReqDrawResGetBack_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawResGetBack_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawResGetBack_ProtoModID_descriptor();
inline const ::std::string& stReqDrawResGetBack_ProtoModID_Name(stReqDrawResGetBack_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawResGetBack_ProtoModID_descriptor(), value);
}
inline bool stReqDrawResGetBack_ProtoModID_Parse(
    const ::std::string& name, stReqDrawResGetBack_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawResGetBack_ProtoModID>(
    stReqDrawResGetBack_ProtoModID_descriptor(), name, value);
}
enum stReqDrawResGetBack_ProtoFunID {
  stReqDrawResGetBack_ProtoFunID_FunID = 225
};
bool stReqDrawResGetBack_ProtoFunID_IsValid(int value);
const stReqDrawResGetBack_ProtoFunID stReqDrawResGetBack_ProtoFunID_ProtoFunID_MIN = stReqDrawResGetBack_ProtoFunID_FunID;
const stReqDrawResGetBack_ProtoFunID stReqDrawResGetBack_ProtoFunID_ProtoFunID_MAX = stReqDrawResGetBack_ProtoFunID_FunID;
const int stReqDrawResGetBack_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawResGetBack_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawResGetBack_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawResGetBack_ProtoFunID_Name(stReqDrawResGetBack_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawResGetBack_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawResGetBack_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawResGetBack_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawResGetBack_ProtoFunID>(
    stReqDrawResGetBack_ProtoFunID_descriptor(), name, value);
}
enum stRetDrawResGetBack_eResult {
  stRetDrawResGetBack_eResult_eSuccess = 1,
  stRetDrawResGetBack_eResult_eAlread_Draw = 2,
  stRetDrawResGetBack_eResult_eNo_Such_Type = 3,
  stRetDrawResGetBack_eResult_eDiamond_Not_Enough = 4,
  stRetDrawResGetBack_eResult_eTimes_Not_Enough = 5
};
bool stRetDrawResGetBack_eResult_IsValid(int value);
const stRetDrawResGetBack_eResult stRetDrawResGetBack_eResult_eResult_MIN = stRetDrawResGetBack_eResult_eSuccess;
const stRetDrawResGetBack_eResult stRetDrawResGetBack_eResult_eResult_MAX = stRetDrawResGetBack_eResult_eTimes_Not_Enough;
const int stRetDrawResGetBack_eResult_eResult_ARRAYSIZE = stRetDrawResGetBack_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawResGetBack_eResult_descriptor();
inline const ::std::string& stRetDrawResGetBack_eResult_Name(stRetDrawResGetBack_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawResGetBack_eResult_descriptor(), value);
}
inline bool stRetDrawResGetBack_eResult_Parse(
    const ::std::string& name, stRetDrawResGetBack_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawResGetBack_eResult>(
    stRetDrawResGetBack_eResult_descriptor(), name, value);
}
enum stRetDrawResGetBack_ProtoModID {
  stRetDrawResGetBack_ProtoModID_ModID = 8
};
bool stRetDrawResGetBack_ProtoModID_IsValid(int value);
const stRetDrawResGetBack_ProtoModID stRetDrawResGetBack_ProtoModID_ProtoModID_MIN = stRetDrawResGetBack_ProtoModID_ModID;
const stRetDrawResGetBack_ProtoModID stRetDrawResGetBack_ProtoModID_ProtoModID_MAX = stRetDrawResGetBack_ProtoModID_ModID;
const int stRetDrawResGetBack_ProtoModID_ProtoModID_ARRAYSIZE = stRetDrawResGetBack_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawResGetBack_ProtoModID_descriptor();
inline const ::std::string& stRetDrawResGetBack_ProtoModID_Name(stRetDrawResGetBack_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawResGetBack_ProtoModID_descriptor(), value);
}
inline bool stRetDrawResGetBack_ProtoModID_Parse(
    const ::std::string& name, stRetDrawResGetBack_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawResGetBack_ProtoModID>(
    stRetDrawResGetBack_ProtoModID_descriptor(), name, value);
}
enum stRetDrawResGetBack_ProtoFunID {
  stRetDrawResGetBack_ProtoFunID_FunID = 226
};
bool stRetDrawResGetBack_ProtoFunID_IsValid(int value);
const stRetDrawResGetBack_ProtoFunID stRetDrawResGetBack_ProtoFunID_ProtoFunID_MIN = stRetDrawResGetBack_ProtoFunID_FunID;
const stRetDrawResGetBack_ProtoFunID stRetDrawResGetBack_ProtoFunID_ProtoFunID_MAX = stRetDrawResGetBack_ProtoFunID_FunID;
const int stRetDrawResGetBack_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDrawResGetBack_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawResGetBack_ProtoFunID_descriptor();
inline const ::std::string& stRetDrawResGetBack_ProtoFunID_Name(stRetDrawResGetBack_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawResGetBack_ProtoFunID_descriptor(), value);
}
inline bool stRetDrawResGetBack_ProtoFunID_Parse(
    const ::std::string& name, stRetDrawResGetBack_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawResGetBack_ProtoFunID>(
    stRetDrawResGetBack_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawAllResGetBack_ProtoModID {
  stReqDrawAllResGetBack_ProtoModID_ModID = 8
};
bool stReqDrawAllResGetBack_ProtoModID_IsValid(int value);
const stReqDrawAllResGetBack_ProtoModID stReqDrawAllResGetBack_ProtoModID_ProtoModID_MIN = stReqDrawAllResGetBack_ProtoModID_ModID;
const stReqDrawAllResGetBack_ProtoModID stReqDrawAllResGetBack_ProtoModID_ProtoModID_MAX = stReqDrawAllResGetBack_ProtoModID_ModID;
const int stReqDrawAllResGetBack_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawAllResGetBack_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawAllResGetBack_ProtoModID_descriptor();
inline const ::std::string& stReqDrawAllResGetBack_ProtoModID_Name(stReqDrawAllResGetBack_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawAllResGetBack_ProtoModID_descriptor(), value);
}
inline bool stReqDrawAllResGetBack_ProtoModID_Parse(
    const ::std::string& name, stReqDrawAllResGetBack_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawAllResGetBack_ProtoModID>(
    stReqDrawAllResGetBack_ProtoModID_descriptor(), name, value);
}
enum stReqDrawAllResGetBack_ProtoFunID {
  stReqDrawAllResGetBack_ProtoFunID_FunID = 227
};
bool stReqDrawAllResGetBack_ProtoFunID_IsValid(int value);
const stReqDrawAllResGetBack_ProtoFunID stReqDrawAllResGetBack_ProtoFunID_ProtoFunID_MIN = stReqDrawAllResGetBack_ProtoFunID_FunID;
const stReqDrawAllResGetBack_ProtoFunID stReqDrawAllResGetBack_ProtoFunID_ProtoFunID_MAX = stReqDrawAllResGetBack_ProtoFunID_FunID;
const int stReqDrawAllResGetBack_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawAllResGetBack_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawAllResGetBack_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawAllResGetBack_ProtoFunID_Name(stReqDrawAllResGetBack_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawAllResGetBack_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawAllResGetBack_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawAllResGetBack_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawAllResGetBack_ProtoFunID>(
    stReqDrawAllResGetBack_ProtoFunID_descriptor(), name, value);
}
enum stRetDrawAllResGetBack_eResult {
  stRetDrawAllResGetBack_eResult_eSuccess = 1,
  stRetDrawAllResGetBack_eResult_eNo_Res_Back = 2,
  stRetDrawAllResGetBack_eResult_eDiamond_Not_Enough = 3
};
bool stRetDrawAllResGetBack_eResult_IsValid(int value);
const stRetDrawAllResGetBack_eResult stRetDrawAllResGetBack_eResult_eResult_MIN = stRetDrawAllResGetBack_eResult_eSuccess;
const stRetDrawAllResGetBack_eResult stRetDrawAllResGetBack_eResult_eResult_MAX = stRetDrawAllResGetBack_eResult_eDiamond_Not_Enough;
const int stRetDrawAllResGetBack_eResult_eResult_ARRAYSIZE = stRetDrawAllResGetBack_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawAllResGetBack_eResult_descriptor();
inline const ::std::string& stRetDrawAllResGetBack_eResult_Name(stRetDrawAllResGetBack_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawAllResGetBack_eResult_descriptor(), value);
}
inline bool stRetDrawAllResGetBack_eResult_Parse(
    const ::std::string& name, stRetDrawAllResGetBack_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawAllResGetBack_eResult>(
    stRetDrawAllResGetBack_eResult_descriptor(), name, value);
}
enum stRetDrawAllResGetBack_ProtoModID {
  stRetDrawAllResGetBack_ProtoModID_ModID = 8
};
bool stRetDrawAllResGetBack_ProtoModID_IsValid(int value);
const stRetDrawAllResGetBack_ProtoModID stRetDrawAllResGetBack_ProtoModID_ProtoModID_MIN = stRetDrawAllResGetBack_ProtoModID_ModID;
const stRetDrawAllResGetBack_ProtoModID stRetDrawAllResGetBack_ProtoModID_ProtoModID_MAX = stRetDrawAllResGetBack_ProtoModID_ModID;
const int stRetDrawAllResGetBack_ProtoModID_ProtoModID_ARRAYSIZE = stRetDrawAllResGetBack_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawAllResGetBack_ProtoModID_descriptor();
inline const ::std::string& stRetDrawAllResGetBack_ProtoModID_Name(stRetDrawAllResGetBack_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawAllResGetBack_ProtoModID_descriptor(), value);
}
inline bool stRetDrawAllResGetBack_ProtoModID_Parse(
    const ::std::string& name, stRetDrawAllResGetBack_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawAllResGetBack_ProtoModID>(
    stRetDrawAllResGetBack_ProtoModID_descriptor(), name, value);
}
enum stRetDrawAllResGetBack_ProtoFunID {
  stRetDrawAllResGetBack_ProtoFunID_FunID = 228
};
bool stRetDrawAllResGetBack_ProtoFunID_IsValid(int value);
const stRetDrawAllResGetBack_ProtoFunID stRetDrawAllResGetBack_ProtoFunID_ProtoFunID_MIN = stRetDrawAllResGetBack_ProtoFunID_FunID;
const stRetDrawAllResGetBack_ProtoFunID stRetDrawAllResGetBack_ProtoFunID_ProtoFunID_MAX = stRetDrawAllResGetBack_ProtoFunID_FunID;
const int stRetDrawAllResGetBack_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDrawAllResGetBack_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawAllResGetBack_ProtoFunID_descriptor();
inline const ::std::string& stRetDrawAllResGetBack_ProtoFunID_Name(stRetDrawAllResGetBack_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawAllResGetBack_ProtoFunID_descriptor(), value);
}
inline bool stRetDrawAllResGetBack_ProtoFunID_Parse(
    const ::std::string& name, stRetDrawAllResGetBack_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawAllResGetBack_ProtoFunID>(
    stRetDrawAllResGetBack_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenMonsterWindow_ProtoModID {
  stReqOpenMonsterWindow_ProtoModID_ModID = 8
};
bool stReqOpenMonsterWindow_ProtoModID_IsValid(int value);
const stReqOpenMonsterWindow_ProtoModID stReqOpenMonsterWindow_ProtoModID_ProtoModID_MIN = stReqOpenMonsterWindow_ProtoModID_ModID;
const stReqOpenMonsterWindow_ProtoModID stReqOpenMonsterWindow_ProtoModID_ProtoModID_MAX = stReqOpenMonsterWindow_ProtoModID_ModID;
const int stReqOpenMonsterWindow_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenMonsterWindow_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenMonsterWindow_ProtoModID_descriptor();
inline const ::std::string& stReqOpenMonsterWindow_ProtoModID_Name(stReqOpenMonsterWindow_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenMonsterWindow_ProtoModID_descriptor(), value);
}
inline bool stReqOpenMonsterWindow_ProtoModID_Parse(
    const ::std::string& name, stReqOpenMonsterWindow_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenMonsterWindow_ProtoModID>(
    stReqOpenMonsterWindow_ProtoModID_descriptor(), name, value);
}
enum stReqOpenMonsterWindow_ProtoFunID {
  stReqOpenMonsterWindow_ProtoFunID_FunID = 229
};
bool stReqOpenMonsterWindow_ProtoFunID_IsValid(int value);
const stReqOpenMonsterWindow_ProtoFunID stReqOpenMonsterWindow_ProtoFunID_ProtoFunID_MIN = stReqOpenMonsterWindow_ProtoFunID_FunID;
const stReqOpenMonsterWindow_ProtoFunID stReqOpenMonsterWindow_ProtoFunID_ProtoFunID_MAX = stReqOpenMonsterWindow_ProtoFunID_FunID;
const int stReqOpenMonsterWindow_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenMonsterWindow_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenMonsterWindow_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenMonsterWindow_ProtoFunID_Name(stReqOpenMonsterWindow_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenMonsterWindow_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenMonsterWindow_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenMonsterWindow_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenMonsterWindow_ProtoFunID>(
    stReqOpenMonsterWindow_ProtoFunID_descriptor(), name, value);
}
enum stOpenMonsterWindowResult_ProtoModID {
  stOpenMonsterWindowResult_ProtoModID_ModID = 8
};
bool stOpenMonsterWindowResult_ProtoModID_IsValid(int value);
const stOpenMonsterWindowResult_ProtoModID stOpenMonsterWindowResult_ProtoModID_ProtoModID_MIN = stOpenMonsterWindowResult_ProtoModID_ModID;
const stOpenMonsterWindowResult_ProtoModID stOpenMonsterWindowResult_ProtoModID_ProtoModID_MAX = stOpenMonsterWindowResult_ProtoModID_ModID;
const int stOpenMonsterWindowResult_ProtoModID_ProtoModID_ARRAYSIZE = stOpenMonsterWindowResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenMonsterWindowResult_ProtoModID_descriptor();
inline const ::std::string& stOpenMonsterWindowResult_ProtoModID_Name(stOpenMonsterWindowResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenMonsterWindowResult_ProtoModID_descriptor(), value);
}
inline bool stOpenMonsterWindowResult_ProtoModID_Parse(
    const ::std::string& name, stOpenMonsterWindowResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenMonsterWindowResult_ProtoModID>(
    stOpenMonsterWindowResult_ProtoModID_descriptor(), name, value);
}
enum stOpenMonsterWindowResult_ProtoFunID {
  stOpenMonsterWindowResult_ProtoFunID_FunID = 230
};
bool stOpenMonsterWindowResult_ProtoFunID_IsValid(int value);
const stOpenMonsterWindowResult_ProtoFunID stOpenMonsterWindowResult_ProtoFunID_ProtoFunID_MIN = stOpenMonsterWindowResult_ProtoFunID_FunID;
const stOpenMonsterWindowResult_ProtoFunID stOpenMonsterWindowResult_ProtoFunID_ProtoFunID_MAX = stOpenMonsterWindowResult_ProtoFunID_FunID;
const int stOpenMonsterWindowResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stOpenMonsterWindowResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenMonsterWindowResult_ProtoFunID_descriptor();
inline const ::std::string& stOpenMonsterWindowResult_ProtoFunID_Name(stOpenMonsterWindowResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenMonsterWindowResult_ProtoFunID_descriptor(), value);
}
inline bool stOpenMonsterWindowResult_ProtoFunID_Parse(
    const ::std::string& name, stOpenMonsterWindowResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenMonsterWindowResult_ProtoFunID>(
    stOpenMonsterWindowResult_ProtoFunID_descriptor(), name, value);
}
enum stReqAttackMonster_ProtoModID {
  stReqAttackMonster_ProtoModID_ModID = 8
};
bool stReqAttackMonster_ProtoModID_IsValid(int value);
const stReqAttackMonster_ProtoModID stReqAttackMonster_ProtoModID_ProtoModID_MIN = stReqAttackMonster_ProtoModID_ModID;
const stReqAttackMonster_ProtoModID stReqAttackMonster_ProtoModID_ProtoModID_MAX = stReqAttackMonster_ProtoModID_ModID;
const int stReqAttackMonster_ProtoModID_ProtoModID_ARRAYSIZE = stReqAttackMonster_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAttackMonster_ProtoModID_descriptor();
inline const ::std::string& stReqAttackMonster_ProtoModID_Name(stReqAttackMonster_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAttackMonster_ProtoModID_descriptor(), value);
}
inline bool stReqAttackMonster_ProtoModID_Parse(
    const ::std::string& name, stReqAttackMonster_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAttackMonster_ProtoModID>(
    stReqAttackMonster_ProtoModID_descriptor(), name, value);
}
enum stReqAttackMonster_ProtoFunID {
  stReqAttackMonster_ProtoFunID_FunID = 231
};
bool stReqAttackMonster_ProtoFunID_IsValid(int value);
const stReqAttackMonster_ProtoFunID stReqAttackMonster_ProtoFunID_ProtoFunID_MIN = stReqAttackMonster_ProtoFunID_FunID;
const stReqAttackMonster_ProtoFunID stReqAttackMonster_ProtoFunID_ProtoFunID_MAX = stReqAttackMonster_ProtoFunID_FunID;
const int stReqAttackMonster_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAttackMonster_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAttackMonster_ProtoFunID_descriptor();
inline const ::std::string& stReqAttackMonster_ProtoFunID_Name(stReqAttackMonster_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAttackMonster_ProtoFunID_descriptor(), value);
}
inline bool stReqAttackMonster_ProtoFunID_Parse(
    const ::std::string& name, stReqAttackMonster_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAttackMonster_ProtoFunID>(
    stReqAttackMonster_ProtoFunID_descriptor(), name, value);
}
enum stAttackMonsterResult_eResult {
  stAttackMonsterResult_eResult_eSuccess = 1,
  stAttackMonsterResult_eResult_eInner_Error = 2,
  stAttackMonsterResult_eResult_eTime_Out = 3
};
bool stAttackMonsterResult_eResult_IsValid(int value);
const stAttackMonsterResult_eResult stAttackMonsterResult_eResult_eResult_MIN = stAttackMonsterResult_eResult_eSuccess;
const stAttackMonsterResult_eResult stAttackMonsterResult_eResult_eResult_MAX = stAttackMonsterResult_eResult_eTime_Out;
const int stAttackMonsterResult_eResult_eResult_ARRAYSIZE = stAttackMonsterResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAttackMonsterResult_eResult_descriptor();
inline const ::std::string& stAttackMonsterResult_eResult_Name(stAttackMonsterResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAttackMonsterResult_eResult_descriptor(), value);
}
inline bool stAttackMonsterResult_eResult_Parse(
    const ::std::string& name, stAttackMonsterResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAttackMonsterResult_eResult>(
    stAttackMonsterResult_eResult_descriptor(), name, value);
}
enum stAttackMonsterResult_ProtoModID {
  stAttackMonsterResult_ProtoModID_ModID = 8
};
bool stAttackMonsterResult_ProtoModID_IsValid(int value);
const stAttackMonsterResult_ProtoModID stAttackMonsterResult_ProtoModID_ProtoModID_MIN = stAttackMonsterResult_ProtoModID_ModID;
const stAttackMonsterResult_ProtoModID stAttackMonsterResult_ProtoModID_ProtoModID_MAX = stAttackMonsterResult_ProtoModID_ModID;
const int stAttackMonsterResult_ProtoModID_ProtoModID_ARRAYSIZE = stAttackMonsterResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAttackMonsterResult_ProtoModID_descriptor();
inline const ::std::string& stAttackMonsterResult_ProtoModID_Name(stAttackMonsterResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAttackMonsterResult_ProtoModID_descriptor(), value);
}
inline bool stAttackMonsterResult_ProtoModID_Parse(
    const ::std::string& name, stAttackMonsterResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAttackMonsterResult_ProtoModID>(
    stAttackMonsterResult_ProtoModID_descriptor(), name, value);
}
enum stAttackMonsterResult_ProtoFunID {
  stAttackMonsterResult_ProtoFunID_FunID = 232
};
bool stAttackMonsterResult_ProtoFunID_IsValid(int value);
const stAttackMonsterResult_ProtoFunID stAttackMonsterResult_ProtoFunID_ProtoFunID_MIN = stAttackMonsterResult_ProtoFunID_FunID;
const stAttackMonsterResult_ProtoFunID stAttackMonsterResult_ProtoFunID_ProtoFunID_MAX = stAttackMonsterResult_ProtoFunID_FunID;
const int stAttackMonsterResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stAttackMonsterResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAttackMonsterResult_ProtoFunID_descriptor();
inline const ::std::string& stAttackMonsterResult_ProtoFunID_Name(stAttackMonsterResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAttackMonsterResult_ProtoFunID_descriptor(), value);
}
inline bool stAttackMonsterResult_ProtoFunID_Parse(
    const ::std::string& name, stAttackMonsterResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAttackMonsterResult_ProtoFunID>(
    stAttackMonsterResult_ProtoFunID_descriptor(), name, value);
}
enum stReqBuyAttackTime_ProtoModID {
  stReqBuyAttackTime_ProtoModID_ModID = 8
};
bool stReqBuyAttackTime_ProtoModID_IsValid(int value);
const stReqBuyAttackTime_ProtoModID stReqBuyAttackTime_ProtoModID_ProtoModID_MIN = stReqBuyAttackTime_ProtoModID_ModID;
const stReqBuyAttackTime_ProtoModID stReqBuyAttackTime_ProtoModID_ProtoModID_MAX = stReqBuyAttackTime_ProtoModID_ModID;
const int stReqBuyAttackTime_ProtoModID_ProtoModID_ARRAYSIZE = stReqBuyAttackTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyAttackTime_ProtoModID_descriptor();
inline const ::std::string& stReqBuyAttackTime_ProtoModID_Name(stReqBuyAttackTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyAttackTime_ProtoModID_descriptor(), value);
}
inline bool stReqBuyAttackTime_ProtoModID_Parse(
    const ::std::string& name, stReqBuyAttackTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyAttackTime_ProtoModID>(
    stReqBuyAttackTime_ProtoModID_descriptor(), name, value);
}
enum stReqBuyAttackTime_ProtoFunID {
  stReqBuyAttackTime_ProtoFunID_FunID = 233
};
bool stReqBuyAttackTime_ProtoFunID_IsValid(int value);
const stReqBuyAttackTime_ProtoFunID stReqBuyAttackTime_ProtoFunID_ProtoFunID_MIN = stReqBuyAttackTime_ProtoFunID_FunID;
const stReqBuyAttackTime_ProtoFunID stReqBuyAttackTime_ProtoFunID_ProtoFunID_MAX = stReqBuyAttackTime_ProtoFunID_FunID;
const int stReqBuyAttackTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBuyAttackTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyAttackTime_ProtoFunID_descriptor();
inline const ::std::string& stReqBuyAttackTime_ProtoFunID_Name(stReqBuyAttackTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyAttackTime_ProtoFunID_descriptor(), value);
}
inline bool stReqBuyAttackTime_ProtoFunID_Parse(
    const ::std::string& name, stReqBuyAttackTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyAttackTime_ProtoFunID>(
    stReqBuyAttackTime_ProtoFunID_descriptor(), name, value);
}
enum stBuyAttackTimeResult_eResult {
  stBuyAttackTimeResult_eResult_eSuccess = 1,
  stBuyAttackTimeResult_eResult_eInner_Error = 2,
  stBuyAttackTimeResult_eResult_eDiamond_Not_Enough = 3,
  stBuyAttackTimeResult_eResult_eMax_Count = 4,
  stBuyAttackTimeResult_eResult_eItem_Not_Enough = 5
};
bool stBuyAttackTimeResult_eResult_IsValid(int value);
const stBuyAttackTimeResult_eResult stBuyAttackTimeResult_eResult_eResult_MIN = stBuyAttackTimeResult_eResult_eSuccess;
const stBuyAttackTimeResult_eResult stBuyAttackTimeResult_eResult_eResult_MAX = stBuyAttackTimeResult_eResult_eItem_Not_Enough;
const int stBuyAttackTimeResult_eResult_eResult_ARRAYSIZE = stBuyAttackTimeResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyAttackTimeResult_eResult_descriptor();
inline const ::std::string& stBuyAttackTimeResult_eResult_Name(stBuyAttackTimeResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyAttackTimeResult_eResult_descriptor(), value);
}
inline bool stBuyAttackTimeResult_eResult_Parse(
    const ::std::string& name, stBuyAttackTimeResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyAttackTimeResult_eResult>(
    stBuyAttackTimeResult_eResult_descriptor(), name, value);
}
enum stBuyAttackTimeResult_ProtoModID {
  stBuyAttackTimeResult_ProtoModID_ModID = 8
};
bool stBuyAttackTimeResult_ProtoModID_IsValid(int value);
const stBuyAttackTimeResult_ProtoModID stBuyAttackTimeResult_ProtoModID_ProtoModID_MIN = stBuyAttackTimeResult_ProtoModID_ModID;
const stBuyAttackTimeResult_ProtoModID stBuyAttackTimeResult_ProtoModID_ProtoModID_MAX = stBuyAttackTimeResult_ProtoModID_ModID;
const int stBuyAttackTimeResult_ProtoModID_ProtoModID_ARRAYSIZE = stBuyAttackTimeResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyAttackTimeResult_ProtoModID_descriptor();
inline const ::std::string& stBuyAttackTimeResult_ProtoModID_Name(stBuyAttackTimeResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyAttackTimeResult_ProtoModID_descriptor(), value);
}
inline bool stBuyAttackTimeResult_ProtoModID_Parse(
    const ::std::string& name, stBuyAttackTimeResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyAttackTimeResult_ProtoModID>(
    stBuyAttackTimeResult_ProtoModID_descriptor(), name, value);
}
enum stBuyAttackTimeResult_ProtoFunID {
  stBuyAttackTimeResult_ProtoFunID_FunID = 234
};
bool stBuyAttackTimeResult_ProtoFunID_IsValid(int value);
const stBuyAttackTimeResult_ProtoFunID stBuyAttackTimeResult_ProtoFunID_ProtoFunID_MIN = stBuyAttackTimeResult_ProtoFunID_FunID;
const stBuyAttackTimeResult_ProtoFunID stBuyAttackTimeResult_ProtoFunID_ProtoFunID_MAX = stBuyAttackTimeResult_ProtoFunID_FunID;
const int stBuyAttackTimeResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuyAttackTimeResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyAttackTimeResult_ProtoFunID_descriptor();
inline const ::std::string& stBuyAttackTimeResult_ProtoFunID_Name(stBuyAttackTimeResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyAttackTimeResult_ProtoFunID_descriptor(), value);
}
inline bool stBuyAttackTimeResult_ProtoFunID_Parse(
    const ::std::string& name, stBuyAttackTimeResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyAttackTimeResult_ProtoFunID>(
    stBuyAttackTimeResult_ProtoFunID_descriptor(), name, value);
}
enum stReqAKeyAttackMonster_ProtoModID {
  stReqAKeyAttackMonster_ProtoModID_ModID = 8
};
bool stReqAKeyAttackMonster_ProtoModID_IsValid(int value);
const stReqAKeyAttackMonster_ProtoModID stReqAKeyAttackMonster_ProtoModID_ProtoModID_MIN = stReqAKeyAttackMonster_ProtoModID_ModID;
const stReqAKeyAttackMonster_ProtoModID stReqAKeyAttackMonster_ProtoModID_ProtoModID_MAX = stReqAKeyAttackMonster_ProtoModID_ModID;
const int stReqAKeyAttackMonster_ProtoModID_ProtoModID_ARRAYSIZE = stReqAKeyAttackMonster_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAKeyAttackMonster_ProtoModID_descriptor();
inline const ::std::string& stReqAKeyAttackMonster_ProtoModID_Name(stReqAKeyAttackMonster_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAKeyAttackMonster_ProtoModID_descriptor(), value);
}
inline bool stReqAKeyAttackMonster_ProtoModID_Parse(
    const ::std::string& name, stReqAKeyAttackMonster_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAKeyAttackMonster_ProtoModID>(
    stReqAKeyAttackMonster_ProtoModID_descriptor(), name, value);
}
enum stReqAKeyAttackMonster_ProtoFunID {
  stReqAKeyAttackMonster_ProtoFunID_FunID = 235
};
bool stReqAKeyAttackMonster_ProtoFunID_IsValid(int value);
const stReqAKeyAttackMonster_ProtoFunID stReqAKeyAttackMonster_ProtoFunID_ProtoFunID_MIN = stReqAKeyAttackMonster_ProtoFunID_FunID;
const stReqAKeyAttackMonster_ProtoFunID stReqAKeyAttackMonster_ProtoFunID_ProtoFunID_MAX = stReqAKeyAttackMonster_ProtoFunID_FunID;
const int stReqAKeyAttackMonster_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAKeyAttackMonster_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAKeyAttackMonster_ProtoFunID_descriptor();
inline const ::std::string& stReqAKeyAttackMonster_ProtoFunID_Name(stReqAKeyAttackMonster_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAKeyAttackMonster_ProtoFunID_descriptor(), value);
}
inline bool stReqAKeyAttackMonster_ProtoFunID_Parse(
    const ::std::string& name, stReqAKeyAttackMonster_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAKeyAttackMonster_ProtoFunID>(
    stReqAKeyAttackMonster_ProtoFunID_descriptor(), name, value);
}
enum stAKeyAttackMonsterResult_eResult {
  stAKeyAttackMonsterResult_eResult_eSuccess = 1,
  stAKeyAttackMonsterResult_eResult_eInner_Error = 2,
  stAKeyAttackMonsterResult_eResult_eTime_Out = 3,
  stAKeyAttackMonsterResult_eResult_eVip_Lv_Too_Low = 4
};
bool stAKeyAttackMonsterResult_eResult_IsValid(int value);
const stAKeyAttackMonsterResult_eResult stAKeyAttackMonsterResult_eResult_eResult_MIN = stAKeyAttackMonsterResult_eResult_eSuccess;
const stAKeyAttackMonsterResult_eResult stAKeyAttackMonsterResult_eResult_eResult_MAX = stAKeyAttackMonsterResult_eResult_eVip_Lv_Too_Low;
const int stAKeyAttackMonsterResult_eResult_eResult_ARRAYSIZE = stAKeyAttackMonsterResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAKeyAttackMonsterResult_eResult_descriptor();
inline const ::std::string& stAKeyAttackMonsterResult_eResult_Name(stAKeyAttackMonsterResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAKeyAttackMonsterResult_eResult_descriptor(), value);
}
inline bool stAKeyAttackMonsterResult_eResult_Parse(
    const ::std::string& name, stAKeyAttackMonsterResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAKeyAttackMonsterResult_eResult>(
    stAKeyAttackMonsterResult_eResult_descriptor(), name, value);
}
enum stAKeyAttackMonsterResult_ProtoModID {
  stAKeyAttackMonsterResult_ProtoModID_ModID = 8
};
bool stAKeyAttackMonsterResult_ProtoModID_IsValid(int value);
const stAKeyAttackMonsterResult_ProtoModID stAKeyAttackMonsterResult_ProtoModID_ProtoModID_MIN = stAKeyAttackMonsterResult_ProtoModID_ModID;
const stAKeyAttackMonsterResult_ProtoModID stAKeyAttackMonsterResult_ProtoModID_ProtoModID_MAX = stAKeyAttackMonsterResult_ProtoModID_ModID;
const int stAKeyAttackMonsterResult_ProtoModID_ProtoModID_ARRAYSIZE = stAKeyAttackMonsterResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAKeyAttackMonsterResult_ProtoModID_descriptor();
inline const ::std::string& stAKeyAttackMonsterResult_ProtoModID_Name(stAKeyAttackMonsterResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAKeyAttackMonsterResult_ProtoModID_descriptor(), value);
}
inline bool stAKeyAttackMonsterResult_ProtoModID_Parse(
    const ::std::string& name, stAKeyAttackMonsterResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAKeyAttackMonsterResult_ProtoModID>(
    stAKeyAttackMonsterResult_ProtoModID_descriptor(), name, value);
}
enum stAKeyAttackMonsterResult_ProtoFunID {
  stAKeyAttackMonsterResult_ProtoFunID_FunID = 236
};
bool stAKeyAttackMonsterResult_ProtoFunID_IsValid(int value);
const stAKeyAttackMonsterResult_ProtoFunID stAKeyAttackMonsterResult_ProtoFunID_ProtoFunID_MIN = stAKeyAttackMonsterResult_ProtoFunID_FunID;
const stAKeyAttackMonsterResult_ProtoFunID stAKeyAttackMonsterResult_ProtoFunID_ProtoFunID_MAX = stAKeyAttackMonsterResult_ProtoFunID_FunID;
const int stAKeyAttackMonsterResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stAKeyAttackMonsterResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAKeyAttackMonsterResult_ProtoFunID_descriptor();
inline const ::std::string& stAKeyAttackMonsterResult_ProtoFunID_Name(stAKeyAttackMonsterResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAKeyAttackMonsterResult_ProtoFunID_descriptor(), value);
}
inline bool stAKeyAttackMonsterResult_ProtoFunID_Parse(
    const ::std::string& name, stAKeyAttackMonsterResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAKeyAttackMonsterResult_ProtoFunID>(
    stAKeyAttackMonsterResult_ProtoFunID_descriptor(), name, value);
}
enum stObtainItemTip_ProtoModID {
  stObtainItemTip_ProtoModID_ModID = 8
};
bool stObtainItemTip_ProtoModID_IsValid(int value);
const stObtainItemTip_ProtoModID stObtainItemTip_ProtoModID_ProtoModID_MIN = stObtainItemTip_ProtoModID_ModID;
const stObtainItemTip_ProtoModID stObtainItemTip_ProtoModID_ProtoModID_MAX = stObtainItemTip_ProtoModID_ModID;
const int stObtainItemTip_ProtoModID_ProtoModID_ARRAYSIZE = stObtainItemTip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stObtainItemTip_ProtoModID_descriptor();
inline const ::std::string& stObtainItemTip_ProtoModID_Name(stObtainItemTip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stObtainItemTip_ProtoModID_descriptor(), value);
}
inline bool stObtainItemTip_ProtoModID_Parse(
    const ::std::string& name, stObtainItemTip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stObtainItemTip_ProtoModID>(
    stObtainItemTip_ProtoModID_descriptor(), name, value);
}
enum stObtainItemTip_ProtoFunID {
  stObtainItemTip_ProtoFunID_FunID = 237
};
bool stObtainItemTip_ProtoFunID_IsValid(int value);
const stObtainItemTip_ProtoFunID stObtainItemTip_ProtoFunID_ProtoFunID_MIN = stObtainItemTip_ProtoFunID_FunID;
const stObtainItemTip_ProtoFunID stObtainItemTip_ProtoFunID_ProtoFunID_MAX = stObtainItemTip_ProtoFunID_FunID;
const int stObtainItemTip_ProtoFunID_ProtoFunID_ARRAYSIZE = stObtainItemTip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stObtainItemTip_ProtoFunID_descriptor();
inline const ::std::string& stObtainItemTip_ProtoFunID_Name(stObtainItemTip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stObtainItemTip_ProtoFunID_descriptor(), value);
}
inline bool stObtainItemTip_ProtoFunID_Parse(
    const ::std::string& name, stObtainItemTip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stObtainItemTip_ProtoFunID>(
    stObtainItemTip_ProtoFunID_descriptor(), name, value);
}
enum stUserOnline_ProtoModID {
  stUserOnline_ProtoModID_ModID = 8
};
bool stUserOnline_ProtoModID_IsValid(int value);
const stUserOnline_ProtoModID stUserOnline_ProtoModID_ProtoModID_MIN = stUserOnline_ProtoModID_ModID;
const stUserOnline_ProtoModID stUserOnline_ProtoModID_ProtoModID_MAX = stUserOnline_ProtoModID_ModID;
const int stUserOnline_ProtoModID_ProtoModID_ARRAYSIZE = stUserOnline_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserOnline_ProtoModID_descriptor();
inline const ::std::string& stUserOnline_ProtoModID_Name(stUserOnline_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserOnline_ProtoModID_descriptor(), value);
}
inline bool stUserOnline_ProtoModID_Parse(
    const ::std::string& name, stUserOnline_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserOnline_ProtoModID>(
    stUserOnline_ProtoModID_descriptor(), name, value);
}
enum stUserOnline_ProtoFunID {
  stUserOnline_ProtoFunID_FunID = 238
};
bool stUserOnline_ProtoFunID_IsValid(int value);
const stUserOnline_ProtoFunID stUserOnline_ProtoFunID_ProtoFunID_MIN = stUserOnline_ProtoFunID_FunID;
const stUserOnline_ProtoFunID stUserOnline_ProtoFunID_ProtoFunID_MAX = stUserOnline_ProtoFunID_FunID;
const int stUserOnline_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserOnline_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserOnline_ProtoFunID_descriptor();
inline const ::std::string& stUserOnline_ProtoFunID_Name(stUserOnline_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserOnline_ProtoFunID_descriptor(), value);
}
inline bool stUserOnline_ProtoFunID_Parse(
    const ::std::string& name, stUserOnline_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserOnline_ProtoFunID>(
    stUserOnline_ProtoFunID_descriptor(), name, value);
}
enum stReqMountLevelUp_ProtoModID {
  stReqMountLevelUp_ProtoModID_ModID = 8
};
bool stReqMountLevelUp_ProtoModID_IsValid(int value);
const stReqMountLevelUp_ProtoModID stReqMountLevelUp_ProtoModID_ProtoModID_MIN = stReqMountLevelUp_ProtoModID_ModID;
const stReqMountLevelUp_ProtoModID stReqMountLevelUp_ProtoModID_ProtoModID_MAX = stReqMountLevelUp_ProtoModID_ModID;
const int stReqMountLevelUp_ProtoModID_ProtoModID_ARRAYSIZE = stReqMountLevelUp_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMountLevelUp_ProtoModID_descriptor();
inline const ::std::string& stReqMountLevelUp_ProtoModID_Name(stReqMountLevelUp_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMountLevelUp_ProtoModID_descriptor(), value);
}
inline bool stReqMountLevelUp_ProtoModID_Parse(
    const ::std::string& name, stReqMountLevelUp_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMountLevelUp_ProtoModID>(
    stReqMountLevelUp_ProtoModID_descriptor(), name, value);
}
enum stReqMountLevelUp_ProtoFunID {
  stReqMountLevelUp_ProtoFunID_FunID = 239
};
bool stReqMountLevelUp_ProtoFunID_IsValid(int value);
const stReqMountLevelUp_ProtoFunID stReqMountLevelUp_ProtoFunID_ProtoFunID_MIN = stReqMountLevelUp_ProtoFunID_FunID;
const stReqMountLevelUp_ProtoFunID stReqMountLevelUp_ProtoFunID_ProtoFunID_MAX = stReqMountLevelUp_ProtoFunID_FunID;
const int stReqMountLevelUp_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqMountLevelUp_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMountLevelUp_ProtoFunID_descriptor();
inline const ::std::string& stReqMountLevelUp_ProtoFunID_Name(stReqMountLevelUp_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMountLevelUp_ProtoFunID_descriptor(), value);
}
inline bool stReqMountLevelUp_ProtoFunID_Parse(
    const ::std::string& name, stReqMountLevelUp_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMountLevelUp_ProtoFunID>(
    stReqMountLevelUp_ProtoFunID_descriptor(), name, value);
}
enum stMountLevelUpResult_eResult {
  stMountLevelUpResult_eResult_eSuccess = 1,
  stMountLevelUpResult_eResult_eInner_Error = 2,
  stMountLevelUpResult_eResult_eMax_Level = 3,
  stMountLevelUpResult_eResult_eRes_Not_Enough = 4,
  stMountLevelUpResult_eResult_eStar_max = 5
};
bool stMountLevelUpResult_eResult_IsValid(int value);
const stMountLevelUpResult_eResult stMountLevelUpResult_eResult_eResult_MIN = stMountLevelUpResult_eResult_eSuccess;
const stMountLevelUpResult_eResult stMountLevelUpResult_eResult_eResult_MAX = stMountLevelUpResult_eResult_eStar_max;
const int stMountLevelUpResult_eResult_eResult_ARRAYSIZE = stMountLevelUpResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMountLevelUpResult_eResult_descriptor();
inline const ::std::string& stMountLevelUpResult_eResult_Name(stMountLevelUpResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMountLevelUpResult_eResult_descriptor(), value);
}
inline bool stMountLevelUpResult_eResult_Parse(
    const ::std::string& name, stMountLevelUpResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMountLevelUpResult_eResult>(
    stMountLevelUpResult_eResult_descriptor(), name, value);
}
enum stMountLevelUpResult_ProtoModID {
  stMountLevelUpResult_ProtoModID_ModID = 8
};
bool stMountLevelUpResult_ProtoModID_IsValid(int value);
const stMountLevelUpResult_ProtoModID stMountLevelUpResult_ProtoModID_ProtoModID_MIN = stMountLevelUpResult_ProtoModID_ModID;
const stMountLevelUpResult_ProtoModID stMountLevelUpResult_ProtoModID_ProtoModID_MAX = stMountLevelUpResult_ProtoModID_ModID;
const int stMountLevelUpResult_ProtoModID_ProtoModID_ARRAYSIZE = stMountLevelUpResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMountLevelUpResult_ProtoModID_descriptor();
inline const ::std::string& stMountLevelUpResult_ProtoModID_Name(stMountLevelUpResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMountLevelUpResult_ProtoModID_descriptor(), value);
}
inline bool stMountLevelUpResult_ProtoModID_Parse(
    const ::std::string& name, stMountLevelUpResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMountLevelUpResult_ProtoModID>(
    stMountLevelUpResult_ProtoModID_descriptor(), name, value);
}
enum stMountLevelUpResult_ProtoFunID {
  stMountLevelUpResult_ProtoFunID_FunID = 240
};
bool stMountLevelUpResult_ProtoFunID_IsValid(int value);
const stMountLevelUpResult_ProtoFunID stMountLevelUpResult_ProtoFunID_ProtoFunID_MIN = stMountLevelUpResult_ProtoFunID_FunID;
const stMountLevelUpResult_ProtoFunID stMountLevelUpResult_ProtoFunID_ProtoFunID_MAX = stMountLevelUpResult_ProtoFunID_FunID;
const int stMountLevelUpResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stMountLevelUpResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMountLevelUpResult_ProtoFunID_descriptor();
inline const ::std::string& stMountLevelUpResult_ProtoFunID_Name(stMountLevelUpResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMountLevelUpResult_ProtoFunID_descriptor(), value);
}
inline bool stMountLevelUpResult_ProtoFunID_Parse(
    const ::std::string& name, stMountLevelUpResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMountLevelUpResult_ProtoFunID>(
    stMountLevelUpResult_ProtoFunID_descriptor(), name, value);
}
enum stReqButtleMount_ProtoModID {
  stReqButtleMount_ProtoModID_ModID = 8
};
bool stReqButtleMount_ProtoModID_IsValid(int value);
const stReqButtleMount_ProtoModID stReqButtleMount_ProtoModID_ProtoModID_MIN = stReqButtleMount_ProtoModID_ModID;
const stReqButtleMount_ProtoModID stReqButtleMount_ProtoModID_ProtoModID_MAX = stReqButtleMount_ProtoModID_ModID;
const int stReqButtleMount_ProtoModID_ProtoModID_ARRAYSIZE = stReqButtleMount_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqButtleMount_ProtoModID_descriptor();
inline const ::std::string& stReqButtleMount_ProtoModID_Name(stReqButtleMount_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqButtleMount_ProtoModID_descriptor(), value);
}
inline bool stReqButtleMount_ProtoModID_Parse(
    const ::std::string& name, stReqButtleMount_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqButtleMount_ProtoModID>(
    stReqButtleMount_ProtoModID_descriptor(), name, value);
}
enum stReqButtleMount_ProtoFunID {
  stReqButtleMount_ProtoFunID_FunID = 241
};
bool stReqButtleMount_ProtoFunID_IsValid(int value);
const stReqButtleMount_ProtoFunID stReqButtleMount_ProtoFunID_ProtoFunID_MIN = stReqButtleMount_ProtoFunID_FunID;
const stReqButtleMount_ProtoFunID stReqButtleMount_ProtoFunID_ProtoFunID_MAX = stReqButtleMount_ProtoFunID_FunID;
const int stReqButtleMount_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqButtleMount_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqButtleMount_ProtoFunID_descriptor();
inline const ::std::string& stReqButtleMount_ProtoFunID_Name(stReqButtleMount_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqButtleMount_ProtoFunID_descriptor(), value);
}
inline bool stReqButtleMount_ProtoFunID_Parse(
    const ::std::string& name, stReqButtleMount_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqButtleMount_ProtoFunID>(
    stReqButtleMount_ProtoFunID_descriptor(), name, value);
}
enum stButtleMountResult_eResult {
  stButtleMountResult_eResult_eSuccess = 1,
  stButtleMountResult_eResult_eInner_Error = 2,
  stButtleMountResult_eResult_eIs_Not_Unlock = 3,
  stButtleMountResult_eResult_eHas_Battle = 4
};
bool stButtleMountResult_eResult_IsValid(int value);
const stButtleMountResult_eResult stButtleMountResult_eResult_eResult_MIN = stButtleMountResult_eResult_eSuccess;
const stButtleMountResult_eResult stButtleMountResult_eResult_eResult_MAX = stButtleMountResult_eResult_eHas_Battle;
const int stButtleMountResult_eResult_eResult_ARRAYSIZE = stButtleMountResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stButtleMountResult_eResult_descriptor();
inline const ::std::string& stButtleMountResult_eResult_Name(stButtleMountResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stButtleMountResult_eResult_descriptor(), value);
}
inline bool stButtleMountResult_eResult_Parse(
    const ::std::string& name, stButtleMountResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stButtleMountResult_eResult>(
    stButtleMountResult_eResult_descriptor(), name, value);
}
enum stButtleMountResult_ProtoModID {
  stButtleMountResult_ProtoModID_ModID = 8
};
bool stButtleMountResult_ProtoModID_IsValid(int value);
const stButtleMountResult_ProtoModID stButtleMountResult_ProtoModID_ProtoModID_MIN = stButtleMountResult_ProtoModID_ModID;
const stButtleMountResult_ProtoModID stButtleMountResult_ProtoModID_ProtoModID_MAX = stButtleMountResult_ProtoModID_ModID;
const int stButtleMountResult_ProtoModID_ProtoModID_ARRAYSIZE = stButtleMountResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stButtleMountResult_ProtoModID_descriptor();
inline const ::std::string& stButtleMountResult_ProtoModID_Name(stButtleMountResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stButtleMountResult_ProtoModID_descriptor(), value);
}
inline bool stButtleMountResult_ProtoModID_Parse(
    const ::std::string& name, stButtleMountResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stButtleMountResult_ProtoModID>(
    stButtleMountResult_ProtoModID_descriptor(), name, value);
}
enum stButtleMountResult_ProtoFunID {
  stButtleMountResult_ProtoFunID_FunID = 242
};
bool stButtleMountResult_ProtoFunID_IsValid(int value);
const stButtleMountResult_ProtoFunID stButtleMountResult_ProtoFunID_ProtoFunID_MIN = stButtleMountResult_ProtoFunID_FunID;
const stButtleMountResult_ProtoFunID stButtleMountResult_ProtoFunID_ProtoFunID_MAX = stButtleMountResult_ProtoFunID_FunID;
const int stButtleMountResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stButtleMountResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stButtleMountResult_ProtoFunID_descriptor();
inline const ::std::string& stButtleMountResult_ProtoFunID_Name(stButtleMountResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stButtleMountResult_ProtoFunID_descriptor(), value);
}
inline bool stButtleMountResult_ProtoFunID_Parse(
    const ::std::string& name, stButtleMountResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stButtleMountResult_ProtoFunID>(
    stButtleMountResult_ProtoFunID_descriptor(), name, value);
}
enum stReqMountFollow_ProtoModID {
  stReqMountFollow_ProtoModID_ModID = 8
};
bool stReqMountFollow_ProtoModID_IsValid(int value);
const stReqMountFollow_ProtoModID stReqMountFollow_ProtoModID_ProtoModID_MIN = stReqMountFollow_ProtoModID_ModID;
const stReqMountFollow_ProtoModID stReqMountFollow_ProtoModID_ProtoModID_MAX = stReqMountFollow_ProtoModID_ModID;
const int stReqMountFollow_ProtoModID_ProtoModID_ARRAYSIZE = stReqMountFollow_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMountFollow_ProtoModID_descriptor();
inline const ::std::string& stReqMountFollow_ProtoModID_Name(stReqMountFollow_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMountFollow_ProtoModID_descriptor(), value);
}
inline bool stReqMountFollow_ProtoModID_Parse(
    const ::std::string& name, stReqMountFollow_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMountFollow_ProtoModID>(
    stReqMountFollow_ProtoModID_descriptor(), name, value);
}
enum stReqMountFollow_ProtoFunID {
  stReqMountFollow_ProtoFunID_FunID = 243
};
bool stReqMountFollow_ProtoFunID_IsValid(int value);
const stReqMountFollow_ProtoFunID stReqMountFollow_ProtoFunID_ProtoFunID_MIN = stReqMountFollow_ProtoFunID_FunID;
const stReqMountFollow_ProtoFunID stReqMountFollow_ProtoFunID_ProtoFunID_MAX = stReqMountFollow_ProtoFunID_FunID;
const int stReqMountFollow_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqMountFollow_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMountFollow_ProtoFunID_descriptor();
inline const ::std::string& stReqMountFollow_ProtoFunID_Name(stReqMountFollow_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMountFollow_ProtoFunID_descriptor(), value);
}
inline bool stReqMountFollow_ProtoFunID_Parse(
    const ::std::string& name, stReqMountFollow_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMountFollow_ProtoFunID>(
    stReqMountFollow_ProtoFunID_descriptor(), name, value);
}
enum stMountFollowResult_eResult {
  stMountFollowResult_eResult_eSuccess = 1,
  stMountFollowResult_eResult_eInner_Error = 2,
  stMountFollowResult_eResult_eIs_Not_Battle = 3
};
bool stMountFollowResult_eResult_IsValid(int value);
const stMountFollowResult_eResult stMountFollowResult_eResult_eResult_MIN = stMountFollowResult_eResult_eSuccess;
const stMountFollowResult_eResult stMountFollowResult_eResult_eResult_MAX = stMountFollowResult_eResult_eIs_Not_Battle;
const int stMountFollowResult_eResult_eResult_ARRAYSIZE = stMountFollowResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMountFollowResult_eResult_descriptor();
inline const ::std::string& stMountFollowResult_eResult_Name(stMountFollowResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMountFollowResult_eResult_descriptor(), value);
}
inline bool stMountFollowResult_eResult_Parse(
    const ::std::string& name, stMountFollowResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMountFollowResult_eResult>(
    stMountFollowResult_eResult_descriptor(), name, value);
}
enum stMountFollowResult_ProtoModID {
  stMountFollowResult_ProtoModID_ModID = 8
};
bool stMountFollowResult_ProtoModID_IsValid(int value);
const stMountFollowResult_ProtoModID stMountFollowResult_ProtoModID_ProtoModID_MIN = stMountFollowResult_ProtoModID_ModID;
const stMountFollowResult_ProtoModID stMountFollowResult_ProtoModID_ProtoModID_MAX = stMountFollowResult_ProtoModID_ModID;
const int stMountFollowResult_ProtoModID_ProtoModID_ARRAYSIZE = stMountFollowResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMountFollowResult_ProtoModID_descriptor();
inline const ::std::string& stMountFollowResult_ProtoModID_Name(stMountFollowResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMountFollowResult_ProtoModID_descriptor(), value);
}
inline bool stMountFollowResult_ProtoModID_Parse(
    const ::std::string& name, stMountFollowResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMountFollowResult_ProtoModID>(
    stMountFollowResult_ProtoModID_descriptor(), name, value);
}
enum stMountFollowResult_ProtoFunID {
  stMountFollowResult_ProtoFunID_FunID = 244
};
bool stMountFollowResult_ProtoFunID_IsValid(int value);
const stMountFollowResult_ProtoFunID stMountFollowResult_ProtoFunID_ProtoFunID_MIN = stMountFollowResult_ProtoFunID_FunID;
const stMountFollowResult_ProtoFunID stMountFollowResult_ProtoFunID_ProtoFunID_MAX = stMountFollowResult_ProtoFunID_FunID;
const int stMountFollowResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stMountFollowResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMountFollowResult_ProtoFunID_descriptor();
inline const ::std::string& stMountFollowResult_ProtoFunID_Name(stMountFollowResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMountFollowResult_ProtoFunID_descriptor(), value);
}
inline bool stMountFollowResult_ProtoFunID_Parse(
    const ::std::string& name, stMountFollowResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMountFollowResult_ProtoFunID>(
    stMountFollowResult_ProtoFunID_descriptor(), name, value);
}
enum stReqMountUnreal_ProtoModID {
  stReqMountUnreal_ProtoModID_ModID = 8
};
bool stReqMountUnreal_ProtoModID_IsValid(int value);
const stReqMountUnreal_ProtoModID stReqMountUnreal_ProtoModID_ProtoModID_MIN = stReqMountUnreal_ProtoModID_ModID;
const stReqMountUnreal_ProtoModID stReqMountUnreal_ProtoModID_ProtoModID_MAX = stReqMountUnreal_ProtoModID_ModID;
const int stReqMountUnreal_ProtoModID_ProtoModID_ARRAYSIZE = stReqMountUnreal_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMountUnreal_ProtoModID_descriptor();
inline const ::std::string& stReqMountUnreal_ProtoModID_Name(stReqMountUnreal_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMountUnreal_ProtoModID_descriptor(), value);
}
inline bool stReqMountUnreal_ProtoModID_Parse(
    const ::std::string& name, stReqMountUnreal_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMountUnreal_ProtoModID>(
    stReqMountUnreal_ProtoModID_descriptor(), name, value);
}
enum stReqMountUnreal_ProtoFunID {
  stReqMountUnreal_ProtoFunID_FunID = 245
};
bool stReqMountUnreal_ProtoFunID_IsValid(int value);
const stReqMountUnreal_ProtoFunID stReqMountUnreal_ProtoFunID_ProtoFunID_MIN = stReqMountUnreal_ProtoFunID_FunID;
const stReqMountUnreal_ProtoFunID stReqMountUnreal_ProtoFunID_ProtoFunID_MAX = stReqMountUnreal_ProtoFunID_FunID;
const int stReqMountUnreal_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqMountUnreal_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMountUnreal_ProtoFunID_descriptor();
inline const ::std::string& stReqMountUnreal_ProtoFunID_Name(stReqMountUnreal_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMountUnreal_ProtoFunID_descriptor(), value);
}
inline bool stReqMountUnreal_ProtoFunID_Parse(
    const ::std::string& name, stReqMountUnreal_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMountUnreal_ProtoFunID>(
    stReqMountUnreal_ProtoFunID_descriptor(), name, value);
}
enum stMountUnrealResult_eResult {
  stMountUnrealResult_eResult_eSuccess = 1,
  stMountUnrealResult_eResult_eInner_Error = 2,
  stMountUnrealResult_eResult_eCond_Not_Meet = 3,
  stMountUnrealResult_eResult_eRes_Not_Enough = 4,
  stMountUnrealResult_eResult_eMax_Unreal = 5
};
bool stMountUnrealResult_eResult_IsValid(int value);
const stMountUnrealResult_eResult stMountUnrealResult_eResult_eResult_MIN = stMountUnrealResult_eResult_eSuccess;
const stMountUnrealResult_eResult stMountUnrealResult_eResult_eResult_MAX = stMountUnrealResult_eResult_eMax_Unreal;
const int stMountUnrealResult_eResult_eResult_ARRAYSIZE = stMountUnrealResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMountUnrealResult_eResult_descriptor();
inline const ::std::string& stMountUnrealResult_eResult_Name(stMountUnrealResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMountUnrealResult_eResult_descriptor(), value);
}
inline bool stMountUnrealResult_eResult_Parse(
    const ::std::string& name, stMountUnrealResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMountUnrealResult_eResult>(
    stMountUnrealResult_eResult_descriptor(), name, value);
}
enum stMountUnrealResult_ProtoModID {
  stMountUnrealResult_ProtoModID_ModID = 8
};
bool stMountUnrealResult_ProtoModID_IsValid(int value);
const stMountUnrealResult_ProtoModID stMountUnrealResult_ProtoModID_ProtoModID_MIN = stMountUnrealResult_ProtoModID_ModID;
const stMountUnrealResult_ProtoModID stMountUnrealResult_ProtoModID_ProtoModID_MAX = stMountUnrealResult_ProtoModID_ModID;
const int stMountUnrealResult_ProtoModID_ProtoModID_ARRAYSIZE = stMountUnrealResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMountUnrealResult_ProtoModID_descriptor();
inline const ::std::string& stMountUnrealResult_ProtoModID_Name(stMountUnrealResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMountUnrealResult_ProtoModID_descriptor(), value);
}
inline bool stMountUnrealResult_ProtoModID_Parse(
    const ::std::string& name, stMountUnrealResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMountUnrealResult_ProtoModID>(
    stMountUnrealResult_ProtoModID_descriptor(), name, value);
}
enum stMountUnrealResult_ProtoFunID {
  stMountUnrealResult_ProtoFunID_FunID = 246
};
bool stMountUnrealResult_ProtoFunID_IsValid(int value);
const stMountUnrealResult_ProtoFunID stMountUnrealResult_ProtoFunID_ProtoFunID_MIN = stMountUnrealResult_ProtoFunID_FunID;
const stMountUnrealResult_ProtoFunID stMountUnrealResult_ProtoFunID_ProtoFunID_MAX = stMountUnrealResult_ProtoFunID_FunID;
const int stMountUnrealResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stMountUnrealResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMountUnrealResult_ProtoFunID_descriptor();
inline const ::std::string& stMountUnrealResult_ProtoFunID_Name(stMountUnrealResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMountUnrealResult_ProtoFunID_descriptor(), value);
}
inline bool stMountUnrealResult_ProtoFunID_Parse(
    const ::std::string& name, stMountUnrealResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMountUnrealResult_ProtoFunID>(
    stMountUnrealResult_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenMountGrowWindow_ProtoModID {
  stReqOpenMountGrowWindow_ProtoModID_ModID = 8
};
bool stReqOpenMountGrowWindow_ProtoModID_IsValid(int value);
const stReqOpenMountGrowWindow_ProtoModID stReqOpenMountGrowWindow_ProtoModID_ProtoModID_MIN = stReqOpenMountGrowWindow_ProtoModID_ModID;
const stReqOpenMountGrowWindow_ProtoModID stReqOpenMountGrowWindow_ProtoModID_ProtoModID_MAX = stReqOpenMountGrowWindow_ProtoModID_ModID;
const int stReqOpenMountGrowWindow_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenMountGrowWindow_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenMountGrowWindow_ProtoModID_descriptor();
inline const ::std::string& stReqOpenMountGrowWindow_ProtoModID_Name(stReqOpenMountGrowWindow_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenMountGrowWindow_ProtoModID_descriptor(), value);
}
inline bool stReqOpenMountGrowWindow_ProtoModID_Parse(
    const ::std::string& name, stReqOpenMountGrowWindow_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenMountGrowWindow_ProtoModID>(
    stReqOpenMountGrowWindow_ProtoModID_descriptor(), name, value);
}
enum stReqOpenMountGrowWindow_ProtoFunID {
  stReqOpenMountGrowWindow_ProtoFunID_FunID = 247
};
bool stReqOpenMountGrowWindow_ProtoFunID_IsValid(int value);
const stReqOpenMountGrowWindow_ProtoFunID stReqOpenMountGrowWindow_ProtoFunID_ProtoFunID_MIN = stReqOpenMountGrowWindow_ProtoFunID_FunID;
const stReqOpenMountGrowWindow_ProtoFunID stReqOpenMountGrowWindow_ProtoFunID_ProtoFunID_MAX = stReqOpenMountGrowWindow_ProtoFunID_FunID;
const int stReqOpenMountGrowWindow_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenMountGrowWindow_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenMountGrowWindow_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenMountGrowWindow_ProtoFunID_Name(stReqOpenMountGrowWindow_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenMountGrowWindow_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenMountGrowWindow_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenMountGrowWindow_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenMountGrowWindow_ProtoFunID>(
    stReqOpenMountGrowWindow_ProtoFunID_descriptor(), name, value);
}
enum stOpenMountGrowWindowResult_ProtoModID {
  stOpenMountGrowWindowResult_ProtoModID_ModID = 8
};
bool stOpenMountGrowWindowResult_ProtoModID_IsValid(int value);
const stOpenMountGrowWindowResult_ProtoModID stOpenMountGrowWindowResult_ProtoModID_ProtoModID_MIN = stOpenMountGrowWindowResult_ProtoModID_ModID;
const stOpenMountGrowWindowResult_ProtoModID stOpenMountGrowWindowResult_ProtoModID_ProtoModID_MAX = stOpenMountGrowWindowResult_ProtoModID_ModID;
const int stOpenMountGrowWindowResult_ProtoModID_ProtoModID_ARRAYSIZE = stOpenMountGrowWindowResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenMountGrowWindowResult_ProtoModID_descriptor();
inline const ::std::string& stOpenMountGrowWindowResult_ProtoModID_Name(stOpenMountGrowWindowResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenMountGrowWindowResult_ProtoModID_descriptor(), value);
}
inline bool stOpenMountGrowWindowResult_ProtoModID_Parse(
    const ::std::string& name, stOpenMountGrowWindowResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenMountGrowWindowResult_ProtoModID>(
    stOpenMountGrowWindowResult_ProtoModID_descriptor(), name, value);
}
enum stOpenMountGrowWindowResult_ProtoFunID {
  stOpenMountGrowWindowResult_ProtoFunID_FunID = 248
};
bool stOpenMountGrowWindowResult_ProtoFunID_IsValid(int value);
const stOpenMountGrowWindowResult_ProtoFunID stOpenMountGrowWindowResult_ProtoFunID_ProtoFunID_MIN = stOpenMountGrowWindowResult_ProtoFunID_FunID;
const stOpenMountGrowWindowResult_ProtoFunID stOpenMountGrowWindowResult_ProtoFunID_ProtoFunID_MAX = stOpenMountGrowWindowResult_ProtoFunID_FunID;
const int stOpenMountGrowWindowResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stOpenMountGrowWindowResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenMountGrowWindowResult_ProtoFunID_descriptor();
inline const ::std::string& stOpenMountGrowWindowResult_ProtoFunID_Name(stOpenMountGrowWindowResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenMountGrowWindowResult_ProtoFunID_descriptor(), value);
}
inline bool stOpenMountGrowWindowResult_ProtoFunID_Parse(
    const ::std::string& name, stOpenMountGrowWindowResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenMountGrowWindowResult_ProtoFunID>(
    stOpenMountGrowWindowResult_ProtoFunID_descriptor(), name, value);
}
enum stRefreshBattle_ProtoModID {
  stRefreshBattle_ProtoModID_ModID = 8
};
bool stRefreshBattle_ProtoModID_IsValid(int value);
const stRefreshBattle_ProtoModID stRefreshBattle_ProtoModID_ProtoModID_MIN = stRefreshBattle_ProtoModID_ModID;
const stRefreshBattle_ProtoModID stRefreshBattle_ProtoModID_ProtoModID_MAX = stRefreshBattle_ProtoModID_ModID;
const int stRefreshBattle_ProtoModID_ProtoModID_ARRAYSIZE = stRefreshBattle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshBattle_ProtoModID_descriptor();
inline const ::std::string& stRefreshBattle_ProtoModID_Name(stRefreshBattle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshBattle_ProtoModID_descriptor(), value);
}
inline bool stRefreshBattle_ProtoModID_Parse(
    const ::std::string& name, stRefreshBattle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshBattle_ProtoModID>(
    stRefreshBattle_ProtoModID_descriptor(), name, value);
}
enum stRefreshBattle_ProtoFunID {
  stRefreshBattle_ProtoFunID_FunID = 249
};
bool stRefreshBattle_ProtoFunID_IsValid(int value);
const stRefreshBattle_ProtoFunID stRefreshBattle_ProtoFunID_ProtoFunID_MIN = stRefreshBattle_ProtoFunID_FunID;
const stRefreshBattle_ProtoFunID stRefreshBattle_ProtoFunID_ProtoFunID_MAX = stRefreshBattle_ProtoFunID_FunID;
const int stRefreshBattle_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefreshBattle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshBattle_ProtoFunID_descriptor();
inline const ::std::string& stRefreshBattle_ProtoFunID_Name(stRefreshBattle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshBattle_ProtoFunID_descriptor(), value);
}
inline bool stRefreshBattle_ProtoFunID_Parse(
    const ::std::string& name, stRefreshBattle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshBattle_ProtoFunID>(
    stRefreshBattle_ProtoFunID_descriptor(), name, value);
}
enum stHasGotRewardWflfareInfo_ProtoModID {
  stHasGotRewardWflfareInfo_ProtoModID_ModID = 8
};
bool stHasGotRewardWflfareInfo_ProtoModID_IsValid(int value);
const stHasGotRewardWflfareInfo_ProtoModID stHasGotRewardWflfareInfo_ProtoModID_ProtoModID_MIN = stHasGotRewardWflfareInfo_ProtoModID_ModID;
const stHasGotRewardWflfareInfo_ProtoModID stHasGotRewardWflfareInfo_ProtoModID_ProtoModID_MAX = stHasGotRewardWflfareInfo_ProtoModID_ModID;
const int stHasGotRewardWflfareInfo_ProtoModID_ProtoModID_ARRAYSIZE = stHasGotRewardWflfareInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHasGotRewardWflfareInfo_ProtoModID_descriptor();
inline const ::std::string& stHasGotRewardWflfareInfo_ProtoModID_Name(stHasGotRewardWflfareInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHasGotRewardWflfareInfo_ProtoModID_descriptor(), value);
}
inline bool stHasGotRewardWflfareInfo_ProtoModID_Parse(
    const ::std::string& name, stHasGotRewardWflfareInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHasGotRewardWflfareInfo_ProtoModID>(
    stHasGotRewardWflfareInfo_ProtoModID_descriptor(), name, value);
}
enum stHasGotRewardWflfareInfo_ProtoFunID {
  stHasGotRewardWflfareInfo_ProtoFunID_FunID = 250
};
bool stHasGotRewardWflfareInfo_ProtoFunID_IsValid(int value);
const stHasGotRewardWflfareInfo_ProtoFunID stHasGotRewardWflfareInfo_ProtoFunID_ProtoFunID_MIN = stHasGotRewardWflfareInfo_ProtoFunID_FunID;
const stHasGotRewardWflfareInfo_ProtoFunID stHasGotRewardWflfareInfo_ProtoFunID_ProtoFunID_MAX = stHasGotRewardWflfareInfo_ProtoFunID_FunID;
const int stHasGotRewardWflfareInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stHasGotRewardWflfareInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHasGotRewardWflfareInfo_ProtoFunID_descriptor();
inline const ::std::string& stHasGotRewardWflfareInfo_ProtoFunID_Name(stHasGotRewardWflfareInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHasGotRewardWflfareInfo_ProtoFunID_descriptor(), value);
}
inline bool stHasGotRewardWflfareInfo_ProtoFunID_Parse(
    const ::std::string& name, stHasGotRewardWflfareInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHasGotRewardWflfareInfo_ProtoFunID>(
    stHasGotRewardWflfareInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqReceiveWflfare_ProtoModID {
  stReqReceiveWflfare_ProtoModID_ModID = 8
};
bool stReqReceiveWflfare_ProtoModID_IsValid(int value);
const stReqReceiveWflfare_ProtoModID stReqReceiveWflfare_ProtoModID_ProtoModID_MIN = stReqReceiveWflfare_ProtoModID_ModID;
const stReqReceiveWflfare_ProtoModID stReqReceiveWflfare_ProtoModID_ProtoModID_MAX = stReqReceiveWflfare_ProtoModID_ModID;
const int stReqReceiveWflfare_ProtoModID_ProtoModID_ARRAYSIZE = stReqReceiveWflfare_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReceiveWflfare_ProtoModID_descriptor();
inline const ::std::string& stReqReceiveWflfare_ProtoModID_Name(stReqReceiveWflfare_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReceiveWflfare_ProtoModID_descriptor(), value);
}
inline bool stReqReceiveWflfare_ProtoModID_Parse(
    const ::std::string& name, stReqReceiveWflfare_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReceiveWflfare_ProtoModID>(
    stReqReceiveWflfare_ProtoModID_descriptor(), name, value);
}
enum stReqReceiveWflfare_ProtoFunID {
  stReqReceiveWflfare_ProtoFunID_FunID = 251
};
bool stReqReceiveWflfare_ProtoFunID_IsValid(int value);
const stReqReceiveWflfare_ProtoFunID stReqReceiveWflfare_ProtoFunID_ProtoFunID_MIN = stReqReceiveWflfare_ProtoFunID_FunID;
const stReqReceiveWflfare_ProtoFunID stReqReceiveWflfare_ProtoFunID_ProtoFunID_MAX = stReqReceiveWflfare_ProtoFunID_FunID;
const int stReqReceiveWflfare_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqReceiveWflfare_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReceiveWflfare_ProtoFunID_descriptor();
inline const ::std::string& stReqReceiveWflfare_ProtoFunID_Name(stReqReceiveWflfare_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReceiveWflfare_ProtoFunID_descriptor(), value);
}
inline bool stReqReceiveWflfare_ProtoFunID_Parse(
    const ::std::string& name, stReqReceiveWflfare_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReceiveWflfare_ProtoFunID>(
    stReqReceiveWflfare_ProtoFunID_descriptor(), name, value);
}
enum stReceiveWflfareResult_eResult {
  stReceiveWflfareResult_eResult_eSuccess = 1,
  stReceiveWflfareResult_eResult_eInner_Error = 2,
  stReceiveWflfareResult_eResult_eHas_Got_Reward = 3,
  stReceiveWflfareResult_eResult_eDiamond_Not_Enough = 4,
  stReceiveWflfareResult_eResult_eLevel_Too_Low = 5
};
bool stReceiveWflfareResult_eResult_IsValid(int value);
const stReceiveWflfareResult_eResult stReceiveWflfareResult_eResult_eResult_MIN = stReceiveWflfareResult_eResult_eSuccess;
const stReceiveWflfareResult_eResult stReceiveWflfareResult_eResult_eResult_MAX = stReceiveWflfareResult_eResult_eLevel_Too_Low;
const int stReceiveWflfareResult_eResult_eResult_ARRAYSIZE = stReceiveWflfareResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReceiveWflfareResult_eResult_descriptor();
inline const ::std::string& stReceiveWflfareResult_eResult_Name(stReceiveWflfareResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReceiveWflfareResult_eResult_descriptor(), value);
}
inline bool stReceiveWflfareResult_eResult_Parse(
    const ::std::string& name, stReceiveWflfareResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReceiveWflfareResult_eResult>(
    stReceiveWflfareResult_eResult_descriptor(), name, value);
}
enum stReceiveWflfareResult_ProtoModID {
  stReceiveWflfareResult_ProtoModID_ModID = 8
};
bool stReceiveWflfareResult_ProtoModID_IsValid(int value);
const stReceiveWflfareResult_ProtoModID stReceiveWflfareResult_ProtoModID_ProtoModID_MIN = stReceiveWflfareResult_ProtoModID_ModID;
const stReceiveWflfareResult_ProtoModID stReceiveWflfareResult_ProtoModID_ProtoModID_MAX = stReceiveWflfareResult_ProtoModID_ModID;
const int stReceiveWflfareResult_ProtoModID_ProtoModID_ARRAYSIZE = stReceiveWflfareResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReceiveWflfareResult_ProtoModID_descriptor();
inline const ::std::string& stReceiveWflfareResult_ProtoModID_Name(stReceiveWflfareResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReceiveWflfareResult_ProtoModID_descriptor(), value);
}
inline bool stReceiveWflfareResult_ProtoModID_Parse(
    const ::std::string& name, stReceiveWflfareResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReceiveWflfareResult_ProtoModID>(
    stReceiveWflfareResult_ProtoModID_descriptor(), name, value);
}
enum stReceiveWflfareResult_ProtoFunID {
  stReceiveWflfareResult_ProtoFunID_FunID = 252
};
bool stReceiveWflfareResult_ProtoFunID_IsValid(int value);
const stReceiveWflfareResult_ProtoFunID stReceiveWflfareResult_ProtoFunID_ProtoFunID_MIN = stReceiveWflfareResult_ProtoFunID_FunID;
const stReceiveWflfareResult_ProtoFunID stReceiveWflfareResult_ProtoFunID_ProtoFunID_MAX = stReceiveWflfareResult_ProtoFunID_FunID;
const int stReceiveWflfareResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stReceiveWflfareResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReceiveWflfareResult_ProtoFunID_descriptor();
inline const ::std::string& stReceiveWflfareResult_ProtoFunID_Name(stReceiveWflfareResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReceiveWflfareResult_ProtoFunID_descriptor(), value);
}
inline bool stReceiveWflfareResult_ProtoFunID_Parse(
    const ::std::string& name, stReceiveWflfareResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReceiveWflfareResult_ProtoFunID>(
    stReceiveWflfareResult_ProtoFunID_descriptor(), name, value);
}
enum stReqPaySign_ProtoModID {
  stReqPaySign_ProtoModID_ModID = 8
};
bool stReqPaySign_ProtoModID_IsValid(int value);
const stReqPaySign_ProtoModID stReqPaySign_ProtoModID_ProtoModID_MIN = stReqPaySign_ProtoModID_ModID;
const stReqPaySign_ProtoModID stReqPaySign_ProtoModID_ProtoModID_MAX = stReqPaySign_ProtoModID_ModID;
const int stReqPaySign_ProtoModID_ProtoModID_ARRAYSIZE = stReqPaySign_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPaySign_ProtoModID_descriptor();
inline const ::std::string& stReqPaySign_ProtoModID_Name(stReqPaySign_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPaySign_ProtoModID_descriptor(), value);
}
inline bool stReqPaySign_ProtoModID_Parse(
    const ::std::string& name, stReqPaySign_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPaySign_ProtoModID>(
    stReqPaySign_ProtoModID_descriptor(), name, value);
}
enum stReqPaySign_ProtoFunID {
  stReqPaySign_ProtoFunID_FunID = 253
};
bool stReqPaySign_ProtoFunID_IsValid(int value);
const stReqPaySign_ProtoFunID stReqPaySign_ProtoFunID_ProtoFunID_MIN = stReqPaySign_ProtoFunID_FunID;
const stReqPaySign_ProtoFunID stReqPaySign_ProtoFunID_ProtoFunID_MAX = stReqPaySign_ProtoFunID_FunID;
const int stReqPaySign_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqPaySign_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPaySign_ProtoFunID_descriptor();
inline const ::std::string& stReqPaySign_ProtoFunID_Name(stReqPaySign_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPaySign_ProtoFunID_descriptor(), value);
}
inline bool stReqPaySign_ProtoFunID_Parse(
    const ::std::string& name, stReqPaySign_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPaySign_ProtoFunID>(
    stReqPaySign_ProtoFunID_descriptor(), name, value);
}
enum stRetPaySign_ProtoModID {
  stRetPaySign_ProtoModID_ModID = 8
};
bool stRetPaySign_ProtoModID_IsValid(int value);
const stRetPaySign_ProtoModID stRetPaySign_ProtoModID_ProtoModID_MIN = stRetPaySign_ProtoModID_ModID;
const stRetPaySign_ProtoModID stRetPaySign_ProtoModID_ProtoModID_MAX = stRetPaySign_ProtoModID_ModID;
const int stRetPaySign_ProtoModID_ProtoModID_ARRAYSIZE = stRetPaySign_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetPaySign_ProtoModID_descriptor();
inline const ::std::string& stRetPaySign_ProtoModID_Name(stRetPaySign_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetPaySign_ProtoModID_descriptor(), value);
}
inline bool stRetPaySign_ProtoModID_Parse(
    const ::std::string& name, stRetPaySign_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetPaySign_ProtoModID>(
    stRetPaySign_ProtoModID_descriptor(), name, value);
}
enum stRetPaySign_ProtoFunID {
  stRetPaySign_ProtoFunID_FunID = 254
};
bool stRetPaySign_ProtoFunID_IsValid(int value);
const stRetPaySign_ProtoFunID stRetPaySign_ProtoFunID_ProtoFunID_MIN = stRetPaySign_ProtoFunID_FunID;
const stRetPaySign_ProtoFunID stRetPaySign_ProtoFunID_ProtoFunID_MAX = stRetPaySign_ProtoFunID_FunID;
const int stRetPaySign_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetPaySign_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetPaySign_ProtoFunID_descriptor();
inline const ::std::string& stRetPaySign_ProtoFunID_Name(stRetPaySign_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetPaySign_ProtoFunID_descriptor(), value);
}
inline bool stRetPaySign_ProtoFunID_Parse(
    const ::std::string& name, stRetPaySign_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetPaySign_ProtoFunID>(
    stRetPaySign_ProtoFunID_descriptor(), name, value);
}
enum stReqServerPay_ProtoModID {
  stReqServerPay_ProtoModID_ModID = 10
};
bool stReqServerPay_ProtoModID_IsValid(int value);
const stReqServerPay_ProtoModID stReqServerPay_ProtoModID_ProtoModID_MIN = stReqServerPay_ProtoModID_ModID;
const stReqServerPay_ProtoModID stReqServerPay_ProtoModID_ProtoModID_MAX = stReqServerPay_ProtoModID_ModID;
const int stReqServerPay_ProtoModID_ProtoModID_ARRAYSIZE = stReqServerPay_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqServerPay_ProtoModID_descriptor();
inline const ::std::string& stReqServerPay_ProtoModID_Name(stReqServerPay_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqServerPay_ProtoModID_descriptor(), value);
}
inline bool stReqServerPay_ProtoModID_Parse(
    const ::std::string& name, stReqServerPay_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqServerPay_ProtoModID>(
    stReqServerPay_ProtoModID_descriptor(), name, value);
}
enum stReqServerPay_ProtoFunID {
  stReqServerPay_ProtoFunID_FunID = 1
};
bool stReqServerPay_ProtoFunID_IsValid(int value);
const stReqServerPay_ProtoFunID stReqServerPay_ProtoFunID_ProtoFunID_MIN = stReqServerPay_ProtoFunID_FunID;
const stReqServerPay_ProtoFunID stReqServerPay_ProtoFunID_ProtoFunID_MAX = stReqServerPay_ProtoFunID_FunID;
const int stReqServerPay_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqServerPay_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqServerPay_ProtoFunID_descriptor();
inline const ::std::string& stReqServerPay_ProtoFunID_Name(stReqServerPay_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqServerPay_ProtoFunID_descriptor(), value);
}
inline bool stReqServerPay_ProtoFunID_Parse(
    const ::std::string& name, stReqServerPay_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqServerPay_ProtoFunID>(
    stReqServerPay_ProtoFunID_descriptor(), name, value);
}
enum stRetServerPay_eResult {
  stRetServerPay_eResult_eSuccess = 1,
  stRetServerPay_eResult_eInner_Error = 2,
  stRetServerPay_eResult_eMoney_Not_Enough = 3,
  stRetServerPay_eResult_eItem = 4,
  stRetServerPay_eResult_eMoney = 5
};
bool stRetServerPay_eResult_IsValid(int value);
const stRetServerPay_eResult stRetServerPay_eResult_eResult_MIN = stRetServerPay_eResult_eSuccess;
const stRetServerPay_eResult stRetServerPay_eResult_eResult_MAX = stRetServerPay_eResult_eMoney;
const int stRetServerPay_eResult_eResult_ARRAYSIZE = stRetServerPay_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetServerPay_eResult_descriptor();
inline const ::std::string& stRetServerPay_eResult_Name(stRetServerPay_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetServerPay_eResult_descriptor(), value);
}
inline bool stRetServerPay_eResult_Parse(
    const ::std::string& name, stRetServerPay_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetServerPay_eResult>(
    stRetServerPay_eResult_descriptor(), name, value);
}
enum stRetServerPay_ProtoModID {
  stRetServerPay_ProtoModID_ModID = 10
};
bool stRetServerPay_ProtoModID_IsValid(int value);
const stRetServerPay_ProtoModID stRetServerPay_ProtoModID_ProtoModID_MIN = stRetServerPay_ProtoModID_ModID;
const stRetServerPay_ProtoModID stRetServerPay_ProtoModID_ProtoModID_MAX = stRetServerPay_ProtoModID_ModID;
const int stRetServerPay_ProtoModID_ProtoModID_ARRAYSIZE = stRetServerPay_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetServerPay_ProtoModID_descriptor();
inline const ::std::string& stRetServerPay_ProtoModID_Name(stRetServerPay_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetServerPay_ProtoModID_descriptor(), value);
}
inline bool stRetServerPay_ProtoModID_Parse(
    const ::std::string& name, stRetServerPay_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetServerPay_ProtoModID>(
    stRetServerPay_ProtoModID_descriptor(), name, value);
}
enum stRetServerPay_ProtoFunID {
  stRetServerPay_ProtoFunID_FunID = 2
};
bool stRetServerPay_ProtoFunID_IsValid(int value);
const stRetServerPay_ProtoFunID stRetServerPay_ProtoFunID_ProtoFunID_MIN = stRetServerPay_ProtoFunID_FunID;
const stRetServerPay_ProtoFunID stRetServerPay_ProtoFunID_ProtoFunID_MAX = stRetServerPay_ProtoFunID_FunID;
const int stRetServerPay_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetServerPay_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetServerPay_ProtoFunID_descriptor();
inline const ::std::string& stRetServerPay_ProtoFunID_Name(stRetServerPay_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetServerPay_ProtoFunID_descriptor(), value);
}
inline bool stRetServerPay_ProtoFunID_Parse(
    const ::std::string& name, stRetServerPay_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetServerPay_ProtoFunID>(
    stRetServerPay_ProtoFunID_descriptor(), name, value);
}
enum stReqSummonReward_ProtoModID {
  stReqSummonReward_ProtoModID_ModID = 10
};
bool stReqSummonReward_ProtoModID_IsValid(int value);
const stReqSummonReward_ProtoModID stReqSummonReward_ProtoModID_ProtoModID_MIN = stReqSummonReward_ProtoModID_ModID;
const stReqSummonReward_ProtoModID stReqSummonReward_ProtoModID_ProtoModID_MAX = stReqSummonReward_ProtoModID_ModID;
const int stReqSummonReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqSummonReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSummonReward_ProtoModID_descriptor();
inline const ::std::string& stReqSummonReward_ProtoModID_Name(stReqSummonReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSummonReward_ProtoModID_descriptor(), value);
}
inline bool stReqSummonReward_ProtoModID_Parse(
    const ::std::string& name, stReqSummonReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSummonReward_ProtoModID>(
    stReqSummonReward_ProtoModID_descriptor(), name, value);
}
enum stReqSummonReward_ProtoFunID {
  stReqSummonReward_ProtoFunID_FunID = 3
};
bool stReqSummonReward_ProtoFunID_IsValid(int value);
const stReqSummonReward_ProtoFunID stReqSummonReward_ProtoFunID_ProtoFunID_MIN = stReqSummonReward_ProtoFunID_FunID;
const stReqSummonReward_ProtoFunID stReqSummonReward_ProtoFunID_ProtoFunID_MAX = stReqSummonReward_ProtoFunID_FunID;
const int stReqSummonReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSummonReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSummonReward_ProtoFunID_descriptor();
inline const ::std::string& stReqSummonReward_ProtoFunID_Name(stReqSummonReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSummonReward_ProtoFunID_descriptor(), value);
}
inline bool stReqSummonReward_ProtoFunID_Parse(
    const ::std::string& name, stReqSummonReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSummonReward_ProtoFunID>(
    stReqSummonReward_ProtoFunID_descriptor(), name, value);
}
enum stSummonRewardResult_eResult {
  stSummonRewardResult_eResult_eSUCCESS = 1,
  stSummonRewardResult_eResult_eHAS_GET_REWARD = 2,
  stSummonRewardResult_eResult_eHAS_NOT_BUY_INVEST_PLAN = 3,
  stSummonRewardResult_eResult_eBAG_FULL = 4,
  stSummonRewardResult_eResult_eOTHER_ERROR = 5
};
bool stSummonRewardResult_eResult_IsValid(int value);
const stSummonRewardResult_eResult stSummonRewardResult_eResult_eResult_MIN = stSummonRewardResult_eResult_eSUCCESS;
const stSummonRewardResult_eResult stSummonRewardResult_eResult_eResult_MAX = stSummonRewardResult_eResult_eOTHER_ERROR;
const int stSummonRewardResult_eResult_eResult_ARRAYSIZE = stSummonRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSummonRewardResult_eResult_descriptor();
inline const ::std::string& stSummonRewardResult_eResult_Name(stSummonRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSummonRewardResult_eResult_descriptor(), value);
}
inline bool stSummonRewardResult_eResult_Parse(
    const ::std::string& name, stSummonRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSummonRewardResult_eResult>(
    stSummonRewardResult_eResult_descriptor(), name, value);
}
enum stSummonRewardResult_ProtoModID {
  stSummonRewardResult_ProtoModID_ModID = 10
};
bool stSummonRewardResult_ProtoModID_IsValid(int value);
const stSummonRewardResult_ProtoModID stSummonRewardResult_ProtoModID_ProtoModID_MIN = stSummonRewardResult_ProtoModID_ModID;
const stSummonRewardResult_ProtoModID stSummonRewardResult_ProtoModID_ProtoModID_MAX = stSummonRewardResult_ProtoModID_ModID;
const int stSummonRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stSummonRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSummonRewardResult_ProtoModID_descriptor();
inline const ::std::string& stSummonRewardResult_ProtoModID_Name(stSummonRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSummonRewardResult_ProtoModID_descriptor(), value);
}
inline bool stSummonRewardResult_ProtoModID_Parse(
    const ::std::string& name, stSummonRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSummonRewardResult_ProtoModID>(
    stSummonRewardResult_ProtoModID_descriptor(), name, value);
}
enum stSummonRewardResult_ProtoFunID {
  stSummonRewardResult_ProtoFunID_FunID = 4
};
bool stSummonRewardResult_ProtoFunID_IsValid(int value);
const stSummonRewardResult_ProtoFunID stSummonRewardResult_ProtoFunID_ProtoFunID_MIN = stSummonRewardResult_ProtoFunID_FunID;
const stSummonRewardResult_ProtoFunID stSummonRewardResult_ProtoFunID_ProtoFunID_MAX = stSummonRewardResult_ProtoFunID_FunID;
const int stSummonRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSummonRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSummonRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stSummonRewardResult_ProtoFunID_Name(stSummonRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSummonRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stSummonRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stSummonRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSummonRewardResult_ProtoFunID>(
    stSummonRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqSummonData_ProtoModID {
  stReqSummonData_ProtoModID_ModID = 10
};
bool stReqSummonData_ProtoModID_IsValid(int value);
const stReqSummonData_ProtoModID stReqSummonData_ProtoModID_ProtoModID_MIN = stReqSummonData_ProtoModID_ModID;
const stReqSummonData_ProtoModID stReqSummonData_ProtoModID_ProtoModID_MAX = stReqSummonData_ProtoModID_ModID;
const int stReqSummonData_ProtoModID_ProtoModID_ARRAYSIZE = stReqSummonData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSummonData_ProtoModID_descriptor();
inline const ::std::string& stReqSummonData_ProtoModID_Name(stReqSummonData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSummonData_ProtoModID_descriptor(), value);
}
inline bool stReqSummonData_ProtoModID_Parse(
    const ::std::string& name, stReqSummonData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSummonData_ProtoModID>(
    stReqSummonData_ProtoModID_descriptor(), name, value);
}
enum stReqSummonData_ProtoFunID {
  stReqSummonData_ProtoFunID_FunID = 5
};
bool stReqSummonData_ProtoFunID_IsValid(int value);
const stReqSummonData_ProtoFunID stReqSummonData_ProtoFunID_ProtoFunID_MIN = stReqSummonData_ProtoFunID_FunID;
const stReqSummonData_ProtoFunID stReqSummonData_ProtoFunID_ProtoFunID_MAX = stReqSummonData_ProtoFunID_FunID;
const int stReqSummonData_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSummonData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSummonData_ProtoFunID_descriptor();
inline const ::std::string& stReqSummonData_ProtoFunID_Name(stReqSummonData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSummonData_ProtoFunID_descriptor(), value);
}
inline bool stReqSummonData_ProtoFunID_Parse(
    const ::std::string& name, stReqSummonData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSummonData_ProtoFunID>(
    stReqSummonData_ProtoFunID_descriptor(), name, value);
}
enum stSummonDataResult_ProtoModID {
  stSummonDataResult_ProtoModID_ModID = 10
};
bool stSummonDataResult_ProtoModID_IsValid(int value);
const stSummonDataResult_ProtoModID stSummonDataResult_ProtoModID_ProtoModID_MIN = stSummonDataResult_ProtoModID_ModID;
const stSummonDataResult_ProtoModID stSummonDataResult_ProtoModID_ProtoModID_MAX = stSummonDataResult_ProtoModID_ModID;
const int stSummonDataResult_ProtoModID_ProtoModID_ARRAYSIZE = stSummonDataResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSummonDataResult_ProtoModID_descriptor();
inline const ::std::string& stSummonDataResult_ProtoModID_Name(stSummonDataResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSummonDataResult_ProtoModID_descriptor(), value);
}
inline bool stSummonDataResult_ProtoModID_Parse(
    const ::std::string& name, stSummonDataResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSummonDataResult_ProtoModID>(
    stSummonDataResult_ProtoModID_descriptor(), name, value);
}
enum stSummonDataResult_ProtoFunID {
  stSummonDataResult_ProtoFunID_FunID = 6
};
bool stSummonDataResult_ProtoFunID_IsValid(int value);
const stSummonDataResult_ProtoFunID stSummonDataResult_ProtoFunID_ProtoFunID_MIN = stSummonDataResult_ProtoFunID_FunID;
const stSummonDataResult_ProtoFunID stSummonDataResult_ProtoFunID_ProtoFunID_MAX = stSummonDataResult_ProtoFunID_FunID;
const int stSummonDataResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSummonDataResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSummonDataResult_ProtoFunID_descriptor();
inline const ::std::string& stSummonDataResult_ProtoFunID_Name(stSummonDataResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSummonDataResult_ProtoFunID_descriptor(), value);
}
inline bool stSummonDataResult_ProtoFunID_Parse(
    const ::std::string& name, stSummonDataResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSummonDataResult_ProtoFunID>(
    stSummonDataResult_ProtoFunID_descriptor(), name, value);
}
enum stBuySummonPlanResult_eResult {
  stBuySummonPlanResult_eResult_eSUCCESS = 1,
  stBuySummonPlanResult_eResult_eDIAMOND_NOT_ENOGUH = 2,
  stBuySummonPlanResult_eResult_eVIP_LV_TOO_LOW = 3,
  stBuySummonPlanResult_eResult_eHAS_BUY = 4
};
bool stBuySummonPlanResult_eResult_IsValid(int value);
const stBuySummonPlanResult_eResult stBuySummonPlanResult_eResult_eResult_MIN = stBuySummonPlanResult_eResult_eSUCCESS;
const stBuySummonPlanResult_eResult stBuySummonPlanResult_eResult_eResult_MAX = stBuySummonPlanResult_eResult_eHAS_BUY;
const int stBuySummonPlanResult_eResult_eResult_ARRAYSIZE = stBuySummonPlanResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuySummonPlanResult_eResult_descriptor();
inline const ::std::string& stBuySummonPlanResult_eResult_Name(stBuySummonPlanResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuySummonPlanResult_eResult_descriptor(), value);
}
inline bool stBuySummonPlanResult_eResult_Parse(
    const ::std::string& name, stBuySummonPlanResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuySummonPlanResult_eResult>(
    stBuySummonPlanResult_eResult_descriptor(), name, value);
}
enum stBuySummonPlanResult_ProtoModID {
  stBuySummonPlanResult_ProtoModID_ModID = 10
};
bool stBuySummonPlanResult_ProtoModID_IsValid(int value);
const stBuySummonPlanResult_ProtoModID stBuySummonPlanResult_ProtoModID_ProtoModID_MIN = stBuySummonPlanResult_ProtoModID_ModID;
const stBuySummonPlanResult_ProtoModID stBuySummonPlanResult_ProtoModID_ProtoModID_MAX = stBuySummonPlanResult_ProtoModID_ModID;
const int stBuySummonPlanResult_ProtoModID_ProtoModID_ARRAYSIZE = stBuySummonPlanResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuySummonPlanResult_ProtoModID_descriptor();
inline const ::std::string& stBuySummonPlanResult_ProtoModID_Name(stBuySummonPlanResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuySummonPlanResult_ProtoModID_descriptor(), value);
}
inline bool stBuySummonPlanResult_ProtoModID_Parse(
    const ::std::string& name, stBuySummonPlanResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuySummonPlanResult_ProtoModID>(
    stBuySummonPlanResult_ProtoModID_descriptor(), name, value);
}
enum stBuySummonPlanResult_ProtoFunID {
  stBuySummonPlanResult_ProtoFunID_FunID = 7
};
bool stBuySummonPlanResult_ProtoFunID_IsValid(int value);
const stBuySummonPlanResult_ProtoFunID stBuySummonPlanResult_ProtoFunID_ProtoFunID_MIN = stBuySummonPlanResult_ProtoFunID_FunID;
const stBuySummonPlanResult_ProtoFunID stBuySummonPlanResult_ProtoFunID_ProtoFunID_MAX = stBuySummonPlanResult_ProtoFunID_FunID;
const int stBuySummonPlanResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuySummonPlanResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuySummonPlanResult_ProtoFunID_descriptor();
inline const ::std::string& stBuySummonPlanResult_ProtoFunID_Name(stBuySummonPlanResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuySummonPlanResult_ProtoFunID_descriptor(), value);
}
inline bool stBuySummonPlanResult_ProtoFunID_Parse(
    const ::std::string& name, stBuySummonPlanResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuySummonPlanResult_ProtoFunID>(
    stBuySummonPlanResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRechargeCheck_ProtoModID {
  stReqRechargeCheck_ProtoModID_ModID = 10
};
bool stReqRechargeCheck_ProtoModID_IsValid(int value);
const stReqRechargeCheck_ProtoModID stReqRechargeCheck_ProtoModID_ProtoModID_MIN = stReqRechargeCheck_ProtoModID_ModID;
const stReqRechargeCheck_ProtoModID stReqRechargeCheck_ProtoModID_ProtoModID_MAX = stReqRechargeCheck_ProtoModID_ModID;
const int stReqRechargeCheck_ProtoModID_ProtoModID_ARRAYSIZE = stReqRechargeCheck_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRechargeCheck_ProtoModID_descriptor();
inline const ::std::string& stReqRechargeCheck_ProtoModID_Name(stReqRechargeCheck_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRechargeCheck_ProtoModID_descriptor(), value);
}
inline bool stReqRechargeCheck_ProtoModID_Parse(
    const ::std::string& name, stReqRechargeCheck_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRechargeCheck_ProtoModID>(
    stReqRechargeCheck_ProtoModID_descriptor(), name, value);
}
enum stReqRechargeCheck_ProtoFunID {
  stReqRechargeCheck_ProtoFunID_FunID = 8
};
bool stReqRechargeCheck_ProtoFunID_IsValid(int value);
const stReqRechargeCheck_ProtoFunID stReqRechargeCheck_ProtoFunID_ProtoFunID_MIN = stReqRechargeCheck_ProtoFunID_FunID;
const stReqRechargeCheck_ProtoFunID stReqRechargeCheck_ProtoFunID_ProtoFunID_MAX = stReqRechargeCheck_ProtoFunID_FunID;
const int stReqRechargeCheck_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRechargeCheck_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRechargeCheck_ProtoFunID_descriptor();
inline const ::std::string& stReqRechargeCheck_ProtoFunID_Name(stReqRechargeCheck_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRechargeCheck_ProtoFunID_descriptor(), value);
}
inline bool stReqRechargeCheck_ProtoFunID_Parse(
    const ::std::string& name, stReqRechargeCheck_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRechargeCheck_ProtoFunID>(
    stReqRechargeCheck_ProtoFunID_descriptor(), name, value);
}
enum stRechargeCheckResult_eResult {
  stRechargeCheckResult_eResult_eSuccess = 1,
  stRechargeCheckResult_eResult_eBag_Full = 2,
  stRechargeCheckResult_eResult_eNo_Times = 3,
  stRechargeCheckResult_eResult_eOther_Error = 4
};
bool stRechargeCheckResult_eResult_IsValid(int value);
const stRechargeCheckResult_eResult stRechargeCheckResult_eResult_eResult_MIN = stRechargeCheckResult_eResult_eSuccess;
const stRechargeCheckResult_eResult stRechargeCheckResult_eResult_eResult_MAX = stRechargeCheckResult_eResult_eOther_Error;
const int stRechargeCheckResult_eResult_eResult_ARRAYSIZE = stRechargeCheckResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRechargeCheckResult_eResult_descriptor();
inline const ::std::string& stRechargeCheckResult_eResult_Name(stRechargeCheckResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRechargeCheckResult_eResult_descriptor(), value);
}
inline bool stRechargeCheckResult_eResult_Parse(
    const ::std::string& name, stRechargeCheckResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRechargeCheckResult_eResult>(
    stRechargeCheckResult_eResult_descriptor(), name, value);
}
enum stRechargeCheckResult_ProtoModID {
  stRechargeCheckResult_ProtoModID_ModID = 10
};
bool stRechargeCheckResult_ProtoModID_IsValid(int value);
const stRechargeCheckResult_ProtoModID stRechargeCheckResult_ProtoModID_ProtoModID_MIN = stRechargeCheckResult_ProtoModID_ModID;
const stRechargeCheckResult_ProtoModID stRechargeCheckResult_ProtoModID_ProtoModID_MAX = stRechargeCheckResult_ProtoModID_ModID;
const int stRechargeCheckResult_ProtoModID_ProtoModID_ARRAYSIZE = stRechargeCheckResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRechargeCheckResult_ProtoModID_descriptor();
inline const ::std::string& stRechargeCheckResult_ProtoModID_Name(stRechargeCheckResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRechargeCheckResult_ProtoModID_descriptor(), value);
}
inline bool stRechargeCheckResult_ProtoModID_Parse(
    const ::std::string& name, stRechargeCheckResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRechargeCheckResult_ProtoModID>(
    stRechargeCheckResult_ProtoModID_descriptor(), name, value);
}
enum stRechargeCheckResult_ProtoFunID {
  stRechargeCheckResult_ProtoFunID_FunID = 9
};
bool stRechargeCheckResult_ProtoFunID_IsValid(int value);
const stRechargeCheckResult_ProtoFunID stRechargeCheckResult_ProtoFunID_ProtoFunID_MIN = stRechargeCheckResult_ProtoFunID_FunID;
const stRechargeCheckResult_ProtoFunID stRechargeCheckResult_ProtoFunID_ProtoFunID_MAX = stRechargeCheckResult_ProtoFunID_FunID;
const int stRechargeCheckResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRechargeCheckResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRechargeCheckResult_ProtoFunID_descriptor();
inline const ::std::string& stRechargeCheckResult_ProtoFunID_Name(stRechargeCheckResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRechargeCheckResult_ProtoFunID_descriptor(), value);
}
inline bool stRechargeCheckResult_ProtoFunID_Parse(
    const ::std::string& name, stRechargeCheckResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRechargeCheckResult_ProtoFunID>(
    stRechargeCheckResult_ProtoFunID_descriptor(), name, value);
}
enum eAttachStatus {
  eATTACH_STATUS_NO = 0,
  eATTACH_STATUS_UNFETCH = 1,
  eATTACH_STATUS_FETCHED = 2
};
bool eAttachStatus_IsValid(int value);
const eAttachStatus eAttachStatus_MIN = eATTACH_STATUS_NO;
const eAttachStatus eAttachStatus_MAX = eATTACH_STATUS_FETCHED;
const int eAttachStatus_ARRAYSIZE = eAttachStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* eAttachStatus_descriptor();
inline const ::std::string& eAttachStatus_Name(eAttachStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    eAttachStatus_descriptor(), value);
}
inline bool eAttachStatus_Parse(
    const ::std::string& name, eAttachStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eAttachStatus>(
    eAttachStatus_descriptor(), name, value);
}
enum eMailType {
  MAIL_TYPE_SYSTEM = 1,
  MAIL_TYPE_SYSTEM_ONEDAY = 2
};
bool eMailType_IsValid(int value);
const eMailType eMailType_MIN = MAIL_TYPE_SYSTEM;
const eMailType eMailType_MAX = MAIL_TYPE_SYSTEM_ONEDAY;
const int eMailType_ARRAYSIZE = eMailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eMailType_descriptor();
inline const ::std::string& eMailType_Name(eMailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eMailType_descriptor(), value);
}
inline bool eMailType_Parse(
    const ::std::string& name, eMailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eMailType>(
    eMailType_descriptor(), name, value);
}
enum eDrawType {
  eDrawType_Gold = 1,
  eDrawType_10Gold = 2,
  eDrawType_Diamond = 3,
  eDrawType_10Diamond = 4,
  eDrawType_DrawHero = 5,
  eDrawType_10DrawHero = 6,
  eDrawType_TreasureDraw = 7,
  eDrawType_10TreasureDraw = 8,
  eDrawType_DevilCallDraw = 9
};
bool eDrawType_IsValid(int value);
const eDrawType eDrawType_MIN = eDrawType_Gold;
const eDrawType eDrawType_MAX = eDrawType_DevilCallDraw;
const int eDrawType_ARRAYSIZE = eDrawType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eDrawType_descriptor();
inline const ::std::string& eDrawType_Name(eDrawType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eDrawType_descriptor(), value);
}
inline bool eDrawType_Parse(
    const ::std::string& name, eDrawType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eDrawType>(
    eDrawType_descriptor(), name, value);
}
enum eTreasureType {
  eTreasure_Yuntie1000_1 = 130201,
  eTreasure_Yuntie1000_2 = 130202,
  eTreasure_Yuntie3000_1 = 130401,
  eTreasure_Yuntie3000_2 = 130402,
  eTreasure_Yuntie3000_3 = 130403,
  eTreasure_Yuntie5000_1 = 131201,
  eTreasure_Yuntie5000_2 = 131202,
  eTreasure_Yuntie5000_3 = 131203,
  eTreasure_Yuntie5000_4 = 131204,
  eTreasure_Jinglian_1 = 131211,
  eTreasure_Jinglian_2 = 131212,
  eTreasure_Jinglian_3 = 131213,
  eTreasure_Small_Jinglian_Mine1 = 131411,
  eTreasure_Small_Jinglian_Mine2 = 131412,
  eTreasure_Small_Jinglian_Mine3 = 131413,
  eTreasure_Mid_Jinglian_Mine1 = 131611,
  eTreasure_Mid_Jinglian_Mine2 = 131612,
  eTreasure_Mid_Jinglian_Mine3 = 131613,
  eTreasure_Mid_Jinglian_Mine4 = 131614,
  eTreasure_Big_Jinglian_Mine1 = 131811,
  eTreasure_Big_Jinglian_Mine2 = 131812,
  eTreasure_Big_Jinglian_Mine3 = 131813,
  eTreasure_Big_Jinglian_Mine4 = 131814,
  eTreasure_Big_Jinglian_Mine5 = 131815,
  eTreasure_Fuwen_2Class_1 = 130221,
  eTreasure_Fuwen_2Class_2 = 130222,
  eTreasure_Fuwen_2Class_3 = 130223,
  eTreasure_Fuwen_10Class_1 = 131021,
  eTreasure_Fuwen_10Class_2 = 131022,
  eTreasure_Fuwen_10Class_3 = 131023,
  eTreasure_Fuwen_10Class_4 = 131024,
  eTreasure_Fuwen_18Class_1 = 131821,
  eTreasure_Fuwen_18Class_2 = 131822,
  eTreasure_Fuwen_18Class_3 = 131823,
  eTreasure_Fuwen_18Class_4 = 131824,
  eTreasure_Fuwen_18Class_5 = 131825,
  eTreasure_Fuwen_20Class_1 = 132021,
  eTreasure_Fuwen_20Class_2 = 132022,
  eTreasure_Fuwen_20Class_3 = 132023,
  eTreasure_Fuwen_20Class_4 = 132024,
  eTreasure_Fuwen_20Class_5 = 132025,
  eTreasure_Fuwen_26Class_1 = 132621,
  eTreasure_Fuwen_26Class_2 = 132622,
  eTreasure_Fuwen_26Class_3 = 132623,
  eTreasure_Fuwen_26Class_4 = 132624,
  eTreasure_Fuwen_26Class_5 = 132625,
  eTreasure_Fuwen_26Class_6 = 132626,
  eTreasure_Fuwen_28Class_1_1 = 132821,
  eTreasure_Fuwen_28Class_1_2 = 132822,
  eTreasure_Fuwen_28Class_1_3 = 132823,
  eTreasure_Fuwen_28Class_1_4 = 132824,
  eTreasure_Fuwen_28Class_1_5 = 132825,
  eTreasure_Fuwen_28Class_1_6 = 132826,
  eTreasure_Fuwen_28Class_2_1 = 132841,
  eTreasure_Fuwen_28Class_2_2 = 132842,
  eTreasure_Fuwen_28Class_2_3 = 132843,
  eTreasure_Fuwen_28Class_2_4 = 132844,
  eTreasure_Fuwen_28Class_2_5 = 132845,
  eTreasure_Fuwen_28Class_2_6 = 132846,
  eTreasure_Fuwen_28Class_3_1 = 132851,
  eTreasure_Fuwen_28Class_3_2 = 132852,
  eTreasure_Fuwen_28Class_3_3 = 132853,
  eTreasure_Fuwen_28Class_3_4 = 132854,
  eTreasure_Fuwen_28Class_3_5 = 132855,
  eTreasure_Fuwen_28Class_3_6 = 132856,
  eTreasure_Fuwen_30Class_1 = 133021,
  eTreasure_Fuwen_30Class_2 = 133022,
  eTreasure_Fuwen_30Class_3 = 133023,
  eTreasure_Fuwen_30Class_4 = 133024,
  eTreasure_Fuwen_30Class_5 = 133025,
  eTreasure_Fuwen_30Class_6 = 133026,
  eTreasure_Small_Exp_Fushi_1 = 130231,
  eTreasure_Small_Exp_Fushi_2 = 130232,
  eTreasure_Small_Exp_Fushi_3 = 130233,
  eTreasure_Mid_Exp_Fushi_1 = 130631,
  eTreasure_Mid_Exp_Fushi_2 = 130632,
  eTreasure_Mid_Exp_Fushi_3 = 130633,
  eTreasure_Mid_Exp_Fushi_4 = 130634,
  eTreasure_Big_Exp_Fushi_1 = 131231,
  eTreasure_Big_Exp_Fushi_2 = 131232,
  eTreasure_Big_Exp_Fushi_3 = 131233,
  eTreasure_Big_Exp_Fushi_4 = 131234,
  eTreasure_Big_Exp_Fushi_5 = 131235,
  eTreasure_GoldCoins_Card2_1 = 130271,
  eTreasure_GoldCoins_Card2_2 = 130272,
  eTreasure_GoldCoins_Card2_3 = 130273,
  eTreasure_GoldCoins_Card5_1 = 130471,
  eTreasure_GoldCoins_Card5_2 = 130472,
  eTreasure_GoldCoins_Card5_3 = 130473,
  eTreasure_GoldCoins_Card5_4 = 130474,
  eTreasure_GoldCoins_Card10_1 = 131271,
  eTreasure_GoldCoins_Card10_2 = 131272,
  eTreasure_GoldCoins_Card10_3 = 131273,
  eTreasure_GoldCoins_Card10_4 = 131274,
  eTreasure_GoldCoins_Card10_5 = 131275,
  eTreasure_Diamond_Card10_1 = 130281,
  eTreasure_Diamond_Card10_2 = 130282,
  eTreasure_Diamond_Card10_3 = 130283,
  eTreasure_Diamond_Card20_1 = 130481,
  eTreasure_Diamond_Card20_2 = 130482,
  eTreasure_Diamond_Card20_3 = 130483,
  eTreasure_Diamond_Card20_4 = 130484,
  eTreasure_Diamond_Card50_1 = 131281,
  eTreasure_Diamond_Card50_2 = 131282,
  eTreasure_Diamond_Card50_3 = 131283,
  eTreasure_Diamond_Card50_4 = 131284,
  eTreasure_Diamond_Card50_5 = 131285
};
bool eTreasureType_IsValid(int value);
const eTreasureType eTreasureType_MIN = eTreasure_Yuntie1000_1;
const eTreasureType eTreasureType_MAX = eTreasure_Fuwen_30Class_6;
const int eTreasureType_ARRAYSIZE = eTreasureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eTreasureType_descriptor();
inline const ::std::string& eTreasureType_Name(eTreasureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eTreasureType_descriptor(), value);
}
inline bool eTreasureType_Parse(
    const ::std::string& name, eTreasureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eTreasureType>(
    eTreasureType_descriptor(), name, value);
}
enum eCombineItem {
  eCombine_None = 0,
  eCombine_Yuntie1000 = 100290,
  eCombine_Yuntie3000 = 100490,
  eCombine_Yuntie5000 = 101290,
  eCombine_Jinglian = 120101,
  eCombine_Small_Jinglian_Mine = 101206,
  eCombine_Mid_Jinglian_Mine = 101406,
  eCombine_Big_Jinglian_Mine = 101606,
  eCombine_2Class_Fuwen = 600200,
  eCombine_10Class_Fuwen = 601000,
  eCombine_18Class_Fuwen = 601800,
  eCombine_20Class_Fuwen = 602000,
  eCombine_26Class_Fuwen = 602600,
  eCombine_28Class_Fuwen = 602800,
  eCombine_30Class_Fuwen = 603000,
  eCombine_Small_Exp_Fushi = 650200,
  eCombine_Mid_Exp_Fushi = 650600,
  eCombine_Big_Exp_Fushi = 651200
};
bool eCombineItem_IsValid(int value);
const eCombineItem eCombineItem_MIN = eCombine_None;
const eCombineItem eCombineItem_MAX = eCombine_Big_Exp_Fushi;
const int eCombineItem_ARRAYSIZE = eCombineItem_MAX + 1;

const ::google::protobuf::EnumDescriptor* eCombineItem_descriptor();
inline const ::std::string& eCombineItem_Name(eCombineItem value) {
  return ::google::protobuf::internal::NameOfEnum(
    eCombineItem_descriptor(), value);
}
inline bool eCombineItem_Parse(
    const ::std::string& name, eCombineItem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eCombineItem>(
    eCombineItem_descriptor(), name, value);
}
enum eCaptureType {
  eOneTime_Capture = 1,
  eFiveTime_Capture = 2
};
bool eCaptureType_IsValid(int value);
const eCaptureType eCaptureType_MIN = eOneTime_Capture;
const eCaptureType eCaptureType_MAX = eFiveTime_Capture;
const int eCaptureType_ARRAYSIZE = eCaptureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eCaptureType_descriptor();
inline const ::std::string& eCaptureType_Name(eCaptureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eCaptureType_descriptor(), value);
}
inline bool eCaptureType_Parse(
    const ::std::string& name, eCaptureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eCaptureType>(
    eCaptureType_descriptor(), name, value);
}
enum eActivityType {
  eActivityType_Invalid = 0,
  eActivityType_Consume = 1,
  eActivityType_CumuLogin = 2,
  eActivityType_SpecialTimeLogin = 3,
  eActivityType_Exchange = 4,
  eActivityType_WeeklyConsume = 5,
  eActivityType_OneDayOneRecharge = 6,
  eActivityType_OneDayAccRecharge = 7,
  eActivityType_OneDayRecyleRecharge = 8,
  eActivityType_MultiAccRecharge = 9,
  eActivityType_AccRechargeDay = 10
};
bool eActivityType_IsValid(int value);
const eActivityType eActivityType_MIN = eActivityType_Invalid;
const eActivityType eActivityType_MAX = eActivityType_AccRechargeDay;
const int eActivityType_ARRAYSIZE = eActivityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eActivityType_descriptor();
inline const ::std::string& eActivityType_Name(eActivityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eActivityType_descriptor(), value);
}
inline bool eActivityType_Parse(
    const ::std::string& name, eActivityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eActivityType>(
    eActivityType_descriptor(), name, value);
}
enum eSevenDayGoalType {
  eSD_GoalType_Login = 1,
  eSD_GoalType_Gift = 2,
  eSD_GoalType_Module1 = 3,
  eSD_GoalType_Module2 = 4
};
bool eSevenDayGoalType_IsValid(int value);
const eSevenDayGoalType eSevenDayGoalType_MIN = eSD_GoalType_Login;
const eSevenDayGoalType eSevenDayGoalType_MAX = eSD_GoalType_Module2;
const int eSevenDayGoalType_ARRAYSIZE = eSevenDayGoalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eSevenDayGoalType_descriptor();
inline const ::std::string& eSevenDayGoalType_Name(eSevenDayGoalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eSevenDayGoalType_descriptor(), value);
}
inline bool eSevenDayGoalType_Parse(
    const ::std::string& name, eSevenDayGoalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eSevenDayGoalType>(
    eSevenDayGoalType_descriptor(), name, value);
}
enum eSevenDayGoal {
  eSD_Goal_Login_Num = 1,
  eSD_Goal_Total_Recharge = 2,
  eSD_Goal_GitfBag_Price = 3,
  eSD_Goal_MainTask_Star_Num = 4,
  eSD_Goal_All_Skill_Raise_Num = 5,
  eSD_Goal_Arena_History_Rank = 6,
  eSD_Goal_All_Equip_Refine_Lv = 7,
  eSD_Goal_Team_Copymap = 8,
  eSD_Goal_All_Equip_Raise_Lv = 9,
  eSD_Goal_One_One_Win_Num = 10,
  eSD_Goal_Heishi_Refresh_Num = 11,
  eSD_Goal_RealTime_PK_Num = 12,
  eSD_Goal_Fuwen_Purple_Num = 13,
  eSD_Goal_Guild_Hall_Lv = 14,
  eSD_Goal_Role_Lv = 15,
  eSD_Goal_Battle_Power = 16,
  eSD_Goal_Draw_num = 17,
  eSD_Goal_Hero_EvolutionLv = 18,
  eSD_Goal_Consume_Diamond = 19
};
bool eSevenDayGoal_IsValid(int value);
const eSevenDayGoal eSevenDayGoal_MIN = eSD_Goal_Login_Num;
const eSevenDayGoal eSevenDayGoal_MAX = eSD_Goal_Consume_Diamond;
const int eSevenDayGoal_ARRAYSIZE = eSevenDayGoal_MAX + 1;

const ::google::protobuf::EnumDescriptor* eSevenDayGoal_descriptor();
inline const ::std::string& eSevenDayGoal_Name(eSevenDayGoal value) {
  return ::google::protobuf::internal::NameOfEnum(
    eSevenDayGoal_descriptor(), value);
}
inline bool eSevenDayGoal_Parse(
    const ::std::string& name, eSevenDayGoal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eSevenDayGoal>(
    eSevenDayGoal_descriptor(), name, value);
}
enum eLevelUpType {
  eNormalLeveUp = 1,
  eAKeyLevelUp = 2
};
bool eLevelUpType_IsValid(int value);
const eLevelUpType eLevelUpType_MIN = eNormalLeveUp;
const eLevelUpType eLevelUpType_MAX = eAKeyLevelUp;
const int eLevelUpType_ARRAYSIZE = eLevelUpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eLevelUpType_descriptor();
inline const ::std::string& eLevelUpType_Name(eLevelUpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eLevelUpType_descriptor(), value);
}
inline bool eLevelUpType_Parse(
    const ::std::string& name, eLevelUpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eLevelUpType>(
    eLevelUpType_descriptor(), name, value);
}
// ===================================================================

class stSynMainSnalInfo : public ::google::protobuf::Message {
 public:
  stSynMainSnalInfo();
  virtual ~stSynMainSnalInfo();

  stSynMainSnalInfo(const stSynMainSnalInfo& from);

  inline stSynMainSnalInfo& operator=(const stSynMainSnalInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynMainSnalInfo& default_instance();

  void Swap(stSynMainSnalInfo* other);

  // implements Message ----------------------------------------------

  stSynMainSnalInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynMainSnalInfo& from);
  void MergeFrom(const stSynMainSnalInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string senderName = 2;
  inline bool has_sendername() const;
  inline void clear_sendername();
  static const int kSenderNameFieldNumber = 2;
  inline const ::std::string& sendername() const;
  inline void set_sendername(const ::std::string& value);
  inline void set_sendername(const char* value);
  inline void set_sendername(const char* value, size_t size);
  inline ::std::string* mutable_sendername();
  inline ::std::string* release_sendername();
  inline void set_allocated_sendername(::std::string* sendername);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional uint32 sendTime = 4;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 sendtime() const;
  inline void set_sendtime(::google::protobuf::uint32 value);

  // optional bool isRead = 5;
  inline bool has_isread() const;
  inline void clear_isread();
  static const int kIsReadFieldNumber = 5;
  inline bool isread() const;
  inline void set_isread(bool value);

  // optional .MiscProto.eMailType mailType = 6;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailTypeFieldNumber = 6;
  inline ::MiscProto::eMailType mailtype() const;
  inline void set_mailtype(::MiscProto::eMailType value);

  // optional bool isFetchAttach = 7;
  inline bool has_isfetchattach() const;
  inline void clear_isfetchattach();
  static const int kIsFetchAttachFieldNumber = 7;
  inline bool isfetchattach() const;
  inline void set_isfetchattach(bool value);

  // optional bool hasAttach = 8;
  inline bool has_hasattach() const;
  inline void clear_hasattach();
  static const int kHasAttachFieldNumber = 8;
  inline bool hasattach() const;
  inline void set_hasattach(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynMainSnalInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sendername();
  inline void clear_has_sendername();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_isread();
  inline void clear_has_isread();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();
  inline void set_has_isfetchattach();
  inline void clear_has_isfetchattach();
  inline void set_has_hasattach();
  inline void clear_has_hasattach();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sendername_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 sendtime_;
  ::std::string* title_;
  int mailtype_;
  bool isread_;
  bool isfetchattach_;
  bool hasattach_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynMainSnalInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynMailAttach : public ::google::protobuf::Message {
 public:
  stSynMailAttach();
  virtual ~stSynMailAttach();

  stSynMailAttach(const stSynMailAttach& from);

  inline stSynMailAttach& operator=(const stSynMailAttach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynMailAttach& default_instance();

  void Swap(stSynMailAttach* other);

  // implements Message ----------------------------------------------

  stSynMailAttach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynMailAttach& from);
  void MergeFrom(const stSynMailAttach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynMailAttach)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynMailAttach* default_instance_;
};
// -------------------------------------------------------------------

class stSynDetailMailInfo : public ::google::protobuf::Message {
 public:
  stSynDetailMailInfo();
  virtual ~stSynDetailMailInfo();

  stSynDetailMailInfo(const stSynDetailMailInfo& from);

  inline stSynDetailMailInfo& operator=(const stSynDetailMailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynDetailMailInfo& default_instance();

  void Swap(stSynDetailMailInfo* other);

  // implements Message ----------------------------------------------

  stSynDetailMailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynDetailMailInfo& from);
  void MergeFrom(const stSynDetailMailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string senderName = 2;
  inline bool has_sendername() const;
  inline void clear_sendername();
  static const int kSenderNameFieldNumber = 2;
  inline const ::std::string& sendername() const;
  inline void set_sendername(const ::std::string& value);
  inline void set_sendername(const char* value);
  inline void set_sendername(const char* value, size_t size);
  inline ::std::string* mutable_sendername();
  inline ::std::string* release_sendername();
  inline void set_allocated_sendername(::std::string* sendername);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 sendTime = 5;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 sendtime() const;
  inline void set_sendtime(::google::protobuf::uint32 value);

  // optional bool isRead = 6;
  inline bool has_isread() const;
  inline void clear_isread();
  static const int kIsReadFieldNumber = 6;
  inline bool isread() const;
  inline void set_isread(bool value);

  // optional .MiscProto.eMailType mailType = 7;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailTypeFieldNumber = 7;
  inline ::MiscProto::eMailType mailtype() const;
  inline void set_mailtype(::MiscProto::eMailType value);

  // optional bool isFetchAttach = 8;
  inline bool has_isfetchattach() const;
  inline void clear_isfetchattach();
  static const int kIsFetchAttachFieldNumber = 8;
  inline bool isfetchattach() const;
  inline void set_isfetchattach(bool value);

  // repeated .MiscProto.stSynMailAttach attachs = 9;
  inline int attachs_size() const;
  inline void clear_attachs();
  static const int kAttachsFieldNumber = 9;
  inline const ::MiscProto::stSynMailAttach& attachs(int index) const;
  inline ::MiscProto::stSynMailAttach* mutable_attachs(int index);
  inline ::MiscProto::stSynMailAttach* add_attachs();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynMailAttach >&
      attachs() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynMailAttach >*
      mutable_attachs();

  // @@protoc_insertion_point(class_scope:MiscProto.stSynDetailMailInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sendername();
  inline void clear_has_sendername();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_isread();
  inline void clear_has_isread();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();
  inline void set_has_isfetchattach();
  inline void clear_has_isfetchattach();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sendername_;
  ::std::string* title_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 sendtime_;
  ::std::string* content_;
  int mailtype_;
  bool isread_;
  bool isfetchattach_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynMailAttach > attachs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynDetailMailInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynAllMail : public ::google::protobuf::Message {
 public:
  stSynAllMail();
  virtual ~stSynAllMail();

  stSynAllMail(const stSynAllMail& from);

  inline stSynAllMail& operator=(const stSynAllMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynAllMail& default_instance();

  void Swap(stSynAllMail* other);

  // implements Message ----------------------------------------------

  stSynAllMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynAllMail& from);
  void MergeFrom(const stSynAllMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynAllMail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynAllMail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynAllMail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynAllMail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynAllMail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynAllMail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynAllMail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynAllMail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynAllMail_ProtoModID_Parse(name, value);
  }

  typedef stSynAllMail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynAllMail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynAllMail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynAllMail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynAllMail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynAllMail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynAllMail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynAllMail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynAllMail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stSynMainSnalInfo mailInfos = 1;
  inline int mailinfos_size() const;
  inline void clear_mailinfos();
  static const int kMailInfosFieldNumber = 1;
  inline const ::MiscProto::stSynMainSnalInfo& mailinfos(int index) const;
  inline ::MiscProto::stSynMainSnalInfo* mutable_mailinfos(int index);
  inline ::MiscProto::stSynMainSnalInfo* add_mailinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynMainSnalInfo >&
      mailinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynMainSnalInfo >*
      mutable_mailinfos();

  // @@protoc_insertion_point(class_scope:MiscProto.stSynAllMail)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynMainSnalInfo > mailinfos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynAllMail* default_instance_;
};
// -------------------------------------------------------------------

class stReqReadMail : public ::google::protobuf::Message {
 public:
  stReqReadMail();
  virtual ~stReqReadMail();

  stReqReadMail(const stReqReadMail& from);

  inline stReqReadMail& operator=(const stReqReadMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqReadMail& default_instance();

  void Swap(stReqReadMail* other);

  // implements Message ----------------------------------------------

  stReqReadMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqReadMail& from);
  void MergeFrom(const stReqReadMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqReadMail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqReadMail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqReadMail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqReadMail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqReadMail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqReadMail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqReadMail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqReadMail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqReadMail_ProtoModID_Parse(name, value);
  }

  typedef stReqReadMail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqReadMail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqReadMail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqReadMail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqReadMail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqReadMail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqReadMail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqReadMail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqReadMail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqReadMail)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqReadMail* default_instance_;
};
// -------------------------------------------------------------------

class stRetMailInfo : public ::google::protobuf::Message {
 public:
  stRetMailInfo();
  virtual ~stRetMailInfo();

  stRetMailInfo(const stRetMailInfo& from);

  inline stRetMailInfo& operator=(const stRetMailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetMailInfo& default_instance();

  void Swap(stRetMailInfo* other);

  // implements Message ----------------------------------------------

  stRetMailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetMailInfo& from);
  void MergeFrom(const stRetMailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetMailInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetMailInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetMailInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetMailInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetMailInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetMailInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetMailInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetMailInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetMailInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetMailInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetMailInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetMailInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetMailInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetMailInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetMailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetMailInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetMailInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetMailInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stSynDetailMailInfo mailInfo = 1;
  inline bool has_mailinfo() const;
  inline void clear_mailinfo();
  static const int kMailInfoFieldNumber = 1;
  inline const ::MiscProto::stSynDetailMailInfo& mailinfo() const;
  inline ::MiscProto::stSynDetailMailInfo* mutable_mailinfo();
  inline ::MiscProto::stSynDetailMailInfo* release_mailinfo();
  inline void set_allocated_mailinfo(::MiscProto::stSynDetailMailInfo* mailinfo);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetMailInfo)
 private:
  inline void set_has_mailinfo();
  inline void clear_has_mailinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MiscProto::stSynDetailMailInfo* mailinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetMailInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqFetchAttach : public ::google::protobuf::Message {
 public:
  stReqFetchAttach();
  virtual ~stReqFetchAttach();

  stReqFetchAttach(const stReqFetchAttach& from);

  inline stReqFetchAttach& operator=(const stReqFetchAttach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqFetchAttach& default_instance();

  void Swap(stReqFetchAttach* other);

  // implements Message ----------------------------------------------

  stReqFetchAttach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqFetchAttach& from);
  void MergeFrom(const stReqFetchAttach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqFetchAttach_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqFetchAttach_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqFetchAttach_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqFetchAttach_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqFetchAttach_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqFetchAttach_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqFetchAttach_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqFetchAttach_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqFetchAttach_ProtoModID_Parse(name, value);
  }

  typedef stReqFetchAttach_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqFetchAttach_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqFetchAttach_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqFetchAttach_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqFetchAttach_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqFetchAttach_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqFetchAttach_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqFetchAttach_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqFetchAttach_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqFetchAttach)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqFetchAttach* default_instance_;
};
// -------------------------------------------------------------------

class stFetchAttachResult : public ::google::protobuf::Message {
 public:
  stFetchAttachResult();
  virtual ~stFetchAttachResult();

  stFetchAttachResult(const stFetchAttachResult& from);

  inline stFetchAttachResult& operator=(const stFetchAttachResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFetchAttachResult& default_instance();

  void Swap(stFetchAttachResult* other);

  // implements Message ----------------------------------------------

  stFetchAttachResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFetchAttachResult& from);
  void MergeFrom(const stFetchAttachResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stFetchAttachResult_Result Result;
  static const Result SUCCESS = stFetchAttachResult_Result_SUCCESS;
  static const Result ATTACH_NOT_EXIST = stFetchAttachResult_Result_ATTACH_NOT_EXIST;
  static inline bool Result_IsValid(int value) {
    return stFetchAttachResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stFetchAttachResult_Result_Result_MIN;
  static const Result Result_MAX =
    stFetchAttachResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stFetchAttachResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stFetchAttachResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stFetchAttachResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stFetchAttachResult_Result_Parse(name, value);
  }

  typedef stFetchAttachResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stFetchAttachResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stFetchAttachResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stFetchAttachResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stFetchAttachResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stFetchAttachResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stFetchAttachResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stFetchAttachResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stFetchAttachResult_ProtoModID_Parse(name, value);
  }

  typedef stFetchAttachResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stFetchAttachResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stFetchAttachResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stFetchAttachResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stFetchAttachResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stFetchAttachResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stFetchAttachResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stFetchAttachResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stFetchAttachResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stFetchAttachResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stFetchAttachResult_Result result() const;
  inline void set_result(::MiscProto::stFetchAttachResult_Result value);

  // @@protoc_insertion_point(class_scope:MiscProto.stFetchAttachResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stFetchAttachResult* default_instance_;
};
// -------------------------------------------------------------------

class stReceiveMail : public ::google::protobuf::Message {
 public:
  stReceiveMail();
  virtual ~stReceiveMail();

  stReceiveMail(const stReceiveMail& from);

  inline stReceiveMail& operator=(const stReceiveMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReceiveMail& default_instance();

  void Swap(stReceiveMail* other);

  // implements Message ----------------------------------------------

  stReceiveMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReceiveMail& from);
  void MergeFrom(const stReceiveMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReceiveMail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReceiveMail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReceiveMail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReceiveMail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReceiveMail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReceiveMail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReceiveMail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReceiveMail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReceiveMail_ProtoModID_Parse(name, value);
  }

  typedef stReceiveMail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReceiveMail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReceiveMail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReceiveMail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReceiveMail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReceiveMail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReceiveMail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReceiveMail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReceiveMail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stSynMainSnalInfo mailInfo = 1;
  inline bool has_mailinfo() const;
  inline void clear_mailinfo();
  static const int kMailInfoFieldNumber = 1;
  inline const ::MiscProto::stSynMainSnalInfo& mailinfo() const;
  inline ::MiscProto::stSynMainSnalInfo* mutable_mailinfo();
  inline ::MiscProto::stSynMainSnalInfo* release_mailinfo();
  inline void set_allocated_mailinfo(::MiscProto::stSynMainSnalInfo* mailinfo);

  // @@protoc_insertion_point(class_scope:MiscProto.stReceiveMail)
 private:
  inline void set_has_mailinfo();
  inline void clear_has_mailinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MiscProto::stSynMainSnalInfo* mailinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReceiveMail* default_instance_;
};
// -------------------------------------------------------------------

class stReqRewardInfo : public ::google::protobuf::Message {
 public:
  stReqRewardInfo();
  virtual ~stReqRewardInfo();

  stReqRewardInfo(const stReqRewardInfo& from);

  inline stReqRewardInfo& operator=(const stReqRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRewardInfo& default_instance();

  void Swap(stReqRewardInfo* other);

  // implements Message ----------------------------------------------

  stReqRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRewardInfo& from);
  void MergeFrom(const stReqRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRewardInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRewardInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRewardInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRewardInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRewardInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRewardInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRewardInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRewardInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRewardInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqRewardInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRewardInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRewardInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRewardInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRewardInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRewardInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRewardInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRewardInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRewardInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqRewardInfo)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetRewardInfo : public ::google::protobuf::Message {
 public:
  stRetRewardInfo();
  virtual ~stRetRewardInfo();

  stRetRewardInfo(const stRetRewardInfo& from);

  inline stRetRewardInfo& operator=(const stRetRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRewardInfo& default_instance();

  void Swap(stRetRewardInfo* other);

  // implements Message ----------------------------------------------

  stRetRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRewardInfo& from);
  void MergeFrom(const stRetRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRewardInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRewardInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRewardInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRewardInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRewardInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRewardInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRewardInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRewardInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRewardInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetRewardInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRewardInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRewardInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRewardInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRewardInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRewardInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRewardInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRewardInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRewardInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 getSignRewardNum = 1;
  inline bool has_getsignrewardnum() const;
  inline void clear_getsignrewardnum();
  static const int kGetSignRewardNumFieldNumber = 1;
  inline ::google::protobuf::uint32 getsignrewardnum() const;
  inline void set_getsignrewardnum(::google::protobuf::uint32 value);

  // optional bool hasGetSignReward = 2;
  inline bool has_hasgetsignreward() const;
  inline void clear_hasgetsignreward();
  static const int kHasGetSignRewardFieldNumber = 2;
  inline bool hasgetsignreward() const;
  inline void set_hasgetsignreward(bool value);

  // optional uint32 getOpenSvrRewardNum = 3;
  inline bool has_getopensvrrewardnum() const;
  inline void clear_getopensvrrewardnum();
  static const int kGetOpenSvrRewardNumFieldNumber = 3;
  inline ::google::protobuf::uint32 getopensvrrewardnum() const;
  inline void set_getopensvrrewardnum(::google::protobuf::uint32 value);

  // optional bool hasGetOpenSvrReward = 4;
  inline bool has_hasgetopensvrreward() const;
  inline void clear_hasgetopensvrreward();
  static const int kHasGetOpenSvrRewardFieldNumber = 4;
  inline bool hasgetopensvrreward() const;
  inline void set_hasgetopensvrreward(bool value);

  // repeated uint32 hasGetRewardLv = 5;
  inline int hasgetrewardlv_size() const;
  inline void clear_hasgetrewardlv();
  static const int kHasGetRewardLvFieldNumber = 5;
  inline ::google::protobuf::uint32 hasgetrewardlv(int index) const;
  inline void set_hasgetrewardlv(int index, ::google::protobuf::uint32 value);
  inline void add_hasgetrewardlv(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hasgetrewardlv() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hasgetrewardlv();

  // optional uint32 onlineTimes = 6;
  inline bool has_onlinetimes() const;
  inline void clear_onlinetimes();
  static const int kOnlineTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 onlinetimes() const;
  inline void set_onlinetimes(::google::protobuf::uint32 value);

  // repeated uint32 hasGetOnlineReward = 7;
  inline int hasgetonlinereward_size() const;
  inline void clear_hasgetonlinereward();
  static const int kHasGetOnlineRewardFieldNumber = 7;
  inline ::google::protobuf::uint32 hasgetonlinereward(int index) const;
  inline void set_hasgetonlinereward(int index, ::google::protobuf::uint32 value);
  inline void add_hasgetonlinereward(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hasgetonlinereward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hasgetonlinereward();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetRewardInfo)
 private:
  inline void set_has_getsignrewardnum();
  inline void clear_has_getsignrewardnum();
  inline void set_has_hasgetsignreward();
  inline void clear_has_hasgetsignreward();
  inline void set_has_getopensvrrewardnum();
  inline void clear_has_getopensvrrewardnum();
  inline void set_has_hasgetopensvrreward();
  inline void clear_has_hasgetopensvrreward();
  inline void set_has_onlinetimes();
  inline void clear_has_onlinetimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 getsignrewardnum_;
  ::google::protobuf::uint32 getopensvrrewardnum_;
  bool hasgetsignreward_;
  bool hasgetopensvrreward_;
  ::google::protobuf::uint32 onlinetimes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hasgetrewardlv_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hasgetonlinereward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqSignReward : public ::google::protobuf::Message {
 public:
  stReqSignReward();
  virtual ~stReqSignReward();

  stReqSignReward(const stReqSignReward& from);

  inline stReqSignReward& operator=(const stReqSignReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSignReward& default_instance();

  void Swap(stReqSignReward* other);

  // implements Message ----------------------------------------------

  stReqSignReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSignReward& from);
  void MergeFrom(const stReqSignReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSignReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSignReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSignReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSignReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSignReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSignReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSignReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSignReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSignReward_ProtoModID_Parse(name, value);
  }

  typedef stReqSignReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSignReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSignReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSignReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSignReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSignReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSignReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSignReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSignReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqSignReward)
 private:
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqSignReward* default_instance_;
};
// -------------------------------------------------------------------

class stGetSignRewardResult : public ::google::protobuf::Message {
 public:
  stGetSignRewardResult();
  virtual ~stGetSignRewardResult();

  stGetSignRewardResult(const stGetSignRewardResult& from);

  inline stGetSignRewardResult& operator=(const stGetSignRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGetSignRewardResult& default_instance();

  void Swap(stGetSignRewardResult* other);

  // implements Message ----------------------------------------------

  stGetSignRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGetSignRewardResult& from);
  void MergeFrom(const stGetSignRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGetSignRewardResult_Result Result;
  static const Result SUCCESS = stGetSignRewardResult_Result_SUCCESS;
  static const Result HAS_GET_REWARD = stGetSignRewardResult_Result_HAS_GET_REWARD;
  static const Result BAG_FULL = stGetSignRewardResult_Result_BAG_FULL;
  static inline bool Result_IsValid(int value) {
    return stGetSignRewardResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stGetSignRewardResult_Result_Result_MIN;
  static const Result Result_MAX =
    stGetSignRewardResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stGetSignRewardResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stGetSignRewardResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stGetSignRewardResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stGetSignRewardResult_Result_Parse(name, value);
  }

  typedef stGetSignRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGetSignRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGetSignRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGetSignRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGetSignRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGetSignRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGetSignRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGetSignRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGetSignRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stGetSignRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGetSignRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGetSignRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGetSignRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGetSignRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGetSignRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGetSignRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGetSignRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGetSignRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stGetSignRewardResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stGetSignRewardResult_Result result() const;
  inline void set_result(::MiscProto::stGetSignRewardResult_Result value);

  // optional uint32 day = 2;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 2;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGetSignRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGetSignRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenSvrReward : public ::google::protobuf::Message {
 public:
  stReqOpenSvrReward();
  virtual ~stReqOpenSvrReward();

  stReqOpenSvrReward(const stReqOpenSvrReward& from);

  inline stReqOpenSvrReward& operator=(const stReqOpenSvrReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenSvrReward& default_instance();

  void Swap(stReqOpenSvrReward* other);

  // implements Message ----------------------------------------------

  stReqOpenSvrReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenSvrReward& from);
  void MergeFrom(const stReqOpenSvrReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenSvrReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenSvrReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenSvrReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenSvrReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenSvrReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenSvrReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenSvrReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenSvrReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenSvrReward_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenSvrReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenSvrReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenSvrReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenSvrReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenSvrReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenSvrReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenSvrReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenSvrReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenSvrReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqOpenSvrReward)
 private:
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenSvrReward* default_instance_;
};
// -------------------------------------------------------------------

class stGetOpenSvrRewardResult : public ::google::protobuf::Message {
 public:
  stGetOpenSvrRewardResult();
  virtual ~stGetOpenSvrRewardResult();

  stGetOpenSvrRewardResult(const stGetOpenSvrRewardResult& from);

  inline stGetOpenSvrRewardResult& operator=(const stGetOpenSvrRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGetOpenSvrRewardResult& default_instance();

  void Swap(stGetOpenSvrRewardResult* other);

  // implements Message ----------------------------------------------

  stGetOpenSvrRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGetOpenSvrRewardResult& from);
  void MergeFrom(const stGetOpenSvrRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGetOpenSvrRewardResult_eResult eResult;
  static const eResult eSUCCESS = stGetOpenSvrRewardResult_eResult_eSUCCESS;
  static const eResult eHAS_GET_REWARD = stGetOpenSvrRewardResult_eResult_eHAS_GET_REWARD;
  static const eResult eBAG_FULL = stGetOpenSvrRewardResult_eResult_eBAG_FULL;
  static inline bool eResult_IsValid(int value) {
    return stGetOpenSvrRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGetOpenSvrRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGetOpenSvrRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGetOpenSvrRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGetOpenSvrRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGetOpenSvrRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGetOpenSvrRewardResult_eResult_Parse(name, value);
  }

  typedef stGetOpenSvrRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGetOpenSvrRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGetOpenSvrRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGetOpenSvrRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGetOpenSvrRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGetOpenSvrRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGetOpenSvrRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGetOpenSvrRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGetOpenSvrRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stGetOpenSvrRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGetOpenSvrRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGetOpenSvrRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGetOpenSvrRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGetOpenSvrRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGetOpenSvrRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGetOpenSvrRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGetOpenSvrRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGetOpenSvrRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stGetOpenSvrRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stGetOpenSvrRewardResult_eResult result() const;
  inline void set_result(::MiscProto::stGetOpenSvrRewardResult_eResult value);

  // optional uint32 day = 2;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 2;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGetOpenSvrRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGetOpenSvrRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqLvReward : public ::google::protobuf::Message {
 public:
  stReqLvReward();
  virtual ~stReqLvReward();

  stReqLvReward(const stReqLvReward& from);

  inline stReqLvReward& operator=(const stReqLvReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLvReward& default_instance();

  void Swap(stReqLvReward* other);

  // implements Message ----------------------------------------------

  stReqLvReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLvReward& from);
  void MergeFrom(const stReqLvReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLvReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLvReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLvReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLvReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLvReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLvReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLvReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLvReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLvReward_ProtoModID_Parse(name, value);
  }

  typedef stReqLvReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLvReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLvReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLvReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLvReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLvReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLvReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLvReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLvReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqLvReward)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqLvReward* default_instance_;
};
// -------------------------------------------------------------------

class stLvRewardResult : public ::google::protobuf::Message {
 public:
  stLvRewardResult();
  virtual ~stLvRewardResult();

  stLvRewardResult(const stLvRewardResult& from);

  inline stLvRewardResult& operator=(const stLvRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLvRewardResult& default_instance();

  void Swap(stLvRewardResult* other);

  // implements Message ----------------------------------------------

  stLvRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLvRewardResult& from);
  void MergeFrom(const stLvRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLvRewardResult_eResult eResult;
  static const eResult eSUCCESS = stLvRewardResult_eResult_eSUCCESS;
  static const eResult eLEVEL_TOO_LOW = stLvRewardResult_eResult_eLEVEL_TOO_LOW;
  static const eResult eHAS_NO_REWARD_LV = stLvRewardResult_eResult_eHAS_NO_REWARD_LV;
  static const eResult eINNER_ERROR = stLvRewardResult_eResult_eINNER_ERROR;
  static const eResult eBAG_SLOT_NOT_ENOUGH = stLvRewardResult_eResult_eBAG_SLOT_NOT_ENOUGH;
  static inline bool eResult_IsValid(int value) {
    return stLvRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stLvRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stLvRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stLvRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stLvRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stLvRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stLvRewardResult_eResult_Parse(name, value);
  }

  typedef stLvRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLvRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLvRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLvRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLvRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLvRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLvRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLvRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLvRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stLvRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLvRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLvRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLvRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLvRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLvRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLvRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLvRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLvRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stLvRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stLvRewardResult_eResult result() const;
  inline void set_result(::MiscProto::stLvRewardResult_eResult value);

  // optional uint32 getRewardLv = 2;
  inline bool has_getrewardlv() const;
  inline void clear_getrewardlv();
  static const int kGetRewardLvFieldNumber = 2;
  inline ::google::protobuf::uint32 getrewardlv() const;
  inline void set_getrewardlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stLvRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_getrewardlv();
  inline void clear_has_getrewardlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 getrewardlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stLvRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqOnlineReward : public ::google::protobuf::Message {
 public:
  stReqOnlineReward();
  virtual ~stReqOnlineReward();

  stReqOnlineReward(const stReqOnlineReward& from);

  inline stReqOnlineReward& operator=(const stReqOnlineReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOnlineReward& default_instance();

  void Swap(stReqOnlineReward* other);

  // implements Message ----------------------------------------------

  stReqOnlineReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOnlineReward& from);
  void MergeFrom(const stReqOnlineReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOnlineReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOnlineReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOnlineReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOnlineReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOnlineReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOnlineReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOnlineReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOnlineReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOnlineReward_ProtoModID_Parse(name, value);
  }

  typedef stReqOnlineReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOnlineReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOnlineReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOnlineReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOnlineReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOnlineReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOnlineReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOnlineReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOnlineReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqOnlineReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqOnlineReward* default_instance_;
};
// -------------------------------------------------------------------

class stGetOnlineRewardResult : public ::google::protobuf::Message {
 public:
  stGetOnlineRewardResult();
  virtual ~stGetOnlineRewardResult();

  stGetOnlineRewardResult(const stGetOnlineRewardResult& from);

  inline stGetOnlineRewardResult& operator=(const stGetOnlineRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGetOnlineRewardResult& default_instance();

  void Swap(stGetOnlineRewardResult* other);

  // implements Message ----------------------------------------------

  stGetOnlineRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGetOnlineRewardResult& from);
  void MergeFrom(const stGetOnlineRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGetOnlineRewardResult_eResult eResult;
  static const eResult eSUCCESS = stGetOnlineRewardResult_eResult_eSUCCESS;
  static const eResult eHAS_REMAIN_TIME = stGetOnlineRewardResult_eResult_eHAS_REMAIN_TIME;
  static const eResult eBAG_FULL = stGetOnlineRewardResult_eResult_eBAG_FULL;
  static const eResult eHAS_GOT_REWARD = stGetOnlineRewardResult_eResult_eHAS_GOT_REWARD;
  static const eResult eINNER_ERROR = stGetOnlineRewardResult_eResult_eINNER_ERROR;
  static inline bool eResult_IsValid(int value) {
    return stGetOnlineRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGetOnlineRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGetOnlineRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGetOnlineRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGetOnlineRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGetOnlineRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGetOnlineRewardResult_eResult_Parse(name, value);
  }

  typedef stGetOnlineRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGetOnlineRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGetOnlineRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGetOnlineRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGetOnlineRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGetOnlineRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGetOnlineRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGetOnlineRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGetOnlineRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stGetOnlineRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGetOnlineRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGetOnlineRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGetOnlineRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGetOnlineRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGetOnlineRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGetOnlineRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGetOnlineRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGetOnlineRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stGetOnlineRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stGetOnlineRewardResult_eResult result() const;
  inline void set_result(::MiscProto::stGetOnlineRewardResult_eResult value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 onlineTime = 3;
  inline bool has_onlinetime() const;
  inline void clear_onlinetime();
  static const int kOnlineTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 onlinetime() const;
  inline void set_onlinetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGetOnlineRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_onlinetime();
  inline void clear_has_onlinetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 onlinetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGetOnlineRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stBuyStarInfo : public ::google::protobuf::Message {
 public:
  stBuyStarInfo();
  virtual ~stBuyStarInfo();

  stBuyStarInfo(const stBuyStarInfo& from);

  inline stBuyStarInfo& operator=(const stBuyStarInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuyStarInfo& default_instance();

  void Swap(stBuyStarInfo* other);

  // implements Message ----------------------------------------------

  stBuyStarInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuyStarInfo& from);
  void MergeFrom(const stBuyStarInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuyStarInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuyStarInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuyStarInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuyStarInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuyStarInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuyStarInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuyStarInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuyStarInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuyStarInfo_ProtoModID_Parse(name, value);
  }

  typedef stBuyStarInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuyStarInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuyStarInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuyStarInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuyStarInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuyStarInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuyStarInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuyStarInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuyStarInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 buyNum = 1;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 1;
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stBuyStarInfo)
 private:
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 buynum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stBuyStarInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqBuyStar : public ::google::protobuf::Message {
 public:
  stReqBuyStar();
  virtual ~stReqBuyStar();

  stReqBuyStar(const stReqBuyStar& from);

  inline stReqBuyStar& operator=(const stReqBuyStar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBuyStar& default_instance();

  void Swap(stReqBuyStar* other);

  // implements Message ----------------------------------------------

  stReqBuyStar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBuyStar& from);
  void MergeFrom(const stReqBuyStar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBuyStar_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBuyStar_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBuyStar_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBuyStar_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBuyStar_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBuyStar_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBuyStar_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBuyStar_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBuyStar_ProtoModID_Parse(name, value);
  }

  typedef stReqBuyStar_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBuyStar_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBuyStar_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBuyStar_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBuyStar_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBuyStar_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBuyStar_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBuyStar_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBuyStar_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqBuyStar)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqBuyStar* default_instance_;
};
// -------------------------------------------------------------------

class stBuyStarResult : public ::google::protobuf::Message {
 public:
  stBuyStarResult();
  virtual ~stBuyStarResult();

  stBuyStarResult(const stBuyStarResult& from);

  inline stBuyStarResult& operator=(const stBuyStarResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuyStarResult& default_instance();

  void Swap(stBuyStarResult* other);

  // implements Message ----------------------------------------------

  stBuyStarResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuyStarResult& from);
  void MergeFrom(const stBuyStarResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuyStarResult_Result Result;
  static const Result SUCCESS = stBuyStarResult_Result_SUCCESS;
  static const Result ITEM_NOT_ENOUGH = stBuyStarResult_Result_ITEM_NOT_ENOUGH;
  static const Result INNER_ERROR = stBuyStarResult_Result_INNER_ERROR;
  static inline bool Result_IsValid(int value) {
    return stBuyStarResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stBuyStarResult_Result_Result_MIN;
  static const Result Result_MAX =
    stBuyStarResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stBuyStarResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stBuyStarResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stBuyStarResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stBuyStarResult_Result_Parse(name, value);
  }

  typedef stBuyStarResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuyStarResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuyStarResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuyStarResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuyStarResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuyStarResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuyStarResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuyStarResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuyStarResult_ProtoModID_Parse(name, value);
  }

  typedef stBuyStarResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuyStarResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuyStarResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuyStarResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuyStarResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuyStarResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuyStarResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuyStarResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuyStarResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stBuyStarResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stBuyStarResult_Result result() const;
  inline void set_result(::MiscProto::stBuyStarResult_Result value);

  // optional uint32 hasBuyNum = 2;
  inline bool has_hasbuynum() const;
  inline void clear_hasbuynum();
  static const int kHasBuyNumFieldNumber = 2;
  inline ::google::protobuf::uint32 hasbuynum() const;
  inline void set_hasbuynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stBuyStarResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_hasbuynum();
  inline void clear_has_hasbuynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 hasbuynum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stBuyStarResult* default_instance_;
};
// -------------------------------------------------------------------

class ReqOpenDrawWindow : public ::google::protobuf::Message {
 public:
  ReqOpenDrawWindow();
  virtual ~ReqOpenDrawWindow();

  ReqOpenDrawWindow(const ReqOpenDrawWindow& from);

  inline ReqOpenDrawWindow& operator=(const ReqOpenDrawWindow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOpenDrawWindow& default_instance();

  void Swap(ReqOpenDrawWindow* other);

  // implements Message ----------------------------------------------

  ReqOpenDrawWindow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOpenDrawWindow& from);
  void MergeFrom(const ReqOpenDrawWindow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqOpenDrawWindow_ProtoModID ProtoModID;
  static const ProtoModID ModID = ReqOpenDrawWindow_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ReqOpenDrawWindow_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ReqOpenDrawWindow_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ReqOpenDrawWindow_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ReqOpenDrawWindow_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ReqOpenDrawWindow_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ReqOpenDrawWindow_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ReqOpenDrawWindow_ProtoModID_Parse(name, value);
  }

  typedef ReqOpenDrawWindow_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ReqOpenDrawWindow_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ReqOpenDrawWindow_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ReqOpenDrawWindow_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ReqOpenDrawWindow_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ReqOpenDrawWindow_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ReqOpenDrawWindow_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ReqOpenDrawWindow_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ReqOpenDrawWindow_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.ReqOpenDrawWindow)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static ReqOpenDrawWindow* default_instance_;
};
// -------------------------------------------------------------------

class stDrawWindowInfo : public ::google::protobuf::Message {
 public:
  stDrawWindowInfo();
  virtual ~stDrawWindowInfo();

  stDrawWindowInfo(const stDrawWindowInfo& from);

  inline stDrawWindowInfo& operator=(const stDrawWindowInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDrawWindowInfo& default_instance();

  void Swap(stDrawWindowInfo* other);

  // implements Message ----------------------------------------------

  stDrawWindowInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDrawWindowInfo& from);
  void MergeFrom(const stDrawWindowInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDrawWindowInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDrawWindowInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDrawWindowInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDrawWindowInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDrawWindowInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDrawWindowInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDrawWindowInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDrawWindowInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDrawWindowInfo_ProtoModID_Parse(name, value);
  }

  typedef stDrawWindowInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDrawWindowInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDrawWindowInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDrawWindowInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDrawWindowInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDrawWindowInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDrawWindowInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDrawWindowInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDrawWindowInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 goldFreeRemainTime = 1;
  inline bool has_goldfreeremaintime() const;
  inline void clear_goldfreeremaintime();
  static const int kGoldFreeRemainTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 goldfreeremaintime() const;
  inline void set_goldfreeremaintime(::google::protobuf::uint32 value);

  // optional uint32 goldFreeRemainNum = 2;
  inline bool has_goldfreeremainnum() const;
  inline void clear_goldfreeremainnum();
  static const int kGoldFreeRemainNumFieldNumber = 2;
  inline ::google::protobuf::uint32 goldfreeremainnum() const;
  inline void set_goldfreeremainnum(::google::protobuf::uint32 value);

  // optional uint32 diamondFreeRemainTime = 3;
  inline bool has_diamondfreeremaintime() const;
  inline void clear_diamondfreeremaintime();
  static const int kDiamondFreeRemainTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 diamondfreeremaintime() const;
  inline void set_diamondfreeremaintime(::google::protobuf::uint32 value);

  // optional uint32 drawHeroFreeRemainTime = 4;
  inline bool has_drawherofreeremaintime() const;
  inline void clear_drawherofreeremaintime();
  static const int kDrawHeroFreeRemainTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 drawherofreeremaintime() const;
  inline void set_drawherofreeremaintime(::google::protobuf::uint32 value);

  // optional uint32 diamondDrawNum = 5;
  inline bool has_diamonddrawnum() const;
  inline void clear_diamonddrawnum();
  static const int kDiamondDrawNumFieldNumber = 5;
  inline ::google::protobuf::uint32 diamonddrawnum() const;
  inline void set_diamonddrawnum(::google::protobuf::uint32 value);

  // optional uint32 heroDrawNum = 6;
  inline bool has_herodrawnum() const;
  inline void clear_herodrawnum();
  static const int kHeroDrawNumFieldNumber = 6;
  inline ::google::protobuf::uint32 herodrawnum() const;
  inline void set_herodrawnum(::google::protobuf::uint32 value);

  // optional bool hasGoldDraw = 7;
  inline bool has_hasgolddraw() const;
  inline void clear_hasgolddraw();
  static const int kHasGoldDrawFieldNumber = 7;
  inline bool hasgolddraw() const;
  inline void set_hasgolddraw(bool value);

  // optional bool hasGold10Draw = 8;
  inline bool has_hasgold10draw() const;
  inline void clear_hasgold10draw();
  static const int kHasGold10DrawFieldNumber = 8;
  inline bool hasgold10draw() const;
  inline void set_hasgold10draw(bool value);

  // optional bool hasDiamondDraw = 9;
  inline bool has_hasdiamonddraw() const;
  inline void clear_hasdiamonddraw();
  static const int kHasDiamondDrawFieldNumber = 9;
  inline bool hasdiamonddraw() const;
  inline void set_hasdiamonddraw(bool value);

  // optional bool hasDiamond10Draw = 10;
  inline bool has_hasdiamond10draw() const;
  inline void clear_hasdiamond10draw();
  static const int kHasDiamond10DrawFieldNumber = 10;
  inline bool hasdiamond10draw() const;
  inline void set_hasdiamond10draw(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stDrawWindowInfo)
 private:
  inline void set_has_goldfreeremaintime();
  inline void clear_has_goldfreeremaintime();
  inline void set_has_goldfreeremainnum();
  inline void clear_has_goldfreeremainnum();
  inline void set_has_diamondfreeremaintime();
  inline void clear_has_diamondfreeremaintime();
  inline void set_has_drawherofreeremaintime();
  inline void clear_has_drawherofreeremaintime();
  inline void set_has_diamonddrawnum();
  inline void clear_has_diamonddrawnum();
  inline void set_has_herodrawnum();
  inline void clear_has_herodrawnum();
  inline void set_has_hasgolddraw();
  inline void clear_has_hasgolddraw();
  inline void set_has_hasgold10draw();
  inline void clear_has_hasgold10draw();
  inline void set_has_hasdiamonddraw();
  inline void clear_has_hasdiamonddraw();
  inline void set_has_hasdiamond10draw();
  inline void clear_has_hasdiamond10draw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 goldfreeremaintime_;
  ::google::protobuf::uint32 goldfreeremainnum_;
  ::google::protobuf::uint32 diamondfreeremaintime_;
  ::google::protobuf::uint32 drawherofreeremaintime_;
  ::google::protobuf::uint32 diamonddrawnum_;
  ::google::protobuf::uint32 herodrawnum_;
  bool hasgolddraw_;
  bool hasgold10draw_;
  bool hasdiamonddraw_;
  bool hasdiamond10draw_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stDrawWindowInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqDraw : public ::google::protobuf::Message {
 public:
  stReqDraw();
  virtual ~stReqDraw();

  stReqDraw(const stReqDraw& from);

  inline stReqDraw& operator=(const stReqDraw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDraw& default_instance();

  void Swap(stReqDraw* other);

  // implements Message ----------------------------------------------

  stReqDraw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDraw& from);
  void MergeFrom(const stReqDraw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDraw_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDraw_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDraw_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDraw_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDraw_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDraw_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDraw_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDraw_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDraw_ProtoModID_Parse(name, value);
  }

  typedef stReqDraw_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDraw_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDraw_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDraw_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDraw_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDraw_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDraw_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDraw_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDraw_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.eDrawType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::MiscProto::eDrawType type() const;
  inline void set_type(::MiscProto::eDrawType value);

  // optional uint32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDraw)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDraw* default_instance_;
};
// -------------------------------------------------------------------

class stSynDrawItem : public ::google::protobuf::Message {
 public:
  stSynDrawItem();
  virtual ~stSynDrawItem();

  stSynDrawItem(const stSynDrawItem& from);

  inline stSynDrawItem& operator=(const stSynDrawItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynDrawItem& default_instance();

  void Swap(stSynDrawItem* other);

  // implements Message ----------------------------------------------

  stSynDrawItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynDrawItem& from);
  void MergeFrom(const stSynDrawItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynDrawItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynDrawItem* default_instance_;
};
// -------------------------------------------------------------------

class stDrawResult : public ::google::protobuf::Message {
 public:
  stDrawResult();
  virtual ~stDrawResult();

  stDrawResult(const stDrawResult& from);

  inline stDrawResult& operator=(const stDrawResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDrawResult& default_instance();

  void Swap(stDrawResult* other);

  // implements Message ----------------------------------------------

  stDrawResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDrawResult& from);
  void MergeFrom(const stDrawResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDrawResult_Result Result;
  static const Result SUCCESS = stDrawResult_Result_SUCCESS;
  static const Result MONEY_NOT_ENOUGH = stDrawResult_Result_MONEY_NOT_ENOUGH;
  static const Result BAG_FULL = stDrawResult_Result_BAG_FULL;
  static const Result DIAMOND_NOT_ENOUGH = stDrawResult_Result_DIAMOND_NOT_ENOUGH;
  static inline bool Result_IsValid(int value) {
    return stDrawResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stDrawResult_Result_Result_MIN;
  static const Result Result_MAX =
    stDrawResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stDrawResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stDrawResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stDrawResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stDrawResult_Result_Parse(name, value);
  }

  typedef stDrawResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDrawResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDrawResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDrawResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDrawResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDrawResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDrawResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDrawResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDrawResult_ProtoModID_Parse(name, value);
  }

  typedef stDrawResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDrawResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDrawResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDrawResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDrawResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDrawResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDrawResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDrawResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDrawResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stDrawResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stDrawResult_Result result() const;
  inline void set_result(::MiscProto::stDrawResult_Result value);

  // repeated .MiscProto.stSynDrawItem items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::MiscProto::stSynDrawItem& items(int index) const;
  inline ::MiscProto::stSynDrawItem* mutable_items(int index);
  inline ::MiscProto::stSynDrawItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynDrawItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynDrawItem >*
      mutable_items();

  // optional .MiscProto.eDrawType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::MiscProto::eDrawType type() const;
  inline void set_type(::MiscProto::eDrawType value);

  // optional uint32 diamondDrawNum = 4;
  inline bool has_diamonddrawnum() const;
  inline void clear_diamonddrawnum();
  static const int kDiamondDrawNumFieldNumber = 4;
  inline ::google::protobuf::uint32 diamonddrawnum() const;
  inline void set_diamonddrawnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stDrawResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_diamonddrawnum();
  inline void clear_has_diamonddrawnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynDrawItem > items_;
  int result_;
  int type_;
  ::google::protobuf::uint32 diamonddrawnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stDrawResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynMyTitle : public ::google::protobuf::Message {
 public:
  stSynMyTitle();
  virtual ~stSynMyTitle();

  stSynMyTitle(const stSynMyTitle& from);

  inline stSynMyTitle& operator=(const stSynMyTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynMyTitle& default_instance();

  void Swap(stSynMyTitle* other);

  // implements Message ----------------------------------------------

  stSynMyTitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynMyTitle& from);
  void MergeFrom(const stSynMyTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynMyTitle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynMyTitle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynMyTitle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynMyTitle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynMyTitle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynMyTitle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynMyTitle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynMyTitle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynMyTitle_ProtoModID_Parse(name, value);
  }

  typedef stSynMyTitle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynMyTitle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynMyTitle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynMyTitle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynMyTitle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynMyTitle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynMyTitle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynMyTitle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynMyTitle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 allTitle = 1;
  inline int alltitle_size() const;
  inline void clear_alltitle();
  static const int kAllTitleFieldNumber = 1;
  inline ::google::protobuf::uint32 alltitle(int index) const;
  inline void set_alltitle(int index, ::google::protobuf::uint32 value);
  inline void add_alltitle(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      alltitle() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_alltitle();

  // optional uint32 activeTitle = 2;
  inline bool has_activetitle() const;
  inline void clear_activetitle();
  static const int kActiveTitleFieldNumber = 2;
  inline ::google::protobuf::uint32 activetitle() const;
  inline void set_activetitle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynMyTitle)
 private:
  inline void set_has_activetitle();
  inline void clear_has_activetitle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > alltitle_;
  ::google::protobuf::uint32 activetitle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynMyTitle* default_instance_;
};
// -------------------------------------------------------------------

class stActiveOneTitle : public ::google::protobuf::Message {
 public:
  stActiveOneTitle();
  virtual ~stActiveOneTitle();

  stActiveOneTitle(const stActiveOneTitle& from);

  inline stActiveOneTitle& operator=(const stActiveOneTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stActiveOneTitle& default_instance();

  void Swap(stActiveOneTitle* other);

  // implements Message ----------------------------------------------

  stActiveOneTitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stActiveOneTitle& from);
  void MergeFrom(const stActiveOneTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stActiveOneTitle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stActiveOneTitle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stActiveOneTitle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stActiveOneTitle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stActiveOneTitle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stActiveOneTitle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stActiveOneTitle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stActiveOneTitle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stActiveOneTitle_ProtoModID_Parse(name, value);
  }

  typedef stActiveOneTitle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stActiveOneTitle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stActiveOneTitle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stActiveOneTitle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stActiveOneTitle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stActiveOneTitle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stActiveOneTitle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stActiveOneTitle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stActiveOneTitle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 titleID = 1;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 titleid() const;
  inline void set_titleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stActiveOneTitle)
 private:
  inline void set_has_titleid();
  inline void clear_has_titleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 titleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stActiveOneTitle* default_instance_;
};
// -------------------------------------------------------------------

class stActiveTitleResult : public ::google::protobuf::Message {
 public:
  stActiveTitleResult();
  virtual ~stActiveTitleResult();

  stActiveTitleResult(const stActiveTitleResult& from);

  inline stActiveTitleResult& operator=(const stActiveTitleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stActiveTitleResult& default_instance();

  void Swap(stActiveTitleResult* other);

  // implements Message ----------------------------------------------

  stActiveTitleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stActiveTitleResult& from);
  void MergeFrom(const stActiveTitleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stActiveTitleResult_eResult eResult;
  static const eResult SUCCESS = stActiveTitleResult_eResult_SUCCESS;
  static const eResult TITLE_NOT_EXIST = stActiveTitleResult_eResult_TITLE_NOT_EXIST;
  static inline bool eResult_IsValid(int value) {
    return stActiveTitleResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stActiveTitleResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stActiveTitleResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stActiveTitleResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stActiveTitleResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stActiveTitleResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stActiveTitleResult_eResult_Parse(name, value);
  }

  typedef stActiveTitleResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stActiveTitleResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stActiveTitleResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stActiveTitleResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stActiveTitleResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stActiveTitleResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stActiveTitleResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stActiveTitleResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stActiveTitleResult_ProtoModID_Parse(name, value);
  }

  typedef stActiveTitleResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stActiveTitleResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stActiveTitleResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stActiveTitleResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stActiveTitleResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stActiveTitleResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stActiveTitleResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stActiveTitleResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stActiveTitleResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stActiveTitleResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stActiveTitleResult_eResult result() const;
  inline void set_result(::MiscProto::stActiveTitleResult_eResult value);

  // optional uint32 titleID = 2;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIDFieldNumber = 2;
  inline ::google::protobuf::uint32 titleid() const;
  inline void set_titleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stActiveTitleResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_titleid();
  inline void clear_has_titleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 titleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stActiveTitleResult* default_instance_;
};
// -------------------------------------------------------------------

class stObtainOneTitle : public ::google::protobuf::Message {
 public:
  stObtainOneTitle();
  virtual ~stObtainOneTitle();

  stObtainOneTitle(const stObtainOneTitle& from);

  inline stObtainOneTitle& operator=(const stObtainOneTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stObtainOneTitle& default_instance();

  void Swap(stObtainOneTitle* other);

  // implements Message ----------------------------------------------

  stObtainOneTitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stObtainOneTitle& from);
  void MergeFrom(const stObtainOneTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stObtainOneTitle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stObtainOneTitle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stObtainOneTitle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stObtainOneTitle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stObtainOneTitle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stObtainOneTitle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stObtainOneTitle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stObtainOneTitle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stObtainOneTitle_ProtoModID_Parse(name, value);
  }

  typedef stObtainOneTitle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stObtainOneTitle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stObtainOneTitle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stObtainOneTitle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stObtainOneTitle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stObtainOneTitle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stObtainOneTitle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stObtainOneTitle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stObtainOneTitle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 titleID = 1;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 titleid() const;
  inline void set_titleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stObtainOneTitle)
 private:
  inline void set_has_titleid();
  inline void clear_has_titleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 titleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stObtainOneTitle* default_instance_;
};
// -------------------------------------------------------------------

class stBuyInvestPlan : public ::google::protobuf::Message {
 public:
  stBuyInvestPlan();
  virtual ~stBuyInvestPlan();

  stBuyInvestPlan(const stBuyInvestPlan& from);

  inline stBuyInvestPlan& operator=(const stBuyInvestPlan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuyInvestPlan& default_instance();

  void Swap(stBuyInvestPlan* other);

  // implements Message ----------------------------------------------

  stBuyInvestPlan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuyInvestPlan& from);
  void MergeFrom(const stBuyInvestPlan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuyInvestPlan_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuyInvestPlan_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuyInvestPlan_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuyInvestPlan_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuyInvestPlan_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuyInvestPlan_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuyInvestPlan_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuyInvestPlan_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuyInvestPlan_ProtoModID_Parse(name, value);
  }

  typedef stBuyInvestPlan_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuyInvestPlan_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuyInvestPlan_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuyInvestPlan_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuyInvestPlan_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuyInvestPlan_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuyInvestPlan_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuyInvestPlan_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuyInvestPlan_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stBuyInvestPlan)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stBuyInvestPlan* default_instance_;
};
// -------------------------------------------------------------------

class stBuyInvestPlanResult : public ::google::protobuf::Message {
 public:
  stBuyInvestPlanResult();
  virtual ~stBuyInvestPlanResult();

  stBuyInvestPlanResult(const stBuyInvestPlanResult& from);

  inline stBuyInvestPlanResult& operator=(const stBuyInvestPlanResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuyInvestPlanResult& default_instance();

  void Swap(stBuyInvestPlanResult* other);

  // implements Message ----------------------------------------------

  stBuyInvestPlanResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuyInvestPlanResult& from);
  void MergeFrom(const stBuyInvestPlanResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuyInvestPlanResult_eResult eResult;
  static const eResult eSUCCESS = stBuyInvestPlanResult_eResult_eSUCCESS;
  static const eResult eDIAMOND_NOT_ENOGUH = stBuyInvestPlanResult_eResult_eDIAMOND_NOT_ENOGUH;
  static const eResult eVIP_LV_TOO_LOW = stBuyInvestPlanResult_eResult_eVIP_LV_TOO_LOW;
  static const eResult eHAS_BUY = stBuyInvestPlanResult_eResult_eHAS_BUY;
  static inline bool eResult_IsValid(int value) {
    return stBuyInvestPlanResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stBuyInvestPlanResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stBuyInvestPlanResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stBuyInvestPlanResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stBuyInvestPlanResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stBuyInvestPlanResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stBuyInvestPlanResult_eResult_Parse(name, value);
  }

  typedef stBuyInvestPlanResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuyInvestPlanResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuyInvestPlanResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuyInvestPlanResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuyInvestPlanResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuyInvestPlanResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuyInvestPlanResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuyInvestPlanResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuyInvestPlanResult_ProtoModID_Parse(name, value);
  }

  typedef stBuyInvestPlanResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuyInvestPlanResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuyInvestPlanResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuyInvestPlanResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuyInvestPlanResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuyInvestPlanResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuyInvestPlanResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuyInvestPlanResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuyInvestPlanResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stBuyInvestPlanResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stBuyInvestPlanResult_eResult result() const;
  inline void set_result(::MiscProto::stBuyInvestPlanResult_eResult value);

  // optional string index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline const ::std::string& index() const;
  inline void set_index(const ::std::string& value);
  inline void set_index(const char* value);
  inline void set_index(const char* value, size_t size);
  inline ::std::string* mutable_index();
  inline ::std::string* release_index();
  inline void set_allocated_index(::std::string* index);

  // @@protoc_insertion_point(class_scope:MiscProto.stBuyInvestPlanResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* index_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stBuyInvestPlanResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqInvestPlanReward : public ::google::protobuf::Message {
 public:
  stReqInvestPlanReward();
  virtual ~stReqInvestPlanReward();

  stReqInvestPlanReward(const stReqInvestPlanReward& from);

  inline stReqInvestPlanReward& operator=(const stReqInvestPlanReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqInvestPlanReward& default_instance();

  void Swap(stReqInvestPlanReward* other);

  // implements Message ----------------------------------------------

  stReqInvestPlanReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqInvestPlanReward& from);
  void MergeFrom(const stReqInvestPlanReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqInvestPlanReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqInvestPlanReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqInvestPlanReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqInvestPlanReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqInvestPlanReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqInvestPlanReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqInvestPlanReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqInvestPlanReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqInvestPlanReward_ProtoModID_Parse(name, value);
  }

  typedef stReqInvestPlanReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqInvestPlanReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqInvestPlanReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqInvestPlanReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqInvestPlanReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqInvestPlanReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqInvestPlanReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqInvestPlanReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqInvestPlanReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqInvestPlanReward)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqInvestPlanReward* default_instance_;
};
// -------------------------------------------------------------------

class stInvestPlanRewardResult : public ::google::protobuf::Message {
 public:
  stInvestPlanRewardResult();
  virtual ~stInvestPlanRewardResult();

  stInvestPlanRewardResult(const stInvestPlanRewardResult& from);

  inline stInvestPlanRewardResult& operator=(const stInvestPlanRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInvestPlanRewardResult& default_instance();

  void Swap(stInvestPlanRewardResult* other);

  // implements Message ----------------------------------------------

  stInvestPlanRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInvestPlanRewardResult& from);
  void MergeFrom(const stInvestPlanRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInvestPlanRewardResult_eResult eResult;
  static const eResult eSUCCESS = stInvestPlanRewardResult_eResult_eSUCCESS;
  static const eResult eHAS_GET_REWARD = stInvestPlanRewardResult_eResult_eHAS_GET_REWARD;
  static const eResult eHAS_NOT_BUY_INVEST_PLAN = stInvestPlanRewardResult_eResult_eHAS_NOT_BUY_INVEST_PLAN;
  static inline bool eResult_IsValid(int value) {
    return stInvestPlanRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stInvestPlanRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stInvestPlanRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stInvestPlanRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stInvestPlanRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stInvestPlanRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stInvestPlanRewardResult_eResult_Parse(name, value);
  }

  typedef stInvestPlanRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInvestPlanRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInvestPlanRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInvestPlanRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInvestPlanRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInvestPlanRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInvestPlanRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInvestPlanRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInvestPlanRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stInvestPlanRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInvestPlanRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInvestPlanRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInvestPlanRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInvestPlanRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInvestPlanRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInvestPlanRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInvestPlanRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInvestPlanRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stInvestPlanRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stInvestPlanRewardResult_eResult result() const;
  inline void set_result(::MiscProto::stInvestPlanRewardResult_eResult value);

  // optional uint32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional string index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline const ::std::string& index() const;
  inline void set_index(const ::std::string& value);
  inline void set_index(const char* value);
  inline void set_index(const char* value, size_t size);
  inline ::std::string* mutable_index();
  inline ::std::string* release_index();
  inline void set_allocated_index(::std::string* index);

  // @@protoc_insertion_point(class_scope:MiscProto.stInvestPlanRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 lv_;
  ::std::string* index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stInvestPlanRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqEatDinner : public ::google::protobuf::Message {
 public:
  stReqEatDinner();
  virtual ~stReqEatDinner();

  stReqEatDinner(const stReqEatDinner& from);

  inline stReqEatDinner& operator=(const stReqEatDinner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqEatDinner& default_instance();

  void Swap(stReqEatDinner* other);

  // implements Message ----------------------------------------------

  stReqEatDinner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqEatDinner& from);
  void MergeFrom(const stReqEatDinner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqEatDinner_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqEatDinner_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqEatDinner_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqEatDinner_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqEatDinner_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqEatDinner_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqEatDinner_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqEatDinner_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqEatDinner_ProtoModID_Parse(name, value);
  }

  typedef stReqEatDinner_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqEatDinner_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqEatDinner_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqEatDinner_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqEatDinner_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqEatDinner_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqEatDinner_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqEatDinner_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqEatDinner_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqEatDinner)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqEatDinner* default_instance_;
};
// -------------------------------------------------------------------

class stEatDinnerResult : public ::google::protobuf::Message {
 public:
  stEatDinnerResult();
  virtual ~stEatDinnerResult();

  stEatDinnerResult(const stEatDinnerResult& from);

  inline stEatDinnerResult& operator=(const stEatDinnerResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEatDinnerResult& default_instance();

  void Swap(stEatDinnerResult* other);

  // implements Message ----------------------------------------------

  stEatDinnerResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEatDinnerResult& from);
  void MergeFrom(const stEatDinnerResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEatDinnerResult_eResult eResult;
  static const eResult eSUCCESS = stEatDinnerResult_eResult_eSUCCESS;
  static const eResult eTIME_LIMIT = stEatDinnerResult_eResult_eTIME_LIMIT;
  static const eResult eHAS_EAT = stEatDinnerResult_eResult_eHAS_EAT;
  static const eResult eEAT_DINNER_NUM_OUT = stEatDinnerResult_eResult_eEAT_DINNER_NUM_OUT;
  static inline bool eResult_IsValid(int value) {
    return stEatDinnerResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stEatDinnerResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stEatDinnerResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stEatDinnerResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stEatDinnerResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stEatDinnerResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stEatDinnerResult_eResult_Parse(name, value);
  }

  typedef stEatDinnerResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEatDinnerResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEatDinnerResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEatDinnerResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEatDinnerResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEatDinnerResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEatDinnerResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEatDinnerResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEatDinnerResult_ProtoModID_Parse(name, value);
  }

  typedef stEatDinnerResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEatDinnerResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEatDinnerResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEatDinnerResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEatDinnerResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEatDinnerResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEatDinnerResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEatDinnerResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEatDinnerResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stEatDinnerResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stEatDinnerResult_eResult result() const;
  inline void set_result(::MiscProto::stEatDinnerResult_eResult value);

  // optional uint32 hasEatedNum = 2;
  inline bool has_haseatednum() const;
  inline void clear_haseatednum();
  static const int kHasEatedNumFieldNumber = 2;
  inline ::google::protobuf::uint32 haseatednum() const;
  inline void set_haseatednum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stEatDinnerResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_haseatednum();
  inline void clear_has_haseatednum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 haseatednum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stEatDinnerResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynActivityData : public ::google::protobuf::Message {
 public:
  stSynActivityData();
  virtual ~stSynActivityData();

  stSynActivityData(const stSynActivityData& from);

  inline stSynActivityData& operator=(const stSynActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynActivityData& default_instance();

  void Swap(stSynActivityData* other);

  // implements Message ----------------------------------------------

  stSynActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynActivityData& from);
  void MergeFrom(const stSynActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynActivityData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynActivityData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynActivityData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynActivityData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynActivityData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynActivityData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynActivityData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynActivityData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynActivityData_ProtoModID_Parse(name, value);
  }

  typedef stSynActivityData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynActivityData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynActivityData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynActivityData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynActivityData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynActivityData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynActivityData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynActivityData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynActivityData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool hasBuyInvestment = 1;
  inline bool has_hasbuyinvestment() const;
  inline void clear_hasbuyinvestment();
  static const int kHasBuyInvestmentFieldNumber = 1;
  inline bool hasbuyinvestment() const;
  inline void set_hasbuyinvestment(bool value);

  // repeated uint32 investGetRewardLv = 2;
  inline int investgetrewardlv_size() const;
  inline void clear_investgetrewardlv();
  static const int kInvestGetRewardLvFieldNumber = 2;
  inline ::google::protobuf::uint32 investgetrewardlv(int index) const;
  inline void set_investgetrewardlv(int index, ::google::protobuf::uint32 value);
  inline void add_investgetrewardlv(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      investgetrewardlv() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_investgetrewardlv();

  // optional uint32 eatDinnerNum = 3;
  inline bool has_eatdinnernum() const;
  inline void clear_eatdinnernum();
  static const int kEatDinnerNumFieldNumber = 3;
  inline ::google::protobuf::uint32 eatdinnernum() const;
  inline void set_eatdinnernum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynActivityData)
 private:
  inline void set_has_hasbuyinvestment();
  inline void clear_has_hasbuyinvestment();
  inline void set_has_eatdinnernum();
  inline void clear_has_eatdinnernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > investgetrewardlv_;
  bool hasbuyinvestment_;
  ::google::protobuf::uint32 eatdinnernum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynActivityData* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenCaptureTreasure : public ::google::protobuf::Message {
 public:
  stReqOpenCaptureTreasure();
  virtual ~stReqOpenCaptureTreasure();

  stReqOpenCaptureTreasure(const stReqOpenCaptureTreasure& from);

  inline stReqOpenCaptureTreasure& operator=(const stReqOpenCaptureTreasure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenCaptureTreasure& default_instance();

  void Swap(stReqOpenCaptureTreasure* other);

  // implements Message ----------------------------------------------

  stReqOpenCaptureTreasure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenCaptureTreasure& from);
  void MergeFrom(const stReqOpenCaptureTreasure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenCaptureTreasure_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenCaptureTreasure_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenCaptureTreasure_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenCaptureTreasure_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenCaptureTreasure_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenCaptureTreasure_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenCaptureTreasure_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenCaptureTreasure_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenCaptureTreasure_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenCaptureTreasure_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenCaptureTreasure_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenCaptureTreasure_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenCaptureTreasure_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenCaptureTreasure_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenCaptureTreasure_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenCaptureTreasure_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenCaptureTreasure_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenCaptureTreasure_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqOpenCaptureTreasure)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenCaptureTreasure* default_instance_;
};
// -------------------------------------------------------------------

class stSynCaptureTreasureInfo : public ::google::protobuf::Message {
 public:
  stSynCaptureTreasureInfo();
  virtual ~stSynCaptureTreasureInfo();

  stSynCaptureTreasureInfo(const stSynCaptureTreasureInfo& from);

  inline stSynCaptureTreasureInfo& operator=(const stSynCaptureTreasureInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynCaptureTreasureInfo& default_instance();

  void Swap(stSynCaptureTreasureInfo* other);

  // implements Message ----------------------------------------------

  stSynCaptureTreasureInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynCaptureTreasureInfo& from);
  void MergeFrom(const stSynCaptureTreasureInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 resType = 1;
  inline bool has_restype() const;
  inline void clear_restype();
  static const int kResTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 restype() const;
  inline void set_restype(::google::protobuf::uint32 value);

  // optional uint32 resNum = 2;
  inline bool has_resnum() const;
  inline void clear_resnum();
  static const int kResNumFieldNumber = 2;
  inline ::google::protobuf::uint32 resnum() const;
  inline void set_resnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynCaptureTreasureInfo)
 private:
  inline void set_has_restype();
  inline void clear_has_restype();
  inline void set_has_resnum();
  inline void clear_has_resnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 restype_;
  ::google::protobuf::uint32 resnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynCaptureTreasureInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetCaptureTreasure : public ::google::protobuf::Message {
 public:
  stRetCaptureTreasure();
  virtual ~stRetCaptureTreasure();

  stRetCaptureTreasure(const stRetCaptureTreasure& from);

  inline stRetCaptureTreasure& operator=(const stRetCaptureTreasure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetCaptureTreasure& default_instance();

  void Swap(stRetCaptureTreasure* other);

  // implements Message ----------------------------------------------

  stRetCaptureTreasure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetCaptureTreasure& from);
  void MergeFrom(const stRetCaptureTreasure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetCaptureTreasure_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetCaptureTreasure_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetCaptureTreasure_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetCaptureTreasure_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetCaptureTreasure_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetCaptureTreasure_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetCaptureTreasure_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetCaptureTreasure_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetCaptureTreasure_ProtoModID_Parse(name, value);
  }

  typedef stRetCaptureTreasure_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetCaptureTreasure_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetCaptureTreasure_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetCaptureTreasure_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetCaptureTreasure_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetCaptureTreasure_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetCaptureTreasure_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetCaptureTreasure_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetCaptureTreasure_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stSynCaptureTreasureInfo tresures = 1;
  inline int tresures_size() const;
  inline void clear_tresures();
  static const int kTresuresFieldNumber = 1;
  inline const ::MiscProto::stSynCaptureTreasureInfo& tresures(int index) const;
  inline ::MiscProto::stSynCaptureTreasureInfo* mutable_tresures(int index);
  inline ::MiscProto::stSynCaptureTreasureInfo* add_tresures();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynCaptureTreasureInfo >&
      tresures() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynCaptureTreasureInfo >*
      mutable_tresures();

  // optional uint32 remainTime = 2;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 remaintime() const;
  inline void set_remaintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetCaptureTreasure)
 private:
  inline void set_has_remaintime();
  inline void clear_has_remaintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynCaptureTreasureInfo > tresures_;
  ::google::protobuf::uint32 remaintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetCaptureTreasure* default_instance_;
};
// -------------------------------------------------------------------

class stReqCombineTreasure : public ::google::protobuf::Message {
 public:
  stReqCombineTreasure();
  virtual ~stReqCombineTreasure();

  stReqCombineTreasure(const stReqCombineTreasure& from);

  inline stReqCombineTreasure& operator=(const stReqCombineTreasure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCombineTreasure& default_instance();

  void Swap(stReqCombineTreasure* other);

  // implements Message ----------------------------------------------

  stReqCombineTreasure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCombineTreasure& from);
  void MergeFrom(const stReqCombineTreasure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCombineTreasure_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCombineTreasure_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCombineTreasure_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCombineTreasure_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCombineTreasure_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCombineTreasure_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCombineTreasure_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCombineTreasure_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCombineTreasure_ProtoModID_Parse(name, value);
  }

  typedef stReqCombineTreasure_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCombineTreasure_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCombineTreasure_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCombineTreasure_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCombineTreasure_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCombineTreasure_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCombineTreasure_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCombineTreasure_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCombineTreasure_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 combineType = 1;
  inline bool has_combinetype() const;
  inline void clear_combinetype();
  static const int kCombineTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 combinetype() const;
  inline void set_combinetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqCombineTreasure)
 private:
  inline void set_has_combinetype();
  inline void clear_has_combinetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 combinetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqCombineTreasure* default_instance_;
};
// -------------------------------------------------------------------

class stCombineTreasureResult : public ::google::protobuf::Message {
 public:
  stCombineTreasureResult();
  virtual ~stCombineTreasureResult();

  stCombineTreasureResult(const stCombineTreasureResult& from);

  inline stCombineTreasureResult& operator=(const stCombineTreasureResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCombineTreasureResult& default_instance();

  void Swap(stCombineTreasureResult* other);

  // implements Message ----------------------------------------------

  stCombineTreasureResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCombineTreasureResult& from);
  void MergeFrom(const stCombineTreasureResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCombineTreasureResult_eResult eResult;
  static const eResult eSUCCESS = stCombineTreasureResult_eResult_eSUCCESS;
  static const eResult eTREASURE_NOT_ENOUGH = stCombineTreasureResult_eResult_eTREASURE_NOT_ENOUGH;
  static const eResult eBAG_FULL = stCombineTreasureResult_eResult_eBAG_FULL;
  static const eResult eINNER_ERROR = stCombineTreasureResult_eResult_eINNER_ERROR;
  static inline bool eResult_IsValid(int value) {
    return stCombineTreasureResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stCombineTreasureResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stCombineTreasureResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stCombineTreasureResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stCombineTreasureResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stCombineTreasureResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stCombineTreasureResult_eResult_Parse(name, value);
  }

  typedef stCombineTreasureResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCombineTreasureResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCombineTreasureResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCombineTreasureResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCombineTreasureResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCombineTreasureResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCombineTreasureResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCombineTreasureResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCombineTreasureResult_ProtoModID_Parse(name, value);
  }

  typedef stCombineTreasureResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCombineTreasureResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCombineTreasureResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCombineTreasureResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCombineTreasureResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCombineTreasureResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCombineTreasureResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCombineTreasureResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCombineTreasureResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stCombineTreasureResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stCombineTreasureResult_eResult result() const;
  inline void set_result(::MiscProto::stCombineTreasureResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stCombineTreasureResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stCombineTreasureResult* default_instance_;
};
// -------------------------------------------------------------------

class stBuyPeaceModuleTime : public ::google::protobuf::Message {
 public:
  stBuyPeaceModuleTime();
  virtual ~stBuyPeaceModuleTime();

  stBuyPeaceModuleTime(const stBuyPeaceModuleTime& from);

  inline stBuyPeaceModuleTime& operator=(const stBuyPeaceModuleTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuyPeaceModuleTime& default_instance();

  void Swap(stBuyPeaceModuleTime* other);

  // implements Message ----------------------------------------------

  stBuyPeaceModuleTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuyPeaceModuleTime& from);
  void MergeFrom(const stBuyPeaceModuleTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuyPeaceModuleTime_eType eType;
  static const eType e1_HOUR_ITEM = stBuyPeaceModuleTime_eType_e1_HOUR_ITEM;
  static const eType e3_HOUR_ITEM = stBuyPeaceModuleTime_eType_e3_HOUR_ITEM;
  static const eType e12_HOUR_ITEM = stBuyPeaceModuleTime_eType_e12_HOUR_ITEM;
  static const eType e10_DIAMOND = stBuyPeaceModuleTime_eType_e10_DIAMOND;
  static inline bool eType_IsValid(int value) {
    return stBuyPeaceModuleTime_eType_IsValid(value);
  }
  static const eType eType_MIN =
    stBuyPeaceModuleTime_eType_eType_MIN;
  static const eType eType_MAX =
    stBuyPeaceModuleTime_eType_eType_MAX;
  static const int eType_ARRAYSIZE =
    stBuyPeaceModuleTime_eType_eType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eType_descriptor() {
    return stBuyPeaceModuleTime_eType_descriptor();
  }
  static inline const ::std::string& eType_Name(eType value) {
    return stBuyPeaceModuleTime_eType_Name(value);
  }
  static inline bool eType_Parse(const ::std::string& name,
      eType* value) {
    return stBuyPeaceModuleTime_eType_Parse(name, value);
  }

  typedef stBuyPeaceModuleTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuyPeaceModuleTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuyPeaceModuleTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuyPeaceModuleTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuyPeaceModuleTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuyPeaceModuleTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuyPeaceModuleTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuyPeaceModuleTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuyPeaceModuleTime_ProtoModID_Parse(name, value);
  }

  typedef stBuyPeaceModuleTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuyPeaceModuleTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuyPeaceModuleTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuyPeaceModuleTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuyPeaceModuleTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuyPeaceModuleTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuyPeaceModuleTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuyPeaceModuleTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuyPeaceModuleTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stBuyPeaceModuleTime.eType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::MiscProto::stBuyPeaceModuleTime_eType type() const;
  inline void set_type(::MiscProto::stBuyPeaceModuleTime_eType value);

  // optional uint32 hour = 2;
  inline bool has_hour() const;
  inline void clear_hour();
  static const int kHourFieldNumber = 2;
  inline ::google::protobuf::uint32 hour() const;
  inline void set_hour(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stBuyPeaceModuleTime)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_hour();
  inline void clear_has_hour();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 hour_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stBuyPeaceModuleTime* default_instance_;
};
// -------------------------------------------------------------------

class stBuyPeaceModuleTimeResult : public ::google::protobuf::Message {
 public:
  stBuyPeaceModuleTimeResult();
  virtual ~stBuyPeaceModuleTimeResult();

  stBuyPeaceModuleTimeResult(const stBuyPeaceModuleTimeResult& from);

  inline stBuyPeaceModuleTimeResult& operator=(const stBuyPeaceModuleTimeResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuyPeaceModuleTimeResult& default_instance();

  void Swap(stBuyPeaceModuleTimeResult* other);

  // implements Message ----------------------------------------------

  stBuyPeaceModuleTimeResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuyPeaceModuleTimeResult& from);
  void MergeFrom(const stBuyPeaceModuleTimeResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuyPeaceModuleTimeResult_eResult eResult;
  static const eResult eSUCCESS = stBuyPeaceModuleTimeResult_eResult_eSUCCESS;
  static const eResult eHAS_NO_ITEM = stBuyPeaceModuleTimeResult_eResult_eHAS_NO_ITEM;
  static const eResult eDIAMOND_NOT_ENOUGH = stBuyPeaceModuleTimeResult_eResult_eDIAMOND_NOT_ENOUGH;
  static inline bool eResult_IsValid(int value) {
    return stBuyPeaceModuleTimeResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stBuyPeaceModuleTimeResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stBuyPeaceModuleTimeResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stBuyPeaceModuleTimeResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stBuyPeaceModuleTimeResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stBuyPeaceModuleTimeResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stBuyPeaceModuleTimeResult_eResult_Parse(name, value);
  }

  typedef stBuyPeaceModuleTimeResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuyPeaceModuleTimeResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuyPeaceModuleTimeResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuyPeaceModuleTimeResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuyPeaceModuleTimeResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuyPeaceModuleTimeResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuyPeaceModuleTimeResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuyPeaceModuleTimeResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuyPeaceModuleTimeResult_ProtoModID_Parse(name, value);
  }

  typedef stBuyPeaceModuleTimeResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuyPeaceModuleTimeResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuyPeaceModuleTimeResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuyPeaceModuleTimeResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuyPeaceModuleTimeResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuyPeaceModuleTimeResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuyPeaceModuleTimeResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuyPeaceModuleTimeResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuyPeaceModuleTimeResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stBuyPeaceModuleTimeResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stBuyPeaceModuleTimeResult_eResult result() const;
  inline void set_result(::MiscProto::stBuyPeaceModuleTimeResult_eResult value);

  // optional uint32 remainTime = 2;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 remaintime() const;
  inline void set_remaintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stBuyPeaceModuleTimeResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_remaintime();
  inline void clear_has_remaintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 remaintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stBuyPeaceModuleTimeResult* default_instance_;
};
// -------------------------------------------------------------------

class stCaptureTreasureUserInfo : public ::google::protobuf::Message {
 public:
  stCaptureTreasureUserInfo();
  virtual ~stCaptureTreasureUserInfo();

  stCaptureTreasureUserInfo(const stCaptureTreasureUserInfo& from);

  inline stCaptureTreasureUserInfo& operator=(const stCaptureTreasureUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCaptureTreasureUserInfo& default_instance();

  void Swap(stCaptureTreasureUserInfo* other);

  // implements Message ----------------------------------------------

  stCaptureTreasureUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCaptureTreasureUserInfo& from);
  void MergeFrom(const stCaptureTreasureUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 photoID = 6;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 6;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stCaptureTreasureUserInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stCaptureTreasureUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqChallengeUserList : public ::google::protobuf::Message {
 public:
  stReqChallengeUserList();
  virtual ~stReqChallengeUserList();

  stReqChallengeUserList(const stReqChallengeUserList& from);

  inline stReqChallengeUserList& operator=(const stReqChallengeUserList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqChallengeUserList& default_instance();

  void Swap(stReqChallengeUserList* other);

  // implements Message ----------------------------------------------

  stReqChallengeUserList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqChallengeUserList& from);
  void MergeFrom(const stReqChallengeUserList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqChallengeUserList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqChallengeUserList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqChallengeUserList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqChallengeUserList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqChallengeUserList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqChallengeUserList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqChallengeUserList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqChallengeUserList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqChallengeUserList_ProtoModID_Parse(name, value);
  }

  typedef stReqChallengeUserList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqChallengeUserList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqChallengeUserList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqChallengeUserList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqChallengeUserList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqChallengeUserList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqChallengeUserList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqChallengeUserList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqChallengeUserList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 resID = 2;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIDFieldNumber = 2;
  inline ::google::protobuf::uint32 resid() const;
  inline void set_resid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqChallengeUserList)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_resid();
  inline void clear_has_resid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 resid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqChallengeUserList* default_instance_;
};
// -------------------------------------------------------------------

class stRetChallengeUserList : public ::google::protobuf::Message {
 public:
  stRetChallengeUserList();
  virtual ~stRetChallengeUserList();

  stRetChallengeUserList(const stRetChallengeUserList& from);

  inline stRetChallengeUserList& operator=(const stRetChallengeUserList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetChallengeUserList& default_instance();

  void Swap(stRetChallengeUserList* other);

  // implements Message ----------------------------------------------

  stRetChallengeUserList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetChallengeUserList& from);
  void MergeFrom(const stRetChallengeUserList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetChallengeUserList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetChallengeUserList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetChallengeUserList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetChallengeUserList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetChallengeUserList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetChallengeUserList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetChallengeUserList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetChallengeUserList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetChallengeUserList_ProtoModID_Parse(name, value);
  }

  typedef stRetChallengeUserList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetChallengeUserList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetChallengeUserList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetChallengeUserList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetChallengeUserList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetChallengeUserList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetChallengeUserList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetChallengeUserList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetChallengeUserList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stCaptureTreasureUserInfo userInfo = 1;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  inline const ::MiscProto::stCaptureTreasureUserInfo& userinfo(int index) const;
  inline ::MiscProto::stCaptureTreasureUserInfo* mutable_userinfo(int index);
  inline ::MiscProto::stCaptureTreasureUserInfo* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stCaptureTreasureUserInfo >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stCaptureTreasureUserInfo >*
      mutable_userinfo();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetChallengeUserList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stCaptureTreasureUserInfo > userinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetChallengeUserList* default_instance_;
};
// -------------------------------------------------------------------

class stCaptureUserTreasure : public ::google::protobuf::Message {
 public:
  stCaptureUserTreasure();
  virtual ~stCaptureUserTreasure();

  stCaptureUserTreasure(const stCaptureUserTreasure& from);

  inline stCaptureUserTreasure& operator=(const stCaptureUserTreasure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCaptureUserTreasure& default_instance();

  void Swap(stCaptureUserTreasure* other);

  // implements Message ----------------------------------------------

  stCaptureUserTreasure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCaptureUserTreasure& from);
  void MergeFrom(const stCaptureUserTreasure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCaptureUserTreasure_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCaptureUserTreasure_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCaptureUserTreasure_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCaptureUserTreasure_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCaptureUserTreasure_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCaptureUserTreasure_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCaptureUserTreasure_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCaptureUserTreasure_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCaptureUserTreasure_ProtoModID_Parse(name, value);
  }

  typedef stCaptureUserTreasure_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCaptureUserTreasure_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCaptureUserTreasure_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCaptureUserTreasure_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCaptureUserTreasure_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCaptureUserTreasure_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCaptureUserTreasure_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCaptureUserTreasure_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCaptureUserTreasure_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 combineID = 2;
  inline bool has_combineid() const;
  inline void clear_combineid();
  static const int kCombineIDFieldNumber = 2;
  inline ::google::protobuf::uint32 combineid() const;
  inline void set_combineid(::google::protobuf::uint32 value);

  // optional uint32 resType = 3;
  inline bool has_restype() const;
  inline void clear_restype();
  static const int kResTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 restype() const;
  inline void set_restype(::google::protobuf::uint32 value);

  // optional .MiscProto.eCaptureType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::MiscProto::eCaptureType type() const;
  inline void set_type(::MiscProto::eCaptureType value);

  // @@protoc_insertion_point(class_scope:MiscProto.stCaptureUserTreasure)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_combineid();
  inline void clear_has_combineid();
  inline void set_has_restype();
  inline void clear_has_restype();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 combineid_;
  ::google::protobuf::uint32 restype_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stCaptureUserTreasure* default_instance_;
};
// -------------------------------------------------------------------

class stSynCaptureReward : public ::google::protobuf::Message {
 public:
  stSynCaptureReward();
  virtual ~stSynCaptureReward();

  stSynCaptureReward(const stSynCaptureReward& from);

  inline stSynCaptureReward& operator=(const stSynCaptureReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynCaptureReward& default_instance();

  void Swap(stSynCaptureReward* other);

  // implements Message ----------------------------------------------

  stSynCaptureReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynCaptureReward& from);
  void MergeFrom(const stSynCaptureReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 goldCoin = 3;
  inline bool has_goldcoin() const;
  inline void clear_goldcoin();
  static const int kGoldCoinFieldNumber = 3;
  inline ::google::protobuf::uint32 goldcoin() const;
  inline void set_goldcoin(::google::protobuf::uint32 value);

  // optional uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynCaptureReward)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_goldcoin();
  inline void clear_has_goldcoin();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 goldcoin_;
  ::google::protobuf::uint32 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynCaptureReward* default_instance_;
};
// -------------------------------------------------------------------

class stCaptureUserTreasureResult : public ::google::protobuf::Message {
 public:
  stCaptureUserTreasureResult();
  virtual ~stCaptureUserTreasureResult();

  stCaptureUserTreasureResult(const stCaptureUserTreasureResult& from);

  inline stCaptureUserTreasureResult& operator=(const stCaptureUserTreasureResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCaptureUserTreasureResult& default_instance();

  void Swap(stCaptureUserTreasureResult* other);

  // implements Message ----------------------------------------------

  stCaptureUserTreasureResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCaptureUserTreasureResult& from);
  void MergeFrom(const stCaptureUserTreasureResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCaptureUserTreasureResult_eResult eResult;
  static const eResult eSUCCESS = stCaptureUserTreasureResult_eResult_eSUCCESS;
  static const eResult eFAIL = stCaptureUserTreasureResult_eResult_eFAIL;
  static const eResult eINNER_ERROR = stCaptureUserTreasureResult_eResult_eINNER_ERROR;
  static const eResult eSP_NOT_ENOUGH = stCaptureUserTreasureResult_eResult_eSP_NOT_ENOUGH;
  static const eResult eBAG_FULL = stCaptureUserTreasureResult_eResult_eBAG_FULL;
  static const eResult eNOT_IN_OPEN_TIME = stCaptureUserTreasureResult_eResult_eNOT_IN_OPEN_TIME;
  static inline bool eResult_IsValid(int value) {
    return stCaptureUserTreasureResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stCaptureUserTreasureResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stCaptureUserTreasureResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stCaptureUserTreasureResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stCaptureUserTreasureResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stCaptureUserTreasureResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stCaptureUserTreasureResult_eResult_Parse(name, value);
  }

  typedef stCaptureUserTreasureResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCaptureUserTreasureResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCaptureUserTreasureResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCaptureUserTreasureResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCaptureUserTreasureResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCaptureUserTreasureResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCaptureUserTreasureResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCaptureUserTreasureResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCaptureUserTreasureResult_ProtoModID_Parse(name, value);
  }

  typedef stCaptureUserTreasureResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCaptureUserTreasureResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCaptureUserTreasureResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCaptureUserTreasureResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCaptureUserTreasureResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCaptureUserTreasureResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCaptureUserTreasureResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCaptureUserTreasureResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCaptureUserTreasureResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stCaptureUserTreasureResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stCaptureUserTreasureResult_eResult result() const;
  inline void set_result(::MiscProto::stCaptureUserTreasureResult_eResult value);

  // optional bool obtainPiece = 2;
  inline bool has_obtainpiece() const;
  inline void clear_obtainpiece();
  static const int kObtainPieceFieldNumber = 2;
  inline bool obtainpiece() const;
  inline void set_obtainpiece(bool value);

  // repeated .MiscProto.stSynCaptureReward rewards = 3;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 3;
  inline const ::MiscProto::stSynCaptureReward& rewards(int index) const;
  inline ::MiscProto::stSynCaptureReward* mutable_rewards(int index);
  inline ::MiscProto::stSynCaptureReward* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynCaptureReward >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynCaptureReward >*
      mutable_rewards();

  // optional .MiscProto.eCaptureType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::MiscProto::eCaptureType type() const;
  inline void set_type(::MiscProto::eCaptureType value);

  // @@protoc_insertion_point(class_scope:MiscProto.stCaptureUserTreasureResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_obtainpiece();
  inline void clear_has_obtainpiece();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  bool obtainpiece_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynCaptureReward > rewards_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stCaptureUserTreasureResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynTreasureNum : public ::google::protobuf::Message {
 public:
  stSynTreasureNum();
  virtual ~stSynTreasureNum();

  stSynTreasureNum(const stSynTreasureNum& from);

  inline stSynTreasureNum& operator=(const stSynTreasureNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynTreasureNum& default_instance();

  void Swap(stSynTreasureNum* other);

  // implements Message ----------------------------------------------

  stSynTreasureNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynTreasureNum& from);
  void MergeFrom(const stSynTreasureNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynTreasureNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynTreasureNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynTreasureNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynTreasureNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynTreasureNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynTreasureNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynTreasureNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynTreasureNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynTreasureNum_ProtoModID_Parse(name, value);
  }

  typedef stSynTreasureNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynTreasureNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynTreasureNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynTreasureNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynTreasureNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynTreasureNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynTreasureNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynTreasureNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynTreasureNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 resType = 1;
  inline bool has_restype() const;
  inline void clear_restype();
  static const int kResTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 restype() const;
  inline void set_restype(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynTreasureNum)
 private:
  inline void set_has_restype();
  inline void clear_has_restype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 restype_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynTreasureNum* default_instance_;
};
// -------------------------------------------------------------------

class stCancelActiveTitle : public ::google::protobuf::Message {
 public:
  stCancelActiveTitle();
  virtual ~stCancelActiveTitle();

  stCancelActiveTitle(const stCancelActiveTitle& from);

  inline stCancelActiveTitle& operator=(const stCancelActiveTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelActiveTitle& default_instance();

  void Swap(stCancelActiveTitle* other);

  // implements Message ----------------------------------------------

  stCancelActiveTitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelActiveTitle& from);
  void MergeFrom(const stCancelActiveTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelActiveTitle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelActiveTitle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelActiveTitle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelActiveTitle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelActiveTitle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelActiveTitle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelActiveTitle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelActiveTitle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelActiveTitle_ProtoModID_Parse(name, value);
  }

  typedef stCancelActiveTitle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelActiveTitle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelActiveTitle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelActiveTitle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelActiveTitle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelActiveTitle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelActiveTitle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelActiveTitle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelActiveTitle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stCancelActiveTitle)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stCancelActiveTitle* default_instance_;
};
// -------------------------------------------------------------------

class stCancelActiveTitleResult : public ::google::protobuf::Message {
 public:
  stCancelActiveTitleResult();
  virtual ~stCancelActiveTitleResult();

  stCancelActiveTitleResult(const stCancelActiveTitleResult& from);

  inline stCancelActiveTitleResult& operator=(const stCancelActiveTitleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelActiveTitleResult& default_instance();

  void Swap(stCancelActiveTitleResult* other);

  // implements Message ----------------------------------------------

  stCancelActiveTitleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelActiveTitleResult& from);
  void MergeFrom(const stCancelActiveTitleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelActiveTitleResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelActiveTitleResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelActiveTitleResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelActiveTitleResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelActiveTitleResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelActiveTitleResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelActiveTitleResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelActiveTitleResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelActiveTitleResult_ProtoModID_Parse(name, value);
  }

  typedef stCancelActiveTitleResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelActiveTitleResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelActiveTitleResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelActiveTitleResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelActiveTitleResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelActiveTitleResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelActiveTitleResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelActiveTitleResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelActiveTitleResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stCancelActiveTitleResult)
 private:
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stCancelActiveTitleResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynSpriteInfo : public ::google::protobuf::Message {
 public:
  stSynSpriteInfo();
  virtual ~stSynSpriteInfo();

  stSynSpriteInfo(const stSynSpriteInfo& from);

  inline stSynSpriteInfo& operator=(const stSynSpriteInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynSpriteInfo& default_instance();

  void Swap(stSynSpriteInfo* other);

  // implements Message ----------------------------------------------

  stSynSpriteInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynSpriteInfo& from);
  void MergeFrom(const stSynSpriteInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 spriteID = 1;
  inline bool has_spriteid() const;
  inline void clear_spriteid();
  static const int kSpriteIDFieldNumber = 1;
  inline ::google::protobuf::uint32 spriteid() const;
  inline void set_spriteid(::google::protobuf::uint32 value);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynSpriteInfo)
 private:
  inline void set_has_spriteid();
  inline void clear_has_spriteid();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 spriteid_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynSpriteInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynAllSprite : public ::google::protobuf::Message {
 public:
  stSynAllSprite();
  virtual ~stSynAllSprite();

  stSynAllSprite(const stSynAllSprite& from);

  inline stSynAllSprite& operator=(const stSynAllSprite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynAllSprite& default_instance();

  void Swap(stSynAllSprite* other);

  // implements Message ----------------------------------------------

  stSynAllSprite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynAllSprite& from);
  void MergeFrom(const stSynAllSprite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynAllSprite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynAllSprite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynAllSprite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynAllSprite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynAllSprite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynAllSprite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynAllSprite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynAllSprite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynAllSprite_ProtoModID_Parse(name, value);
  }

  typedef stSynAllSprite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynAllSprite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynAllSprite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynAllSprite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynAllSprite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynAllSprite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynAllSprite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynAllSprite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynAllSprite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stSynSpriteInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::MiscProto::stSynSpriteInfo& data(int index) const;
  inline ::MiscProto::stSynSpriteInfo* mutable_data(int index);
  inline ::MiscProto::stSynSpriteInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSpriteInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSpriteInfo >*
      mutable_data();

  // optional uint32 followSpriteID = 2;
  inline bool has_followspriteid() const;
  inline void clear_followspriteid();
  static const int kFollowSpriteIDFieldNumber = 2;
  inline ::google::protobuf::uint32 followspriteid() const;
  inline void set_followspriteid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynAllSprite)
 private:
  inline void set_has_followspriteid();
  inline void clear_has_followspriteid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSpriteInfo > data_;
  ::google::protobuf::uint32 followspriteid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynAllSprite* default_instance_;
};
// -------------------------------------------------------------------

class stReqUnlockedSprite : public ::google::protobuf::Message {
 public:
  stReqUnlockedSprite();
  virtual ~stReqUnlockedSprite();

  stReqUnlockedSprite(const stReqUnlockedSprite& from);

  inline stReqUnlockedSprite& operator=(const stReqUnlockedSprite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqUnlockedSprite& default_instance();

  void Swap(stReqUnlockedSprite* other);

  // implements Message ----------------------------------------------

  stReqUnlockedSprite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqUnlockedSprite& from);
  void MergeFrom(const stReqUnlockedSprite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqUnlockedSprite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqUnlockedSprite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqUnlockedSprite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqUnlockedSprite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqUnlockedSprite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqUnlockedSprite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqUnlockedSprite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqUnlockedSprite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqUnlockedSprite_ProtoModID_Parse(name, value);
  }

  typedef stReqUnlockedSprite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqUnlockedSprite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqUnlockedSprite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqUnlockedSprite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqUnlockedSprite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqUnlockedSprite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqUnlockedSprite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqUnlockedSprite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqUnlockedSprite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 spriteID = 1;
  inline bool has_spriteid() const;
  inline void clear_spriteid();
  static const int kSpriteIDFieldNumber = 1;
  inline ::google::protobuf::uint32 spriteid() const;
  inline void set_spriteid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqUnlockedSprite)
 private:
  inline void set_has_spriteid();
  inline void clear_has_spriteid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 spriteid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqUnlockedSprite* default_instance_;
};
// -------------------------------------------------------------------

class stUnlockedSpriteResult : public ::google::protobuf::Message {
 public:
  stUnlockedSpriteResult();
  virtual ~stUnlockedSpriteResult();

  stUnlockedSpriteResult(const stUnlockedSpriteResult& from);

  inline stUnlockedSpriteResult& operator=(const stUnlockedSpriteResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUnlockedSpriteResult& default_instance();

  void Swap(stUnlockedSpriteResult* other);

  // implements Message ----------------------------------------------

  stUnlockedSpriteResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUnlockedSpriteResult& from);
  void MergeFrom(const stUnlockedSpriteResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUnlockedSpriteResult_eResult eResult;
  static const eResult eLevel_Not_Meet = stUnlockedSpriteResult_eResult_eLevel_Not_Meet;
  static const eResult eVipLv_Not_Meet = stUnlockedSpriteResult_eResult_eVipLv_Not_Meet;
  static const eResult eInner_Error = stUnlockedSpriteResult_eResult_eInner_Error;
  static const eResult eSuccess = stUnlockedSpriteResult_eResult_eSuccess;
  static inline bool eResult_IsValid(int value) {
    return stUnlockedSpriteResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stUnlockedSpriteResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stUnlockedSpriteResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stUnlockedSpriteResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stUnlockedSpriteResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stUnlockedSpriteResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stUnlockedSpriteResult_eResult_Parse(name, value);
  }

  typedef stUnlockedSpriteResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUnlockedSpriteResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUnlockedSpriteResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUnlockedSpriteResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUnlockedSpriteResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUnlockedSpriteResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUnlockedSpriteResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUnlockedSpriteResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUnlockedSpriteResult_ProtoModID_Parse(name, value);
  }

  typedef stUnlockedSpriteResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUnlockedSpriteResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUnlockedSpriteResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUnlockedSpriteResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUnlockedSpriteResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUnlockedSpriteResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUnlockedSpriteResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUnlockedSpriteResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUnlockedSpriteResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stUnlockedSpriteResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stUnlockedSpriteResult_eResult result() const;
  inline void set_result(::MiscProto::stUnlockedSpriteResult_eResult value);

  // optional uint32 spriteID = 2;
  inline bool has_spriteid() const;
  inline void clear_spriteid();
  static const int kSpriteIDFieldNumber = 2;
  inline ::google::protobuf::uint32 spriteid() const;
  inline void set_spriteid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stUnlockedSpriteResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_spriteid();
  inline void clear_has_spriteid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 spriteid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stUnlockedSpriteResult* default_instance_;
};
// -------------------------------------------------------------------

class stAddSprite : public ::google::protobuf::Message {
 public:
  stAddSprite();
  virtual ~stAddSprite();

  stAddSprite(const stAddSprite& from);

  inline stAddSprite& operator=(const stAddSprite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddSprite& default_instance();

  void Swap(stAddSprite* other);

  // implements Message ----------------------------------------------

  stAddSprite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddSprite& from);
  void MergeFrom(const stAddSprite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAddSprite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAddSprite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAddSprite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAddSprite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAddSprite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAddSprite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAddSprite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAddSprite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAddSprite_ProtoModID_Parse(name, value);
  }

  typedef stAddSprite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAddSprite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAddSprite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAddSprite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAddSprite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAddSprite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAddSprite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAddSprite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAddSprite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stSynSpriteInfo sprite = 1;
  inline bool has_sprite() const;
  inline void clear_sprite();
  static const int kSpriteFieldNumber = 1;
  inline const ::MiscProto::stSynSpriteInfo& sprite() const;
  inline ::MiscProto::stSynSpriteInfo* mutable_sprite();
  inline ::MiscProto::stSynSpriteInfo* release_sprite();
  inline void set_allocated_sprite(::MiscProto::stSynSpriteInfo* sprite);

  // @@protoc_insertion_point(class_scope:MiscProto.stAddSprite)
 private:
  inline void set_has_sprite();
  inline void clear_has_sprite();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MiscProto::stSynSpriteInfo* sprite_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stAddSprite* default_instance_;
};
// -------------------------------------------------------------------

class stReqLevelupSprite : public ::google::protobuf::Message {
 public:
  stReqLevelupSprite();
  virtual ~stReqLevelupSprite();

  stReqLevelupSprite(const stReqLevelupSprite& from);

  inline stReqLevelupSprite& operator=(const stReqLevelupSprite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLevelupSprite& default_instance();

  void Swap(stReqLevelupSprite* other);

  // implements Message ----------------------------------------------

  stReqLevelupSprite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLevelupSprite& from);
  void MergeFrom(const stReqLevelupSprite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLevelupSprite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLevelupSprite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLevelupSprite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLevelupSprite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLevelupSprite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLevelupSprite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLevelupSprite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLevelupSprite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLevelupSprite_ProtoModID_Parse(name, value);
  }

  typedef stReqLevelupSprite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLevelupSprite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLevelupSprite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLevelupSprite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLevelupSprite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLevelupSprite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLevelupSprite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLevelupSprite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLevelupSprite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 spriteID = 1;
  inline bool has_spriteid() const;
  inline void clear_spriteid();
  static const int kSpriteIDFieldNumber = 1;
  inline ::google::protobuf::uint32 spriteid() const;
  inline void set_spriteid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqLevelupSprite)
 private:
  inline void set_has_spriteid();
  inline void clear_has_spriteid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 spriteid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqLevelupSprite* default_instance_;
};
// -------------------------------------------------------------------

class stLevelupSpriteResult : public ::google::protobuf::Message {
 public:
  stLevelupSpriteResult();
  virtual ~stLevelupSpriteResult();

  stLevelupSpriteResult(const stLevelupSpriteResult& from);

  inline stLevelupSpriteResult& operator=(const stLevelupSpriteResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLevelupSpriteResult& default_instance();

  void Swap(stLevelupSpriteResult* other);

  // implements Message ----------------------------------------------

  stLevelupSpriteResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLevelupSpriteResult& from);
  void MergeFrom(const stLevelupSpriteResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLevelupSpriteResult_eResult eResult;
  static const eResult eSuccess = stLevelupSpriteResult_eResult_eSuccess;
  static const eResult eInner_Error = stLevelupSpriteResult_eResult_eInner_Error;
  static const eResult eConsume_Res_Not_Enough = stLevelupSpriteResult_eResult_eConsume_Res_Not_Enough;
  static const eResult eRole_Level_Limit = stLevelupSpriteResult_eResult_eRole_Level_Limit;
  static const eResult eHas_Not_Unlocked = stLevelupSpriteResult_eResult_eHas_Not_Unlocked;
  static const eResult eLevel_Full = stLevelupSpriteResult_eResult_eLevel_Full;
  static const eResult eSprite_Not_Exist = stLevelupSpriteResult_eResult_eSprite_Not_Exist;
  static inline bool eResult_IsValid(int value) {
    return stLevelupSpriteResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stLevelupSpriteResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stLevelupSpriteResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stLevelupSpriteResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stLevelupSpriteResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stLevelupSpriteResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stLevelupSpriteResult_eResult_Parse(name, value);
  }

  typedef stLevelupSpriteResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLevelupSpriteResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLevelupSpriteResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLevelupSpriteResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLevelupSpriteResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLevelupSpriteResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLevelupSpriteResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLevelupSpriteResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLevelupSpriteResult_ProtoModID_Parse(name, value);
  }

  typedef stLevelupSpriteResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLevelupSpriteResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLevelupSpriteResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLevelupSpriteResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLevelupSpriteResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLevelupSpriteResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLevelupSpriteResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLevelupSpriteResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLevelupSpriteResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 spriteID = 1;
  inline bool has_spriteid() const;
  inline void clear_spriteid();
  static const int kSpriteIDFieldNumber = 1;
  inline ::google::protobuf::uint32 spriteid() const;
  inline void set_spriteid(::google::protobuf::uint32 value);

  // optional .MiscProto.stLevelupSpriteResult.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::MiscProto::stLevelupSpriteResult_eResult result() const;
  inline void set_result(::MiscProto::stLevelupSpriteResult_eResult value);

  // optional uint32 curLv = 3;
  inline bool has_curlv() const;
  inline void clear_curlv();
  static const int kCurLvFieldNumber = 3;
  inline ::google::protobuf::uint32 curlv() const;
  inline void set_curlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stLevelupSpriteResult)
 private:
  inline void set_has_spriteid();
  inline void clear_has_spriteid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_curlv();
  inline void clear_has_curlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 spriteid_;
  int result_;
  ::google::protobuf::uint32 curlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stLevelupSpriteResult* default_instance_;
};
// -------------------------------------------------------------------

class stSpriteFollowMaster : public ::google::protobuf::Message {
 public:
  stSpriteFollowMaster();
  virtual ~stSpriteFollowMaster();

  stSpriteFollowMaster(const stSpriteFollowMaster& from);

  inline stSpriteFollowMaster& operator=(const stSpriteFollowMaster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSpriteFollowMaster& default_instance();

  void Swap(stSpriteFollowMaster* other);

  // implements Message ----------------------------------------------

  stSpriteFollowMaster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSpriteFollowMaster& from);
  void MergeFrom(const stSpriteFollowMaster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSpriteFollowMaster_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSpriteFollowMaster_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSpriteFollowMaster_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSpriteFollowMaster_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSpriteFollowMaster_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSpriteFollowMaster_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSpriteFollowMaster_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSpriteFollowMaster_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSpriteFollowMaster_ProtoModID_Parse(name, value);
  }

  typedef stSpriteFollowMaster_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSpriteFollowMaster_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSpriteFollowMaster_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSpriteFollowMaster_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSpriteFollowMaster_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSpriteFollowMaster_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSpriteFollowMaster_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSpriteFollowMaster_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSpriteFollowMaster_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 spriteID = 1;
  inline bool has_spriteid() const;
  inline void clear_spriteid();
  static const int kSpriteIDFieldNumber = 1;
  inline ::google::protobuf::uint32 spriteid() const;
  inline void set_spriteid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSpriteFollowMaster)
 private:
  inline void set_has_spriteid();
  inline void clear_has_spriteid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 spriteid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSpriteFollowMaster* default_instance_;
};
// -------------------------------------------------------------------

class stSpriteFollowMasterResult : public ::google::protobuf::Message {
 public:
  stSpriteFollowMasterResult();
  virtual ~stSpriteFollowMasterResult();

  stSpriteFollowMasterResult(const stSpriteFollowMasterResult& from);

  inline stSpriteFollowMasterResult& operator=(const stSpriteFollowMasterResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSpriteFollowMasterResult& default_instance();

  void Swap(stSpriteFollowMasterResult* other);

  // implements Message ----------------------------------------------

  stSpriteFollowMasterResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSpriteFollowMasterResult& from);
  void MergeFrom(const stSpriteFollowMasterResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSpriteFollowMasterResult_eResult eResult;
  static const eResult eSucess = stSpriteFollowMasterResult_eResult_eSucess;
  static const eResult eFail = stSpriteFollowMasterResult_eResult_eFail;
  static inline bool eResult_IsValid(int value) {
    return stSpriteFollowMasterResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stSpriteFollowMasterResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stSpriteFollowMasterResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stSpriteFollowMasterResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stSpriteFollowMasterResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stSpriteFollowMasterResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stSpriteFollowMasterResult_eResult_Parse(name, value);
  }

  typedef stSpriteFollowMasterResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSpriteFollowMasterResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSpriteFollowMasterResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSpriteFollowMasterResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSpriteFollowMasterResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSpriteFollowMasterResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSpriteFollowMasterResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSpriteFollowMasterResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSpriteFollowMasterResult_ProtoModID_Parse(name, value);
  }

  typedef stSpriteFollowMasterResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSpriteFollowMasterResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSpriteFollowMasterResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSpriteFollowMasterResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSpriteFollowMasterResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSpriteFollowMasterResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSpriteFollowMasterResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSpriteFollowMasterResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSpriteFollowMasterResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stSpriteFollowMasterResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stSpriteFollowMasterResult_eResult result() const;
  inline void set_result(::MiscProto::stSpriteFollowMasterResult_eResult value);

  // optional uint32 spriteID = 2;
  inline bool has_spriteid() const;
  inline void clear_spriteid();
  static const int kSpriteIDFieldNumber = 2;
  inline ::google::protobuf::uint32 spriteid() const;
  inline void set_spriteid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSpriteFollowMasterResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_spriteid();
  inline void clear_has_spriteid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 spriteid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSpriteFollowMasterResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqAvaibleActivity : public ::google::protobuf::Message {
 public:
  stReqAvaibleActivity();
  virtual ~stReqAvaibleActivity();

  stReqAvaibleActivity(const stReqAvaibleActivity& from);

  inline stReqAvaibleActivity& operator=(const stReqAvaibleActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAvaibleActivity& default_instance();

  void Swap(stReqAvaibleActivity* other);

  // implements Message ----------------------------------------------

  stReqAvaibleActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAvaibleActivity& from);
  void MergeFrom(const stReqAvaibleActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAvaibleActivity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAvaibleActivity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAvaibleActivity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAvaibleActivity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAvaibleActivity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAvaibleActivity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAvaibleActivity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAvaibleActivity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAvaibleActivity_ProtoModID_Parse(name, value);
  }

  typedef stReqAvaibleActivity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAvaibleActivity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAvaibleActivity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAvaibleActivity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAvaibleActivity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAvaibleActivity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAvaibleActivity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAvaibleActivity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAvaibleActivity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqAvaibleActivity)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqAvaibleActivity* default_instance_;
};
// -------------------------------------------------------------------

class stSynActivityStepReward : public ::google::protobuf::Message {
 public:
  stSynActivityStepReward();
  virtual ~stSynActivityStepReward();

  stSynActivityStepReward(const stSynActivityStepReward& from);

  inline stSynActivityStepReward& operator=(const stSynActivityStepReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynActivityStepReward& default_instance();

  void Swap(stSynActivityStepReward* other);

  // implements Message ----------------------------------------------

  stSynActivityStepReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynActivityStepReward& from);
  void MergeFrom(const stSynActivityStepReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynActivityStepReward)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynActivityStepReward* default_instance_;
};
// -------------------------------------------------------------------

class stSynActivityStepOptionalReward : public ::google::protobuf::Message {
 public:
  stSynActivityStepOptionalReward();
  virtual ~stSynActivityStepOptionalReward();

  stSynActivityStepOptionalReward(const stSynActivityStepOptionalReward& from);

  inline stSynActivityStepOptionalReward& operator=(const stSynActivityStepOptionalReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynActivityStepOptionalReward& default_instance();

  void Swap(stSynActivityStepOptionalReward* other);

  // implements Message ----------------------------------------------

  stSynActivityStepOptionalReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynActivityStepOptionalReward& from);
  void MergeFrom(const stSynActivityStepOptionalReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stSynActivityStepReward rewards = 1;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 1;
  inline const ::MiscProto::stSynActivityStepReward& rewards(int index) const;
  inline ::MiscProto::stSynActivityStepReward* mutable_rewards(int index);
  inline ::MiscProto::stSynActivityStepReward* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepReward >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepReward >*
      mutable_rewards();

  // @@protoc_insertion_point(class_scope:MiscProto.stSynActivityStepOptionalReward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepReward > rewards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynActivityStepOptionalReward* default_instance_;
};
// -------------------------------------------------------------------

class stSynActivityStepInfo : public ::google::protobuf::Message {
 public:
  stSynActivityStepInfo();
  virtual ~stSynActivityStepInfo();

  stSynActivityStepInfo(const stSynActivityStepInfo& from);

  inline stSynActivityStepInfo& operator=(const stSynActivityStepInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynActivityStepInfo& default_instance();

  void Swap(stSynActivityStepInfo* other);

  // implements Message ----------------------------------------------

  stSynActivityStepInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynActivityStepInfo& from);
  void MergeFrom(const stSynActivityStepInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stepID = 1;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 1;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // optional string stepDesc = 2;
  inline bool has_stepdesc() const;
  inline void clear_stepdesc();
  static const int kStepDescFieldNumber = 2;
  inline const ::std::string& stepdesc() const;
  inline void set_stepdesc(const ::std::string& value);
  inline void set_stepdesc(const char* value);
  inline void set_stepdesc(const char* value, size_t size);
  inline ::std::string* mutable_stepdesc();
  inline ::std::string* release_stepdesc();
  inline void set_allocated_stepdesc(::std::string* stepdesc);

  // repeated .MiscProto.stSynActivityStepOptionalReward optionals = 3;
  inline int optionals_size() const;
  inline void clear_optionals();
  static const int kOptionalsFieldNumber = 3;
  inline const ::MiscProto::stSynActivityStepOptionalReward& optionals(int index) const;
  inline ::MiscProto::stSynActivityStepOptionalReward* mutable_optionals(int index);
  inline ::MiscProto::stSynActivityStepOptionalReward* add_optionals();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepOptionalReward >&
      optionals() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepOptionalReward >*
      mutable_optionals();

  // @@protoc_insertion_point(class_scope:MiscProto.stSynActivityStepInfo)
 private:
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_stepdesc();
  inline void clear_has_stepdesc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* stepdesc_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepOptionalReward > optionals_;
  ::google::protobuf::uint32 stepid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynActivityStepInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynActivityInfo : public ::google::protobuf::Message {
 public:
  stSynActivityInfo();
  virtual ~stSynActivityInfo();

  stSynActivityInfo(const stSynActivityInfo& from);

  inline stSynActivityInfo& operator=(const stSynActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynActivityInfo& default_instance();

  void Swap(stSynActivityInfo* other);

  // implements Message ----------------------------------------------

  stSynActivityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynActivityInfo& from);
  void MergeFrom(const stSynActivityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string desc = 4;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 4;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional uint32 curVal = 5;
  inline bool has_curval() const;
  inline void clear_curval();
  static const int kCurValFieldNumber = 5;
  inline ::google::protobuf::uint32 curval() const;
  inline void set_curval(::google::protobuf::uint32 value);

  // repeated uint32 finishStep = 6;
  inline int finishstep_size() const;
  inline void clear_finishstep();
  static const int kFinishStepFieldNumber = 6;
  inline ::google::protobuf::uint32 finishstep(int index) const;
  inline void set_finishstep(int index, ::google::protobuf::uint32 value);
  inline void add_finishstep(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      finishstep() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_finishstep();

  // repeated .MiscProto.stSynActivityStepInfo avaibleStep = 7;
  inline int avaiblestep_size() const;
  inline void clear_avaiblestep();
  static const int kAvaibleStepFieldNumber = 7;
  inline const ::MiscProto::stSynActivityStepInfo& avaiblestep(int index) const;
  inline ::MiscProto::stSynActivityStepInfo* mutable_avaiblestep(int index);
  inline ::MiscProto::stSynActivityStepInfo* add_avaiblestep();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepInfo >&
      avaiblestep() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepInfo >*
      mutable_avaiblestep();

  // @@protoc_insertion_point(class_scope:MiscProto.stSynActivityInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_curval();
  inline void clear_has_curval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::std::string* title_;
  ::std::string* desc_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > finishstep_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepInfo > avaiblestep_;
  ::google::protobuf::uint32 curval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynActivityInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetAvaibleActivity : public ::google::protobuf::Message {
 public:
  stRetAvaibleActivity();
  virtual ~stRetAvaibleActivity();

  stRetAvaibleActivity(const stRetAvaibleActivity& from);

  inline stRetAvaibleActivity& operator=(const stRetAvaibleActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetAvaibleActivity& default_instance();

  void Swap(stRetAvaibleActivity* other);

  // implements Message ----------------------------------------------

  stRetAvaibleActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetAvaibleActivity& from);
  void MergeFrom(const stRetAvaibleActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetAvaibleActivity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetAvaibleActivity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetAvaibleActivity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetAvaibleActivity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetAvaibleActivity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetAvaibleActivity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetAvaibleActivity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetAvaibleActivity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetAvaibleActivity_ProtoModID_Parse(name, value);
  }

  typedef stRetAvaibleActivity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetAvaibleActivity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetAvaibleActivity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetAvaibleActivity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetAvaibleActivity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetAvaibleActivity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetAvaibleActivity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetAvaibleActivity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetAvaibleActivity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stSynActivityInfo activities = 1;
  inline int activities_size() const;
  inline void clear_activities();
  static const int kActivitiesFieldNumber = 1;
  inline const ::MiscProto::stSynActivityInfo& activities(int index) const;
  inline ::MiscProto::stSynActivityInfo* mutable_activities(int index);
  inline ::MiscProto::stSynActivityInfo* add_activities();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityInfo >&
      activities() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityInfo >*
      mutable_activities();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetAvaibleActivity)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityInfo > activities_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetAvaibleActivity* default_instance_;
};
// -------------------------------------------------------------------

class stReqAcitivityReward : public ::google::protobuf::Message {
 public:
  stReqAcitivityReward();
  virtual ~stReqAcitivityReward();

  stReqAcitivityReward(const stReqAcitivityReward& from);

  inline stReqAcitivityReward& operator=(const stReqAcitivityReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAcitivityReward& default_instance();

  void Swap(stReqAcitivityReward* other);

  // implements Message ----------------------------------------------

  stReqAcitivityReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAcitivityReward& from);
  void MergeFrom(const stReqAcitivityReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAcitivityReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAcitivityReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAcitivityReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAcitivityReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAcitivityReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAcitivityReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAcitivityReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAcitivityReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAcitivityReward_ProtoModID_Parse(name, value);
  }

  typedef stReqAcitivityReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAcitivityReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAcitivityReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAcitivityReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAcitivityReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAcitivityReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAcitivityReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAcitivityReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAcitivityReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 stepID = 2;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 2;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // optional uint32 selIndex = 3;
  inline bool has_selindex() const;
  inline void clear_selindex();
  static const int kSelIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 selindex() const;
  inline void set_selindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqAcitivityReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_selindex();
  inline void clear_has_selindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 stepid_;
  ::google::protobuf::uint32 selindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqAcitivityReward* default_instance_;
};
// -------------------------------------------------------------------

class stActivityRewardResult : public ::google::protobuf::Message {
 public:
  stActivityRewardResult();
  virtual ~stActivityRewardResult();

  stActivityRewardResult(const stActivityRewardResult& from);

  inline stActivityRewardResult& operator=(const stActivityRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stActivityRewardResult& default_instance();

  void Swap(stActivityRewardResult* other);

  // implements Message ----------------------------------------------

  stActivityRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stActivityRewardResult& from);
  void MergeFrom(const stActivityRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stActivityRewardResult_eResult eResult;
  static const eResult eSuccess = stActivityRewardResult_eResult_eSuccess;
  static const eResult eHas_Got_Reward = stActivityRewardResult_eResult_eHas_Got_Reward;
  static const eResult eCond_Not_Meet = stActivityRewardResult_eResult_eCond_Not_Meet;
  static const eResult eSelect_Not_Exist = stActivityRewardResult_eResult_eSelect_Not_Exist;
  static const eResult eBag_Full = stActivityRewardResult_eResult_eBag_Full;
  static inline bool eResult_IsValid(int value) {
    return stActivityRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stActivityRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stActivityRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stActivityRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stActivityRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stActivityRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stActivityRewardResult_eResult_Parse(name, value);
  }

  typedef stActivityRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stActivityRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stActivityRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stActivityRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stActivityRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stActivityRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stActivityRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stActivityRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stActivityRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stActivityRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stActivityRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stActivityRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stActivityRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stActivityRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stActivityRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stActivityRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stActivityRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stActivityRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 stepID = 2;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 2;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // optional .MiscProto.stActivityRewardResult.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::MiscProto::stActivityRewardResult_eResult result() const;
  inline void set_result(::MiscProto::stActivityRewardResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stActivityRewardResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 stepid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stActivityRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqWorldBossDamageRank : public ::google::protobuf::Message {
 public:
  stReqWorldBossDamageRank();
  virtual ~stReqWorldBossDamageRank();

  stReqWorldBossDamageRank(const stReqWorldBossDamageRank& from);

  inline stReqWorldBossDamageRank& operator=(const stReqWorldBossDamageRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqWorldBossDamageRank& default_instance();

  void Swap(stReqWorldBossDamageRank* other);

  // implements Message ----------------------------------------------

  stReqWorldBossDamageRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqWorldBossDamageRank& from);
  void MergeFrom(const stReqWorldBossDamageRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqWorldBossDamageRank_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqWorldBossDamageRank_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqWorldBossDamageRank_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqWorldBossDamageRank_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqWorldBossDamageRank_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqWorldBossDamageRank_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqWorldBossDamageRank_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqWorldBossDamageRank_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqWorldBossDamageRank_ProtoModID_Parse(name, value);
  }

  typedef stReqWorldBossDamageRank_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqWorldBossDamageRank_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqWorldBossDamageRank_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqWorldBossDamageRank_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqWorldBossDamageRank_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqWorldBossDamageRank_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqWorldBossDamageRank_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqWorldBossDamageRank_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqWorldBossDamageRank_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 fromRank = 1;
  inline bool has_fromrank() const;
  inline void clear_fromrank();
  static const int kFromRankFieldNumber = 1;
  inline ::google::protobuf::uint32 fromrank() const;
  inline void set_fromrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqWorldBossDamageRank)
 private:
  inline void set_has_fromrank();
  inline void clear_has_fromrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 fromrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqWorldBossDamageRank* default_instance_;
};
// -------------------------------------------------------------------

class stWorldBossDamageSortItem : public ::google::protobuf::Message {
 public:
  stWorldBossDamageSortItem();
  virtual ~stWorldBossDamageSortItem();

  stWorldBossDamageSortItem(const stWorldBossDamageSortItem& from);

  inline stWorldBossDamageSortItem& operator=(const stWorldBossDamageSortItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stWorldBossDamageSortItem& default_instance();

  void Swap(stWorldBossDamageSortItem* other);

  // implements Message ----------------------------------------------

  stWorldBossDamageSortItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stWorldBossDamageSortItem& from);
  void MergeFrom(const stWorldBossDamageSortItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 damage = 5;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 5;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // optional uint32 photoID = 6;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 6;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stWorldBossDamageSortItem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stWorldBossDamageSortItem* default_instance_;
};
// -------------------------------------------------------------------

class stRetWorldBossDamageRank : public ::google::protobuf::Message {
 public:
  stRetWorldBossDamageRank();
  virtual ~stRetWorldBossDamageRank();

  stRetWorldBossDamageRank(const stRetWorldBossDamageRank& from);

  inline stRetWorldBossDamageRank& operator=(const stRetWorldBossDamageRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetWorldBossDamageRank& default_instance();

  void Swap(stRetWorldBossDamageRank* other);

  // implements Message ----------------------------------------------

  stRetWorldBossDamageRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetWorldBossDamageRank& from);
  void MergeFrom(const stRetWorldBossDamageRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetWorldBossDamageRank_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetWorldBossDamageRank_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetWorldBossDamageRank_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetWorldBossDamageRank_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetWorldBossDamageRank_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetWorldBossDamageRank_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetWorldBossDamageRank_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetWorldBossDamageRank_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetWorldBossDamageRank_ProtoModID_Parse(name, value);
  }

  typedef stRetWorldBossDamageRank_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetWorldBossDamageRank_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetWorldBossDamageRank_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetWorldBossDamageRank_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetWorldBossDamageRank_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetWorldBossDamageRank_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetWorldBossDamageRank_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetWorldBossDamageRank_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetWorldBossDamageRank_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stWorldBossDamageSortItem sortItem = 1;
  inline int sortitem_size() const;
  inline void clear_sortitem();
  static const int kSortItemFieldNumber = 1;
  inline const ::MiscProto::stWorldBossDamageSortItem& sortitem(int index) const;
  inline ::MiscProto::stWorldBossDamageSortItem* mutable_sortitem(int index);
  inline ::MiscProto::stWorldBossDamageSortItem* add_sortitem();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stWorldBossDamageSortItem >&
      sortitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stWorldBossDamageSortItem >*
      mutable_sortitem();

  // optional uint32 fromRank = 2;
  inline bool has_fromrank() const;
  inline void clear_fromrank();
  static const int kFromRankFieldNumber = 2;
  inline ::google::protobuf::uint32 fromrank() const;
  inline void set_fromrank(::google::protobuf::uint32 value);

  // optional uint32 myRank = 3;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 3;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetWorldBossDamageRank)
 private:
  inline void set_has_fromrank();
  inline void clear_has_fromrank();
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stWorldBossDamageSortItem > sortitem_;
  ::google::protobuf::uint32 fromrank_;
  ::google::protobuf::uint32 myrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetWorldBossDamageRank* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenWorldBossWin : public ::google::protobuf::Message {
 public:
  stReqOpenWorldBossWin();
  virtual ~stReqOpenWorldBossWin();

  stReqOpenWorldBossWin(const stReqOpenWorldBossWin& from);

  inline stReqOpenWorldBossWin& operator=(const stReqOpenWorldBossWin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenWorldBossWin& default_instance();

  void Swap(stReqOpenWorldBossWin* other);

  // implements Message ----------------------------------------------

  stReqOpenWorldBossWin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenWorldBossWin& from);
  void MergeFrom(const stReqOpenWorldBossWin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenWorldBossWin_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenWorldBossWin_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenWorldBossWin_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenWorldBossWin_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenWorldBossWin_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenWorldBossWin_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenWorldBossWin_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenWorldBossWin_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenWorldBossWin_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenWorldBossWin_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenWorldBossWin_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenWorldBossWin_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenWorldBossWin_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenWorldBossWin_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenWorldBossWin_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenWorldBossWin_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenWorldBossWin_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenWorldBossWin_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqOpenWorldBossWin)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenWorldBossWin* default_instance_;
};
// -------------------------------------------------------------------

class stRetOpenWorldBossWin : public ::google::protobuf::Message {
 public:
  stRetOpenWorldBossWin();
  virtual ~stRetOpenWorldBossWin();

  stRetOpenWorldBossWin(const stRetOpenWorldBossWin& from);

  inline stRetOpenWorldBossWin& operator=(const stRetOpenWorldBossWin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetOpenWorldBossWin& default_instance();

  void Swap(stRetOpenWorldBossWin* other);

  // implements Message ----------------------------------------------

  stRetOpenWorldBossWin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetOpenWorldBossWin& from);
  void MergeFrom(const stRetOpenWorldBossWin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetOpenWorldBossWin_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetOpenWorldBossWin_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetOpenWorldBossWin_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetOpenWorldBossWin_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetOpenWorldBossWin_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetOpenWorldBossWin_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetOpenWorldBossWin_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetOpenWorldBossWin_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetOpenWorldBossWin_ProtoModID_Parse(name, value);
  }

  typedef stRetOpenWorldBossWin_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetOpenWorldBossWin_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetOpenWorldBossWin_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetOpenWorldBossWin_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetOpenWorldBossWin_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetOpenWorldBossWin_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetOpenWorldBossWin_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetOpenWorldBossWin_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetOpenWorldBossWin_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 reliveRemainTime = 1;
  inline bool has_reliveremaintime() const;
  inline void clear_reliveremaintime();
  static const int kReliveRemainTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 reliveremaintime() const;
  inline void set_reliveremaintime(::google::protobuf::uint32 value);

  // optional uint32 buyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // optional uint32 beginTime = 3;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 begintime() const;
  inline void set_begintime(::google::protobuf::uint32 value);

  // optional uint32 endTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // optional uint32 bossID = 5;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIDFieldNumber = 5;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint32 hp = 6;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 6;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // optional uint32 stepID = 7;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 7;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // optional bool tomorrow = 8;
  inline bool has_tomorrow() const;
  inline void clear_tomorrow();
  static const int kTomorrowFieldNumber = 8;
  inline bool tomorrow() const;
  inline void set_tomorrow(bool value);

  // optional string killerName = 9;
  inline bool has_killername() const;
  inline void clear_killername();
  static const int kKillerNameFieldNumber = 9;
  inline const ::std::string& killername() const;
  inline void set_killername(const ::std::string& value);
  inline void set_killername(const char* value);
  inline void set_killername(const char* value, size_t size);
  inline ::std::string* mutable_killername();
  inline ::std::string* release_killername();
  inline void set_allocated_killername(::std::string* killername);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetOpenWorldBossWin)
 private:
  inline void set_has_reliveremaintime();
  inline void clear_has_reliveremaintime();
  inline void set_has_buynum();
  inline void clear_has_buynum();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_tomorrow();
  inline void clear_has_tomorrow();
  inline void set_has_killername();
  inline void clear_has_killername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reliveremaintime_;
  ::google::protobuf::uint32 buynum_;
  ::google::protobuf::uint32 begintime_;
  ::google::protobuf::uint32 endtime_;
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 stepid_;
  bool tomorrow_;
  ::std::string* killername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetOpenWorldBossWin* default_instance_;
};
// -------------------------------------------------------------------

class stReqBossWorldMatch : public ::google::protobuf::Message {
 public:
  stReqBossWorldMatch();
  virtual ~stReqBossWorldMatch();

  stReqBossWorldMatch(const stReqBossWorldMatch& from);

  inline stReqBossWorldMatch& operator=(const stReqBossWorldMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBossWorldMatch& default_instance();

  void Swap(stReqBossWorldMatch* other);

  // implements Message ----------------------------------------------

  stReqBossWorldMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBossWorldMatch& from);
  void MergeFrom(const stReqBossWorldMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBossWorldMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBossWorldMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBossWorldMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBossWorldMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBossWorldMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBossWorldMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBossWorldMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBossWorldMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBossWorldMatch_ProtoModID_Parse(name, value);
  }

  typedef stReqBossWorldMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBossWorldMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBossWorldMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBossWorldMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBossWorldMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBossWorldMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBossWorldMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBossWorldMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBossWorldMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqBossWorldMatch)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqBossWorldMatch* default_instance_;
};
// -------------------------------------------------------------------

class stRetBossWorldMatch : public ::google::protobuf::Message {
 public:
  stRetBossWorldMatch();
  virtual ~stRetBossWorldMatch();

  stRetBossWorldMatch(const stRetBossWorldMatch& from);

  inline stRetBossWorldMatch& operator=(const stRetBossWorldMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetBossWorldMatch& default_instance();

  void Swap(stRetBossWorldMatch* other);

  // implements Message ----------------------------------------------

  stRetBossWorldMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetBossWorldMatch& from);
  void MergeFrom(const stRetBossWorldMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetBossWorldMatch_eResult eResult;
  static const eResult eSuccess = stRetBossWorldMatch_eResult_eSuccess;
  static const eResult eWait = stRetBossWorldMatch_eResult_eWait;
  static const eResult eNot_Open = stRetBossWorldMatch_eResult_eNot_Open;
  static const eResult eActivity_End = stRetBossWorldMatch_eResult_eActivity_End;
  static const eResult eLevel_Too_Low = stRetBossWorldMatch_eResult_eLevel_Too_Low;
  static const eResult eBoss_Die = stRetBossWorldMatch_eResult_eBoss_Die;
  static const eResult eCool_Down = stRetBossWorldMatch_eResult_eCool_Down;
  static inline bool eResult_IsValid(int value) {
    return stRetBossWorldMatch_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetBossWorldMatch_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetBossWorldMatch_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetBossWorldMatch_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetBossWorldMatch_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetBossWorldMatch_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetBossWorldMatch_eResult_Parse(name, value);
  }

  typedef stRetBossWorldMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetBossWorldMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetBossWorldMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetBossWorldMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetBossWorldMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetBossWorldMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetBossWorldMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetBossWorldMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetBossWorldMatch_ProtoModID_Parse(name, value);
  }

  typedef stRetBossWorldMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetBossWorldMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetBossWorldMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetBossWorldMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetBossWorldMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetBossWorldMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetBossWorldMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetBossWorldMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetBossWorldMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stRetBossWorldMatch.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stRetBossWorldMatch_eResult result() const;
  inline void set_result(::MiscProto::stRetBossWorldMatch_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetBossWorldMatch)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetBossWorldMatch* default_instance_;
};
// -------------------------------------------------------------------

class stReqClearWorldBossActivityCD : public ::google::protobuf::Message {
 public:
  stReqClearWorldBossActivityCD();
  virtual ~stReqClearWorldBossActivityCD();

  stReqClearWorldBossActivityCD(const stReqClearWorldBossActivityCD& from);

  inline stReqClearWorldBossActivityCD& operator=(const stReqClearWorldBossActivityCD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqClearWorldBossActivityCD& default_instance();

  void Swap(stReqClearWorldBossActivityCD* other);

  // implements Message ----------------------------------------------

  stReqClearWorldBossActivityCD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqClearWorldBossActivityCD& from);
  void MergeFrom(const stReqClearWorldBossActivityCD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqClearWorldBossActivityCD_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqClearWorldBossActivityCD_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqClearWorldBossActivityCD_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqClearWorldBossActivityCD_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqClearWorldBossActivityCD_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqClearWorldBossActivityCD_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqClearWorldBossActivityCD_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqClearWorldBossActivityCD_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqClearWorldBossActivityCD_ProtoModID_Parse(name, value);
  }

  typedef stReqClearWorldBossActivityCD_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqClearWorldBossActivityCD_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqClearWorldBossActivityCD_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqClearWorldBossActivityCD_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqClearWorldBossActivityCD_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqClearWorldBossActivityCD_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqClearWorldBossActivityCD_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqClearWorldBossActivityCD_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqClearWorldBossActivityCD_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqClearWorldBossActivityCD)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqClearWorldBossActivityCD* default_instance_;
};
// -------------------------------------------------------------------

class stClearWorldBossActivityCDResult : public ::google::protobuf::Message {
 public:
  stClearWorldBossActivityCDResult();
  virtual ~stClearWorldBossActivityCDResult();

  stClearWorldBossActivityCDResult(const stClearWorldBossActivityCDResult& from);

  inline stClearWorldBossActivityCDResult& operator=(const stClearWorldBossActivityCDResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stClearWorldBossActivityCDResult& default_instance();

  void Swap(stClearWorldBossActivityCDResult* other);

  // implements Message ----------------------------------------------

  stClearWorldBossActivityCDResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stClearWorldBossActivityCDResult& from);
  void MergeFrom(const stClearWorldBossActivityCDResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stClearWorldBossActivityCDResult_eResult eResult;
  static const eResult eSuccess = stClearWorldBossActivityCDResult_eResult_eSuccess;
  static const eResult eDiamond_Not_Enough = stClearWorldBossActivityCDResult_eResult_eDiamond_Not_Enough;
  static inline bool eResult_IsValid(int value) {
    return stClearWorldBossActivityCDResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stClearWorldBossActivityCDResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stClearWorldBossActivityCDResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stClearWorldBossActivityCDResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stClearWorldBossActivityCDResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stClearWorldBossActivityCDResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stClearWorldBossActivityCDResult_eResult_Parse(name, value);
  }

  typedef stClearWorldBossActivityCDResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stClearWorldBossActivityCDResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stClearWorldBossActivityCDResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stClearWorldBossActivityCDResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stClearWorldBossActivityCDResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stClearWorldBossActivityCDResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stClearWorldBossActivityCDResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stClearWorldBossActivityCDResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stClearWorldBossActivityCDResult_ProtoModID_Parse(name, value);
  }

  typedef stClearWorldBossActivityCDResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stClearWorldBossActivityCDResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stClearWorldBossActivityCDResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stClearWorldBossActivityCDResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stClearWorldBossActivityCDResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stClearWorldBossActivityCDResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stClearWorldBossActivityCDResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stClearWorldBossActivityCDResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stClearWorldBossActivityCDResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stClearWorldBossActivityCDResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stClearWorldBossActivityCDResult_eResult result() const;
  inline void set_result(::MiscProto::stClearWorldBossActivityCDResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stClearWorldBossActivityCDResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stClearWorldBossActivityCDResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRaiseDamageInWorldBoss : public ::google::protobuf::Message {
 public:
  stReqRaiseDamageInWorldBoss();
  virtual ~stReqRaiseDamageInWorldBoss();

  stReqRaiseDamageInWorldBoss(const stReqRaiseDamageInWorldBoss& from);

  inline stReqRaiseDamageInWorldBoss& operator=(const stReqRaiseDamageInWorldBoss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRaiseDamageInWorldBoss& default_instance();

  void Swap(stReqRaiseDamageInWorldBoss* other);

  // implements Message ----------------------------------------------

  stReqRaiseDamageInWorldBoss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRaiseDamageInWorldBoss& from);
  void MergeFrom(const stReqRaiseDamageInWorldBoss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRaiseDamageInWorldBoss_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRaiseDamageInWorldBoss_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRaiseDamageInWorldBoss_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRaiseDamageInWorldBoss_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRaiseDamageInWorldBoss_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRaiseDamageInWorldBoss_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRaiseDamageInWorldBoss_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRaiseDamageInWorldBoss_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRaiseDamageInWorldBoss_ProtoModID_Parse(name, value);
  }

  typedef stReqRaiseDamageInWorldBoss_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRaiseDamageInWorldBoss_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRaiseDamageInWorldBoss_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRaiseDamageInWorldBoss_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRaiseDamageInWorldBoss_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRaiseDamageInWorldBoss_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRaiseDamageInWorldBoss_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRaiseDamageInWorldBoss_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRaiseDamageInWorldBoss_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqRaiseDamageInWorldBoss)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqRaiseDamageInWorldBoss* default_instance_;
};
// -------------------------------------------------------------------

class stRaiseDamageInWorldBossResult : public ::google::protobuf::Message {
 public:
  stRaiseDamageInWorldBossResult();
  virtual ~stRaiseDamageInWorldBossResult();

  stRaiseDamageInWorldBossResult(const stRaiseDamageInWorldBossResult& from);

  inline stRaiseDamageInWorldBossResult& operator=(const stRaiseDamageInWorldBossResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRaiseDamageInWorldBossResult& default_instance();

  void Swap(stRaiseDamageInWorldBossResult* other);

  // implements Message ----------------------------------------------

  stRaiseDamageInWorldBossResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRaiseDamageInWorldBossResult& from);
  void MergeFrom(const stRaiseDamageInWorldBossResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRaiseDamageInWorldBossResult_eResult eResult;
  static const eResult eSuccess = stRaiseDamageInWorldBossResult_eResult_eSuccess;
  static const eResult eDaimond_Not_Enough = stRaiseDamageInWorldBossResult_eResult_eDaimond_Not_Enough;
  static const eResult eTime_Out = stRaiseDamageInWorldBossResult_eResult_eTime_Out;
  static inline bool eResult_IsValid(int value) {
    return stRaiseDamageInWorldBossResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRaiseDamageInWorldBossResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRaiseDamageInWorldBossResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRaiseDamageInWorldBossResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRaiseDamageInWorldBossResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRaiseDamageInWorldBossResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRaiseDamageInWorldBossResult_eResult_Parse(name, value);
  }

  typedef stRaiseDamageInWorldBossResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRaiseDamageInWorldBossResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRaiseDamageInWorldBossResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRaiseDamageInWorldBossResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRaiseDamageInWorldBossResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRaiseDamageInWorldBossResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRaiseDamageInWorldBossResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRaiseDamageInWorldBossResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRaiseDamageInWorldBossResult_ProtoModID_Parse(name, value);
  }

  typedef stRaiseDamageInWorldBossResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRaiseDamageInWorldBossResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRaiseDamageInWorldBossResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRaiseDamageInWorldBossResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRaiseDamageInWorldBossResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRaiseDamageInWorldBossResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRaiseDamageInWorldBossResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRaiseDamageInWorldBossResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRaiseDamageInWorldBossResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stRaiseDamageInWorldBossResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stRaiseDamageInWorldBossResult_eResult result() const;
  inline void set_result(::MiscProto::stRaiseDamageInWorldBossResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRaiseDamageInWorldBossResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRaiseDamageInWorldBossResult* default_instance_;
};
// -------------------------------------------------------------------

class stCancelWorldBossMatch : public ::google::protobuf::Message {
 public:
  stCancelWorldBossMatch();
  virtual ~stCancelWorldBossMatch();

  stCancelWorldBossMatch(const stCancelWorldBossMatch& from);

  inline stCancelWorldBossMatch& operator=(const stCancelWorldBossMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelWorldBossMatch& default_instance();

  void Swap(stCancelWorldBossMatch* other);

  // implements Message ----------------------------------------------

  stCancelWorldBossMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelWorldBossMatch& from);
  void MergeFrom(const stCancelWorldBossMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelWorldBossMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelWorldBossMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelWorldBossMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelWorldBossMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelWorldBossMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelWorldBossMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelWorldBossMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelWorldBossMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelWorldBossMatch_ProtoModID_Parse(name, value);
  }

  typedef stCancelWorldBossMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelWorldBossMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelWorldBossMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelWorldBossMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelWorldBossMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelWorldBossMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelWorldBossMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelWorldBossMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelWorldBossMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stCancelWorldBossMatch)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stCancelWorldBossMatch* default_instance_;
};
// -------------------------------------------------------------------

class stCancelWorldBossMatchResult : public ::google::protobuf::Message {
 public:
  stCancelWorldBossMatchResult();
  virtual ~stCancelWorldBossMatchResult();

  stCancelWorldBossMatchResult(const stCancelWorldBossMatchResult& from);

  inline stCancelWorldBossMatchResult& operator=(const stCancelWorldBossMatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelWorldBossMatchResult& default_instance();

  void Swap(stCancelWorldBossMatchResult* other);

  // implements Message ----------------------------------------------

  stCancelWorldBossMatchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelWorldBossMatchResult& from);
  void MergeFrom(const stCancelWorldBossMatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelWorldBossMatchResult_eResult eResult;
  static const eResult eSuccess = stCancelWorldBossMatchResult_eResult_eSuccess;
  static const eResult eFail = stCancelWorldBossMatchResult_eResult_eFail;
  static inline bool eResult_IsValid(int value) {
    return stCancelWorldBossMatchResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stCancelWorldBossMatchResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stCancelWorldBossMatchResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stCancelWorldBossMatchResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stCancelWorldBossMatchResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stCancelWorldBossMatchResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stCancelWorldBossMatchResult_eResult_Parse(name, value);
  }

  typedef stCancelWorldBossMatchResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelWorldBossMatchResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelWorldBossMatchResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelWorldBossMatchResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelWorldBossMatchResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelWorldBossMatchResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelWorldBossMatchResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelWorldBossMatchResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelWorldBossMatchResult_ProtoModID_Parse(name, value);
  }

  typedef stCancelWorldBossMatchResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelWorldBossMatchResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelWorldBossMatchResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelWorldBossMatchResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelWorldBossMatchResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelWorldBossMatchResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelWorldBossMatchResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelWorldBossMatchResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelWorldBossMatchResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stCancelWorldBossMatchResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stCancelWorldBossMatchResult_eResult result() const;
  inline void set_result(::MiscProto::stCancelWorldBossMatchResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stCancelWorldBossMatchResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stCancelWorldBossMatchResult* default_instance_;
};
// -------------------------------------------------------------------

class stQueryDrawHeroActivity : public ::google::protobuf::Message {
 public:
  stQueryDrawHeroActivity();
  virtual ~stQueryDrawHeroActivity();

  stQueryDrawHeroActivity(const stQueryDrawHeroActivity& from);

  inline stQueryDrawHeroActivity& operator=(const stQueryDrawHeroActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stQueryDrawHeroActivity& default_instance();

  void Swap(stQueryDrawHeroActivity* other);

  // implements Message ----------------------------------------------

  stQueryDrawHeroActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stQueryDrawHeroActivity& from);
  void MergeFrom(const stQueryDrawHeroActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stQueryDrawHeroActivity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stQueryDrawHeroActivity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stQueryDrawHeroActivity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stQueryDrawHeroActivity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stQueryDrawHeroActivity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stQueryDrawHeroActivity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stQueryDrawHeroActivity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stQueryDrawHeroActivity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stQueryDrawHeroActivity_ProtoModID_Parse(name, value);
  }

  typedef stQueryDrawHeroActivity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stQueryDrawHeroActivity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stQueryDrawHeroActivity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stQueryDrawHeroActivity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stQueryDrawHeroActivity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stQueryDrawHeroActivity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stQueryDrawHeroActivity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stQueryDrawHeroActivity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stQueryDrawHeroActivity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stQueryDrawHeroActivity)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stQueryDrawHeroActivity* default_instance_;
};
// -------------------------------------------------------------------

class stRetDrawHeroActivityInfo : public ::google::protobuf::Message {
 public:
  stRetDrawHeroActivityInfo();
  virtual ~stRetDrawHeroActivityInfo();

  stRetDrawHeroActivityInfo(const stRetDrawHeroActivityInfo& from);

  inline stRetDrawHeroActivityInfo& operator=(const stRetDrawHeroActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDrawHeroActivityInfo& default_instance();

  void Swap(stRetDrawHeroActivityInfo* other);

  // implements Message ----------------------------------------------

  stRetDrawHeroActivityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDrawHeroActivityInfo& from);
  void MergeFrom(const stRetDrawHeroActivityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDrawHeroActivityInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDrawHeroActivityInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDrawHeroActivityInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDrawHeroActivityInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDrawHeroActivityInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDrawHeroActivityInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDrawHeroActivityInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDrawHeroActivityInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDrawHeroActivityInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetDrawHeroActivityInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDrawHeroActivityInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDrawHeroActivityInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDrawHeroActivityInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDrawHeroActivityInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDrawHeroActivityInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDrawHeroActivityInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDrawHeroActivityInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDrawHeroActivityInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 beginTime = 2;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 begintime() const;
  inline void set_begintime(::google::protobuf::uint32 value);

  // optional uint32 endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // repeated uint32 rewardIDs = 4;
  inline int rewardids_size() const;
  inline void clear_rewardids();
  static const int kRewardIDsFieldNumber = 4;
  inline ::google::protobuf::uint32 rewardids(int index) const;
  inline void set_rewardids(int index, ::google::protobuf::uint32 value);
  inline void add_rewardids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardids();

  // optional bool gotRankReward = 5;
  inline bool has_gotrankreward() const;
  inline void clear_gotrankreward();
  static const int kGotRankRewardFieldNumber = 5;
  inline bool gotrankreward() const;
  inline void set_gotrankreward(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetDrawHeroActivityInfo)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_gotrankreward();
  inline void clear_has_gotrankreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 begintime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardids_;
  ::google::protobuf::uint32 endtime_;
  bool gotrankreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetDrawHeroActivityInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawHeroScoreReward : public ::google::protobuf::Message {
 public:
  stReqDrawHeroScoreReward();
  virtual ~stReqDrawHeroScoreReward();

  stReqDrawHeroScoreReward(const stReqDrawHeroScoreReward& from);

  inline stReqDrawHeroScoreReward& operator=(const stReqDrawHeroScoreReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawHeroScoreReward& default_instance();

  void Swap(stReqDrawHeroScoreReward* other);

  // implements Message ----------------------------------------------

  stReqDrawHeroScoreReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawHeroScoreReward& from);
  void MergeFrom(const stReqDrawHeroScoreReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawHeroScoreReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawHeroScoreReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawHeroScoreReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawHeroScoreReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawHeroScoreReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawHeroScoreReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawHeroScoreReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawHeroScoreReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawHeroScoreReward_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawHeroScoreReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawHeroScoreReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawHeroScoreReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawHeroScoreReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawHeroScoreReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawHeroScoreReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawHeroScoreReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawHeroScoreReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawHeroScoreReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDrawHeroScoreReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawHeroScoreReward* default_instance_;
};
// -------------------------------------------------------------------

class stDrawHeroScoreRewardRet : public ::google::protobuf::Message {
 public:
  stDrawHeroScoreRewardRet();
  virtual ~stDrawHeroScoreRewardRet();

  stDrawHeroScoreRewardRet(const stDrawHeroScoreRewardRet& from);

  inline stDrawHeroScoreRewardRet& operator=(const stDrawHeroScoreRewardRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDrawHeroScoreRewardRet& default_instance();

  void Swap(stDrawHeroScoreRewardRet* other);

  // implements Message ----------------------------------------------

  stDrawHeroScoreRewardRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDrawHeroScoreRewardRet& from);
  void MergeFrom(const stDrawHeroScoreRewardRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDrawHeroScoreRewardRet_eResult eResult;
  static const eResult eSuccess = stDrawHeroScoreRewardRet_eResult_eSuccess;
  static const eResult eScore_Not_Enough = stDrawHeroScoreRewardRet_eResult_eScore_Not_Enough;
  static const eResult eHas_Got_Reward = stDrawHeroScoreRewardRet_eResult_eHas_Got_Reward;
  static const eResult eInner_Error = stDrawHeroScoreRewardRet_eResult_eInner_Error;
  static const eResult eBagFull = stDrawHeroScoreRewardRet_eResult_eBagFull;
  static inline bool eResult_IsValid(int value) {
    return stDrawHeroScoreRewardRet_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stDrawHeroScoreRewardRet_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stDrawHeroScoreRewardRet_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stDrawHeroScoreRewardRet_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stDrawHeroScoreRewardRet_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stDrawHeroScoreRewardRet_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stDrawHeroScoreRewardRet_eResult_Parse(name, value);
  }

  typedef stDrawHeroScoreRewardRet_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDrawHeroScoreRewardRet_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDrawHeroScoreRewardRet_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDrawHeroScoreRewardRet_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDrawHeroScoreRewardRet_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDrawHeroScoreRewardRet_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDrawHeroScoreRewardRet_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDrawHeroScoreRewardRet_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDrawHeroScoreRewardRet_ProtoModID_Parse(name, value);
  }

  typedef stDrawHeroScoreRewardRet_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDrawHeroScoreRewardRet_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDrawHeroScoreRewardRet_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDrawHeroScoreRewardRet_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDrawHeroScoreRewardRet_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDrawHeroScoreRewardRet_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDrawHeroScoreRewardRet_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDrawHeroScoreRewardRet_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDrawHeroScoreRewardRet_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stDrawHeroScoreRewardRet.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stDrawHeroScoreRewardRet_eResult result() const;
  inline void set_result(::MiscProto::stDrawHeroScoreRewardRet_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stDrawHeroScoreRewardRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stDrawHeroScoreRewardRet* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawHeroRankReward : public ::google::protobuf::Message {
 public:
  stReqDrawHeroRankReward();
  virtual ~stReqDrawHeroRankReward();

  stReqDrawHeroRankReward(const stReqDrawHeroRankReward& from);

  inline stReqDrawHeroRankReward& operator=(const stReqDrawHeroRankReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawHeroRankReward& default_instance();

  void Swap(stReqDrawHeroRankReward* other);

  // implements Message ----------------------------------------------

  stReqDrawHeroRankReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawHeroRankReward& from);
  void MergeFrom(const stReqDrawHeroRankReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawHeroRankReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawHeroRankReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawHeroRankReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawHeroRankReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawHeroRankReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawHeroRankReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawHeroRankReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawHeroRankReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawHeroRankReward_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawHeroRankReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawHeroRankReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawHeroRankReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawHeroRankReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawHeroRankReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawHeroRankReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawHeroRankReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawHeroRankReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawHeroRankReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDrawHeroRankReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawHeroRankReward* default_instance_;
};
// -------------------------------------------------------------------

class stDrawHeroRankReward : public ::google::protobuf::Message {
 public:
  stDrawHeroRankReward();
  virtual ~stDrawHeroRankReward();

  stDrawHeroRankReward(const stDrawHeroRankReward& from);

  inline stDrawHeroRankReward& operator=(const stDrawHeroRankReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDrawHeroRankReward& default_instance();

  void Swap(stDrawHeroRankReward* other);

  // implements Message ----------------------------------------------

  stDrawHeroRankReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDrawHeroRankReward& from);
  void MergeFrom(const stDrawHeroRankReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDrawHeroRankReward_eResult eResult;
  static const eResult eSuccess = stDrawHeroRankReward_eResult_eSuccess;
  static const eResult eHas_No_Rewards = stDrawHeroRankReward_eResult_eHas_No_Rewards;
  static const eResult eHas_Got_Reward = stDrawHeroRankReward_eResult_eHas_Got_Reward;
  static const eResult eInner_Error = stDrawHeroRankReward_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stDrawHeroRankReward_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stDrawHeroRankReward_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stDrawHeroRankReward_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stDrawHeroRankReward_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stDrawHeroRankReward_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stDrawHeroRankReward_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stDrawHeroRankReward_eResult_Parse(name, value);
  }

  typedef stDrawHeroRankReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDrawHeroRankReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDrawHeroRankReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDrawHeroRankReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDrawHeroRankReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDrawHeroRankReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDrawHeroRankReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDrawHeroRankReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDrawHeroRankReward_ProtoModID_Parse(name, value);
  }

  typedef stDrawHeroRankReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDrawHeroRankReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDrawHeroRankReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDrawHeroRankReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDrawHeroRankReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDrawHeroRankReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDrawHeroRankReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDrawHeroRankReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDrawHeroRankReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stDrawHeroRankReward.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stDrawHeroRankReward_eResult result() const;
  inline void set_result(::MiscProto::stDrawHeroRankReward_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stDrawHeroRankReward)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stDrawHeroRankReward* default_instance_;
};
// -------------------------------------------------------------------

class stReqCompensationList : public ::google::protobuf::Message {
 public:
  stReqCompensationList();
  virtual ~stReqCompensationList();

  stReqCompensationList(const stReqCompensationList& from);

  inline stReqCompensationList& operator=(const stReqCompensationList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCompensationList& default_instance();

  void Swap(stReqCompensationList* other);

  // implements Message ----------------------------------------------

  stReqCompensationList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCompensationList& from);
  void MergeFrom(const stReqCompensationList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCompensationList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCompensationList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCompensationList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCompensationList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCompensationList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCompensationList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCompensationList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCompensationList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCompensationList_ProtoModID_Parse(name, value);
  }

  typedef stReqCompensationList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCompensationList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCompensationList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCompensationList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCompensationList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCompensationList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCompensationList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCompensationList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCompensationList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqCompensationList)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqCompensationList* default_instance_;
};
// -------------------------------------------------------------------

class stCompensationItem : public ::google::protobuf::Message {
 public:
  stCompensationItem();
  virtual ~stCompensationItem();

  stCompensationItem(const stCompensationItem& from);

  inline stCompensationItem& operator=(const stCompensationItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCompensationItem& default_instance();

  void Swap(stCompensationItem* other);

  // implements Message ----------------------------------------------

  stCompensationItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCompensationItem& from);
  void MergeFrom(const stCompensationItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stCompensationItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stCompensationItem* default_instance_;
};
// -------------------------------------------------------------------

class stCompensationInfo : public ::google::protobuf::Message {
 public:
  stCompensationInfo();
  virtual ~stCompensationInfo();

  stCompensationInfo(const stCompensationInfo& from);

  inline stCompensationInfo& operator=(const stCompensationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCompensationInfo& default_instance();

  void Swap(stCompensationInfo* other);

  // implements Message ----------------------------------------------

  stCompensationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCompensationInfo& from);
  void MergeFrom(const stCompensationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // repeated .MiscProto.stCompensationItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::MiscProto::stCompensationItem& items(int index) const;
  inline ::MiscProto::stCompensationItem* mutable_items(int index);
  inline ::MiscProto::stCompensationItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stCompensationItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stCompensationItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:MiscProto.stCompensationInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* desc_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stCompensationItem > items_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stCompensationInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetCompensationList : public ::google::protobuf::Message {
 public:
  stRetCompensationList();
  virtual ~stRetCompensationList();

  stRetCompensationList(const stRetCompensationList& from);

  inline stRetCompensationList& operator=(const stRetCompensationList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetCompensationList& default_instance();

  void Swap(stRetCompensationList* other);

  // implements Message ----------------------------------------------

  stRetCompensationList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetCompensationList& from);
  void MergeFrom(const stRetCompensationList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetCompensationList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetCompensationList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetCompensationList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetCompensationList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetCompensationList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetCompensationList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetCompensationList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetCompensationList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetCompensationList_ProtoModID_Parse(name, value);
  }

  typedef stRetCompensationList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetCompensationList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetCompensationList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetCompensationList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetCompensationList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetCompensationList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetCompensationList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetCompensationList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetCompensationList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stCompensationInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::MiscProto::stCompensationInfo& info(int index) const;
  inline ::MiscProto::stCompensationInfo* mutable_info(int index);
  inline ::MiscProto::stCompensationInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stCompensationInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stCompensationInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetCompensationList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stCompensationInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetCompensationList* default_instance_;
};
// -------------------------------------------------------------------

class stReqGotCompensation : public ::google::protobuf::Message {
 public:
  stReqGotCompensation();
  virtual ~stReqGotCompensation();

  stReqGotCompensation(const stReqGotCompensation& from);

  inline stReqGotCompensation& operator=(const stReqGotCompensation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGotCompensation& default_instance();

  void Swap(stReqGotCompensation* other);

  // implements Message ----------------------------------------------

  stReqGotCompensation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGotCompensation& from);
  void MergeFrom(const stReqGotCompensation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGotCompensation_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGotCompensation_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGotCompensation_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGotCompensation_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGotCompensation_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGotCompensation_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGotCompensation_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGotCompensation_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGotCompensation_ProtoModID_Parse(name, value);
  }

  typedef stReqGotCompensation_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGotCompensation_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGotCompensation_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGotCompensation_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGotCompensation_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGotCompensation_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGotCompensation_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGotCompensation_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGotCompensation_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqGotCompensation)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqGotCompensation* default_instance_;
};
// -------------------------------------------------------------------

class stGotCompensationResult : public ::google::protobuf::Message {
 public:
  stGotCompensationResult();
  virtual ~stGotCompensationResult();

  stGotCompensationResult(const stGotCompensationResult& from);

  inline stGotCompensationResult& operator=(const stGotCompensationResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGotCompensationResult& default_instance();

  void Swap(stGotCompensationResult* other);

  // implements Message ----------------------------------------------

  stGotCompensationResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGotCompensationResult& from);
  void MergeFrom(const stGotCompensationResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGotCompensationResult_eResult eResult;
  static const eResult eSuccess = stGotCompensationResult_eResult_eSuccess;
  static const eResult eHas_Got = stGotCompensationResult_eResult_eHas_Got;
  static inline bool eResult_IsValid(int value) {
    return stGotCompensationResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGotCompensationResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGotCompensationResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGotCompensationResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGotCompensationResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGotCompensationResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGotCompensationResult_eResult_Parse(name, value);
  }

  typedef stGotCompensationResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGotCompensationResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGotCompensationResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGotCompensationResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGotCompensationResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGotCompensationResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGotCompensationResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGotCompensationResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGotCompensationResult_ProtoModID_Parse(name, value);
  }

  typedef stGotCompensationResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGotCompensationResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGotCompensationResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGotCompensationResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGotCompensationResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGotCompensationResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGotCompensationResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGotCompensationResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGotCompensationResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stGotCompensationResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stGotCompensationResult_eResult result() const;
  inline void set_result(::MiscProto::stGotCompensationResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGotCompensationResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGotCompensationResult* default_instance_;
};
// -------------------------------------------------------------------

class stReq7DayActivityInfo : public ::google::protobuf::Message {
 public:
  stReq7DayActivityInfo();
  virtual ~stReq7DayActivityInfo();

  stReq7DayActivityInfo(const stReq7DayActivityInfo& from);

  inline stReq7DayActivityInfo& operator=(const stReq7DayActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReq7DayActivityInfo& default_instance();

  void Swap(stReq7DayActivityInfo* other);

  // implements Message ----------------------------------------------

  stReq7DayActivityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReq7DayActivityInfo& from);
  void MergeFrom(const stReq7DayActivityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReq7DayActivityInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReq7DayActivityInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReq7DayActivityInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReq7DayActivityInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReq7DayActivityInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReq7DayActivityInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReq7DayActivityInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReq7DayActivityInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReq7DayActivityInfo_ProtoModID_Parse(name, value);
  }

  typedef stReq7DayActivityInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReq7DayActivityInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReq7DayActivityInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReq7DayActivityInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReq7DayActivityInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReq7DayActivityInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReq7DayActivityInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReq7DayActivityInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReq7DayActivityInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReq7DayActivityInfo)
 private:
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReq7DayActivityInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynSDGoalInfo : public ::google::protobuf::Message {
 public:
  stSynSDGoalInfo();
  virtual ~stSynSDGoalInfo();

  stSynSDGoalInfo(const stSynSDGoalInfo& from);

  inline stSynSDGoalInfo& operator=(const stSynSDGoalInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynSDGoalInfo& default_instance();

  void Swap(stSynSDGoalInfo* other);

  // implements Message ----------------------------------------------

  stSynSDGoalInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynSDGoalInfo& from);
  void MergeFrom(const stSynSDGoalInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 cond = 2;
  inline bool has_cond() const;
  inline void clear_cond();
  static const int kCondFieldNumber = 2;
  inline ::google::protobuf::uint32 cond() const;
  inline void set_cond(::google::protobuf::uint32 value);

  // optional uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional bool hasGotReward = 4;
  inline bool has_hasgotreward() const;
  inline void clear_hasgotreward();
  static const int kHasGotRewardFieldNumber = 4;
  inline bool hasgotreward() const;
  inline void set_hasgotreward(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynSDGoalInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cond();
  inline void clear_has_cond();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_hasgotreward();
  inline void clear_has_hasgotreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 cond_;
  ::google::protobuf::uint32 value_;
  bool hasgotreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynSDGoalInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRet7DayActivityInfo : public ::google::protobuf::Message {
 public:
  stRet7DayActivityInfo();
  virtual ~stRet7DayActivityInfo();

  stRet7DayActivityInfo(const stRet7DayActivityInfo& from);

  inline stRet7DayActivityInfo& operator=(const stRet7DayActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRet7DayActivityInfo& default_instance();

  void Swap(stRet7DayActivityInfo* other);

  // implements Message ----------------------------------------------

  stRet7DayActivityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRet7DayActivityInfo& from);
  void MergeFrom(const stRet7DayActivityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRet7DayActivityInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRet7DayActivityInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRet7DayActivityInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRet7DayActivityInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRet7DayActivityInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRet7DayActivityInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRet7DayActivityInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRet7DayActivityInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRet7DayActivityInfo_ProtoModID_Parse(name, value);
  }

  typedef stRet7DayActivityInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRet7DayActivityInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRet7DayActivityInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRet7DayActivityInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRet7DayActivityInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRet7DayActivityInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRet7DayActivityInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRet7DayActivityInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRet7DayActivityInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // repeated .MiscProto.stSynSDGoalInfo loginGoal = 2;
  inline int logingoal_size() const;
  inline void clear_logingoal();
  static const int kLoginGoalFieldNumber = 2;
  inline const ::MiscProto::stSynSDGoalInfo& logingoal(int index) const;
  inline ::MiscProto::stSynSDGoalInfo* mutable_logingoal(int index);
  inline ::MiscProto::stSynSDGoalInfo* add_logingoal();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >&
      logingoal() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >*
      mutable_logingoal();

  // repeated .MiscProto.stSynSDGoalInfo gifBagGoal = 3;
  inline int gifbaggoal_size() const;
  inline void clear_gifbaggoal();
  static const int kGifBagGoalFieldNumber = 3;
  inline const ::MiscProto::stSynSDGoalInfo& gifbaggoal(int index) const;
  inline ::MiscProto::stSynSDGoalInfo* mutable_gifbaggoal(int index);
  inline ::MiscProto::stSynSDGoalInfo* add_gifbaggoal();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >&
      gifbaggoal() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >*
      mutable_gifbaggoal();

  // repeated .MiscProto.stSynSDGoalInfo module1Goal = 4;
  inline int module1goal_size() const;
  inline void clear_module1goal();
  static const int kModule1GoalFieldNumber = 4;
  inline const ::MiscProto::stSynSDGoalInfo& module1goal(int index) const;
  inline ::MiscProto::stSynSDGoalInfo* mutable_module1goal(int index);
  inline ::MiscProto::stSynSDGoalInfo* add_module1goal();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >&
      module1goal() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >*
      mutable_module1goal();

  // repeated .MiscProto.stSynSDGoalInfo module2Goal = 5;
  inline int module2goal_size() const;
  inline void clear_module2goal();
  static const int kModule2GoalFieldNumber = 5;
  inline const ::MiscProto::stSynSDGoalInfo& module2goal(int index) const;
  inline ::MiscProto::stSynSDGoalInfo* mutable_module2goal(int index);
  inline ::MiscProto::stSynSDGoalInfo* add_module2goal();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >&
      module2goal() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >*
      mutable_module2goal();

  // @@protoc_insertion_point(class_scope:MiscProto.stRet7DayActivityInfo)
 private:
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo > logingoal_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo > gifbaggoal_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo > module1goal_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo > module2goal_;
  ::google::protobuf::uint32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRet7DayActivityInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqSevenDayReward : public ::google::protobuf::Message {
 public:
  stReqSevenDayReward();
  virtual ~stReqSevenDayReward();

  stReqSevenDayReward(const stReqSevenDayReward& from);

  inline stReqSevenDayReward& operator=(const stReqSevenDayReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSevenDayReward& default_instance();

  void Swap(stReqSevenDayReward* other);

  // implements Message ----------------------------------------------

  stReqSevenDayReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSevenDayReward& from);
  void MergeFrom(const stReqSevenDayReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSevenDayReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSevenDayReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSevenDayReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSevenDayReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSevenDayReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSevenDayReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSevenDayReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSevenDayReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSevenDayReward_ProtoModID_Parse(name, value);
  }

  typedef stReqSevenDayReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSevenDayReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSevenDayReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSevenDayReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSevenDayReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSevenDayReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSevenDayReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSevenDayReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSevenDayReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // optional uint32 goalType = 2;
  inline bool has_goaltype() const;
  inline void clear_goaltype();
  static const int kGoalTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 goaltype() const;
  inline void set_goaltype(::google::protobuf::uint32 value);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqSevenDayReward)
 private:
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_goaltype();
  inline void clear_has_goaltype();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 goaltype_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqSevenDayReward* default_instance_;
};
// -------------------------------------------------------------------

class stSevenDayRewardRet : public ::google::protobuf::Message {
 public:
  stSevenDayRewardRet();
  virtual ~stSevenDayRewardRet();

  stSevenDayRewardRet(const stSevenDayRewardRet& from);

  inline stSevenDayRewardRet& operator=(const stSevenDayRewardRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSevenDayRewardRet& default_instance();

  void Swap(stSevenDayRewardRet* other);

  // implements Message ----------------------------------------------

  stSevenDayRewardRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSevenDayRewardRet& from);
  void MergeFrom(const stSevenDayRewardRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSevenDayRewardRet_eResult eResult;
  static const eResult eSuccess = stSevenDayRewardRet_eResult_eSuccess;
  static const eResult eCond_Not_Meet = stSevenDayRewardRet_eResult_eCond_Not_Meet;
  static const eResult eHas_Got_Reward = stSevenDayRewardRet_eResult_eHas_Got_Reward;
  static const eResult eInner_Error = stSevenDayRewardRet_eResult_eInner_Error;
  static const eResult eBag_Full = stSevenDayRewardRet_eResult_eBag_Full;
  static const eResult eNot_Enough_Diamond = stSevenDayRewardRet_eResult_eNot_Enough_Diamond;
  static inline bool eResult_IsValid(int value) {
    return stSevenDayRewardRet_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stSevenDayRewardRet_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stSevenDayRewardRet_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stSevenDayRewardRet_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stSevenDayRewardRet_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stSevenDayRewardRet_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stSevenDayRewardRet_eResult_Parse(name, value);
  }

  typedef stSevenDayRewardRet_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSevenDayRewardRet_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSevenDayRewardRet_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSevenDayRewardRet_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSevenDayRewardRet_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSevenDayRewardRet_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSevenDayRewardRet_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSevenDayRewardRet_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSevenDayRewardRet_ProtoModID_Parse(name, value);
  }

  typedef stSevenDayRewardRet_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSevenDayRewardRet_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSevenDayRewardRet_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSevenDayRewardRet_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSevenDayRewardRet_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSevenDayRewardRet_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSevenDayRewardRet_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSevenDayRewardRet_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSevenDayRewardRet_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stSevenDayRewardRet.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stSevenDayRewardRet_eResult result() const;
  inline void set_result(::MiscProto::stSevenDayRewardRet_eResult value);

  // optional uint32 goalType = 2;
  inline bool has_goaltype() const;
  inline void clear_goaltype();
  static const int kGoalTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 goaltype() const;
  inline void set_goaltype(::google::protobuf::uint32 value);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 day = 4;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 4;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSevenDayRewardRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_goaltype();
  inline void clear_has_goaltype();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 goaltype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSevenDayRewardRet* default_instance_;
};
// -------------------------------------------------------------------

class stSevenDayHasRewardTip : public ::google::protobuf::Message {
 public:
  stSevenDayHasRewardTip();
  virtual ~stSevenDayHasRewardTip();

  stSevenDayHasRewardTip(const stSevenDayHasRewardTip& from);

  inline stSevenDayHasRewardTip& operator=(const stSevenDayHasRewardTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSevenDayHasRewardTip& default_instance();

  void Swap(stSevenDayHasRewardTip* other);

  // implements Message ----------------------------------------------

  stSevenDayHasRewardTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSevenDayHasRewardTip& from);
  void MergeFrom(const stSevenDayHasRewardTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSevenDayHasRewardTip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSevenDayHasRewardTip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSevenDayHasRewardTip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSevenDayHasRewardTip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSevenDayHasRewardTip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSevenDayHasRewardTip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSevenDayHasRewardTip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSevenDayHasRewardTip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSevenDayHasRewardTip_ProtoModID_Parse(name, value);
  }

  typedef stSevenDayHasRewardTip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSevenDayHasRewardTip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSevenDayHasRewardTip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSevenDayHasRewardTip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSevenDayHasRewardTip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSevenDayHasRewardTip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSevenDayHasRewardTip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSevenDayHasRewardTip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSevenDayHasRewardTip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // optional bool hasReward = 2;
  inline bool has_hasreward() const;
  inline void clear_hasreward();
  static const int kHasRewardFieldNumber = 2;
  inline bool hasreward() const;
  inline void set_hasreward(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSevenDayHasRewardTip)
 private:
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_hasreward();
  inline void clear_has_hasreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 day_;
  bool hasreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSevenDayHasRewardTip* default_instance_;
};
// -------------------------------------------------------------------

class stAppStoreCfg : public ::google::protobuf::Message {
 public:
  stAppStoreCfg();
  virtual ~stAppStoreCfg();

  stAppStoreCfg(const stAppStoreCfg& from);

  inline stAppStoreCfg& operator=(const stAppStoreCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAppStoreCfg& default_instance();

  void Swap(stAppStoreCfg* other);

  // implements Message ----------------------------------------------

  stAppStoreCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAppStoreCfg& from);
  void MergeFrom(const stAppStoreCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAppStoreCfg_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAppStoreCfg_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAppStoreCfg_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAppStoreCfg_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAppStoreCfg_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAppStoreCfg_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAppStoreCfg_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAppStoreCfg_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAppStoreCfg_ProtoModID_Parse(name, value);
  }

  typedef stAppStoreCfg_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAppStoreCfg_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAppStoreCfg_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAppStoreCfg_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAppStoreCfg_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAppStoreCfg_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAppStoreCfg_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAppStoreCfg_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAppStoreCfg_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool openAppVersion = 1;
  inline bool has_openappversion() const;
  inline void clear_openappversion();
  static const int kOpenAppVersionFieldNumber = 1;
  inline bool openappversion() const;
  inline void set_openappversion(bool value);

  // optional bool isSandbox = 2;
  inline bool has_issandbox() const;
  inline void clear_issandbox();
  static const int kIsSandboxFieldNumber = 2;
  inline bool issandbox() const;
  inline void set_issandbox(bool value);

  // optional bool directBuy = 3;
  inline bool has_directbuy() const;
  inline void clear_directbuy();
  static const int kDirectBuyFieldNumber = 3;
  inline bool directbuy() const;
  inline void set_directbuy(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stAppStoreCfg)
 private:
  inline void set_has_openappversion();
  inline void clear_has_openappversion();
  inline void set_has_issandbox();
  inline void clear_has_issandbox();
  inline void set_has_directbuy();
  inline void clear_has_directbuy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool openappversion_;
  bool issandbox_;
  bool directbuy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stAppStoreCfg* default_instance_;
};
// -------------------------------------------------------------------

class stOpenWindowTip : public ::google::protobuf::Message {
 public:
  stOpenWindowTip();
  virtual ~stOpenWindowTip();

  stOpenWindowTip(const stOpenWindowTip& from);

  inline stOpenWindowTip& operator=(const stOpenWindowTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOpenWindowTip& default_instance();

  void Swap(stOpenWindowTip* other);

  // implements Message ----------------------------------------------

  stOpenWindowTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOpenWindowTip& from);
  void MergeFrom(const stOpenWindowTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOpenWindowTip_eAction eAction;
  static const eAction eNotify_Download_New_Version = stOpenWindowTip_eAction_eNotify_Download_New_Version;
  static inline bool eAction_IsValid(int value) {
    return stOpenWindowTip_eAction_IsValid(value);
  }
  static const eAction eAction_MIN =
    stOpenWindowTip_eAction_eAction_MIN;
  static const eAction eAction_MAX =
    stOpenWindowTip_eAction_eAction_MAX;
  static const int eAction_ARRAYSIZE =
    stOpenWindowTip_eAction_eAction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eAction_descriptor() {
    return stOpenWindowTip_eAction_descriptor();
  }
  static inline const ::std::string& eAction_Name(eAction value) {
    return stOpenWindowTip_eAction_Name(value);
  }
  static inline bool eAction_Parse(const ::std::string& name,
      eAction* value) {
    return stOpenWindowTip_eAction_Parse(name, value);
  }

  typedef stOpenWindowTip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOpenWindowTip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOpenWindowTip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOpenWindowTip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOpenWindowTip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOpenWindowTip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOpenWindowTip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOpenWindowTip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOpenWindowTip_ProtoModID_Parse(name, value);
  }

  typedef stOpenWindowTip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOpenWindowTip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOpenWindowTip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOpenWindowTip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOpenWindowTip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOpenWindowTip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOpenWindowTip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOpenWindowTip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOpenWindowTip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stOpenWindowTip.eAction action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::MiscProto::stOpenWindowTip_eAction action() const;
  inline void set_action(::MiscProto::stOpenWindowTip_eAction value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:MiscProto.stOpenWindowTip)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  int action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stOpenWindowTip* default_instance_;
};
// -------------------------------------------------------------------

class stReqRechargeActivityList : public ::google::protobuf::Message {
 public:
  stReqRechargeActivityList();
  virtual ~stReqRechargeActivityList();

  stReqRechargeActivityList(const stReqRechargeActivityList& from);

  inline stReqRechargeActivityList& operator=(const stReqRechargeActivityList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRechargeActivityList& default_instance();

  void Swap(stReqRechargeActivityList* other);

  // implements Message ----------------------------------------------

  stReqRechargeActivityList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRechargeActivityList& from);
  void MergeFrom(const stReqRechargeActivityList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRechargeActivityList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRechargeActivityList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRechargeActivityList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRechargeActivityList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRechargeActivityList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRechargeActivityList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRechargeActivityList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRechargeActivityList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRechargeActivityList_ProtoModID_Parse(name, value);
  }

  typedef stReqRechargeActivityList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRechargeActivityList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRechargeActivityList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRechargeActivityList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRechargeActivityList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRechargeActivityList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRechargeActivityList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRechargeActivityList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRechargeActivityList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqRechargeActivityList)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqRechargeActivityList* default_instance_;
};
// -------------------------------------------------------------------

class stSynRechargeActivityInfo : public ::google::protobuf::Message {
 public:
  stSynRechargeActivityInfo();
  virtual ~stSynRechargeActivityInfo();

  stSynRechargeActivityInfo(const stSynRechargeActivityInfo& from);

  inline stSynRechargeActivityInfo& operator=(const stSynRechargeActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRechargeActivityInfo& default_instance();

  void Swap(stSynRechargeActivityInfo* other);

  // implements Message ----------------------------------------------

  stSynRechargeActivityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRechargeActivityInfo& from);
  void MergeFrom(const stSynRechargeActivityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 rechargeNum = 2;
  inline bool has_rechargenum() const;
  inline void clear_rechargenum();
  static const int kRechargeNumFieldNumber = 2;
  inline ::google::protobuf::uint32 rechargenum() const;
  inline void set_rechargenum(::google::protobuf::uint32 value);

  // repeated uint32 gotRewardSteps = 3;
  inline int gotrewardsteps_size() const;
  inline void clear_gotrewardsteps();
  static const int kGotRewardStepsFieldNumber = 3;
  inline ::google::protobuf::uint32 gotrewardsteps(int index) const;
  inline void set_gotrewardsteps(int index, ::google::protobuf::uint32 value);
  inline void add_gotrewardsteps(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      gotrewardsteps() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_gotrewardsteps();

  // @@protoc_insertion_point(class_scope:MiscProto.stSynRechargeActivityInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rechargenum();
  inline void clear_has_rechargenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 rechargenum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > gotrewardsteps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynRechargeActivityInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetRechargeActivityList : public ::google::protobuf::Message {
 public:
  stRetRechargeActivityList();
  virtual ~stRetRechargeActivityList();

  stRetRechargeActivityList(const stRetRechargeActivityList& from);

  inline stRetRechargeActivityList& operator=(const stRetRechargeActivityList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRechargeActivityList& default_instance();

  void Swap(stRetRechargeActivityList* other);

  // implements Message ----------------------------------------------

  stRetRechargeActivityList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRechargeActivityList& from);
  void MergeFrom(const stRetRechargeActivityList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRechargeActivityList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRechargeActivityList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRechargeActivityList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRechargeActivityList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRechargeActivityList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRechargeActivityList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRechargeActivityList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRechargeActivityList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRechargeActivityList_ProtoModID_Parse(name, value);
  }

  typedef stRetRechargeActivityList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRechargeActivityList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRechargeActivityList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRechargeActivityList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRechargeActivityList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRechargeActivityList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRechargeActivityList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRechargeActivityList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRechargeActivityList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stSynRechargeActivityInfo infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::MiscProto::stSynRechargeActivityInfo& infos(int index) const;
  inline ::MiscProto::stSynRechargeActivityInfo* mutable_infos(int index);
  inline ::MiscProto::stSynRechargeActivityInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynRechargeActivityInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynRechargeActivityInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetRechargeActivityList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynRechargeActivityInfo > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetRechargeActivityList* default_instance_;
};
// -------------------------------------------------------------------

class stReqRechargeActivtiyReward : public ::google::protobuf::Message {
 public:
  stReqRechargeActivtiyReward();
  virtual ~stReqRechargeActivtiyReward();

  stReqRechargeActivtiyReward(const stReqRechargeActivtiyReward& from);

  inline stReqRechargeActivtiyReward& operator=(const stReqRechargeActivtiyReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRechargeActivtiyReward& default_instance();

  void Swap(stReqRechargeActivtiyReward* other);

  // implements Message ----------------------------------------------

  stReqRechargeActivtiyReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRechargeActivtiyReward& from);
  void MergeFrom(const stReqRechargeActivtiyReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRechargeActivtiyReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRechargeActivtiyReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRechargeActivtiyReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRechargeActivtiyReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRechargeActivtiyReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRechargeActivtiyReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRechargeActivtiyReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRechargeActivtiyReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRechargeActivtiyReward_ProtoModID_Parse(name, value);
  }

  typedef stReqRechargeActivtiyReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRechargeActivtiyReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRechargeActivtiyReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRechargeActivtiyReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRechargeActivtiyReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRechargeActivtiyReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRechargeActivtiyReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRechargeActivtiyReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRechargeActivtiyReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 activityID = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 stepID = 2;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 2;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqRechargeActivtiyReward)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_stepid();
  inline void clear_has_stepid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 stepid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqRechargeActivtiyReward* default_instance_;
};
// -------------------------------------------------------------------

class stRetRechargeActivityReward : public ::google::protobuf::Message {
 public:
  stRetRechargeActivityReward();
  virtual ~stRetRechargeActivityReward();

  stRetRechargeActivityReward(const stRetRechargeActivityReward& from);

  inline stRetRechargeActivityReward& operator=(const stRetRechargeActivityReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRechargeActivityReward& default_instance();

  void Swap(stRetRechargeActivityReward* other);

  // implements Message ----------------------------------------------

  stRetRechargeActivityReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRechargeActivityReward& from);
  void MergeFrom(const stRetRechargeActivityReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRechargeActivityReward_eResult eResult;
  static const eResult eSuccess = stRetRechargeActivityReward_eResult_eSuccess;
  static const eResult eCond_Not_Meet = stRetRechargeActivityReward_eResult_eCond_Not_Meet;
  static const eResult eBagFull = stRetRechargeActivityReward_eResult_eBagFull;
  static const eResult eHas_Got_Reward = stRetRechargeActivityReward_eResult_eHas_Got_Reward;
  static const eResult eInner_Error = stRetRechargeActivityReward_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stRetRechargeActivityReward_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetRechargeActivityReward_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetRechargeActivityReward_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetRechargeActivityReward_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetRechargeActivityReward_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetRechargeActivityReward_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetRechargeActivityReward_eResult_Parse(name, value);
  }

  typedef stRetRechargeActivityReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRechargeActivityReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRechargeActivityReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRechargeActivityReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRechargeActivityReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRechargeActivityReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRechargeActivityReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRechargeActivityReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRechargeActivityReward_ProtoModID_Parse(name, value);
  }

  typedef stRetRechargeActivityReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRechargeActivityReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRechargeActivityReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRechargeActivityReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRechargeActivityReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRechargeActivityReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRechargeActivityReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRechargeActivityReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRechargeActivityReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 activityID = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 stepID = 2;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 2;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // optional .MiscProto.stRetRechargeActivityReward.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::MiscProto::stRetRechargeActivityReward_eResult result() const;
  inline void set_result(::MiscProto::stRetRechargeActivityReward_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetRechargeActivityReward)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 stepid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetRechargeActivityReward* default_instance_;
};
// -------------------------------------------------------------------

class stSynInvestigation : public ::google::protobuf::Message {
 public:
  stSynInvestigation();
  virtual ~stSynInvestigation();

  stSynInvestigation(const stSynInvestigation& from);

  inline stSynInvestigation& operator=(const stSynInvestigation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynInvestigation& default_instance();

  void Swap(stSynInvestigation* other);

  // implements Message ----------------------------------------------

  stSynInvestigation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynInvestigation& from);
  void MergeFrom(const stSynInvestigation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 questID = 1;
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestIDFieldNumber = 1;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // repeated uint32 levels = 2;
  inline int levels_size() const;
  inline void clear_levels();
  static const int kLevelsFieldNumber = 2;
  inline ::google::protobuf::uint32 levels(int index) const;
  inline void set_levels(int index, ::google::protobuf::uint32 value);
  inline void add_levels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      levels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_levels();

  // @@protoc_insertion_point(class_scope:MiscProto.stSynInvestigation)
 private:
  inline void set_has_questid();
  inline void clear_has_questid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > levels_;
  ::google::protobuf::uint32 questid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynInvestigation* default_instance_;
};
// -------------------------------------------------------------------

class stSynAllInvestigation : public ::google::protobuf::Message {
 public:
  stSynAllInvestigation();
  virtual ~stSynAllInvestigation();

  stSynAllInvestigation(const stSynAllInvestigation& from);

  inline stSynAllInvestigation& operator=(const stSynAllInvestigation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynAllInvestigation& default_instance();

  void Swap(stSynAllInvestigation* other);

  // implements Message ----------------------------------------------

  stSynAllInvestigation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynAllInvestigation& from);
  void MergeFrom(const stSynAllInvestigation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynAllInvestigation_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynAllInvestigation_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynAllInvestigation_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynAllInvestigation_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynAllInvestigation_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynAllInvestigation_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynAllInvestigation_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynAllInvestigation_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynAllInvestigation_ProtoModID_Parse(name, value);
  }

  typedef stSynAllInvestigation_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynAllInvestigation_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynAllInvestigation_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynAllInvestigation_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynAllInvestigation_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynAllInvestigation_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynAllInvestigation_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynAllInvestigation_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynAllInvestigation_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stSynInvestigation infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::MiscProto::stSynInvestigation& infos(int index) const;
  inline ::MiscProto::stSynInvestigation* mutable_infos(int index);
  inline ::MiscProto::stSynInvestigation* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynInvestigation >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynInvestigation >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:MiscProto.stSynAllInvestigation)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynInvestigation > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynAllInvestigation* default_instance_;
};
// -------------------------------------------------------------------

class stInvestAnswer : public ::google::protobuf::Message {
 public:
  stInvestAnswer();
  virtual ~stInvestAnswer();

  stInvestAnswer(const stInvestAnswer& from);

  inline stInvestAnswer& operator=(const stInvestAnswer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInvestAnswer& default_instance();

  void Swap(stInvestAnswer* other);

  // implements Message ----------------------------------------------

  stInvestAnswer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInvestAnswer& from);
  void MergeFrom(const stInvestAnswer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 problemID = 1;
  inline bool has_problemid() const;
  inline void clear_problemid();
  static const int kProblemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 problemid() const;
  inline void set_problemid(::google::protobuf::uint32 value);

  // optional bool answerA = 2;
  inline bool has_answera() const;
  inline void clear_answera();
  static const int kAnswerAFieldNumber = 2;
  inline bool answera() const;
  inline void set_answera(bool value);

  // optional bool answerB = 3;
  inline bool has_answerb() const;
  inline void clear_answerb();
  static const int kAnswerBFieldNumber = 3;
  inline bool answerb() const;
  inline void set_answerb(bool value);

  // optional bool answerC = 4;
  inline bool has_answerc() const;
  inline void clear_answerc();
  static const int kAnswerCFieldNumber = 4;
  inline bool answerc() const;
  inline void set_answerc(bool value);

  // optional bool answerD = 5;
  inline bool has_answerd() const;
  inline void clear_answerd();
  static const int kAnswerDFieldNumber = 5;
  inline bool answerd() const;
  inline void set_answerd(bool value);

  // optional bool answerE = 6;
  inline bool has_answere() const;
  inline void clear_answere();
  static const int kAnswerEFieldNumber = 6;
  inline bool answere() const;
  inline void set_answere(bool value);

  // optional bool answerF = 7;
  inline bool has_answerf() const;
  inline void clear_answerf();
  static const int kAnswerFFieldNumber = 7;
  inline bool answerf() const;
  inline void set_answerf(bool value);

  // optional bool answerG = 8;
  inline bool has_answerg() const;
  inline void clear_answerg();
  static const int kAnswerGFieldNumber = 8;
  inline bool answerg() const;
  inline void set_answerg(bool value);

  // optional bool answerH = 9;
  inline bool has_answerh() const;
  inline void clear_answerh();
  static const int kAnswerHFieldNumber = 9;
  inline bool answerh() const;
  inline void set_answerh(bool value);

  // optional bool answerI = 10;
  inline bool has_answeri() const;
  inline void clear_answeri();
  static const int kAnswerIFieldNumber = 10;
  inline bool answeri() const;
  inline void set_answeri(bool value);

  // optional bool answerJ = 11;
  inline bool has_answerj() const;
  inline void clear_answerj();
  static const int kAnswerJFieldNumber = 11;
  inline bool answerj() const;
  inline void set_answerj(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stInvestAnswer)
 private:
  inline void set_has_problemid();
  inline void clear_has_problemid();
  inline void set_has_answera();
  inline void clear_has_answera();
  inline void set_has_answerb();
  inline void clear_has_answerb();
  inline void set_has_answerc();
  inline void clear_has_answerc();
  inline void set_has_answerd();
  inline void clear_has_answerd();
  inline void set_has_answere();
  inline void clear_has_answere();
  inline void set_has_answerf();
  inline void clear_has_answerf();
  inline void set_has_answerg();
  inline void clear_has_answerg();
  inline void set_has_answerh();
  inline void clear_has_answerh();
  inline void set_has_answeri();
  inline void clear_has_answeri();
  inline void set_has_answerj();
  inline void clear_has_answerj();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 problemid_;
  bool answera_;
  bool answerb_;
  bool answerc_;
  bool answerd_;
  bool answere_;
  bool answerf_;
  bool answerg_;
  bool answerh_;
  bool answeri_;
  bool answerj_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stInvestAnswer* default_instance_;
};
// -------------------------------------------------------------------

class stReqInvestgationReward : public ::google::protobuf::Message {
 public:
  stReqInvestgationReward();
  virtual ~stReqInvestgationReward();

  stReqInvestgationReward(const stReqInvestgationReward& from);

  inline stReqInvestgationReward& operator=(const stReqInvestgationReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqInvestgationReward& default_instance();

  void Swap(stReqInvestgationReward* other);

  // implements Message ----------------------------------------------

  stReqInvestgationReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqInvestgationReward& from);
  void MergeFrom(const stReqInvestgationReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqInvestgationReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqInvestgationReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqInvestgationReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqInvestgationReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqInvestgationReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqInvestgationReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqInvestgationReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqInvestgationReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqInvestgationReward_ProtoModID_Parse(name, value);
  }

  typedef stReqInvestgationReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqInvestgationReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqInvestgationReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqInvestgationReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqInvestgationReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqInvestgationReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqInvestgationReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqInvestgationReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqInvestgationReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 questID = 1;
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestIDFieldNumber = 1;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // repeated .MiscProto.stInvestAnswer answers = 3;
  inline int answers_size() const;
  inline void clear_answers();
  static const int kAnswersFieldNumber = 3;
  inline const ::MiscProto::stInvestAnswer& answers(int index) const;
  inline ::MiscProto::stInvestAnswer* mutable_answers(int index);
  inline ::MiscProto::stInvestAnswer* add_answers();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stInvestAnswer >&
      answers() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stInvestAnswer >*
      mutable_answers();

  // optional uint32 useTime = 5;
  inline bool has_usetime() const;
  inline void clear_usetime();
  static const int kUseTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 usetime() const;
  inline void set_usetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqInvestgationReward)
 private:
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_usetime();
  inline void clear_has_usetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 questid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stInvestAnswer > answers_;
  ::google::protobuf::uint32 usetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqInvestgationReward* default_instance_;
};
// -------------------------------------------------------------------

class stInvestgationRewardResult : public ::google::protobuf::Message {
 public:
  stInvestgationRewardResult();
  virtual ~stInvestgationRewardResult();

  stInvestgationRewardResult(const stInvestgationRewardResult& from);

  inline stInvestgationRewardResult& operator=(const stInvestgationRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInvestgationRewardResult& default_instance();

  void Swap(stInvestgationRewardResult* other);

  // implements Message ----------------------------------------------

  stInvestgationRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInvestgationRewardResult& from);
  void MergeFrom(const stInvestgationRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInvestgationRewardResult_eResult eResult;
  static const eResult eInner_Error = stInvestgationRewardResult_eResult_eInner_Error;
  static const eResult eHas_Got_Reward = stInvestgationRewardResult_eResult_eHas_Got_Reward;
  static const eResult eBag_Full = stInvestgationRewardResult_eResult_eBag_Full;
  static const eResult eSuccess = stInvestgationRewardResult_eResult_eSuccess;
  static inline bool eResult_IsValid(int value) {
    return stInvestgationRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stInvestgationRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stInvestgationRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stInvestgationRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stInvestgationRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stInvestgationRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stInvestgationRewardResult_eResult_Parse(name, value);
  }

  typedef stInvestgationRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInvestgationRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInvestgationRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInvestgationRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInvestgationRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInvestgationRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInvestgationRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInvestgationRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInvestgationRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stInvestgationRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInvestgationRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInvestgationRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInvestgationRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInvestgationRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInvestgationRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInvestgationRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInvestgationRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInvestgationRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stInvestgationRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stInvestgationRewardResult_eResult result() const;
  inline void set_result(::MiscProto::stInvestgationRewardResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stInvestgationRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stInvestgationRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqActivityShop : public ::google::protobuf::Message {
 public:
  stReqActivityShop();
  virtual ~stReqActivityShop();

  stReqActivityShop(const stReqActivityShop& from);

  inline stReqActivityShop& operator=(const stReqActivityShop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqActivityShop& default_instance();

  void Swap(stReqActivityShop* other);

  // implements Message ----------------------------------------------

  stReqActivityShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqActivityShop& from);
  void MergeFrom(const stReqActivityShop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqActivityShop_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqActivityShop_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqActivityShop_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqActivityShop_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqActivityShop_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqActivityShop_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqActivityShop_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqActivityShop_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqActivityShop_ProtoModID_Parse(name, value);
  }

  typedef stReqActivityShop_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqActivityShop_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqActivityShop_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqActivityShop_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqActivityShop_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqActivityShop_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqActivityShop_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqActivityShop_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqActivityShop_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqActivityShop)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqActivityShop* default_instance_;
};
// -------------------------------------------------------------------

class stActivityShopList : public ::google::protobuf::Message {
 public:
  stActivityShopList();
  virtual ~stActivityShopList();

  stActivityShopList(const stActivityShopList& from);

  inline stActivityShopList& operator=(const stActivityShopList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stActivityShopList& default_instance();

  void Swap(stActivityShopList* other);

  // implements Message ----------------------------------------------

  stActivityShopList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stActivityShopList& from);
  void MergeFrom(const stActivityShopList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stActivityShopList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stActivityShopList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stActivityShopList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stActivityShopList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stActivityShopList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stActivityShopList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stActivityShopList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stActivityShopList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stActivityShopList_ProtoModID_Parse(name, value);
  }

  typedef stActivityShopList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stActivityShopList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stActivityShopList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stActivityShopList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stActivityShopList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stActivityShopList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stActivityShopList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stActivityShopList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stActivityShopList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 activityIDs = 1;
  inline int activityids_size() const;
  inline void clear_activityids();
  static const int kActivityIDsFieldNumber = 1;
  inline ::google::protobuf::uint32 activityids(int index) const;
  inline void set_activityids(int index, ::google::protobuf::uint32 value);
  inline void add_activityids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      activityids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_activityids();

  // @@protoc_insertion_point(class_scope:MiscProto.stActivityShopList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > activityids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stActivityShopList* default_instance_;
};
// -------------------------------------------------------------------

class stLuchShopInfo : public ::google::protobuf::Message {
 public:
  stLuchShopInfo();
  virtual ~stLuchShopInfo();

  stLuchShopInfo(const stLuchShopInfo& from);

  inline stLuchShopInfo& operator=(const stLuchShopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLuchShopInfo& default_instance();

  void Swap(stLuchShopInfo* other);

  // implements Message ----------------------------------------------

  stLuchShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLuchShopInfo& from);
  void MergeFrom(const stLuchShopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLuchShopInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLuchShopInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLuchShopInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLuchShopInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLuchShopInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLuchShopInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLuchShopInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLuchShopInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLuchShopInfo_ProtoModID_Parse(name, value);
  }

  typedef stLuchShopInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLuchShopInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLuchShopInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLuchShopInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLuchShopInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLuchShopInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLuchShopInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLuchShopInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLuchShopInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 curRewardVipLv = 1;
  inline bool has_currewardviplv() const;
  inline void clear_currewardviplv();
  static const int kCurRewardVipLvFieldNumber = 1;
  inline ::google::protobuf::uint32 currewardviplv() const;
  inline void set_currewardviplv(::google::protobuf::uint32 value);

  // optional uint32 randRewardEntryID = 2;
  inline bool has_randrewardentryid() const;
  inline void clear_randrewardentryid();
  static const int kRandRewardEntryIDFieldNumber = 2;
  inline ::google::protobuf::uint32 randrewardentryid() const;
  inline void set_randrewardentryid(::google::protobuf::uint32 value);

  // optional bool hasGotReward = 3;
  inline bool has_hasgotreward() const;
  inline void clear_hasgotreward();
  static const int kHasGotRewardFieldNumber = 3;
  inline bool hasgotreward() const;
  inline void set_hasgotreward(bool value);

  // optional uint32 todayHasRecharge = 4;
  inline bool has_todayhasrecharge() const;
  inline void clear_todayhasrecharge();
  static const int kTodayHasRechargeFieldNumber = 4;
  inline ::google::protobuf::uint32 todayhasrecharge() const;
  inline void set_todayhasrecharge(::google::protobuf::uint32 value);

  // optional uint32 openWindowTime = 5;
  inline bool has_openwindowtime() const;
  inline void clear_openwindowtime();
  static const int kOpenWindowTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 openwindowtime() const;
  inline void set_openwindowtime(::google::protobuf::uint32 value);

  // optional uint32 rechargeMeetCondTime = 6;
  inline bool has_rechargemeetcondtime() const;
  inline void clear_rechargemeetcondtime();
  static const int kRechargeMeetCondTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 rechargemeetcondtime() const;
  inline void set_rechargemeetcondtime(::google::protobuf::uint32 value);

  // optional uint32 openSvrDay = 7;
  inline bool has_opensvrday() const;
  inline void clear_opensvrday();
  static const int kOpenSvrDayFieldNumber = 7;
  inline ::google::protobuf::uint32 opensvrday() const;
  inline void set_opensvrday(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stLuchShopInfo)
 private:
  inline void set_has_currewardviplv();
  inline void clear_has_currewardviplv();
  inline void set_has_randrewardentryid();
  inline void clear_has_randrewardentryid();
  inline void set_has_hasgotreward();
  inline void clear_has_hasgotreward();
  inline void set_has_todayhasrecharge();
  inline void clear_has_todayhasrecharge();
  inline void set_has_openwindowtime();
  inline void clear_has_openwindowtime();
  inline void set_has_rechargemeetcondtime();
  inline void clear_has_rechargemeetcondtime();
  inline void set_has_opensvrday();
  inline void clear_has_opensvrday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 currewardviplv_;
  ::google::protobuf::uint32 randrewardentryid_;
  bool hasgotreward_;
  ::google::protobuf::uint32 todayhasrecharge_;
  ::google::protobuf::uint32 openwindowtime_;
  ::google::protobuf::uint32 rechargemeetcondtime_;
  ::google::protobuf::uint32 opensvrday_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stLuchShopInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynLuckShopTodayRecharge : public ::google::protobuf::Message {
 public:
  stSynLuckShopTodayRecharge();
  virtual ~stSynLuckShopTodayRecharge();

  stSynLuckShopTodayRecharge(const stSynLuckShopTodayRecharge& from);

  inline stSynLuckShopTodayRecharge& operator=(const stSynLuckShopTodayRecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynLuckShopTodayRecharge& default_instance();

  void Swap(stSynLuckShopTodayRecharge* other);

  // implements Message ----------------------------------------------

  stSynLuckShopTodayRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynLuckShopTodayRecharge& from);
  void MergeFrom(const stSynLuckShopTodayRecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynLuckShopTodayRecharge_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynLuckShopTodayRecharge_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynLuckShopTodayRecharge_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynLuckShopTodayRecharge_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynLuckShopTodayRecharge_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynLuckShopTodayRecharge_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynLuckShopTodayRecharge_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynLuckShopTodayRecharge_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynLuckShopTodayRecharge_ProtoModID_Parse(name, value);
  }

  typedef stSynLuckShopTodayRecharge_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynLuckShopTodayRecharge_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynLuckShopTodayRecharge_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynLuckShopTodayRecharge_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynLuckShopTodayRecharge_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynLuckShopTodayRecharge_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynLuckShopTodayRecharge_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynLuckShopTodayRecharge_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynLuckShopTodayRecharge_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynLuckShopTodayRecharge)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynLuckShopTodayRecharge* default_instance_;
};
// -------------------------------------------------------------------

class stReqLuckShopReward : public ::google::protobuf::Message {
 public:
  stReqLuckShopReward();
  virtual ~stReqLuckShopReward();

  stReqLuckShopReward(const stReqLuckShopReward& from);

  inline stReqLuckShopReward& operator=(const stReqLuckShopReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLuckShopReward& default_instance();

  void Swap(stReqLuckShopReward* other);

  // implements Message ----------------------------------------------

  stReqLuckShopReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLuckShopReward& from);
  void MergeFrom(const stReqLuckShopReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLuckShopReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLuckShopReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLuckShopReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLuckShopReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLuckShopReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLuckShopReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLuckShopReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLuckShopReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLuckShopReward_ProtoModID_Parse(name, value);
  }

  typedef stReqLuckShopReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLuckShopReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLuckShopReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLuckShopReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLuckShopReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLuckShopReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLuckShopReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLuckShopReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLuckShopReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqLuckShopReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqLuckShopReward* default_instance_;
};
// -------------------------------------------------------------------

class stLuckShopRewardResult : public ::google::protobuf::Message {
 public:
  stLuckShopRewardResult();
  virtual ~stLuckShopRewardResult();

  stLuckShopRewardResult(const stLuckShopRewardResult& from);

  inline stLuckShopRewardResult& operator=(const stLuckShopRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLuckShopRewardResult& default_instance();

  void Swap(stLuckShopRewardResult* other);

  // implements Message ----------------------------------------------

  stLuckShopRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLuckShopRewardResult& from);
  void MergeFrom(const stLuckShopRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLuckShopRewardResult_eResult eResult;
  static const eResult eSuccess = stLuckShopRewardResult_eResult_eSuccess;
  static const eResult eHas_Got_Reward = stLuckShopRewardResult_eResult_eHas_Got_Reward;
  static const eResult eRecharge_Not_Enough = stLuckShopRewardResult_eResult_eRecharge_Not_Enough;
  static const eResult eBag_Full = stLuckShopRewardResult_eResult_eBag_Full;
  static const eResult eInner_Error = stLuckShopRewardResult_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stLuckShopRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stLuckShopRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stLuckShopRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stLuckShopRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stLuckShopRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stLuckShopRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stLuckShopRewardResult_eResult_Parse(name, value);
  }

  typedef stLuckShopRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLuckShopRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLuckShopRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLuckShopRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLuckShopRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLuckShopRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLuckShopRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLuckShopRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLuckShopRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stLuckShopRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLuckShopRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLuckShopRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLuckShopRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLuckShopRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLuckShopRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLuckShopRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLuckShopRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLuckShopRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stLuckShopRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stLuckShopRewardResult_eResult result() const;
  inline void set_result(::MiscProto::stLuckShopRewardResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stLuckShopRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stLuckShopRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stSaveOpenLuckShopWinTime : public ::google::protobuf::Message {
 public:
  stSaveOpenLuckShopWinTime();
  virtual ~stSaveOpenLuckShopWinTime();

  stSaveOpenLuckShopWinTime(const stSaveOpenLuckShopWinTime& from);

  inline stSaveOpenLuckShopWinTime& operator=(const stSaveOpenLuckShopWinTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSaveOpenLuckShopWinTime& default_instance();

  void Swap(stSaveOpenLuckShopWinTime* other);

  // implements Message ----------------------------------------------

  stSaveOpenLuckShopWinTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSaveOpenLuckShopWinTime& from);
  void MergeFrom(const stSaveOpenLuckShopWinTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSaveOpenLuckShopWinTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSaveOpenLuckShopWinTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSaveOpenLuckShopWinTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSaveOpenLuckShopWinTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSaveOpenLuckShopWinTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSaveOpenLuckShopWinTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSaveOpenLuckShopWinTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSaveOpenLuckShopWinTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSaveOpenLuckShopWinTime_ProtoModID_Parse(name, value);
  }

  typedef stSaveOpenLuckShopWinTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSaveOpenLuckShopWinTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSaveOpenLuckShopWinTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSaveOpenLuckShopWinTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSaveOpenLuckShopWinTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSaveOpenLuckShopWinTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSaveOpenLuckShopWinTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSaveOpenLuckShopWinTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSaveOpenLuckShopWinTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSaveOpenLuckShopWinTime)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSaveOpenLuckShopWinTime* default_instance_;
};
// -------------------------------------------------------------------

class stLuckShopRechargeMeetCondTime : public ::google::protobuf::Message {
 public:
  stLuckShopRechargeMeetCondTime();
  virtual ~stLuckShopRechargeMeetCondTime();

  stLuckShopRechargeMeetCondTime(const stLuckShopRechargeMeetCondTime& from);

  inline stLuckShopRechargeMeetCondTime& operator=(const stLuckShopRechargeMeetCondTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLuckShopRechargeMeetCondTime& default_instance();

  void Swap(stLuckShopRechargeMeetCondTime* other);

  // implements Message ----------------------------------------------

  stLuckShopRechargeMeetCondTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLuckShopRechargeMeetCondTime& from);
  void MergeFrom(const stLuckShopRechargeMeetCondTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLuckShopRechargeMeetCondTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLuckShopRechargeMeetCondTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLuckShopRechargeMeetCondTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLuckShopRechargeMeetCondTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLuckShopRechargeMeetCondTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLuckShopRechargeMeetCondTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLuckShopRechargeMeetCondTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLuckShopRechargeMeetCondTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLuckShopRechargeMeetCondTime_ProtoModID_Parse(name, value);
  }

  typedef stLuckShopRechargeMeetCondTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLuckShopRechargeMeetCondTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLuckShopRechargeMeetCondTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLuckShopRechargeMeetCondTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLuckShopRechargeMeetCondTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLuckShopRechargeMeetCondTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLuckShopRechargeMeetCondTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLuckShopRechargeMeetCondTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLuckShopRechargeMeetCondTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 meetCondTime = 1;
  inline bool has_meetcondtime() const;
  inline void clear_meetcondtime();
  static const int kMeetCondTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 meetcondtime() const;
  inline void set_meetcondtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stLuckShopRechargeMeetCondTime)
 private:
  inline void set_has_meetcondtime();
  inline void clear_has_meetcondtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 meetcondtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stLuckShopRechargeMeetCondTime* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenGuardWin : public ::google::protobuf::Message {
 public:
  stReqOpenGuardWin();
  virtual ~stReqOpenGuardWin();

  stReqOpenGuardWin(const stReqOpenGuardWin& from);

  inline stReqOpenGuardWin& operator=(const stReqOpenGuardWin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenGuardWin& default_instance();

  void Swap(stReqOpenGuardWin* other);

  // implements Message ----------------------------------------------

  stReqOpenGuardWin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenGuardWin& from);
  void MergeFrom(const stReqOpenGuardWin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenGuardWin_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenGuardWin_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenGuardWin_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenGuardWin_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenGuardWin_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenGuardWin_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenGuardWin_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenGuardWin_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenGuardWin_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenGuardWin_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenGuardWin_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenGuardWin_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenGuardWin_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenGuardWin_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenGuardWin_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenGuardWin_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenGuardWin_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenGuardWin_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqOpenGuardWin)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenGuardWin* default_instance_;
};
// -------------------------------------------------------------------

class stGuardEnemy : public ::google::protobuf::Message {
 public:
  stGuardEnemy();
  virtual ~stGuardEnemy();

  stGuardEnemy(const stGuardEnemy& from);

  inline stGuardEnemy& operator=(const stGuardEnemy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuardEnemy& default_instance();

  void Swap(stGuardEnemy* other);

  // implements Message ----------------------------------------------

  stGuardEnemy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuardEnemy& from);
  void MergeFrom(const stGuardEnemy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGuardEnemy)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGuardEnemy* default_instance_;
};
// -------------------------------------------------------------------

class stGuardBaseInfo : public ::google::protobuf::Message {
 public:
  stGuardBaseInfo();
  virtual ~stGuardBaseInfo();

  stGuardBaseInfo(const stGuardBaseInfo& from);

  inline stGuardBaseInfo& operator=(const stGuardBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuardBaseInfo& default_instance();

  void Swap(stGuardBaseInfo* other);

  // implements Message ----------------------------------------------

  stGuardBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuardBaseInfo& from);
  void MergeFrom(const stGuardBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 quality = 2;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional uint32 remainTime = 3;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 remaintime() const;
  inline void set_remaintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGuardBaseInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_remaintime();
  inline void clear_has_remaintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 remaintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGuardBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class stGuardDetailInfo : public ::google::protobuf::Message {
 public:
  stGuardDetailInfo();
  virtual ~stGuardDetailInfo();

  stGuardDetailInfo(const stGuardDetailInfo& from);

  inline stGuardDetailInfo& operator=(const stGuardDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuardDetailInfo& default_instance();

  void Swap(stGuardDetailInfo* other);

  // implements Message ----------------------------------------------

  stGuardDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuardDetailInfo& from);
  void MergeFrom(const stGuardDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 quality = 3;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional string guildName = 4;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 4;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional string friendName = 5;
  inline bool has_friendname() const;
  inline void clear_friendname();
  static const int kFriendNameFieldNumber = 5;
  inline const ::std::string& friendname() const;
  inline void set_friendname(const ::std::string& value);
  inline void set_friendname(const char* value);
  inline void set_friendname(const char* value, size_t size);
  inline ::std::string* mutable_friendname();
  inline ::std::string* release_friendname();
  inline void set_allocated_friendname(::std::string* friendname);

  // optional uint32 beInterceptNum = 6;
  inline bool has_beinterceptnum() const;
  inline void clear_beinterceptnum();
  static const int kBeInterceptNumFieldNumber = 6;
  inline ::google::protobuf::uint32 beinterceptnum() const;
  inline void set_beinterceptnum(::google::protobuf::uint32 value);

  // optional uint32 remainTime = 7;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 remaintime() const;
  inline void set_remaintime(::google::protobuf::uint32 value);

  // optional uint32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 inspiredNum = 9;
  inline bool has_inspirednum() const;
  inline void clear_inspirednum();
  static const int kInspiredNumFieldNumber = 9;
  inline ::google::protobuf::uint32 inspirednum() const;
  inline void set_inspirednum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGuardDetailInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_friendname();
  inline void clear_has_friendname();
  inline void set_has_beinterceptnum();
  inline void clear_has_beinterceptnum();
  inline void set_has_remaintime();
  inline void clear_has_remaintime();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_inspirednum();
  inline void clear_has_inspirednum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 quality_;
  ::std::string* guildname_;
  ::std::string* friendname_;
  ::google::protobuf::uint32 beinterceptnum_;
  ::google::protobuf::uint32 remaintime_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 inspirednum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGuardDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class stGuardWinInfo : public ::google::protobuf::Message {
 public:
  stGuardWinInfo();
  virtual ~stGuardWinInfo();

  stGuardWinInfo(const stGuardWinInfo& from);

  inline stGuardWinInfo& operator=(const stGuardWinInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuardWinInfo& default_instance();

  void Swap(stGuardWinInfo* other);

  // implements Message ----------------------------------------------

  stGuardWinInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuardWinInfo& from);
  void MergeFrom(const stGuardWinInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuardWinInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuardWinInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuardWinInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuardWinInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuardWinInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuardWinInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuardWinInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuardWinInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuardWinInfo_ProtoModID_Parse(name, value);
  }

  typedef stGuardWinInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuardWinInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuardWinInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuardWinInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuardWinInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuardWinInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuardWinInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuardWinInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuardWinInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guardNum = 1;
  inline bool has_guardnum() const;
  inline void clear_guardnum();
  static const int kGuardNumFieldNumber = 1;
  inline ::google::protobuf::uint32 guardnum() const;
  inline void set_guardnum(::google::protobuf::uint32 value);

  // optional uint32 interceptNum = 2;
  inline bool has_interceptnum() const;
  inline void clear_interceptnum();
  static const int kInterceptNumFieldNumber = 2;
  inline ::google::protobuf::uint32 interceptnum() const;
  inline void set_interceptnum(::google::protobuf::uint32 value);

  // optional uint32 helpNum = 3;
  inline bool has_helpnum() const;
  inline void clear_helpnum();
  static const int kHelpNumFieldNumber = 3;
  inline ::google::protobuf::uint32 helpnum() const;
  inline void set_helpnum(::google::protobuf::uint32 value);

  // repeated .MiscProto.stGuardBaseInfo enemies = 4;
  inline int enemies_size() const;
  inline void clear_enemies();
  static const int kEnemiesFieldNumber = 4;
  inline const ::MiscProto::stGuardBaseInfo& enemies(int index) const;
  inline ::MiscProto::stGuardBaseInfo* mutable_enemies(int index);
  inline ::MiscProto::stGuardBaseInfo* add_enemies();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stGuardBaseInfo >&
      enemies() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stGuardBaseInfo >*
      mutable_enemies();

  // repeated .MiscProto.stGuardBaseInfo guardInfos = 5;
  inline int guardinfos_size() const;
  inline void clear_guardinfos();
  static const int kGuardInfosFieldNumber = 5;
  inline const ::MiscProto::stGuardBaseInfo& guardinfos(int index) const;
  inline ::MiscProto::stGuardBaseInfo* mutable_guardinfos(int index);
  inline ::MiscProto::stGuardBaseInfo* add_guardinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stGuardBaseInfo >&
      guardinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stGuardBaseInfo >*
      mutable_guardinfos();

  // optional uint32 interceptCD = 6;
  inline bool has_interceptcd() const;
  inline void clear_interceptcd();
  static const int kInterceptCDFieldNumber = 6;
  inline ::google::protobuf::uint32 interceptcd() const;
  inline void set_interceptcd(::google::protobuf::uint32 value);

  // optional uint32 guardRemainTime = 7;
  inline bool has_guardremaintime() const;
  inline void clear_guardremaintime();
  static const int kGuardRemainTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 guardremaintime() const;
  inline void set_guardremaintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGuardWinInfo)
 private:
  inline void set_has_guardnum();
  inline void clear_has_guardnum();
  inline void set_has_interceptnum();
  inline void clear_has_interceptnum();
  inline void set_has_helpnum();
  inline void clear_has_helpnum();
  inline void set_has_interceptcd();
  inline void clear_has_interceptcd();
  inline void set_has_guardremaintime();
  inline void clear_has_guardremaintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guardnum_;
  ::google::protobuf::uint32 interceptnum_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stGuardBaseInfo > enemies_;
  ::google::protobuf::uint32 helpnum_;
  ::google::protobuf::uint32 interceptcd_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stGuardBaseInfo > guardinfos_;
  ::google::protobuf::uint32 guardremaintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGuardWinInfo* default_instance_;
};
// -------------------------------------------------------------------

class stResetInterceptCD : public ::google::protobuf::Message {
 public:
  stResetInterceptCD();
  virtual ~stResetInterceptCD();

  stResetInterceptCD(const stResetInterceptCD& from);

  inline stResetInterceptCD& operator=(const stResetInterceptCD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetInterceptCD& default_instance();

  void Swap(stResetInterceptCD* other);

  // implements Message ----------------------------------------------

  stResetInterceptCD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetInterceptCD& from);
  void MergeFrom(const stResetInterceptCD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetInterceptCD_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetInterceptCD_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetInterceptCD_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetInterceptCD_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetInterceptCD_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetInterceptCD_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetInterceptCD_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetInterceptCD_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetInterceptCD_ProtoModID_Parse(name, value);
  }

  typedef stResetInterceptCD_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetInterceptCD_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetInterceptCD_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetInterceptCD_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetInterceptCD_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetInterceptCD_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetInterceptCD_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetInterceptCD_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetInterceptCD_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stResetInterceptCD)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stResetInterceptCD* default_instance_;
};
// -------------------------------------------------------------------

class stResetInterceptCDResult : public ::google::protobuf::Message {
 public:
  stResetInterceptCDResult();
  virtual ~stResetInterceptCDResult();

  stResetInterceptCDResult(const stResetInterceptCDResult& from);

  inline stResetInterceptCDResult& operator=(const stResetInterceptCDResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetInterceptCDResult& default_instance();

  void Swap(stResetInterceptCDResult* other);

  // implements Message ----------------------------------------------

  stResetInterceptCDResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetInterceptCDResult& from);
  void MergeFrom(const stResetInterceptCDResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetInterceptCDResult_eResult eResult;
  static const eResult eSuccess = stResetInterceptCDResult_eResult_eSuccess;
  static const eResult eDiamond_Not_Enough = stResetInterceptCDResult_eResult_eDiamond_Not_Enough;
  static const eResult eInner_Cfg_Error = stResetInterceptCDResult_eResult_eInner_Cfg_Error;
  static inline bool eResult_IsValid(int value) {
    return stResetInterceptCDResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stResetInterceptCDResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stResetInterceptCDResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stResetInterceptCDResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stResetInterceptCDResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stResetInterceptCDResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stResetInterceptCDResult_eResult_Parse(name, value);
  }

  typedef stResetInterceptCDResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetInterceptCDResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetInterceptCDResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetInterceptCDResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetInterceptCDResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetInterceptCDResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetInterceptCDResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetInterceptCDResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetInterceptCDResult_ProtoModID_Parse(name, value);
  }

  typedef stResetInterceptCDResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetInterceptCDResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetInterceptCDResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetInterceptCDResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetInterceptCDResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetInterceptCDResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetInterceptCDResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetInterceptCDResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetInterceptCDResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stResetInterceptCDResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stResetInterceptCDResult_eResult result() const;
  inline void set_result(::MiscProto::stResetInterceptCDResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stResetInterceptCDResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stResetInterceptCDResult* default_instance_;
};
// -------------------------------------------------------------------

class stResetInterceptNum : public ::google::protobuf::Message {
 public:
  stResetInterceptNum();
  virtual ~stResetInterceptNum();

  stResetInterceptNum(const stResetInterceptNum& from);

  inline stResetInterceptNum& operator=(const stResetInterceptNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetInterceptNum& default_instance();

  void Swap(stResetInterceptNum* other);

  // implements Message ----------------------------------------------

  stResetInterceptNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetInterceptNum& from);
  void MergeFrom(const stResetInterceptNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetInterceptNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetInterceptNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetInterceptNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetInterceptNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetInterceptNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetInterceptNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetInterceptNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetInterceptNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetInterceptNum_ProtoModID_Parse(name, value);
  }

  typedef stResetInterceptNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetInterceptNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetInterceptNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetInterceptNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetInterceptNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetInterceptNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetInterceptNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetInterceptNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetInterceptNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stResetInterceptNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stResetInterceptNum* default_instance_;
};
// -------------------------------------------------------------------

class stResetInterceptNumResult : public ::google::protobuf::Message {
 public:
  stResetInterceptNumResult();
  virtual ~stResetInterceptNumResult();

  stResetInterceptNumResult(const stResetInterceptNumResult& from);

  inline stResetInterceptNumResult& operator=(const stResetInterceptNumResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetInterceptNumResult& default_instance();

  void Swap(stResetInterceptNumResult* other);

  // implements Message ----------------------------------------------

  stResetInterceptNumResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetInterceptNumResult& from);
  void MergeFrom(const stResetInterceptNumResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetInterceptNumResult_eResult eResult;
  static const eResult eSuccess = stResetInterceptNumResult_eResult_eSuccess;
  static const eResult eDiamond_Not_Enough = stResetInterceptNumResult_eResult_eDiamond_Not_Enough;
  static const eResult eInner_Cfg_Error = stResetInterceptNumResult_eResult_eInner_Cfg_Error;
  static const eResult eNum_Use_Out = stResetInterceptNumResult_eResult_eNum_Use_Out;
  static inline bool eResult_IsValid(int value) {
    return stResetInterceptNumResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stResetInterceptNumResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stResetInterceptNumResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stResetInterceptNumResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stResetInterceptNumResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stResetInterceptNumResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stResetInterceptNumResult_eResult_Parse(name, value);
  }

  typedef stResetInterceptNumResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetInterceptNumResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetInterceptNumResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetInterceptNumResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetInterceptNumResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetInterceptNumResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetInterceptNumResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetInterceptNumResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetInterceptNumResult_ProtoModID_Parse(name, value);
  }

  typedef stResetInterceptNumResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetInterceptNumResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetInterceptNumResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetInterceptNumResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetInterceptNumResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetInterceptNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetInterceptNumResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetInterceptNumResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetInterceptNumResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stResetInterceptNumResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stResetInterceptNumResult_eResult result() const;
  inline void set_result(::MiscProto::stResetInterceptNumResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stResetInterceptNumResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stResetInterceptNumResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqGuardDetailInfo : public ::google::protobuf::Message {
 public:
  stReqGuardDetailInfo();
  virtual ~stReqGuardDetailInfo();

  stReqGuardDetailInfo(const stReqGuardDetailInfo& from);

  inline stReqGuardDetailInfo& operator=(const stReqGuardDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGuardDetailInfo& default_instance();

  void Swap(stReqGuardDetailInfo* other);

  // implements Message ----------------------------------------------

  stReqGuardDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGuardDetailInfo& from);
  void MergeFrom(const stReqGuardDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGuardDetailInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGuardDetailInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGuardDetailInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGuardDetailInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGuardDetailInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGuardDetailInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGuardDetailInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGuardDetailInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGuardDetailInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqGuardDetailInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGuardDetailInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGuardDetailInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGuardDetailInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGuardDetailInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGuardDetailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGuardDetailInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGuardDetailInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGuardDetailInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqGuardDetailInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqGuardDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetGuardDetailInfo : public ::google::protobuf::Message {
 public:
  stRetGuardDetailInfo();
  virtual ~stRetGuardDetailInfo();

  stRetGuardDetailInfo(const stRetGuardDetailInfo& from);

  inline stRetGuardDetailInfo& operator=(const stRetGuardDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetGuardDetailInfo& default_instance();

  void Swap(stRetGuardDetailInfo* other);

  // implements Message ----------------------------------------------

  stRetGuardDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetGuardDetailInfo& from);
  void MergeFrom(const stRetGuardDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetGuardDetailInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetGuardDetailInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetGuardDetailInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetGuardDetailInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetGuardDetailInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetGuardDetailInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetGuardDetailInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetGuardDetailInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetGuardDetailInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetGuardDetailInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetGuardDetailInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetGuardDetailInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetGuardDetailInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetGuardDetailInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetGuardDetailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetGuardDetailInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetGuardDetailInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetGuardDetailInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stGuardDetailInfo detailInfo = 1;
  inline bool has_detailinfo() const;
  inline void clear_detailinfo();
  static const int kDetailInfoFieldNumber = 1;
  inline const ::MiscProto::stGuardDetailInfo& detailinfo() const;
  inline ::MiscProto::stGuardDetailInfo* mutable_detailinfo();
  inline ::MiscProto::stGuardDetailInfo* release_detailinfo();
  inline void set_allocated_detailinfo(::MiscProto::stGuardDetailInfo* detailinfo);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetGuardDetailInfo)
 private:
  inline void set_has_detailinfo();
  inline void clear_has_detailinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MiscProto::stGuardDetailInfo* detailinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetGuardDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqIntercept : public ::google::protobuf::Message {
 public:
  stReqIntercept();
  virtual ~stReqIntercept();

  stReqIntercept(const stReqIntercept& from);

  inline stReqIntercept& operator=(const stReqIntercept& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqIntercept& default_instance();

  void Swap(stReqIntercept* other);

  // implements Message ----------------------------------------------

  stReqIntercept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqIntercept& from);
  void MergeFrom(const stReqIntercept& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqIntercept_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqIntercept_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqIntercept_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqIntercept_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqIntercept_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqIntercept_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqIntercept_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqIntercept_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqIntercept_ProtoModID_Parse(name, value);
  }

  typedef stReqIntercept_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqIntercept_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqIntercept_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqIntercept_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqIntercept_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqIntercept_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqIntercept_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqIntercept_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqIntercept_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqIntercept)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqIntercept* default_instance_;
};
// -------------------------------------------------------------------

class stIntercerptResult : public ::google::protobuf::Message {
 public:
  stIntercerptResult();
  virtual ~stIntercerptResult();

  stIntercerptResult(const stIntercerptResult& from);

  inline stIntercerptResult& operator=(const stIntercerptResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stIntercerptResult& default_instance();

  void Swap(stIntercerptResult* other);

  // implements Message ----------------------------------------------

  stIntercerptResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stIntercerptResult& from);
  void MergeFrom(const stIntercerptResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stIntercerptResult_eResult eResult;
  static const eResult eSuccess = stIntercerptResult_eResult_eSuccess;
  static const eResult eNot_Begin_Guard = stIntercerptResult_eResult_eNot_Begin_Guard;
  static const eResult eIntercept_Num_Use_Out = stIntercerptResult_eResult_eIntercept_Num_Use_Out;
  static const eResult eBeing_Intercepted = stIntercerptResult_eResult_eBeing_Intercepted;
  static const eResult eSafe_State = stIntercerptResult_eResult_eSafe_State;
  static const eResult eBeIntercept_Num_Use_Out = stIntercerptResult_eResult_eBeIntercept_Num_Use_Out;
  static const eResult eHelp_This_Guard = stIntercerptResult_eResult_eHelp_This_Guard;
  static inline bool eResult_IsValid(int value) {
    return stIntercerptResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stIntercerptResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stIntercerptResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stIntercerptResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stIntercerptResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stIntercerptResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stIntercerptResult_eResult_Parse(name, value);
  }

  typedef stIntercerptResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stIntercerptResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stIntercerptResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stIntercerptResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stIntercerptResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stIntercerptResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stIntercerptResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stIntercerptResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stIntercerptResult_ProtoModID_Parse(name, value);
  }

  typedef stIntercerptResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stIntercerptResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stIntercerptResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stIntercerptResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stIntercerptResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stIntercerptResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stIntercerptResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stIntercerptResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stIntercerptResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stIntercerptResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stIntercerptResult_eResult result() const;
  inline void set_result(::MiscProto::stIntercerptResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stIntercerptResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stIntercerptResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqGuard : public ::google::protobuf::Message {
 public:
  stReqGuard();
  virtual ~stReqGuard();

  stReqGuard(const stReqGuard& from);

  inline stReqGuard& operator=(const stReqGuard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGuard& default_instance();

  void Swap(stReqGuard* other);

  // implements Message ----------------------------------------------

  stReqGuard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGuard& from);
  void MergeFrom(const stReqGuard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGuard_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGuard_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGuard_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGuard_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGuard_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGuard_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGuard_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGuard_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGuard_ProtoModID_Parse(name, value);
  }

  typedef stReqGuard_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGuard_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGuard_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGuard_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGuard_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGuard_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGuard_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGuard_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGuard_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqGuard)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqGuard* default_instance_;
};
// -------------------------------------------------------------------

class stRetGuardWin : public ::google::protobuf::Message {
 public:
  stRetGuardWin();
  virtual ~stRetGuardWin();

  stRetGuardWin(const stRetGuardWin& from);

  inline stRetGuardWin& operator=(const stRetGuardWin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetGuardWin& default_instance();

  void Swap(stRetGuardWin* other);

  // implements Message ----------------------------------------------

  stRetGuardWin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetGuardWin& from);
  void MergeFrom(const stRetGuardWin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetGuardWin_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetGuardWin_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetGuardWin_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetGuardWin_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetGuardWin_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetGuardWin_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetGuardWin_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetGuardWin_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetGuardWin_ProtoModID_Parse(name, value);
  }

  typedef stRetGuardWin_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetGuardWin_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetGuardWin_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetGuardWin_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetGuardWin_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetGuardWin_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetGuardWin_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetGuardWin_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetGuardWin_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 quality = 1;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 1;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional uint32 refreshNum = 2;
  inline bool has_refreshnum() const;
  inline void clear_refreshnum();
  static const int kRefreshNumFieldNumber = 2;
  inline ::google::protobuf::uint32 refreshnum() const;
  inline void set_refreshnum(::google::protobuf::uint32 value);

  // optional uint32 buff = 3;
  inline bool has_buff() const;
  inline void clear_buff();
  static const int kBuffFieldNumber = 3;
  inline ::google::protobuf::uint32 buff() const;
  inline void set_buff(::google::protobuf::uint32 value);

  // optional string friendName = 4;
  inline bool has_friendname() const;
  inline void clear_friendname();
  static const int kFriendNameFieldNumber = 4;
  inline const ::std::string& friendname() const;
  inline void set_friendname(const ::std::string& value);
  inline void set_friendname(const char* value);
  inline void set_friendname(const char* value, size_t size);
  inline ::std::string* mutable_friendname();
  inline ::std::string* release_friendname();
  inline void set_allocated_friendname(::std::string* friendname);

  // optional bool canFreeRefresh = 5;
  inline bool has_canfreerefresh() const;
  inline void clear_canfreerefresh();
  static const int kCanFreeRefreshFieldNumber = 5;
  inline bool canfreerefresh() const;
  inline void set_canfreerefresh(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetGuardWin)
 private:
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_refreshnum();
  inline void clear_has_refreshnum();
  inline void set_has_buff();
  inline void clear_has_buff();
  inline void set_has_friendname();
  inline void clear_has_friendname();
  inline void set_has_canfreerefresh();
  inline void clear_has_canfreerefresh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 refreshnum_;
  ::std::string* friendname_;
  ::google::protobuf::uint32 buff_;
  bool canfreerefresh_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetGuardWin* default_instance_;
};
// -------------------------------------------------------------------

class stReqSummonHighQualityGuard : public ::google::protobuf::Message {
 public:
  stReqSummonHighQualityGuard();
  virtual ~stReqSummonHighQualityGuard();

  stReqSummonHighQualityGuard(const stReqSummonHighQualityGuard& from);

  inline stReqSummonHighQualityGuard& operator=(const stReqSummonHighQualityGuard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSummonHighQualityGuard& default_instance();

  void Swap(stReqSummonHighQualityGuard* other);

  // implements Message ----------------------------------------------

  stReqSummonHighQualityGuard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSummonHighQualityGuard& from);
  void MergeFrom(const stReqSummonHighQualityGuard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSummonHighQualityGuard_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSummonHighQualityGuard_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSummonHighQualityGuard_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSummonHighQualityGuard_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSummonHighQualityGuard_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSummonHighQualityGuard_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSummonHighQualityGuard_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSummonHighQualityGuard_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSummonHighQualityGuard_ProtoModID_Parse(name, value);
  }

  typedef stReqSummonHighQualityGuard_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSummonHighQualityGuard_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSummonHighQualityGuard_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSummonHighQualityGuard_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSummonHighQualityGuard_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSummonHighQualityGuard_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSummonHighQualityGuard_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSummonHighQualityGuard_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSummonHighQualityGuard_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqSummonHighQualityGuard)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqSummonHighQualityGuard* default_instance_;
};
// -------------------------------------------------------------------

class stSummonHighQualityGuardResult : public ::google::protobuf::Message {
 public:
  stSummonHighQualityGuardResult();
  virtual ~stSummonHighQualityGuardResult();

  stSummonHighQualityGuardResult(const stSummonHighQualityGuardResult& from);

  inline stSummonHighQualityGuardResult& operator=(const stSummonHighQualityGuardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSummonHighQualityGuardResult& default_instance();

  void Swap(stSummonHighQualityGuardResult* other);

  // implements Message ----------------------------------------------

  stSummonHighQualityGuardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSummonHighQualityGuardResult& from);
  void MergeFrom(const stSummonHighQualityGuardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSummonHighQualityGuardResult_eResult eResult;
  static const eResult eSuccess = stSummonHighQualityGuardResult_eResult_eSuccess;
  static const eResult eInner_Cfg_Error = stSummonHighQualityGuardResult_eResult_eInner_Cfg_Error;
  static const eResult eDiamond_Not_Enough = stSummonHighQualityGuardResult_eResult_eDiamond_Not_Enough;
  static inline bool eResult_IsValid(int value) {
    return stSummonHighQualityGuardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stSummonHighQualityGuardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stSummonHighQualityGuardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stSummonHighQualityGuardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stSummonHighQualityGuardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stSummonHighQualityGuardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stSummonHighQualityGuardResult_eResult_Parse(name, value);
  }

  typedef stSummonHighQualityGuardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSummonHighQualityGuardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSummonHighQualityGuardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSummonHighQualityGuardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSummonHighQualityGuardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSummonHighQualityGuardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSummonHighQualityGuardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSummonHighQualityGuardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSummonHighQualityGuardResult_ProtoModID_Parse(name, value);
  }

  typedef stSummonHighQualityGuardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSummonHighQualityGuardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSummonHighQualityGuardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSummonHighQualityGuardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSummonHighQualityGuardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSummonHighQualityGuardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSummonHighQualityGuardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSummonHighQualityGuardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSummonHighQualityGuardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stSummonHighQualityGuardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stSummonHighQualityGuardResult_eResult result() const;
  inline void set_result(::MiscProto::stSummonHighQualityGuardResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSummonHighQualityGuardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSummonHighQualityGuardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqGuardInspired : public ::google::protobuf::Message {
 public:
  stReqGuardInspired();
  virtual ~stReqGuardInspired();

  stReqGuardInspired(const stReqGuardInspired& from);

  inline stReqGuardInspired& operator=(const stReqGuardInspired& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGuardInspired& default_instance();

  void Swap(stReqGuardInspired* other);

  // implements Message ----------------------------------------------

  stReqGuardInspired* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGuardInspired& from);
  void MergeFrom(const stReqGuardInspired& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGuardInspired_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGuardInspired_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGuardInspired_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGuardInspired_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGuardInspired_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGuardInspired_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGuardInspired_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGuardInspired_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGuardInspired_ProtoModID_Parse(name, value);
  }

  typedef stReqGuardInspired_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGuardInspired_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGuardInspired_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGuardInspired_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGuardInspired_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGuardInspired_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGuardInspired_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGuardInspired_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGuardInspired_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqGuardInspired)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqGuardInspired* default_instance_;
};
// -------------------------------------------------------------------

class stGuardInspiredResult : public ::google::protobuf::Message {
 public:
  stGuardInspiredResult();
  virtual ~stGuardInspiredResult();

  stGuardInspiredResult(const stGuardInspiredResult& from);

  inline stGuardInspiredResult& operator=(const stGuardInspiredResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuardInspiredResult& default_instance();

  void Swap(stGuardInspiredResult* other);

  // implements Message ----------------------------------------------

  stGuardInspiredResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuardInspiredResult& from);
  void MergeFrom(const stGuardInspiredResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuardInspiredResult_eResult eResult;
  static const eResult eSuccess = stGuardInspiredResult_eResult_eSuccess;
  static const eResult eDiamond_Not_Enough = stGuardInspiredResult_eResult_eDiamond_Not_Enough;
  static inline bool eResult_IsValid(int value) {
    return stGuardInspiredResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGuardInspiredResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGuardInspiredResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGuardInspiredResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGuardInspiredResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGuardInspiredResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGuardInspiredResult_eResult_Parse(name, value);
  }

  typedef stGuardInspiredResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuardInspiredResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuardInspiredResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuardInspiredResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuardInspiredResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuardInspiredResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuardInspiredResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuardInspiredResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuardInspiredResult_ProtoModID_Parse(name, value);
  }

  typedef stGuardInspiredResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuardInspiredResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuardInspiredResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuardInspiredResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuardInspiredResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuardInspiredResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuardInspiredResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuardInspiredResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuardInspiredResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stGuardInspiredResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stGuardInspiredResult_eResult result() const;
  inline void set_result(::MiscProto::stGuardInspiredResult_eResult value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGuardInspiredResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGuardInspiredResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRefreshGuardQuality : public ::google::protobuf::Message {
 public:
  stReqRefreshGuardQuality();
  virtual ~stReqRefreshGuardQuality();

  stReqRefreshGuardQuality(const stReqRefreshGuardQuality& from);

  inline stReqRefreshGuardQuality& operator=(const stReqRefreshGuardQuality& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRefreshGuardQuality& default_instance();

  void Swap(stReqRefreshGuardQuality* other);

  // implements Message ----------------------------------------------

  stReqRefreshGuardQuality* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRefreshGuardQuality& from);
  void MergeFrom(const stReqRefreshGuardQuality& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRefreshGuardQuality_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRefreshGuardQuality_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRefreshGuardQuality_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRefreshGuardQuality_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRefreshGuardQuality_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRefreshGuardQuality_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRefreshGuardQuality_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRefreshGuardQuality_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRefreshGuardQuality_ProtoModID_Parse(name, value);
  }

  typedef stReqRefreshGuardQuality_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRefreshGuardQuality_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRefreshGuardQuality_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRefreshGuardQuality_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRefreshGuardQuality_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRefreshGuardQuality_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRefreshGuardQuality_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqRefreshGuardQuality)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqRefreshGuardQuality* default_instance_;
};
// -------------------------------------------------------------------

class stRetRefreshGuardQualityResult : public ::google::protobuf::Message {
 public:
  stRetRefreshGuardQualityResult();
  virtual ~stRetRefreshGuardQualityResult();

  stRetRefreshGuardQualityResult(const stRetRefreshGuardQualityResult& from);

  inline stRetRefreshGuardQualityResult& operator=(const stRetRefreshGuardQualityResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRefreshGuardQualityResult& default_instance();

  void Swap(stRetRefreshGuardQualityResult* other);

  // implements Message ----------------------------------------------

  stRetRefreshGuardQualityResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRefreshGuardQualityResult& from);
  void MergeFrom(const stRetRefreshGuardQualityResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRefreshGuardQualityResult_eResult eResult;
  static const eResult eSuccess = stRetRefreshGuardQualityResult_eResult_eSuccess;
  static const eResult eDiamond_Not_Enough = stRetRefreshGuardQualityResult_eResult_eDiamond_Not_Enough;
  static const eResult eFail = stRetRefreshGuardQualityResult_eResult_eFail;
  static inline bool eResult_IsValid(int value) {
    return stRetRefreshGuardQualityResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetRefreshGuardQualityResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetRefreshGuardQualityResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetRefreshGuardQualityResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetRefreshGuardQualityResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetRefreshGuardQualityResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetRefreshGuardQualityResult_eResult_Parse(name, value);
  }

  typedef stRetRefreshGuardQualityResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRefreshGuardQualityResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRefreshGuardQualityResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRefreshGuardQualityResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRefreshGuardQualityResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRefreshGuardQualityResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRefreshGuardQualityResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRefreshGuardQualityResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRefreshGuardQualityResult_ProtoModID_Parse(name, value);
  }

  typedef stRetRefreshGuardQualityResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRefreshGuardQualityResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRefreshGuardQualityResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRefreshGuardQualityResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRefreshGuardQualityResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRefreshGuardQualityResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRefreshGuardQualityResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRefreshGuardQualityResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRefreshGuardQualityResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stRetRefreshGuardQualityResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stRetRefreshGuardQualityResult_eResult result() const;
  inline void set_result(::MiscProto::stRetRefreshGuardQualityResult_eResult value);

  // optional uint32 quality = 2;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetRefreshGuardQualityResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetRefreshGuardQualityResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqCanHelpGuardFriend : public ::google::protobuf::Message {
 public:
  stReqCanHelpGuardFriend();
  virtual ~stReqCanHelpGuardFriend();

  stReqCanHelpGuardFriend(const stReqCanHelpGuardFriend& from);

  inline stReqCanHelpGuardFriend& operator=(const stReqCanHelpGuardFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCanHelpGuardFriend& default_instance();

  void Swap(stReqCanHelpGuardFriend* other);

  // implements Message ----------------------------------------------

  stReqCanHelpGuardFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCanHelpGuardFriend& from);
  void MergeFrom(const stReqCanHelpGuardFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCanHelpGuardFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCanHelpGuardFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCanHelpGuardFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCanHelpGuardFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCanHelpGuardFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCanHelpGuardFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCanHelpGuardFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCanHelpGuardFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCanHelpGuardFriend_ProtoModID_Parse(name, value);
  }

  typedef stReqCanHelpGuardFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCanHelpGuardFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCanHelpGuardFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCanHelpGuardFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCanHelpGuardFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCanHelpGuardFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCanHelpGuardFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCanHelpGuardFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCanHelpGuardFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqCanHelpGuardFriend)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqCanHelpGuardFriend* default_instance_;
};
// -------------------------------------------------------------------

class stHelpGaurdFriendInfo : public ::google::protobuf::Message {
 public:
  stHelpGaurdFriendInfo();
  virtual ~stHelpGaurdFriendInfo();

  stHelpGaurdFriendInfo(const stHelpGaurdFriendInfo& from);

  inline stHelpGaurdFriendInfo& operator=(const stHelpGaurdFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHelpGaurdFriendInfo& default_instance();

  void Swap(stHelpGaurdFriendInfo* other);

  // implements Message ----------------------------------------------

  stHelpGaurdFriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHelpGaurdFriendInfo& from);
  void MergeFrom(const stHelpGaurdFriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 remainHelpNum = 3;
  inline bool has_remainhelpnum() const;
  inline void clear_remainhelpnum();
  static const int kRemainHelpNumFieldNumber = 3;
  inline ::google::protobuf::uint32 remainhelpnum() const;
  inline void set_remainhelpnum(::google::protobuf::uint32 value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stHelpGaurdFriendInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_remainhelpnum();
  inline void clear_has_remainhelpnum();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 remainhelpnum_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stHelpGaurdFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetCanHelpGuardFriend : public ::google::protobuf::Message {
 public:
  stRetCanHelpGuardFriend();
  virtual ~stRetCanHelpGuardFriend();

  stRetCanHelpGuardFriend(const stRetCanHelpGuardFriend& from);

  inline stRetCanHelpGuardFriend& operator=(const stRetCanHelpGuardFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetCanHelpGuardFriend& default_instance();

  void Swap(stRetCanHelpGuardFriend* other);

  // implements Message ----------------------------------------------

  stRetCanHelpGuardFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetCanHelpGuardFriend& from);
  void MergeFrom(const stRetCanHelpGuardFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetCanHelpGuardFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetCanHelpGuardFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetCanHelpGuardFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetCanHelpGuardFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetCanHelpGuardFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetCanHelpGuardFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetCanHelpGuardFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetCanHelpGuardFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetCanHelpGuardFriend_ProtoModID_Parse(name, value);
  }

  typedef stRetCanHelpGuardFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetCanHelpGuardFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetCanHelpGuardFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetCanHelpGuardFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetCanHelpGuardFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetCanHelpGuardFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetCanHelpGuardFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetCanHelpGuardFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetCanHelpGuardFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stHelpGaurdFriendInfo infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::MiscProto::stHelpGaurdFriendInfo& infos(int index) const;
  inline ::MiscProto::stHelpGaurdFriendInfo* mutable_infos(int index);
  inline ::MiscProto::stHelpGaurdFriendInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stHelpGaurdFriendInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stHelpGaurdFriendInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetCanHelpGuardFriend)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stHelpGaurdFriendInfo > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetCanHelpGuardFriend* default_instance_;
};
// -------------------------------------------------------------------

class stInviteFriendForHelpGuard : public ::google::protobuf::Message {
 public:
  stInviteFriendForHelpGuard();
  virtual ~stInviteFriendForHelpGuard();

  stInviteFriendForHelpGuard(const stInviteFriendForHelpGuard& from);

  inline stInviteFriendForHelpGuard& operator=(const stInviteFriendForHelpGuard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInviteFriendForHelpGuard& default_instance();

  void Swap(stInviteFriendForHelpGuard* other);

  // implements Message ----------------------------------------------

  stInviteFriendForHelpGuard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInviteFriendForHelpGuard& from);
  void MergeFrom(const stInviteFriendForHelpGuard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInviteFriendForHelpGuard_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInviteFriendForHelpGuard_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInviteFriendForHelpGuard_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInviteFriendForHelpGuard_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInviteFriendForHelpGuard_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInviteFriendForHelpGuard_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInviteFriendForHelpGuard_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInviteFriendForHelpGuard_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInviteFriendForHelpGuard_ProtoModID_Parse(name, value);
  }

  typedef stInviteFriendForHelpGuard_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInviteFriendForHelpGuard_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInviteFriendForHelpGuard_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInviteFriendForHelpGuard_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInviteFriendForHelpGuard_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInviteFriendForHelpGuard_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInviteFriendForHelpGuard_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInviteFriendForHelpGuard_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInviteFriendForHelpGuard_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stInviteFriendForHelpGuard)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stInviteFriendForHelpGuard* default_instance_;
};
// -------------------------------------------------------------------

class stInviteFriendForHelpGuardResult : public ::google::protobuf::Message {
 public:
  stInviteFriendForHelpGuardResult();
  virtual ~stInviteFriendForHelpGuardResult();

  stInviteFriendForHelpGuardResult(const stInviteFriendForHelpGuardResult& from);

  inline stInviteFriendForHelpGuardResult& operator=(const stInviteFriendForHelpGuardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInviteFriendForHelpGuardResult& default_instance();

  void Swap(stInviteFriendForHelpGuardResult* other);

  // implements Message ----------------------------------------------

  stInviteFriendForHelpGuardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInviteFriendForHelpGuardResult& from);
  void MergeFrom(const stInviteFriendForHelpGuardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInviteFriendForHelpGuardResult_eResult eResult;
  static const eResult eSuccess = stInviteFriendForHelpGuardResult_eResult_eSuccess;
  static const eResult eHelp_Num_Use_Out = stInviteFriendForHelpGuardResult_eResult_eHelp_Num_Use_Out;
  static const eResult eNot_Online = stInviteFriendForHelpGuardResult_eResult_eNot_Online;
  static const eResult eRefuse = stInviteFriendForHelpGuardResult_eResult_eRefuse;
  static inline bool eResult_IsValid(int value) {
    return stInviteFriendForHelpGuardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stInviteFriendForHelpGuardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stInviteFriendForHelpGuardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stInviteFriendForHelpGuardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stInviteFriendForHelpGuardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stInviteFriendForHelpGuardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stInviteFriendForHelpGuardResult_eResult_Parse(name, value);
  }

  typedef stInviteFriendForHelpGuardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInviteFriendForHelpGuardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInviteFriendForHelpGuardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInviteFriendForHelpGuardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInviteFriendForHelpGuardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInviteFriendForHelpGuardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInviteFriendForHelpGuardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInviteFriendForHelpGuardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInviteFriendForHelpGuardResult_ProtoModID_Parse(name, value);
  }

  typedef stInviteFriendForHelpGuardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInviteFriendForHelpGuardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInviteFriendForHelpGuardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInviteFriendForHelpGuardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInviteFriendForHelpGuardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInviteFriendForHelpGuardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInviteFriendForHelpGuardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInviteFriendForHelpGuardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInviteFriendForHelpGuardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stInviteFriendForHelpGuardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stInviteFriendForHelpGuardResult_eResult result() const;
  inline void set_result(::MiscProto::stInviteFriendForHelpGuardResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stInviteFriendForHelpGuardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stInviteFriendForHelpGuardResult* default_instance_;
};
// -------------------------------------------------------------------

class stAskFriendHelpGuard : public ::google::protobuf::Message {
 public:
  stAskFriendHelpGuard();
  virtual ~stAskFriendHelpGuard();

  stAskFriendHelpGuard(const stAskFriendHelpGuard& from);

  inline stAskFriendHelpGuard& operator=(const stAskFriendHelpGuard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAskFriendHelpGuard& default_instance();

  void Swap(stAskFriendHelpGuard* other);

  // implements Message ----------------------------------------------

  stAskFriendHelpGuard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAskFriendHelpGuard& from);
  void MergeFrom(const stAskFriendHelpGuard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAskFriendHelpGuard_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAskFriendHelpGuard_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAskFriendHelpGuard_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAskFriendHelpGuard_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAskFriendHelpGuard_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAskFriendHelpGuard_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAskFriendHelpGuard_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAskFriendHelpGuard_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAskFriendHelpGuard_ProtoModID_Parse(name, value);
  }

  typedef stAskFriendHelpGuard_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAskFriendHelpGuard_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAskFriendHelpGuard_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAskFriendHelpGuard_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAskFriendHelpGuard_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAskFriendHelpGuard_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAskFriendHelpGuard_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAskFriendHelpGuard_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAskFriendHelpGuard_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string inviterName = 1;
  inline bool has_invitername() const;
  inline void clear_invitername();
  static const int kInviterNameFieldNumber = 1;
  inline const ::std::string& invitername() const;
  inline void set_invitername(const ::std::string& value);
  inline void set_invitername(const char* value);
  inline void set_invitername(const char* value, size_t size);
  inline ::std::string* mutable_invitername();
  inline ::std::string* release_invitername();
  inline void set_allocated_invitername(::std::string* invitername);

  // optional uint32 inviterID = 2;
  inline bool has_inviterid() const;
  inline void clear_inviterid();
  static const int kInviterIDFieldNumber = 2;
  inline ::google::protobuf::uint32 inviterid() const;
  inline void set_inviterid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stAskFriendHelpGuard)
 private:
  inline void set_has_invitername();
  inline void clear_has_invitername();
  inline void set_has_inviterid();
  inline void clear_has_inviterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* invitername_;
  ::google::protobuf::uint32 inviterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stAskFriendHelpGuard* default_instance_;
};
// -------------------------------------------------------------------

class stReplyHelpGuard : public ::google::protobuf::Message {
 public:
  stReplyHelpGuard();
  virtual ~stReplyHelpGuard();

  stReplyHelpGuard(const stReplyHelpGuard& from);

  inline stReplyHelpGuard& operator=(const stReplyHelpGuard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReplyHelpGuard& default_instance();

  void Swap(stReplyHelpGuard* other);

  // implements Message ----------------------------------------------

  stReplyHelpGuard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReplyHelpGuard& from);
  void MergeFrom(const stReplyHelpGuard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReplyHelpGuard_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReplyHelpGuard_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReplyHelpGuard_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReplyHelpGuard_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReplyHelpGuard_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReplyHelpGuard_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReplyHelpGuard_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReplyHelpGuard_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReplyHelpGuard_ProtoModID_Parse(name, value);
  }

  typedef stReplyHelpGuard_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReplyHelpGuard_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReplyHelpGuard_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReplyHelpGuard_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReplyHelpGuard_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReplyHelpGuard_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReplyHelpGuard_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReplyHelpGuard_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReplyHelpGuard_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool agree = 1;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 1;
  inline bool agree() const;
  inline void set_agree(bool value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReplyHelpGuard)
 private:
  inline void set_has_agree();
  inline void clear_has_agree();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool agree_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReplyHelpGuard* default_instance_;
};
// -------------------------------------------------------------------

class stReplyHelpGuardResult : public ::google::protobuf::Message {
 public:
  stReplyHelpGuardResult();
  virtual ~stReplyHelpGuardResult();

  stReplyHelpGuardResult(const stReplyHelpGuardResult& from);

  inline stReplyHelpGuardResult& operator=(const stReplyHelpGuardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReplyHelpGuardResult& default_instance();

  void Swap(stReplyHelpGuardResult* other);

  // implements Message ----------------------------------------------

  stReplyHelpGuardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReplyHelpGuardResult& from);
  void MergeFrom(const stReplyHelpGuardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReplyHelpGuardResult_eResult eResult;
  static const eResult eSuccess = stReplyHelpGuardResult_eResult_eSuccess;
  static const eResult eHas_Start = stReplyHelpGuardResult_eResult_eHas_Start;
  static const eResult eHelp_Num_Use_Out = stReplyHelpGuardResult_eResult_eHelp_Num_Use_Out;
  static const eResult eHas_Friend_Help = stReplyHelpGuardResult_eResult_eHas_Friend_Help;
  static inline bool eResult_IsValid(int value) {
    return stReplyHelpGuardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stReplyHelpGuardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stReplyHelpGuardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stReplyHelpGuardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stReplyHelpGuardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stReplyHelpGuardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stReplyHelpGuardResult_eResult_Parse(name, value);
  }

  typedef stReplyHelpGuardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReplyHelpGuardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReplyHelpGuardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReplyHelpGuardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReplyHelpGuardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReplyHelpGuardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReplyHelpGuardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReplyHelpGuardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReplyHelpGuardResult_ProtoModID_Parse(name, value);
  }

  typedef stReplyHelpGuardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReplyHelpGuardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReplyHelpGuardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReplyHelpGuardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReplyHelpGuardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReplyHelpGuardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReplyHelpGuardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReplyHelpGuardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReplyHelpGuardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stReplyHelpGuardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stReplyHelpGuardResult_eResult result() const;
  inline void set_result(::MiscProto::stReplyHelpGuardResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReplyHelpGuardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReplyHelpGuardResult* default_instance_;
};
// -------------------------------------------------------------------

class stUserAgreeHelpGuard : public ::google::protobuf::Message {
 public:
  stUserAgreeHelpGuard();
  virtual ~stUserAgreeHelpGuard();

  stUserAgreeHelpGuard(const stUserAgreeHelpGuard& from);

  inline stUserAgreeHelpGuard& operator=(const stUserAgreeHelpGuard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserAgreeHelpGuard& default_instance();

  void Swap(stUserAgreeHelpGuard* other);

  // implements Message ----------------------------------------------

  stUserAgreeHelpGuard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserAgreeHelpGuard& from);
  void MergeFrom(const stUserAgreeHelpGuard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserAgreeHelpGuard_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserAgreeHelpGuard_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserAgreeHelpGuard_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserAgreeHelpGuard_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserAgreeHelpGuard_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserAgreeHelpGuard_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserAgreeHelpGuard_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserAgreeHelpGuard_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserAgreeHelpGuard_ProtoModID_Parse(name, value);
  }

  typedef stUserAgreeHelpGuard_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserAgreeHelpGuard_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserAgreeHelpGuard_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserAgreeHelpGuard_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserAgreeHelpGuard_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserAgreeHelpGuard_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserAgreeHelpGuard_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserAgreeHelpGuard_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserAgreeHelpGuard_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stUserAgreeHelpGuard)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stUserAgreeHelpGuard* default_instance_;
};
// -------------------------------------------------------------------

class stBeginGuard : public ::google::protobuf::Message {
 public:
  stBeginGuard();
  virtual ~stBeginGuard();

  stBeginGuard(const stBeginGuard& from);

  inline stBeginGuard& operator=(const stBeginGuard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBeginGuard& default_instance();

  void Swap(stBeginGuard* other);

  // implements Message ----------------------------------------------

  stBeginGuard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBeginGuard& from);
  void MergeFrom(const stBeginGuard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBeginGuard_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBeginGuard_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBeginGuard_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBeginGuard_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBeginGuard_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBeginGuard_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBeginGuard_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBeginGuard_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBeginGuard_ProtoModID_Parse(name, value);
  }

  typedef stBeginGuard_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBeginGuard_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBeginGuard_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBeginGuard_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBeginGuard_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBeginGuard_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBeginGuard_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBeginGuard_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBeginGuard_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stBeginGuard)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stBeginGuard* default_instance_;
};
// -------------------------------------------------------------------

class stBeginGuardResult : public ::google::protobuf::Message {
 public:
  stBeginGuardResult();
  virtual ~stBeginGuardResult();

  stBeginGuardResult(const stBeginGuardResult& from);

  inline stBeginGuardResult& operator=(const stBeginGuardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBeginGuardResult& default_instance();

  void Swap(stBeginGuardResult* other);

  // implements Message ----------------------------------------------

  stBeginGuardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBeginGuardResult& from);
  void MergeFrom(const stBeginGuardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBeginGuardResult_eResult eResult;
  static const eResult eSuccess = stBeginGuardResult_eResult_eSuccess;
  static const eResult eHas_Begin = stBeginGuardResult_eResult_eHas_Begin;
  static const eResult eUse_Out_Num = stBeginGuardResult_eResult_eUse_Out_Num;
  static inline bool eResult_IsValid(int value) {
    return stBeginGuardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stBeginGuardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stBeginGuardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stBeginGuardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stBeginGuardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stBeginGuardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stBeginGuardResult_eResult_Parse(name, value);
  }

  typedef stBeginGuardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBeginGuardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBeginGuardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBeginGuardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBeginGuardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBeginGuardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBeginGuardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBeginGuardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBeginGuardResult_ProtoModID_Parse(name, value);
  }

  typedef stBeginGuardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBeginGuardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBeginGuardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBeginGuardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBeginGuardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBeginGuardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBeginGuardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBeginGuardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBeginGuardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stBeginGuardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stBeginGuardResult_eResult result() const;
  inline void set_result(::MiscProto::stBeginGuardResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stBeginGuardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stBeginGuardResult* default_instance_;
};
// -------------------------------------------------------------------

class stInterceptInfo : public ::google::protobuf::Message {
 public:
  stInterceptInfo();
  virtual ~stInterceptInfo();

  stInterceptInfo(const stInterceptInfo& from);

  inline stInterceptInfo& operator=(const stInterceptInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInterceptInfo& default_instance();

  void Swap(stInterceptInfo* other);

  // implements Message ----------------------------------------------

  stInterceptInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInterceptInfo& from);
  void MergeFrom(const stInterceptInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:MiscProto.stInterceptInfo)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::uint32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stInterceptInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqInterceptInfo : public ::google::protobuf::Message {
 public:
  stReqInterceptInfo();
  virtual ~stReqInterceptInfo();

  stReqInterceptInfo(const stReqInterceptInfo& from);

  inline stReqInterceptInfo& operator=(const stReqInterceptInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqInterceptInfo& default_instance();

  void Swap(stReqInterceptInfo* other);

  // implements Message ----------------------------------------------

  stReqInterceptInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqInterceptInfo& from);
  void MergeFrom(const stReqInterceptInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqInterceptInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqInterceptInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqInterceptInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqInterceptInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqInterceptInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqInterceptInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqInterceptInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqInterceptInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqInterceptInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqInterceptInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqInterceptInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqInterceptInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqInterceptInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqInterceptInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqInterceptInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqInterceptInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqInterceptInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqInterceptInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqInterceptInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqInterceptInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetInterceptInfo : public ::google::protobuf::Message {
 public:
  stRetInterceptInfo();
  virtual ~stRetInterceptInfo();

  stRetInterceptInfo(const stRetInterceptInfo& from);

  inline stRetInterceptInfo& operator=(const stRetInterceptInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetInterceptInfo& default_instance();

  void Swap(stRetInterceptInfo* other);

  // implements Message ----------------------------------------------

  stRetInterceptInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetInterceptInfo& from);
  void MergeFrom(const stRetInterceptInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetInterceptInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetInterceptInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetInterceptInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetInterceptInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetInterceptInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetInterceptInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetInterceptInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetInterceptInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetInterceptInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetInterceptInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetInterceptInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetInterceptInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetInterceptInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetInterceptInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetInterceptInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetInterceptInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetInterceptInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetInterceptInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stInterceptInfo infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::MiscProto::stInterceptInfo& infos(int index) const;
  inline ::MiscProto::stInterceptInfo* mutable_infos(int index);
  inline ::MiscProto::stInterceptInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stInterceptInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stInterceptInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetInterceptInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stInterceptInfo > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetInterceptInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRechargeActivityInfoItem : public ::google::protobuf::Message {
 public:
  stRechargeActivityInfoItem();
  virtual ~stRechargeActivityInfoItem();

  stRechargeActivityInfoItem(const stRechargeActivityInfoItem& from);

  inline stRechargeActivityInfoItem& operator=(const stRechargeActivityInfoItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRechargeActivityInfoItem& default_instance();

  void Swap(stRechargeActivityInfoItem* other);

  // implements Message ----------------------------------------------

  stRechargeActivityInfoItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRechargeActivityInfoItem& from);
  void MergeFrom(const stRechargeActivityInfoItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 rechargeNum = 2;
  inline bool has_rechargenum() const;
  inline void clear_rechargenum();
  static const int kRechargeNumFieldNumber = 2;
  inline ::google::protobuf::uint32 rechargenum() const;
  inline void set_rechargenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRechargeActivityInfoItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rechargenum();
  inline void clear_has_rechargenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 rechargenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRechargeActivityInfoItem* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyRechargeActivityInfo : public ::google::protobuf::Message {
 public:
  stNotifyRechargeActivityInfo();
  virtual ~stNotifyRechargeActivityInfo();

  stNotifyRechargeActivityInfo(const stNotifyRechargeActivityInfo& from);

  inline stNotifyRechargeActivityInfo& operator=(const stNotifyRechargeActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyRechargeActivityInfo& default_instance();

  void Swap(stNotifyRechargeActivityInfo* other);

  // implements Message ----------------------------------------------

  stNotifyRechargeActivityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyRechargeActivityInfo& from);
  void MergeFrom(const stNotifyRechargeActivityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyRechargeActivityInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyRechargeActivityInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyRechargeActivityInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyRechargeActivityInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyRechargeActivityInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyRechargeActivityInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyRechargeActivityInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyRechargeActivityInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyRechargeActivityInfo_ProtoModID_Parse(name, value);
  }

  typedef stNotifyRechargeActivityInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyRechargeActivityInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyRechargeActivityInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyRechargeActivityInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyRechargeActivityInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyRechargeActivityInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyRechargeActivityInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyRechargeActivityInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyRechargeActivityInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stRechargeActivityInfoItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::MiscProto::stRechargeActivityInfoItem& items(int index) const;
  inline ::MiscProto::stRechargeActivityInfoItem* mutable_items(int index);
  inline ::MiscProto::stRechargeActivityInfoItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stRechargeActivityInfoItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stRechargeActivityInfoItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:MiscProto.stNotifyRechargeActivityInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stRechargeActivityInfoItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stNotifyRechargeActivityInfo* default_instance_;
};
// -------------------------------------------------------------------

class stLuckShopRefreshResult : public ::google::protobuf::Message {
 public:
  stLuckShopRefreshResult();
  virtual ~stLuckShopRefreshResult();

  stLuckShopRefreshResult(const stLuckShopRefreshResult& from);

  inline stLuckShopRefreshResult& operator=(const stLuckShopRefreshResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLuckShopRefreshResult& default_instance();

  void Swap(stLuckShopRefreshResult* other);

  // implements Message ----------------------------------------------

  stLuckShopRefreshResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLuckShopRefreshResult& from);
  void MergeFrom(const stLuckShopRefreshResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLuckShopRefreshResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLuckShopRefreshResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLuckShopRefreshResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLuckShopRefreshResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLuckShopRefreshResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLuckShopRefreshResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLuckShopRefreshResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLuckShopRefreshResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLuckShopRefreshResult_ProtoModID_Parse(name, value);
  }

  typedef stLuckShopRefreshResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLuckShopRefreshResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLuckShopRefreshResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLuckShopRefreshResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLuckShopRefreshResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLuckShopRefreshResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLuckShopRefreshResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLuckShopRefreshResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLuckShopRefreshResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 curRefreshVipLv = 1;
  inline bool has_currefreshviplv() const;
  inline void clear_currefreshviplv();
  static const int kCurRefreshVipLvFieldNumber = 1;
  inline ::google::protobuf::uint32 currefreshviplv() const;
  inline void set_currefreshviplv(::google::protobuf::uint32 value);

  // optional uint32 entryID = 2;
  inline bool has_entryid() const;
  inline void clear_entryid();
  static const int kEntryIDFieldNumber = 2;
  inline ::google::protobuf::uint32 entryid() const;
  inline void set_entryid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stLuckShopRefreshResult)
 private:
  inline void set_has_currefreshviplv();
  inline void clear_has_currefreshviplv();
  inline void set_has_entryid();
  inline void clear_has_entryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 currefreshviplv_;
  ::google::protobuf::uint32 entryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stLuckShopRefreshResult* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyGuardFinish : public ::google::protobuf::Message {
 public:
  stNotifyGuardFinish();
  virtual ~stNotifyGuardFinish();

  stNotifyGuardFinish(const stNotifyGuardFinish& from);

  inline stNotifyGuardFinish& operator=(const stNotifyGuardFinish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyGuardFinish& default_instance();

  void Swap(stNotifyGuardFinish* other);

  // implements Message ----------------------------------------------

  stNotifyGuardFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyGuardFinish& from);
  void MergeFrom(const stNotifyGuardFinish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyGuardFinish_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyGuardFinish_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyGuardFinish_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyGuardFinish_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyGuardFinish_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyGuardFinish_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyGuardFinish_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyGuardFinish_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyGuardFinish_ProtoModID_Parse(name, value);
  }

  typedef stNotifyGuardFinish_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyGuardFinish_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyGuardFinish_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyGuardFinish_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyGuardFinish_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyGuardFinish_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyGuardFinish_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyGuardFinish_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyGuardFinish_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 quality = 1;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 1;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional uint32 beInterceptNum = 2;
  inline bool has_beinterceptnum() const;
  inline void clear_beinterceptnum();
  static const int kBeInterceptNumFieldNumber = 2;
  inline ::google::protobuf::uint32 beinterceptnum() const;
  inline void set_beinterceptnum(::google::protobuf::uint32 value);

  // optional string friendName = 3;
  inline bool has_friendname() const;
  inline void clear_friendname();
  static const int kFriendNameFieldNumber = 3;
  inline const ::std::string& friendname() const;
  inline void set_friendname(const ::std::string& value);
  inline void set_friendname(const char* value);
  inline void set_friendname(const char* value, size_t size);
  inline ::std::string* mutable_friendname();
  inline ::std::string* release_friendname();
  inline void set_allocated_friendname(::std::string* friendname);

  // optional uint32 resID1 = 4;
  inline bool has_resid1() const;
  inline void clear_resid1();
  static const int kResID1FieldNumber = 4;
  inline ::google::protobuf::uint32 resid1() const;
  inline void set_resid1(::google::protobuf::uint32 value);

  // optional uint32 resNum1 = 5;
  inline bool has_resnum1() const;
  inline void clear_resnum1();
  static const int kResNum1FieldNumber = 5;
  inline ::google::protobuf::uint32 resnum1() const;
  inline void set_resnum1(::google::protobuf::uint32 value);

  // optional uint32 resID2 = 6;
  inline bool has_resid2() const;
  inline void clear_resid2();
  static const int kResID2FieldNumber = 6;
  inline ::google::protobuf::uint32 resid2() const;
  inline void set_resid2(::google::protobuf::uint32 value);

  // optional uint32 resNum2 = 7;
  inline bool has_resnum2() const;
  inline void clear_resnum2();
  static const int kResNum2FieldNumber = 7;
  inline ::google::protobuf::uint32 resnum2() const;
  inline void set_resnum2(::google::protobuf::uint32 value);

  // optional uint32 resID3 = 8;
  inline bool has_resid3() const;
  inline void clear_resid3();
  static const int kResID3FieldNumber = 8;
  inline ::google::protobuf::uint32 resid3() const;
  inline void set_resid3(::google::protobuf::uint32 value);

  // optional uint32 resNum3 = 9;
  inline bool has_resnum3() const;
  inline void clear_resnum3();
  static const int kResNum3FieldNumber = 9;
  inline ::google::protobuf::uint32 resnum3() const;
  inline void set_resnum3(::google::protobuf::uint32 value);

  // optional uint32 guardID = 10;
  inline bool has_guardid() const;
  inline void clear_guardid();
  static const int kGuardIDFieldNumber = 10;
  inline ::google::protobuf::uint32 guardid() const;
  inline void set_guardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stNotifyGuardFinish)
 private:
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_beinterceptnum();
  inline void clear_has_beinterceptnum();
  inline void set_has_friendname();
  inline void clear_has_friendname();
  inline void set_has_resid1();
  inline void clear_has_resid1();
  inline void set_has_resnum1();
  inline void clear_has_resnum1();
  inline void set_has_resid2();
  inline void clear_has_resid2();
  inline void set_has_resnum2();
  inline void clear_has_resnum2();
  inline void set_has_resid3();
  inline void clear_has_resid3();
  inline void set_has_resnum3();
  inline void clear_has_resnum3();
  inline void set_has_guardid();
  inline void clear_has_guardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 beinterceptnum_;
  ::std::string* friendname_;
  ::google::protobuf::uint32 resid1_;
  ::google::protobuf::uint32 resnum1_;
  ::google::protobuf::uint32 resid2_;
  ::google::protobuf::uint32 resnum2_;
  ::google::protobuf::uint32 resid3_;
  ::google::protobuf::uint32 resnum3_;
  ::google::protobuf::uint32 guardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stNotifyGuardFinish* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyFriendGuardFinish : public ::google::protobuf::Message {
 public:
  stNotifyFriendGuardFinish();
  virtual ~stNotifyFriendGuardFinish();

  stNotifyFriendGuardFinish(const stNotifyFriendGuardFinish& from);

  inline stNotifyFriendGuardFinish& operator=(const stNotifyFriendGuardFinish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyFriendGuardFinish& default_instance();

  void Swap(stNotifyFriendGuardFinish* other);

  // implements Message ----------------------------------------------

  stNotifyFriendGuardFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyFriendGuardFinish& from);
  void MergeFrom(const stNotifyFriendGuardFinish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyFriendGuardFinish_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyFriendGuardFinish_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyFriendGuardFinish_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyFriendGuardFinish_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyFriendGuardFinish_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyFriendGuardFinish_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyFriendGuardFinish_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyFriendGuardFinish_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyFriendGuardFinish_ProtoModID_Parse(name, value);
  }

  typedef stNotifyFriendGuardFinish_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyFriendGuardFinish_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyFriendGuardFinish_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyFriendGuardFinish_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyFriendGuardFinish_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyFriendGuardFinish_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyFriendGuardFinish_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyFriendGuardFinish_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyFriendGuardFinish_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 quality = 1;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 1;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional uint32 beInterceptNum = 2;
  inline bool has_beinterceptnum() const;
  inline void clear_beinterceptnum();
  static const int kBeInterceptNumFieldNumber = 2;
  inline ::google::protobuf::uint32 beinterceptnum() const;
  inline void set_beinterceptnum(::google::protobuf::uint32 value);

  // optional string friendName = 3;
  inline bool has_friendname() const;
  inline void clear_friendname();
  static const int kFriendNameFieldNumber = 3;
  inline const ::std::string& friendname() const;
  inline void set_friendname(const ::std::string& value);
  inline void set_friendname(const char* value);
  inline void set_friendname(const char* value, size_t size);
  inline ::std::string* mutable_friendname();
  inline ::std::string* release_friendname();
  inline void set_allocated_friendname(::std::string* friendname);

  // optional uint32 resID1 = 4;
  inline bool has_resid1() const;
  inline void clear_resid1();
  static const int kResID1FieldNumber = 4;
  inline ::google::protobuf::uint32 resid1() const;
  inline void set_resid1(::google::protobuf::uint32 value);

  // optional uint32 resNum1 = 5;
  inline bool has_resnum1() const;
  inline void clear_resnum1();
  static const int kResNum1FieldNumber = 5;
  inline ::google::protobuf::uint32 resnum1() const;
  inline void set_resnum1(::google::protobuf::uint32 value);

  // optional uint32 resID2 = 6;
  inline bool has_resid2() const;
  inline void clear_resid2();
  static const int kResID2FieldNumber = 6;
  inline ::google::protobuf::uint32 resid2() const;
  inline void set_resid2(::google::protobuf::uint32 value);

  // optional uint32 resNum2 = 7;
  inline bool has_resnum2() const;
  inline void clear_resnum2();
  static const int kResNum2FieldNumber = 7;
  inline ::google::protobuf::uint32 resnum2() const;
  inline void set_resnum2(::google::protobuf::uint32 value);

  // optional uint32 guardID = 8;
  inline bool has_guardid() const;
  inline void clear_guardid();
  static const int kGuardIDFieldNumber = 8;
  inline ::google::protobuf::uint32 guardid() const;
  inline void set_guardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stNotifyFriendGuardFinish)
 private:
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_beinterceptnum();
  inline void clear_has_beinterceptnum();
  inline void set_has_friendname();
  inline void clear_has_friendname();
  inline void set_has_resid1();
  inline void clear_has_resid1();
  inline void set_has_resnum1();
  inline void clear_has_resnum1();
  inline void set_has_resid2();
  inline void clear_has_resid2();
  inline void set_has_resnum2();
  inline void clear_has_resnum2();
  inline void set_has_guardid();
  inline void clear_has_guardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 beinterceptnum_;
  ::std::string* friendname_;
  ::google::protobuf::uint32 resid1_;
  ::google::protobuf::uint32 resnum1_;
  ::google::protobuf::uint32 resid2_;
  ::google::protobuf::uint32 resnum2_;
  ::google::protobuf::uint32 guardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stNotifyFriendGuardFinish* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyInterceptResult : public ::google::protobuf::Message {
 public:
  stNotifyInterceptResult();
  virtual ~stNotifyInterceptResult();

  stNotifyInterceptResult(const stNotifyInterceptResult& from);

  inline stNotifyInterceptResult& operator=(const stNotifyInterceptResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyInterceptResult& default_instance();

  void Swap(stNotifyInterceptResult* other);

  // implements Message ----------------------------------------------

  stNotifyInterceptResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyInterceptResult& from);
  void MergeFrom(const stNotifyInterceptResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyInterceptResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyInterceptResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyInterceptResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyInterceptResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyInterceptResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyInterceptResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyInterceptResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyInterceptResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyInterceptResult_ProtoModID_Parse(name, value);
  }

  typedef stNotifyInterceptResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyInterceptResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyInterceptResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyInterceptResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyInterceptResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyInterceptResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyInterceptResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyInterceptResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyInterceptResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool win = 1;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 1;
  inline bool win() const;
  inline void set_win(bool value);

  // optional uint32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stNotifyInterceptResult)
 private:
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool win_;
  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stNotifyInterceptResult* default_instance_;
};
// -------------------------------------------------------------------

class stReplyNotifyIntercept : public ::google::protobuf::Message {
 public:
  stReplyNotifyIntercept();
  virtual ~stReplyNotifyIntercept();

  stReplyNotifyIntercept(const stReplyNotifyIntercept& from);

  inline stReplyNotifyIntercept& operator=(const stReplyNotifyIntercept& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReplyNotifyIntercept& default_instance();

  void Swap(stReplyNotifyIntercept* other);

  // implements Message ----------------------------------------------

  stReplyNotifyIntercept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReplyNotifyIntercept& from);
  void MergeFrom(const stReplyNotifyIntercept& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReplyNotifyIntercept_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReplyNotifyIntercept_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReplyNotifyIntercept_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReplyNotifyIntercept_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReplyNotifyIntercept_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReplyNotifyIntercept_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReplyNotifyIntercept_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReplyNotifyIntercept_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReplyNotifyIntercept_ProtoModID_Parse(name, value);
  }

  typedef stReplyNotifyIntercept_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReplyNotifyIntercept_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReplyNotifyIntercept_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReplyNotifyIntercept_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReplyNotifyIntercept_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReplyNotifyIntercept_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReplyNotifyIntercept_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReplyNotifyIntercept_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReplyNotifyIntercept_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 resID1 = 1;
  inline bool has_resid1() const;
  inline void clear_resid1();
  static const int kResID1FieldNumber = 1;
  inline ::google::protobuf::uint32 resid1() const;
  inline void set_resid1(::google::protobuf::uint32 value);

  // optional uint32 resNum1 = 2;
  inline bool has_resnum1() const;
  inline void clear_resnum1();
  static const int kResNum1FieldNumber = 2;
  inline ::google::protobuf::uint32 resnum1() const;
  inline void set_resnum1(::google::protobuf::uint32 value);

  // optional uint32 resID2 = 3;
  inline bool has_resid2() const;
  inline void clear_resid2();
  static const int kResID2FieldNumber = 3;
  inline ::google::protobuf::uint32 resid2() const;
  inline void set_resid2(::google::protobuf::uint32 value);

  // optional uint32 resNum2 = 4;
  inline bool has_resnum2() const;
  inline void clear_resnum2();
  static const int kResNum2FieldNumber = 4;
  inline ::google::protobuf::uint32 resnum2() const;
  inline void set_resnum2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReplyNotifyIntercept)
 private:
  inline void set_has_resid1();
  inline void clear_has_resid1();
  inline void set_has_resnum1();
  inline void clear_has_resnum1();
  inline void set_has_resid2();
  inline void clear_has_resid2();
  inline void set_has_resnum2();
  inline void clear_has_resnum2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 resid1_;
  ::google::protobuf::uint32 resnum1_;
  ::google::protobuf::uint32 resid2_;
  ::google::protobuf::uint32 resnum2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReplyNotifyIntercept* default_instance_;
};
// -------------------------------------------------------------------

class stQuickFinishGuard : public ::google::protobuf::Message {
 public:
  stQuickFinishGuard();
  virtual ~stQuickFinishGuard();

  stQuickFinishGuard(const stQuickFinishGuard& from);

  inline stQuickFinishGuard& operator=(const stQuickFinishGuard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stQuickFinishGuard& default_instance();

  void Swap(stQuickFinishGuard* other);

  // implements Message ----------------------------------------------

  stQuickFinishGuard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stQuickFinishGuard& from);
  void MergeFrom(const stQuickFinishGuard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stQuickFinishGuard_ProtoModID ProtoModID;
  static const ProtoModID ModID = stQuickFinishGuard_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stQuickFinishGuard_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stQuickFinishGuard_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stQuickFinishGuard_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stQuickFinishGuard_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stQuickFinishGuard_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stQuickFinishGuard_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stQuickFinishGuard_ProtoModID_Parse(name, value);
  }

  typedef stQuickFinishGuard_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stQuickFinishGuard_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stQuickFinishGuard_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stQuickFinishGuard_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stQuickFinishGuard_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stQuickFinishGuard_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stQuickFinishGuard_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stQuickFinishGuard_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stQuickFinishGuard_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stQuickFinishGuard)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stQuickFinishGuard* default_instance_;
};
// -------------------------------------------------------------------

class stQuickFinishGuardResult : public ::google::protobuf::Message {
 public:
  stQuickFinishGuardResult();
  virtual ~stQuickFinishGuardResult();

  stQuickFinishGuardResult(const stQuickFinishGuardResult& from);

  inline stQuickFinishGuardResult& operator=(const stQuickFinishGuardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stQuickFinishGuardResult& default_instance();

  void Swap(stQuickFinishGuardResult* other);

  // implements Message ----------------------------------------------

  stQuickFinishGuardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stQuickFinishGuardResult& from);
  void MergeFrom(const stQuickFinishGuardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stQuickFinishGuardResult_eResult eResult;
  static const eResult eSuccess = stQuickFinishGuardResult_eResult_eSuccess;
  static const eResult eHas_Not_Begin = stQuickFinishGuardResult_eResult_eHas_Not_Begin;
  static const eResult eDiamond_Not_Enough = stQuickFinishGuardResult_eResult_eDiamond_Not_Enough;
  static const eResult eBeing_Intercepted = stQuickFinishGuardResult_eResult_eBeing_Intercepted;
  static inline bool eResult_IsValid(int value) {
    return stQuickFinishGuardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stQuickFinishGuardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stQuickFinishGuardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stQuickFinishGuardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stQuickFinishGuardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stQuickFinishGuardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stQuickFinishGuardResult_eResult_Parse(name, value);
  }

  typedef stQuickFinishGuardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stQuickFinishGuardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stQuickFinishGuardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stQuickFinishGuardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stQuickFinishGuardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stQuickFinishGuardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stQuickFinishGuardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stQuickFinishGuardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stQuickFinishGuardResult_ProtoModID_Parse(name, value);
  }

  typedef stQuickFinishGuardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stQuickFinishGuardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stQuickFinishGuardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stQuickFinishGuardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stQuickFinishGuardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stQuickFinishGuardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stQuickFinishGuardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stQuickFinishGuardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stQuickFinishGuardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stQuickFinishGuardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stQuickFinishGuardResult_eResult result() const;
  inline void set_result(::MiscProto::stQuickFinishGuardResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stQuickFinishGuardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stQuickFinishGuardResult* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyDelTitle : public ::google::protobuf::Message {
 public:
  stNotifyDelTitle();
  virtual ~stNotifyDelTitle();

  stNotifyDelTitle(const stNotifyDelTitle& from);

  inline stNotifyDelTitle& operator=(const stNotifyDelTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyDelTitle& default_instance();

  void Swap(stNotifyDelTitle* other);

  // implements Message ----------------------------------------------

  stNotifyDelTitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyDelTitle& from);
  void MergeFrom(const stNotifyDelTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyDelTitle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyDelTitle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyDelTitle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyDelTitle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyDelTitle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyDelTitle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyDelTitle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyDelTitle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyDelTitle_ProtoModID_Parse(name, value);
  }

  typedef stNotifyDelTitle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyDelTitle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyDelTitle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyDelTitle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyDelTitle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyDelTitle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyDelTitle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyDelTitle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyDelTitle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 titleID = 1;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 titleid() const;
  inline void set_titleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stNotifyDelTitle)
 private:
  inline void set_has_titleid();
  inline void clear_has_titleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 titleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stNotifyDelTitle* default_instance_;
};
// -------------------------------------------------------------------

class stBeInterceptTip : public ::google::protobuf::Message {
 public:
  stBeInterceptTip();
  virtual ~stBeInterceptTip();

  stBeInterceptTip(const stBeInterceptTip& from);

  inline stBeInterceptTip& operator=(const stBeInterceptTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBeInterceptTip& default_instance();

  void Swap(stBeInterceptTip* other);

  // implements Message ----------------------------------------------

  stBeInterceptTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBeInterceptTip& from);
  void MergeFrom(const stBeInterceptTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBeInterceptTip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBeInterceptTip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBeInterceptTip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBeInterceptTip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBeInterceptTip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBeInterceptTip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBeInterceptTip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBeInterceptTip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBeInterceptTip_ProtoModID_Parse(name, value);
  }

  typedef stBeInterceptTip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBeInterceptTip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBeInterceptTip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBeInterceptTip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBeInterceptTip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBeInterceptTip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBeInterceptTip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBeInterceptTip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBeInterceptTip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool win = 1;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 1;
  inline bool win() const;
  inline void set_win(bool value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 quality = 3;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stBeInterceptTip)
 private:
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  bool win_;
  ::google::protobuf::uint32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stBeInterceptTip* default_instance_;
};
// -------------------------------------------------------------------

class stOnlineNotifyNewInterceptInfo : public ::google::protobuf::Message {
 public:
  stOnlineNotifyNewInterceptInfo();
  virtual ~stOnlineNotifyNewInterceptInfo();

  stOnlineNotifyNewInterceptInfo(const stOnlineNotifyNewInterceptInfo& from);

  inline stOnlineNotifyNewInterceptInfo& operator=(const stOnlineNotifyNewInterceptInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOnlineNotifyNewInterceptInfo& default_instance();

  void Swap(stOnlineNotifyNewInterceptInfo* other);

  // implements Message ----------------------------------------------

  stOnlineNotifyNewInterceptInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOnlineNotifyNewInterceptInfo& from);
  void MergeFrom(const stOnlineNotifyNewInterceptInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOnlineNotifyNewInterceptInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOnlineNotifyNewInterceptInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOnlineNotifyNewInterceptInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOnlineNotifyNewInterceptInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOnlineNotifyNewInterceptInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOnlineNotifyNewInterceptInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOnlineNotifyNewInterceptInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOnlineNotifyNewInterceptInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOnlineNotifyNewInterceptInfo_ProtoModID_Parse(name, value);
  }

  typedef stOnlineNotifyNewInterceptInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOnlineNotifyNewInterceptInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOnlineNotifyNewInterceptInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOnlineNotifyNewInterceptInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOnlineNotifyNewInterceptInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOnlineNotifyNewInterceptInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOnlineNotifyNewInterceptInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOnlineNotifyNewInterceptInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOnlineNotifyNewInterceptInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 guardNum = 2;
  inline bool has_guardnum() const;
  inline void clear_guardnum();
  static const int kGuardNumFieldNumber = 2;
  inline ::google::protobuf::uint32 guardnum() const;
  inline void set_guardnum(::google::protobuf::uint32 value);

  // optional uint32 intercertNum = 3;
  inline bool has_intercertnum() const;
  inline void clear_intercertnum();
  static const int kIntercertNumFieldNumber = 3;
  inline ::google::protobuf::uint32 intercertnum() const;
  inline void set_intercertnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stOnlineNotifyNewInterceptInfo)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_guardnum();
  inline void clear_has_guardnum();
  inline void set_has_intercertnum();
  inline void clear_has_intercertnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 guardnum_;
  ::google::protobuf::uint32 intercertnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stOnlineNotifyNewInterceptInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenLimitFashionDrawWin : public ::google::protobuf::Message {
 public:
  stReqOpenLimitFashionDrawWin();
  virtual ~stReqOpenLimitFashionDrawWin();

  stReqOpenLimitFashionDrawWin(const stReqOpenLimitFashionDrawWin& from);

  inline stReqOpenLimitFashionDrawWin& operator=(const stReqOpenLimitFashionDrawWin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenLimitFashionDrawWin& default_instance();

  void Swap(stReqOpenLimitFashionDrawWin* other);

  // implements Message ----------------------------------------------

  stReqOpenLimitFashionDrawWin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenLimitFashionDrawWin& from);
  void MergeFrom(const stReqOpenLimitFashionDrawWin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenLimitFashionDrawWin_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenLimitFashionDrawWin_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenLimitFashionDrawWin_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenLimitFashionDrawWin_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenLimitFashionDrawWin_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenLimitFashionDrawWin_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenLimitFashionDrawWin_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenLimitFashionDrawWin_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenLimitFashionDrawWin_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenLimitFashionDrawWin_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenLimitFashionDrawWin_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenLimitFashionDrawWin_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenLimitFashionDrawWin_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenLimitFashionDrawWin_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenLimitFashionDrawWin_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenLimitFashionDrawWin_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenLimitFashionDrawWin_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenLimitFashionDrawWin_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqOpenLimitFashionDrawWin)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenLimitFashionDrawWin* default_instance_;
};
// -------------------------------------------------------------------

class stRetLimitFashionDrawWinInfo : public ::google::protobuf::Message {
 public:
  stRetLimitFashionDrawWinInfo();
  virtual ~stRetLimitFashionDrawWinInfo();

  stRetLimitFashionDrawWinInfo(const stRetLimitFashionDrawWinInfo& from);

  inline stRetLimitFashionDrawWinInfo& operator=(const stRetLimitFashionDrawWinInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetLimitFashionDrawWinInfo& default_instance();

  void Swap(stRetLimitFashionDrawWinInfo* other);

  // implements Message ----------------------------------------------

  stRetLimitFashionDrawWinInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetLimitFashionDrawWinInfo& from);
  void MergeFrom(const stRetLimitFashionDrawWinInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetLimitFashionDrawWinInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetLimitFashionDrawWinInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetLimitFashionDrawWinInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetLimitFashionDrawWinInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetLimitFashionDrawWinInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetLimitFashionDrawWinInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetLimitFashionDrawWinInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetLimitFashionDrawWinInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetLimitFashionDrawWinInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetLimitFashionDrawWinInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetLimitFashionDrawWinInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetLimitFashionDrawWinInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetLimitFashionDrawWinInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetLimitFashionDrawWinInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetLimitFashionDrawWinInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetLimitFashionDrawWinInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetLimitFashionDrawWinInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetLimitFashionDrawWinInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 canDrawNum = 1;
  inline bool has_candrawnum() const;
  inline void clear_candrawnum();
  static const int kCanDrawNumFieldNumber = 1;
  inline ::google::protobuf::uint32 candrawnum() const;
  inline void set_candrawnum(::google::protobuf::uint32 value);

  // repeated uint32 hasDrawedID = 2;
  inline int hasdrawedid_size() const;
  inline void clear_hasdrawedid();
  static const int kHasDrawedIDFieldNumber = 2;
  inline ::google::protobuf::uint32 hasdrawedid(int index) const;
  inline void set_hasdrawedid(int index, ::google::protobuf::uint32 value);
  inline void add_hasdrawedid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hasdrawedid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hasdrawedid();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetLimitFashionDrawWinInfo)
 private:
  inline void set_has_candrawnum();
  inline void clear_has_candrawnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hasdrawedid_;
  ::google::protobuf::uint32 candrawnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetLimitFashionDrawWinInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawLimitFashion : public ::google::protobuf::Message {
 public:
  stReqDrawLimitFashion();
  virtual ~stReqDrawLimitFashion();

  stReqDrawLimitFashion(const stReqDrawLimitFashion& from);

  inline stReqDrawLimitFashion& operator=(const stReqDrawLimitFashion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawLimitFashion& default_instance();

  void Swap(stReqDrawLimitFashion* other);

  // implements Message ----------------------------------------------

  stReqDrawLimitFashion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawLimitFashion& from);
  void MergeFrom(const stReqDrawLimitFashion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawLimitFashion_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawLimitFashion_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawLimitFashion_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawLimitFashion_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawLimitFashion_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawLimitFashion_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawLimitFashion_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawLimitFashion_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawLimitFashion_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawLimitFashion_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawLimitFashion_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawLimitFashion_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawLimitFashion_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawLimitFashion_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawLimitFashion_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawLimitFashion_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawLimitFashion_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawLimitFashion_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDrawLimitFashion)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawLimitFashion* default_instance_;
};
// -------------------------------------------------------------------

class stDrawLimitFashionResult : public ::google::protobuf::Message {
 public:
  stDrawLimitFashionResult();
  virtual ~stDrawLimitFashionResult();

  stDrawLimitFashionResult(const stDrawLimitFashionResult& from);

  inline stDrawLimitFashionResult& operator=(const stDrawLimitFashionResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDrawLimitFashionResult& default_instance();

  void Swap(stDrawLimitFashionResult* other);

  // implements Message ----------------------------------------------

  stDrawLimitFashionResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDrawLimitFashionResult& from);
  void MergeFrom(const stDrawLimitFashionResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDrawLimitFashionResult_eResult eResult;
  static const eResult eSuccess = stDrawLimitFashionResult_eResult_eSuccess;
  static const eResult eBag_Full = stDrawLimitFashionResult_eResult_eBag_Full;
  static const eResult eHas_Not_Draw_Num = stDrawLimitFashionResult_eResult_eHas_Not_Draw_Num;
  static const eResult eActivity_Not_Open = stDrawLimitFashionResult_eResult_eActivity_Not_Open;
  static const eResult eDraw_Out = stDrawLimitFashionResult_eResult_eDraw_Out;
  static inline bool eResult_IsValid(int value) {
    return stDrawLimitFashionResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stDrawLimitFashionResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stDrawLimitFashionResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stDrawLimitFashionResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stDrawLimitFashionResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stDrawLimitFashionResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stDrawLimitFashionResult_eResult_Parse(name, value);
  }

  typedef stDrawLimitFashionResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDrawLimitFashionResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDrawLimitFashionResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDrawLimitFashionResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDrawLimitFashionResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDrawLimitFashionResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDrawLimitFashionResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDrawLimitFashionResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDrawLimitFashionResult_ProtoModID_Parse(name, value);
  }

  typedef stDrawLimitFashionResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDrawLimitFashionResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDrawLimitFashionResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDrawLimitFashionResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDrawLimitFashionResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDrawLimitFashionResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDrawLimitFashionResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDrawLimitFashionResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDrawLimitFashionResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stDrawLimitFashionResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stDrawLimitFashionResult_eResult result() const;
  inline void set_result(::MiscProto::stDrawLimitFashionResult_eResult value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stDrawLimitFashionResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stDrawLimitFashionResult* default_instance_;
};
// -------------------------------------------------------------------

class stExchangeItem : public ::google::protobuf::Message {
 public:
  stExchangeItem();
  virtual ~stExchangeItem();

  stExchangeItem(const stExchangeItem& from);

  inline stExchangeItem& operator=(const stExchangeItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExchangeItem& default_instance();

  void Swap(stExchangeItem* other);

  // implements Message ----------------------------------------------

  stExchangeItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExchangeItem& from);
  void MergeFrom(const stExchangeItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stExchangeItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stExchangeItem* default_instance_;
};
// -------------------------------------------------------------------

class stSynExchangeActivityiStep : public ::google::protobuf::Message {
 public:
  stSynExchangeActivityiStep();
  virtual ~stSynExchangeActivityiStep();

  stSynExchangeActivityiStep(const stSynExchangeActivityiStep& from);

  inline stSynExchangeActivityiStep& operator=(const stSynExchangeActivityiStep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynExchangeActivityiStep& default_instance();

  void Swap(stSynExchangeActivityiStep* other);

  // implements Message ----------------------------------------------

  stSynExchangeActivityiStep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynExchangeActivityiStep& from);
  void MergeFrom(const stSynExchangeActivityiStep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stExchangeItem needItems = 1;
  inline int needitems_size() const;
  inline void clear_needitems();
  static const int kNeedItemsFieldNumber = 1;
  inline const ::MiscProto::stExchangeItem& needitems(int index) const;
  inline ::MiscProto::stExchangeItem* mutable_needitems(int index);
  inline ::MiscProto::stExchangeItem* add_needitems();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stExchangeItem >&
      needitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stExchangeItem >*
      mutable_needitems();

  // repeated .MiscProto.stExchangeItem gotItems = 2;
  inline int gotitems_size() const;
  inline void clear_gotitems();
  static const int kGotItemsFieldNumber = 2;
  inline const ::MiscProto::stExchangeItem& gotitems(int index) const;
  inline ::MiscProto::stExchangeItem* mutable_gotitems(int index);
  inline ::MiscProto::stExchangeItem* add_gotitems();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stExchangeItem >&
      gotitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stExchangeItem >*
      mutable_gotitems();

  // optional uint32 hasExchgNum = 3;
  inline bool has_hasexchgnum() const;
  inline void clear_hasexchgnum();
  static const int kHasExchgNumFieldNumber = 3;
  inline ::google::protobuf::uint32 hasexchgnum() const;
  inline void set_hasexchgnum(::google::protobuf::uint32 value);

  // optional uint32 maxExchgNum = 4;
  inline bool has_maxexchgnum() const;
  inline void clear_maxexchgnum();
  static const int kMaxExchgNumFieldNumber = 4;
  inline ::google::protobuf::uint32 maxexchgnum() const;
  inline void set_maxexchgnum(::google::protobuf::uint32 value);

  // optional uint32 stepID = 5;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 5;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // optional string desc = 6;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 6;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynExchangeActivityiStep)
 private:
  inline void set_has_hasexchgnum();
  inline void clear_has_hasexchgnum();
  inline void set_has_maxexchgnum();
  inline void clear_has_maxexchgnum();
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stExchangeItem > needitems_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stExchangeItem > gotitems_;
  ::google::protobuf::uint32 hasexchgnum_;
  ::google::protobuf::uint32 maxexchgnum_;
  ::std::string* desc_;
  ::google::protobuf::uint32 stepid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynExchangeActivityiStep* default_instance_;
};
// -------------------------------------------------------------------

class stSynExchangeActivity : public ::google::protobuf::Message {
 public:
  stSynExchangeActivity();
  virtual ~stSynExchangeActivity();

  stSynExchangeActivity(const stSynExchangeActivity& from);

  inline stSynExchangeActivity& operator=(const stSynExchangeActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynExchangeActivity& default_instance();

  void Swap(stSynExchangeActivity* other);

  // implements Message ----------------------------------------------

  stSynExchangeActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynExchangeActivity& from);
  void MergeFrom(const stSynExchangeActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stSynExchangeActivityiStep step = 1;
  inline int step_size() const;
  inline void clear_step();
  static const int kStepFieldNumber = 1;
  inline const ::MiscProto::stSynExchangeActivityiStep& step(int index) const;
  inline ::MiscProto::stSynExchangeActivityiStep* mutable_step(int index);
  inline ::MiscProto::stSynExchangeActivityiStep* add_step();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynExchangeActivityiStep >&
      step() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynExchangeActivityiStep >*
      mutable_step();

  // optional uint32 activityID = 2;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIDFieldNumber = 2;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional string titile = 3;
  inline bool has_titile() const;
  inline void clear_titile();
  static const int kTitileFieldNumber = 3;
  inline const ::std::string& titile() const;
  inline void set_titile(const ::std::string& value);
  inline void set_titile(const char* value);
  inline void set_titile(const char* value, size_t size);
  inline ::std::string* mutable_titile();
  inline ::std::string* release_titile();
  inline void set_allocated_titile(::std::string* titile);

  // optional string desc = 4;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 4;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional bool dailyRefresh = 5;
  inline bool has_dailyrefresh() const;
  inline void clear_dailyrefresh();
  static const int kDailyRefreshFieldNumber = 5;
  inline bool dailyrefresh() const;
  inline void set_dailyrefresh(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynExchangeActivity)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_titile();
  inline void clear_has_titile();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_dailyrefresh();
  inline void clear_has_dailyrefresh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynExchangeActivityiStep > step_;
  ::std::string* titile_;
  ::google::protobuf::uint32 activityid_;
  bool dailyrefresh_;
  ::std::string* desc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynExchangeActivity* default_instance_;
};
// -------------------------------------------------------------------

class stRetExchangeActivity : public ::google::protobuf::Message {
 public:
  stRetExchangeActivity();
  virtual ~stRetExchangeActivity();

  stRetExchangeActivity(const stRetExchangeActivity& from);

  inline stRetExchangeActivity& operator=(const stRetExchangeActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetExchangeActivity& default_instance();

  void Swap(stRetExchangeActivity* other);

  // implements Message ----------------------------------------------

  stRetExchangeActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetExchangeActivity& from);
  void MergeFrom(const stRetExchangeActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetExchangeActivity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetExchangeActivity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetExchangeActivity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetExchangeActivity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetExchangeActivity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetExchangeActivity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetExchangeActivity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetExchangeActivity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetExchangeActivity_ProtoModID_Parse(name, value);
  }

  typedef stRetExchangeActivity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetExchangeActivity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetExchangeActivity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetExchangeActivity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetExchangeActivity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetExchangeActivity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetExchangeActivity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetExchangeActivity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetExchangeActivity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stSynExchangeActivity activity = 1;
  inline int activity_size() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 1;
  inline const ::MiscProto::stSynExchangeActivity& activity(int index) const;
  inline ::MiscProto::stSynExchangeActivity* mutable_activity(int index);
  inline ::MiscProto::stSynExchangeActivity* add_activity();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynExchangeActivity >&
      activity() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynExchangeActivity >*
      mutable_activity();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetExchangeActivity)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynExchangeActivity > activity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetExchangeActivity* default_instance_;
};
// -------------------------------------------------------------------

class stReqExchangeItem : public ::google::protobuf::Message {
 public:
  stReqExchangeItem();
  virtual ~stReqExchangeItem();

  stReqExchangeItem(const stReqExchangeItem& from);

  inline stReqExchangeItem& operator=(const stReqExchangeItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqExchangeItem& default_instance();

  void Swap(stReqExchangeItem* other);

  // implements Message ----------------------------------------------

  stReqExchangeItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqExchangeItem& from);
  void MergeFrom(const stReqExchangeItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqExchangeItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqExchangeItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqExchangeItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqExchangeItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqExchangeItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqExchangeItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqExchangeItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqExchangeItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqExchangeItem_ProtoModID_Parse(name, value);
  }

  typedef stReqExchangeItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqExchangeItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqExchangeItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqExchangeItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqExchangeItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqExchangeItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqExchangeItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqExchangeItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqExchangeItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 activityID = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 stepID = 2;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 2;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqExchangeItem)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_stepid();
  inline void clear_has_stepid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 stepid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqExchangeItem* default_instance_;
};
// -------------------------------------------------------------------

class stExchangeItemResult : public ::google::protobuf::Message {
 public:
  stExchangeItemResult();
  virtual ~stExchangeItemResult();

  stExchangeItemResult(const stExchangeItemResult& from);

  inline stExchangeItemResult& operator=(const stExchangeItemResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExchangeItemResult& default_instance();

  void Swap(stExchangeItemResult* other);

  // implements Message ----------------------------------------------

  stExchangeItemResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExchangeItemResult& from);
  void MergeFrom(const stExchangeItemResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stExchangeItemResult_eResult eResult;
  static const eResult eSuccess = stExchangeItemResult_eResult_eSuccess;
  static const eResult eTime_Use_Out = stExchangeItemResult_eResult_eTime_Use_Out;
  static const eResult eBag_Full = stExchangeItemResult_eResult_eBag_Full;
  static const eResult eActivity_Finish = stExchangeItemResult_eResult_eActivity_Finish;
  static const eResult eHas_Not_Enough_Item = stExchangeItemResult_eResult_eHas_Not_Enough_Item;
  static inline bool eResult_IsValid(int value) {
    return stExchangeItemResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stExchangeItemResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stExchangeItemResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stExchangeItemResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stExchangeItemResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stExchangeItemResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stExchangeItemResult_eResult_Parse(name, value);
  }

  typedef stExchangeItemResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stExchangeItemResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stExchangeItemResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stExchangeItemResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stExchangeItemResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stExchangeItemResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stExchangeItemResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stExchangeItemResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stExchangeItemResult_ProtoModID_Parse(name, value);
  }

  typedef stExchangeItemResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stExchangeItemResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stExchangeItemResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stExchangeItemResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stExchangeItemResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stExchangeItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stExchangeItemResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stExchangeItemResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stExchangeItemResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stExchangeItemResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stExchangeItemResult_eResult result() const;
  inline void set_result(::MiscProto::stExchangeItemResult_eResult value);

  // optional uint32 activityID = 2;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIDFieldNumber = 2;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 stepID = 3;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 3;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stExchangeItemResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_stepid();
  inline void clear_has_stepid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 stepid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stExchangeItemResult* default_instance_;
};
// -------------------------------------------------------------------

class stRecycleRechargeActivity : public ::google::protobuf::Message {
 public:
  stRecycleRechargeActivity();
  virtual ~stRecycleRechargeActivity();

  stRecycleRechargeActivity(const stRecycleRechargeActivity& from);

  inline stRecycleRechargeActivity& operator=(const stRecycleRechargeActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRecycleRechargeActivity& default_instance();

  void Swap(stRecycleRechargeActivity* other);

  // implements Message ----------------------------------------------

  stRecycleRechargeActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRecycleRechargeActivity& from);
  void MergeFrom(const stRecycleRechargeActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 activityID = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional string titile = 2;
  inline bool has_titile() const;
  inline void clear_titile();
  static const int kTitileFieldNumber = 2;
  inline const ::std::string& titile() const;
  inline void set_titile(const ::std::string& value);
  inline void set_titile(const char* value);
  inline void set_titile(const char* value, size_t size);
  inline ::std::string* mutable_titile();
  inline ::std::string* release_titile();
  inline void set_allocated_titile(::std::string* titile);

  // optional string desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional uint32 maxRewardNum = 4;
  inline bool has_maxrewardnum() const;
  inline void clear_maxrewardnum();
  static const int kMaxRewardNumFieldNumber = 4;
  inline ::google::protobuf::uint32 maxrewardnum() const;
  inline void set_maxrewardnum(::google::protobuf::uint32 value);

  // optional uint32 gotRewardNum = 5;
  inline bool has_gotrewardnum() const;
  inline void clear_gotrewardnum();
  static const int kGotRewardNumFieldNumber = 5;
  inline ::google::protobuf::uint32 gotrewardnum() const;
  inline void set_gotrewardnum(::google::protobuf::uint32 value);

  // optional uint32 stepVal = 6;
  inline bool has_stepval() const;
  inline void clear_stepval();
  static const int kStepValFieldNumber = 6;
  inline ::google::protobuf::uint32 stepval() const;
  inline void set_stepval(::google::protobuf::uint32 value);

  // optional .MiscProto.stSynActivityStepInfo step = 7;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 7;
  inline const ::MiscProto::stSynActivityStepInfo& step() const;
  inline ::MiscProto::stSynActivityStepInfo* mutable_step();
  inline ::MiscProto::stSynActivityStepInfo* release_step();
  inline void set_allocated_step(::MiscProto::stSynActivityStepInfo* step);

  // @@protoc_insertion_point(class_scope:MiscProto.stRecycleRechargeActivity)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_titile();
  inline void clear_has_titile();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_maxrewardnum();
  inline void clear_has_maxrewardnum();
  inline void set_has_gotrewardnum();
  inline void clear_has_gotrewardnum();
  inline void set_has_stepval();
  inline void clear_has_stepval();
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* titile_;
  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 maxrewardnum_;
  ::std::string* desc_;
  ::google::protobuf::uint32 gotrewardnum_;
  ::google::protobuf::uint32 stepval_;
  ::MiscProto::stSynActivityStepInfo* step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRecycleRechargeActivity* default_instance_;
};
// -------------------------------------------------------------------

class stSendRecycleRechargeActivity : public ::google::protobuf::Message {
 public:
  stSendRecycleRechargeActivity();
  virtual ~stSendRecycleRechargeActivity();

  stSendRecycleRechargeActivity(const stSendRecycleRechargeActivity& from);

  inline stSendRecycleRechargeActivity& operator=(const stSendRecycleRechargeActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendRecycleRechargeActivity& default_instance();

  void Swap(stSendRecycleRechargeActivity* other);

  // implements Message ----------------------------------------------

  stSendRecycleRechargeActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendRecycleRechargeActivity& from);
  void MergeFrom(const stSendRecycleRechargeActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendRecycleRechargeActivity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendRecycleRechargeActivity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendRecycleRechargeActivity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendRecycleRechargeActivity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendRecycleRechargeActivity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendRecycleRechargeActivity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendRecycleRechargeActivity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendRecycleRechargeActivity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendRecycleRechargeActivity_ProtoModID_Parse(name, value);
  }

  typedef stSendRecycleRechargeActivity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendRecycleRechargeActivity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendRecycleRechargeActivity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendRecycleRechargeActivity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendRecycleRechargeActivity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendRecycleRechargeActivity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendRecycleRechargeActivity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendRecycleRechargeActivity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendRecycleRechargeActivity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stRecycleRechargeActivity activties = 1;
  inline int activties_size() const;
  inline void clear_activties();
  static const int kActivtiesFieldNumber = 1;
  inline const ::MiscProto::stRecycleRechargeActivity& activties(int index) const;
  inline ::MiscProto::stRecycleRechargeActivity* mutable_activties(int index);
  inline ::MiscProto::stRecycleRechargeActivity* add_activties();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stRecycleRechargeActivity >&
      activties() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stRecycleRechargeActivity >*
      mutable_activties();

  // @@protoc_insertion_point(class_scope:MiscProto.stSendRecycleRechargeActivity)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stRecycleRechargeActivity > activties_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSendRecycleRechargeActivity* default_instance_;
};
// -------------------------------------------------------------------

class stReqRecycleRechargeActReward : public ::google::protobuf::Message {
 public:
  stReqRecycleRechargeActReward();
  virtual ~stReqRecycleRechargeActReward();

  stReqRecycleRechargeActReward(const stReqRecycleRechargeActReward& from);

  inline stReqRecycleRechargeActReward& operator=(const stReqRecycleRechargeActReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRecycleRechargeActReward& default_instance();

  void Swap(stReqRecycleRechargeActReward* other);

  // implements Message ----------------------------------------------

  stReqRecycleRechargeActReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRecycleRechargeActReward& from);
  void MergeFrom(const stReqRecycleRechargeActReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRecycleRechargeActReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRecycleRechargeActReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRecycleRechargeActReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRecycleRechargeActReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRecycleRechargeActReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRecycleRechargeActReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRecycleRechargeActReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRecycleRechargeActReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRecycleRechargeActReward_ProtoModID_Parse(name, value);
  }

  typedef stReqRecycleRechargeActReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRecycleRechargeActReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRecycleRechargeActReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRecycleRechargeActReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRecycleRechargeActReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRecycleRechargeActReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRecycleRechargeActReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRecycleRechargeActReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRecycleRechargeActReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 activityID = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 stepID = 2;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 2;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqRecycleRechargeActReward)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_stepid();
  inline void clear_has_stepid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 stepid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqRecycleRechargeActReward* default_instance_;
};
// -------------------------------------------------------------------

class stRetRecycleRechargeActReward : public ::google::protobuf::Message {
 public:
  stRetRecycleRechargeActReward();
  virtual ~stRetRecycleRechargeActReward();

  stRetRecycleRechargeActReward(const stRetRecycleRechargeActReward& from);

  inline stRetRecycleRechargeActReward& operator=(const stRetRecycleRechargeActReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRecycleRechargeActReward& default_instance();

  void Swap(stRetRecycleRechargeActReward* other);

  // implements Message ----------------------------------------------

  stRetRecycleRechargeActReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRecycleRechargeActReward& from);
  void MergeFrom(const stRetRecycleRechargeActReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRecycleRechargeActReward_eResult eResult;
  static const eResult eSuccess = stRetRecycleRechargeActReward_eResult_eSuccess;
  static const eResult eBag_Full = stRetRecycleRechargeActReward_eResult_eBag_Full;
  static const eResult eTime_Use_Out = stRetRecycleRechargeActReward_eResult_eTime_Use_Out;
  static const eResult eNot_Begin = stRetRecycleRechargeActReward_eResult_eNot_Begin;
  static const eResult eSelect_Not_Exist = stRetRecycleRechargeActReward_eResult_eSelect_Not_Exist;
  static const eResult eRecharge_Not_Enough = stRetRecycleRechargeActReward_eResult_eRecharge_Not_Enough;
  static inline bool eResult_IsValid(int value) {
    return stRetRecycleRechargeActReward_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetRecycleRechargeActReward_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetRecycleRechargeActReward_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetRecycleRechargeActReward_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetRecycleRechargeActReward_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetRecycleRechargeActReward_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetRecycleRechargeActReward_eResult_Parse(name, value);
  }

  typedef stRetRecycleRechargeActReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRecycleRechargeActReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRecycleRechargeActReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRecycleRechargeActReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRecycleRechargeActReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRecycleRechargeActReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRecycleRechargeActReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRecycleRechargeActReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRecycleRechargeActReward_ProtoModID_Parse(name, value);
  }

  typedef stRetRecycleRechargeActReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRecycleRechargeActReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRecycleRechargeActReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRecycleRechargeActReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRecycleRechargeActReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRecycleRechargeActReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRecycleRechargeActReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRecycleRechargeActReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRecycleRechargeActReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stRetRecycleRechargeActReward.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stRetRecycleRechargeActReward_eResult result() const;
  inline void set_result(::MiscProto::stRetRecycleRechargeActReward_eResult value);

  // optional uint32 activityID = 2;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIDFieldNumber = 2;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetRecycleRechargeActReward)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_activityid();
  inline void clear_has_activityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 activityid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetRecycleRechargeActReward* default_instance_;
};
// -------------------------------------------------------------------

class stCommonActInfoItem : public ::google::protobuf::Message {
 public:
  stCommonActInfoItem();
  virtual ~stCommonActInfoItem();

  stCommonActInfoItem(const stCommonActInfoItem& from);

  inline stCommonActInfoItem& operator=(const stCommonActInfoItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCommonActInfoItem& default_instance();

  void Swap(stCommonActInfoItem* other);

  // implements Message ----------------------------------------------

  stCommonActInfoItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCommonActInfoItem& from);
  void MergeFrom(const stCommonActInfoItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline ::google::protobuf::uint32 val() const;
  inline void set_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stCommonActInfoItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stCommonActInfoItem* default_instance_;
};
// -------------------------------------------------------------------

class stRefreshCommonActInfo : public ::google::protobuf::Message {
 public:
  stRefreshCommonActInfo();
  virtual ~stRefreshCommonActInfo();

  stRefreshCommonActInfo(const stRefreshCommonActInfo& from);

  inline stRefreshCommonActInfo& operator=(const stRefreshCommonActInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefreshCommonActInfo& default_instance();

  void Swap(stRefreshCommonActInfo* other);

  // implements Message ----------------------------------------------

  stRefreshCommonActInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefreshCommonActInfo& from);
  void MergeFrom(const stRefreshCommonActInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefreshCommonActInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefreshCommonActInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefreshCommonActInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefreshCommonActInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefreshCommonActInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefreshCommonActInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefreshCommonActInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefreshCommonActInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefreshCommonActInfo_ProtoModID_Parse(name, value);
  }

  typedef stRefreshCommonActInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefreshCommonActInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefreshCommonActInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefreshCommonActInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefreshCommonActInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefreshCommonActInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefreshCommonActInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefreshCommonActInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefreshCommonActInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stCommonActInfoItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::MiscProto::stCommonActInfoItem& items(int index) const;
  inline ::MiscProto::stCommonActInfoItem* mutable_items(int index);
  inline ::MiscProto::stCommonActInfoItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stCommonActInfoItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stCommonActInfoItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:MiscProto.stRefreshCommonActInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stCommonActInfoItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRefreshCommonActInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqAKeyFetchAttach : public ::google::protobuf::Message {
 public:
  stReqAKeyFetchAttach();
  virtual ~stReqAKeyFetchAttach();

  stReqAKeyFetchAttach(const stReqAKeyFetchAttach& from);

  inline stReqAKeyFetchAttach& operator=(const stReqAKeyFetchAttach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAKeyFetchAttach& default_instance();

  void Swap(stReqAKeyFetchAttach* other);

  // implements Message ----------------------------------------------

  stReqAKeyFetchAttach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAKeyFetchAttach& from);
  void MergeFrom(const stReqAKeyFetchAttach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAKeyFetchAttach_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAKeyFetchAttach_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAKeyFetchAttach_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAKeyFetchAttach_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAKeyFetchAttach_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAKeyFetchAttach_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAKeyFetchAttach_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAKeyFetchAttach_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAKeyFetchAttach_ProtoModID_Parse(name, value);
  }

  typedef stReqAKeyFetchAttach_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAKeyFetchAttach_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAKeyFetchAttach_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAKeyFetchAttach_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAKeyFetchAttach_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAKeyFetchAttach_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAKeyFetchAttach_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAKeyFetchAttach_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAKeyFetchAttach_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:MiscProto.stReqAKeyFetchAttach)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqAKeyFetchAttach* default_instance_;
};
// -------------------------------------------------------------------

class stAKeyFetchAttachResult : public ::google::protobuf::Message {
 public:
  stAKeyFetchAttachResult();
  virtual ~stAKeyFetchAttachResult();

  stAKeyFetchAttachResult(const stAKeyFetchAttachResult& from);

  inline stAKeyFetchAttachResult& operator=(const stAKeyFetchAttachResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAKeyFetchAttachResult& default_instance();

  void Swap(stAKeyFetchAttachResult* other);

  // implements Message ----------------------------------------------

  stAKeyFetchAttachResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAKeyFetchAttachResult& from);
  void MergeFrom(const stAKeyFetchAttachResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAKeyFetchAttachResult_Result Result;
  static const Result SUCCESS = stAKeyFetchAttachResult_Result_SUCCESS;
  static const Result ATTACH_NOT_EXIST = stAKeyFetchAttachResult_Result_ATTACH_NOT_EXIST;
  static inline bool Result_IsValid(int value) {
    return stAKeyFetchAttachResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stAKeyFetchAttachResult_Result_Result_MIN;
  static const Result Result_MAX =
    stAKeyFetchAttachResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stAKeyFetchAttachResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stAKeyFetchAttachResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stAKeyFetchAttachResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stAKeyFetchAttachResult_Result_Parse(name, value);
  }

  typedef stAKeyFetchAttachResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAKeyFetchAttachResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAKeyFetchAttachResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAKeyFetchAttachResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAKeyFetchAttachResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAKeyFetchAttachResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAKeyFetchAttachResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAKeyFetchAttachResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAKeyFetchAttachResult_ProtoModID_Parse(name, value);
  }

  typedef stAKeyFetchAttachResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAKeyFetchAttachResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAKeyFetchAttachResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAKeyFetchAttachResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAKeyFetchAttachResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAKeyFetchAttachResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAKeyFetchAttachResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAKeyFetchAttachResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAKeyFetchAttachResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stAKeyFetchAttachResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stAKeyFetchAttachResult_Result result() const;
  inline void set_result(::MiscProto::stAKeyFetchAttachResult_Result value);

  // @@protoc_insertion_point(class_scope:MiscProto.stAKeyFetchAttachResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stAKeyFetchAttachResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqGloryfashion : public ::google::protobuf::Message {
 public:
  stReqGloryfashion();
  virtual ~stReqGloryfashion();

  stReqGloryfashion(const stReqGloryfashion& from);

  inline stReqGloryfashion& operator=(const stReqGloryfashion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGloryfashion& default_instance();

  void Swap(stReqGloryfashion* other);

  // implements Message ----------------------------------------------

  stReqGloryfashion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGloryfashion& from);
  void MergeFrom(const stReqGloryfashion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGloryfashion_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGloryfashion_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGloryfashion_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGloryfashion_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGloryfashion_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGloryfashion_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGloryfashion_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGloryfashion_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGloryfashion_ProtoModID_Parse(name, value);
  }

  typedef stReqGloryfashion_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGloryfashion_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGloryfashion_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGloryfashion_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGloryfashion_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGloryfashion_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGloryfashion_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGloryfashion_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGloryfashion_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqGloryfashion)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqGloryfashion* default_instance_;
};
// -------------------------------------------------------------------

class stGloryfashionResult : public ::google::protobuf::Message {
 public:
  stGloryfashionResult();
  virtual ~stGloryfashionResult();

  stGloryfashionResult(const stGloryfashionResult& from);

  inline stGloryfashionResult& operator=(const stGloryfashionResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGloryfashionResult& default_instance();

  void Swap(stGloryfashionResult* other);

  // implements Message ----------------------------------------------

  stGloryfashionResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGloryfashionResult& from);
  void MergeFrom(const stGloryfashionResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGloryfashionResult_eResult eResult;
  static const eResult eSuccess = stGloryfashionResult_eResult_eSuccess;
  static const eResult eRecharge_Not_Enough = stGloryfashionResult_eResult_eRecharge_Not_Enough;
  static const eResult eBag_Full = stGloryfashionResult_eResult_eBag_Full;
  static const eResult eNot_Open_Time = stGloryfashionResult_eResult_eNot_Open_Time;
  static inline bool eResult_IsValid(int value) {
    return stGloryfashionResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGloryfashionResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGloryfashionResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGloryfashionResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGloryfashionResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGloryfashionResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGloryfashionResult_eResult_Parse(name, value);
  }

  typedef stGloryfashionResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGloryfashionResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGloryfashionResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGloryfashionResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGloryfashionResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGloryfashionResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGloryfashionResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGloryfashionResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGloryfashionResult_ProtoModID_Parse(name, value);
  }

  typedef stGloryfashionResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGloryfashionResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGloryfashionResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGloryfashionResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGloryfashionResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGloryfashionResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGloryfashionResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGloryfashionResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGloryfashionResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stGloryfashionResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stGloryfashionResult_eResult result() const;
  inline void set_result(::MiscProto::stGloryfashionResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGloryfashionResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGloryfashionResult* default_instance_;
};
// -------------------------------------------------------------------

class stDevilCallItem : public ::google::protobuf::Message {
 public:
  stDevilCallItem();
  virtual ~stDevilCallItem();

  stDevilCallItem(const stDevilCallItem& from);

  inline stDevilCallItem& operator=(const stDevilCallItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDevilCallItem& default_instance();

  void Swap(stDevilCallItem* other);

  // implements Message ----------------------------------------------

  stDevilCallItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDevilCallItem& from);
  void MergeFrom(const stDevilCallItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDevilCallItem_eRewardStatus eRewardStatus;
  static const eRewardStatus eHas_Reward = stDevilCallItem_eRewardStatus_eHas_Reward;
  static const eRewardStatus eNo_Reward = stDevilCallItem_eRewardStatus_eNo_Reward;
  static const eRewardStatus eGot_Reward = stDevilCallItem_eRewardStatus_eGot_Reward;
  static inline bool eRewardStatus_IsValid(int value) {
    return stDevilCallItem_eRewardStatus_IsValid(value);
  }
  static const eRewardStatus eRewardStatus_MIN =
    stDevilCallItem_eRewardStatus_eRewardStatus_MIN;
  static const eRewardStatus eRewardStatus_MAX =
    stDevilCallItem_eRewardStatus_eRewardStatus_MAX;
  static const int eRewardStatus_ARRAYSIZE =
    stDevilCallItem_eRewardStatus_eRewardStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eRewardStatus_descriptor() {
    return stDevilCallItem_eRewardStatus_descriptor();
  }
  static inline const ::std::string& eRewardStatus_Name(eRewardStatus value) {
    return stDevilCallItem_eRewardStatus_Name(value);
  }
  static inline bool eRewardStatus_Parse(const ::std::string& name,
      eRewardStatus* value) {
    return stDevilCallItem_eRewardStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 bossDrawStatus = 2;
  inline bool has_bossdrawstatus() const;
  inline void clear_bossdrawstatus();
  static const int kBossDrawStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 bossdrawstatus() const;
  inline void set_bossdrawstatus(::google::protobuf::uint32 value);

  // optional uint32 commonDrawStatus = 3;
  inline bool has_commondrawstatus() const;
  inline void clear_commondrawstatus();
  static const int kCommonDrawStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 commondrawstatus() const;
  inline void set_commondrawstatus(::google::protobuf::uint32 value);

  // optional string name1 = 4;
  inline bool has_name1() const;
  inline void clear_name1();
  static const int kName1FieldNumber = 4;
  inline const ::std::string& name1() const;
  inline void set_name1(const ::std::string& value);
  inline void set_name1(const char* value);
  inline void set_name1(const char* value, size_t size);
  inline ::std::string* mutable_name1();
  inline ::std::string* release_name1();
  inline void set_allocated_name1(::std::string* name1);

  // optional string name2 = 5;
  inline bool has_name2() const;
  inline void clear_name2();
  static const int kName2FieldNumber = 5;
  inline const ::std::string& name2() const;
  inline void set_name2(const ::std::string& value);
  inline void set_name2(const char* value);
  inline void set_name2(const char* value, size_t size);
  inline ::std::string* mutable_name2();
  inline ::std::string* release_name2();
  inline void set_allocated_name2(::std::string* name2);

  // optional string name3 = 6;
  inline bool has_name3() const;
  inline void clear_name3();
  static const int kName3FieldNumber = 6;
  inline const ::std::string& name3() const;
  inline void set_name3(const ::std::string& value);
  inline void set_name3(const char* value);
  inline void set_name3(const char* value, size_t size);
  inline ::std::string* mutable_name3();
  inline ::std::string* release_name3();
  inline void set_allocated_name3(::std::string* name3);

  // optional bool hasPass = 7;
  inline bool has_haspass() const;
  inline void clear_haspass();
  static const int kHasPassFieldNumber = 7;
  inline bool haspass() const;
  inline void set_haspass(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stDevilCallItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_bossdrawstatus();
  inline void clear_has_bossdrawstatus();
  inline void set_has_commondrawstatus();
  inline void clear_has_commondrawstatus();
  inline void set_has_name1();
  inline void clear_has_name1();
  inline void set_has_name2();
  inline void clear_has_name2();
  inline void set_has_name3();
  inline void clear_has_name3();
  inline void set_has_haspass();
  inline void clear_has_haspass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 bossdrawstatus_;
  ::std::string* name1_;
  ::std::string* name2_;
  ::google::protobuf::uint32 commondrawstatus_;
  bool haspass_;
  ::std::string* name3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stDevilCallItem* default_instance_;
};
// -------------------------------------------------------------------

class stReqAllDevilCall : public ::google::protobuf::Message {
 public:
  stReqAllDevilCall();
  virtual ~stReqAllDevilCall();

  stReqAllDevilCall(const stReqAllDevilCall& from);

  inline stReqAllDevilCall& operator=(const stReqAllDevilCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAllDevilCall& default_instance();

  void Swap(stReqAllDevilCall* other);

  // implements Message ----------------------------------------------

  stReqAllDevilCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAllDevilCall& from);
  void MergeFrom(const stReqAllDevilCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAllDevilCall_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAllDevilCall_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAllDevilCall_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAllDevilCall_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAllDevilCall_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAllDevilCall_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAllDevilCall_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAllDevilCall_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAllDevilCall_ProtoModID_Parse(name, value);
  }

  typedef stReqAllDevilCall_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAllDevilCall_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAllDevilCall_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAllDevilCall_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAllDevilCall_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAllDevilCall_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAllDevilCall_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAllDevilCall_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAllDevilCall_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqAllDevilCall)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqAllDevilCall* default_instance_;
};
// -------------------------------------------------------------------

class stRetAllDevilCall : public ::google::protobuf::Message {
 public:
  stRetAllDevilCall();
  virtual ~stRetAllDevilCall();

  stRetAllDevilCall(const stRetAllDevilCall& from);

  inline stRetAllDevilCall& operator=(const stRetAllDevilCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetAllDevilCall& default_instance();

  void Swap(stRetAllDevilCall* other);

  // implements Message ----------------------------------------------

  stRetAllDevilCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetAllDevilCall& from);
  void MergeFrom(const stRetAllDevilCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetAllDevilCall_eResult eResult;
  static const eResult eSuccess = stRetAllDevilCall_eResult_eSuccess;
  static const eResult eLvl_Limit = stRetAllDevilCall_eResult_eLvl_Limit;
  static inline bool eResult_IsValid(int value) {
    return stRetAllDevilCall_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetAllDevilCall_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetAllDevilCall_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetAllDevilCall_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetAllDevilCall_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetAllDevilCall_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetAllDevilCall_eResult_Parse(name, value);
  }

  typedef stRetAllDevilCall_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetAllDevilCall_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetAllDevilCall_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetAllDevilCall_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetAllDevilCall_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetAllDevilCall_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetAllDevilCall_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetAllDevilCall_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetAllDevilCall_ProtoModID_Parse(name, value);
  }

  typedef stRetAllDevilCall_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetAllDevilCall_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetAllDevilCall_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetAllDevilCall_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetAllDevilCall_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetAllDevilCall_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetAllDevilCall_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetAllDevilCall_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetAllDevilCall_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stRetAllDevilCall.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stRetAllDevilCall_eResult result() const;
  inline void set_result(::MiscProto::stRetAllDevilCall_eResult value);

  // repeated .MiscProto.stDevilCallItem item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::MiscProto::stDevilCallItem& item(int index) const;
  inline ::MiscProto::stDevilCallItem* mutable_item(int index);
  inline ::MiscProto::stDevilCallItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stDevilCallItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stDevilCallItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetAllDevilCall)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stDevilCallItem > item_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetAllDevilCall* default_instance_;
};
// -------------------------------------------------------------------

class stReqDevilCallReward : public ::google::protobuf::Message {
 public:
  stReqDevilCallReward();
  virtual ~stReqDevilCallReward();

  stReqDevilCallReward(const stReqDevilCallReward& from);

  inline stReqDevilCallReward& operator=(const stReqDevilCallReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDevilCallReward& default_instance();

  void Swap(stReqDevilCallReward* other);

  // implements Message ----------------------------------------------

  stReqDevilCallReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDevilCallReward& from);
  void MergeFrom(const stReqDevilCallReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDevilCallReward_eType eType;
  static const eType eBoss_Reward = stReqDevilCallReward_eType_eBoss_Reward;
  static const eType eCommon_Reward = stReqDevilCallReward_eType_eCommon_Reward;
  static inline bool eType_IsValid(int value) {
    return stReqDevilCallReward_eType_IsValid(value);
  }
  static const eType eType_MIN =
    stReqDevilCallReward_eType_eType_MIN;
  static const eType eType_MAX =
    stReqDevilCallReward_eType_eType_MAX;
  static const int eType_ARRAYSIZE =
    stReqDevilCallReward_eType_eType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eType_descriptor() {
    return stReqDevilCallReward_eType_descriptor();
  }
  static inline const ::std::string& eType_Name(eType value) {
    return stReqDevilCallReward_eType_Name(value);
  }
  static inline bool eType_Parse(const ::std::string& name,
      eType* value) {
    return stReqDevilCallReward_eType_Parse(name, value);
  }

  typedef stReqDevilCallReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDevilCallReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDevilCallReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDevilCallReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDevilCallReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDevilCallReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDevilCallReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDevilCallReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDevilCallReward_ProtoModID_Parse(name, value);
  }

  typedef stReqDevilCallReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDevilCallReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDevilCallReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDevilCallReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDevilCallReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDevilCallReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDevilCallReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDevilCallReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDevilCallReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stReqDevilCallReward.eType rewardType = 1;
  inline bool has_rewardtype() const;
  inline void clear_rewardtype();
  static const int kRewardTypeFieldNumber = 1;
  inline ::MiscProto::stReqDevilCallReward_eType rewardtype() const;
  inline void set_rewardtype(::MiscProto::stReqDevilCallReward_eType value);

  // optional uint32 bossId = 2;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDevilCallReward)
 private:
  inline void set_has_rewardtype();
  inline void clear_has_rewardtype();
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int rewardtype_;
  ::google::protobuf::uint32 bossid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDevilCallReward* default_instance_;
};
// -------------------------------------------------------------------

class stRetDevilCallReward : public ::google::protobuf::Message {
 public:
  stRetDevilCallReward();
  virtual ~stRetDevilCallReward();

  stRetDevilCallReward(const stRetDevilCallReward& from);

  inline stRetDevilCallReward& operator=(const stRetDevilCallReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDevilCallReward& default_instance();

  void Swap(stRetDevilCallReward* other);

  // implements Message ----------------------------------------------

  stRetDevilCallReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDevilCallReward& from);
  void MergeFrom(const stRetDevilCallReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDevilCallReward_eType eType;
  static const eType eBoss_Reward = stRetDevilCallReward_eType_eBoss_Reward;
  static const eType eCommon_Reward = stRetDevilCallReward_eType_eCommon_Reward;
  static inline bool eType_IsValid(int value) {
    return stRetDevilCallReward_eType_IsValid(value);
  }
  static const eType eType_MIN =
    stRetDevilCallReward_eType_eType_MIN;
  static const eType eType_MAX =
    stRetDevilCallReward_eType_eType_MAX;
  static const int eType_ARRAYSIZE =
    stRetDevilCallReward_eType_eType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eType_descriptor() {
    return stRetDevilCallReward_eType_descriptor();
  }
  static inline const ::std::string& eType_Name(eType value) {
    return stRetDevilCallReward_eType_Name(value);
  }
  static inline bool eType_Parse(const ::std::string& name,
      eType* value) {
    return stRetDevilCallReward_eType_Parse(name, value);
  }

  typedef stRetDevilCallReward_eResult eResult;
  static const eResult eSuccess = stRetDevilCallReward_eResult_eSuccess;
  static const eResult eNot_That_Reward = stRetDevilCallReward_eResult_eNot_That_Reward;
  static const eResult eAlready_Draw = stRetDevilCallReward_eResult_eAlready_Draw;
  static const eResult eBag_Full = stRetDevilCallReward_eResult_eBag_Full;
  static const eResult eLvl_limit = stRetDevilCallReward_eResult_eLvl_limit;
  static inline bool eResult_IsValid(int value) {
    return stRetDevilCallReward_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetDevilCallReward_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetDevilCallReward_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetDevilCallReward_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetDevilCallReward_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetDevilCallReward_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetDevilCallReward_eResult_Parse(name, value);
  }

  typedef stRetDevilCallReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDevilCallReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDevilCallReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDevilCallReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDevilCallReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDevilCallReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDevilCallReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDevilCallReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDevilCallReward_ProtoModID_Parse(name, value);
  }

  typedef stRetDevilCallReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDevilCallReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDevilCallReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDevilCallReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDevilCallReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDevilCallReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDevilCallReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDevilCallReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDevilCallReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stRetDevilCallReward.eType rewardType = 1;
  inline bool has_rewardtype() const;
  inline void clear_rewardtype();
  static const int kRewardTypeFieldNumber = 1;
  inline ::MiscProto::stRetDevilCallReward_eType rewardtype() const;
  inline void set_rewardtype(::MiscProto::stRetDevilCallReward_eType value);

  // optional .MiscProto.stRetDevilCallReward.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::MiscProto::stRetDevilCallReward_eResult result() const;
  inline void set_result(::MiscProto::stRetDevilCallReward_eResult value);

  // optional uint32 bossId = 3;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 3;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetDevilCallReward)
 private:
  inline void set_has_rewardtype();
  inline void clear_has_rewardtype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int rewardtype_;
  int result_;
  ::google::protobuf::uint32 bossid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetDevilCallReward* default_instance_;
};
// -------------------------------------------------------------------

class stReqDevilCall : public ::google::protobuf::Message {
 public:
  stReqDevilCall();
  virtual ~stReqDevilCall();

  stReqDevilCall(const stReqDevilCall& from);

  inline stReqDevilCall& operator=(const stReqDevilCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDevilCall& default_instance();

  void Swap(stReqDevilCall* other);

  // implements Message ----------------------------------------------

  stReqDevilCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDevilCall& from);
  void MergeFrom(const stReqDevilCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDevilCall_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDevilCall_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDevilCall_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDevilCall_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDevilCall_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDevilCall_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDevilCall_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDevilCall_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDevilCall_ProtoModID_Parse(name, value);
  }

  typedef stReqDevilCall_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDevilCall_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDevilCall_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDevilCall_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDevilCall_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDevilCall_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDevilCall_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDevilCall_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDevilCall_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDevilCall)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 bossid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDevilCall* default_instance_;
};
// -------------------------------------------------------------------

class stRetDevilCall : public ::google::protobuf::Message {
 public:
  stRetDevilCall();
  virtual ~stRetDevilCall();

  stRetDevilCall(const stRetDevilCall& from);

  inline stRetDevilCall& operator=(const stRetDevilCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDevilCall& default_instance();

  void Swap(stRetDevilCall* other);

  // implements Message ----------------------------------------------

  stRetDevilCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDevilCall& from);
  void MergeFrom(const stRetDevilCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDevilCall_eResult eResult;
  static const eResult eSuccess = stRetDevilCall_eResult_eSuccess;
  static const eResult eRes_Not_Enough = stRetDevilCall_eResult_eRes_Not_Enough;
  static const eResult eBag_Full = stRetDevilCall_eResult_eBag_Full;
  static const eResult eNot_Open = stRetDevilCall_eResult_eNot_Open;
  static const eResult eNo_Such_Id = stRetDevilCall_eResult_eNo_Such_Id;
  static const eResult eLvl_limit = stRetDevilCall_eResult_eLvl_limit;
  static inline bool eResult_IsValid(int value) {
    return stRetDevilCall_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetDevilCall_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetDevilCall_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetDevilCall_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetDevilCall_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetDevilCall_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetDevilCall_eResult_Parse(name, value);
  }

  typedef stRetDevilCall_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDevilCall_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDevilCall_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDevilCall_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDevilCall_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDevilCall_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDevilCall_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDevilCall_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDevilCall_ProtoModID_Parse(name, value);
  }

  typedef stRetDevilCall_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDevilCall_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDevilCall_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDevilCall_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDevilCall_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDevilCall_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDevilCall_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDevilCall_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDevilCall_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .MiscProto.stRetDevilCall.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::MiscProto::stRetDevilCall_eResult result() const;
  inline void set_result(::MiscProto::stRetDevilCall_eResult value);

  // repeated .MiscProto.stSynDrawItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::MiscProto::stSynDrawItem& items(int index) const;
  inline ::MiscProto::stSynDrawItem* mutable_items(int index);
  inline ::MiscProto::stSynDrawItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynDrawItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynDrawItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetDevilCall)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynDrawItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetDevilCall* default_instance_;
};
// -------------------------------------------------------------------

class stReqDevilCallSummary : public ::google::protobuf::Message {
 public:
  stReqDevilCallSummary();
  virtual ~stReqDevilCallSummary();

  stReqDevilCallSummary(const stReqDevilCallSummary& from);

  inline stReqDevilCallSummary& operator=(const stReqDevilCallSummary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDevilCallSummary& default_instance();

  void Swap(stReqDevilCallSummary* other);

  // implements Message ----------------------------------------------

  stReqDevilCallSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDevilCallSummary& from);
  void MergeFrom(const stReqDevilCallSummary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDevilCallSummary_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDevilCallSummary_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDevilCallSummary_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDevilCallSummary_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDevilCallSummary_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDevilCallSummary_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDevilCallSummary_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDevilCallSummary_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDevilCallSummary_ProtoModID_Parse(name, value);
  }

  typedef stReqDevilCallSummary_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDevilCallSummary_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDevilCallSummary_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDevilCallSummary_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDevilCallSummary_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDevilCallSummary_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDevilCallSummary_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDevilCallSummary_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDevilCallSummary_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDevilCallSummary)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDevilCallSummary* default_instance_;
};
// -------------------------------------------------------------------

class stRetDevilCallSummary : public ::google::protobuf::Message {
 public:
  stRetDevilCallSummary();
  virtual ~stRetDevilCallSummary();

  stRetDevilCallSummary(const stRetDevilCallSummary& from);

  inline stRetDevilCallSummary& operator=(const stRetDevilCallSummary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDevilCallSummary& default_instance();

  void Swap(stRetDevilCallSummary* other);

  // implements Message ----------------------------------------------

  stRetDevilCallSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDevilCallSummary& from);
  void MergeFrom(const stRetDevilCallSummary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDevilCallSummary_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDevilCallSummary_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDevilCallSummary_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDevilCallSummary_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDevilCallSummary_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDevilCallSummary_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDevilCallSummary_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDevilCallSummary_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDevilCallSummary_ProtoModID_Parse(name, value);
  }

  typedef stRetDevilCallSummary_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDevilCallSummary_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDevilCallSummary_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDevilCallSummary_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDevilCallSummary_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDevilCallSummary_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDevilCallSummary_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDevilCallSummary_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDevilCallSummary_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stDevilCallItem item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::MiscProto::stDevilCallItem& item(int index) const;
  inline ::MiscProto::stDevilCallItem* mutable_item(int index);
  inline ::MiscProto::stDevilCallItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stDevilCallItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stDevilCallItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetDevilCallSummary)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stDevilCallItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetDevilCallSummary* default_instance_;
};
// -------------------------------------------------------------------

class stReqPayType : public ::google::protobuf::Message {
 public:
  stReqPayType();
  virtual ~stReqPayType();

  stReqPayType(const stReqPayType& from);

  inline stReqPayType& operator=(const stReqPayType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqPayType& default_instance();

  void Swap(stReqPayType* other);

  // implements Message ----------------------------------------------

  stReqPayType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqPayType& from);
  void MergeFrom(const stReqPayType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqPayType_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqPayType_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqPayType_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqPayType_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqPayType_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqPayType_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqPayType_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqPayType_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqPayType_ProtoModID_Parse(name, value);
  }

  typedef stReqPayType_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqPayType_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqPayType_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqPayType_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqPayType_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqPayType_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqPayType_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqPayType_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqPayType_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional string serverId = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 3;
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional bool isExtend = 4;
  inline bool has_isextend() const;
  inline void clear_isextend();
  static const int kIsExtendFieldNumber = 4;
  inline bool isextend() const;
  inline void set_isextend(bool value);

  // optional string data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqPayType)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_isextend();
  inline void clear_has_isextend();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 itemid_;
  ::std::string* serverid_;
  ::std::string* data_;
  bool isextend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqPayType* default_instance_;
};
// -------------------------------------------------------------------

class stRetPayType : public ::google::protobuf::Message {
 public:
  stRetPayType();
  virtual ~stRetPayType();

  stRetPayType(const stRetPayType& from);

  inline stRetPayType& operator=(const stRetPayType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetPayType& default_instance();

  void Swap(stRetPayType* other);

  // implements Message ----------------------------------------------

  stRetPayType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetPayType& from);
  void MergeFrom(const stRetPayType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetPayType_eResult eResult;
  static const eResult eSuccess = stRetPayType_eResult_eSuccess;
  static const eResult eNo_Such_Item = stRetPayType_eResult_eNo_Such_Item;
  static const eResult eSame_Order_Id = stRetPayType_eResult_eSame_Order_Id;
  static inline bool eResult_IsValid(int value) {
    return stRetPayType_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetPayType_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetPayType_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetPayType_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetPayType_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetPayType_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetPayType_eResult_Parse(name, value);
  }

  typedef stRetPayType_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetPayType_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetPayType_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetPayType_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetPayType_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetPayType_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetPayType_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetPayType_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetPayType_ProtoModID_Parse(name, value);
  }

  typedef stRetPayType_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetPayType_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetPayType_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetPayType_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetPayType_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetPayType_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetPayType_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetPayType_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetPayType_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string payType = 1;
  inline bool has_paytype() const;
  inline void clear_paytype();
  static const int kPayTypeFieldNumber = 1;
  inline const ::std::string& paytype() const;
  inline void set_paytype(const ::std::string& value);
  inline void set_paytype(const char* value);
  inline void set_paytype(const char* value, size_t size);
  inline ::std::string* mutable_paytype();
  inline ::std::string* release_paytype();
  inline void set_allocated_paytype(::std::string* paytype);

  // optional uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional string orderId = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 3;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // optional .MiscProto.stRetPayType.eResult res = 4;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 4;
  inline ::MiscProto::stRetPayType_eResult res() const;
  inline void set_res(::MiscProto::stRetPayType_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetPayType)
 private:
  inline void set_has_paytype();
  inline void clear_has_paytype();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* paytype_;
  ::std::string* orderid_;
  ::google::protobuf::uint32 itemid_;
  int res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetPayType* default_instance_;
};
// -------------------------------------------------------------------

class stReqOperateActvity : public ::google::protobuf::Message {
 public:
  stReqOperateActvity();
  virtual ~stReqOperateActvity();

  stReqOperateActvity(const stReqOperateActvity& from);

  inline stReqOperateActvity& operator=(const stReqOperateActvity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOperateActvity& default_instance();

  void Swap(stReqOperateActvity* other);

  // implements Message ----------------------------------------------

  stReqOperateActvity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOperateActvity& from);
  void MergeFrom(const stReqOperateActvity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOperateActvity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOperateActvity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOperateActvity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOperateActvity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOperateActvity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOperateActvity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOperateActvity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOperateActvity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOperateActvity_ProtoModID_Parse(name, value);
  }

  typedef stReqOperateActvity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOperateActvity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOperateActvity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOperateActvity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOperateActvity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOperateActvity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOperateActvity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOperateActvity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOperateActvity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqOperateActvity)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqOperateActvity* default_instance_;
};
// -------------------------------------------------------------------

class stOperateActvityItemInfo : public ::google::protobuf::Message {
 public:
  stOperateActvityItemInfo();
  virtual ~stOperateActvityItemInfo();

  stOperateActvityItemInfo(const stOperateActvityItemInfo& from);

  inline stOperateActvityItemInfo& operator=(const stOperateActvityItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOperateActvityItemInfo& default_instance();

  void Swap(stOperateActvityItemInfo* other);

  // implements Message ----------------------------------------------

  stOperateActvityItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOperateActvityItemInfo& from);
  void MergeFrom(const stOperateActvityItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stOperateActvityItemInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stOperateActvityItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stOperateActvityItems : public ::google::protobuf::Message {
 public:
  stOperateActvityItems();
  virtual ~stOperateActvityItems();

  stOperateActvityItems(const stOperateActvityItems& from);

  inline stOperateActvityItems& operator=(const stOperateActvityItems& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOperateActvityItems& default_instance();

  void Swap(stOperateActvityItems* other);

  // implements Message ----------------------------------------------

  stOperateActvityItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOperateActvityItems& from);
  void MergeFrom(const stOperateActvityItems& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 activityId = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 condition = 2;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 2;
  inline ::google::protobuf::uint32 condition() const;
  inline void set_condition(::google::protobuf::uint32 value);

  // repeated .MiscProto.stOperateActvityItemInfo itemInfo = 3;
  inline int iteminfo_size() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 3;
  inline const ::MiscProto::stOperateActvityItemInfo& iteminfo(int index) const;
  inline ::MiscProto::stOperateActvityItemInfo* mutable_iteminfo(int index);
  inline ::MiscProto::stOperateActvityItemInfo* add_iteminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stOperateActvityItemInfo >&
      iteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stOperateActvityItemInfo >*
      mutable_iteminfo();

  // @@protoc_insertion_point(class_scope:MiscProto.stOperateActvityItems)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_condition();
  inline void clear_has_condition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 condition_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stOperateActvityItemInfo > iteminfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stOperateActvityItems* default_instance_;
};
// -------------------------------------------------------------------

class stRetOperateActvity : public ::google::protobuf::Message {
 public:
  stRetOperateActvity();
  virtual ~stRetOperateActvity();

  stRetOperateActvity(const stRetOperateActvity& from);

  inline stRetOperateActvity& operator=(const stRetOperateActvity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetOperateActvity& default_instance();

  void Swap(stRetOperateActvity* other);

  // implements Message ----------------------------------------------

  stRetOperateActvity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetOperateActvity& from);
  void MergeFrom(const stRetOperateActvity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetOperateActvity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetOperateActvity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetOperateActvity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetOperateActvity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetOperateActvity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetOperateActvity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetOperateActvity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetOperateActvity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetOperateActvity_ProtoModID_Parse(name, value);
  }

  typedef stRetOperateActvity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetOperateActvity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetOperateActvity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetOperateActvity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetOperateActvity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetOperateActvity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetOperateActvity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetOperateActvity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetOperateActvity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stOperateActvityItems items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::MiscProto::stOperateActvityItems& items(int index) const;
  inline ::MiscProto::stOperateActvityItems* mutable_items(int index);
  inline ::MiscProto::stOperateActvityItems* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stOperateActvityItems >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stOperateActvityItems >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetOperateActvity)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stOperateActvityItems > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetOperateActvity* default_instance_;
};
// -------------------------------------------------------------------

class stReqOperateActvityReward : public ::google::protobuf::Message {
 public:
  stReqOperateActvityReward();
  virtual ~stReqOperateActvityReward();

  stReqOperateActvityReward(const stReqOperateActvityReward& from);

  inline stReqOperateActvityReward& operator=(const stReqOperateActvityReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOperateActvityReward& default_instance();

  void Swap(stReqOperateActvityReward* other);

  // implements Message ----------------------------------------------

  stReqOperateActvityReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOperateActvityReward& from);
  void MergeFrom(const stReqOperateActvityReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOperateActvityReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOperateActvityReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOperateActvityReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOperateActvityReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOperateActvityReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOperateActvityReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOperateActvityReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOperateActvityReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOperateActvityReward_ProtoModID_Parse(name, value);
  }

  typedef stReqOperateActvityReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOperateActvityReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOperateActvityReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOperateActvityReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOperateActvityReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOperateActvityReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOperateActvityReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOperateActvityReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOperateActvityReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 activityId = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqOperateActvityReward)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqOperateActvityReward* default_instance_;
};
// -------------------------------------------------------------------

class stRetOperateActvityReward : public ::google::protobuf::Message {
 public:
  stRetOperateActvityReward();
  virtual ~stRetOperateActvityReward();

  stRetOperateActvityReward(const stRetOperateActvityReward& from);

  inline stRetOperateActvityReward& operator=(const stRetOperateActvityReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetOperateActvityReward& default_instance();

  void Swap(stRetOperateActvityReward* other);

  // implements Message ----------------------------------------------

  stRetOperateActvityReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetOperateActvityReward& from);
  void MergeFrom(const stRetOperateActvityReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetOperateActvityReward_Result Result;
  static const Result SUCCESS = stRetOperateActvityReward_Result_SUCCESS;
  static const Result ACTIVITY_EXPIRE = stRetOperateActvityReward_Result_ACTIVITY_EXPIRE;
  static const Result INVALID_ID = stRetOperateActvityReward_Result_INVALID_ID;
  static const Result INNER_ERROR = stRetOperateActvityReward_Result_INNER_ERROR;
  static const Result REWARD_ALREAD_DRAW = stRetOperateActvityReward_Result_REWARD_ALREAD_DRAW;
  static const Result CONDITION_LIMIT = stRetOperateActvityReward_Result_CONDITION_LIMIT;
  static const Result BAG_FULL = stRetOperateActvityReward_Result_BAG_FULL;
  static const Result RESOURCE_LIMIT = stRetOperateActvityReward_Result_RESOURCE_LIMIT;
  static inline bool Result_IsValid(int value) {
    return stRetOperateActvityReward_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stRetOperateActvityReward_Result_Result_MIN;
  static const Result Result_MAX =
    stRetOperateActvityReward_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stRetOperateActvityReward_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stRetOperateActvityReward_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stRetOperateActvityReward_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stRetOperateActvityReward_Result_Parse(name, value);
  }

  typedef stRetOperateActvityReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetOperateActvityReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetOperateActvityReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetOperateActvityReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetOperateActvityReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetOperateActvityReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetOperateActvityReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetOperateActvityReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetOperateActvityReward_ProtoModID_Parse(name, value);
  }

  typedef stRetOperateActvityReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetOperateActvityReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetOperateActvityReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetOperateActvityReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetOperateActvityReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetOperateActvityReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetOperateActvityReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetOperateActvityReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetOperateActvityReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 activityId = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional .MiscProto.stRetOperateActvityReward.Result res = 3;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 3;
  inline ::MiscProto::stRetOperateActvityReward_Result res() const;
  inline void set_res(::MiscProto::stRetOperateActvityReward_Result value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetOperateActvityReward)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 itemid_;
  int res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetOperateActvityReward* default_instance_;
};
// -------------------------------------------------------------------

class stReqIllusionSprite : public ::google::protobuf::Message {
 public:
  stReqIllusionSprite();
  virtual ~stReqIllusionSprite();

  stReqIllusionSprite(const stReqIllusionSprite& from);

  inline stReqIllusionSprite& operator=(const stReqIllusionSprite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqIllusionSprite& default_instance();

  void Swap(stReqIllusionSprite* other);

  // implements Message ----------------------------------------------

  stReqIllusionSprite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqIllusionSprite& from);
  void MergeFrom(const stReqIllusionSprite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqIllusionSprite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqIllusionSprite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqIllusionSprite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqIllusionSprite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqIllusionSprite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqIllusionSprite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqIllusionSprite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqIllusionSprite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqIllusionSprite_ProtoModID_Parse(name, value);
  }

  typedef stReqIllusionSprite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqIllusionSprite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqIllusionSprite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqIllusionSprite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqIllusionSprite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqIllusionSprite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqIllusionSprite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqIllusionSprite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqIllusionSprite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqIllusionSprite)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqIllusionSprite* default_instance_;
};
// -------------------------------------------------------------------

class stIllusionSpriteSkillItem : public ::google::protobuf::Message {
 public:
  stIllusionSpriteSkillItem();
  virtual ~stIllusionSpriteSkillItem();

  stIllusionSpriteSkillItem(const stIllusionSpriteSkillItem& from);

  inline stIllusionSpriteSkillItem& operator=(const stIllusionSpriteSkillItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stIllusionSpriteSkillItem& default_instance();

  void Swap(stIllusionSpriteSkillItem* other);

  // implements Message ----------------------------------------------

  stIllusionSpriteSkillItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stIllusionSpriteSkillItem& from);
  void MergeFrom(const stIllusionSpriteSkillItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 skillId = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 skillLvl = 2;
  inline bool has_skilllvl() const;
  inline void clear_skilllvl();
  static const int kSkillLvlFieldNumber = 2;
  inline ::google::protobuf::uint32 skilllvl() const;
  inline void set_skilllvl(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stIllusionSpriteSkillItem)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllvl();
  inline void clear_has_skilllvl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 skilllvl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stIllusionSpriteSkillItem* default_instance_;
};
// -------------------------------------------------------------------

class stRetIllusionSprite : public ::google::protobuf::Message {
 public:
  stRetIllusionSprite();
  virtual ~stRetIllusionSprite();

  stRetIllusionSprite(const stRetIllusionSprite& from);

  inline stRetIllusionSprite& operator=(const stRetIllusionSprite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetIllusionSprite& default_instance();

  void Swap(stRetIllusionSprite* other);

  // implements Message ----------------------------------------------

  stRetIllusionSprite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetIllusionSprite& from);
  void MergeFrom(const stRetIllusionSprite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetIllusionSprite_eResult eResult;
  static const eResult eSuccess = stRetIllusionSprite_eResult_eSuccess;
  static const eResult eNo_Such_Id = stRetIllusionSprite_eResult_eNo_Such_Id;
  static inline bool eResult_IsValid(int value) {
    return stRetIllusionSprite_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetIllusionSprite_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetIllusionSprite_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetIllusionSprite_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetIllusionSprite_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetIllusionSprite_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetIllusionSprite_eResult_Parse(name, value);
  }

  typedef stRetIllusionSprite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetIllusionSprite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetIllusionSprite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetIllusionSprite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetIllusionSprite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetIllusionSprite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetIllusionSprite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetIllusionSprite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetIllusionSprite_ProtoModID_Parse(name, value);
  }

  typedef stRetIllusionSprite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetIllusionSprite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetIllusionSprite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetIllusionSprite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetIllusionSprite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetIllusionSprite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetIllusionSprite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetIllusionSprite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetIllusionSprite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 lvl = 2;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 2;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);

  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 talentNum = 4;
  inline bool has_talentnum() const;
  inline void clear_talentnum();
  static const int kTalentNumFieldNumber = 4;
  inline ::google::protobuf::uint32 talentnum() const;
  inline void set_talentnum(::google::protobuf::uint32 value);

  // repeated .MiscProto.stIllusionSpriteSkillItem skills = 5;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 5;
  inline const ::MiscProto::stIllusionSpriteSkillItem& skills(int index) const;
  inline ::MiscProto::stIllusionSpriteSkillItem* mutable_skills(int index);
  inline ::MiscProto::stIllusionSpriteSkillItem* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stIllusionSpriteSkillItem >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stIllusionSpriteSkillItem >*
      mutable_skills();

  // optional .MiscProto.stRetIllusionSprite.eResult res = 6;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 6;
  inline ::MiscProto::stRetIllusionSprite_eResult res() const;
  inline void set_res(::MiscProto::stRetIllusionSprite_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetIllusionSprite)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_talentnum();
  inline void clear_has_talentnum();
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 lvl_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 talentnum_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stIllusionSpriteSkillItem > skills_;
  int res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetIllusionSprite* default_instance_;
};
// -------------------------------------------------------------------

class illusionSpriteEatItem : public ::google::protobuf::Message {
 public:
  illusionSpriteEatItem();
  virtual ~illusionSpriteEatItem();

  illusionSpriteEatItem(const illusionSpriteEatItem& from);

  inline illusionSpriteEatItem& operator=(const illusionSpriteEatItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const illusionSpriteEatItem& default_instance();

  void Swap(illusionSpriteEatItem* other);

  // implements Message ----------------------------------------------

  illusionSpriteEatItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const illusionSpriteEatItem& from);
  void MergeFrom(const illusionSpriteEatItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.illusionSpriteEatItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static illusionSpriteEatItem* default_instance_;
};
// -------------------------------------------------------------------

class stReqIllusionSpriteEat : public ::google::protobuf::Message {
 public:
  stReqIllusionSpriteEat();
  virtual ~stReqIllusionSpriteEat();

  stReqIllusionSpriteEat(const stReqIllusionSpriteEat& from);

  inline stReqIllusionSpriteEat& operator=(const stReqIllusionSpriteEat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqIllusionSpriteEat& default_instance();

  void Swap(stReqIllusionSpriteEat* other);

  // implements Message ----------------------------------------------

  stReqIllusionSpriteEat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqIllusionSpriteEat& from);
  void MergeFrom(const stReqIllusionSpriteEat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqIllusionSpriteEat_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqIllusionSpriteEat_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqIllusionSpriteEat_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqIllusionSpriteEat_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqIllusionSpriteEat_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqIllusionSpriteEat_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqIllusionSpriteEat_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqIllusionSpriteEat_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqIllusionSpriteEat_ProtoModID_Parse(name, value);
  }

  typedef stReqIllusionSpriteEat_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqIllusionSpriteEat_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqIllusionSpriteEat_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqIllusionSpriteEat_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqIllusionSpriteEat_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqIllusionSpriteEat_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqIllusionSpriteEat_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqIllusionSpriteEat_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqIllusionSpriteEat_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .MiscProto.illusionSpriteEatItem eatItem = 2;
  inline int eatitem_size() const;
  inline void clear_eatitem();
  static const int kEatItemFieldNumber = 2;
  inline const ::MiscProto::illusionSpriteEatItem& eatitem(int index) const;
  inline ::MiscProto::illusionSpriteEatItem* mutable_eatitem(int index);
  inline ::MiscProto::illusionSpriteEatItem* add_eatitem();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::illusionSpriteEatItem >&
      eatitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::illusionSpriteEatItem >*
      mutable_eatitem();

  // @@protoc_insertion_point(class_scope:MiscProto.stReqIllusionSpriteEat)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::illusionSpriteEatItem > eatitem_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqIllusionSpriteEat* default_instance_;
};
// -------------------------------------------------------------------

class stRetIllusionSpriteEat : public ::google::protobuf::Message {
 public:
  stRetIllusionSpriteEat();
  virtual ~stRetIllusionSpriteEat();

  stRetIllusionSpriteEat(const stRetIllusionSpriteEat& from);

  inline stRetIllusionSpriteEat& operator=(const stRetIllusionSpriteEat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetIllusionSpriteEat& default_instance();

  void Swap(stRetIllusionSpriteEat* other);

  // implements Message ----------------------------------------------

  stRetIllusionSpriteEat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetIllusionSpriteEat& from);
  void MergeFrom(const stRetIllusionSpriteEat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetIllusionSpriteEat_eResult eResult;
  static const eResult eSuccess = stRetIllusionSpriteEat_eResult_eSuccess;
  static const eResult eNo_Such_Id = stRetIllusionSpriteEat_eResult_eNo_Such_Id;
  static const eResult eInvalid_item = stRetIllusionSpriteEat_eResult_eInvalid_item;
  static const eResult eMax_Lvl_Limit = stRetIllusionSpriteEat_eResult_eMax_Lvl_Limit;
  static const eResult eItem_Not_Enough = stRetIllusionSpriteEat_eResult_eItem_Not_Enough;
  static inline bool eResult_IsValid(int value) {
    return stRetIllusionSpriteEat_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetIllusionSpriteEat_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetIllusionSpriteEat_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetIllusionSpriteEat_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetIllusionSpriteEat_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetIllusionSpriteEat_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetIllusionSpriteEat_eResult_Parse(name, value);
  }

  typedef stRetIllusionSpriteEat_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetIllusionSpriteEat_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetIllusionSpriteEat_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetIllusionSpriteEat_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetIllusionSpriteEat_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetIllusionSpriteEat_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetIllusionSpriteEat_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetIllusionSpriteEat_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetIllusionSpriteEat_ProtoModID_Parse(name, value);
  }

  typedef stRetIllusionSpriteEat_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetIllusionSpriteEat_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetIllusionSpriteEat_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetIllusionSpriteEat_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetIllusionSpriteEat_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetIllusionSpriteEat_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetIllusionSpriteEat_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetIllusionSpriteEat_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetIllusionSpriteEat_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 lvl = 2;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 2;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);

  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 talentNum = 4;
  inline bool has_talentnum() const;
  inline void clear_talentnum();
  static const int kTalentNumFieldNumber = 4;
  inline ::google::protobuf::uint32 talentnum() const;
  inline void set_talentnum(::google::protobuf::uint32 value);

  // optional .MiscProto.stRetIllusionSpriteEat.eResult res = 5;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 5;
  inline ::MiscProto::stRetIllusionSpriteEat_eResult res() const;
  inline void set_res(::MiscProto::stRetIllusionSpriteEat_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetIllusionSpriteEat)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_talentnum();
  inline void clear_has_talentnum();
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 lvl_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 talentnum_;
  int res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetIllusionSpriteEat* default_instance_;
};
// -------------------------------------------------------------------

class stReqIllusionSpriteSkillUp : public ::google::protobuf::Message {
 public:
  stReqIllusionSpriteSkillUp();
  virtual ~stReqIllusionSpriteSkillUp();

  stReqIllusionSpriteSkillUp(const stReqIllusionSpriteSkillUp& from);

  inline stReqIllusionSpriteSkillUp& operator=(const stReqIllusionSpriteSkillUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqIllusionSpriteSkillUp& default_instance();

  void Swap(stReqIllusionSpriteSkillUp* other);

  // implements Message ----------------------------------------------

  stReqIllusionSpriteSkillUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqIllusionSpriteSkillUp& from);
  void MergeFrom(const stReqIllusionSpriteSkillUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqIllusionSpriteSkillUp_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqIllusionSpriteSkillUp_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqIllusionSpriteSkillUp_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqIllusionSpriteSkillUp_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqIllusionSpriteSkillUp_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqIllusionSpriteSkillUp_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqIllusionSpriteSkillUp_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqIllusionSpriteSkillUp_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqIllusionSpriteSkillUp_ProtoModID_Parse(name, value);
  }

  typedef stReqIllusionSpriteSkillUp_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqIllusionSpriteSkillUp_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqIllusionSpriteSkillUp_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqIllusionSpriteSkillUp_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqIllusionSpriteSkillUp_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqIllusionSpriteSkillUp_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 skillId = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqIllusionSpriteSkillUp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqIllusionSpriteSkillUp* default_instance_;
};
// -------------------------------------------------------------------

class stRetIllusionSpriteSkillUp : public ::google::protobuf::Message {
 public:
  stRetIllusionSpriteSkillUp();
  virtual ~stRetIllusionSpriteSkillUp();

  stRetIllusionSpriteSkillUp(const stRetIllusionSpriteSkillUp& from);

  inline stRetIllusionSpriteSkillUp& operator=(const stRetIllusionSpriteSkillUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetIllusionSpriteSkillUp& default_instance();

  void Swap(stRetIllusionSpriteSkillUp* other);

  // implements Message ----------------------------------------------

  stRetIllusionSpriteSkillUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetIllusionSpriteSkillUp& from);
  void MergeFrom(const stRetIllusionSpriteSkillUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetIllusionSpriteSkillUp_eResult eResult;
  static const eResult eSuccess = stRetIllusionSpriteSkillUp_eResult_eSuccess;
  static const eResult eNo_Such_Id = stRetIllusionSpriteSkillUp_eResult_eNo_Such_Id;
  static const eResult eNo_Such_Skill_Id = stRetIllusionSpriteSkillUp_eResult_eNo_Such_Skill_Id;
  static const eResult eLess_Of_Talent_Num = stRetIllusionSpriteSkillUp_eResult_eLess_Of_Talent_Num;
  static const eResult eMax_Lvl_Limit = stRetIllusionSpriteSkillUp_eResult_eMax_Lvl_Limit;
  static const eResult eLast_Skill_Lvl_Limit = stRetIllusionSpriteSkillUp_eResult_eLast_Skill_Lvl_Limit;
  static const eResult eInner_Error = stRetIllusionSpriteSkillUp_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stRetIllusionSpriteSkillUp_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetIllusionSpriteSkillUp_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetIllusionSpriteSkillUp_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetIllusionSpriteSkillUp_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetIllusionSpriteSkillUp_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetIllusionSpriteSkillUp_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetIllusionSpriteSkillUp_eResult_Parse(name, value);
  }

  typedef stRetIllusionSpriteSkillUp_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetIllusionSpriteSkillUp_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetIllusionSpriteSkillUp_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetIllusionSpriteSkillUp_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetIllusionSpriteSkillUp_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetIllusionSpriteSkillUp_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetIllusionSpriteSkillUp_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetIllusionSpriteSkillUp_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetIllusionSpriteSkillUp_ProtoModID_Parse(name, value);
  }

  typedef stRetIllusionSpriteSkillUp_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetIllusionSpriteSkillUp_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetIllusionSpriteSkillUp_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetIllusionSpriteSkillUp_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetIllusionSpriteSkillUp_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetIllusionSpriteSkillUp_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetIllusionSpriteSkillUp_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 skillId = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 skillLvl = 3;
  inline bool has_skilllvl() const;
  inline void clear_skilllvl();
  static const int kSkillLvlFieldNumber = 3;
  inline ::google::protobuf::uint32 skilllvl() const;
  inline void set_skilllvl(::google::protobuf::uint32 value);

  // optional .MiscProto.stRetIllusionSpriteSkillUp.eResult res = 4;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 4;
  inline ::MiscProto::stRetIllusionSpriteSkillUp_eResult res() const;
  inline void set_res(::MiscProto::stRetIllusionSpriteSkillUp_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetIllusionSpriteSkillUp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllvl();
  inline void clear_has_skilllvl();
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 skilllvl_;
  int res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetIllusionSpriteSkillUp* default_instance_;
};
// -------------------------------------------------------------------

class stRepOpenDiscoverWindow : public ::google::protobuf::Message {
 public:
  stRepOpenDiscoverWindow();
  virtual ~stRepOpenDiscoverWindow();

  stRepOpenDiscoverWindow(const stRepOpenDiscoverWindow& from);

  inline stRepOpenDiscoverWindow& operator=(const stRepOpenDiscoverWindow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRepOpenDiscoverWindow& default_instance();

  void Swap(stRepOpenDiscoverWindow* other);

  // implements Message ----------------------------------------------

  stRepOpenDiscoverWindow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRepOpenDiscoverWindow& from);
  void MergeFrom(const stRepOpenDiscoverWindow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRepOpenDiscoverWindow_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRepOpenDiscoverWindow_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRepOpenDiscoverWindow_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRepOpenDiscoverWindow_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRepOpenDiscoverWindow_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRepOpenDiscoverWindow_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRepOpenDiscoverWindow_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRepOpenDiscoverWindow_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRepOpenDiscoverWindow_ProtoModID_Parse(name, value);
  }

  typedef stRepOpenDiscoverWindow_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRepOpenDiscoverWindow_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRepOpenDiscoverWindow_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRepOpenDiscoverWindow_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRepOpenDiscoverWindow_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRepOpenDiscoverWindow_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRepOpenDiscoverWindow_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRepOpenDiscoverWindow_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRepOpenDiscoverWindow_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRepOpenDiscoverWindow)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRepOpenDiscoverWindow* default_instance_;
};
// -------------------------------------------------------------------

class stOpenDiscoverWindowResult : public ::google::protobuf::Message {
 public:
  stOpenDiscoverWindowResult();
  virtual ~stOpenDiscoverWindowResult();

  stOpenDiscoverWindowResult(const stOpenDiscoverWindowResult& from);

  inline stOpenDiscoverWindowResult& operator=(const stOpenDiscoverWindowResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOpenDiscoverWindowResult& default_instance();

  void Swap(stOpenDiscoverWindowResult* other);

  // implements Message ----------------------------------------------

  stOpenDiscoverWindowResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOpenDiscoverWindowResult& from);
  void MergeFrom(const stOpenDiscoverWindowResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOpenDiscoverWindowResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOpenDiscoverWindowResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOpenDiscoverWindowResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOpenDiscoverWindowResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOpenDiscoverWindowResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOpenDiscoverWindowResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOpenDiscoverWindowResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOpenDiscoverWindowResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOpenDiscoverWindowResult_ProtoModID_Parse(name, value);
  }

  typedef stOpenDiscoverWindowResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOpenDiscoverWindowResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOpenDiscoverWindowResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOpenDiscoverWindowResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOpenDiscoverWindowResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOpenDiscoverWindowResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOpenDiscoverWindowResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOpenDiscoverWindowResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOpenDiscoverWindowResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 mapID = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 place = 2;
  inline bool has_place() const;
  inline void clear_place();
  static const int kPlaceFieldNumber = 2;
  inline ::google::protobuf::uint32 place() const;
  inline void set_place(::google::protobuf::uint32 value);

  // optional uint32 taskID = 3;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 3;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional uint32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint32 battleNum = 5;
  inline bool has_battlenum() const;
  inline void clear_battlenum();
  static const int kBattleNumFieldNumber = 5;
  inline ::google::protobuf::uint32 battlenum() const;
  inline void set_battlenum(::google::protobuf::uint32 value);

  // optional uint32 integral = 6;
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 6;
  inline ::google::protobuf::uint32 integral() const;
  inline void set_integral(::google::protobuf::uint32 value);

  // optional uint32 refreshNum = 7;
  inline bool has_refreshnum() const;
  inline void clear_refreshnum();
  static const int kRefreshNumFieldNumber = 7;
  inline ::google::protobuf::uint32 refreshnum() const;
  inline void set_refreshnum(::google::protobuf::uint32 value);

  // optional uint32 playDiceNum = 8;
  inline bool has_playdicenum() const;
  inline void clear_playdicenum();
  static const int kPlayDiceNumFieldNumber = 8;
  inline ::google::protobuf::uint32 playdicenum() const;
  inline void set_playdicenum(::google::protobuf::uint32 value);

  // optional uint32 canUseNum = 9;
  inline bool has_canusenum() const;
  inline void clear_canusenum();
  static const int kCanUseNumFieldNumber = 9;
  inline ::google::protobuf::uint32 canusenum() const;
  inline void set_canusenum(::google::protobuf::uint32 value);

  // optional uint32 hasReceivedIdentify = 10;
  inline bool has_hasreceivedidentify() const;
  inline void clear_hasreceivedidentify();
  static const int kHasReceivedIdentifyFieldNumber = 10;
  inline ::google::protobuf::uint32 hasreceivedidentify() const;
  inline void set_hasreceivedidentify(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stOpenDiscoverWindowResult)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_place();
  inline void clear_has_place();
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_battlenum();
  inline void clear_has_battlenum();
  inline void set_has_integral();
  inline void clear_has_integral();
  inline void set_has_refreshnum();
  inline void clear_has_refreshnum();
  inline void set_has_playdicenum();
  inline void clear_has_playdicenum();
  inline void set_has_canusenum();
  inline void clear_has_canusenum();
  inline void set_has_hasreceivedidentify();
  inline void clear_has_hasreceivedidentify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 place_;
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 battlenum_;
  ::google::protobuf::uint32 integral_;
  ::google::protobuf::uint32 refreshnum_;
  ::google::protobuf::uint32 playdicenum_;
  ::google::protobuf::uint32 canusenum_;
  ::google::protobuf::uint32 hasreceivedidentify_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stOpenDiscoverWindowResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqPlayDice : public ::google::protobuf::Message {
 public:
  stReqPlayDice();
  virtual ~stReqPlayDice();

  stReqPlayDice(const stReqPlayDice& from);

  inline stReqPlayDice& operator=(const stReqPlayDice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqPlayDice& default_instance();

  void Swap(stReqPlayDice* other);

  // implements Message ----------------------------------------------

  stReqPlayDice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqPlayDice& from);
  void MergeFrom(const stReqPlayDice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqPlayDice_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqPlayDice_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqPlayDice_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqPlayDice_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqPlayDice_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqPlayDice_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqPlayDice_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqPlayDice_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqPlayDice_ProtoModID_Parse(name, value);
  }

  typedef stReqPlayDice_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqPlayDice_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqPlayDice_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqPlayDice_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqPlayDice_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqPlayDice_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqPlayDice_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqPlayDice_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqPlayDice_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqPlayDice)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqPlayDice* default_instance_;
};
// -------------------------------------------------------------------

class stPlayDiceResult : public ::google::protobuf::Message {
 public:
  stPlayDiceResult();
  virtual ~stPlayDiceResult();

  stPlayDiceResult(const stPlayDiceResult& from);

  inline stPlayDiceResult& operator=(const stPlayDiceResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPlayDiceResult& default_instance();

  void Swap(stPlayDiceResult* other);

  // implements Message ----------------------------------------------

  stPlayDiceResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPlayDiceResult& from);
  void MergeFrom(const stPlayDiceResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPlayDiceResult_eResult eResult;
  static const eResult eSuccess = stPlayDiceResult_eResult_eSuccess;
  static const eResult eNot_Dice_NUM = stPlayDiceResult_eResult_eNot_Dice_NUM;
  static const eResult eTask_Not_Finish = stPlayDiceResult_eResult_eTask_Not_Finish;
  static const eResult eInner_Error = stPlayDiceResult_eResult_eInner_Error;
  static const eResult eThe_End = stPlayDiceResult_eResult_eThe_End;
  static inline bool eResult_IsValid(int value) {
    return stPlayDiceResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stPlayDiceResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stPlayDiceResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stPlayDiceResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stPlayDiceResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stPlayDiceResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stPlayDiceResult_eResult_Parse(name, value);
  }

  typedef stPlayDiceResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPlayDiceResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPlayDiceResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPlayDiceResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPlayDiceResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPlayDiceResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPlayDiceResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPlayDiceResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPlayDiceResult_ProtoModID_Parse(name, value);
  }

  typedef stPlayDiceResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPlayDiceResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPlayDiceResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPlayDiceResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPlayDiceResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPlayDiceResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPlayDiceResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPlayDiceResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPlayDiceResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stPlayDiceResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stPlayDiceResult_eResult result() const;
  inline void set_result(::MiscProto::stPlayDiceResult_eResult value);

  // optional uint32 point = 2;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline ::google::protobuf::uint32 point() const;
  inline void set_point(::google::protobuf::uint32 value);

  // optional uint32 mapID = 3;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 taskID = 4;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 4;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional uint32 state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stPlayDiceResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 point_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stPlayDiceResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqGetOrGiveUpTask : public ::google::protobuf::Message {
 public:
  stReqGetOrGiveUpTask();
  virtual ~stReqGetOrGiveUpTask();

  stReqGetOrGiveUpTask(const stReqGetOrGiveUpTask& from);

  inline stReqGetOrGiveUpTask& operator=(const stReqGetOrGiveUpTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGetOrGiveUpTask& default_instance();

  void Swap(stReqGetOrGiveUpTask* other);

  // implements Message ----------------------------------------------

  stReqGetOrGiveUpTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGetOrGiveUpTask& from);
  void MergeFrom(const stReqGetOrGiveUpTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGetOrGiveUpTask_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGetOrGiveUpTask_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGetOrGiveUpTask_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGetOrGiveUpTask_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGetOrGiveUpTask_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGetOrGiveUpTask_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGetOrGiveUpTask_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGetOrGiveUpTask_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGetOrGiveUpTask_ProtoModID_Parse(name, value);
  }

  typedef stReqGetOrGiveUpTask_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGetOrGiveUpTask_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGetOrGiveUpTask_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGetOrGiveUpTask_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGetOrGiveUpTask_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGetOrGiveUpTask_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGetOrGiveUpTask_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGetOrGiveUpTask_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGetOrGiveUpTask_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 tag = 1;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 1;
  inline ::google::protobuf::uint32 tag() const;
  inline void set_tag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqGetOrGiveUpTask)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqGetOrGiveUpTask* default_instance_;
};
// -------------------------------------------------------------------

class stGetTaskResult : public ::google::protobuf::Message {
 public:
  stGetTaskResult();
  virtual ~stGetTaskResult();

  stGetTaskResult(const stGetTaskResult& from);

  inline stGetTaskResult& operator=(const stGetTaskResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGetTaskResult& default_instance();

  void Swap(stGetTaskResult* other);

  // implements Message ----------------------------------------------

  stGetTaskResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGetTaskResult& from);
  void MergeFrom(const stGetTaskResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGetTaskResult_eResult eResult;
  static const eResult eSuccess = stGetTaskResult_eResult_eSuccess;
  static const eResult eThe_Begin = stGetTaskResult_eResult_eThe_Begin;
  static const eResult eTask_Not_Finish = stGetTaskResult_eResult_eTask_Not_Finish;
  static const eResult eInner_Error = stGetTaskResult_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stGetTaskResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGetTaskResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGetTaskResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGetTaskResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGetTaskResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGetTaskResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGetTaskResult_eResult_Parse(name, value);
  }

  typedef stGetTaskResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGetTaskResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGetTaskResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGetTaskResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGetTaskResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGetTaskResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGetTaskResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGetTaskResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGetTaskResult_ProtoModID_Parse(name, value);
  }

  typedef stGetTaskResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGetTaskResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGetTaskResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGetTaskResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGetTaskResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGetTaskResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGetTaskResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGetTaskResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGetTaskResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stGetTaskResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stGetTaskResult_eResult result() const;
  inline void set_result(::MiscProto::stGetTaskResult_eResult value);

  // optional uint32 taskType = 2;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 tasktype() const;
  inline void set_tasktype(::google::protobuf::uint32 value);

  // optional uint32 taskID = 3;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 3;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGetTaskResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 tasktype_;
  ::google::protobuf::uint32 taskid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGetTaskResult* default_instance_;
};
// -------------------------------------------------------------------

class stGiveUpTaskResult : public ::google::protobuf::Message {
 public:
  stGiveUpTaskResult();
  virtual ~stGiveUpTaskResult();

  stGiveUpTaskResult(const stGiveUpTaskResult& from);

  inline stGiveUpTaskResult& operator=(const stGiveUpTaskResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGiveUpTaskResult& default_instance();

  void Swap(stGiveUpTaskResult* other);

  // implements Message ----------------------------------------------

  stGiveUpTaskResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGiveUpTaskResult& from);
  void MergeFrom(const stGiveUpTaskResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGiveUpTaskResult_eResult eResult;
  static const eResult eSuccess = stGiveUpTaskResult_eResult_eSuccess;
  static const eResult eTask_Has_Receive = stGiveUpTaskResult_eResult_eTask_Has_Receive;
  static const eResult eInner_Error = stGiveUpTaskResult_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stGiveUpTaskResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGiveUpTaskResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGiveUpTaskResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGiveUpTaskResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGiveUpTaskResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGiveUpTaskResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGiveUpTaskResult_eResult_Parse(name, value);
  }

  typedef stGiveUpTaskResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGiveUpTaskResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGiveUpTaskResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGiveUpTaskResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGiveUpTaskResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGiveUpTaskResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGiveUpTaskResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGiveUpTaskResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGiveUpTaskResult_ProtoModID_Parse(name, value);
  }

  typedef stGiveUpTaskResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGiveUpTaskResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGiveUpTaskResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGiveUpTaskResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGiveUpTaskResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGiveUpTaskResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGiveUpTaskResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGiveUpTaskResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGiveUpTaskResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stGiveUpTaskResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stGiveUpTaskResult_eResult result() const;
  inline void set_result(::MiscProto::stGiveUpTaskResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGiveUpTaskResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGiveUpTaskResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRefreshNum : public ::google::protobuf::Message {
 public:
  stReqRefreshNum();
  virtual ~stReqRefreshNum();

  stReqRefreshNum(const stReqRefreshNum& from);

  inline stReqRefreshNum& operator=(const stReqRefreshNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRefreshNum& default_instance();

  void Swap(stReqRefreshNum* other);

  // implements Message ----------------------------------------------

  stReqRefreshNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRefreshNum& from);
  void MergeFrom(const stReqRefreshNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRefreshNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRefreshNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRefreshNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRefreshNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRefreshNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRefreshNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRefreshNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRefreshNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRefreshNum_ProtoModID_Parse(name, value);
  }

  typedef stReqRefreshNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRefreshNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRefreshNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRefreshNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRefreshNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRefreshNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRefreshNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRefreshNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRefreshNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqRefreshNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqRefreshNum* default_instance_;
};
// -------------------------------------------------------------------

class stRefreshNumResult : public ::google::protobuf::Message {
 public:
  stRefreshNumResult();
  virtual ~stRefreshNumResult();

  stRefreshNumResult(const stRefreshNumResult& from);

  inline stRefreshNumResult& operator=(const stRefreshNumResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefreshNumResult& default_instance();

  void Swap(stRefreshNumResult* other);

  // implements Message ----------------------------------------------

  stRefreshNumResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefreshNumResult& from);
  void MergeFrom(const stRefreshNumResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefreshNumResult_eResult eResult;
  static const eResult eSuccess = stRefreshNumResult_eResult_eSuccess;
  static const eResult eInner_Error = stRefreshNumResult_eResult_eInner_Error;
  static const eResult eNum_Useless_Over = stRefreshNumResult_eResult_eNum_Useless_Over;
  static const eResult eDIAMOND_NOT_ENOUGH = stRefreshNumResult_eResult_eDIAMOND_NOT_ENOUGH;
  static inline bool eResult_IsValid(int value) {
    return stRefreshNumResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRefreshNumResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRefreshNumResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRefreshNumResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRefreshNumResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRefreshNumResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRefreshNumResult_eResult_Parse(name, value);
  }

  typedef stRefreshNumResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefreshNumResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefreshNumResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefreshNumResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefreshNumResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefreshNumResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefreshNumResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefreshNumResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefreshNumResult_ProtoModID_Parse(name, value);
  }

  typedef stRefreshNumResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefreshNumResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefreshNumResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefreshNumResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefreshNumResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefreshNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefreshNumResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefreshNumResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefreshNumResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stRefreshNumResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stRefreshNumResult_eResult result() const;
  inline void set_result(::MiscProto::stRefreshNumResult_eResult value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRefreshNumResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRefreshNumResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqGetIntegralReward : public ::google::protobuf::Message {
 public:
  stReqGetIntegralReward();
  virtual ~stReqGetIntegralReward();

  stReqGetIntegralReward(const stReqGetIntegralReward& from);

  inline stReqGetIntegralReward& operator=(const stReqGetIntegralReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGetIntegralReward& default_instance();

  void Swap(stReqGetIntegralReward* other);

  // implements Message ----------------------------------------------

  stReqGetIntegralReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGetIntegralReward& from);
  void MergeFrom(const stReqGetIntegralReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGetIntegralReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGetIntegralReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGetIntegralReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGetIntegralReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGetIntegralReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGetIntegralReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGetIntegralReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGetIntegralReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGetIntegralReward_ProtoModID_Parse(name, value);
  }

  typedef stReqGetIntegralReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGetIntegralReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGetIntegralReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGetIntegralReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGetIntegralReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGetIntegralReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGetIntegralReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGetIntegralReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGetIntegralReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 rewardID = 1;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIDFieldNumber = 1;
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqGetIntegralReward)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rewardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqGetIntegralReward* default_instance_;
};
// -------------------------------------------------------------------

class stGetIntegralRewardResult : public ::google::protobuf::Message {
 public:
  stGetIntegralRewardResult();
  virtual ~stGetIntegralRewardResult();

  stGetIntegralRewardResult(const stGetIntegralRewardResult& from);

  inline stGetIntegralRewardResult& operator=(const stGetIntegralRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGetIntegralRewardResult& default_instance();

  void Swap(stGetIntegralRewardResult* other);

  // implements Message ----------------------------------------------

  stGetIntegralRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGetIntegralRewardResult& from);
  void MergeFrom(const stGetIntegralRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGetIntegralRewardResult_eResult eResult;
  static const eResult eSuccess = stGetIntegralRewardResult_eResult_eSuccess;
  static const eResult eInner_Error = stGetIntegralRewardResult_eResult_eInner_Error;
  static const eResult eNum_Useless_Over = stGetIntegralRewardResult_eResult_eNum_Useless_Over;
  static const eResult eHas_Received = stGetIntegralRewardResult_eResult_eHas_Received;
  static const eResult eBAG_SLOT_NOT_ENOUGH = stGetIntegralRewardResult_eResult_eBAG_SLOT_NOT_ENOUGH;
  static inline bool eResult_IsValid(int value) {
    return stGetIntegralRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGetIntegralRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGetIntegralRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGetIntegralRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGetIntegralRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGetIntegralRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGetIntegralRewardResult_eResult_Parse(name, value);
  }

  typedef stGetIntegralRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGetIntegralRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGetIntegralRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGetIntegralRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGetIntegralRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGetIntegralRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGetIntegralRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGetIntegralRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGetIntegralRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stGetIntegralRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGetIntegralRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGetIntegralRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGetIntegralRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGetIntegralRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGetIntegralRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGetIntegralRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGetIntegralRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGetIntegralRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stGetIntegralRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stGetIntegralRewardResult_eResult result() const;
  inline void set_result(::MiscProto::stGetIntegralRewardResult_eResult value);

  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGetIntegralRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGetIntegralRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqGiveReward : public ::google::protobuf::Message {
 public:
  stReqGiveReward();
  virtual ~stReqGiveReward();

  stReqGiveReward(const stReqGiveReward& from);

  inline stReqGiveReward& operator=(const stReqGiveReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGiveReward& default_instance();

  void Swap(stReqGiveReward* other);

  // implements Message ----------------------------------------------

  stReqGiveReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGiveReward& from);
  void MergeFrom(const stReqGiveReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGiveReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGiveReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGiveReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGiveReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGiveReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGiveReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGiveReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGiveReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGiveReward_ProtoModID_Parse(name, value);
  }

  typedef stReqGiveReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGiveReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGiveReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGiveReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGiveReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGiveReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGiveReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGiveReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGiveReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 tag = 1;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 1;
  inline ::google::protobuf::uint32 tag() const;
  inline void set_tag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqGiveReward)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqGiveReward* default_instance_;
};
// -------------------------------------------------------------------

class stGiveRewardResult : public ::google::protobuf::Message {
 public:
  stGiveRewardResult();
  virtual ~stGiveRewardResult();

  stGiveRewardResult(const stGiveRewardResult& from);

  inline stGiveRewardResult& operator=(const stGiveRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGiveRewardResult& default_instance();

  void Swap(stGiveRewardResult* other);

  // implements Message ----------------------------------------------

  stGiveRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGiveRewardResult& from);
  void MergeFrom(const stGiveRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGiveRewardResult_eResult eResult;
  static const eResult eSuccess = stGiveRewardResult_eResult_eSuccess;
  static const eResult eInner_Error = stGiveRewardResult_eResult_eInner_Error;
  static const eResult eTask_Has_Receive = stGiveRewardResult_eResult_eTask_Has_Receive;
  static const eResult eBAG_SLOT_NOT_ENOUGH = stGiveRewardResult_eResult_eBAG_SLOT_NOT_ENOUGH;
  static const eResult eHas_Received = stGiveRewardResult_eResult_eHas_Received;
  static inline bool eResult_IsValid(int value) {
    return stGiveRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGiveRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGiveRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGiveRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGiveRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGiveRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGiveRewardResult_eResult_Parse(name, value);
  }

  typedef stGiveRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGiveRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGiveRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGiveRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGiveRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGiveRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGiveRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGiveRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGiveRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stGiveRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGiveRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGiveRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGiveRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGiveRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGiveRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGiveRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGiveRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGiveRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stGiveRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stGiveRewardResult_eResult result() const;
  inline void set_result(::MiscProto::stGiveRewardResult_eResult value);

  // optional uint32 integral = 2;
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 2;
  inline ::google::protobuf::uint32 integral() const;
  inline void set_integral(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stGiveRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_integral();
  inline void clear_has_integral();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 integral_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stGiveRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqLuckyDraw : public ::google::protobuf::Message {
 public:
  stReqLuckyDraw();
  virtual ~stReqLuckyDraw();

  stReqLuckyDraw(const stReqLuckyDraw& from);

  inline stReqLuckyDraw& operator=(const stReqLuckyDraw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLuckyDraw& default_instance();

  void Swap(stReqLuckyDraw* other);

  // implements Message ----------------------------------------------

  stReqLuckyDraw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLuckyDraw& from);
  void MergeFrom(const stReqLuckyDraw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLuckyDraw_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLuckyDraw_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLuckyDraw_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLuckyDraw_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLuckyDraw_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLuckyDraw_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLuckyDraw_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLuckyDraw_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLuckyDraw_ProtoModID_Parse(name, value);
  }

  typedef stReqLuckyDraw_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLuckyDraw_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLuckyDraw_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLuckyDraw_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLuckyDraw_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLuckyDraw_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLuckyDraw_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLuckyDraw_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLuckyDraw_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqLuckyDraw)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqLuckyDraw* default_instance_;
};
// -------------------------------------------------------------------

class stLuckyDrawPointRewardInfo : public ::google::protobuf::Message {
 public:
  stLuckyDrawPointRewardInfo();
  virtual ~stLuckyDrawPointRewardInfo();

  stLuckyDrawPointRewardInfo(const stLuckyDrawPointRewardInfo& from);

  inline stLuckyDrawPointRewardInfo& operator=(const stLuckyDrawPointRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLuckyDrawPointRewardInfo& default_instance();

  void Swap(stLuckyDrawPointRewardInfo* other);

  // implements Message ----------------------------------------------

  stLuckyDrawPointRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLuckyDrawPointRewardInfo& from);
  void MergeFrom(const stLuckyDrawPointRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stLuckyDrawPointRewardInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stLuckyDrawPointRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class stLuckyDrawRewardInfo : public ::google::protobuf::Message {
 public:
  stLuckyDrawRewardInfo();
  virtual ~stLuckyDrawRewardInfo();

  stLuckyDrawRewardInfo(const stLuckyDrawRewardInfo& from);

  inline stLuckyDrawRewardInfo& operator=(const stLuckyDrawRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLuckyDrawRewardInfo& default_instance();

  void Swap(stLuckyDrawRewardInfo* other);

  // implements Message ----------------------------------------------

  stLuckyDrawRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLuckyDrawRewardInfo& from);
  void MergeFrom(const stLuckyDrawRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stLuckyDrawRewardInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stLuckyDrawRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class stLuckyDrawUserInfo : public ::google::protobuf::Message {
 public:
  stLuckyDrawUserInfo();
  virtual ~stLuckyDrawUserInfo();

  stLuckyDrawUserInfo(const stLuckyDrawUserInfo& from);

  inline stLuckyDrawUserInfo& operator=(const stLuckyDrawUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLuckyDrawUserInfo& default_instance();

  void Swap(stLuckyDrawUserInfo* other);

  // implements Message ----------------------------------------------

  stLuckyDrawUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLuckyDrawUserInfo& from);
  void MergeFrom(const stLuckyDrawUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stLuckyDrawUserInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stLuckyDrawUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetLuckyDraw : public ::google::protobuf::Message {
 public:
  stRetLuckyDraw();
  virtual ~stRetLuckyDraw();

  stRetLuckyDraw(const stRetLuckyDraw& from);

  inline stRetLuckyDraw& operator=(const stRetLuckyDraw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetLuckyDraw& default_instance();

  void Swap(stRetLuckyDraw* other);

  // implements Message ----------------------------------------------

  stRetLuckyDraw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetLuckyDraw& from);
  void MergeFrom(const stRetLuckyDraw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetLuckyDraw_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetLuckyDraw_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetLuckyDraw_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetLuckyDraw_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetLuckyDraw_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetLuckyDraw_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetLuckyDraw_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetLuckyDraw_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetLuckyDraw_ProtoModID_Parse(name, value);
  }

  typedef stRetLuckyDraw_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetLuckyDraw_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetLuckyDraw_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetLuckyDraw_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetLuckyDraw_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetLuckyDraw_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetLuckyDraw_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetLuckyDraw_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetLuckyDraw_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 activityid = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityidFieldNumber = 1;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // repeated .MiscProto.stLuckyDrawPointRewardInfo reward = 2;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::MiscProto::stLuckyDrawPointRewardInfo& reward(int index) const;
  inline ::MiscProto::stLuckyDrawPointRewardInfo* mutable_reward(int index);
  inline ::MiscProto::stLuckyDrawPointRewardInfo* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawPointRewardInfo >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawPointRewardInfo >*
      mutable_reward();

  // optional uint32 diamond = 3;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 3;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // repeated .MiscProto.stLuckyDrawUserInfo player = 4;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 4;
  inline const ::MiscProto::stLuckyDrawUserInfo& player(int index) const;
  inline ::MiscProto::stLuckyDrawUserInfo* mutable_player(int index);
  inline ::MiscProto::stLuckyDrawUserInfo* add_player();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawUserInfo >&
      player() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawUserInfo >*
      mutable_player();

  // optional uint32 lastFreeTime = 5;
  inline bool has_lastfreetime() const;
  inline void clear_lastfreetime();
  static const int kLastFreeTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 lastfreetime() const;
  inline void set_lastfreetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetLuckyDraw)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_lastfreetime();
  inline void clear_has_lastfreetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawPointRewardInfo > reward_;
  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawUserInfo > player_;
  ::google::protobuf::uint32 lastfreetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetLuckyDraw* default_instance_;
};
// -------------------------------------------------------------------

class stReqLuckyDrawReward : public ::google::protobuf::Message {
 public:
  stReqLuckyDrawReward();
  virtual ~stReqLuckyDrawReward();

  stReqLuckyDrawReward(const stReqLuckyDrawReward& from);

  inline stReqLuckyDrawReward& operator=(const stReqLuckyDrawReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLuckyDrawReward& default_instance();

  void Swap(stReqLuckyDrawReward* other);

  // implements Message ----------------------------------------------

  stReqLuckyDrawReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLuckyDrawReward& from);
  void MergeFrom(const stReqLuckyDrawReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLuckyDrawReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLuckyDrawReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLuckyDrawReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLuckyDrawReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLuckyDrawReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLuckyDrawReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLuckyDrawReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLuckyDrawReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLuckyDrawReward_ProtoModID_Parse(name, value);
  }

  typedef stReqLuckyDrawReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLuckyDrawReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLuckyDrawReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLuckyDrawReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLuckyDrawReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLuckyDrawReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLuckyDrawReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLuckyDrawReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLuckyDrawReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqLuckyDrawReward)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqLuckyDrawReward* default_instance_;
};
// -------------------------------------------------------------------

class stRetLuckyDrawReward : public ::google::protobuf::Message {
 public:
  stRetLuckyDrawReward();
  virtual ~stRetLuckyDrawReward();

  stRetLuckyDrawReward(const stRetLuckyDrawReward& from);

  inline stRetLuckyDrawReward& operator=(const stRetLuckyDrawReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetLuckyDrawReward& default_instance();

  void Swap(stRetLuckyDrawReward* other);

  // implements Message ----------------------------------------------

  stRetLuckyDrawReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetLuckyDrawReward& from);
  void MergeFrom(const stRetLuckyDrawReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetLuckyDrawReward_eResult eResult;
  static const eResult eSuccess = stRetLuckyDrawReward_eResult_eSuccess;
  static const eResult eBag_Full = stRetLuckyDrawReward_eResult_eBag_Full;
  static const eResult eDiamond_Less = stRetLuckyDrawReward_eResult_eDiamond_Less;
  static const eResult eActivity_Expire = stRetLuckyDrawReward_eResult_eActivity_Expire;
  static const eResult eNo_Such_Id = stRetLuckyDrawReward_eResult_eNo_Such_Id;
  static inline bool eResult_IsValid(int value) {
    return stRetLuckyDrawReward_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetLuckyDrawReward_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetLuckyDrawReward_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetLuckyDrawReward_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetLuckyDrawReward_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetLuckyDrawReward_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetLuckyDrawReward_eResult_Parse(name, value);
  }

  typedef stRetLuckyDrawReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetLuckyDrawReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetLuckyDrawReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetLuckyDrawReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetLuckyDrawReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetLuckyDrawReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetLuckyDrawReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetLuckyDrawReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetLuckyDrawReward_ProtoModID_Parse(name, value);
  }

  typedef stRetLuckyDrawReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetLuckyDrawReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetLuckyDrawReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetLuckyDrawReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetLuckyDrawReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetLuckyDrawReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetLuckyDrawReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetLuckyDrawReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetLuckyDrawReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .MiscProto.stLuckyDrawRewardInfo reward = 2;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::MiscProto::stLuckyDrawRewardInfo& reward(int index) const;
  inline ::MiscProto::stLuckyDrawRewardInfo* mutable_reward(int index);
  inline ::MiscProto::stLuckyDrawRewardInfo* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawRewardInfo >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawRewardInfo >*
      mutable_reward();

  // repeated .MiscProto.stLuckyDrawUserInfo player = 3;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 3;
  inline const ::MiscProto::stLuckyDrawUserInfo& player(int index) const;
  inline ::MiscProto::stLuckyDrawUserInfo* mutable_player(int index);
  inline ::MiscProto::stLuckyDrawUserInfo* add_player();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawUserInfo >&
      player() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawUserInfo >*
      mutable_player();

  // optional .MiscProto.stRetLuckyDrawReward.eResult result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::MiscProto::stRetLuckyDrawReward_eResult result() const;
  inline void set_result(::MiscProto::stRetLuckyDrawReward_eResult value);

  // optional uint32 lastFreeTime = 5;
  inline bool has_lastfreetime() const;
  inline void clear_lastfreetime();
  static const int kLastFreeTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 lastfreetime() const;
  inline void set_lastfreetime(::google::protobuf::uint32 value);

  // optional uint32 diamond = 6;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 6;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetLuckyDrawReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_lastfreetime();
  inline void clear_has_lastfreetime();
  inline void set_has_diamond();
  inline void clear_has_diamond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawRewardInfo > reward_;
  ::google::protobuf::uint32 id_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawUserInfo > player_;
  ::google::protobuf::uint32 lastfreetime_;
  ::google::protobuf::uint32 diamond_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetLuckyDrawReward* default_instance_;
};
// -------------------------------------------------------------------

class stReqLuckyDrawPointReward : public ::google::protobuf::Message {
 public:
  stReqLuckyDrawPointReward();
  virtual ~stReqLuckyDrawPointReward();

  stReqLuckyDrawPointReward(const stReqLuckyDrawPointReward& from);

  inline stReqLuckyDrawPointReward& operator=(const stReqLuckyDrawPointReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLuckyDrawPointReward& default_instance();

  void Swap(stReqLuckyDrawPointReward* other);

  // implements Message ----------------------------------------------

  stReqLuckyDrawPointReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLuckyDrawPointReward& from);
  void MergeFrom(const stReqLuckyDrawPointReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLuckyDrawPointReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLuckyDrawPointReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLuckyDrawPointReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLuckyDrawPointReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLuckyDrawPointReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLuckyDrawPointReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLuckyDrawPointReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLuckyDrawPointReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLuckyDrawPointReward_ProtoModID_Parse(name, value);
  }

  typedef stReqLuckyDrawPointReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLuckyDrawPointReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLuckyDrawPointReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLuckyDrawPointReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLuckyDrawPointReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLuckyDrawPointReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLuckyDrawPointReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLuckyDrawPointReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLuckyDrawPointReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 activityid = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityidFieldNumber = 1;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 pointid = 2;
  inline bool has_pointid() const;
  inline void clear_pointid();
  static const int kPointidFieldNumber = 2;
  inline ::google::protobuf::uint32 pointid() const;
  inline void set_pointid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqLuckyDrawPointReward)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_pointid();
  inline void clear_has_pointid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 pointid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqLuckyDrawPointReward* default_instance_;
};
// -------------------------------------------------------------------

class stRetLuckyDrawPointReward : public ::google::protobuf::Message {
 public:
  stRetLuckyDrawPointReward();
  virtual ~stRetLuckyDrawPointReward();

  stRetLuckyDrawPointReward(const stRetLuckyDrawPointReward& from);

  inline stRetLuckyDrawPointReward& operator=(const stRetLuckyDrawPointReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetLuckyDrawPointReward& default_instance();

  void Swap(stRetLuckyDrawPointReward* other);

  // implements Message ----------------------------------------------

  stRetLuckyDrawPointReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetLuckyDrawPointReward& from);
  void MergeFrom(const stRetLuckyDrawPointReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetLuckyDrawPointReward_eResult eResult;
  static const eResult eSuccess = stRetLuckyDrawPointReward_eResult_eSuccess;
  static const eResult eBag_Full = stRetLuckyDrawPointReward_eResult_eBag_Full;
  static const eResult eDiamond_Less = stRetLuckyDrawPointReward_eResult_eDiamond_Less;
  static const eResult eActivity_Expire = stRetLuckyDrawPointReward_eResult_eActivity_Expire;
  static const eResult eNo_Such_Id = stRetLuckyDrawPointReward_eResult_eNo_Such_Id;
  static const eResult eAlready_Get = stRetLuckyDrawPointReward_eResult_eAlready_Get;
  static inline bool eResult_IsValid(int value) {
    return stRetLuckyDrawPointReward_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetLuckyDrawPointReward_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetLuckyDrawPointReward_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetLuckyDrawPointReward_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetLuckyDrawPointReward_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetLuckyDrawPointReward_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetLuckyDrawPointReward_eResult_Parse(name, value);
  }

  typedef stRetLuckyDrawPointReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetLuckyDrawPointReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetLuckyDrawPointReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetLuckyDrawPointReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetLuckyDrawPointReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetLuckyDrawPointReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetLuckyDrawPointReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetLuckyDrawPointReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetLuckyDrawPointReward_ProtoModID_Parse(name, value);
  }

  typedef stRetLuckyDrawPointReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetLuckyDrawPointReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetLuckyDrawPointReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetLuckyDrawPointReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetLuckyDrawPointReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetLuckyDrawPointReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetLuckyDrawPointReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetLuckyDrawPointReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetLuckyDrawPointReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 activityid = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityidFieldNumber = 1;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional uint32 pointid = 2;
  inline bool has_pointid() const;
  inline void clear_pointid();
  static const int kPointidFieldNumber = 2;
  inline ::google::protobuf::uint32 pointid() const;
  inline void set_pointid(::google::protobuf::uint32 value);

  // optional .MiscProto.stRetLuckyDrawPointReward.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::MiscProto::stRetLuckyDrawPointReward_eResult result() const;
  inline void set_result(::MiscProto::stRetLuckyDrawPointReward_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetLuckyDrawPointReward)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_pointid();
  inline void clear_has_pointid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activityid_;
  ::google::protobuf::uint32 pointid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetLuckyDrawPointReward* default_instance_;
};
// -------------------------------------------------------------------

class stReqRedPointRuls : public ::google::protobuf::Message {
 public:
  stReqRedPointRuls();
  virtual ~stReqRedPointRuls();

  stReqRedPointRuls(const stReqRedPointRuls& from);

  inline stReqRedPointRuls& operator=(const stReqRedPointRuls& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRedPointRuls& default_instance();

  void Swap(stReqRedPointRuls* other);

  // implements Message ----------------------------------------------

  stReqRedPointRuls* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRedPointRuls& from);
  void MergeFrom(const stReqRedPointRuls& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRedPointRuls_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRedPointRuls_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRedPointRuls_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRedPointRuls_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRedPointRuls_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRedPointRuls_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRedPointRuls_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRedPointRuls_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRedPointRuls_ProtoModID_Parse(name, value);
  }

  typedef stReqRedPointRuls_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRedPointRuls_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRedPointRuls_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRedPointRuls_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRedPointRuls_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRedPointRuls_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRedPointRuls_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRedPointRuls_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRedPointRuls_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqRedPointRuls)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqRedPointRuls* default_instance_;
};
// -------------------------------------------------------------------

class stRedPointRulsResult : public ::google::protobuf::Message {
 public:
  stRedPointRulsResult();
  virtual ~stRedPointRulsResult();

  stRedPointRulsResult(const stRedPointRulsResult& from);

  inline stRedPointRulsResult& operator=(const stRedPointRulsResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRedPointRulsResult& default_instance();

  void Swap(stRedPointRulsResult* other);

  // implements Message ----------------------------------------------

  stRedPointRulsResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRedPointRulsResult& from);
  void MergeFrom(const stRedPointRulsResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRedPointRulsResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRedPointRulsResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRedPointRulsResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRedPointRulsResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRedPointRulsResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRedPointRulsResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRedPointRulsResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRedPointRulsResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRedPointRulsResult_ProtoModID_Parse(name, value);
  }

  typedef stRedPointRulsResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRedPointRulsResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRedPointRulsResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRedPointRulsResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRedPointRulsResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRedPointRulsResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRedPointRulsResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRedPointRulsResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRedPointRulsResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool times = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 1;
  inline bool times() const;
  inline void set_times(bool value);

  // optional bool canGetReward = 2;
  inline bool has_cangetreward() const;
  inline void clear_cangetreward();
  static const int kCanGetRewardFieldNumber = 2;
  inline bool cangetreward() const;
  inline void set_cangetreward(bool value);

  // optional bool canOpenIntegalBox = 3;
  inline bool has_canopenintegalbox() const;
  inline void clear_canopenintegalbox();
  static const int kCanOpenIntegalBoxFieldNumber = 3;
  inline bool canopenintegalbox() const;
  inline void set_canopenintegalbox(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRedPointRulsResult)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_cangetreward();
  inline void clear_has_cangetreward();
  inline void set_has_canopenintegalbox();
  inline void clear_has_canopenintegalbox();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool times_;
  bool cangetreward_;
  bool canopenintegalbox_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRedPointRulsResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqInviteFriend : public ::google::protobuf::Message {
 public:
  stReqInviteFriend();
  virtual ~stReqInviteFriend();

  stReqInviteFriend(const stReqInviteFriend& from);

  inline stReqInviteFriend& operator=(const stReqInviteFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqInviteFriend& default_instance();

  void Swap(stReqInviteFriend* other);

  // implements Message ----------------------------------------------

  stReqInviteFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqInviteFriend& from);
  void MergeFrom(const stReqInviteFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqInviteFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqInviteFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqInviteFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqInviteFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqInviteFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqInviteFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqInviteFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqInviteFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqInviteFriend_ProtoModID_Parse(name, value);
  }

  typedef stReqInviteFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqInviteFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqInviteFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqInviteFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqInviteFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqInviteFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqInviteFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqInviteFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqInviteFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqInviteFriend)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqInviteFriend* default_instance_;
};
// -------------------------------------------------------------------

class InviteFriendReward : public ::google::protobuf::Message {
 public:
  InviteFriendReward();
  virtual ~InviteFriendReward();

  InviteFriendReward(const InviteFriendReward& from);

  inline InviteFriendReward& operator=(const InviteFriendReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteFriendReward& default_instance();

  void Swap(InviteFriendReward* other);

  // implements Message ----------------------------------------------

  InviteFriendReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteFriendReward& from);
  void MergeFrom(const InviteFriendReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.InviteFriendReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static InviteFriendReward* default_instance_;
};
// -------------------------------------------------------------------

class stRetInviteFriend : public ::google::protobuf::Message {
 public:
  stRetInviteFriend();
  virtual ~stRetInviteFriend();

  stRetInviteFriend(const stRetInviteFriend& from);

  inline stRetInviteFriend& operator=(const stRetInviteFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetInviteFriend& default_instance();

  void Swap(stRetInviteFriend* other);

  // implements Message ----------------------------------------------

  stRetInviteFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetInviteFriend& from);
  void MergeFrom(const stRetInviteFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetInviteFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetInviteFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetInviteFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetInviteFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetInviteFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetInviteFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetInviteFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetInviteFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetInviteFriend_ProtoModID_Parse(name, value);
  }

  typedef stRetInviteFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetInviteFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetInviteFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetInviteFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetInviteFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetInviteFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetInviteFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetInviteFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetInviteFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional bool useInviteCode = 3;
  inline bool has_useinvitecode() const;
  inline void clear_useinvitecode();
  static const int kUseInviteCodeFieldNumber = 3;
  inline bool useinvitecode() const;
  inline void set_useinvitecode(bool value);

  // repeated .MiscProto.InviteFriendReward reward = 4;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::MiscProto::InviteFriendReward& reward(int index) const;
  inline ::MiscProto::InviteFriendReward* mutable_reward(int index);
  inline ::MiscProto::InviteFriendReward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::InviteFriendReward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::InviteFriendReward >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:MiscProto.stRetInviteFriend)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_useinvitecode();
  inline void clear_has_useinvitecode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* code_;
  ::google::protobuf::uint32 num_;
  bool useinvitecode_;
  ::google::protobuf::RepeatedPtrField< ::MiscProto::InviteFriendReward > reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetInviteFriend* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawInviteFriend : public ::google::protobuf::Message {
 public:
  stReqDrawInviteFriend();
  virtual ~stReqDrawInviteFriend();

  stReqDrawInviteFriend(const stReqDrawInviteFriend& from);

  inline stReqDrawInviteFriend& operator=(const stReqDrawInviteFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawInviteFriend& default_instance();

  void Swap(stReqDrawInviteFriend* other);

  // implements Message ----------------------------------------------

  stReqDrawInviteFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawInviteFriend& from);
  void MergeFrom(const stReqDrawInviteFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawInviteFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawInviteFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawInviteFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawInviteFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawInviteFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawInviteFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawInviteFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawInviteFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawInviteFriend_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawInviteFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawInviteFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawInviteFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawInviteFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawInviteFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawInviteFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawInviteFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawInviteFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawInviteFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDrawInviteFriend)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawInviteFriend* default_instance_;
};
// -------------------------------------------------------------------

class stRetDrawInviteFriend : public ::google::protobuf::Message {
 public:
  stRetDrawInviteFriend();
  virtual ~stRetDrawInviteFriend();

  stRetDrawInviteFriend(const stRetDrawInviteFriend& from);

  inline stRetDrawInviteFriend& operator=(const stRetDrawInviteFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDrawInviteFriend& default_instance();

  void Swap(stRetDrawInviteFriend* other);

  // implements Message ----------------------------------------------

  stRetDrawInviteFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDrawInviteFriend& from);
  void MergeFrom(const stRetDrawInviteFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDrawInviteFriend_eResult eResult;
  static const eResult eSuccess = stRetDrawInviteFriend_eResult_eSuccess;
  static const eResult eBag_Full = stRetDrawInviteFriend_eResult_eBag_Full;
  static const eResult eLess_Of_Invite_Num = stRetDrawInviteFriend_eResult_eLess_Of_Invite_Num;
  static const eResult eNo_Such_Id = stRetDrawInviteFriend_eResult_eNo_Such_Id;
  static const eResult eAlready_Get = stRetDrawInviteFriend_eResult_eAlready_Get;
  static const eResult eNot_Find_Record = stRetDrawInviteFriend_eResult_eNot_Find_Record;
  static inline bool eResult_IsValid(int value) {
    return stRetDrawInviteFriend_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetDrawInviteFriend_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetDrawInviteFriend_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetDrawInviteFriend_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetDrawInviteFriend_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetDrawInviteFriend_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetDrawInviteFriend_eResult_Parse(name, value);
  }

  typedef stRetDrawInviteFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDrawInviteFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDrawInviteFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDrawInviteFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDrawInviteFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDrawInviteFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDrawInviteFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDrawInviteFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDrawInviteFriend_ProtoModID_Parse(name, value);
  }

  typedef stRetDrawInviteFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDrawInviteFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDrawInviteFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDrawInviteFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDrawInviteFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDrawInviteFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDrawInviteFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDrawInviteFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDrawInviteFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .MiscProto.stRetDrawInviteFriend.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::MiscProto::stRetDrawInviteFriend_eResult result() const;
  inline void set_result(::MiscProto::stRetDrawInviteFriend_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetDrawInviteFriend)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetDrawInviteFriend* default_instance_;
};
// -------------------------------------------------------------------

class stReqUseInviteCode : public ::google::protobuf::Message {
 public:
  stReqUseInviteCode();
  virtual ~stReqUseInviteCode();

  stReqUseInviteCode(const stReqUseInviteCode& from);

  inline stReqUseInviteCode& operator=(const stReqUseInviteCode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqUseInviteCode& default_instance();

  void Swap(stReqUseInviteCode* other);

  // implements Message ----------------------------------------------

  stReqUseInviteCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqUseInviteCode& from);
  void MergeFrom(const stReqUseInviteCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqUseInviteCode_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqUseInviteCode_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqUseInviteCode_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqUseInviteCode_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqUseInviteCode_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqUseInviteCode_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqUseInviteCode_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqUseInviteCode_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqUseInviteCode_ProtoModID_Parse(name, value);
  }

  typedef stReqUseInviteCode_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqUseInviteCode_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqUseInviteCode_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqUseInviteCode_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqUseInviteCode_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqUseInviteCode_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqUseInviteCode_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqUseInviteCode_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqUseInviteCode_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqUseInviteCode)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqUseInviteCode* default_instance_;
};
// -------------------------------------------------------------------

class stRetUseInviteCode : public ::google::protobuf::Message {
 public:
  stRetUseInviteCode();
  virtual ~stRetUseInviteCode();

  stRetUseInviteCode(const stRetUseInviteCode& from);

  inline stRetUseInviteCode& operator=(const stRetUseInviteCode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetUseInviteCode& default_instance();

  void Swap(stRetUseInviteCode* other);

  // implements Message ----------------------------------------------

  stRetUseInviteCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetUseInviteCode& from);
  void MergeFrom(const stRetUseInviteCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetUseInviteCode_eResult eResult;
  static const eResult eSuccess = stRetUseInviteCode_eResult_eSuccess;
  static const eResult eBag_Full = stRetUseInviteCode_eResult_eBag_Full;
  static const eResult eNo_Such_Code = stRetUseInviteCode_eResult_eNo_Such_Code;
  static const eResult eAlready_Get = stRetUseInviteCode_eResult_eAlready_Get;
  static const eResult eNot_Find_Record = stRetUseInviteCode_eResult_eNot_Find_Record;
  static const eResult eInner_error = stRetUseInviteCode_eResult_eInner_error;
  static const eResult eLevel_Limit = stRetUseInviteCode_eResult_eLevel_Limit;
  static const eResult eUse_Self_Code = stRetUseInviteCode_eResult_eUse_Self_Code;
  static inline bool eResult_IsValid(int value) {
    return stRetUseInviteCode_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetUseInviteCode_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetUseInviteCode_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetUseInviteCode_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetUseInviteCode_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetUseInviteCode_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetUseInviteCode_eResult_Parse(name, value);
  }

  typedef stRetUseInviteCode_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetUseInviteCode_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetUseInviteCode_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetUseInviteCode_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetUseInviteCode_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetUseInviteCode_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetUseInviteCode_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetUseInviteCode_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetUseInviteCode_ProtoModID_Parse(name, value);
  }

  typedef stRetUseInviteCode_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetUseInviteCode_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetUseInviteCode_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetUseInviteCode_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetUseInviteCode_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetUseInviteCode_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetUseInviteCode_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetUseInviteCode_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetUseInviteCode_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stRetUseInviteCode.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stRetUseInviteCode_eResult result() const;
  inline void set_result(::MiscProto::stRetUseInviteCode_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetUseInviteCode)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetUseInviteCode* default_instance_;
};
// -------------------------------------------------------------------

class stReqShareInvite : public ::google::protobuf::Message {
 public:
  stReqShareInvite();
  virtual ~stReqShareInvite();

  stReqShareInvite(const stReqShareInvite& from);

  inline stReqShareInvite& operator=(const stReqShareInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqShareInvite& default_instance();

  void Swap(stReqShareInvite* other);

  // implements Message ----------------------------------------------

  stReqShareInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqShareInvite& from);
  void MergeFrom(const stReqShareInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqShareInvite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqShareInvite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqShareInvite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqShareInvite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqShareInvite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqShareInvite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqShareInvite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqShareInvite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqShareInvite_ProtoModID_Parse(name, value);
  }

  typedef stReqShareInvite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqShareInvite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqShareInvite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqShareInvite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqShareInvite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqShareInvite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqShareInvite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqShareInvite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqShareInvite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqShareInvite)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqShareInvite* default_instance_;
};
// -------------------------------------------------------------------

class stRetShareInvite : public ::google::protobuf::Message {
 public:
  stRetShareInvite();
  virtual ~stRetShareInvite();

  stRetShareInvite(const stRetShareInvite& from);

  inline stRetShareInvite& operator=(const stRetShareInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetShareInvite& default_instance();

  void Swap(stRetShareInvite* other);

  // implements Message ----------------------------------------------

  stRetShareInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetShareInvite& from);
  void MergeFrom(const stRetShareInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetShareInvite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetShareInvite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetShareInvite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetShareInvite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetShareInvite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetShareInvite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetShareInvite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetShareInvite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetShareInvite_ProtoModID_Parse(name, value);
  }

  typedef stRetShareInvite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetShareInvite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetShareInvite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetShareInvite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetShareInvite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetShareInvite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetShareInvite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetShareInvite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetShareInvite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetShareInvite)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetShareInvite* default_instance_;
};
// -------------------------------------------------------------------

class stReqDailyShareInvite : public ::google::protobuf::Message {
 public:
  stReqDailyShareInvite();
  virtual ~stReqDailyShareInvite();

  stReqDailyShareInvite(const stReqDailyShareInvite& from);

  inline stReqDailyShareInvite& operator=(const stReqDailyShareInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDailyShareInvite& default_instance();

  void Swap(stReqDailyShareInvite* other);

  // implements Message ----------------------------------------------

  stReqDailyShareInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDailyShareInvite& from);
  void MergeFrom(const stReqDailyShareInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDailyShareInvite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDailyShareInvite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDailyShareInvite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDailyShareInvite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDailyShareInvite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDailyShareInvite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDailyShareInvite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDailyShareInvite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDailyShareInvite_ProtoModID_Parse(name, value);
  }

  typedef stReqDailyShareInvite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDailyShareInvite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDailyShareInvite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDailyShareInvite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDailyShareInvite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDailyShareInvite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDailyShareInvite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDailyShareInvite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDailyShareInvite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDailyShareInvite)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDailyShareInvite* default_instance_;
};
// -------------------------------------------------------------------

class stRetDailyShareInvite : public ::google::protobuf::Message {
 public:
  stRetDailyShareInvite();
  virtual ~stRetDailyShareInvite();

  stRetDailyShareInvite(const stRetDailyShareInvite& from);

  inline stRetDailyShareInvite& operator=(const stRetDailyShareInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDailyShareInvite& default_instance();

  void Swap(stRetDailyShareInvite* other);

  // implements Message ----------------------------------------------

  stRetDailyShareInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDailyShareInvite& from);
  void MergeFrom(const stRetDailyShareInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDailyShareInvite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDailyShareInvite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDailyShareInvite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDailyShareInvite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDailyShareInvite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDailyShareInvite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDailyShareInvite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDailyShareInvite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDailyShareInvite_ProtoModID_Parse(name, value);
  }

  typedef stRetDailyShareInvite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDailyShareInvite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDailyShareInvite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDailyShareInvite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDailyShareInvite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDailyShareInvite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDailyShareInvite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDailyShareInvite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDailyShareInvite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // repeated uint32 id = 2;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // optional bool onceReward = 3;
  inline bool has_oncereward() const;
  inline void clear_oncereward();
  static const int kOnceRewardFieldNumber = 3;
  inline bool oncereward() const;
  inline void set_oncereward(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetDailyShareInvite)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_oncereward();
  inline void clear_has_oncereward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  ::google::protobuf::uint32 num_;
  bool oncereward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetDailyShareInvite* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawDailyShareReward : public ::google::protobuf::Message {
 public:
  stReqDrawDailyShareReward();
  virtual ~stReqDrawDailyShareReward();

  stReqDrawDailyShareReward(const stReqDrawDailyShareReward& from);

  inline stReqDrawDailyShareReward& operator=(const stReqDrawDailyShareReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawDailyShareReward& default_instance();

  void Swap(stReqDrawDailyShareReward* other);

  // implements Message ----------------------------------------------

  stReqDrawDailyShareReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawDailyShareReward& from);
  void MergeFrom(const stReqDrawDailyShareReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawDailyShareReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawDailyShareReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawDailyShareReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawDailyShareReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawDailyShareReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawDailyShareReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawDailyShareReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawDailyShareReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawDailyShareReward_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawDailyShareReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawDailyShareReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawDailyShareReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawDailyShareReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawDailyShareReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawDailyShareReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawDailyShareReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawDailyShareReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawDailyShareReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDrawDailyShareReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawDailyShareReward* default_instance_;
};
// -------------------------------------------------------------------

class stRetDrawDailyShareReward : public ::google::protobuf::Message {
 public:
  stRetDrawDailyShareReward();
  virtual ~stRetDrawDailyShareReward();

  stRetDrawDailyShareReward(const stRetDrawDailyShareReward& from);

  inline stRetDrawDailyShareReward& operator=(const stRetDrawDailyShareReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDrawDailyShareReward& default_instance();

  void Swap(stRetDrawDailyShareReward* other);

  // implements Message ----------------------------------------------

  stRetDrawDailyShareReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDrawDailyShareReward& from);
  void MergeFrom(const stRetDrawDailyShareReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDrawDailyShareReward_eResult eResult;
  static const eResult eSuccess = stRetDrawDailyShareReward_eResult_eSuccess;
  static const eResult eBag_Full = stRetDrawDailyShareReward_eResult_eBag_Full;
  static const eResult eLess_Of_Num = stRetDrawDailyShareReward_eResult_eLess_Of_Num;
  static const eResult eAlready_Get = stRetDrawDailyShareReward_eResult_eAlready_Get;
  static const eResult eNot_Find_Id = stRetDrawDailyShareReward_eResult_eNot_Find_Id;
  static inline bool eResult_IsValid(int value) {
    return stRetDrawDailyShareReward_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetDrawDailyShareReward_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetDrawDailyShareReward_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetDrawDailyShareReward_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetDrawDailyShareReward_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetDrawDailyShareReward_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetDrawDailyShareReward_eResult_Parse(name, value);
  }

  typedef stRetDrawDailyShareReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDrawDailyShareReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDrawDailyShareReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDrawDailyShareReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDrawDailyShareReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDrawDailyShareReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDrawDailyShareReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDrawDailyShareReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDrawDailyShareReward_ProtoModID_Parse(name, value);
  }

  typedef stRetDrawDailyShareReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDrawDailyShareReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDrawDailyShareReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDrawDailyShareReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDrawDailyShareReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDrawDailyShareReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDrawDailyShareReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDrawDailyShareReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDrawDailyShareReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .MiscProto.stRetDrawDailyShareReward.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::MiscProto::stRetDrawDailyShareReward_eResult result() const;
  inline void set_result(::MiscProto::stRetDrawDailyShareReward_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetDrawDailyShareReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetDrawDailyShareReward* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawOnceShareReward : public ::google::protobuf::Message {
 public:
  stReqDrawOnceShareReward();
  virtual ~stReqDrawOnceShareReward();

  stReqDrawOnceShareReward(const stReqDrawOnceShareReward& from);

  inline stReqDrawOnceShareReward& operator=(const stReqDrawOnceShareReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawOnceShareReward& default_instance();

  void Swap(stReqDrawOnceShareReward* other);

  // implements Message ----------------------------------------------

  stReqDrawOnceShareReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawOnceShareReward& from);
  void MergeFrom(const stReqDrawOnceShareReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawOnceShareReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawOnceShareReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawOnceShareReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawOnceShareReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawOnceShareReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawOnceShareReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawOnceShareReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawOnceShareReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawOnceShareReward_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawOnceShareReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawOnceShareReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawOnceShareReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawOnceShareReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawOnceShareReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawOnceShareReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawOnceShareReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawOnceShareReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawOnceShareReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDrawOnceShareReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawOnceShareReward* default_instance_;
};
// -------------------------------------------------------------------

class stRetDrawOnceShareReward : public ::google::protobuf::Message {
 public:
  stRetDrawOnceShareReward();
  virtual ~stRetDrawOnceShareReward();

  stRetDrawOnceShareReward(const stRetDrawOnceShareReward& from);

  inline stRetDrawOnceShareReward& operator=(const stRetDrawOnceShareReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDrawOnceShareReward& default_instance();

  void Swap(stRetDrawOnceShareReward* other);

  // implements Message ----------------------------------------------

  stRetDrawOnceShareReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDrawOnceShareReward& from);
  void MergeFrom(const stRetDrawOnceShareReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDrawOnceShareReward_eResult eResult;
  static const eResult eSuccess = stRetDrawOnceShareReward_eResult_eSuccess;
  static const eResult eBag_Full = stRetDrawOnceShareReward_eResult_eBag_Full;
  static const eResult eAlready_Get = stRetDrawOnceShareReward_eResult_eAlready_Get;
  static const eResult eLess_Of_Num = stRetDrawOnceShareReward_eResult_eLess_Of_Num;
  static inline bool eResult_IsValid(int value) {
    return stRetDrawOnceShareReward_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetDrawOnceShareReward_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetDrawOnceShareReward_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetDrawOnceShareReward_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetDrawOnceShareReward_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetDrawOnceShareReward_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetDrawOnceShareReward_eResult_Parse(name, value);
  }

  typedef stRetDrawOnceShareReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDrawOnceShareReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDrawOnceShareReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDrawOnceShareReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDrawOnceShareReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDrawOnceShareReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDrawOnceShareReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDrawOnceShareReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDrawOnceShareReward_ProtoModID_Parse(name, value);
  }

  typedef stRetDrawOnceShareReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDrawOnceShareReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDrawOnceShareReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDrawOnceShareReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDrawOnceShareReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDrawOnceShareReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDrawOnceShareReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDrawOnceShareReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDrawOnceShareReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stRetDrawOnceShareReward.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stRetDrawOnceShareReward_eResult result() const;
  inline void set_result(::MiscProto::stRetDrawOnceShareReward_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetDrawOnceShareReward)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetDrawOnceShareReward* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyInterceptServerResult : public ::google::protobuf::Message {
 public:
  stNotifyInterceptServerResult();
  virtual ~stNotifyInterceptServerResult();

  stNotifyInterceptServerResult(const stNotifyInterceptServerResult& from);

  inline stNotifyInterceptServerResult& operator=(const stNotifyInterceptServerResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyInterceptServerResult& default_instance();

  void Swap(stNotifyInterceptServerResult* other);

  // implements Message ----------------------------------------------

  stNotifyInterceptServerResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyInterceptServerResult& from);
  void MergeFrom(const stNotifyInterceptServerResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyInterceptServerResult_eResult eResult;
  static const eResult eWin = stNotifyInterceptServerResult_eResult_eWin;
  static const eResult eLose = stNotifyInterceptServerResult_eResult_eLose;
  static const eResult eTimeout = stNotifyInterceptServerResult_eResult_eTimeout;
  static inline bool eResult_IsValid(int value) {
    return stNotifyInterceptServerResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stNotifyInterceptServerResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stNotifyInterceptServerResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stNotifyInterceptServerResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stNotifyInterceptServerResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stNotifyInterceptServerResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stNotifyInterceptServerResult_eResult_Parse(name, value);
  }

  typedef stNotifyInterceptServerResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyInterceptServerResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyInterceptServerResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyInterceptServerResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyInterceptServerResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyInterceptServerResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyInterceptServerResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyInterceptServerResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyInterceptServerResult_ProtoModID_Parse(name, value);
  }

  typedef stNotifyInterceptServerResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyInterceptServerResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyInterceptServerResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyInterceptServerResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyInterceptServerResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyInterceptServerResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyInterceptServerResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyInterceptServerResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyInterceptServerResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stNotifyInterceptServerResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stNotifyInterceptServerResult_eResult result() const;
  inline void set_result(::MiscProto::stNotifyInterceptServerResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stNotifyInterceptServerResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stNotifyInterceptServerResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqReceiveState : public ::google::protobuf::Message {
 public:
  stReqReceiveState();
  virtual ~stReqReceiveState();

  stReqReceiveState(const stReqReceiveState& from);

  inline stReqReceiveState& operator=(const stReqReceiveState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqReceiveState& default_instance();

  void Swap(stReqReceiveState* other);

  // implements Message ----------------------------------------------

  stReqReceiveState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqReceiveState& from);
  void MergeFrom(const stReqReceiveState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqReceiveState_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqReceiveState_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqReceiveState_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqReceiveState_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqReceiveState_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqReceiveState_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqReceiveState_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqReceiveState_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqReceiveState_ProtoModID_Parse(name, value);
  }

  typedef stReqReceiveState_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqReceiveState_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqReceiveState_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqReceiveState_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqReceiveState_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqReceiveState_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqReceiveState_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqReceiveState_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqReceiveState_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqReceiveState)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqReceiveState* default_instance_;
};
// -------------------------------------------------------------------

class stReceiveStateResult : public ::google::protobuf::Message {
 public:
  stReceiveStateResult();
  virtual ~stReceiveStateResult();

  stReceiveStateResult(const stReceiveStateResult& from);

  inline stReceiveStateResult& operator=(const stReceiveStateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReceiveStateResult& default_instance();

  void Swap(stReceiveStateResult* other);

  // implements Message ----------------------------------------------

  stReceiveStateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReceiveStateResult& from);
  void MergeFrom(const stReceiveStateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReceiveStateResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReceiveStateResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReceiveStateResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReceiveStateResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReceiveStateResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReceiveStateResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReceiveStateResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReceiveStateResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReceiveStateResult_ProtoModID_Parse(name, value);
  }

  typedef stReceiveStateResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReceiveStateResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReceiveStateResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReceiveStateResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReceiveStateResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReceiveStateResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReceiveStateResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReceiveStateResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReceiveStateResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool isReceive = 1;
  inline bool has_isreceive() const;
  inline void clear_isreceive();
  static const int kIsReceiveFieldNumber = 1;
  inline bool isreceive() const;
  inline void set_isreceive(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReceiveStateResult)
 private:
  inline void set_has_isreceive();
  inline void clear_has_isreceive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isreceive_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReceiveStateResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqReceiveReward : public ::google::protobuf::Message {
 public:
  stReqReceiveReward();
  virtual ~stReqReceiveReward();

  stReqReceiveReward(const stReqReceiveReward& from);

  inline stReqReceiveReward& operator=(const stReqReceiveReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqReceiveReward& default_instance();

  void Swap(stReqReceiveReward* other);

  // implements Message ----------------------------------------------

  stReqReceiveReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqReceiveReward& from);
  void MergeFrom(const stReqReceiveReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqReceiveReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqReceiveReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqReceiveReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqReceiveReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqReceiveReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqReceiveReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqReceiveReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqReceiveReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqReceiveReward_ProtoModID_Parse(name, value);
  }

  typedef stReqReceiveReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqReceiveReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqReceiveReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqReceiveReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqReceiveReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqReceiveReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqReceiveReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqReceiveReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqReceiveReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqReceiveReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqReceiveReward* default_instance_;
};
// -------------------------------------------------------------------

class stReceiveRewardResult : public ::google::protobuf::Message {
 public:
  stReceiveRewardResult();
  virtual ~stReceiveRewardResult();

  stReceiveRewardResult(const stReceiveRewardResult& from);

  inline stReceiveRewardResult& operator=(const stReceiveRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReceiveRewardResult& default_instance();

  void Swap(stReceiveRewardResult* other);

  // implements Message ----------------------------------------------

  stReceiveRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReceiveRewardResult& from);
  void MergeFrom(const stReceiveRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReceiveRewardResult_eResult eResult;
  static const eResult eSuccess = stReceiveRewardResult_eResult_eSuccess;
  static const eResult eHas_Got_Reward = stReceiveRewardResult_eResult_eHas_Got_Reward;
  static const eResult eRecharge_Not_Enough = stReceiveRewardResult_eResult_eRecharge_Not_Enough;
  static const eResult eBag_Full = stReceiveRewardResult_eResult_eBag_Full;
  static const eResult eInner_Error = stReceiveRewardResult_eResult_eInner_Error;
  static const eResult eIs_Not_Open = stReceiveRewardResult_eResult_eIs_Not_Open;
  static inline bool eResult_IsValid(int value) {
    return stReceiveRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stReceiveRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stReceiveRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stReceiveRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stReceiveRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stReceiveRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stReceiveRewardResult_eResult_Parse(name, value);
  }

  typedef stReceiveRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReceiveRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReceiveRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReceiveRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReceiveRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReceiveRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReceiveRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReceiveRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReceiveRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stReceiveRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReceiveRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReceiveRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReceiveRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReceiveRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReceiveRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReceiveRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReceiveRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReceiveRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stReceiveRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stReceiveRewardResult_eResult result() const;
  inline void set_result(::MiscProto::stReceiveRewardResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReceiveRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReceiveRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stAcitivityLimitPetItem : public ::google::protobuf::Message {
 public:
  stAcitivityLimitPetItem();
  virtual ~stAcitivityLimitPetItem();

  stAcitivityLimitPetItem(const stAcitivityLimitPetItem& from);

  inline stAcitivityLimitPetItem& operator=(const stAcitivityLimitPetItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAcitivityLimitPetItem& default_instance();

  void Swap(stAcitivityLimitPetItem* other);

  // implements Message ----------------------------------------------

  stAcitivityLimitPetItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAcitivityLimitPetItem& from);
  void MergeFrom(const stAcitivityLimitPetItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 activiyId = 2;
  inline bool has_activiyid() const;
  inline void clear_activiyid();
  static const int kActiviyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 activiyid() const;
  inline void set_activiyid(::google::protobuf::uint32 value);

  // optional uint32 startTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 endTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stAcitivityLimitPetItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_activiyid();
  inline void clear_has_activiyid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 activiyid_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stAcitivityLimitPetItem* default_instance_;
};
// -------------------------------------------------------------------

class stSendAllAcitivityLimitPet : public ::google::protobuf::Message {
 public:
  stSendAllAcitivityLimitPet();
  virtual ~stSendAllAcitivityLimitPet();

  stSendAllAcitivityLimitPet(const stSendAllAcitivityLimitPet& from);

  inline stSendAllAcitivityLimitPet& operator=(const stSendAllAcitivityLimitPet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendAllAcitivityLimitPet& default_instance();

  void Swap(stSendAllAcitivityLimitPet* other);

  // implements Message ----------------------------------------------

  stSendAllAcitivityLimitPet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendAllAcitivityLimitPet& from);
  void MergeFrom(const stSendAllAcitivityLimitPet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendAllAcitivityLimitPet_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendAllAcitivityLimitPet_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendAllAcitivityLimitPet_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendAllAcitivityLimitPet_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendAllAcitivityLimitPet_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendAllAcitivityLimitPet_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendAllAcitivityLimitPet_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendAllAcitivityLimitPet_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendAllAcitivityLimitPet_ProtoModID_Parse(name, value);
  }

  typedef stSendAllAcitivityLimitPet_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendAllAcitivityLimitPet_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendAllAcitivityLimitPet_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendAllAcitivityLimitPet_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendAllAcitivityLimitPet_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendAllAcitivityLimitPet_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendAllAcitivityLimitPet_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendAllAcitivityLimitPet_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendAllAcitivityLimitPet_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stAcitivityLimitPetItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::MiscProto::stAcitivityLimitPetItem& item(int index) const;
  inline ::MiscProto::stAcitivityLimitPetItem* mutable_item(int index);
  inline ::MiscProto::stAcitivityLimitPetItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stAcitivityLimitPetItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stAcitivityLimitPetItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:MiscProto.stSendAllAcitivityLimitPet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stAcitivityLimitPetItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSendAllAcitivityLimitPet* default_instance_;
};
// -------------------------------------------------------------------

class stSendLateWalfareActivity : public ::google::protobuf::Message {
 public:
  stSendLateWalfareActivity();
  virtual ~stSendLateWalfareActivity();

  stSendLateWalfareActivity(const stSendLateWalfareActivity& from);

  inline stSendLateWalfareActivity& operator=(const stSendLateWalfareActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendLateWalfareActivity& default_instance();

  void Swap(stSendLateWalfareActivity* other);

  // implements Message ----------------------------------------------

  stSendLateWalfareActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendLateWalfareActivity& from);
  void MergeFrom(const stSendLateWalfareActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendLateWalfareActivity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendLateWalfareActivity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendLateWalfareActivity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendLateWalfareActivity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendLateWalfareActivity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendLateWalfareActivity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendLateWalfareActivity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendLateWalfareActivity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendLateWalfareActivity_ProtoModID_Parse(name, value);
  }

  typedef stSendLateWalfareActivity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendLateWalfareActivity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendLateWalfareActivity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendLateWalfareActivity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendLateWalfareActivity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendLateWalfareActivity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendLateWalfareActivity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendLateWalfareActivity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendLateWalfareActivity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 expireTime = 2;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpireTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint32 value);

  // repeated uint32 rewardId = 3;
  inline int rewardid_size() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 3;
  inline ::google::protobuf::uint32 rewardid(int index) const;
  inline void set_rewardid(int index, ::google::protobuf::uint32 value);
  inline void add_rewardid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardid();

  // @@protoc_insertion_point(class_scope:MiscProto.stSendLateWalfareActivity)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 expiretime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSendLateWalfareActivity* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawLateWalfare : public ::google::protobuf::Message {
 public:
  stReqDrawLateWalfare();
  virtual ~stReqDrawLateWalfare();

  stReqDrawLateWalfare(const stReqDrawLateWalfare& from);

  inline stReqDrawLateWalfare& operator=(const stReqDrawLateWalfare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawLateWalfare& default_instance();

  void Swap(stReqDrawLateWalfare* other);

  // implements Message ----------------------------------------------

  stReqDrawLateWalfare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawLateWalfare& from);
  void MergeFrom(const stReqDrawLateWalfare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawLateWalfare_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawLateWalfare_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawLateWalfare_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawLateWalfare_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawLateWalfare_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawLateWalfare_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawLateWalfare_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawLateWalfare_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawLateWalfare_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawLateWalfare_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawLateWalfare_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawLateWalfare_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawLateWalfare_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawLateWalfare_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawLateWalfare_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawLateWalfare_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawLateWalfare_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawLateWalfare_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 rewardId = 1;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 1;
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDrawLateWalfare)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rewardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawLateWalfare* default_instance_;
};
// -------------------------------------------------------------------

class stRetDrawLateWalfare : public ::google::protobuf::Message {
 public:
  stRetDrawLateWalfare();
  virtual ~stRetDrawLateWalfare();

  stRetDrawLateWalfare(const stRetDrawLateWalfare& from);

  inline stRetDrawLateWalfare& operator=(const stRetDrawLateWalfare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDrawLateWalfare& default_instance();

  void Swap(stRetDrawLateWalfare* other);

  // implements Message ----------------------------------------------

  stRetDrawLateWalfare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDrawLateWalfare& from);
  void MergeFrom(const stRetDrawLateWalfare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDrawLateWalfare_eResult eResult;
  static const eResult eSuccess = stRetDrawLateWalfare_eResult_eSuccess;
  static const eResult eNot_Open = stRetDrawLateWalfare_eResult_eNot_Open;
  static const eResult eAlread_Draw = stRetDrawLateWalfare_eResult_eAlread_Draw;
  static const eResult eActivity_Expire = stRetDrawLateWalfare_eResult_eActivity_Expire;
  static const eResult eNo_Such_Id = stRetDrawLateWalfare_eResult_eNo_Such_Id;
  static const eResult eDiamond_Not_Enough = stRetDrawLateWalfare_eResult_eDiamond_Not_Enough;
  static inline bool eResult_IsValid(int value) {
    return stRetDrawLateWalfare_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetDrawLateWalfare_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetDrawLateWalfare_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetDrawLateWalfare_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetDrawLateWalfare_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetDrawLateWalfare_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetDrawLateWalfare_eResult_Parse(name, value);
  }

  typedef stRetDrawLateWalfare_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDrawLateWalfare_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDrawLateWalfare_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDrawLateWalfare_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDrawLateWalfare_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDrawLateWalfare_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDrawLateWalfare_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDrawLateWalfare_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDrawLateWalfare_ProtoModID_Parse(name, value);
  }

  typedef stRetDrawLateWalfare_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDrawLateWalfare_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDrawLateWalfare_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDrawLateWalfare_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDrawLateWalfare_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDrawLateWalfare_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDrawLateWalfare_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDrawLateWalfare_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDrawLateWalfare_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 rewardId = 1;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 1;
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // optional .MiscProto.stRetDrawLateWalfare.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::MiscProto::stRetDrawLateWalfare_eResult result() const;
  inline void set_result(::MiscProto::stRetDrawLateWalfare_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetDrawLateWalfare)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rewardid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetDrawLateWalfare* default_instance_;
};
// -------------------------------------------------------------------

class stResGetBackItem : public ::google::protobuf::Message {
 public:
  stResGetBackItem();
  virtual ~stResGetBackItem();

  stResGetBackItem(const stResGetBackItem& from);

  inline stResGetBackItem& operator=(const stResGetBackItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResGetBackItem& default_instance();

  void Swap(stResGetBackItem* other);

  // implements Message ----------------------------------------------

  stResGetBackItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResGetBackItem& from);
  void MergeFrom(const stResGetBackItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stResGetBackItem)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stResGetBackItem* default_instance_;
};
// -------------------------------------------------------------------

class stSendAllResGetBack : public ::google::protobuf::Message {
 public:
  stSendAllResGetBack();
  virtual ~stSendAllResGetBack();

  stSendAllResGetBack(const stSendAllResGetBack& from);

  inline stSendAllResGetBack& operator=(const stSendAllResGetBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendAllResGetBack& default_instance();

  void Swap(stSendAllResGetBack* other);

  // implements Message ----------------------------------------------

  stSendAllResGetBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendAllResGetBack& from);
  void MergeFrom(const stSendAllResGetBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendAllResGetBack_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendAllResGetBack_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendAllResGetBack_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendAllResGetBack_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendAllResGetBack_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendAllResGetBack_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendAllResGetBack_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendAllResGetBack_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendAllResGetBack_ProtoModID_Parse(name, value);
  }

  typedef stSendAllResGetBack_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendAllResGetBack_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendAllResGetBack_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendAllResGetBack_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendAllResGetBack_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendAllResGetBack_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendAllResGetBack_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendAllResGetBack_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendAllResGetBack_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stResGetBackItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::MiscProto::stResGetBackItem& item(int index) const;
  inline ::MiscProto::stResGetBackItem* mutable_item(int index);
  inline ::MiscProto::stResGetBackItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stResGetBackItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stResGetBackItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:MiscProto.stSendAllResGetBack)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stResGetBackItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSendAllResGetBack* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawResGetBack : public ::google::protobuf::Message {
 public:
  stReqDrawResGetBack();
  virtual ~stReqDrawResGetBack();

  stReqDrawResGetBack(const stReqDrawResGetBack& from);

  inline stReqDrawResGetBack& operator=(const stReqDrawResGetBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawResGetBack& default_instance();

  void Swap(stReqDrawResGetBack* other);

  // implements Message ----------------------------------------------

  stReqDrawResGetBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawResGetBack& from);
  void MergeFrom(const stReqDrawResGetBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawResGetBack_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawResGetBack_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawResGetBack_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawResGetBack_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawResGetBack_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawResGetBack_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawResGetBack_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawResGetBack_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawResGetBack_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawResGetBack_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawResGetBack_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawResGetBack_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawResGetBack_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawResGetBack_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawResGetBack_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawResGetBack_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawResGetBack_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawResGetBack_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDrawResGetBack)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawResGetBack* default_instance_;
};
// -------------------------------------------------------------------

class stRetDrawResGetBack : public ::google::protobuf::Message {
 public:
  stRetDrawResGetBack();
  virtual ~stRetDrawResGetBack();

  stRetDrawResGetBack(const stRetDrawResGetBack& from);

  inline stRetDrawResGetBack& operator=(const stRetDrawResGetBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDrawResGetBack& default_instance();

  void Swap(stRetDrawResGetBack* other);

  // implements Message ----------------------------------------------

  stRetDrawResGetBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDrawResGetBack& from);
  void MergeFrom(const stRetDrawResGetBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDrawResGetBack_eResult eResult;
  static const eResult eSuccess = stRetDrawResGetBack_eResult_eSuccess;
  static const eResult eAlread_Draw = stRetDrawResGetBack_eResult_eAlread_Draw;
  static const eResult eNo_Such_Type = stRetDrawResGetBack_eResult_eNo_Such_Type;
  static const eResult eDiamond_Not_Enough = stRetDrawResGetBack_eResult_eDiamond_Not_Enough;
  static const eResult eTimes_Not_Enough = stRetDrawResGetBack_eResult_eTimes_Not_Enough;
  static inline bool eResult_IsValid(int value) {
    return stRetDrawResGetBack_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetDrawResGetBack_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetDrawResGetBack_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetDrawResGetBack_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetDrawResGetBack_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetDrawResGetBack_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetDrawResGetBack_eResult_Parse(name, value);
  }

  typedef stRetDrawResGetBack_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDrawResGetBack_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDrawResGetBack_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDrawResGetBack_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDrawResGetBack_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDrawResGetBack_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDrawResGetBack_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDrawResGetBack_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDrawResGetBack_ProtoModID_Parse(name, value);
  }

  typedef stRetDrawResGetBack_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDrawResGetBack_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDrawResGetBack_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDrawResGetBack_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDrawResGetBack_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDrawResGetBack_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDrawResGetBack_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDrawResGetBack_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDrawResGetBack_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional .MiscProto.stRetDrawResGetBack.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::MiscProto::stRetDrawResGetBack_eResult result() const;
  inline void set_result(::MiscProto::stRetDrawResGetBack_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetDrawResGetBack)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 num_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetDrawResGetBack* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawAllResGetBack : public ::google::protobuf::Message {
 public:
  stReqDrawAllResGetBack();
  virtual ~stReqDrawAllResGetBack();

  stReqDrawAllResGetBack(const stReqDrawAllResGetBack& from);

  inline stReqDrawAllResGetBack& operator=(const stReqDrawAllResGetBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawAllResGetBack& default_instance();

  void Swap(stReqDrawAllResGetBack* other);

  // implements Message ----------------------------------------------

  stReqDrawAllResGetBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawAllResGetBack& from);
  void MergeFrom(const stReqDrawAllResGetBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawAllResGetBack_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawAllResGetBack_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawAllResGetBack_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawAllResGetBack_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawAllResGetBack_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawAllResGetBack_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawAllResGetBack_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawAllResGetBack_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawAllResGetBack_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawAllResGetBack_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawAllResGetBack_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawAllResGetBack_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawAllResGetBack_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawAllResGetBack_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawAllResGetBack_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawAllResGetBack_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawAllResGetBack_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawAllResGetBack_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqDrawAllResGetBack)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawAllResGetBack* default_instance_;
};
// -------------------------------------------------------------------

class stRetDrawAllResGetBack : public ::google::protobuf::Message {
 public:
  stRetDrawAllResGetBack();
  virtual ~stRetDrawAllResGetBack();

  stRetDrawAllResGetBack(const stRetDrawAllResGetBack& from);

  inline stRetDrawAllResGetBack& operator=(const stRetDrawAllResGetBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDrawAllResGetBack& default_instance();

  void Swap(stRetDrawAllResGetBack* other);

  // implements Message ----------------------------------------------

  stRetDrawAllResGetBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDrawAllResGetBack& from);
  void MergeFrom(const stRetDrawAllResGetBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDrawAllResGetBack_eResult eResult;
  static const eResult eSuccess = stRetDrawAllResGetBack_eResult_eSuccess;
  static const eResult eNo_Res_Back = stRetDrawAllResGetBack_eResult_eNo_Res_Back;
  static const eResult eDiamond_Not_Enough = stRetDrawAllResGetBack_eResult_eDiamond_Not_Enough;
  static inline bool eResult_IsValid(int value) {
    return stRetDrawAllResGetBack_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetDrawAllResGetBack_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetDrawAllResGetBack_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetDrawAllResGetBack_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetDrawAllResGetBack_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetDrawAllResGetBack_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetDrawAllResGetBack_eResult_Parse(name, value);
  }

  typedef stRetDrawAllResGetBack_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDrawAllResGetBack_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDrawAllResGetBack_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDrawAllResGetBack_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDrawAllResGetBack_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDrawAllResGetBack_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDrawAllResGetBack_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDrawAllResGetBack_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDrawAllResGetBack_ProtoModID_Parse(name, value);
  }

  typedef stRetDrawAllResGetBack_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDrawAllResGetBack_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDrawAllResGetBack_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDrawAllResGetBack_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDrawAllResGetBack_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDrawAllResGetBack_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDrawAllResGetBack_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDrawAllResGetBack_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDrawAllResGetBack_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stRetDrawAllResGetBack.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stRetDrawAllResGetBack_eResult result() const;
  inline void set_result(::MiscProto::stRetDrawAllResGetBack_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetDrawAllResGetBack)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetDrawAllResGetBack* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenMonsterWindow : public ::google::protobuf::Message {
 public:
  stReqOpenMonsterWindow();
  virtual ~stReqOpenMonsterWindow();

  stReqOpenMonsterWindow(const stReqOpenMonsterWindow& from);

  inline stReqOpenMonsterWindow& operator=(const stReqOpenMonsterWindow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenMonsterWindow& default_instance();

  void Swap(stReqOpenMonsterWindow* other);

  // implements Message ----------------------------------------------

  stReqOpenMonsterWindow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenMonsterWindow& from);
  void MergeFrom(const stReqOpenMonsterWindow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenMonsterWindow_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenMonsterWindow_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenMonsterWindow_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenMonsterWindow_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenMonsterWindow_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenMonsterWindow_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenMonsterWindow_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenMonsterWindow_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenMonsterWindow_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenMonsterWindow_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenMonsterWindow_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenMonsterWindow_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenMonsterWindow_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenMonsterWindow_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenMonsterWindow_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenMonsterWindow_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenMonsterWindow_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenMonsterWindow_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqOpenMonsterWindow)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenMonsterWindow* default_instance_;
};
// -------------------------------------------------------------------

class stOpenMonsterWindowResult : public ::google::protobuf::Message {
 public:
  stOpenMonsterWindowResult();
  virtual ~stOpenMonsterWindowResult();

  stOpenMonsterWindowResult(const stOpenMonsterWindowResult& from);

  inline stOpenMonsterWindowResult& operator=(const stOpenMonsterWindowResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOpenMonsterWindowResult& default_instance();

  void Swap(stOpenMonsterWindowResult* other);

  // implements Message ----------------------------------------------

  stOpenMonsterWindowResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOpenMonsterWindowResult& from);
  void MergeFrom(const stOpenMonsterWindowResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOpenMonsterWindowResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOpenMonsterWindowResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOpenMonsterWindowResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOpenMonsterWindowResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOpenMonsterWindowResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOpenMonsterWindowResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOpenMonsterWindowResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOpenMonsterWindowResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOpenMonsterWindowResult_ProtoModID_Parse(name, value);
  }

  typedef stOpenMonsterWindowResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOpenMonsterWindowResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOpenMonsterWindowResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOpenMonsterWindowResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOpenMonsterWindowResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOpenMonsterWindowResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOpenMonsterWindowResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOpenMonsterWindowResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOpenMonsterWindowResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bossLv = 1;
  inline bool has_bosslv() const;
  inline void clear_bosslv();
  static const int kBossLvFieldNumber = 1;
  inline ::google::protobuf::uint32 bosslv() const;
  inline void set_bosslv(::google::protobuf::uint32 value);

  // optional uint32 bossHp = 2;
  inline bool has_bosshp() const;
  inline void clear_bosshp();
  static const int kBossHpFieldNumber = 2;
  inline ::google::protobuf::uint32 bosshp() const;
  inline void set_bosshp(::google::protobuf::uint32 value);

  // optional uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 attackTime = 4;
  inline bool has_attacktime() const;
  inline void clear_attacktime();
  static const int kAttackTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 attacktime() const;
  inline void set_attacktime(::google::protobuf::uint32 value);

  // optional uint32 buyTime = 5;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 buytime() const;
  inline void set_buytime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stOpenMonsterWindowResult)
 private:
  inline void set_has_bosslv();
  inline void clear_has_bosslv();
  inline void set_has_bosshp();
  inline void clear_has_bosshp();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_attacktime();
  inline void clear_has_attacktime();
  inline void set_has_buytime();
  inline void clear_has_buytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 bosslv_;
  ::google::protobuf::uint32 bosshp_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 attacktime_;
  ::google::protobuf::uint32 buytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stOpenMonsterWindowResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqAttackMonster : public ::google::protobuf::Message {
 public:
  stReqAttackMonster();
  virtual ~stReqAttackMonster();

  stReqAttackMonster(const stReqAttackMonster& from);

  inline stReqAttackMonster& operator=(const stReqAttackMonster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAttackMonster& default_instance();

  void Swap(stReqAttackMonster* other);

  // implements Message ----------------------------------------------

  stReqAttackMonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAttackMonster& from);
  void MergeFrom(const stReqAttackMonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAttackMonster_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAttackMonster_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAttackMonster_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAttackMonster_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAttackMonster_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAttackMonster_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAttackMonster_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAttackMonster_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAttackMonster_ProtoModID_Parse(name, value);
  }

  typedef stReqAttackMonster_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAttackMonster_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAttackMonster_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAttackMonster_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAttackMonster_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAttackMonster_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAttackMonster_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAttackMonster_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAttackMonster_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqAttackMonster)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqAttackMonster* default_instance_;
};
// -------------------------------------------------------------------

class stAttackMonsterResult : public ::google::protobuf::Message {
 public:
  stAttackMonsterResult();
  virtual ~stAttackMonsterResult();

  stAttackMonsterResult(const stAttackMonsterResult& from);

  inline stAttackMonsterResult& operator=(const stAttackMonsterResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAttackMonsterResult& default_instance();

  void Swap(stAttackMonsterResult* other);

  // implements Message ----------------------------------------------

  stAttackMonsterResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAttackMonsterResult& from);
  void MergeFrom(const stAttackMonsterResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAttackMonsterResult_eResult eResult;
  static const eResult eSuccess = stAttackMonsterResult_eResult_eSuccess;
  static const eResult eInner_Error = stAttackMonsterResult_eResult_eInner_Error;
  static const eResult eTime_Out = stAttackMonsterResult_eResult_eTime_Out;
  static inline bool eResult_IsValid(int value) {
    return stAttackMonsterResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stAttackMonsterResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stAttackMonsterResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stAttackMonsterResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stAttackMonsterResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stAttackMonsterResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stAttackMonsterResult_eResult_Parse(name, value);
  }

  typedef stAttackMonsterResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAttackMonsterResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAttackMonsterResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAttackMonsterResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAttackMonsterResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAttackMonsterResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAttackMonsterResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAttackMonsterResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAttackMonsterResult_ProtoModID_Parse(name, value);
  }

  typedef stAttackMonsterResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAttackMonsterResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAttackMonsterResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAttackMonsterResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAttackMonsterResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAttackMonsterResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAttackMonsterResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAttackMonsterResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAttackMonsterResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stAttackMonsterResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stAttackMonsterResult_eResult result() const;
  inline void set_result(::MiscProto::stAttackMonsterResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stAttackMonsterResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stAttackMonsterResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqBuyAttackTime : public ::google::protobuf::Message {
 public:
  stReqBuyAttackTime();
  virtual ~stReqBuyAttackTime();

  stReqBuyAttackTime(const stReqBuyAttackTime& from);

  inline stReqBuyAttackTime& operator=(const stReqBuyAttackTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBuyAttackTime& default_instance();

  void Swap(stReqBuyAttackTime* other);

  // implements Message ----------------------------------------------

  stReqBuyAttackTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBuyAttackTime& from);
  void MergeFrom(const stReqBuyAttackTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBuyAttackTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBuyAttackTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBuyAttackTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBuyAttackTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBuyAttackTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBuyAttackTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBuyAttackTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBuyAttackTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBuyAttackTime_ProtoModID_Parse(name, value);
  }

  typedef stReqBuyAttackTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBuyAttackTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBuyAttackTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBuyAttackTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBuyAttackTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBuyAttackTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBuyAttackTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBuyAttackTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBuyAttackTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqBuyAttackTime)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqBuyAttackTime* default_instance_;
};
// -------------------------------------------------------------------

class stBuyAttackTimeResult : public ::google::protobuf::Message {
 public:
  stBuyAttackTimeResult();
  virtual ~stBuyAttackTimeResult();

  stBuyAttackTimeResult(const stBuyAttackTimeResult& from);

  inline stBuyAttackTimeResult& operator=(const stBuyAttackTimeResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuyAttackTimeResult& default_instance();

  void Swap(stBuyAttackTimeResult* other);

  // implements Message ----------------------------------------------

  stBuyAttackTimeResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuyAttackTimeResult& from);
  void MergeFrom(const stBuyAttackTimeResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuyAttackTimeResult_eResult eResult;
  static const eResult eSuccess = stBuyAttackTimeResult_eResult_eSuccess;
  static const eResult eInner_Error = stBuyAttackTimeResult_eResult_eInner_Error;
  static const eResult eDiamond_Not_Enough = stBuyAttackTimeResult_eResult_eDiamond_Not_Enough;
  static const eResult eMax_Count = stBuyAttackTimeResult_eResult_eMax_Count;
  static const eResult eItem_Not_Enough = stBuyAttackTimeResult_eResult_eItem_Not_Enough;
  static inline bool eResult_IsValid(int value) {
    return stBuyAttackTimeResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stBuyAttackTimeResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stBuyAttackTimeResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stBuyAttackTimeResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stBuyAttackTimeResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stBuyAttackTimeResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stBuyAttackTimeResult_eResult_Parse(name, value);
  }

  typedef stBuyAttackTimeResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuyAttackTimeResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuyAttackTimeResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuyAttackTimeResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuyAttackTimeResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuyAttackTimeResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuyAttackTimeResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuyAttackTimeResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuyAttackTimeResult_ProtoModID_Parse(name, value);
  }

  typedef stBuyAttackTimeResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuyAttackTimeResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuyAttackTimeResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuyAttackTimeResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuyAttackTimeResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuyAttackTimeResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuyAttackTimeResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuyAttackTimeResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuyAttackTimeResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stBuyAttackTimeResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stBuyAttackTimeResult_eResult result() const;
  inline void set_result(::MiscProto::stBuyAttackTimeResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stBuyAttackTimeResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stBuyAttackTimeResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqAKeyAttackMonster : public ::google::protobuf::Message {
 public:
  stReqAKeyAttackMonster();
  virtual ~stReqAKeyAttackMonster();

  stReqAKeyAttackMonster(const stReqAKeyAttackMonster& from);

  inline stReqAKeyAttackMonster& operator=(const stReqAKeyAttackMonster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAKeyAttackMonster& default_instance();

  void Swap(stReqAKeyAttackMonster* other);

  // implements Message ----------------------------------------------

  stReqAKeyAttackMonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAKeyAttackMonster& from);
  void MergeFrom(const stReqAKeyAttackMonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAKeyAttackMonster_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAKeyAttackMonster_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAKeyAttackMonster_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAKeyAttackMonster_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAKeyAttackMonster_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAKeyAttackMonster_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAKeyAttackMonster_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAKeyAttackMonster_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAKeyAttackMonster_ProtoModID_Parse(name, value);
  }

  typedef stReqAKeyAttackMonster_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAKeyAttackMonster_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAKeyAttackMonster_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAKeyAttackMonster_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAKeyAttackMonster_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAKeyAttackMonster_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAKeyAttackMonster_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAKeyAttackMonster_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAKeyAttackMonster_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqAKeyAttackMonster)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqAKeyAttackMonster* default_instance_;
};
// -------------------------------------------------------------------

class stAKeyAttackMonsterResult : public ::google::protobuf::Message {
 public:
  stAKeyAttackMonsterResult();
  virtual ~stAKeyAttackMonsterResult();

  stAKeyAttackMonsterResult(const stAKeyAttackMonsterResult& from);

  inline stAKeyAttackMonsterResult& operator=(const stAKeyAttackMonsterResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAKeyAttackMonsterResult& default_instance();

  void Swap(stAKeyAttackMonsterResult* other);

  // implements Message ----------------------------------------------

  stAKeyAttackMonsterResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAKeyAttackMonsterResult& from);
  void MergeFrom(const stAKeyAttackMonsterResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAKeyAttackMonsterResult_eResult eResult;
  static const eResult eSuccess = stAKeyAttackMonsterResult_eResult_eSuccess;
  static const eResult eInner_Error = stAKeyAttackMonsterResult_eResult_eInner_Error;
  static const eResult eTime_Out = stAKeyAttackMonsterResult_eResult_eTime_Out;
  static const eResult eVip_Lv_Too_Low = stAKeyAttackMonsterResult_eResult_eVip_Lv_Too_Low;
  static inline bool eResult_IsValid(int value) {
    return stAKeyAttackMonsterResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stAKeyAttackMonsterResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stAKeyAttackMonsterResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stAKeyAttackMonsterResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stAKeyAttackMonsterResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stAKeyAttackMonsterResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stAKeyAttackMonsterResult_eResult_Parse(name, value);
  }

  typedef stAKeyAttackMonsterResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAKeyAttackMonsterResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAKeyAttackMonsterResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAKeyAttackMonsterResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAKeyAttackMonsterResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAKeyAttackMonsterResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAKeyAttackMonsterResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAKeyAttackMonsterResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAKeyAttackMonsterResult_ProtoModID_Parse(name, value);
  }

  typedef stAKeyAttackMonsterResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAKeyAttackMonsterResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAKeyAttackMonsterResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAKeyAttackMonsterResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAKeyAttackMonsterResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAKeyAttackMonsterResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAKeyAttackMonsterResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAKeyAttackMonsterResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAKeyAttackMonsterResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stAKeyAttackMonsterResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stAKeyAttackMonsterResult_eResult result() const;
  inline void set_result(::MiscProto::stAKeyAttackMonsterResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stAKeyAttackMonsterResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stAKeyAttackMonsterResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynTipItem : public ::google::protobuf::Message {
 public:
  stSynTipItem();
  virtual ~stSynTipItem();

  stSynTipItem(const stSynTipItem& from);

  inline stSynTipItem& operator=(const stSynTipItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynTipItem& default_instance();

  void Swap(stSynTipItem* other);

  // implements Message ----------------------------------------------

  stSynTipItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynTipItem& from);
  void MergeFrom(const stSynTipItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSynTipItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSynTipItem* default_instance_;
};
// -------------------------------------------------------------------

class stObtainItemTip : public ::google::protobuf::Message {
 public:
  stObtainItemTip();
  virtual ~stObtainItemTip();

  stObtainItemTip(const stObtainItemTip& from);

  inline stObtainItemTip& operator=(const stObtainItemTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stObtainItemTip& default_instance();

  void Swap(stObtainItemTip* other);

  // implements Message ----------------------------------------------

  stObtainItemTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stObtainItemTip& from);
  void MergeFrom(const stObtainItemTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stObtainItemTip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stObtainItemTip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stObtainItemTip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stObtainItemTip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stObtainItemTip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stObtainItemTip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stObtainItemTip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stObtainItemTip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stObtainItemTip_ProtoModID_Parse(name, value);
  }

  typedef stObtainItemTip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stObtainItemTip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stObtainItemTip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stObtainItemTip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stObtainItemTip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stObtainItemTip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stObtainItemTip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stObtainItemTip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stObtainItemTip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stSynTipItem getItems = 1;
  inline int getitems_size() const;
  inline void clear_getitems();
  static const int kGetItemsFieldNumber = 1;
  inline const ::MiscProto::stSynTipItem& getitems(int index) const;
  inline ::MiscProto::stSynTipItem* mutable_getitems(int index);
  inline ::MiscProto::stSynTipItem* add_getitems();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynTipItem >&
      getitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynTipItem >*
      mutable_getitems();

  // @@protoc_insertion_point(class_scope:MiscProto.stObtainItemTip)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynTipItem > getitems_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stObtainItemTip* default_instance_;
};
// -------------------------------------------------------------------

class stUserOnline : public ::google::protobuf::Message {
 public:
  stUserOnline();
  virtual ~stUserOnline();

  stUserOnline(const stUserOnline& from);

  inline stUserOnline& operator=(const stUserOnline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserOnline& default_instance();

  void Swap(stUserOnline* other);

  // implements Message ----------------------------------------------

  stUserOnline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserOnline& from);
  void MergeFrom(const stUserOnline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserOnline_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserOnline_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserOnline_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserOnline_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserOnline_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserOnline_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserOnline_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserOnline_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserOnline_ProtoModID_Parse(name, value);
  }

  typedef stUserOnline_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserOnline_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserOnline_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserOnline_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserOnline_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserOnline_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserOnline_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserOnline_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserOnline_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 mountList = 1;
  inline int mountlist_size() const;
  inline void clear_mountlist();
  static const int kMountListFieldNumber = 1;
  inline ::google::protobuf::uint32 mountlist(int index) const;
  inline void set_mountlist(int index, ::google::protobuf::uint32 value);
  inline void add_mountlist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mountlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mountlist();

  // optional uint32 battleMountID = 2;
  inline bool has_battlemountid() const;
  inline void clear_battlemountid();
  static const int kBattleMountIDFieldNumber = 2;
  inline ::google::protobuf::uint32 battlemountid() const;
  inline void set_battlemountid(::google::protobuf::uint32 value);

  // optional bool isFollow = 3;
  inline bool has_isfollow() const;
  inline void clear_isfollow();
  static const int kIsFollowFieldNumber = 3;
  inline bool isfollow() const;
  inline void set_isfollow(bool value);

  // optional uint32 mountLv = 4;
  inline bool has_mountlv() const;
  inline void clear_mountlv();
  static const int kMountLvFieldNumber = 4;
  inline ::google::protobuf::uint32 mountlv() const;
  inline void set_mountlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stUserOnline)
 private:
  inline void set_has_battlemountid();
  inline void clear_has_battlemountid();
  inline void set_has_isfollow();
  inline void clear_has_isfollow();
  inline void set_has_mountlv();
  inline void clear_has_mountlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mountlist_;
  ::google::protobuf::uint32 battlemountid_;
  bool isfollow_;
  ::google::protobuf::uint32 mountlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stUserOnline* default_instance_;
};
// -------------------------------------------------------------------

class stConsumeItemInfo : public ::google::protobuf::Message {
 public:
  stConsumeItemInfo();
  virtual ~stConsumeItemInfo();

  stConsumeItemInfo(const stConsumeItemInfo& from);

  inline stConsumeItemInfo& operator=(const stConsumeItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stConsumeItemInfo& default_instance();

  void Swap(stConsumeItemInfo* other);

  // implements Message ----------------------------------------------

  stConsumeItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stConsumeItemInfo& from);
  void MergeFrom(const stConsumeItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stConsumeItemInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stConsumeItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqMountLevelUp : public ::google::protobuf::Message {
 public:
  stReqMountLevelUp();
  virtual ~stReqMountLevelUp();

  stReqMountLevelUp(const stReqMountLevelUp& from);

  inline stReqMountLevelUp& operator=(const stReqMountLevelUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqMountLevelUp& default_instance();

  void Swap(stReqMountLevelUp* other);

  // implements Message ----------------------------------------------

  stReqMountLevelUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqMountLevelUp& from);
  void MergeFrom(const stReqMountLevelUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqMountLevelUp_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqMountLevelUp_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqMountLevelUp_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqMountLevelUp_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqMountLevelUp_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqMountLevelUp_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqMountLevelUp_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqMountLevelUp_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqMountLevelUp_ProtoModID_Parse(name, value);
  }

  typedef stReqMountLevelUp_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqMountLevelUp_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqMountLevelUp_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqMountLevelUp_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqMountLevelUp_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqMountLevelUp_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqMountLevelUp_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqMountLevelUp_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqMountLevelUp_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.eLevelUpType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::MiscProto::eLevelUpType type() const;
  inline void set_type(::MiscProto::eLevelUpType value);

  // optional .MiscProto.stConsumeItemInfo itemInfo = 2;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 2;
  inline const ::MiscProto::stConsumeItemInfo& iteminfo() const;
  inline ::MiscProto::stConsumeItemInfo* mutable_iteminfo();
  inline ::MiscProto::stConsumeItemInfo* release_iteminfo();
  inline void set_allocated_iteminfo(::MiscProto::stConsumeItemInfo* iteminfo);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqMountLevelUp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MiscProto::stConsumeItemInfo* iteminfo_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqMountLevelUp* default_instance_;
};
// -------------------------------------------------------------------

class stMountLevelUpResult : public ::google::protobuf::Message {
 public:
  stMountLevelUpResult();
  virtual ~stMountLevelUpResult();

  stMountLevelUpResult(const stMountLevelUpResult& from);

  inline stMountLevelUpResult& operator=(const stMountLevelUpResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMountLevelUpResult& default_instance();

  void Swap(stMountLevelUpResult* other);

  // implements Message ----------------------------------------------

  stMountLevelUpResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMountLevelUpResult& from);
  void MergeFrom(const stMountLevelUpResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMountLevelUpResult_eResult eResult;
  static const eResult eSuccess = stMountLevelUpResult_eResult_eSuccess;
  static const eResult eInner_Error = stMountLevelUpResult_eResult_eInner_Error;
  static const eResult eMax_Level = stMountLevelUpResult_eResult_eMax_Level;
  static const eResult eRes_Not_Enough = stMountLevelUpResult_eResult_eRes_Not_Enough;
  static const eResult eStar_max = stMountLevelUpResult_eResult_eStar_max;
  static inline bool eResult_IsValid(int value) {
    return stMountLevelUpResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stMountLevelUpResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stMountLevelUpResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stMountLevelUpResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stMountLevelUpResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stMountLevelUpResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stMountLevelUpResult_eResult_Parse(name, value);
  }

  typedef stMountLevelUpResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMountLevelUpResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMountLevelUpResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMountLevelUpResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMountLevelUpResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMountLevelUpResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMountLevelUpResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMountLevelUpResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMountLevelUpResult_ProtoModID_Parse(name, value);
  }

  typedef stMountLevelUpResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMountLevelUpResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMountLevelUpResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMountLevelUpResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMountLevelUpResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMountLevelUpResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMountLevelUpResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMountLevelUpResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMountLevelUpResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stMountLevelUpResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stMountLevelUpResult_eResult result() const;
  inline void set_result(::MiscProto::stMountLevelUpResult_eResult value);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stMountLevelUpResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stMountLevelUpResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqButtleMount : public ::google::protobuf::Message {
 public:
  stReqButtleMount();
  virtual ~stReqButtleMount();

  stReqButtleMount(const stReqButtleMount& from);

  inline stReqButtleMount& operator=(const stReqButtleMount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqButtleMount& default_instance();

  void Swap(stReqButtleMount* other);

  // implements Message ----------------------------------------------

  stReqButtleMount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqButtleMount& from);
  void MergeFrom(const stReqButtleMount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqButtleMount_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqButtleMount_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqButtleMount_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqButtleMount_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqButtleMount_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqButtleMount_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqButtleMount_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqButtleMount_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqButtleMount_ProtoModID_Parse(name, value);
  }

  typedef stReqButtleMount_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqButtleMount_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqButtleMount_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqButtleMount_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqButtleMount_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqButtleMount_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqButtleMount_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqButtleMount_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqButtleMount_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqButtleMount)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqButtleMount* default_instance_;
};
// -------------------------------------------------------------------

class stButtleMountResult : public ::google::protobuf::Message {
 public:
  stButtleMountResult();
  virtual ~stButtleMountResult();

  stButtleMountResult(const stButtleMountResult& from);

  inline stButtleMountResult& operator=(const stButtleMountResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stButtleMountResult& default_instance();

  void Swap(stButtleMountResult* other);

  // implements Message ----------------------------------------------

  stButtleMountResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stButtleMountResult& from);
  void MergeFrom(const stButtleMountResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stButtleMountResult_eResult eResult;
  static const eResult eSuccess = stButtleMountResult_eResult_eSuccess;
  static const eResult eInner_Error = stButtleMountResult_eResult_eInner_Error;
  static const eResult eIs_Not_Unlock = stButtleMountResult_eResult_eIs_Not_Unlock;
  static const eResult eHas_Battle = stButtleMountResult_eResult_eHas_Battle;
  static inline bool eResult_IsValid(int value) {
    return stButtleMountResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stButtleMountResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stButtleMountResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stButtleMountResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stButtleMountResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stButtleMountResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stButtleMountResult_eResult_Parse(name, value);
  }

  typedef stButtleMountResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stButtleMountResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stButtleMountResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stButtleMountResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stButtleMountResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stButtleMountResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stButtleMountResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stButtleMountResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stButtleMountResult_ProtoModID_Parse(name, value);
  }

  typedef stButtleMountResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stButtleMountResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stButtleMountResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stButtleMountResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stButtleMountResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stButtleMountResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stButtleMountResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stButtleMountResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stButtleMountResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stButtleMountResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stButtleMountResult_eResult result() const;
  inline void set_result(::MiscProto::stButtleMountResult_eResult value);

  // optional uint32 mountId = 2;
  inline bool has_mountid() const;
  inline void clear_mountid();
  static const int kMountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mountid() const;
  inline void set_mountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stButtleMountResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_mountid();
  inline void clear_has_mountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 mountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stButtleMountResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqMountFollow : public ::google::protobuf::Message {
 public:
  stReqMountFollow();
  virtual ~stReqMountFollow();

  stReqMountFollow(const stReqMountFollow& from);

  inline stReqMountFollow& operator=(const stReqMountFollow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqMountFollow& default_instance();

  void Swap(stReqMountFollow* other);

  // implements Message ----------------------------------------------

  stReqMountFollow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqMountFollow& from);
  void MergeFrom(const stReqMountFollow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqMountFollow_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqMountFollow_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqMountFollow_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqMountFollow_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqMountFollow_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqMountFollow_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqMountFollow_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqMountFollow_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqMountFollow_ProtoModID_Parse(name, value);
  }

  typedef stReqMountFollow_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqMountFollow_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqMountFollow_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqMountFollow_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqMountFollow_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqMountFollow_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqMountFollow_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqMountFollow_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqMountFollow_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqMountFollow)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqMountFollow* default_instance_;
};
// -------------------------------------------------------------------

class stMountFollowResult : public ::google::protobuf::Message {
 public:
  stMountFollowResult();
  virtual ~stMountFollowResult();

  stMountFollowResult(const stMountFollowResult& from);

  inline stMountFollowResult& operator=(const stMountFollowResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMountFollowResult& default_instance();

  void Swap(stMountFollowResult* other);

  // implements Message ----------------------------------------------

  stMountFollowResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMountFollowResult& from);
  void MergeFrom(const stMountFollowResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMountFollowResult_eResult eResult;
  static const eResult eSuccess = stMountFollowResult_eResult_eSuccess;
  static const eResult eInner_Error = stMountFollowResult_eResult_eInner_Error;
  static const eResult eIs_Not_Battle = stMountFollowResult_eResult_eIs_Not_Battle;
  static inline bool eResult_IsValid(int value) {
    return stMountFollowResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stMountFollowResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stMountFollowResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stMountFollowResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stMountFollowResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stMountFollowResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stMountFollowResult_eResult_Parse(name, value);
  }

  typedef stMountFollowResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMountFollowResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMountFollowResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMountFollowResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMountFollowResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMountFollowResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMountFollowResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMountFollowResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMountFollowResult_ProtoModID_Parse(name, value);
  }

  typedef stMountFollowResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMountFollowResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMountFollowResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMountFollowResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMountFollowResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMountFollowResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMountFollowResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMountFollowResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMountFollowResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stMountFollowResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stMountFollowResult_eResult result() const;
  inline void set_result(::MiscProto::stMountFollowResult_eResult value);

  // optional bool isFollow = 2;
  inline bool has_isfollow() const;
  inline void clear_isfollow();
  static const int kIsFollowFieldNumber = 2;
  inline bool isfollow() const;
  inline void set_isfollow(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stMountFollowResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_isfollow();
  inline void clear_has_isfollow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  bool isfollow_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stMountFollowResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqMountUnreal : public ::google::protobuf::Message {
 public:
  stReqMountUnreal();
  virtual ~stReqMountUnreal();

  stReqMountUnreal(const stReqMountUnreal& from);

  inline stReqMountUnreal& operator=(const stReqMountUnreal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqMountUnreal& default_instance();

  void Swap(stReqMountUnreal* other);

  // implements Message ----------------------------------------------

  stReqMountUnreal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqMountUnreal& from);
  void MergeFrom(const stReqMountUnreal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqMountUnreal_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqMountUnreal_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqMountUnreal_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqMountUnreal_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqMountUnreal_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqMountUnreal_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqMountUnreal_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqMountUnreal_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqMountUnreal_ProtoModID_Parse(name, value);
  }

  typedef stReqMountUnreal_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqMountUnreal_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqMountUnreal_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqMountUnreal_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqMountUnreal_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqMountUnreal_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqMountUnreal_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqMountUnreal_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqMountUnreal_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 mountId = 1;
  inline bool has_mountid() const;
  inline void clear_mountid();
  static const int kMountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mountid() const;
  inline void set_mountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqMountUnreal)
 private:
  inline void set_has_mountid();
  inline void clear_has_mountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqMountUnreal* default_instance_;
};
// -------------------------------------------------------------------

class stMountUnrealResult : public ::google::protobuf::Message {
 public:
  stMountUnrealResult();
  virtual ~stMountUnrealResult();

  stMountUnrealResult(const stMountUnrealResult& from);

  inline stMountUnrealResult& operator=(const stMountUnrealResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMountUnrealResult& default_instance();

  void Swap(stMountUnrealResult* other);

  // implements Message ----------------------------------------------

  stMountUnrealResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMountUnrealResult& from);
  void MergeFrom(const stMountUnrealResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMountUnrealResult_eResult eResult;
  static const eResult eSuccess = stMountUnrealResult_eResult_eSuccess;
  static const eResult eInner_Error = stMountUnrealResult_eResult_eInner_Error;
  static const eResult eCond_Not_Meet = stMountUnrealResult_eResult_eCond_Not_Meet;
  static const eResult eRes_Not_Enough = stMountUnrealResult_eResult_eRes_Not_Enough;
  static const eResult eMax_Unreal = stMountUnrealResult_eResult_eMax_Unreal;
  static inline bool eResult_IsValid(int value) {
    return stMountUnrealResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stMountUnrealResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stMountUnrealResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stMountUnrealResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stMountUnrealResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stMountUnrealResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stMountUnrealResult_eResult_Parse(name, value);
  }

  typedef stMountUnrealResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMountUnrealResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMountUnrealResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMountUnrealResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMountUnrealResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMountUnrealResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMountUnrealResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMountUnrealResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMountUnrealResult_ProtoModID_Parse(name, value);
  }

  typedef stMountUnrealResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMountUnrealResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMountUnrealResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMountUnrealResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMountUnrealResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMountUnrealResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMountUnrealResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMountUnrealResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMountUnrealResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stMountUnrealResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stMountUnrealResult_eResult result() const;
  inline void set_result(::MiscProto::stMountUnrealResult_eResult value);

  // optional uint32 mountId = 2;
  inline bool has_mountid() const;
  inline void clear_mountid();
  static const int kMountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mountid() const;
  inline void set_mountid(::google::protobuf::uint32 value);

  // optional uint32 oldMountId = 3;
  inline bool has_oldmountid() const;
  inline void clear_oldmountid();
  static const int kOldMountIdFieldNumber = 3;
  inline ::google::protobuf::uint32 oldmountid() const;
  inline void set_oldmountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stMountUnrealResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_mountid();
  inline void clear_has_mountid();
  inline void set_has_oldmountid();
  inline void clear_has_oldmountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 mountid_;
  ::google::protobuf::uint32 oldmountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stMountUnrealResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenMountGrowWindow : public ::google::protobuf::Message {
 public:
  stReqOpenMountGrowWindow();
  virtual ~stReqOpenMountGrowWindow();

  stReqOpenMountGrowWindow(const stReqOpenMountGrowWindow& from);

  inline stReqOpenMountGrowWindow& operator=(const stReqOpenMountGrowWindow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenMountGrowWindow& default_instance();

  void Swap(stReqOpenMountGrowWindow* other);

  // implements Message ----------------------------------------------

  stReqOpenMountGrowWindow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenMountGrowWindow& from);
  void MergeFrom(const stReqOpenMountGrowWindow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenMountGrowWindow_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenMountGrowWindow_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenMountGrowWindow_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenMountGrowWindow_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenMountGrowWindow_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenMountGrowWindow_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenMountGrowWindow_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenMountGrowWindow_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenMountGrowWindow_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenMountGrowWindow_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenMountGrowWindow_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenMountGrowWindow_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenMountGrowWindow_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenMountGrowWindow_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenMountGrowWindow_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenMountGrowWindow_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenMountGrowWindow_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenMountGrowWindow_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqOpenMountGrowWindow)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenMountGrowWindow* default_instance_;
};
// -------------------------------------------------------------------

class stOpenMountGrowWindowResult : public ::google::protobuf::Message {
 public:
  stOpenMountGrowWindowResult();
  virtual ~stOpenMountGrowWindowResult();

  stOpenMountGrowWindowResult(const stOpenMountGrowWindowResult& from);

  inline stOpenMountGrowWindowResult& operator=(const stOpenMountGrowWindowResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOpenMountGrowWindowResult& default_instance();

  void Swap(stOpenMountGrowWindowResult* other);

  // implements Message ----------------------------------------------

  stOpenMountGrowWindowResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOpenMountGrowWindowResult& from);
  void MergeFrom(const stOpenMountGrowWindowResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOpenMountGrowWindowResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOpenMountGrowWindowResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOpenMountGrowWindowResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOpenMountGrowWindowResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOpenMountGrowWindowResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOpenMountGrowWindowResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOpenMountGrowWindowResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOpenMountGrowWindowResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOpenMountGrowWindowResult_ProtoModID_Parse(name, value);
  }

  typedef stOpenMountGrowWindowResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOpenMountGrowWindowResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOpenMountGrowWindowResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOpenMountGrowWindowResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOpenMountGrowWindowResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOpenMountGrowWindowResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOpenMountGrowWindowResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOpenMountGrowWindowResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOpenMountGrowWindowResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 battle = 3;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 3;
  inline ::google::protobuf::uint32 battle() const;
  inline void set_battle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stOpenMountGrowWindowResult)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_battle();
  inline void clear_has_battle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 battle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stOpenMountGrowWindowResult* default_instance_;
};
// -------------------------------------------------------------------

class stRefreshBattle : public ::google::protobuf::Message {
 public:
  stRefreshBattle();
  virtual ~stRefreshBattle();

  stRefreshBattle(const stRefreshBattle& from);

  inline stRefreshBattle& operator=(const stRefreshBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefreshBattle& default_instance();

  void Swap(stRefreshBattle* other);

  // implements Message ----------------------------------------------

  stRefreshBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefreshBattle& from);
  void MergeFrom(const stRefreshBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefreshBattle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefreshBattle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefreshBattle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefreshBattle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefreshBattle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefreshBattle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefreshBattle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefreshBattle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefreshBattle_ProtoModID_Parse(name, value);
  }

  typedef stRefreshBattle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefreshBattle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefreshBattle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefreshBattle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefreshBattle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefreshBattle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefreshBattle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefreshBattle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefreshBattle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 battle = 1;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 1;
  inline ::google::protobuf::uint32 battle() const;
  inline void set_battle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRefreshBattle)
 private:
  inline void set_has_battle();
  inline void clear_has_battle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 battle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRefreshBattle* default_instance_;
};
// -------------------------------------------------------------------

class stLevelWflfareInfo : public ::google::protobuf::Message {
 public:
  stLevelWflfareInfo();
  virtual ~stLevelWflfareInfo();

  stLevelWflfareInfo(const stLevelWflfareInfo& from);

  inline stLevelWflfareInfo& operator=(const stLevelWflfareInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLevelWflfareInfo& default_instance();

  void Swap(stLevelWflfareInfo* other);

  // implements Message ----------------------------------------------

  stLevelWflfareInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLevelWflfareInfo& from);
  void MergeFrom(const stLevelWflfareInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stLevelWflfareInfo)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stLevelWflfareInfo* default_instance_;
};
// -------------------------------------------------------------------

class stHasGotRewardWflfareInfo : public ::google::protobuf::Message {
 public:
  stHasGotRewardWflfareInfo();
  virtual ~stHasGotRewardWflfareInfo();

  stHasGotRewardWflfareInfo(const stHasGotRewardWflfareInfo& from);

  inline stHasGotRewardWflfareInfo& operator=(const stHasGotRewardWflfareInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHasGotRewardWflfareInfo& default_instance();

  void Swap(stHasGotRewardWflfareInfo* other);

  // implements Message ----------------------------------------------

  stHasGotRewardWflfareInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHasGotRewardWflfareInfo& from);
  void MergeFrom(const stHasGotRewardWflfareInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHasGotRewardWflfareInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHasGotRewardWflfareInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHasGotRewardWflfareInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHasGotRewardWflfareInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHasGotRewardWflfareInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHasGotRewardWflfareInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHasGotRewardWflfareInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHasGotRewardWflfareInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHasGotRewardWflfareInfo_ProtoModID_Parse(name, value);
  }

  typedef stHasGotRewardWflfareInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHasGotRewardWflfareInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHasGotRewardWflfareInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHasGotRewardWflfareInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHasGotRewardWflfareInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHasGotRewardWflfareInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHasGotRewardWflfareInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHasGotRewardWflfareInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHasGotRewardWflfareInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .MiscProto.stLevelWflfareInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::MiscProto::stLevelWflfareInfo& info(int index) const;
  inline ::MiscProto::stLevelWflfareInfo* mutable_info(int index);
  inline ::MiscProto::stLevelWflfareInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stLevelWflfareInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stLevelWflfareInfo >*
      mutable_info();

  // optional bool isOpen = 2;
  inline bool has_isopen() const;
  inline void clear_isopen();
  static const int kIsOpenFieldNumber = 2;
  inline bool isopen() const;
  inline void set_isopen(bool value);

  // @@protoc_insertion_point(class_scope:MiscProto.stHasGotRewardWflfareInfo)
 private:
  inline void set_has_isopen();
  inline void clear_has_isopen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MiscProto::stLevelWflfareInfo > info_;
  bool isopen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stHasGotRewardWflfareInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqReceiveWflfare : public ::google::protobuf::Message {
 public:
  stReqReceiveWflfare();
  virtual ~stReqReceiveWflfare();

  stReqReceiveWflfare(const stReqReceiveWflfare& from);

  inline stReqReceiveWflfare& operator=(const stReqReceiveWflfare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqReceiveWflfare& default_instance();

  void Swap(stReqReceiveWflfare* other);

  // implements Message ----------------------------------------------

  stReqReceiveWflfare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqReceiveWflfare& from);
  void MergeFrom(const stReqReceiveWflfare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqReceiveWflfare_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqReceiveWflfare_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqReceiveWflfare_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqReceiveWflfare_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqReceiveWflfare_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqReceiveWflfare_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqReceiveWflfare_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqReceiveWflfare_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqReceiveWflfare_ProtoModID_Parse(name, value);
  }

  typedef stReqReceiveWflfare_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqReceiveWflfare_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqReceiveWflfare_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqReceiveWflfare_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqReceiveWflfare_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqReceiveWflfare_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqReceiveWflfare_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqReceiveWflfare_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqReceiveWflfare_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqReceiveWflfare)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqReceiveWflfare* default_instance_;
};
// -------------------------------------------------------------------

class stReceiveWflfareResult : public ::google::protobuf::Message {
 public:
  stReceiveWflfareResult();
  virtual ~stReceiveWflfareResult();

  stReceiveWflfareResult(const stReceiveWflfareResult& from);

  inline stReceiveWflfareResult& operator=(const stReceiveWflfareResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReceiveWflfareResult& default_instance();

  void Swap(stReceiveWflfareResult* other);

  // implements Message ----------------------------------------------

  stReceiveWflfareResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReceiveWflfareResult& from);
  void MergeFrom(const stReceiveWflfareResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReceiveWflfareResult_eResult eResult;
  static const eResult eSuccess = stReceiveWflfareResult_eResult_eSuccess;
  static const eResult eInner_Error = stReceiveWflfareResult_eResult_eInner_Error;
  static const eResult eHas_Got_Reward = stReceiveWflfareResult_eResult_eHas_Got_Reward;
  static const eResult eDiamond_Not_Enough = stReceiveWflfareResult_eResult_eDiamond_Not_Enough;
  static const eResult eLevel_Too_Low = stReceiveWflfareResult_eResult_eLevel_Too_Low;
  static inline bool eResult_IsValid(int value) {
    return stReceiveWflfareResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stReceiveWflfareResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stReceiveWflfareResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stReceiveWflfareResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stReceiveWflfareResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stReceiveWflfareResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stReceiveWflfareResult_eResult_Parse(name, value);
  }

  typedef stReceiveWflfareResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReceiveWflfareResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReceiveWflfareResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReceiveWflfareResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReceiveWflfareResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReceiveWflfareResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReceiveWflfareResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReceiveWflfareResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReceiveWflfareResult_ProtoModID_Parse(name, value);
  }

  typedef stReceiveWflfareResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReceiveWflfareResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReceiveWflfareResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReceiveWflfareResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReceiveWflfareResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReceiveWflfareResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReceiveWflfareResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReceiveWflfareResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReceiveWflfareResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stReceiveWflfareResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stReceiveWflfareResult_eResult result() const;
  inline void set_result(::MiscProto::stReceiveWflfareResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReceiveWflfareResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReceiveWflfareResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqPaySign : public ::google::protobuf::Message {
 public:
  stReqPaySign();
  virtual ~stReqPaySign();

  stReqPaySign(const stReqPaySign& from);

  inline stReqPaySign& operator=(const stReqPaySign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqPaySign& default_instance();

  void Swap(stReqPaySign* other);

  // implements Message ----------------------------------------------

  stReqPaySign* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqPaySign& from);
  void MergeFrom(const stReqPaySign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqPaySign_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqPaySign_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqPaySign_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqPaySign_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqPaySign_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqPaySign_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqPaySign_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqPaySign_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqPaySign_ProtoModID_Parse(name, value);
  }

  typedef stReqPaySign_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqPaySign_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqPaySign_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqPaySign_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqPaySign_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqPaySign_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqPaySign_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqPaySign_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqPaySign_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 sdkid = 1;
  inline bool has_sdkid() const;
  inline void clear_sdkid();
  static const int kSdkidFieldNumber = 1;
  inline ::google::protobuf::int32 sdkid() const;
  inline void set_sdkid(::google::protobuf::int32 value);

  // optional string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqPaySign)
 private:
  inline void set_has_sdkid();
  inline void clear_has_sdkid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::google::protobuf::int32 sdkid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqPaySign* default_instance_;
};
// -------------------------------------------------------------------

class stRetPaySign : public ::google::protobuf::Message {
 public:
  stRetPaySign();
  virtual ~stRetPaySign();

  stRetPaySign(const stRetPaySign& from);

  inline stRetPaySign& operator=(const stRetPaySign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetPaySign& default_instance();

  void Swap(stRetPaySign* other);

  // implements Message ----------------------------------------------

  stRetPaySign* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetPaySign& from);
  void MergeFrom(const stRetPaySign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetPaySign_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetPaySign_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetPaySign_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetPaySign_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetPaySign_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetPaySign_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetPaySign_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetPaySign_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetPaySign_ProtoModID_Parse(name, value);
  }

  typedef stRetPaySign_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetPaySign_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetPaySign_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetPaySign_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetPaySign_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetPaySign_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetPaySign_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetPaySign_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetPaySign_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string sign = 1;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 1;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetPaySign)
 private:
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetPaySign* default_instance_;
};
// -------------------------------------------------------------------

class stReqServerPay : public ::google::protobuf::Message {
 public:
  stReqServerPay();
  virtual ~stReqServerPay();

  stReqServerPay(const stReqServerPay& from);

  inline stReqServerPay& operator=(const stReqServerPay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqServerPay& default_instance();

  void Swap(stReqServerPay* other);

  // implements Message ----------------------------------------------

  stReqServerPay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqServerPay& from);
  void MergeFrom(const stReqServerPay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqServerPay_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqServerPay_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqServerPay_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqServerPay_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqServerPay_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqServerPay_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqServerPay_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqServerPay_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqServerPay_ProtoModID_Parse(name, value);
  }

  typedef stReqServerPay_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqServerPay_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqServerPay_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqServerPay_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqServerPay_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqServerPay_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqServerPay_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqServerPay_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqServerPay_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 sdkid = 1;
  inline bool has_sdkid() const;
  inline void clear_sdkid();
  static const int kSdkidFieldNumber = 1;
  inline ::google::protobuf::uint32 sdkid() const;
  inline void set_sdkid(::google::protobuf::uint32 value);

  // optional uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // optional string token = 4;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqServerPay)
 private:
  inline void set_has_sdkid();
  inline void clear_has_sdkid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sdkid_;
  ::google::protobuf::uint32 itemid_;
  ::std::string* token_;
  ::google::protobuf::uint32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqServerPay* default_instance_;
};
// -------------------------------------------------------------------

class stRetServerPay : public ::google::protobuf::Message {
 public:
  stRetServerPay();
  virtual ~stRetServerPay();

  stRetServerPay(const stRetServerPay& from);

  inline stRetServerPay& operator=(const stRetServerPay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetServerPay& default_instance();

  void Swap(stRetServerPay* other);

  // implements Message ----------------------------------------------

  stRetServerPay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetServerPay& from);
  void MergeFrom(const stRetServerPay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetServerPay_eResult eResult;
  static const eResult eSuccess = stRetServerPay_eResult_eSuccess;
  static const eResult eInner_Error = stRetServerPay_eResult_eInner_Error;
  static const eResult eMoney_Not_Enough = stRetServerPay_eResult_eMoney_Not_Enough;
  static const eResult eItem = stRetServerPay_eResult_eItem;
  static const eResult eMoney = stRetServerPay_eResult_eMoney;
  static inline bool eResult_IsValid(int value) {
    return stRetServerPay_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetServerPay_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetServerPay_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetServerPay_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetServerPay_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetServerPay_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetServerPay_eResult_Parse(name, value);
  }

  typedef stRetServerPay_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetServerPay_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetServerPay_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetServerPay_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetServerPay_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetServerPay_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetServerPay_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetServerPay_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetServerPay_ProtoModID_Parse(name, value);
  }

  typedef stRetServerPay_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetServerPay_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetServerPay_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetServerPay_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetServerPay_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetServerPay_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetServerPay_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetServerPay_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetServerPay_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stRetServerPay.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stRetServerPay_eResult result() const;
  inline void set_result(::MiscProto::stRetServerPay_eResult value);

  // optional string orderId = 2;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 2;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // @@protoc_insertion_point(class_scope:MiscProto.stRetServerPay)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_orderid();
  inline void clear_has_orderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* orderid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRetServerPay* default_instance_;
};
// -------------------------------------------------------------------

class stReqSummonReward : public ::google::protobuf::Message {
 public:
  stReqSummonReward();
  virtual ~stReqSummonReward();

  stReqSummonReward(const stReqSummonReward& from);

  inline stReqSummonReward& operator=(const stReqSummonReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSummonReward& default_instance();

  void Swap(stReqSummonReward* other);

  // implements Message ----------------------------------------------

  stReqSummonReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSummonReward& from);
  void MergeFrom(const stReqSummonReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSummonReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSummonReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSummonReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSummonReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSummonReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSummonReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSummonReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSummonReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSummonReward_ProtoModID_Parse(name, value);
  }

  typedef stReqSummonReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSummonReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSummonReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSummonReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSummonReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSummonReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSummonReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSummonReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSummonReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 countId = 1;
  inline bool has_countid() const;
  inline void clear_countid();
  static const int kCountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 countid() const;
  inline void set_countid(::google::protobuf::uint32 value);

  // optional uint32 summonType = 2;
  inline bool has_summontype() const;
  inline void clear_summontype();
  static const int kSummonTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 summontype() const;
  inline void set_summontype(::google::protobuf::uint32 value);

  // optional uint32 rewardType = 3;
  inline bool has_rewardtype() const;
  inline void clear_rewardtype();
  static const int kRewardTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 rewardtype() const;
  inline void set_rewardtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqSummonReward)
 private:
  inline void set_has_countid();
  inline void clear_has_countid();
  inline void set_has_summontype();
  inline void clear_has_summontype();
  inline void set_has_rewardtype();
  inline void clear_has_rewardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 countid_;
  ::google::protobuf::uint32 summontype_;
  ::google::protobuf::uint32 rewardtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqSummonReward* default_instance_;
};
// -------------------------------------------------------------------

class stSummonRewardResult : public ::google::protobuf::Message {
 public:
  stSummonRewardResult();
  virtual ~stSummonRewardResult();

  stSummonRewardResult(const stSummonRewardResult& from);

  inline stSummonRewardResult& operator=(const stSummonRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSummonRewardResult& default_instance();

  void Swap(stSummonRewardResult* other);

  // implements Message ----------------------------------------------

  stSummonRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSummonRewardResult& from);
  void MergeFrom(const stSummonRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSummonRewardResult_eResult eResult;
  static const eResult eSUCCESS = stSummonRewardResult_eResult_eSUCCESS;
  static const eResult eHAS_GET_REWARD = stSummonRewardResult_eResult_eHAS_GET_REWARD;
  static const eResult eHAS_NOT_BUY_INVEST_PLAN = stSummonRewardResult_eResult_eHAS_NOT_BUY_INVEST_PLAN;
  static const eResult eBAG_FULL = stSummonRewardResult_eResult_eBAG_FULL;
  static const eResult eOTHER_ERROR = stSummonRewardResult_eResult_eOTHER_ERROR;
  static inline bool eResult_IsValid(int value) {
    return stSummonRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stSummonRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stSummonRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stSummonRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stSummonRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stSummonRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stSummonRewardResult_eResult_Parse(name, value);
  }

  typedef stSummonRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSummonRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSummonRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSummonRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSummonRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSummonRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSummonRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSummonRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSummonRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stSummonRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSummonRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSummonRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSummonRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSummonRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSummonRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSummonRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSummonRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSummonRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stSummonRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stSummonRewardResult_eResult result() const;
  inline void set_result(::MiscProto::stSummonRewardResult_eResult value);

  // optional uint32 countId = 2;
  inline bool has_countid() const;
  inline void clear_countid();
  static const int kCountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 countid() const;
  inline void set_countid(::google::protobuf::uint32 value);

  // optional uint32 summonType = 3;
  inline bool has_summontype() const;
  inline void clear_summontype();
  static const int kSummonTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 summontype() const;
  inline void set_summontype(::google::protobuf::uint32 value);

  // optional uint32 rewardType = 4;
  inline bool has_rewardtype() const;
  inline void clear_rewardtype();
  static const int kRewardTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 rewardtype() const;
  inline void set_rewardtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSummonRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_countid();
  inline void clear_has_countid();
  inline void set_has_summontype();
  inline void clear_has_summontype();
  inline void set_has_rewardtype();
  inline void clear_has_rewardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 countid_;
  ::google::protobuf::uint32 summontype_;
  ::google::protobuf::uint32 rewardtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSummonRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqSummonData : public ::google::protobuf::Message {
 public:
  stReqSummonData();
  virtual ~stReqSummonData();

  stReqSummonData(const stReqSummonData& from);

  inline stReqSummonData& operator=(const stReqSummonData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSummonData& default_instance();

  void Swap(stReqSummonData* other);

  // implements Message ----------------------------------------------

  stReqSummonData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSummonData& from);
  void MergeFrom(const stReqSummonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSummonData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSummonData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSummonData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSummonData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSummonData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSummonData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSummonData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSummonData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSummonData_ProtoModID_Parse(name, value);
  }

  typedef stReqSummonData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSummonData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSummonData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSummonData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSummonData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSummonData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSummonData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSummonData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSummonData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 summonType = 1;
  inline bool has_summontype() const;
  inline void clear_summontype();
  static const int kSummonTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 summontype() const;
  inline void set_summontype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqSummonData)
 private:
  inline void set_has_summontype();
  inline void clear_has_summontype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 summontype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqSummonData* default_instance_;
};
// -------------------------------------------------------------------

class stSummonDataResult : public ::google::protobuf::Message {
 public:
  stSummonDataResult();
  virtual ~stSummonDataResult();

  stSummonDataResult(const stSummonDataResult& from);

  inline stSummonDataResult& operator=(const stSummonDataResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSummonDataResult& default_instance();

  void Swap(stSummonDataResult* other);

  // implements Message ----------------------------------------------

  stSummonDataResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSummonDataResult& from);
  void MergeFrom(const stSummonDataResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSummonDataResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSummonDataResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSummonDataResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSummonDataResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSummonDataResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSummonDataResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSummonDataResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSummonDataResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSummonDataResult_ProtoModID_Parse(name, value);
  }

  typedef stSummonDataResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSummonDataResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSummonDataResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSummonDataResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSummonDataResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSummonDataResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSummonDataResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSummonDataResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSummonDataResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool hasBuySummonment = 1;
  inline bool has_hasbuysummonment() const;
  inline void clear_hasbuysummonment();
  static const int kHasBuySummonmentFieldNumber = 1;
  inline bool hasbuysummonment() const;
  inline void set_hasbuysummonment(bool value);

  // repeated uint32 freeSummonRewardList = 2;
  inline int freesummonrewardlist_size() const;
  inline void clear_freesummonrewardlist();
  static const int kFreeSummonRewardListFieldNumber = 2;
  inline ::google::protobuf::uint32 freesummonrewardlist(int index) const;
  inline void set_freesummonrewardlist(int index, ::google::protobuf::uint32 value);
  inline void add_freesummonrewardlist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      freesummonrewardlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_freesummonrewardlist();

  // repeated uint32 rechargeSummonRewardList = 3;
  inline int rechargesummonrewardlist_size() const;
  inline void clear_rechargesummonrewardlist();
  static const int kRechargeSummonRewardListFieldNumber = 3;
  inline ::google::protobuf::uint32 rechargesummonrewardlist(int index) const;
  inline void set_rechargesummonrewardlist(int index, ::google::protobuf::uint32 value);
  inline void add_rechargesummonrewardlist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rechargesummonrewardlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rechargesummonrewardlist();

  // optional uint32 summonType = 4;
  inline bool has_summontype() const;
  inline void clear_summontype();
  static const int kSummonTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 summontype() const;
  inline void set_summontype(::google::protobuf::uint32 value);

  // optional uint32 countId = 5;
  inline bool has_countid() const;
  inline void clear_countid();
  static const int kCountIdFieldNumber = 5;
  inline ::google::protobuf::uint32 countid() const;
  inline void set_countid(::google::protobuf::uint32 value);

  // optional uint32 countNum = 6;
  inline bool has_countnum() const;
  inline void clear_countnum();
  static const int kCountNumFieldNumber = 6;
  inline ::google::protobuf::uint32 countnum() const;
  inline void set_countnum(::google::protobuf::uint32 value);

  // optional uint32 beginTime = 7;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 begintime() const;
  inline void set_begintime(::google::protobuf::uint32 value);

  // optional uint32 endTime = 8;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stSummonDataResult)
 private:
  inline void set_has_hasbuysummonment();
  inline void clear_has_hasbuysummonment();
  inline void set_has_summontype();
  inline void clear_has_summontype();
  inline void set_has_countid();
  inline void clear_has_countid();
  inline void set_has_countnum();
  inline void clear_has_countnum();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > freesummonrewardlist_;
  bool hasbuysummonment_;
  ::google::protobuf::uint32 summontype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rechargesummonrewardlist_;
  ::google::protobuf::uint32 countid_;
  ::google::protobuf::uint32 countnum_;
  ::google::protobuf::uint32 begintime_;
  ::google::protobuf::uint32 endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stSummonDataResult* default_instance_;
};
// -------------------------------------------------------------------

class stBuySummonPlanResult : public ::google::protobuf::Message {
 public:
  stBuySummonPlanResult();
  virtual ~stBuySummonPlanResult();

  stBuySummonPlanResult(const stBuySummonPlanResult& from);

  inline stBuySummonPlanResult& operator=(const stBuySummonPlanResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuySummonPlanResult& default_instance();

  void Swap(stBuySummonPlanResult* other);

  // implements Message ----------------------------------------------

  stBuySummonPlanResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuySummonPlanResult& from);
  void MergeFrom(const stBuySummonPlanResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuySummonPlanResult_eResult eResult;
  static const eResult eSUCCESS = stBuySummonPlanResult_eResult_eSUCCESS;
  static const eResult eDIAMOND_NOT_ENOGUH = stBuySummonPlanResult_eResult_eDIAMOND_NOT_ENOGUH;
  static const eResult eVIP_LV_TOO_LOW = stBuySummonPlanResult_eResult_eVIP_LV_TOO_LOW;
  static const eResult eHAS_BUY = stBuySummonPlanResult_eResult_eHAS_BUY;
  static inline bool eResult_IsValid(int value) {
    return stBuySummonPlanResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stBuySummonPlanResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stBuySummonPlanResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stBuySummonPlanResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stBuySummonPlanResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stBuySummonPlanResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stBuySummonPlanResult_eResult_Parse(name, value);
  }

  typedef stBuySummonPlanResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuySummonPlanResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuySummonPlanResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuySummonPlanResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuySummonPlanResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuySummonPlanResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuySummonPlanResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuySummonPlanResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuySummonPlanResult_ProtoModID_Parse(name, value);
  }

  typedef stBuySummonPlanResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuySummonPlanResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuySummonPlanResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuySummonPlanResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuySummonPlanResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuySummonPlanResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuySummonPlanResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuySummonPlanResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuySummonPlanResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stBuySummonPlanResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stBuySummonPlanResult_eResult result() const;
  inline void set_result(::MiscProto::stBuySummonPlanResult_eResult value);

  // optional string index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline const ::std::string& index() const;
  inline void set_index(const ::std::string& value);
  inline void set_index(const char* value);
  inline void set_index(const char* value, size_t size);
  inline ::std::string* mutable_index();
  inline ::std::string* release_index();
  inline void set_allocated_index(::std::string* index);

  // @@protoc_insertion_point(class_scope:MiscProto.stBuySummonPlanResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* index_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stBuySummonPlanResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRechargeCheck : public ::google::protobuf::Message {
 public:
  stReqRechargeCheck();
  virtual ~stReqRechargeCheck();

  stReqRechargeCheck(const stReqRechargeCheck& from);

  inline stReqRechargeCheck& operator=(const stReqRechargeCheck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRechargeCheck& default_instance();

  void Swap(stReqRechargeCheck* other);

  // implements Message ----------------------------------------------

  stReqRechargeCheck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRechargeCheck& from);
  void MergeFrom(const stReqRechargeCheck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRechargeCheck_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRechargeCheck_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRechargeCheck_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRechargeCheck_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRechargeCheck_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRechargeCheck_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRechargeCheck_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRechargeCheck_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRechargeCheck_ProtoModID_Parse(name, value);
  }

  typedef stReqRechargeCheck_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRechargeCheck_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRechargeCheck_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRechargeCheck_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRechargeCheck_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRechargeCheck_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRechargeCheck_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRechargeCheck_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRechargeCheck_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 rechargeId = 1;
  inline bool has_rechargeid() const;
  inline void clear_rechargeid();
  static const int kRechargeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 rechargeid() const;
  inline void set_rechargeid(::google::protobuf::uint32 value);

  // optional uint32 buyCount = 2;
  inline bool has_buycount() const;
  inline void clear_buycount();
  static const int kBuyCountFieldNumber = 2;
  inline ::google::protobuf::uint32 buycount() const;
  inline void set_buycount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MiscProto.stReqRechargeCheck)
 private:
  inline void set_has_rechargeid();
  inline void clear_has_rechargeid();
  inline void set_has_buycount();
  inline void clear_has_buycount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rechargeid_;
  ::google::protobuf::uint32 buycount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stReqRechargeCheck* default_instance_;
};
// -------------------------------------------------------------------

class stRechargeCheckResult : public ::google::protobuf::Message {
 public:
  stRechargeCheckResult();
  virtual ~stRechargeCheckResult();

  stRechargeCheckResult(const stRechargeCheckResult& from);

  inline stRechargeCheckResult& operator=(const stRechargeCheckResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRechargeCheckResult& default_instance();

  void Swap(stRechargeCheckResult* other);

  // implements Message ----------------------------------------------

  stRechargeCheckResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRechargeCheckResult& from);
  void MergeFrom(const stRechargeCheckResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRechargeCheckResult_eResult eResult;
  static const eResult eSuccess = stRechargeCheckResult_eResult_eSuccess;
  static const eResult eBag_Full = stRechargeCheckResult_eResult_eBag_Full;
  static const eResult eNo_Times = stRechargeCheckResult_eResult_eNo_Times;
  static const eResult eOther_Error = stRechargeCheckResult_eResult_eOther_Error;
  static inline bool eResult_IsValid(int value) {
    return stRechargeCheckResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRechargeCheckResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRechargeCheckResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRechargeCheckResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRechargeCheckResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRechargeCheckResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRechargeCheckResult_eResult_Parse(name, value);
  }

  typedef stRechargeCheckResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRechargeCheckResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRechargeCheckResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRechargeCheckResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRechargeCheckResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRechargeCheckResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRechargeCheckResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRechargeCheckResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRechargeCheckResult_ProtoModID_Parse(name, value);
  }

  typedef stRechargeCheckResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRechargeCheckResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRechargeCheckResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRechargeCheckResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRechargeCheckResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRechargeCheckResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRechargeCheckResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRechargeCheckResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRechargeCheckResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MiscProto.stRechargeCheckResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MiscProto::stRechargeCheckResult_eResult result() const;
  inline void set_result(::MiscProto::stRechargeCheckResult_eResult value);

  // @@protoc_insertion_point(class_scope:MiscProto.stRechargeCheckResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Misc_2eproto();
  friend void protobuf_AssignDesc_Misc_2eproto();
  friend void protobuf_ShutdownFile_Misc_2eproto();

  void InitAsDefaultInstance();
  static stRechargeCheckResult* default_instance_;
};
// ===================================================================


// ===================================================================

// stSynMainSnalInfo

// optional uint32 id = 1;
inline bool stSynMainSnalInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynMainSnalInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynMainSnalInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynMainSnalInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stSynMainSnalInfo::id() const {
  return id_;
}
inline void stSynMainSnalInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string senderName = 2;
inline bool stSynMainSnalInfo::has_sendername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynMainSnalInfo::set_has_sendername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynMainSnalInfo::clear_has_sendername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynMainSnalInfo::clear_sendername() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    sendername_->clear();
  }
  clear_has_sendername();
}
inline const ::std::string& stSynMainSnalInfo::sendername() const {
  return *sendername_;
}
inline void stSynMainSnalInfo::set_sendername(const ::std::string& value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void stSynMainSnalInfo::set_sendername(const char* value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void stSynMainSnalInfo::set_sendername(const char* value, size_t size) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynMainSnalInfo::mutable_sendername() {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  return sendername_;
}
inline ::std::string* stSynMainSnalInfo::release_sendername() {
  clear_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendername_;
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynMainSnalInfo::set_allocated_sendername(::std::string* sendername) {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (sendername) {
    set_has_sendername();
    sendername_ = sendername;
  } else {
    clear_has_sendername();
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 3;
inline bool stSynMainSnalInfo::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynMainSnalInfo::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynMainSnalInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynMainSnalInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& stSynMainSnalInfo::title() const {
  return *title_;
}
inline void stSynMainSnalInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void stSynMainSnalInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void stSynMainSnalInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynMainSnalInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* stSynMainSnalInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynMainSnalInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sendTime = 4;
inline bool stSynMainSnalInfo::has_sendtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynMainSnalInfo::set_has_sendtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynMainSnalInfo::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynMainSnalInfo::clear_sendtime() {
  sendtime_ = 0u;
  clear_has_sendtime();
}
inline ::google::protobuf::uint32 stSynMainSnalInfo::sendtime() const {
  return sendtime_;
}
inline void stSynMainSnalInfo::set_sendtime(::google::protobuf::uint32 value) {
  set_has_sendtime();
  sendtime_ = value;
}

// optional bool isRead = 5;
inline bool stSynMainSnalInfo::has_isread() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynMainSnalInfo::set_has_isread() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynMainSnalInfo::clear_has_isread() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynMainSnalInfo::clear_isread() {
  isread_ = false;
  clear_has_isread();
}
inline bool stSynMainSnalInfo::isread() const {
  return isread_;
}
inline void stSynMainSnalInfo::set_isread(bool value) {
  set_has_isread();
  isread_ = value;
}

// optional .MiscProto.eMailType mailType = 6;
inline bool stSynMainSnalInfo::has_mailtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynMainSnalInfo::set_has_mailtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynMainSnalInfo::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynMainSnalInfo::clear_mailtype() {
  mailtype_ = 1;
  clear_has_mailtype();
}
inline ::MiscProto::eMailType stSynMainSnalInfo::mailtype() const {
  return static_cast< ::MiscProto::eMailType >(mailtype_);
}
inline void stSynMainSnalInfo::set_mailtype(::MiscProto::eMailType value) {
  assert(::MiscProto::eMailType_IsValid(value));
  set_has_mailtype();
  mailtype_ = value;
}

// optional bool isFetchAttach = 7;
inline bool stSynMainSnalInfo::has_isfetchattach() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynMainSnalInfo::set_has_isfetchattach() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynMainSnalInfo::clear_has_isfetchattach() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynMainSnalInfo::clear_isfetchattach() {
  isfetchattach_ = false;
  clear_has_isfetchattach();
}
inline bool stSynMainSnalInfo::isfetchattach() const {
  return isfetchattach_;
}
inline void stSynMainSnalInfo::set_isfetchattach(bool value) {
  set_has_isfetchattach();
  isfetchattach_ = value;
}

// optional bool hasAttach = 8;
inline bool stSynMainSnalInfo::has_hasattach() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynMainSnalInfo::set_has_hasattach() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynMainSnalInfo::clear_has_hasattach() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynMainSnalInfo::clear_hasattach() {
  hasattach_ = false;
  clear_has_hasattach();
}
inline bool stSynMainSnalInfo::hasattach() const {
  return hasattach_;
}
inline void stSynMainSnalInfo::set_hasattach(bool value) {
  set_has_hasattach();
  hasattach_ = value;
}

// -------------------------------------------------------------------

// stSynMailAttach

// optional uint32 itemID = 1;
inline bool stSynMailAttach::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynMailAttach::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynMailAttach::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynMailAttach::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stSynMailAttach::itemid() const {
  return itemid_;
}
inline void stSynMailAttach::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stSynMailAttach::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynMailAttach::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynMailAttach::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynMailAttach::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynMailAttach::num() const {
  return num_;
}
inline void stSynMailAttach::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSynDetailMailInfo

// optional uint32 id = 1;
inline bool stSynDetailMailInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynDetailMailInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynDetailMailInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynDetailMailInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stSynDetailMailInfo::id() const {
  return id_;
}
inline void stSynDetailMailInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string senderName = 2;
inline bool stSynDetailMailInfo::has_sendername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynDetailMailInfo::set_has_sendername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynDetailMailInfo::clear_has_sendername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynDetailMailInfo::clear_sendername() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    sendername_->clear();
  }
  clear_has_sendername();
}
inline const ::std::string& stSynDetailMailInfo::sendername() const {
  return *sendername_;
}
inline void stSynDetailMailInfo::set_sendername(const ::std::string& value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void stSynDetailMailInfo::set_sendername(const char* value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void stSynDetailMailInfo::set_sendername(const char* value, size_t size) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynDetailMailInfo::mutable_sendername() {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  return sendername_;
}
inline ::std::string* stSynDetailMailInfo::release_sendername() {
  clear_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendername_;
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynDetailMailInfo::set_allocated_sendername(::std::string* sendername) {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (sendername) {
    set_has_sendername();
    sendername_ = sendername;
  } else {
    clear_has_sendername();
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 3;
inline bool stSynDetailMailInfo::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynDetailMailInfo::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynDetailMailInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynDetailMailInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& stSynDetailMailInfo::title() const {
  return *title_;
}
inline void stSynDetailMailInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void stSynDetailMailInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void stSynDetailMailInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynDetailMailInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* stSynDetailMailInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynDetailMailInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 4;
inline bool stSynDetailMailInfo::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynDetailMailInfo::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynDetailMailInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynDetailMailInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& stSynDetailMailInfo::content() const {
  return *content_;
}
inline void stSynDetailMailInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stSynDetailMailInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stSynDetailMailInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynDetailMailInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* stSynDetailMailInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynDetailMailInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sendTime = 5;
inline bool stSynDetailMailInfo::has_sendtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynDetailMailInfo::set_has_sendtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynDetailMailInfo::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynDetailMailInfo::clear_sendtime() {
  sendtime_ = 0u;
  clear_has_sendtime();
}
inline ::google::protobuf::uint32 stSynDetailMailInfo::sendtime() const {
  return sendtime_;
}
inline void stSynDetailMailInfo::set_sendtime(::google::protobuf::uint32 value) {
  set_has_sendtime();
  sendtime_ = value;
}

// optional bool isRead = 6;
inline bool stSynDetailMailInfo::has_isread() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynDetailMailInfo::set_has_isread() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynDetailMailInfo::clear_has_isread() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynDetailMailInfo::clear_isread() {
  isread_ = false;
  clear_has_isread();
}
inline bool stSynDetailMailInfo::isread() const {
  return isread_;
}
inline void stSynDetailMailInfo::set_isread(bool value) {
  set_has_isread();
  isread_ = value;
}

// optional .MiscProto.eMailType mailType = 7;
inline bool stSynDetailMailInfo::has_mailtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynDetailMailInfo::set_has_mailtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynDetailMailInfo::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynDetailMailInfo::clear_mailtype() {
  mailtype_ = 1;
  clear_has_mailtype();
}
inline ::MiscProto::eMailType stSynDetailMailInfo::mailtype() const {
  return static_cast< ::MiscProto::eMailType >(mailtype_);
}
inline void stSynDetailMailInfo::set_mailtype(::MiscProto::eMailType value) {
  assert(::MiscProto::eMailType_IsValid(value));
  set_has_mailtype();
  mailtype_ = value;
}

// optional bool isFetchAttach = 8;
inline bool stSynDetailMailInfo::has_isfetchattach() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynDetailMailInfo::set_has_isfetchattach() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynDetailMailInfo::clear_has_isfetchattach() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynDetailMailInfo::clear_isfetchattach() {
  isfetchattach_ = false;
  clear_has_isfetchattach();
}
inline bool stSynDetailMailInfo::isfetchattach() const {
  return isfetchattach_;
}
inline void stSynDetailMailInfo::set_isfetchattach(bool value) {
  set_has_isfetchattach();
  isfetchattach_ = value;
}

// repeated .MiscProto.stSynMailAttach attachs = 9;
inline int stSynDetailMailInfo::attachs_size() const {
  return attachs_.size();
}
inline void stSynDetailMailInfo::clear_attachs() {
  attachs_.Clear();
}
inline const ::MiscProto::stSynMailAttach& stSynDetailMailInfo::attachs(int index) const {
  return attachs_.Get(index);
}
inline ::MiscProto::stSynMailAttach* stSynDetailMailInfo::mutable_attachs(int index) {
  return attachs_.Mutable(index);
}
inline ::MiscProto::stSynMailAttach* stSynDetailMailInfo::add_attachs() {
  return attachs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynMailAttach >&
stSynDetailMailInfo::attachs() const {
  return attachs_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynMailAttach >*
stSynDetailMailInfo::mutable_attachs() {
  return &attachs_;
}

// -------------------------------------------------------------------

// stSynAllMail

// repeated .MiscProto.stSynMainSnalInfo mailInfos = 1;
inline int stSynAllMail::mailinfos_size() const {
  return mailinfos_.size();
}
inline void stSynAllMail::clear_mailinfos() {
  mailinfos_.Clear();
}
inline const ::MiscProto::stSynMainSnalInfo& stSynAllMail::mailinfos(int index) const {
  return mailinfos_.Get(index);
}
inline ::MiscProto::stSynMainSnalInfo* stSynAllMail::mutable_mailinfos(int index) {
  return mailinfos_.Mutable(index);
}
inline ::MiscProto::stSynMainSnalInfo* stSynAllMail::add_mailinfos() {
  return mailinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynMainSnalInfo >&
stSynAllMail::mailinfos() const {
  return mailinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynMainSnalInfo >*
stSynAllMail::mutable_mailinfos() {
  return &mailinfos_;
}

// -------------------------------------------------------------------

// stReqReadMail

// optional uint32 id = 1;
inline bool stReqReadMail::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqReadMail::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqReadMail::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqReadMail::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqReadMail::id() const {
  return id_;
}
inline void stReqReadMail::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stRetMailInfo

// optional .MiscProto.stSynDetailMailInfo mailInfo = 1;
inline bool stRetMailInfo::has_mailinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetMailInfo::set_has_mailinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetMailInfo::clear_has_mailinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetMailInfo::clear_mailinfo() {
  if (mailinfo_ != NULL) mailinfo_->::MiscProto::stSynDetailMailInfo::Clear();
  clear_has_mailinfo();
}
inline const ::MiscProto::stSynDetailMailInfo& stRetMailInfo::mailinfo() const {
  return mailinfo_ != NULL ? *mailinfo_ : *default_instance_->mailinfo_;
}
inline ::MiscProto::stSynDetailMailInfo* stRetMailInfo::mutable_mailinfo() {
  set_has_mailinfo();
  if (mailinfo_ == NULL) mailinfo_ = new ::MiscProto::stSynDetailMailInfo;
  return mailinfo_;
}
inline ::MiscProto::stSynDetailMailInfo* stRetMailInfo::release_mailinfo() {
  clear_has_mailinfo();
  ::MiscProto::stSynDetailMailInfo* temp = mailinfo_;
  mailinfo_ = NULL;
  return temp;
}
inline void stRetMailInfo::set_allocated_mailinfo(::MiscProto::stSynDetailMailInfo* mailinfo) {
  delete mailinfo_;
  mailinfo_ = mailinfo;
  if (mailinfo) {
    set_has_mailinfo();
  } else {
    clear_has_mailinfo();
  }
}

// -------------------------------------------------------------------

// stReqFetchAttach

// optional uint32 id = 1;
inline bool stReqFetchAttach::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqFetchAttach::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqFetchAttach::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqFetchAttach::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqFetchAttach::id() const {
  return id_;
}
inline void stReqFetchAttach::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stFetchAttachResult

// optional .MiscProto.stFetchAttachResult.Result result = 1;
inline bool stFetchAttachResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFetchAttachResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFetchAttachResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFetchAttachResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stFetchAttachResult_Result stFetchAttachResult::result() const {
  return static_cast< ::MiscProto::stFetchAttachResult_Result >(result_);
}
inline void stFetchAttachResult::set_result(::MiscProto::stFetchAttachResult_Result value) {
  assert(::MiscProto::stFetchAttachResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReceiveMail

// optional .MiscProto.stSynMainSnalInfo mailInfo = 1;
inline bool stReceiveMail::has_mailinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReceiveMail::set_has_mailinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReceiveMail::clear_has_mailinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReceiveMail::clear_mailinfo() {
  if (mailinfo_ != NULL) mailinfo_->::MiscProto::stSynMainSnalInfo::Clear();
  clear_has_mailinfo();
}
inline const ::MiscProto::stSynMainSnalInfo& stReceiveMail::mailinfo() const {
  return mailinfo_ != NULL ? *mailinfo_ : *default_instance_->mailinfo_;
}
inline ::MiscProto::stSynMainSnalInfo* stReceiveMail::mutable_mailinfo() {
  set_has_mailinfo();
  if (mailinfo_ == NULL) mailinfo_ = new ::MiscProto::stSynMainSnalInfo;
  return mailinfo_;
}
inline ::MiscProto::stSynMainSnalInfo* stReceiveMail::release_mailinfo() {
  clear_has_mailinfo();
  ::MiscProto::stSynMainSnalInfo* temp = mailinfo_;
  mailinfo_ = NULL;
  return temp;
}
inline void stReceiveMail::set_allocated_mailinfo(::MiscProto::stSynMainSnalInfo* mailinfo) {
  delete mailinfo_;
  mailinfo_ = mailinfo;
  if (mailinfo) {
    set_has_mailinfo();
  } else {
    clear_has_mailinfo();
  }
}

// -------------------------------------------------------------------

// stReqRewardInfo

// optional uint32 flag = 1;
inline bool stReqRewardInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRewardInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRewardInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRewardInfo::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 stReqRewardInfo::flag() const {
  return flag_;
}
inline void stReqRewardInfo::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// stRetRewardInfo

// optional uint32 getSignRewardNum = 1;
inline bool stRetRewardInfo::has_getsignrewardnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRewardInfo::set_has_getsignrewardnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRewardInfo::clear_has_getsignrewardnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRewardInfo::clear_getsignrewardnum() {
  getsignrewardnum_ = 0u;
  clear_has_getsignrewardnum();
}
inline ::google::protobuf::uint32 stRetRewardInfo::getsignrewardnum() const {
  return getsignrewardnum_;
}
inline void stRetRewardInfo::set_getsignrewardnum(::google::protobuf::uint32 value) {
  set_has_getsignrewardnum();
  getsignrewardnum_ = value;
}

// optional bool hasGetSignReward = 2;
inline bool stRetRewardInfo::has_hasgetsignreward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetRewardInfo::set_has_hasgetsignreward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetRewardInfo::clear_has_hasgetsignreward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetRewardInfo::clear_hasgetsignreward() {
  hasgetsignreward_ = false;
  clear_has_hasgetsignreward();
}
inline bool stRetRewardInfo::hasgetsignreward() const {
  return hasgetsignreward_;
}
inline void stRetRewardInfo::set_hasgetsignreward(bool value) {
  set_has_hasgetsignreward();
  hasgetsignreward_ = value;
}

// optional uint32 getOpenSvrRewardNum = 3;
inline bool stRetRewardInfo::has_getopensvrrewardnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetRewardInfo::set_has_getopensvrrewardnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetRewardInfo::clear_has_getopensvrrewardnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetRewardInfo::clear_getopensvrrewardnum() {
  getopensvrrewardnum_ = 0u;
  clear_has_getopensvrrewardnum();
}
inline ::google::protobuf::uint32 stRetRewardInfo::getopensvrrewardnum() const {
  return getopensvrrewardnum_;
}
inline void stRetRewardInfo::set_getopensvrrewardnum(::google::protobuf::uint32 value) {
  set_has_getopensvrrewardnum();
  getopensvrrewardnum_ = value;
}

// optional bool hasGetOpenSvrReward = 4;
inline bool stRetRewardInfo::has_hasgetopensvrreward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetRewardInfo::set_has_hasgetopensvrreward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetRewardInfo::clear_has_hasgetopensvrreward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetRewardInfo::clear_hasgetopensvrreward() {
  hasgetopensvrreward_ = false;
  clear_has_hasgetopensvrreward();
}
inline bool stRetRewardInfo::hasgetopensvrreward() const {
  return hasgetopensvrreward_;
}
inline void stRetRewardInfo::set_hasgetopensvrreward(bool value) {
  set_has_hasgetopensvrreward();
  hasgetopensvrreward_ = value;
}

// repeated uint32 hasGetRewardLv = 5;
inline int stRetRewardInfo::hasgetrewardlv_size() const {
  return hasgetrewardlv_.size();
}
inline void stRetRewardInfo::clear_hasgetrewardlv() {
  hasgetrewardlv_.Clear();
}
inline ::google::protobuf::uint32 stRetRewardInfo::hasgetrewardlv(int index) const {
  return hasgetrewardlv_.Get(index);
}
inline void stRetRewardInfo::set_hasgetrewardlv(int index, ::google::protobuf::uint32 value) {
  hasgetrewardlv_.Set(index, value);
}
inline void stRetRewardInfo::add_hasgetrewardlv(::google::protobuf::uint32 value) {
  hasgetrewardlv_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stRetRewardInfo::hasgetrewardlv() const {
  return hasgetrewardlv_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stRetRewardInfo::mutable_hasgetrewardlv() {
  return &hasgetrewardlv_;
}

// optional uint32 onlineTimes = 6;
inline bool stRetRewardInfo::has_onlinetimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetRewardInfo::set_has_onlinetimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetRewardInfo::clear_has_onlinetimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetRewardInfo::clear_onlinetimes() {
  onlinetimes_ = 0u;
  clear_has_onlinetimes();
}
inline ::google::protobuf::uint32 stRetRewardInfo::onlinetimes() const {
  return onlinetimes_;
}
inline void stRetRewardInfo::set_onlinetimes(::google::protobuf::uint32 value) {
  set_has_onlinetimes();
  onlinetimes_ = value;
}

// repeated uint32 hasGetOnlineReward = 7;
inline int stRetRewardInfo::hasgetonlinereward_size() const {
  return hasgetonlinereward_.size();
}
inline void stRetRewardInfo::clear_hasgetonlinereward() {
  hasgetonlinereward_.Clear();
}
inline ::google::protobuf::uint32 stRetRewardInfo::hasgetonlinereward(int index) const {
  return hasgetonlinereward_.Get(index);
}
inline void stRetRewardInfo::set_hasgetonlinereward(int index, ::google::protobuf::uint32 value) {
  hasgetonlinereward_.Set(index, value);
}
inline void stRetRewardInfo::add_hasgetonlinereward(::google::protobuf::uint32 value) {
  hasgetonlinereward_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stRetRewardInfo::hasgetonlinereward() const {
  return hasgetonlinereward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stRetRewardInfo::mutable_hasgetonlinereward() {
  return &hasgetonlinereward_;
}

// -------------------------------------------------------------------

// stReqSignReward

// optional uint32 day = 1;
inline bool stReqSignReward::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSignReward::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSignReward::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSignReward::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 stReqSignReward::day() const {
  return day_;
}
inline void stReqSignReward::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// -------------------------------------------------------------------

// stGetSignRewardResult

// optional .MiscProto.stGetSignRewardResult.Result result = 1;
inline bool stGetSignRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGetSignRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGetSignRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGetSignRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stGetSignRewardResult_Result stGetSignRewardResult::result() const {
  return static_cast< ::MiscProto::stGetSignRewardResult_Result >(result_);
}
inline void stGetSignRewardResult::set_result(::MiscProto::stGetSignRewardResult_Result value) {
  assert(::MiscProto::stGetSignRewardResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 day = 2;
inline bool stGetSignRewardResult::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGetSignRewardResult::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGetSignRewardResult::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGetSignRewardResult::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 stGetSignRewardResult::day() const {
  return day_;
}
inline void stGetSignRewardResult::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// -------------------------------------------------------------------

// stReqOpenSvrReward

// optional uint32 day = 1;
inline bool stReqOpenSvrReward::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenSvrReward::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenSvrReward::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenSvrReward::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 stReqOpenSvrReward::day() const {
  return day_;
}
inline void stReqOpenSvrReward::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// -------------------------------------------------------------------

// stGetOpenSvrRewardResult

// optional .MiscProto.stGetOpenSvrRewardResult.eResult result = 1;
inline bool stGetOpenSvrRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGetOpenSvrRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGetOpenSvrRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGetOpenSvrRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stGetOpenSvrRewardResult_eResult stGetOpenSvrRewardResult::result() const {
  return static_cast< ::MiscProto::stGetOpenSvrRewardResult_eResult >(result_);
}
inline void stGetOpenSvrRewardResult::set_result(::MiscProto::stGetOpenSvrRewardResult_eResult value) {
  assert(::MiscProto::stGetOpenSvrRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 day = 2;
inline bool stGetOpenSvrRewardResult::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGetOpenSvrRewardResult::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGetOpenSvrRewardResult::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGetOpenSvrRewardResult::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 stGetOpenSvrRewardResult::day() const {
  return day_;
}
inline void stGetOpenSvrRewardResult::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// -------------------------------------------------------------------

// stReqLvReward

// optional uint32 lv = 1;
inline bool stReqLvReward::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLvReward::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLvReward::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLvReward::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 stReqLvReward::lv() const {
  return lv_;
}
inline void stReqLvReward::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// -------------------------------------------------------------------

// stLvRewardResult

// optional .MiscProto.stLvRewardResult.eResult result = 1;
inline bool stLvRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLvRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLvRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLvRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stLvRewardResult_eResult stLvRewardResult::result() const {
  return static_cast< ::MiscProto::stLvRewardResult_eResult >(result_);
}
inline void stLvRewardResult::set_result(::MiscProto::stLvRewardResult_eResult value) {
  assert(::MiscProto::stLvRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 getRewardLv = 2;
inline bool stLvRewardResult::has_getrewardlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLvRewardResult::set_has_getrewardlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLvRewardResult::clear_has_getrewardlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLvRewardResult::clear_getrewardlv() {
  getrewardlv_ = 0u;
  clear_has_getrewardlv();
}
inline ::google::protobuf::uint32 stLvRewardResult::getrewardlv() const {
  return getrewardlv_;
}
inline void stLvRewardResult::set_getrewardlv(::google::protobuf::uint32 value) {
  set_has_getrewardlv();
  getrewardlv_ = value;
}

// -------------------------------------------------------------------

// stReqOnlineReward

// optional uint32 id = 1;
inline bool stReqOnlineReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOnlineReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOnlineReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOnlineReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqOnlineReward::id() const {
  return id_;
}
inline void stReqOnlineReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stGetOnlineRewardResult

// optional .MiscProto.stGetOnlineRewardResult.eResult result = 1;
inline bool stGetOnlineRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGetOnlineRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGetOnlineRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGetOnlineRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stGetOnlineRewardResult_eResult stGetOnlineRewardResult::result() const {
  return static_cast< ::MiscProto::stGetOnlineRewardResult_eResult >(result_);
}
inline void stGetOnlineRewardResult::set_result(::MiscProto::stGetOnlineRewardResult_eResult value) {
  assert(::MiscProto::stGetOnlineRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 id = 2;
inline bool stGetOnlineRewardResult::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGetOnlineRewardResult::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGetOnlineRewardResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGetOnlineRewardResult::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stGetOnlineRewardResult::id() const {
  return id_;
}
inline void stGetOnlineRewardResult::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 onlineTime = 3;
inline bool stGetOnlineRewardResult::has_onlinetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGetOnlineRewardResult::set_has_onlinetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGetOnlineRewardResult::clear_has_onlinetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGetOnlineRewardResult::clear_onlinetime() {
  onlinetime_ = 0u;
  clear_has_onlinetime();
}
inline ::google::protobuf::uint32 stGetOnlineRewardResult::onlinetime() const {
  return onlinetime_;
}
inline void stGetOnlineRewardResult::set_onlinetime(::google::protobuf::uint32 value) {
  set_has_onlinetime();
  onlinetime_ = value;
}

// -------------------------------------------------------------------

// stBuyStarInfo

// optional uint32 buyNum = 1;
inline bool stBuyStarInfo::has_buynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuyStarInfo::set_has_buynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuyStarInfo::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuyStarInfo::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 stBuyStarInfo::buynum() const {
  return buynum_;
}
inline void stBuyStarInfo::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
}

// -------------------------------------------------------------------

// stReqBuyStar

// optional uint32 num = 1;
inline bool stReqBuyStar::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBuyStar::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBuyStar::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBuyStar::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stReqBuyStar::num() const {
  return num_;
}
inline void stReqBuyStar::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stBuyStarResult

// optional .MiscProto.stBuyStarResult.Result result = 1;
inline bool stBuyStarResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuyStarResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuyStarResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuyStarResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stBuyStarResult_Result stBuyStarResult::result() const {
  return static_cast< ::MiscProto::stBuyStarResult_Result >(result_);
}
inline void stBuyStarResult::set_result(::MiscProto::stBuyStarResult_Result value) {
  assert(::MiscProto::stBuyStarResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 hasBuyNum = 2;
inline bool stBuyStarResult::has_hasbuynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBuyStarResult::set_has_hasbuynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBuyStarResult::clear_has_hasbuynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBuyStarResult::clear_hasbuynum() {
  hasbuynum_ = 0u;
  clear_has_hasbuynum();
}
inline ::google::protobuf::uint32 stBuyStarResult::hasbuynum() const {
  return hasbuynum_;
}
inline void stBuyStarResult::set_hasbuynum(::google::protobuf::uint32 value) {
  set_has_hasbuynum();
  hasbuynum_ = value;
}

// -------------------------------------------------------------------

// ReqOpenDrawWindow

// optional uint32 flag = 1;
inline bool ReqOpenDrawWindow::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqOpenDrawWindow::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqOpenDrawWindow::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqOpenDrawWindow::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 ReqOpenDrawWindow::flag() const {
  return flag_;
}
inline void ReqOpenDrawWindow::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// stDrawWindowInfo

// optional uint32 goldFreeRemainTime = 1;
inline bool stDrawWindowInfo::has_goldfreeremaintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDrawWindowInfo::set_has_goldfreeremaintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDrawWindowInfo::clear_has_goldfreeremaintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDrawWindowInfo::clear_goldfreeremaintime() {
  goldfreeremaintime_ = 0u;
  clear_has_goldfreeremaintime();
}
inline ::google::protobuf::uint32 stDrawWindowInfo::goldfreeremaintime() const {
  return goldfreeremaintime_;
}
inline void stDrawWindowInfo::set_goldfreeremaintime(::google::protobuf::uint32 value) {
  set_has_goldfreeremaintime();
  goldfreeremaintime_ = value;
}

// optional uint32 goldFreeRemainNum = 2;
inline bool stDrawWindowInfo::has_goldfreeremainnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDrawWindowInfo::set_has_goldfreeremainnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDrawWindowInfo::clear_has_goldfreeremainnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDrawWindowInfo::clear_goldfreeremainnum() {
  goldfreeremainnum_ = 0u;
  clear_has_goldfreeremainnum();
}
inline ::google::protobuf::uint32 stDrawWindowInfo::goldfreeremainnum() const {
  return goldfreeremainnum_;
}
inline void stDrawWindowInfo::set_goldfreeremainnum(::google::protobuf::uint32 value) {
  set_has_goldfreeremainnum();
  goldfreeremainnum_ = value;
}

// optional uint32 diamondFreeRemainTime = 3;
inline bool stDrawWindowInfo::has_diamondfreeremaintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDrawWindowInfo::set_has_diamondfreeremaintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDrawWindowInfo::clear_has_diamondfreeremaintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDrawWindowInfo::clear_diamondfreeremaintime() {
  diamondfreeremaintime_ = 0u;
  clear_has_diamondfreeremaintime();
}
inline ::google::protobuf::uint32 stDrawWindowInfo::diamondfreeremaintime() const {
  return diamondfreeremaintime_;
}
inline void stDrawWindowInfo::set_diamondfreeremaintime(::google::protobuf::uint32 value) {
  set_has_diamondfreeremaintime();
  diamondfreeremaintime_ = value;
}

// optional uint32 drawHeroFreeRemainTime = 4;
inline bool stDrawWindowInfo::has_drawherofreeremaintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stDrawWindowInfo::set_has_drawherofreeremaintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stDrawWindowInfo::clear_has_drawherofreeremaintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stDrawWindowInfo::clear_drawherofreeremaintime() {
  drawherofreeremaintime_ = 0u;
  clear_has_drawherofreeremaintime();
}
inline ::google::protobuf::uint32 stDrawWindowInfo::drawherofreeremaintime() const {
  return drawherofreeremaintime_;
}
inline void stDrawWindowInfo::set_drawherofreeremaintime(::google::protobuf::uint32 value) {
  set_has_drawherofreeremaintime();
  drawherofreeremaintime_ = value;
}

// optional uint32 diamondDrawNum = 5;
inline bool stDrawWindowInfo::has_diamonddrawnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stDrawWindowInfo::set_has_diamonddrawnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stDrawWindowInfo::clear_has_diamonddrawnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stDrawWindowInfo::clear_diamonddrawnum() {
  diamonddrawnum_ = 0u;
  clear_has_diamonddrawnum();
}
inline ::google::protobuf::uint32 stDrawWindowInfo::diamonddrawnum() const {
  return diamonddrawnum_;
}
inline void stDrawWindowInfo::set_diamonddrawnum(::google::protobuf::uint32 value) {
  set_has_diamonddrawnum();
  diamonddrawnum_ = value;
}

// optional uint32 heroDrawNum = 6;
inline bool stDrawWindowInfo::has_herodrawnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stDrawWindowInfo::set_has_herodrawnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stDrawWindowInfo::clear_has_herodrawnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stDrawWindowInfo::clear_herodrawnum() {
  herodrawnum_ = 0u;
  clear_has_herodrawnum();
}
inline ::google::protobuf::uint32 stDrawWindowInfo::herodrawnum() const {
  return herodrawnum_;
}
inline void stDrawWindowInfo::set_herodrawnum(::google::protobuf::uint32 value) {
  set_has_herodrawnum();
  herodrawnum_ = value;
}

// optional bool hasGoldDraw = 7;
inline bool stDrawWindowInfo::has_hasgolddraw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stDrawWindowInfo::set_has_hasgolddraw() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stDrawWindowInfo::clear_has_hasgolddraw() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stDrawWindowInfo::clear_hasgolddraw() {
  hasgolddraw_ = false;
  clear_has_hasgolddraw();
}
inline bool stDrawWindowInfo::hasgolddraw() const {
  return hasgolddraw_;
}
inline void stDrawWindowInfo::set_hasgolddraw(bool value) {
  set_has_hasgolddraw();
  hasgolddraw_ = value;
}

// optional bool hasGold10Draw = 8;
inline bool stDrawWindowInfo::has_hasgold10draw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stDrawWindowInfo::set_has_hasgold10draw() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stDrawWindowInfo::clear_has_hasgold10draw() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stDrawWindowInfo::clear_hasgold10draw() {
  hasgold10draw_ = false;
  clear_has_hasgold10draw();
}
inline bool stDrawWindowInfo::hasgold10draw() const {
  return hasgold10draw_;
}
inline void stDrawWindowInfo::set_hasgold10draw(bool value) {
  set_has_hasgold10draw();
  hasgold10draw_ = value;
}

// optional bool hasDiamondDraw = 9;
inline bool stDrawWindowInfo::has_hasdiamonddraw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stDrawWindowInfo::set_has_hasdiamonddraw() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stDrawWindowInfo::clear_has_hasdiamonddraw() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stDrawWindowInfo::clear_hasdiamonddraw() {
  hasdiamonddraw_ = false;
  clear_has_hasdiamonddraw();
}
inline bool stDrawWindowInfo::hasdiamonddraw() const {
  return hasdiamonddraw_;
}
inline void stDrawWindowInfo::set_hasdiamonddraw(bool value) {
  set_has_hasdiamonddraw();
  hasdiamonddraw_ = value;
}

// optional bool hasDiamond10Draw = 10;
inline bool stDrawWindowInfo::has_hasdiamond10draw() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stDrawWindowInfo::set_has_hasdiamond10draw() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stDrawWindowInfo::clear_has_hasdiamond10draw() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stDrawWindowInfo::clear_hasdiamond10draw() {
  hasdiamond10draw_ = false;
  clear_has_hasdiamond10draw();
}
inline bool stDrawWindowInfo::hasdiamond10draw() const {
  return hasdiamond10draw_;
}
inline void stDrawWindowInfo::set_hasdiamond10draw(bool value) {
  set_has_hasdiamond10draw();
  hasdiamond10draw_ = value;
}

// -------------------------------------------------------------------

// stReqDraw

// optional .MiscProto.eDrawType type = 1;
inline bool stReqDraw::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDraw::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDraw::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDraw::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::MiscProto::eDrawType stReqDraw::type() const {
  return static_cast< ::MiscProto::eDrawType >(type_);
}
inline void stReqDraw::set_type(::MiscProto::eDrawType value) {
  assert(::MiscProto::eDrawType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 flag = 2;
inline bool stReqDraw::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqDraw::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqDraw::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqDraw::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 stReqDraw::flag() const {
  return flag_;
}
inline void stReqDraw::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// stSynDrawItem

// optional uint32 itemID = 1;
inline bool stSynDrawItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynDrawItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynDrawItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynDrawItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stSynDrawItem::itemid() const {
  return itemid_;
}
inline void stSynDrawItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stSynDrawItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynDrawItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynDrawItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynDrawItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynDrawItem::num() const {
  return num_;
}
inline void stSynDrawItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stDrawResult

// optional .MiscProto.stDrawResult.Result result = 1;
inline bool stDrawResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDrawResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDrawResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDrawResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stDrawResult_Result stDrawResult::result() const {
  return static_cast< ::MiscProto::stDrawResult_Result >(result_);
}
inline void stDrawResult::set_result(::MiscProto::stDrawResult_Result value) {
  assert(::MiscProto::stDrawResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated .MiscProto.stSynDrawItem items = 2;
inline int stDrawResult::items_size() const {
  return items_.size();
}
inline void stDrawResult::clear_items() {
  items_.Clear();
}
inline const ::MiscProto::stSynDrawItem& stDrawResult::items(int index) const {
  return items_.Get(index);
}
inline ::MiscProto::stSynDrawItem* stDrawResult::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::MiscProto::stSynDrawItem* stDrawResult::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynDrawItem >&
stDrawResult::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynDrawItem >*
stDrawResult::mutable_items() {
  return &items_;
}

// optional .MiscProto.eDrawType type = 3;
inline bool stDrawResult::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDrawResult::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDrawResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDrawResult::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::MiscProto::eDrawType stDrawResult::type() const {
  return static_cast< ::MiscProto::eDrawType >(type_);
}
inline void stDrawResult::set_type(::MiscProto::eDrawType value) {
  assert(::MiscProto::eDrawType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 diamondDrawNum = 4;
inline bool stDrawResult::has_diamonddrawnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stDrawResult::set_has_diamonddrawnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stDrawResult::clear_has_diamonddrawnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stDrawResult::clear_diamonddrawnum() {
  diamonddrawnum_ = 0u;
  clear_has_diamonddrawnum();
}
inline ::google::protobuf::uint32 stDrawResult::diamonddrawnum() const {
  return diamonddrawnum_;
}
inline void stDrawResult::set_diamonddrawnum(::google::protobuf::uint32 value) {
  set_has_diamonddrawnum();
  diamonddrawnum_ = value;
}

// -------------------------------------------------------------------

// stSynMyTitle

// repeated uint32 allTitle = 1;
inline int stSynMyTitle::alltitle_size() const {
  return alltitle_.size();
}
inline void stSynMyTitle::clear_alltitle() {
  alltitle_.Clear();
}
inline ::google::protobuf::uint32 stSynMyTitle::alltitle(int index) const {
  return alltitle_.Get(index);
}
inline void stSynMyTitle::set_alltitle(int index, ::google::protobuf::uint32 value) {
  alltitle_.Set(index, value);
}
inline void stSynMyTitle::add_alltitle(::google::protobuf::uint32 value) {
  alltitle_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stSynMyTitle::alltitle() const {
  return alltitle_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stSynMyTitle::mutable_alltitle() {
  return &alltitle_;
}

// optional uint32 activeTitle = 2;
inline bool stSynMyTitle::has_activetitle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynMyTitle::set_has_activetitle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynMyTitle::clear_has_activetitle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynMyTitle::clear_activetitle() {
  activetitle_ = 0u;
  clear_has_activetitle();
}
inline ::google::protobuf::uint32 stSynMyTitle::activetitle() const {
  return activetitle_;
}
inline void stSynMyTitle::set_activetitle(::google::protobuf::uint32 value) {
  set_has_activetitle();
  activetitle_ = value;
}

// -------------------------------------------------------------------

// stActiveOneTitle

// optional uint32 titleID = 1;
inline bool stActiveOneTitle::has_titleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stActiveOneTitle::set_has_titleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stActiveOneTitle::clear_has_titleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stActiveOneTitle::clear_titleid() {
  titleid_ = 0u;
  clear_has_titleid();
}
inline ::google::protobuf::uint32 stActiveOneTitle::titleid() const {
  return titleid_;
}
inline void stActiveOneTitle::set_titleid(::google::protobuf::uint32 value) {
  set_has_titleid();
  titleid_ = value;
}

// -------------------------------------------------------------------

// stActiveTitleResult

// optional .MiscProto.stActiveTitleResult.eResult result = 1;
inline bool stActiveTitleResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stActiveTitleResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stActiveTitleResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stActiveTitleResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stActiveTitleResult_eResult stActiveTitleResult::result() const {
  return static_cast< ::MiscProto::stActiveTitleResult_eResult >(result_);
}
inline void stActiveTitleResult::set_result(::MiscProto::stActiveTitleResult_eResult value) {
  assert(::MiscProto::stActiveTitleResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 titleID = 2;
inline bool stActiveTitleResult::has_titleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stActiveTitleResult::set_has_titleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stActiveTitleResult::clear_has_titleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stActiveTitleResult::clear_titleid() {
  titleid_ = 0u;
  clear_has_titleid();
}
inline ::google::protobuf::uint32 stActiveTitleResult::titleid() const {
  return titleid_;
}
inline void stActiveTitleResult::set_titleid(::google::protobuf::uint32 value) {
  set_has_titleid();
  titleid_ = value;
}

// -------------------------------------------------------------------

// stObtainOneTitle

// optional uint32 titleID = 1;
inline bool stObtainOneTitle::has_titleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stObtainOneTitle::set_has_titleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stObtainOneTitle::clear_has_titleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stObtainOneTitle::clear_titleid() {
  titleid_ = 0u;
  clear_has_titleid();
}
inline ::google::protobuf::uint32 stObtainOneTitle::titleid() const {
  return titleid_;
}
inline void stObtainOneTitle::set_titleid(::google::protobuf::uint32 value) {
  set_has_titleid();
  titleid_ = value;
}

// -------------------------------------------------------------------

// stBuyInvestPlan

// optional uint32 charID = 1;
inline bool stBuyInvestPlan::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuyInvestPlan::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuyInvestPlan::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuyInvestPlan::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stBuyInvestPlan::charid() const {
  return charid_;
}
inline void stBuyInvestPlan::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stBuyInvestPlanResult

// optional .MiscProto.stBuyInvestPlanResult.eResult result = 1;
inline bool stBuyInvestPlanResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuyInvestPlanResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuyInvestPlanResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuyInvestPlanResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stBuyInvestPlanResult_eResult stBuyInvestPlanResult::result() const {
  return static_cast< ::MiscProto::stBuyInvestPlanResult_eResult >(result_);
}
inline void stBuyInvestPlanResult::set_result(::MiscProto::stBuyInvestPlanResult_eResult value) {
  assert(::MiscProto::stBuyInvestPlanResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string index = 2;
inline bool stBuyInvestPlanResult::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBuyInvestPlanResult::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBuyInvestPlanResult::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBuyInvestPlanResult::clear_index() {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    index_->clear();
  }
  clear_has_index();
}
inline const ::std::string& stBuyInvestPlanResult::index() const {
  return *index_;
}
inline void stBuyInvestPlanResult::set_index(const ::std::string& value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(value);
}
inline void stBuyInvestPlanResult::set_index(const char* value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(value);
}
inline void stBuyInvestPlanResult::set_index(const char* value, size_t size) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBuyInvestPlanResult::mutable_index() {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  return index_;
}
inline ::std::string* stBuyInvestPlanResult::release_index() {
  clear_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = index_;
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBuyInvestPlanResult::set_allocated_index(::std::string* index) {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    delete index_;
  }
  if (index) {
    set_has_index();
    index_ = index;
  } else {
    clear_has_index();
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqInvestPlanReward

// optional uint32 lv = 1;
inline bool stReqInvestPlanReward::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqInvestPlanReward::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqInvestPlanReward::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqInvestPlanReward::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 stReqInvestPlanReward::lv() const {
  return lv_;
}
inline void stReqInvestPlanReward::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// -------------------------------------------------------------------

// stInvestPlanRewardResult

// optional .MiscProto.stInvestPlanRewardResult.eResult result = 1;
inline bool stInvestPlanRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInvestPlanRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInvestPlanRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInvestPlanRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stInvestPlanRewardResult_eResult stInvestPlanRewardResult::result() const {
  return static_cast< ::MiscProto::stInvestPlanRewardResult_eResult >(result_);
}
inline void stInvestPlanRewardResult::set_result(::MiscProto::stInvestPlanRewardResult_eResult value) {
  assert(::MiscProto::stInvestPlanRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 lv = 2;
inline bool stInvestPlanRewardResult::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stInvestPlanRewardResult::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stInvestPlanRewardResult::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stInvestPlanRewardResult::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 stInvestPlanRewardResult::lv() const {
  return lv_;
}
inline void stInvestPlanRewardResult::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional string index = 3;
inline bool stInvestPlanRewardResult::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stInvestPlanRewardResult::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stInvestPlanRewardResult::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stInvestPlanRewardResult::clear_index() {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    index_->clear();
  }
  clear_has_index();
}
inline const ::std::string& stInvestPlanRewardResult::index() const {
  return *index_;
}
inline void stInvestPlanRewardResult::set_index(const ::std::string& value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(value);
}
inline void stInvestPlanRewardResult::set_index(const char* value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(value);
}
inline void stInvestPlanRewardResult::set_index(const char* value, size_t size) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stInvestPlanRewardResult::mutable_index() {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  return index_;
}
inline ::std::string* stInvestPlanRewardResult::release_index() {
  clear_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = index_;
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stInvestPlanRewardResult::set_allocated_index(::std::string* index) {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    delete index_;
  }
  if (index) {
    set_has_index();
    index_ = index;
  } else {
    clear_has_index();
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqEatDinner

// optional uint32 charID = 1;
inline bool stReqEatDinner::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqEatDinner::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqEatDinner::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqEatDinner::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqEatDinner::charid() const {
  return charid_;
}
inline void stReqEatDinner::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stEatDinnerResult

// optional .MiscProto.stEatDinnerResult.eResult result = 1;
inline bool stEatDinnerResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEatDinnerResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEatDinnerResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEatDinnerResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stEatDinnerResult_eResult stEatDinnerResult::result() const {
  return static_cast< ::MiscProto::stEatDinnerResult_eResult >(result_);
}
inline void stEatDinnerResult::set_result(::MiscProto::stEatDinnerResult_eResult value) {
  assert(::MiscProto::stEatDinnerResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 hasEatedNum = 2;
inline bool stEatDinnerResult::has_haseatednum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEatDinnerResult::set_has_haseatednum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEatDinnerResult::clear_has_haseatednum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEatDinnerResult::clear_haseatednum() {
  haseatednum_ = 0u;
  clear_has_haseatednum();
}
inline ::google::protobuf::uint32 stEatDinnerResult::haseatednum() const {
  return haseatednum_;
}
inline void stEatDinnerResult::set_haseatednum(::google::protobuf::uint32 value) {
  set_has_haseatednum();
  haseatednum_ = value;
}

// -------------------------------------------------------------------

// stSynActivityData

// optional bool hasBuyInvestment = 1;
inline bool stSynActivityData::has_hasbuyinvestment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynActivityData::set_has_hasbuyinvestment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynActivityData::clear_has_hasbuyinvestment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynActivityData::clear_hasbuyinvestment() {
  hasbuyinvestment_ = false;
  clear_has_hasbuyinvestment();
}
inline bool stSynActivityData::hasbuyinvestment() const {
  return hasbuyinvestment_;
}
inline void stSynActivityData::set_hasbuyinvestment(bool value) {
  set_has_hasbuyinvestment();
  hasbuyinvestment_ = value;
}

// repeated uint32 investGetRewardLv = 2;
inline int stSynActivityData::investgetrewardlv_size() const {
  return investgetrewardlv_.size();
}
inline void stSynActivityData::clear_investgetrewardlv() {
  investgetrewardlv_.Clear();
}
inline ::google::protobuf::uint32 stSynActivityData::investgetrewardlv(int index) const {
  return investgetrewardlv_.Get(index);
}
inline void stSynActivityData::set_investgetrewardlv(int index, ::google::protobuf::uint32 value) {
  investgetrewardlv_.Set(index, value);
}
inline void stSynActivityData::add_investgetrewardlv(::google::protobuf::uint32 value) {
  investgetrewardlv_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stSynActivityData::investgetrewardlv() const {
  return investgetrewardlv_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stSynActivityData::mutable_investgetrewardlv() {
  return &investgetrewardlv_;
}

// optional uint32 eatDinnerNum = 3;
inline bool stSynActivityData::has_eatdinnernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynActivityData::set_has_eatdinnernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynActivityData::clear_has_eatdinnernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynActivityData::clear_eatdinnernum() {
  eatdinnernum_ = 0u;
  clear_has_eatdinnernum();
}
inline ::google::protobuf::uint32 stSynActivityData::eatdinnernum() const {
  return eatdinnernum_;
}
inline void stSynActivityData::set_eatdinnernum(::google::protobuf::uint32 value) {
  set_has_eatdinnernum();
  eatdinnernum_ = value;
}

// -------------------------------------------------------------------

// stReqOpenCaptureTreasure

// optional uint32 charID = 1;
inline bool stReqOpenCaptureTreasure::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenCaptureTreasure::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenCaptureTreasure::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenCaptureTreasure::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOpenCaptureTreasure::charid() const {
  return charid_;
}
inline void stReqOpenCaptureTreasure::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynCaptureTreasureInfo

// optional uint32 resType = 1;
inline bool stSynCaptureTreasureInfo::has_restype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynCaptureTreasureInfo::set_has_restype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynCaptureTreasureInfo::clear_has_restype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynCaptureTreasureInfo::clear_restype() {
  restype_ = 0u;
  clear_has_restype();
}
inline ::google::protobuf::uint32 stSynCaptureTreasureInfo::restype() const {
  return restype_;
}
inline void stSynCaptureTreasureInfo::set_restype(::google::protobuf::uint32 value) {
  set_has_restype();
  restype_ = value;
}

// optional uint32 resNum = 2;
inline bool stSynCaptureTreasureInfo::has_resnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynCaptureTreasureInfo::set_has_resnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynCaptureTreasureInfo::clear_has_resnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynCaptureTreasureInfo::clear_resnum() {
  resnum_ = 0u;
  clear_has_resnum();
}
inline ::google::protobuf::uint32 stSynCaptureTreasureInfo::resnum() const {
  return resnum_;
}
inline void stSynCaptureTreasureInfo::set_resnum(::google::protobuf::uint32 value) {
  set_has_resnum();
  resnum_ = value;
}

// -------------------------------------------------------------------

// stRetCaptureTreasure

// repeated .MiscProto.stSynCaptureTreasureInfo tresures = 1;
inline int stRetCaptureTreasure::tresures_size() const {
  return tresures_.size();
}
inline void stRetCaptureTreasure::clear_tresures() {
  tresures_.Clear();
}
inline const ::MiscProto::stSynCaptureTreasureInfo& stRetCaptureTreasure::tresures(int index) const {
  return tresures_.Get(index);
}
inline ::MiscProto::stSynCaptureTreasureInfo* stRetCaptureTreasure::mutable_tresures(int index) {
  return tresures_.Mutable(index);
}
inline ::MiscProto::stSynCaptureTreasureInfo* stRetCaptureTreasure::add_tresures() {
  return tresures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynCaptureTreasureInfo >&
stRetCaptureTreasure::tresures() const {
  return tresures_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynCaptureTreasureInfo >*
stRetCaptureTreasure::mutable_tresures() {
  return &tresures_;
}

// optional uint32 remainTime = 2;
inline bool stRetCaptureTreasure::has_remaintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetCaptureTreasure::set_has_remaintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetCaptureTreasure::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetCaptureTreasure::clear_remaintime() {
  remaintime_ = 0u;
  clear_has_remaintime();
}
inline ::google::protobuf::uint32 stRetCaptureTreasure::remaintime() const {
  return remaintime_;
}
inline void stRetCaptureTreasure::set_remaintime(::google::protobuf::uint32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// -------------------------------------------------------------------

// stReqCombineTreasure

// optional uint32 combineType = 1;
inline bool stReqCombineTreasure::has_combinetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCombineTreasure::set_has_combinetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCombineTreasure::clear_has_combinetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCombineTreasure::clear_combinetype() {
  combinetype_ = 0u;
  clear_has_combinetype();
}
inline ::google::protobuf::uint32 stReqCombineTreasure::combinetype() const {
  return combinetype_;
}
inline void stReqCombineTreasure::set_combinetype(::google::protobuf::uint32 value) {
  set_has_combinetype();
  combinetype_ = value;
}

// -------------------------------------------------------------------

// stCombineTreasureResult

// optional .MiscProto.stCombineTreasureResult.eResult result = 1;
inline bool stCombineTreasureResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCombineTreasureResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCombineTreasureResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCombineTreasureResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stCombineTreasureResult_eResult stCombineTreasureResult::result() const {
  return static_cast< ::MiscProto::stCombineTreasureResult_eResult >(result_);
}
inline void stCombineTreasureResult::set_result(::MiscProto::stCombineTreasureResult_eResult value) {
  assert(::MiscProto::stCombineTreasureResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stBuyPeaceModuleTime

// optional .MiscProto.stBuyPeaceModuleTime.eType type = 1;
inline bool stBuyPeaceModuleTime::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuyPeaceModuleTime::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuyPeaceModuleTime::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuyPeaceModuleTime::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::MiscProto::stBuyPeaceModuleTime_eType stBuyPeaceModuleTime::type() const {
  return static_cast< ::MiscProto::stBuyPeaceModuleTime_eType >(type_);
}
inline void stBuyPeaceModuleTime::set_type(::MiscProto::stBuyPeaceModuleTime_eType value) {
  assert(::MiscProto::stBuyPeaceModuleTime_eType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 hour = 2;
inline bool stBuyPeaceModuleTime::has_hour() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBuyPeaceModuleTime::set_has_hour() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBuyPeaceModuleTime::clear_has_hour() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBuyPeaceModuleTime::clear_hour() {
  hour_ = 0u;
  clear_has_hour();
}
inline ::google::protobuf::uint32 stBuyPeaceModuleTime::hour() const {
  return hour_;
}
inline void stBuyPeaceModuleTime::set_hour(::google::protobuf::uint32 value) {
  set_has_hour();
  hour_ = value;
}

// -------------------------------------------------------------------

// stBuyPeaceModuleTimeResult

// optional .MiscProto.stBuyPeaceModuleTimeResult.eResult result = 1;
inline bool stBuyPeaceModuleTimeResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuyPeaceModuleTimeResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuyPeaceModuleTimeResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuyPeaceModuleTimeResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stBuyPeaceModuleTimeResult_eResult stBuyPeaceModuleTimeResult::result() const {
  return static_cast< ::MiscProto::stBuyPeaceModuleTimeResult_eResult >(result_);
}
inline void stBuyPeaceModuleTimeResult::set_result(::MiscProto::stBuyPeaceModuleTimeResult_eResult value) {
  assert(::MiscProto::stBuyPeaceModuleTimeResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 remainTime = 2;
inline bool stBuyPeaceModuleTimeResult::has_remaintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBuyPeaceModuleTimeResult::set_has_remaintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBuyPeaceModuleTimeResult::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBuyPeaceModuleTimeResult::clear_remaintime() {
  remaintime_ = 0u;
  clear_has_remaintime();
}
inline ::google::protobuf::uint32 stBuyPeaceModuleTimeResult::remaintime() const {
  return remaintime_;
}
inline void stBuyPeaceModuleTimeResult::set_remaintime(::google::protobuf::uint32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// -------------------------------------------------------------------

// stCaptureTreasureUserInfo

// optional uint32 charID = 1;
inline bool stCaptureTreasureUserInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCaptureTreasureUserInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCaptureTreasureUserInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCaptureTreasureUserInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCaptureTreasureUserInfo::charid() const {
  return charid_;
}
inline void stCaptureTreasureUserInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stCaptureTreasureUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCaptureTreasureUserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCaptureTreasureUserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCaptureTreasureUserInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stCaptureTreasureUserInfo::name() const {
  return *name_;
}
inline void stCaptureTreasureUserInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stCaptureTreasureUserInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stCaptureTreasureUserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCaptureTreasureUserInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stCaptureTreasureUserInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCaptureTreasureUserInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 3;
inline bool stCaptureTreasureUserInfo::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCaptureTreasureUserInfo::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCaptureTreasureUserInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCaptureTreasureUserInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stCaptureTreasureUserInfo::job() const {
  return job_;
}
inline void stCaptureTreasureUserInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 4;
inline bool stCaptureTreasureUserInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stCaptureTreasureUserInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stCaptureTreasureUserInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stCaptureTreasureUserInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stCaptureTreasureUserInfo::sex() const {
  return sex_;
}
inline void stCaptureTreasureUserInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 5;
inline bool stCaptureTreasureUserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stCaptureTreasureUserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stCaptureTreasureUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stCaptureTreasureUserInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stCaptureTreasureUserInfo::level() const {
  return level_;
}
inline void stCaptureTreasureUserInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 photoID = 6;
inline bool stCaptureTreasureUserInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stCaptureTreasureUserInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stCaptureTreasureUserInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stCaptureTreasureUserInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stCaptureTreasureUserInfo::photoid() const {
  return photoid_;
}
inline void stCaptureTreasureUserInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stReqChallengeUserList

// optional uint32 charID = 1;
inline bool stReqChallengeUserList::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqChallengeUserList::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqChallengeUserList::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqChallengeUserList::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqChallengeUserList::charid() const {
  return charid_;
}
inline void stReqChallengeUserList::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 resID = 2;
inline bool stReqChallengeUserList::has_resid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqChallengeUserList::set_has_resid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqChallengeUserList::clear_has_resid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqChallengeUserList::clear_resid() {
  resid_ = 0u;
  clear_has_resid();
}
inline ::google::protobuf::uint32 stReqChallengeUserList::resid() const {
  return resid_;
}
inline void stReqChallengeUserList::set_resid(::google::protobuf::uint32 value) {
  set_has_resid();
  resid_ = value;
}

// -------------------------------------------------------------------

// stRetChallengeUserList

// repeated .MiscProto.stCaptureTreasureUserInfo userInfo = 1;
inline int stRetChallengeUserList::userinfo_size() const {
  return userinfo_.size();
}
inline void stRetChallengeUserList::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::MiscProto::stCaptureTreasureUserInfo& stRetChallengeUserList::userinfo(int index) const {
  return userinfo_.Get(index);
}
inline ::MiscProto::stCaptureTreasureUserInfo* stRetChallengeUserList::mutable_userinfo(int index) {
  return userinfo_.Mutable(index);
}
inline ::MiscProto::stCaptureTreasureUserInfo* stRetChallengeUserList::add_userinfo() {
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stCaptureTreasureUserInfo >&
stRetChallengeUserList::userinfo() const {
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stCaptureTreasureUserInfo >*
stRetChallengeUserList::mutable_userinfo() {
  return &userinfo_;
}

// -------------------------------------------------------------------

// stCaptureUserTreasure

// optional uint32 charID = 1;
inline bool stCaptureUserTreasure::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCaptureUserTreasure::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCaptureUserTreasure::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCaptureUserTreasure::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCaptureUserTreasure::charid() const {
  return charid_;
}
inline void stCaptureUserTreasure::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 combineID = 2;
inline bool stCaptureUserTreasure::has_combineid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCaptureUserTreasure::set_has_combineid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCaptureUserTreasure::clear_has_combineid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCaptureUserTreasure::clear_combineid() {
  combineid_ = 0u;
  clear_has_combineid();
}
inline ::google::protobuf::uint32 stCaptureUserTreasure::combineid() const {
  return combineid_;
}
inline void stCaptureUserTreasure::set_combineid(::google::protobuf::uint32 value) {
  set_has_combineid();
  combineid_ = value;
}

// optional uint32 resType = 3;
inline bool stCaptureUserTreasure::has_restype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCaptureUserTreasure::set_has_restype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCaptureUserTreasure::clear_has_restype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCaptureUserTreasure::clear_restype() {
  restype_ = 0u;
  clear_has_restype();
}
inline ::google::protobuf::uint32 stCaptureUserTreasure::restype() const {
  return restype_;
}
inline void stCaptureUserTreasure::set_restype(::google::protobuf::uint32 value) {
  set_has_restype();
  restype_ = value;
}

// optional .MiscProto.eCaptureType type = 4;
inline bool stCaptureUserTreasure::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stCaptureUserTreasure::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stCaptureUserTreasure::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stCaptureUserTreasure::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::MiscProto::eCaptureType stCaptureUserTreasure::type() const {
  return static_cast< ::MiscProto::eCaptureType >(type_);
}
inline void stCaptureUserTreasure::set_type(::MiscProto::eCaptureType value) {
  assert(::MiscProto::eCaptureType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// stSynCaptureReward

// optional uint32 itemID = 1;
inline bool stSynCaptureReward::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynCaptureReward::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynCaptureReward::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynCaptureReward::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stSynCaptureReward::itemid() const {
  return itemid_;
}
inline void stSynCaptureReward::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stSynCaptureReward::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynCaptureReward::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynCaptureReward::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynCaptureReward::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynCaptureReward::num() const {
  return num_;
}
inline void stSynCaptureReward::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 goldCoin = 3;
inline bool stSynCaptureReward::has_goldcoin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynCaptureReward::set_has_goldcoin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynCaptureReward::clear_has_goldcoin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynCaptureReward::clear_goldcoin() {
  goldcoin_ = 0u;
  clear_has_goldcoin();
}
inline ::google::protobuf::uint32 stSynCaptureReward::goldcoin() const {
  return goldcoin_;
}
inline void stSynCaptureReward::set_goldcoin(::google::protobuf::uint32 value) {
  set_has_goldcoin();
  goldcoin_ = value;
}

// optional uint32 exp = 4;
inline bool stSynCaptureReward::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynCaptureReward::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynCaptureReward::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynCaptureReward::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 stSynCaptureReward::exp() const {
  return exp_;
}
inline void stSynCaptureReward::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// stCaptureUserTreasureResult

// optional .MiscProto.stCaptureUserTreasureResult.eResult result = 1;
inline bool stCaptureUserTreasureResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCaptureUserTreasureResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCaptureUserTreasureResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCaptureUserTreasureResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stCaptureUserTreasureResult_eResult stCaptureUserTreasureResult::result() const {
  return static_cast< ::MiscProto::stCaptureUserTreasureResult_eResult >(result_);
}
inline void stCaptureUserTreasureResult::set_result(::MiscProto::stCaptureUserTreasureResult_eResult value) {
  assert(::MiscProto::stCaptureUserTreasureResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional bool obtainPiece = 2;
inline bool stCaptureUserTreasureResult::has_obtainpiece() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCaptureUserTreasureResult::set_has_obtainpiece() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCaptureUserTreasureResult::clear_has_obtainpiece() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCaptureUserTreasureResult::clear_obtainpiece() {
  obtainpiece_ = false;
  clear_has_obtainpiece();
}
inline bool stCaptureUserTreasureResult::obtainpiece() const {
  return obtainpiece_;
}
inline void stCaptureUserTreasureResult::set_obtainpiece(bool value) {
  set_has_obtainpiece();
  obtainpiece_ = value;
}

// repeated .MiscProto.stSynCaptureReward rewards = 3;
inline int stCaptureUserTreasureResult::rewards_size() const {
  return rewards_.size();
}
inline void stCaptureUserTreasureResult::clear_rewards() {
  rewards_.Clear();
}
inline const ::MiscProto::stSynCaptureReward& stCaptureUserTreasureResult::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::MiscProto::stSynCaptureReward* stCaptureUserTreasureResult::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::MiscProto::stSynCaptureReward* stCaptureUserTreasureResult::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynCaptureReward >&
stCaptureUserTreasureResult::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynCaptureReward >*
stCaptureUserTreasureResult::mutable_rewards() {
  return &rewards_;
}

// optional .MiscProto.eCaptureType type = 4;
inline bool stCaptureUserTreasureResult::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stCaptureUserTreasureResult::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stCaptureUserTreasureResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stCaptureUserTreasureResult::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::MiscProto::eCaptureType stCaptureUserTreasureResult::type() const {
  return static_cast< ::MiscProto::eCaptureType >(type_);
}
inline void stCaptureUserTreasureResult::set_type(::MiscProto::eCaptureType value) {
  assert(::MiscProto::eCaptureType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// stSynTreasureNum

// optional uint32 resType = 1;
inline bool stSynTreasureNum::has_restype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynTreasureNum::set_has_restype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynTreasureNum::clear_has_restype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynTreasureNum::clear_restype() {
  restype_ = 0u;
  clear_has_restype();
}
inline ::google::protobuf::uint32 stSynTreasureNum::restype() const {
  return restype_;
}
inline void stSynTreasureNum::set_restype(::google::protobuf::uint32 value) {
  set_has_restype();
  restype_ = value;
}

// optional uint32 num = 2;
inline bool stSynTreasureNum::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynTreasureNum::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynTreasureNum::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynTreasureNum::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynTreasureNum::num() const {
  return num_;
}
inline void stSynTreasureNum::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stCancelActiveTitle

// optional uint32 charID = 1;
inline bool stCancelActiveTitle::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelActiveTitle::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelActiveTitle::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelActiveTitle::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCancelActiveTitle::charid() const {
  return charid_;
}
inline void stCancelActiveTitle::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stCancelActiveTitleResult

// optional bool success = 1;
inline bool stCancelActiveTitleResult::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelActiveTitleResult::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelActiveTitleResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelActiveTitleResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool stCancelActiveTitleResult::success() const {
  return success_;
}
inline void stCancelActiveTitleResult::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// stSynSpriteInfo

// optional uint32 spriteID = 1;
inline bool stSynSpriteInfo::has_spriteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynSpriteInfo::set_has_spriteid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynSpriteInfo::clear_has_spriteid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynSpriteInfo::clear_spriteid() {
  spriteid_ = 0u;
  clear_has_spriteid();
}
inline ::google::protobuf::uint32 stSynSpriteInfo::spriteid() const {
  return spriteid_;
}
inline void stSynSpriteInfo::set_spriteid(::google::protobuf::uint32 value) {
  set_has_spriteid();
  spriteid_ = value;
}

// optional uint32 level = 2;
inline bool stSynSpriteInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynSpriteInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynSpriteInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynSpriteInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynSpriteInfo::level() const {
  return level_;
}
inline void stSynSpriteInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// stSynAllSprite

// repeated .MiscProto.stSynSpriteInfo data = 1;
inline int stSynAllSprite::data_size() const {
  return data_.size();
}
inline void stSynAllSprite::clear_data() {
  data_.Clear();
}
inline const ::MiscProto::stSynSpriteInfo& stSynAllSprite::data(int index) const {
  return data_.Get(index);
}
inline ::MiscProto::stSynSpriteInfo* stSynAllSprite::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::MiscProto::stSynSpriteInfo* stSynAllSprite::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSpriteInfo >&
stSynAllSprite::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSpriteInfo >*
stSynAllSprite::mutable_data() {
  return &data_;
}

// optional uint32 followSpriteID = 2;
inline bool stSynAllSprite::has_followspriteid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynAllSprite::set_has_followspriteid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynAllSprite::clear_has_followspriteid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynAllSprite::clear_followspriteid() {
  followspriteid_ = 0u;
  clear_has_followspriteid();
}
inline ::google::protobuf::uint32 stSynAllSprite::followspriteid() const {
  return followspriteid_;
}
inline void stSynAllSprite::set_followspriteid(::google::protobuf::uint32 value) {
  set_has_followspriteid();
  followspriteid_ = value;
}

// -------------------------------------------------------------------

// stReqUnlockedSprite

// optional uint32 spriteID = 1;
inline bool stReqUnlockedSprite::has_spriteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqUnlockedSprite::set_has_spriteid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqUnlockedSprite::clear_has_spriteid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqUnlockedSprite::clear_spriteid() {
  spriteid_ = 0u;
  clear_has_spriteid();
}
inline ::google::protobuf::uint32 stReqUnlockedSprite::spriteid() const {
  return spriteid_;
}
inline void stReqUnlockedSprite::set_spriteid(::google::protobuf::uint32 value) {
  set_has_spriteid();
  spriteid_ = value;
}

// -------------------------------------------------------------------

// stUnlockedSpriteResult

// optional .MiscProto.stUnlockedSpriteResult.eResult result = 1;
inline bool stUnlockedSpriteResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUnlockedSpriteResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUnlockedSpriteResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUnlockedSpriteResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stUnlockedSpriteResult_eResult stUnlockedSpriteResult::result() const {
  return static_cast< ::MiscProto::stUnlockedSpriteResult_eResult >(result_);
}
inline void stUnlockedSpriteResult::set_result(::MiscProto::stUnlockedSpriteResult_eResult value) {
  assert(::MiscProto::stUnlockedSpriteResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 spriteID = 2;
inline bool stUnlockedSpriteResult::has_spriteid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUnlockedSpriteResult::set_has_spriteid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUnlockedSpriteResult::clear_has_spriteid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUnlockedSpriteResult::clear_spriteid() {
  spriteid_ = 0u;
  clear_has_spriteid();
}
inline ::google::protobuf::uint32 stUnlockedSpriteResult::spriteid() const {
  return spriteid_;
}
inline void stUnlockedSpriteResult::set_spriteid(::google::protobuf::uint32 value) {
  set_has_spriteid();
  spriteid_ = value;
}

// -------------------------------------------------------------------

// stAddSprite

// optional .MiscProto.stSynSpriteInfo sprite = 1;
inline bool stAddSprite::has_sprite() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddSprite::set_has_sprite() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddSprite::clear_has_sprite() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddSprite::clear_sprite() {
  if (sprite_ != NULL) sprite_->::MiscProto::stSynSpriteInfo::Clear();
  clear_has_sprite();
}
inline const ::MiscProto::stSynSpriteInfo& stAddSprite::sprite() const {
  return sprite_ != NULL ? *sprite_ : *default_instance_->sprite_;
}
inline ::MiscProto::stSynSpriteInfo* stAddSprite::mutable_sprite() {
  set_has_sprite();
  if (sprite_ == NULL) sprite_ = new ::MiscProto::stSynSpriteInfo;
  return sprite_;
}
inline ::MiscProto::stSynSpriteInfo* stAddSprite::release_sprite() {
  clear_has_sprite();
  ::MiscProto::stSynSpriteInfo* temp = sprite_;
  sprite_ = NULL;
  return temp;
}
inline void stAddSprite::set_allocated_sprite(::MiscProto::stSynSpriteInfo* sprite) {
  delete sprite_;
  sprite_ = sprite;
  if (sprite) {
    set_has_sprite();
  } else {
    clear_has_sprite();
  }
}

// -------------------------------------------------------------------

// stReqLevelupSprite

// optional uint32 spriteID = 1;
inline bool stReqLevelupSprite::has_spriteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLevelupSprite::set_has_spriteid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLevelupSprite::clear_has_spriteid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLevelupSprite::clear_spriteid() {
  spriteid_ = 0u;
  clear_has_spriteid();
}
inline ::google::protobuf::uint32 stReqLevelupSprite::spriteid() const {
  return spriteid_;
}
inline void stReqLevelupSprite::set_spriteid(::google::protobuf::uint32 value) {
  set_has_spriteid();
  spriteid_ = value;
}

// -------------------------------------------------------------------

// stLevelupSpriteResult

// optional uint32 spriteID = 1;
inline bool stLevelupSpriteResult::has_spriteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLevelupSpriteResult::set_has_spriteid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLevelupSpriteResult::clear_has_spriteid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLevelupSpriteResult::clear_spriteid() {
  spriteid_ = 0u;
  clear_has_spriteid();
}
inline ::google::protobuf::uint32 stLevelupSpriteResult::spriteid() const {
  return spriteid_;
}
inline void stLevelupSpriteResult::set_spriteid(::google::protobuf::uint32 value) {
  set_has_spriteid();
  spriteid_ = value;
}

// optional .MiscProto.stLevelupSpriteResult.eResult result = 2;
inline bool stLevelupSpriteResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLevelupSpriteResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLevelupSpriteResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLevelupSpriteResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stLevelupSpriteResult_eResult stLevelupSpriteResult::result() const {
  return static_cast< ::MiscProto::stLevelupSpriteResult_eResult >(result_);
}
inline void stLevelupSpriteResult::set_result(::MiscProto::stLevelupSpriteResult_eResult value) {
  assert(::MiscProto::stLevelupSpriteResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 curLv = 3;
inline bool stLevelupSpriteResult::has_curlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stLevelupSpriteResult::set_has_curlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stLevelupSpriteResult::clear_has_curlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stLevelupSpriteResult::clear_curlv() {
  curlv_ = 0u;
  clear_has_curlv();
}
inline ::google::protobuf::uint32 stLevelupSpriteResult::curlv() const {
  return curlv_;
}
inline void stLevelupSpriteResult::set_curlv(::google::protobuf::uint32 value) {
  set_has_curlv();
  curlv_ = value;
}

// -------------------------------------------------------------------

// stSpriteFollowMaster

// optional uint32 spriteID = 1;
inline bool stSpriteFollowMaster::has_spriteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSpriteFollowMaster::set_has_spriteid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSpriteFollowMaster::clear_has_spriteid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSpriteFollowMaster::clear_spriteid() {
  spriteid_ = 0u;
  clear_has_spriteid();
}
inline ::google::protobuf::uint32 stSpriteFollowMaster::spriteid() const {
  return spriteid_;
}
inline void stSpriteFollowMaster::set_spriteid(::google::protobuf::uint32 value) {
  set_has_spriteid();
  spriteid_ = value;
}

// -------------------------------------------------------------------

// stSpriteFollowMasterResult

// optional .MiscProto.stSpriteFollowMasterResult.eResult result = 1;
inline bool stSpriteFollowMasterResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSpriteFollowMasterResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSpriteFollowMasterResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSpriteFollowMasterResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stSpriteFollowMasterResult_eResult stSpriteFollowMasterResult::result() const {
  return static_cast< ::MiscProto::stSpriteFollowMasterResult_eResult >(result_);
}
inline void stSpriteFollowMasterResult::set_result(::MiscProto::stSpriteFollowMasterResult_eResult value) {
  assert(::MiscProto::stSpriteFollowMasterResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 spriteID = 2;
inline bool stSpriteFollowMasterResult::has_spriteid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSpriteFollowMasterResult::set_has_spriteid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSpriteFollowMasterResult::clear_has_spriteid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSpriteFollowMasterResult::clear_spriteid() {
  spriteid_ = 0u;
  clear_has_spriteid();
}
inline ::google::protobuf::uint32 stSpriteFollowMasterResult::spriteid() const {
  return spriteid_;
}
inline void stSpriteFollowMasterResult::set_spriteid(::google::protobuf::uint32 value) {
  set_has_spriteid();
  spriteid_ = value;
}

// -------------------------------------------------------------------

// stReqAvaibleActivity

// optional uint32 charID = 1;
inline bool stReqAvaibleActivity::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAvaibleActivity::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAvaibleActivity::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAvaibleActivity::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqAvaibleActivity::charid() const {
  return charid_;
}
inline void stReqAvaibleActivity::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynActivityStepReward

// optional uint32 itemID = 1;
inline bool stSynActivityStepReward::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynActivityStepReward::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynActivityStepReward::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynActivityStepReward::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stSynActivityStepReward::itemid() const {
  return itemid_;
}
inline void stSynActivityStepReward::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stSynActivityStepReward::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynActivityStepReward::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynActivityStepReward::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynActivityStepReward::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynActivityStepReward::num() const {
  return num_;
}
inline void stSynActivityStepReward::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSynActivityStepOptionalReward

// repeated .MiscProto.stSynActivityStepReward rewards = 1;
inline int stSynActivityStepOptionalReward::rewards_size() const {
  return rewards_.size();
}
inline void stSynActivityStepOptionalReward::clear_rewards() {
  rewards_.Clear();
}
inline const ::MiscProto::stSynActivityStepReward& stSynActivityStepOptionalReward::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::MiscProto::stSynActivityStepReward* stSynActivityStepOptionalReward::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::MiscProto::stSynActivityStepReward* stSynActivityStepOptionalReward::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepReward >&
stSynActivityStepOptionalReward::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepReward >*
stSynActivityStepOptionalReward::mutable_rewards() {
  return &rewards_;
}

// -------------------------------------------------------------------

// stSynActivityStepInfo

// optional uint32 stepID = 1;
inline bool stSynActivityStepInfo::has_stepid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynActivityStepInfo::set_has_stepid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynActivityStepInfo::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynActivityStepInfo::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stSynActivityStepInfo::stepid() const {
  return stepid_;
}
inline void stSynActivityStepInfo::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// optional string stepDesc = 2;
inline bool stSynActivityStepInfo::has_stepdesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynActivityStepInfo::set_has_stepdesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynActivityStepInfo::clear_has_stepdesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynActivityStepInfo::clear_stepdesc() {
  if (stepdesc_ != &::google::protobuf::internal::kEmptyString) {
    stepdesc_->clear();
  }
  clear_has_stepdesc();
}
inline const ::std::string& stSynActivityStepInfo::stepdesc() const {
  return *stepdesc_;
}
inline void stSynActivityStepInfo::set_stepdesc(const ::std::string& value) {
  set_has_stepdesc();
  if (stepdesc_ == &::google::protobuf::internal::kEmptyString) {
    stepdesc_ = new ::std::string;
  }
  stepdesc_->assign(value);
}
inline void stSynActivityStepInfo::set_stepdesc(const char* value) {
  set_has_stepdesc();
  if (stepdesc_ == &::google::protobuf::internal::kEmptyString) {
    stepdesc_ = new ::std::string;
  }
  stepdesc_->assign(value);
}
inline void stSynActivityStepInfo::set_stepdesc(const char* value, size_t size) {
  set_has_stepdesc();
  if (stepdesc_ == &::google::protobuf::internal::kEmptyString) {
    stepdesc_ = new ::std::string;
  }
  stepdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynActivityStepInfo::mutable_stepdesc() {
  set_has_stepdesc();
  if (stepdesc_ == &::google::protobuf::internal::kEmptyString) {
    stepdesc_ = new ::std::string;
  }
  return stepdesc_;
}
inline ::std::string* stSynActivityStepInfo::release_stepdesc() {
  clear_has_stepdesc();
  if (stepdesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stepdesc_;
    stepdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynActivityStepInfo::set_allocated_stepdesc(::std::string* stepdesc) {
  if (stepdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete stepdesc_;
  }
  if (stepdesc) {
    set_has_stepdesc();
    stepdesc_ = stepdesc;
  } else {
    clear_has_stepdesc();
    stepdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .MiscProto.stSynActivityStepOptionalReward optionals = 3;
inline int stSynActivityStepInfo::optionals_size() const {
  return optionals_.size();
}
inline void stSynActivityStepInfo::clear_optionals() {
  optionals_.Clear();
}
inline const ::MiscProto::stSynActivityStepOptionalReward& stSynActivityStepInfo::optionals(int index) const {
  return optionals_.Get(index);
}
inline ::MiscProto::stSynActivityStepOptionalReward* stSynActivityStepInfo::mutable_optionals(int index) {
  return optionals_.Mutable(index);
}
inline ::MiscProto::stSynActivityStepOptionalReward* stSynActivityStepInfo::add_optionals() {
  return optionals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepOptionalReward >&
stSynActivityStepInfo::optionals() const {
  return optionals_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepOptionalReward >*
stSynActivityStepInfo::mutable_optionals() {
  return &optionals_;
}

// -------------------------------------------------------------------

// stSynActivityInfo

// optional uint32 id = 1;
inline bool stSynActivityInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynActivityInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynActivityInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynActivityInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stSynActivityInfo::id() const {
  return id_;
}
inline void stSynActivityInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 type = 2;
inline bool stSynActivityInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynActivityInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynActivityInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynActivityInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 stSynActivityInfo::type() const {
  return type_;
}
inline void stSynActivityInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string title = 3;
inline bool stSynActivityInfo::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynActivityInfo::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynActivityInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynActivityInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& stSynActivityInfo::title() const {
  return *title_;
}
inline void stSynActivityInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void stSynActivityInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void stSynActivityInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynActivityInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* stSynActivityInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynActivityInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string desc = 4;
inline bool stSynActivityInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynActivityInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynActivityInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynActivityInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& stSynActivityInfo::desc() const {
  return *desc_;
}
inline void stSynActivityInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stSynActivityInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stSynActivityInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynActivityInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* stSynActivityInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynActivityInfo::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 curVal = 5;
inline bool stSynActivityInfo::has_curval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynActivityInfo::set_has_curval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynActivityInfo::clear_has_curval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynActivityInfo::clear_curval() {
  curval_ = 0u;
  clear_has_curval();
}
inline ::google::protobuf::uint32 stSynActivityInfo::curval() const {
  return curval_;
}
inline void stSynActivityInfo::set_curval(::google::protobuf::uint32 value) {
  set_has_curval();
  curval_ = value;
}

// repeated uint32 finishStep = 6;
inline int stSynActivityInfo::finishstep_size() const {
  return finishstep_.size();
}
inline void stSynActivityInfo::clear_finishstep() {
  finishstep_.Clear();
}
inline ::google::protobuf::uint32 stSynActivityInfo::finishstep(int index) const {
  return finishstep_.Get(index);
}
inline void stSynActivityInfo::set_finishstep(int index, ::google::protobuf::uint32 value) {
  finishstep_.Set(index, value);
}
inline void stSynActivityInfo::add_finishstep(::google::protobuf::uint32 value) {
  finishstep_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stSynActivityInfo::finishstep() const {
  return finishstep_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stSynActivityInfo::mutable_finishstep() {
  return &finishstep_;
}

// repeated .MiscProto.stSynActivityStepInfo avaibleStep = 7;
inline int stSynActivityInfo::avaiblestep_size() const {
  return avaiblestep_.size();
}
inline void stSynActivityInfo::clear_avaiblestep() {
  avaiblestep_.Clear();
}
inline const ::MiscProto::stSynActivityStepInfo& stSynActivityInfo::avaiblestep(int index) const {
  return avaiblestep_.Get(index);
}
inline ::MiscProto::stSynActivityStepInfo* stSynActivityInfo::mutable_avaiblestep(int index) {
  return avaiblestep_.Mutable(index);
}
inline ::MiscProto::stSynActivityStepInfo* stSynActivityInfo::add_avaiblestep() {
  return avaiblestep_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepInfo >&
stSynActivityInfo::avaiblestep() const {
  return avaiblestep_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityStepInfo >*
stSynActivityInfo::mutable_avaiblestep() {
  return &avaiblestep_;
}

// -------------------------------------------------------------------

// stRetAvaibleActivity

// repeated .MiscProto.stSynActivityInfo activities = 1;
inline int stRetAvaibleActivity::activities_size() const {
  return activities_.size();
}
inline void stRetAvaibleActivity::clear_activities() {
  activities_.Clear();
}
inline const ::MiscProto::stSynActivityInfo& stRetAvaibleActivity::activities(int index) const {
  return activities_.Get(index);
}
inline ::MiscProto::stSynActivityInfo* stRetAvaibleActivity::mutable_activities(int index) {
  return activities_.Mutable(index);
}
inline ::MiscProto::stSynActivityInfo* stRetAvaibleActivity::add_activities() {
  return activities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityInfo >&
stRetAvaibleActivity::activities() const {
  return activities_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynActivityInfo >*
stRetAvaibleActivity::mutable_activities() {
  return &activities_;
}

// -------------------------------------------------------------------

// stReqAcitivityReward

// optional uint32 id = 1;
inline bool stReqAcitivityReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAcitivityReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAcitivityReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAcitivityReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqAcitivityReward::id() const {
  return id_;
}
inline void stReqAcitivityReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 stepID = 2;
inline bool stReqAcitivityReward::has_stepid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqAcitivityReward::set_has_stepid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqAcitivityReward::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqAcitivityReward::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stReqAcitivityReward::stepid() const {
  return stepid_;
}
inline void stReqAcitivityReward::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// optional uint32 selIndex = 3;
inline bool stReqAcitivityReward::has_selindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqAcitivityReward::set_has_selindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqAcitivityReward::clear_has_selindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqAcitivityReward::clear_selindex() {
  selindex_ = 0u;
  clear_has_selindex();
}
inline ::google::protobuf::uint32 stReqAcitivityReward::selindex() const {
  return selindex_;
}
inline void stReqAcitivityReward::set_selindex(::google::protobuf::uint32 value) {
  set_has_selindex();
  selindex_ = value;
}

// -------------------------------------------------------------------

// stActivityRewardResult

// optional uint32 id = 1;
inline bool stActivityRewardResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stActivityRewardResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stActivityRewardResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stActivityRewardResult::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stActivityRewardResult::id() const {
  return id_;
}
inline void stActivityRewardResult::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 stepID = 2;
inline bool stActivityRewardResult::has_stepid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stActivityRewardResult::set_has_stepid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stActivityRewardResult::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stActivityRewardResult::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stActivityRewardResult::stepid() const {
  return stepid_;
}
inline void stActivityRewardResult::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// optional .MiscProto.stActivityRewardResult.eResult result = 3;
inline bool stActivityRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stActivityRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stActivityRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stActivityRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stActivityRewardResult_eResult stActivityRewardResult::result() const {
  return static_cast< ::MiscProto::stActivityRewardResult_eResult >(result_);
}
inline void stActivityRewardResult::set_result(::MiscProto::stActivityRewardResult_eResult value) {
  assert(::MiscProto::stActivityRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqWorldBossDamageRank

// optional uint32 fromRank = 1;
inline bool stReqWorldBossDamageRank::has_fromrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqWorldBossDamageRank::set_has_fromrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqWorldBossDamageRank::clear_has_fromrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqWorldBossDamageRank::clear_fromrank() {
  fromrank_ = 0u;
  clear_has_fromrank();
}
inline ::google::protobuf::uint32 stReqWorldBossDamageRank::fromrank() const {
  return fromrank_;
}
inline void stReqWorldBossDamageRank::set_fromrank(::google::protobuf::uint32 value) {
  set_has_fromrank();
  fromrank_ = value;
}

// -------------------------------------------------------------------

// stWorldBossDamageSortItem

// optional uint32 charID = 1;
inline bool stWorldBossDamageSortItem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stWorldBossDamageSortItem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stWorldBossDamageSortItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stWorldBossDamageSortItem::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stWorldBossDamageSortItem::charid() const {
  return charid_;
}
inline void stWorldBossDamageSortItem::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stWorldBossDamageSortItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stWorldBossDamageSortItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stWorldBossDamageSortItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stWorldBossDamageSortItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stWorldBossDamageSortItem::name() const {
  return *name_;
}
inline void stWorldBossDamageSortItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stWorldBossDamageSortItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stWorldBossDamageSortItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stWorldBossDamageSortItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stWorldBossDamageSortItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stWorldBossDamageSortItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 3;
inline bool stWorldBossDamageSortItem::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stWorldBossDamageSortItem::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stWorldBossDamageSortItem::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stWorldBossDamageSortItem::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stWorldBossDamageSortItem::job() const {
  return job_;
}
inline void stWorldBossDamageSortItem::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 4;
inline bool stWorldBossDamageSortItem::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stWorldBossDamageSortItem::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stWorldBossDamageSortItem::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stWorldBossDamageSortItem::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stWorldBossDamageSortItem::sex() const {
  return sex_;
}
inline void stWorldBossDamageSortItem::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 damage = 5;
inline bool stWorldBossDamageSortItem::has_damage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stWorldBossDamageSortItem::set_has_damage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stWorldBossDamageSortItem::clear_has_damage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stWorldBossDamageSortItem::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 stWorldBossDamageSortItem::damage() const {
  return damage_;
}
inline void stWorldBossDamageSortItem::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// optional uint32 photoID = 6;
inline bool stWorldBossDamageSortItem::has_photoid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stWorldBossDamageSortItem::set_has_photoid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stWorldBossDamageSortItem::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stWorldBossDamageSortItem::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stWorldBossDamageSortItem::photoid() const {
  return photoid_;
}
inline void stWorldBossDamageSortItem::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stRetWorldBossDamageRank

// repeated .MiscProto.stWorldBossDamageSortItem sortItem = 1;
inline int stRetWorldBossDamageRank::sortitem_size() const {
  return sortitem_.size();
}
inline void stRetWorldBossDamageRank::clear_sortitem() {
  sortitem_.Clear();
}
inline const ::MiscProto::stWorldBossDamageSortItem& stRetWorldBossDamageRank::sortitem(int index) const {
  return sortitem_.Get(index);
}
inline ::MiscProto::stWorldBossDamageSortItem* stRetWorldBossDamageRank::mutable_sortitem(int index) {
  return sortitem_.Mutable(index);
}
inline ::MiscProto::stWorldBossDamageSortItem* stRetWorldBossDamageRank::add_sortitem() {
  return sortitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stWorldBossDamageSortItem >&
stRetWorldBossDamageRank::sortitem() const {
  return sortitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stWorldBossDamageSortItem >*
stRetWorldBossDamageRank::mutable_sortitem() {
  return &sortitem_;
}

// optional uint32 fromRank = 2;
inline bool stRetWorldBossDamageRank::has_fromrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetWorldBossDamageRank::set_has_fromrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetWorldBossDamageRank::clear_has_fromrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetWorldBossDamageRank::clear_fromrank() {
  fromrank_ = 0u;
  clear_has_fromrank();
}
inline ::google::protobuf::uint32 stRetWorldBossDamageRank::fromrank() const {
  return fromrank_;
}
inline void stRetWorldBossDamageRank::set_fromrank(::google::protobuf::uint32 value) {
  set_has_fromrank();
  fromrank_ = value;
}

// optional uint32 myRank = 3;
inline bool stRetWorldBossDamageRank::has_myrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetWorldBossDamageRank::set_has_myrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetWorldBossDamageRank::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetWorldBossDamageRank::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 stRetWorldBossDamageRank::myrank() const {
  return myrank_;
}
inline void stRetWorldBossDamageRank::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// -------------------------------------------------------------------

// stReqOpenWorldBossWin

// optional uint32 charID = 1;
inline bool stReqOpenWorldBossWin::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenWorldBossWin::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenWorldBossWin::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenWorldBossWin::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOpenWorldBossWin::charid() const {
  return charid_;
}
inline void stReqOpenWorldBossWin::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetOpenWorldBossWin

// optional uint32 reliveRemainTime = 1;
inline bool stRetOpenWorldBossWin::has_reliveremaintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetOpenWorldBossWin::set_has_reliveremaintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetOpenWorldBossWin::clear_has_reliveremaintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetOpenWorldBossWin::clear_reliveremaintime() {
  reliveremaintime_ = 0u;
  clear_has_reliveremaintime();
}
inline ::google::protobuf::uint32 stRetOpenWorldBossWin::reliveremaintime() const {
  return reliveremaintime_;
}
inline void stRetOpenWorldBossWin::set_reliveremaintime(::google::protobuf::uint32 value) {
  set_has_reliveremaintime();
  reliveremaintime_ = value;
}

// optional uint32 buyNum = 2;
inline bool stRetOpenWorldBossWin::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetOpenWorldBossWin::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetOpenWorldBossWin::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetOpenWorldBossWin::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 stRetOpenWorldBossWin::buynum() const {
  return buynum_;
}
inline void stRetOpenWorldBossWin::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
}

// optional uint32 beginTime = 3;
inline bool stRetOpenWorldBossWin::has_begintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetOpenWorldBossWin::set_has_begintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetOpenWorldBossWin::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetOpenWorldBossWin::clear_begintime() {
  begintime_ = 0u;
  clear_has_begintime();
}
inline ::google::protobuf::uint32 stRetOpenWorldBossWin::begintime() const {
  return begintime_;
}
inline void stRetOpenWorldBossWin::set_begintime(::google::protobuf::uint32 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional uint32 endTime = 4;
inline bool stRetOpenWorldBossWin::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetOpenWorldBossWin::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetOpenWorldBossWin::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetOpenWorldBossWin::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 stRetOpenWorldBossWin::endtime() const {
  return endtime_;
}
inline void stRetOpenWorldBossWin::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional uint32 bossID = 5;
inline bool stRetOpenWorldBossWin::has_bossid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetOpenWorldBossWin::set_has_bossid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetOpenWorldBossWin::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetOpenWorldBossWin::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 stRetOpenWorldBossWin::bossid() const {
  return bossid_;
}
inline void stRetOpenWorldBossWin::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional uint32 hp = 6;
inline bool stRetOpenWorldBossWin::has_hp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetOpenWorldBossWin::set_has_hp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetOpenWorldBossWin::clear_has_hp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetOpenWorldBossWin::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 stRetOpenWorldBossWin::hp() const {
  return hp_;
}
inline void stRetOpenWorldBossWin::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// optional uint32 stepID = 7;
inline bool stRetOpenWorldBossWin::has_stepid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRetOpenWorldBossWin::set_has_stepid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRetOpenWorldBossWin::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRetOpenWorldBossWin::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stRetOpenWorldBossWin::stepid() const {
  return stepid_;
}
inline void stRetOpenWorldBossWin::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// optional bool tomorrow = 8;
inline bool stRetOpenWorldBossWin::has_tomorrow() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stRetOpenWorldBossWin::set_has_tomorrow() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stRetOpenWorldBossWin::clear_has_tomorrow() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stRetOpenWorldBossWin::clear_tomorrow() {
  tomorrow_ = false;
  clear_has_tomorrow();
}
inline bool stRetOpenWorldBossWin::tomorrow() const {
  return tomorrow_;
}
inline void stRetOpenWorldBossWin::set_tomorrow(bool value) {
  set_has_tomorrow();
  tomorrow_ = value;
}

// optional string killerName = 9;
inline bool stRetOpenWorldBossWin::has_killername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stRetOpenWorldBossWin::set_has_killername() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stRetOpenWorldBossWin::clear_has_killername() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stRetOpenWorldBossWin::clear_killername() {
  if (killername_ != &::google::protobuf::internal::kEmptyString) {
    killername_->clear();
  }
  clear_has_killername();
}
inline const ::std::string& stRetOpenWorldBossWin::killername() const {
  return *killername_;
}
inline void stRetOpenWorldBossWin::set_killername(const ::std::string& value) {
  set_has_killername();
  if (killername_ == &::google::protobuf::internal::kEmptyString) {
    killername_ = new ::std::string;
  }
  killername_->assign(value);
}
inline void stRetOpenWorldBossWin::set_killername(const char* value) {
  set_has_killername();
  if (killername_ == &::google::protobuf::internal::kEmptyString) {
    killername_ = new ::std::string;
  }
  killername_->assign(value);
}
inline void stRetOpenWorldBossWin::set_killername(const char* value, size_t size) {
  set_has_killername();
  if (killername_ == &::google::protobuf::internal::kEmptyString) {
    killername_ = new ::std::string;
  }
  killername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetOpenWorldBossWin::mutable_killername() {
  set_has_killername();
  if (killername_ == &::google::protobuf::internal::kEmptyString) {
    killername_ = new ::std::string;
  }
  return killername_;
}
inline ::std::string* stRetOpenWorldBossWin::release_killername() {
  clear_has_killername();
  if (killername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = killername_;
    killername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetOpenWorldBossWin::set_allocated_killername(::std::string* killername) {
  if (killername_ != &::google::protobuf::internal::kEmptyString) {
    delete killername_;
  }
  if (killername) {
    set_has_killername();
    killername_ = killername;
  } else {
    clear_has_killername();
    killername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqBossWorldMatch

// optional uint32 charID = 1;
inline bool stReqBossWorldMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBossWorldMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBossWorldMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBossWorldMatch::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqBossWorldMatch::charid() const {
  return charid_;
}
inline void stReqBossWorldMatch::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetBossWorldMatch

// optional .MiscProto.stRetBossWorldMatch.eResult result = 1;
inline bool stRetBossWorldMatch::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetBossWorldMatch::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetBossWorldMatch::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetBossWorldMatch::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetBossWorldMatch_eResult stRetBossWorldMatch::result() const {
  return static_cast< ::MiscProto::stRetBossWorldMatch_eResult >(result_);
}
inline void stRetBossWorldMatch::set_result(::MiscProto::stRetBossWorldMatch_eResult value) {
  assert(::MiscProto::stRetBossWorldMatch_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqClearWorldBossActivityCD

// optional uint32 charID = 1;
inline bool stReqClearWorldBossActivityCD::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqClearWorldBossActivityCD::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqClearWorldBossActivityCD::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqClearWorldBossActivityCD::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqClearWorldBossActivityCD::charid() const {
  return charid_;
}
inline void stReqClearWorldBossActivityCD::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stClearWorldBossActivityCDResult

// optional .MiscProto.stClearWorldBossActivityCDResult.eResult result = 1;
inline bool stClearWorldBossActivityCDResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stClearWorldBossActivityCDResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stClearWorldBossActivityCDResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stClearWorldBossActivityCDResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stClearWorldBossActivityCDResult_eResult stClearWorldBossActivityCDResult::result() const {
  return static_cast< ::MiscProto::stClearWorldBossActivityCDResult_eResult >(result_);
}
inline void stClearWorldBossActivityCDResult::set_result(::MiscProto::stClearWorldBossActivityCDResult_eResult value) {
  assert(::MiscProto::stClearWorldBossActivityCDResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRaiseDamageInWorldBoss

// optional uint32 charID = 1;
inline bool stReqRaiseDamageInWorldBoss::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRaiseDamageInWorldBoss::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRaiseDamageInWorldBoss::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRaiseDamageInWorldBoss::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRaiseDamageInWorldBoss::charid() const {
  return charid_;
}
inline void stReqRaiseDamageInWorldBoss::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRaiseDamageInWorldBossResult

// optional .MiscProto.stRaiseDamageInWorldBossResult.eResult result = 1;
inline bool stRaiseDamageInWorldBossResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRaiseDamageInWorldBossResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRaiseDamageInWorldBossResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRaiseDamageInWorldBossResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRaiseDamageInWorldBossResult_eResult stRaiseDamageInWorldBossResult::result() const {
  return static_cast< ::MiscProto::stRaiseDamageInWorldBossResult_eResult >(result_);
}
inline void stRaiseDamageInWorldBossResult::set_result(::MiscProto::stRaiseDamageInWorldBossResult_eResult value) {
  assert(::MiscProto::stRaiseDamageInWorldBossResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stCancelWorldBossMatch

// optional uint32 charID = 1;
inline bool stCancelWorldBossMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelWorldBossMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelWorldBossMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelWorldBossMatch::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCancelWorldBossMatch::charid() const {
  return charid_;
}
inline void stCancelWorldBossMatch::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stCancelWorldBossMatchResult

// optional .MiscProto.stCancelWorldBossMatchResult.eResult result = 1;
inline bool stCancelWorldBossMatchResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelWorldBossMatchResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelWorldBossMatchResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelWorldBossMatchResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stCancelWorldBossMatchResult_eResult stCancelWorldBossMatchResult::result() const {
  return static_cast< ::MiscProto::stCancelWorldBossMatchResult_eResult >(result_);
}
inline void stCancelWorldBossMatchResult::set_result(::MiscProto::stCancelWorldBossMatchResult_eResult value) {
  assert(::MiscProto::stCancelWorldBossMatchResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stQueryDrawHeroActivity

// optional uint32 charID = 1;
inline bool stQueryDrawHeroActivity::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stQueryDrawHeroActivity::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stQueryDrawHeroActivity::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stQueryDrawHeroActivity::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stQueryDrawHeroActivity::charid() const {
  return charid_;
}
inline void stQueryDrawHeroActivity::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetDrawHeroActivityInfo

// optional uint32 heroID = 1;
inline bool stRetDrawHeroActivityInfo::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDrawHeroActivityInfo::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDrawHeroActivityInfo::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDrawHeroActivityInfo::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stRetDrawHeroActivityInfo::heroid() const {
  return heroid_;
}
inline void stRetDrawHeroActivityInfo::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 beginTime = 2;
inline bool stRetDrawHeroActivityInfo::has_begintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetDrawHeroActivityInfo::set_has_begintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetDrawHeroActivityInfo::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetDrawHeroActivityInfo::clear_begintime() {
  begintime_ = 0u;
  clear_has_begintime();
}
inline ::google::protobuf::uint32 stRetDrawHeroActivityInfo::begintime() const {
  return begintime_;
}
inline void stRetDrawHeroActivityInfo::set_begintime(::google::protobuf::uint32 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional uint32 endTime = 3;
inline bool stRetDrawHeroActivityInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetDrawHeroActivityInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetDrawHeroActivityInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetDrawHeroActivityInfo::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 stRetDrawHeroActivityInfo::endtime() const {
  return endtime_;
}
inline void stRetDrawHeroActivityInfo::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
}

// repeated uint32 rewardIDs = 4;
inline int stRetDrawHeroActivityInfo::rewardids_size() const {
  return rewardids_.size();
}
inline void stRetDrawHeroActivityInfo::clear_rewardids() {
  rewardids_.Clear();
}
inline ::google::protobuf::uint32 stRetDrawHeroActivityInfo::rewardids(int index) const {
  return rewardids_.Get(index);
}
inline void stRetDrawHeroActivityInfo::set_rewardids(int index, ::google::protobuf::uint32 value) {
  rewardids_.Set(index, value);
}
inline void stRetDrawHeroActivityInfo::add_rewardids(::google::protobuf::uint32 value) {
  rewardids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stRetDrawHeroActivityInfo::rewardids() const {
  return rewardids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stRetDrawHeroActivityInfo::mutable_rewardids() {
  return &rewardids_;
}

// optional bool gotRankReward = 5;
inline bool stRetDrawHeroActivityInfo::has_gotrankreward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetDrawHeroActivityInfo::set_has_gotrankreward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetDrawHeroActivityInfo::clear_has_gotrankreward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetDrawHeroActivityInfo::clear_gotrankreward() {
  gotrankreward_ = false;
  clear_has_gotrankreward();
}
inline bool stRetDrawHeroActivityInfo::gotrankreward() const {
  return gotrankreward_;
}
inline void stRetDrawHeroActivityInfo::set_gotrankreward(bool value) {
  set_has_gotrankreward();
  gotrankreward_ = value;
}

// -------------------------------------------------------------------

// stReqDrawHeroScoreReward

// optional uint32 id = 1;
inline bool stReqDrawHeroScoreReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawHeroScoreReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawHeroScoreReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawHeroScoreReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqDrawHeroScoreReward::id() const {
  return id_;
}
inline void stReqDrawHeroScoreReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stDrawHeroScoreRewardRet

// optional .MiscProto.stDrawHeroScoreRewardRet.eResult result = 1;
inline bool stDrawHeroScoreRewardRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDrawHeroScoreRewardRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDrawHeroScoreRewardRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDrawHeroScoreRewardRet::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stDrawHeroScoreRewardRet_eResult stDrawHeroScoreRewardRet::result() const {
  return static_cast< ::MiscProto::stDrawHeroScoreRewardRet_eResult >(result_);
}
inline void stDrawHeroScoreRewardRet::set_result(::MiscProto::stDrawHeroScoreRewardRet_eResult value) {
  assert(::MiscProto::stDrawHeroScoreRewardRet_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqDrawHeroRankReward

// optional uint32 charID = 1;
inline bool stReqDrawHeroRankReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawHeroRankReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawHeroRankReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawHeroRankReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqDrawHeroRankReward::charid() const {
  return charid_;
}
inline void stReqDrawHeroRankReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stDrawHeroRankReward

// optional .MiscProto.stDrawHeroRankReward.eResult result = 1;
inline bool stDrawHeroRankReward::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDrawHeroRankReward::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDrawHeroRankReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDrawHeroRankReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stDrawHeroRankReward_eResult stDrawHeroRankReward::result() const {
  return static_cast< ::MiscProto::stDrawHeroRankReward_eResult >(result_);
}
inline void stDrawHeroRankReward::set_result(::MiscProto::stDrawHeroRankReward_eResult value) {
  assert(::MiscProto::stDrawHeroRankReward_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqCompensationList

// optional uint32 charID = 1;
inline bool stReqCompensationList::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCompensationList::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCompensationList::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCompensationList::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqCompensationList::charid() const {
  return charid_;
}
inline void stReqCompensationList::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stCompensationItem

// optional uint32 itemID = 1;
inline bool stCompensationItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCompensationItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCompensationItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCompensationItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stCompensationItem::itemid() const {
  return itemid_;
}
inline void stCompensationItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stCompensationItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCompensationItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCompensationItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCompensationItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stCompensationItem::num() const {
  return num_;
}
inline void stCompensationItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stCompensationInfo

// optional uint32 id = 1;
inline bool stCompensationInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCompensationInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCompensationInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCompensationInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stCompensationInfo::id() const {
  return id_;
}
inline void stCompensationInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string desc = 2;
inline bool stCompensationInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCompensationInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCompensationInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCompensationInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& stCompensationInfo::desc() const {
  return *desc_;
}
inline void stCompensationInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stCompensationInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stCompensationInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCompensationInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* stCompensationInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCompensationInfo::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .MiscProto.stCompensationItem items = 3;
inline int stCompensationInfo::items_size() const {
  return items_.size();
}
inline void stCompensationInfo::clear_items() {
  items_.Clear();
}
inline const ::MiscProto::stCompensationItem& stCompensationInfo::items(int index) const {
  return items_.Get(index);
}
inline ::MiscProto::stCompensationItem* stCompensationInfo::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::MiscProto::stCompensationItem* stCompensationInfo::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stCompensationItem >&
stCompensationInfo::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stCompensationItem >*
stCompensationInfo::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stRetCompensationList

// repeated .MiscProto.stCompensationInfo info = 1;
inline int stRetCompensationList::info_size() const {
  return info_.size();
}
inline void stRetCompensationList::clear_info() {
  info_.Clear();
}
inline const ::MiscProto::stCompensationInfo& stRetCompensationList::info(int index) const {
  return info_.Get(index);
}
inline ::MiscProto::stCompensationInfo* stRetCompensationList::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::MiscProto::stCompensationInfo* stRetCompensationList::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stCompensationInfo >&
stRetCompensationList::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stCompensationInfo >*
stRetCompensationList::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// stReqGotCompensation

// optional uint32 id = 1;
inline bool stReqGotCompensation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGotCompensation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGotCompensation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGotCompensation::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqGotCompensation::id() const {
  return id_;
}
inline void stReqGotCompensation::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stGotCompensationResult

// optional .MiscProto.stGotCompensationResult.eResult result = 1;
inline bool stGotCompensationResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGotCompensationResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGotCompensationResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGotCompensationResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stGotCompensationResult_eResult stGotCompensationResult::result() const {
  return static_cast< ::MiscProto::stGotCompensationResult_eResult >(result_);
}
inline void stGotCompensationResult::set_result(::MiscProto::stGotCompensationResult_eResult value) {
  assert(::MiscProto::stGotCompensationResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReq7DayActivityInfo

// optional uint32 day = 1;
inline bool stReq7DayActivityInfo::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReq7DayActivityInfo::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReq7DayActivityInfo::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReq7DayActivityInfo::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 stReq7DayActivityInfo::day() const {
  return day_;
}
inline void stReq7DayActivityInfo::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// -------------------------------------------------------------------

// stSynSDGoalInfo

// optional uint32 id = 1;
inline bool stSynSDGoalInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynSDGoalInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynSDGoalInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynSDGoalInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stSynSDGoalInfo::id() const {
  return id_;
}
inline void stSynSDGoalInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 cond = 2;
inline bool stSynSDGoalInfo::has_cond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynSDGoalInfo::set_has_cond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynSDGoalInfo::clear_has_cond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynSDGoalInfo::clear_cond() {
  cond_ = 0u;
  clear_has_cond();
}
inline ::google::protobuf::uint32 stSynSDGoalInfo::cond() const {
  return cond_;
}
inline void stSynSDGoalInfo::set_cond(::google::protobuf::uint32 value) {
  set_has_cond();
  cond_ = value;
}

// optional uint32 value = 3;
inline bool stSynSDGoalInfo::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynSDGoalInfo::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynSDGoalInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynSDGoalInfo::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 stSynSDGoalInfo::value() const {
  return value_;
}
inline void stSynSDGoalInfo::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// optional bool hasGotReward = 4;
inline bool stSynSDGoalInfo::has_hasgotreward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynSDGoalInfo::set_has_hasgotreward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynSDGoalInfo::clear_has_hasgotreward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynSDGoalInfo::clear_hasgotreward() {
  hasgotreward_ = false;
  clear_has_hasgotreward();
}
inline bool stSynSDGoalInfo::hasgotreward() const {
  return hasgotreward_;
}
inline void stSynSDGoalInfo::set_hasgotreward(bool value) {
  set_has_hasgotreward();
  hasgotreward_ = value;
}

// -------------------------------------------------------------------

// stRet7DayActivityInfo

// optional uint32 day = 1;
inline bool stRet7DayActivityInfo::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRet7DayActivityInfo::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRet7DayActivityInfo::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRet7DayActivityInfo::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 stRet7DayActivityInfo::day() const {
  return day_;
}
inline void stRet7DayActivityInfo::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// repeated .MiscProto.stSynSDGoalInfo loginGoal = 2;
inline int stRet7DayActivityInfo::logingoal_size() const {
  return logingoal_.size();
}
inline void stRet7DayActivityInfo::clear_logingoal() {
  logingoal_.Clear();
}
inline const ::MiscProto::stSynSDGoalInfo& stRet7DayActivityInfo::logingoal(int index) const {
  return logingoal_.Get(index);
}
inline ::MiscProto::stSynSDGoalInfo* stRet7DayActivityInfo::mutable_logingoal(int index) {
  return logingoal_.Mutable(index);
}
inline ::MiscProto::stSynSDGoalInfo* stRet7DayActivityInfo::add_logingoal() {
  return logingoal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >&
stRet7DayActivityInfo::logingoal() const {
  return logingoal_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >*
stRet7DayActivityInfo::mutable_logingoal() {
  return &logingoal_;
}

// repeated .MiscProto.stSynSDGoalInfo gifBagGoal = 3;
inline int stRet7DayActivityInfo::gifbaggoal_size() const {
  return gifbaggoal_.size();
}
inline void stRet7DayActivityInfo::clear_gifbaggoal() {
  gifbaggoal_.Clear();
}
inline const ::MiscProto::stSynSDGoalInfo& stRet7DayActivityInfo::gifbaggoal(int index) const {
  return gifbaggoal_.Get(index);
}
inline ::MiscProto::stSynSDGoalInfo* stRet7DayActivityInfo::mutable_gifbaggoal(int index) {
  return gifbaggoal_.Mutable(index);
}
inline ::MiscProto::stSynSDGoalInfo* stRet7DayActivityInfo::add_gifbaggoal() {
  return gifbaggoal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >&
stRet7DayActivityInfo::gifbaggoal() const {
  return gifbaggoal_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >*
stRet7DayActivityInfo::mutable_gifbaggoal() {
  return &gifbaggoal_;
}

// repeated .MiscProto.stSynSDGoalInfo module1Goal = 4;
inline int stRet7DayActivityInfo::module1goal_size() const {
  return module1goal_.size();
}
inline void stRet7DayActivityInfo::clear_module1goal() {
  module1goal_.Clear();
}
inline const ::MiscProto::stSynSDGoalInfo& stRet7DayActivityInfo::module1goal(int index) const {
  return module1goal_.Get(index);
}
inline ::MiscProto::stSynSDGoalInfo* stRet7DayActivityInfo::mutable_module1goal(int index) {
  return module1goal_.Mutable(index);
}
inline ::MiscProto::stSynSDGoalInfo* stRet7DayActivityInfo::add_module1goal() {
  return module1goal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >&
stRet7DayActivityInfo::module1goal() const {
  return module1goal_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >*
stRet7DayActivityInfo::mutable_module1goal() {
  return &module1goal_;
}

// repeated .MiscProto.stSynSDGoalInfo module2Goal = 5;
inline int stRet7DayActivityInfo::module2goal_size() const {
  return module2goal_.size();
}
inline void stRet7DayActivityInfo::clear_module2goal() {
  module2goal_.Clear();
}
inline const ::MiscProto::stSynSDGoalInfo& stRet7DayActivityInfo::module2goal(int index) const {
  return module2goal_.Get(index);
}
inline ::MiscProto::stSynSDGoalInfo* stRet7DayActivityInfo::mutable_module2goal(int index) {
  return module2goal_.Mutable(index);
}
inline ::MiscProto::stSynSDGoalInfo* stRet7DayActivityInfo::add_module2goal() {
  return module2goal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >&
stRet7DayActivityInfo::module2goal() const {
  return module2goal_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynSDGoalInfo >*
stRet7DayActivityInfo::mutable_module2goal() {
  return &module2goal_;
}

// -------------------------------------------------------------------

// stReqSevenDayReward

// optional uint32 day = 1;
inline bool stReqSevenDayReward::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSevenDayReward::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSevenDayReward::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSevenDayReward::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 stReqSevenDayReward::day() const {
  return day_;
}
inline void stReqSevenDayReward::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// optional uint32 goalType = 2;
inline bool stReqSevenDayReward::has_goaltype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqSevenDayReward::set_has_goaltype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqSevenDayReward::clear_has_goaltype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqSevenDayReward::clear_goaltype() {
  goaltype_ = 0u;
  clear_has_goaltype();
}
inline ::google::protobuf::uint32 stReqSevenDayReward::goaltype() const {
  return goaltype_;
}
inline void stReqSevenDayReward::set_goaltype(::google::protobuf::uint32 value) {
  set_has_goaltype();
  goaltype_ = value;
}

// optional uint32 id = 3;
inline bool stReqSevenDayReward::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqSevenDayReward::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqSevenDayReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqSevenDayReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqSevenDayReward::id() const {
  return id_;
}
inline void stReqSevenDayReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stSevenDayRewardRet

// optional .MiscProto.stSevenDayRewardRet.eResult result = 1;
inline bool stSevenDayRewardRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSevenDayRewardRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSevenDayRewardRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSevenDayRewardRet::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stSevenDayRewardRet_eResult stSevenDayRewardRet::result() const {
  return static_cast< ::MiscProto::stSevenDayRewardRet_eResult >(result_);
}
inline void stSevenDayRewardRet::set_result(::MiscProto::stSevenDayRewardRet_eResult value) {
  assert(::MiscProto::stSevenDayRewardRet_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 goalType = 2;
inline bool stSevenDayRewardRet::has_goaltype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSevenDayRewardRet::set_has_goaltype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSevenDayRewardRet::clear_has_goaltype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSevenDayRewardRet::clear_goaltype() {
  goaltype_ = 0u;
  clear_has_goaltype();
}
inline ::google::protobuf::uint32 stSevenDayRewardRet::goaltype() const {
  return goaltype_;
}
inline void stSevenDayRewardRet::set_goaltype(::google::protobuf::uint32 value) {
  set_has_goaltype();
  goaltype_ = value;
}

// optional uint32 id = 3;
inline bool stSevenDayRewardRet::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSevenDayRewardRet::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSevenDayRewardRet::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSevenDayRewardRet::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stSevenDayRewardRet::id() const {
  return id_;
}
inline void stSevenDayRewardRet::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 day = 4;
inline bool stSevenDayRewardRet::has_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSevenDayRewardRet::set_has_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSevenDayRewardRet::clear_has_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSevenDayRewardRet::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 stSevenDayRewardRet::day() const {
  return day_;
}
inline void stSevenDayRewardRet::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// -------------------------------------------------------------------

// stSevenDayHasRewardTip

// optional uint32 day = 1;
inline bool stSevenDayHasRewardTip::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSevenDayHasRewardTip::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSevenDayHasRewardTip::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSevenDayHasRewardTip::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 stSevenDayHasRewardTip::day() const {
  return day_;
}
inline void stSevenDayHasRewardTip::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// optional bool hasReward = 2;
inline bool stSevenDayHasRewardTip::has_hasreward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSevenDayHasRewardTip::set_has_hasreward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSevenDayHasRewardTip::clear_has_hasreward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSevenDayHasRewardTip::clear_hasreward() {
  hasreward_ = false;
  clear_has_hasreward();
}
inline bool stSevenDayHasRewardTip::hasreward() const {
  return hasreward_;
}
inline void stSevenDayHasRewardTip::set_hasreward(bool value) {
  set_has_hasreward();
  hasreward_ = value;
}

// -------------------------------------------------------------------

// stAppStoreCfg

// optional bool openAppVersion = 1;
inline bool stAppStoreCfg::has_openappversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAppStoreCfg::set_has_openappversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAppStoreCfg::clear_has_openappversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAppStoreCfg::clear_openappversion() {
  openappversion_ = false;
  clear_has_openappversion();
}
inline bool stAppStoreCfg::openappversion() const {
  return openappversion_;
}
inline void stAppStoreCfg::set_openappversion(bool value) {
  set_has_openappversion();
  openappversion_ = value;
}

// optional bool isSandbox = 2;
inline bool stAppStoreCfg::has_issandbox() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAppStoreCfg::set_has_issandbox() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAppStoreCfg::clear_has_issandbox() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAppStoreCfg::clear_issandbox() {
  issandbox_ = false;
  clear_has_issandbox();
}
inline bool stAppStoreCfg::issandbox() const {
  return issandbox_;
}
inline void stAppStoreCfg::set_issandbox(bool value) {
  set_has_issandbox();
  issandbox_ = value;
}

// optional bool directBuy = 3;
inline bool stAppStoreCfg::has_directbuy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAppStoreCfg::set_has_directbuy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAppStoreCfg::clear_has_directbuy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAppStoreCfg::clear_directbuy() {
  directbuy_ = false;
  clear_has_directbuy();
}
inline bool stAppStoreCfg::directbuy() const {
  return directbuy_;
}
inline void stAppStoreCfg::set_directbuy(bool value) {
  set_has_directbuy();
  directbuy_ = value;
}

// -------------------------------------------------------------------

// stOpenWindowTip

// optional .MiscProto.stOpenWindowTip.eAction action = 1;
inline bool stOpenWindowTip::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOpenWindowTip::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOpenWindowTip::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOpenWindowTip::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::MiscProto::stOpenWindowTip_eAction stOpenWindowTip::action() const {
  return static_cast< ::MiscProto::stOpenWindowTip_eAction >(action_);
}
inline void stOpenWindowTip::set_action(::MiscProto::stOpenWindowTip_eAction value) {
  assert(::MiscProto::stOpenWindowTip_eAction_IsValid(value));
  set_has_action();
  action_ = value;
}

// optional string content = 2;
inline bool stOpenWindowTip::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOpenWindowTip::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOpenWindowTip::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOpenWindowTip::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& stOpenWindowTip::content() const {
  return *content_;
}
inline void stOpenWindowTip::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stOpenWindowTip::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stOpenWindowTip::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stOpenWindowTip::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* stOpenWindowTip::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stOpenWindowTip::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqRechargeActivityList

// optional uint32 charID = 1;
inline bool stReqRechargeActivityList::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRechargeActivityList::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRechargeActivityList::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRechargeActivityList::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRechargeActivityList::charid() const {
  return charid_;
}
inline void stReqRechargeActivityList::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynRechargeActivityInfo

// optional uint32 id = 1;
inline bool stSynRechargeActivityInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynRechargeActivityInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynRechargeActivityInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynRechargeActivityInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stSynRechargeActivityInfo::id() const {
  return id_;
}
inline void stSynRechargeActivityInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 rechargeNum = 2;
inline bool stSynRechargeActivityInfo::has_rechargenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynRechargeActivityInfo::set_has_rechargenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynRechargeActivityInfo::clear_has_rechargenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynRechargeActivityInfo::clear_rechargenum() {
  rechargenum_ = 0u;
  clear_has_rechargenum();
}
inline ::google::protobuf::uint32 stSynRechargeActivityInfo::rechargenum() const {
  return rechargenum_;
}
inline void stSynRechargeActivityInfo::set_rechargenum(::google::protobuf::uint32 value) {
  set_has_rechargenum();
  rechargenum_ = value;
}

// repeated uint32 gotRewardSteps = 3;
inline int stSynRechargeActivityInfo::gotrewardsteps_size() const {
  return gotrewardsteps_.size();
}
inline void stSynRechargeActivityInfo::clear_gotrewardsteps() {
  gotrewardsteps_.Clear();
}
inline ::google::protobuf::uint32 stSynRechargeActivityInfo::gotrewardsteps(int index) const {
  return gotrewardsteps_.Get(index);
}
inline void stSynRechargeActivityInfo::set_gotrewardsteps(int index, ::google::protobuf::uint32 value) {
  gotrewardsteps_.Set(index, value);
}
inline void stSynRechargeActivityInfo::add_gotrewardsteps(::google::protobuf::uint32 value) {
  gotrewardsteps_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stSynRechargeActivityInfo::gotrewardsteps() const {
  return gotrewardsteps_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stSynRechargeActivityInfo::mutable_gotrewardsteps() {
  return &gotrewardsteps_;
}

// -------------------------------------------------------------------

// stRetRechargeActivityList

// repeated .MiscProto.stSynRechargeActivityInfo infos = 1;
inline int stRetRechargeActivityList::infos_size() const {
  return infos_.size();
}
inline void stRetRechargeActivityList::clear_infos() {
  infos_.Clear();
}
inline const ::MiscProto::stSynRechargeActivityInfo& stRetRechargeActivityList::infos(int index) const {
  return infos_.Get(index);
}
inline ::MiscProto::stSynRechargeActivityInfo* stRetRechargeActivityList::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::MiscProto::stSynRechargeActivityInfo* stRetRechargeActivityList::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynRechargeActivityInfo >&
stRetRechargeActivityList::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynRechargeActivityInfo >*
stRetRechargeActivityList::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// stReqRechargeActivtiyReward

// optional uint32 activityID = 1;
inline bool stReqRechargeActivtiyReward::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRechargeActivtiyReward::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRechargeActivtiyReward::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRechargeActivtiyReward::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stReqRechargeActivtiyReward::activityid() const {
  return activityid_;
}
inline void stReqRechargeActivtiyReward::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 stepID = 2;
inline bool stReqRechargeActivtiyReward::has_stepid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRechargeActivtiyReward::set_has_stepid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRechargeActivtiyReward::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRechargeActivtiyReward::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stReqRechargeActivtiyReward::stepid() const {
  return stepid_;
}
inline void stReqRechargeActivtiyReward::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// -------------------------------------------------------------------

// stRetRechargeActivityReward

// optional uint32 activityID = 1;
inline bool stRetRechargeActivityReward::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRechargeActivityReward::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRechargeActivityReward::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRechargeActivityReward::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stRetRechargeActivityReward::activityid() const {
  return activityid_;
}
inline void stRetRechargeActivityReward::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 stepID = 2;
inline bool stRetRechargeActivityReward::has_stepid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetRechargeActivityReward::set_has_stepid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetRechargeActivityReward::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetRechargeActivityReward::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stRetRechargeActivityReward::stepid() const {
  return stepid_;
}
inline void stRetRechargeActivityReward::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// optional .MiscProto.stRetRechargeActivityReward.eResult result = 3;
inline bool stRetRechargeActivityReward::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetRechargeActivityReward::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetRechargeActivityReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetRechargeActivityReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetRechargeActivityReward_eResult stRetRechargeActivityReward::result() const {
  return static_cast< ::MiscProto::stRetRechargeActivityReward_eResult >(result_);
}
inline void stRetRechargeActivityReward::set_result(::MiscProto::stRetRechargeActivityReward_eResult value) {
  assert(::MiscProto::stRetRechargeActivityReward_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynInvestigation

// optional uint32 questID = 1;
inline bool stSynInvestigation::has_questid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynInvestigation::set_has_questid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynInvestigation::clear_has_questid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynInvestigation::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 stSynInvestigation::questid() const {
  return questid_;
}
inline void stSynInvestigation::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
}

// repeated uint32 levels = 2;
inline int stSynInvestigation::levels_size() const {
  return levels_.size();
}
inline void stSynInvestigation::clear_levels() {
  levels_.Clear();
}
inline ::google::protobuf::uint32 stSynInvestigation::levels(int index) const {
  return levels_.Get(index);
}
inline void stSynInvestigation::set_levels(int index, ::google::protobuf::uint32 value) {
  levels_.Set(index, value);
}
inline void stSynInvestigation::add_levels(::google::protobuf::uint32 value) {
  levels_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stSynInvestigation::levels() const {
  return levels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stSynInvestigation::mutable_levels() {
  return &levels_;
}

// -------------------------------------------------------------------

// stSynAllInvestigation

// repeated .MiscProto.stSynInvestigation infos = 1;
inline int stSynAllInvestigation::infos_size() const {
  return infos_.size();
}
inline void stSynAllInvestigation::clear_infos() {
  infos_.Clear();
}
inline const ::MiscProto::stSynInvestigation& stSynAllInvestigation::infos(int index) const {
  return infos_.Get(index);
}
inline ::MiscProto::stSynInvestigation* stSynAllInvestigation::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::MiscProto::stSynInvestigation* stSynAllInvestigation::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynInvestigation >&
stSynAllInvestigation::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynInvestigation >*
stSynAllInvestigation::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// stInvestAnswer

// optional uint32 problemID = 1;
inline bool stInvestAnswer::has_problemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInvestAnswer::set_has_problemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInvestAnswer::clear_has_problemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInvestAnswer::clear_problemid() {
  problemid_ = 0u;
  clear_has_problemid();
}
inline ::google::protobuf::uint32 stInvestAnswer::problemid() const {
  return problemid_;
}
inline void stInvestAnswer::set_problemid(::google::protobuf::uint32 value) {
  set_has_problemid();
  problemid_ = value;
}

// optional bool answerA = 2;
inline bool stInvestAnswer::has_answera() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stInvestAnswer::set_has_answera() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stInvestAnswer::clear_has_answera() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stInvestAnswer::clear_answera() {
  answera_ = false;
  clear_has_answera();
}
inline bool stInvestAnswer::answera() const {
  return answera_;
}
inline void stInvestAnswer::set_answera(bool value) {
  set_has_answera();
  answera_ = value;
}

// optional bool answerB = 3;
inline bool stInvestAnswer::has_answerb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stInvestAnswer::set_has_answerb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stInvestAnswer::clear_has_answerb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stInvestAnswer::clear_answerb() {
  answerb_ = false;
  clear_has_answerb();
}
inline bool stInvestAnswer::answerb() const {
  return answerb_;
}
inline void stInvestAnswer::set_answerb(bool value) {
  set_has_answerb();
  answerb_ = value;
}

// optional bool answerC = 4;
inline bool stInvestAnswer::has_answerc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stInvestAnswer::set_has_answerc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stInvestAnswer::clear_has_answerc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stInvestAnswer::clear_answerc() {
  answerc_ = false;
  clear_has_answerc();
}
inline bool stInvestAnswer::answerc() const {
  return answerc_;
}
inline void stInvestAnswer::set_answerc(bool value) {
  set_has_answerc();
  answerc_ = value;
}

// optional bool answerD = 5;
inline bool stInvestAnswer::has_answerd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stInvestAnswer::set_has_answerd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stInvestAnswer::clear_has_answerd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stInvestAnswer::clear_answerd() {
  answerd_ = false;
  clear_has_answerd();
}
inline bool stInvestAnswer::answerd() const {
  return answerd_;
}
inline void stInvestAnswer::set_answerd(bool value) {
  set_has_answerd();
  answerd_ = value;
}

// optional bool answerE = 6;
inline bool stInvestAnswer::has_answere() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stInvestAnswer::set_has_answere() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stInvestAnswer::clear_has_answere() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stInvestAnswer::clear_answere() {
  answere_ = false;
  clear_has_answere();
}
inline bool stInvestAnswer::answere() const {
  return answere_;
}
inline void stInvestAnswer::set_answere(bool value) {
  set_has_answere();
  answere_ = value;
}

// optional bool answerF = 7;
inline bool stInvestAnswer::has_answerf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stInvestAnswer::set_has_answerf() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stInvestAnswer::clear_has_answerf() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stInvestAnswer::clear_answerf() {
  answerf_ = false;
  clear_has_answerf();
}
inline bool stInvestAnswer::answerf() const {
  return answerf_;
}
inline void stInvestAnswer::set_answerf(bool value) {
  set_has_answerf();
  answerf_ = value;
}

// optional bool answerG = 8;
inline bool stInvestAnswer::has_answerg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stInvestAnswer::set_has_answerg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stInvestAnswer::clear_has_answerg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stInvestAnswer::clear_answerg() {
  answerg_ = false;
  clear_has_answerg();
}
inline bool stInvestAnswer::answerg() const {
  return answerg_;
}
inline void stInvestAnswer::set_answerg(bool value) {
  set_has_answerg();
  answerg_ = value;
}

// optional bool answerH = 9;
inline bool stInvestAnswer::has_answerh() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stInvestAnswer::set_has_answerh() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stInvestAnswer::clear_has_answerh() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stInvestAnswer::clear_answerh() {
  answerh_ = false;
  clear_has_answerh();
}
inline bool stInvestAnswer::answerh() const {
  return answerh_;
}
inline void stInvestAnswer::set_answerh(bool value) {
  set_has_answerh();
  answerh_ = value;
}

// optional bool answerI = 10;
inline bool stInvestAnswer::has_answeri() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stInvestAnswer::set_has_answeri() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stInvestAnswer::clear_has_answeri() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stInvestAnswer::clear_answeri() {
  answeri_ = false;
  clear_has_answeri();
}
inline bool stInvestAnswer::answeri() const {
  return answeri_;
}
inline void stInvestAnswer::set_answeri(bool value) {
  set_has_answeri();
  answeri_ = value;
}

// optional bool answerJ = 11;
inline bool stInvestAnswer::has_answerj() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stInvestAnswer::set_has_answerj() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stInvestAnswer::clear_has_answerj() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stInvestAnswer::clear_answerj() {
  answerj_ = false;
  clear_has_answerj();
}
inline bool stInvestAnswer::answerj() const {
  return answerj_;
}
inline void stInvestAnswer::set_answerj(bool value) {
  set_has_answerj();
  answerj_ = value;
}

// -------------------------------------------------------------------

// stReqInvestgationReward

// optional uint32 questID = 1;
inline bool stReqInvestgationReward::has_questid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqInvestgationReward::set_has_questid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqInvestgationReward::clear_has_questid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqInvestgationReward::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 stReqInvestgationReward::questid() const {
  return questid_;
}
inline void stReqInvestgationReward::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
}

// optional uint32 level = 2;
inline bool stReqInvestgationReward::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqInvestgationReward::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqInvestgationReward::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqInvestgationReward::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stReqInvestgationReward::level() const {
  return level_;
}
inline void stReqInvestgationReward::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// repeated .MiscProto.stInvestAnswer answers = 3;
inline int stReqInvestgationReward::answers_size() const {
  return answers_.size();
}
inline void stReqInvestgationReward::clear_answers() {
  answers_.Clear();
}
inline const ::MiscProto::stInvestAnswer& stReqInvestgationReward::answers(int index) const {
  return answers_.Get(index);
}
inline ::MiscProto::stInvestAnswer* stReqInvestgationReward::mutable_answers(int index) {
  return answers_.Mutable(index);
}
inline ::MiscProto::stInvestAnswer* stReqInvestgationReward::add_answers() {
  return answers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stInvestAnswer >&
stReqInvestgationReward::answers() const {
  return answers_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stInvestAnswer >*
stReqInvestgationReward::mutable_answers() {
  return &answers_;
}

// optional uint32 useTime = 5;
inline bool stReqInvestgationReward::has_usetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqInvestgationReward::set_has_usetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqInvestgationReward::clear_has_usetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqInvestgationReward::clear_usetime() {
  usetime_ = 0u;
  clear_has_usetime();
}
inline ::google::protobuf::uint32 stReqInvestgationReward::usetime() const {
  return usetime_;
}
inline void stReqInvestgationReward::set_usetime(::google::protobuf::uint32 value) {
  set_has_usetime();
  usetime_ = value;
}

// -------------------------------------------------------------------

// stInvestgationRewardResult

// optional .MiscProto.stInvestgationRewardResult.eResult result = 1;
inline bool stInvestgationRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInvestgationRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInvestgationRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInvestgationRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stInvestgationRewardResult_eResult stInvestgationRewardResult::result() const {
  return static_cast< ::MiscProto::stInvestgationRewardResult_eResult >(result_);
}
inline void stInvestgationRewardResult::set_result(::MiscProto::stInvestgationRewardResult_eResult value) {
  assert(::MiscProto::stInvestgationRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqActivityShop

// optional uint32 charID = 1;
inline bool stReqActivityShop::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqActivityShop::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqActivityShop::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqActivityShop::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqActivityShop::charid() const {
  return charid_;
}
inline void stReqActivityShop::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stActivityShopList

// repeated uint32 activityIDs = 1;
inline int stActivityShopList::activityids_size() const {
  return activityids_.size();
}
inline void stActivityShopList::clear_activityids() {
  activityids_.Clear();
}
inline ::google::protobuf::uint32 stActivityShopList::activityids(int index) const {
  return activityids_.Get(index);
}
inline void stActivityShopList::set_activityids(int index, ::google::protobuf::uint32 value) {
  activityids_.Set(index, value);
}
inline void stActivityShopList::add_activityids(::google::protobuf::uint32 value) {
  activityids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stActivityShopList::activityids() const {
  return activityids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stActivityShopList::mutable_activityids() {
  return &activityids_;
}

// -------------------------------------------------------------------

// stLuchShopInfo

// optional uint32 curRewardVipLv = 1;
inline bool stLuchShopInfo::has_currewardviplv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLuchShopInfo::set_has_currewardviplv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLuchShopInfo::clear_has_currewardviplv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLuchShopInfo::clear_currewardviplv() {
  currewardviplv_ = 0u;
  clear_has_currewardviplv();
}
inline ::google::protobuf::uint32 stLuchShopInfo::currewardviplv() const {
  return currewardviplv_;
}
inline void stLuchShopInfo::set_currewardviplv(::google::protobuf::uint32 value) {
  set_has_currewardviplv();
  currewardviplv_ = value;
}

// optional uint32 randRewardEntryID = 2;
inline bool stLuchShopInfo::has_randrewardentryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLuchShopInfo::set_has_randrewardentryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLuchShopInfo::clear_has_randrewardentryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLuchShopInfo::clear_randrewardentryid() {
  randrewardentryid_ = 0u;
  clear_has_randrewardentryid();
}
inline ::google::protobuf::uint32 stLuchShopInfo::randrewardentryid() const {
  return randrewardentryid_;
}
inline void stLuchShopInfo::set_randrewardentryid(::google::protobuf::uint32 value) {
  set_has_randrewardentryid();
  randrewardentryid_ = value;
}

// optional bool hasGotReward = 3;
inline bool stLuchShopInfo::has_hasgotreward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stLuchShopInfo::set_has_hasgotreward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stLuchShopInfo::clear_has_hasgotreward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stLuchShopInfo::clear_hasgotreward() {
  hasgotreward_ = false;
  clear_has_hasgotreward();
}
inline bool stLuchShopInfo::hasgotreward() const {
  return hasgotreward_;
}
inline void stLuchShopInfo::set_hasgotreward(bool value) {
  set_has_hasgotreward();
  hasgotreward_ = value;
}

// optional uint32 todayHasRecharge = 4;
inline bool stLuchShopInfo::has_todayhasrecharge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stLuchShopInfo::set_has_todayhasrecharge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stLuchShopInfo::clear_has_todayhasrecharge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stLuchShopInfo::clear_todayhasrecharge() {
  todayhasrecharge_ = 0u;
  clear_has_todayhasrecharge();
}
inline ::google::protobuf::uint32 stLuchShopInfo::todayhasrecharge() const {
  return todayhasrecharge_;
}
inline void stLuchShopInfo::set_todayhasrecharge(::google::protobuf::uint32 value) {
  set_has_todayhasrecharge();
  todayhasrecharge_ = value;
}

// optional uint32 openWindowTime = 5;
inline bool stLuchShopInfo::has_openwindowtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stLuchShopInfo::set_has_openwindowtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stLuchShopInfo::clear_has_openwindowtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stLuchShopInfo::clear_openwindowtime() {
  openwindowtime_ = 0u;
  clear_has_openwindowtime();
}
inline ::google::protobuf::uint32 stLuchShopInfo::openwindowtime() const {
  return openwindowtime_;
}
inline void stLuchShopInfo::set_openwindowtime(::google::protobuf::uint32 value) {
  set_has_openwindowtime();
  openwindowtime_ = value;
}

// optional uint32 rechargeMeetCondTime = 6;
inline bool stLuchShopInfo::has_rechargemeetcondtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stLuchShopInfo::set_has_rechargemeetcondtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stLuchShopInfo::clear_has_rechargemeetcondtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stLuchShopInfo::clear_rechargemeetcondtime() {
  rechargemeetcondtime_ = 0u;
  clear_has_rechargemeetcondtime();
}
inline ::google::protobuf::uint32 stLuchShopInfo::rechargemeetcondtime() const {
  return rechargemeetcondtime_;
}
inline void stLuchShopInfo::set_rechargemeetcondtime(::google::protobuf::uint32 value) {
  set_has_rechargemeetcondtime();
  rechargemeetcondtime_ = value;
}

// optional uint32 openSvrDay = 7;
inline bool stLuchShopInfo::has_opensvrday() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stLuchShopInfo::set_has_opensvrday() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stLuchShopInfo::clear_has_opensvrday() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stLuchShopInfo::clear_opensvrday() {
  opensvrday_ = 0u;
  clear_has_opensvrday();
}
inline ::google::protobuf::uint32 stLuchShopInfo::opensvrday() const {
  return opensvrday_;
}
inline void stLuchShopInfo::set_opensvrday(::google::protobuf::uint32 value) {
  set_has_opensvrday();
  opensvrday_ = value;
}

// -------------------------------------------------------------------

// stSynLuckShopTodayRecharge

// optional uint32 num = 1;
inline bool stSynLuckShopTodayRecharge::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynLuckShopTodayRecharge::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynLuckShopTodayRecharge::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynLuckShopTodayRecharge::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynLuckShopTodayRecharge::num() const {
  return num_;
}
inline void stSynLuckShopTodayRecharge::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stReqLuckShopReward

// optional uint32 charID = 1;
inline bool stReqLuckShopReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLuckShopReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLuckShopReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLuckShopReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqLuckShopReward::charid() const {
  return charid_;
}
inline void stReqLuckShopReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stLuckShopRewardResult

// optional .MiscProto.stLuckShopRewardResult.eResult result = 1;
inline bool stLuckShopRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLuckShopRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLuckShopRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLuckShopRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stLuckShopRewardResult_eResult stLuckShopRewardResult::result() const {
  return static_cast< ::MiscProto::stLuckShopRewardResult_eResult >(result_);
}
inline void stLuckShopRewardResult::set_result(::MiscProto::stLuckShopRewardResult_eResult value) {
  assert(::MiscProto::stLuckShopRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSaveOpenLuckShopWinTime

// optional uint32 charID = 1;
inline bool stSaveOpenLuckShopWinTime::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSaveOpenLuckShopWinTime::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSaveOpenLuckShopWinTime::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSaveOpenLuckShopWinTime::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSaveOpenLuckShopWinTime::charid() const {
  return charid_;
}
inline void stSaveOpenLuckShopWinTime::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stLuckShopRechargeMeetCondTime

// optional uint32 meetCondTime = 1;
inline bool stLuckShopRechargeMeetCondTime::has_meetcondtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLuckShopRechargeMeetCondTime::set_has_meetcondtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLuckShopRechargeMeetCondTime::clear_has_meetcondtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLuckShopRechargeMeetCondTime::clear_meetcondtime() {
  meetcondtime_ = 0u;
  clear_has_meetcondtime();
}
inline ::google::protobuf::uint32 stLuckShopRechargeMeetCondTime::meetcondtime() const {
  return meetcondtime_;
}
inline void stLuckShopRechargeMeetCondTime::set_meetcondtime(::google::protobuf::uint32 value) {
  set_has_meetcondtime();
  meetcondtime_ = value;
}

// -------------------------------------------------------------------

// stReqOpenGuardWin

// optional uint32 charID = 1;
inline bool stReqOpenGuardWin::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenGuardWin::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenGuardWin::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenGuardWin::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOpenGuardWin::charid() const {
  return charid_;
}
inline void stReqOpenGuardWin::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGuardEnemy

// optional uint32 charID = 1;
inline bool stGuardEnemy::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuardEnemy::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuardEnemy::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuardEnemy::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGuardEnemy::charid() const {
  return charid_;
}
inline void stGuardEnemy::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stGuardEnemy::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuardEnemy::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuardEnemy::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuardEnemy::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stGuardEnemy::name() const {
  return *name_;
}
inline void stGuardEnemy::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGuardEnemy::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGuardEnemy::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGuardEnemy::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stGuardEnemy::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGuardEnemy::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 3;
inline bool stGuardEnemy::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGuardEnemy::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGuardEnemy::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGuardEnemy::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stGuardEnemy::job() const {
  return job_;
}
inline void stGuardEnemy::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 4;
inline bool stGuardEnemy::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGuardEnemy::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGuardEnemy::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGuardEnemy::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stGuardEnemy::sex() const {
  return sex_;
}
inline void stGuardEnemy::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// -------------------------------------------------------------------

// stGuardBaseInfo

// optional uint32 charID = 1;
inline bool stGuardBaseInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuardBaseInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuardBaseInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuardBaseInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGuardBaseInfo::charid() const {
  return charid_;
}
inline void stGuardBaseInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 quality = 2;
inline bool stGuardBaseInfo::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuardBaseInfo::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuardBaseInfo::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuardBaseInfo::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 stGuardBaseInfo::quality() const {
  return quality_;
}
inline void stGuardBaseInfo::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// optional uint32 remainTime = 3;
inline bool stGuardBaseInfo::has_remaintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGuardBaseInfo::set_has_remaintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGuardBaseInfo::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGuardBaseInfo::clear_remaintime() {
  remaintime_ = 0u;
  clear_has_remaintime();
}
inline ::google::protobuf::uint32 stGuardBaseInfo::remaintime() const {
  return remaintime_;
}
inline void stGuardBaseInfo::set_remaintime(::google::protobuf::uint32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// -------------------------------------------------------------------

// stGuardDetailInfo

// optional uint32 charID = 1;
inline bool stGuardDetailInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuardDetailInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuardDetailInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuardDetailInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGuardDetailInfo::charid() const {
  return charid_;
}
inline void stGuardDetailInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stGuardDetailInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuardDetailInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuardDetailInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuardDetailInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stGuardDetailInfo::name() const {
  return *name_;
}
inline void stGuardDetailInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGuardDetailInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGuardDetailInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGuardDetailInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stGuardDetailInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGuardDetailInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 quality = 3;
inline bool stGuardDetailInfo::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGuardDetailInfo::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGuardDetailInfo::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGuardDetailInfo::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 stGuardDetailInfo::quality() const {
  return quality_;
}
inline void stGuardDetailInfo::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// optional string guildName = 4;
inline bool stGuardDetailInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGuardDetailInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGuardDetailInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGuardDetailInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stGuardDetailInfo::guildname() const {
  return *guildname_;
}
inline void stGuardDetailInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stGuardDetailInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stGuardDetailInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGuardDetailInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stGuardDetailInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGuardDetailInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string friendName = 5;
inline bool stGuardDetailInfo::has_friendname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGuardDetailInfo::set_has_friendname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGuardDetailInfo::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGuardDetailInfo::clear_friendname() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    friendname_->clear();
  }
  clear_has_friendname();
}
inline const ::std::string& stGuardDetailInfo::friendname() const {
  return *friendname_;
}
inline void stGuardDetailInfo::set_friendname(const ::std::string& value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void stGuardDetailInfo::set_friendname(const char* value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void stGuardDetailInfo::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGuardDetailInfo::mutable_friendname() {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  return friendname_;
}
inline ::std::string* stGuardDetailInfo::release_friendname() {
  clear_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendname_;
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGuardDetailInfo::set_allocated_friendname(::std::string* friendname) {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (friendname) {
    set_has_friendname();
    friendname_ = friendname;
  } else {
    clear_has_friendname();
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 beInterceptNum = 6;
inline bool stGuardDetailInfo::has_beinterceptnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stGuardDetailInfo::set_has_beinterceptnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stGuardDetailInfo::clear_has_beinterceptnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stGuardDetailInfo::clear_beinterceptnum() {
  beinterceptnum_ = 0u;
  clear_has_beinterceptnum();
}
inline ::google::protobuf::uint32 stGuardDetailInfo::beinterceptnum() const {
  return beinterceptnum_;
}
inline void stGuardDetailInfo::set_beinterceptnum(::google::protobuf::uint32 value) {
  set_has_beinterceptnum();
  beinterceptnum_ = value;
}

// optional uint32 remainTime = 7;
inline bool stGuardDetailInfo::has_remaintime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stGuardDetailInfo::set_has_remaintime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stGuardDetailInfo::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stGuardDetailInfo::clear_remaintime() {
  remaintime_ = 0u;
  clear_has_remaintime();
}
inline ::google::protobuf::uint32 stGuardDetailInfo::remaintime() const {
  return remaintime_;
}
inline void stGuardDetailInfo::set_remaintime(::google::protobuf::uint32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// optional uint32 level = 8;
inline bool stGuardDetailInfo::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stGuardDetailInfo::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stGuardDetailInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stGuardDetailInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stGuardDetailInfo::level() const {
  return level_;
}
inline void stGuardDetailInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 inspiredNum = 9;
inline bool stGuardDetailInfo::has_inspirednum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stGuardDetailInfo::set_has_inspirednum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stGuardDetailInfo::clear_has_inspirednum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stGuardDetailInfo::clear_inspirednum() {
  inspirednum_ = 0u;
  clear_has_inspirednum();
}
inline ::google::protobuf::uint32 stGuardDetailInfo::inspirednum() const {
  return inspirednum_;
}
inline void stGuardDetailInfo::set_inspirednum(::google::protobuf::uint32 value) {
  set_has_inspirednum();
  inspirednum_ = value;
}

// -------------------------------------------------------------------

// stGuardWinInfo

// optional uint32 guardNum = 1;
inline bool stGuardWinInfo::has_guardnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuardWinInfo::set_has_guardnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuardWinInfo::clear_has_guardnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuardWinInfo::clear_guardnum() {
  guardnum_ = 0u;
  clear_has_guardnum();
}
inline ::google::protobuf::uint32 stGuardWinInfo::guardnum() const {
  return guardnum_;
}
inline void stGuardWinInfo::set_guardnum(::google::protobuf::uint32 value) {
  set_has_guardnum();
  guardnum_ = value;
}

// optional uint32 interceptNum = 2;
inline bool stGuardWinInfo::has_interceptnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuardWinInfo::set_has_interceptnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuardWinInfo::clear_has_interceptnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuardWinInfo::clear_interceptnum() {
  interceptnum_ = 0u;
  clear_has_interceptnum();
}
inline ::google::protobuf::uint32 stGuardWinInfo::interceptnum() const {
  return interceptnum_;
}
inline void stGuardWinInfo::set_interceptnum(::google::protobuf::uint32 value) {
  set_has_interceptnum();
  interceptnum_ = value;
}

// optional uint32 helpNum = 3;
inline bool stGuardWinInfo::has_helpnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGuardWinInfo::set_has_helpnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGuardWinInfo::clear_has_helpnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGuardWinInfo::clear_helpnum() {
  helpnum_ = 0u;
  clear_has_helpnum();
}
inline ::google::protobuf::uint32 stGuardWinInfo::helpnum() const {
  return helpnum_;
}
inline void stGuardWinInfo::set_helpnum(::google::protobuf::uint32 value) {
  set_has_helpnum();
  helpnum_ = value;
}

// repeated .MiscProto.stGuardBaseInfo enemies = 4;
inline int stGuardWinInfo::enemies_size() const {
  return enemies_.size();
}
inline void stGuardWinInfo::clear_enemies() {
  enemies_.Clear();
}
inline const ::MiscProto::stGuardBaseInfo& stGuardWinInfo::enemies(int index) const {
  return enemies_.Get(index);
}
inline ::MiscProto::stGuardBaseInfo* stGuardWinInfo::mutable_enemies(int index) {
  return enemies_.Mutable(index);
}
inline ::MiscProto::stGuardBaseInfo* stGuardWinInfo::add_enemies() {
  return enemies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stGuardBaseInfo >&
stGuardWinInfo::enemies() const {
  return enemies_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stGuardBaseInfo >*
stGuardWinInfo::mutable_enemies() {
  return &enemies_;
}

// repeated .MiscProto.stGuardBaseInfo guardInfos = 5;
inline int stGuardWinInfo::guardinfos_size() const {
  return guardinfos_.size();
}
inline void stGuardWinInfo::clear_guardinfos() {
  guardinfos_.Clear();
}
inline const ::MiscProto::stGuardBaseInfo& stGuardWinInfo::guardinfos(int index) const {
  return guardinfos_.Get(index);
}
inline ::MiscProto::stGuardBaseInfo* stGuardWinInfo::mutable_guardinfos(int index) {
  return guardinfos_.Mutable(index);
}
inline ::MiscProto::stGuardBaseInfo* stGuardWinInfo::add_guardinfos() {
  return guardinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stGuardBaseInfo >&
stGuardWinInfo::guardinfos() const {
  return guardinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stGuardBaseInfo >*
stGuardWinInfo::mutable_guardinfos() {
  return &guardinfos_;
}

// optional uint32 interceptCD = 6;
inline bool stGuardWinInfo::has_interceptcd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stGuardWinInfo::set_has_interceptcd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stGuardWinInfo::clear_has_interceptcd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stGuardWinInfo::clear_interceptcd() {
  interceptcd_ = 0u;
  clear_has_interceptcd();
}
inline ::google::protobuf::uint32 stGuardWinInfo::interceptcd() const {
  return interceptcd_;
}
inline void stGuardWinInfo::set_interceptcd(::google::protobuf::uint32 value) {
  set_has_interceptcd();
  interceptcd_ = value;
}

// optional uint32 guardRemainTime = 7;
inline bool stGuardWinInfo::has_guardremaintime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stGuardWinInfo::set_has_guardremaintime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stGuardWinInfo::clear_has_guardremaintime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stGuardWinInfo::clear_guardremaintime() {
  guardremaintime_ = 0u;
  clear_has_guardremaintime();
}
inline ::google::protobuf::uint32 stGuardWinInfo::guardremaintime() const {
  return guardremaintime_;
}
inline void stGuardWinInfo::set_guardremaintime(::google::protobuf::uint32 value) {
  set_has_guardremaintime();
  guardremaintime_ = value;
}

// -------------------------------------------------------------------

// stResetInterceptCD

// optional uint32 charID = 1;
inline bool stResetInterceptCD::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetInterceptCD::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetInterceptCD::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetInterceptCD::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResetInterceptCD::charid() const {
  return charid_;
}
inline void stResetInterceptCD::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResetInterceptCDResult

// optional .MiscProto.stResetInterceptCDResult.eResult result = 1;
inline bool stResetInterceptCDResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetInterceptCDResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetInterceptCDResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetInterceptCDResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stResetInterceptCDResult_eResult stResetInterceptCDResult::result() const {
  return static_cast< ::MiscProto::stResetInterceptCDResult_eResult >(result_);
}
inline void stResetInterceptCDResult::set_result(::MiscProto::stResetInterceptCDResult_eResult value) {
  assert(::MiscProto::stResetInterceptCDResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stResetInterceptNum

// optional uint32 charID = 1;
inline bool stResetInterceptNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetInterceptNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetInterceptNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetInterceptNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResetInterceptNum::charid() const {
  return charid_;
}
inline void stResetInterceptNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResetInterceptNumResult

// optional .MiscProto.stResetInterceptNumResult.eResult result = 1;
inline bool stResetInterceptNumResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetInterceptNumResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetInterceptNumResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetInterceptNumResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stResetInterceptNumResult_eResult stResetInterceptNumResult::result() const {
  return static_cast< ::MiscProto::stResetInterceptNumResult_eResult >(result_);
}
inline void stResetInterceptNumResult::set_result(::MiscProto::stResetInterceptNumResult_eResult value) {
  assert(::MiscProto::stResetInterceptNumResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqGuardDetailInfo

// optional uint32 charID = 1;
inline bool stReqGuardDetailInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGuardDetailInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGuardDetailInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGuardDetailInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqGuardDetailInfo::charid() const {
  return charid_;
}
inline void stReqGuardDetailInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetGuardDetailInfo

// optional .MiscProto.stGuardDetailInfo detailInfo = 1;
inline bool stRetGuardDetailInfo::has_detailinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetGuardDetailInfo::set_has_detailinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetGuardDetailInfo::clear_has_detailinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetGuardDetailInfo::clear_detailinfo() {
  if (detailinfo_ != NULL) detailinfo_->::MiscProto::stGuardDetailInfo::Clear();
  clear_has_detailinfo();
}
inline const ::MiscProto::stGuardDetailInfo& stRetGuardDetailInfo::detailinfo() const {
  return detailinfo_ != NULL ? *detailinfo_ : *default_instance_->detailinfo_;
}
inline ::MiscProto::stGuardDetailInfo* stRetGuardDetailInfo::mutable_detailinfo() {
  set_has_detailinfo();
  if (detailinfo_ == NULL) detailinfo_ = new ::MiscProto::stGuardDetailInfo;
  return detailinfo_;
}
inline ::MiscProto::stGuardDetailInfo* stRetGuardDetailInfo::release_detailinfo() {
  clear_has_detailinfo();
  ::MiscProto::stGuardDetailInfo* temp = detailinfo_;
  detailinfo_ = NULL;
  return temp;
}
inline void stRetGuardDetailInfo::set_allocated_detailinfo(::MiscProto::stGuardDetailInfo* detailinfo) {
  delete detailinfo_;
  detailinfo_ = detailinfo;
  if (detailinfo) {
    set_has_detailinfo();
  } else {
    clear_has_detailinfo();
  }
}

// -------------------------------------------------------------------

// stReqIntercept

// optional uint32 charID = 1;
inline bool stReqIntercept::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqIntercept::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqIntercept::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqIntercept::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqIntercept::charid() const {
  return charid_;
}
inline void stReqIntercept::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stIntercerptResult

// optional .MiscProto.stIntercerptResult.eResult result = 1;
inline bool stIntercerptResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stIntercerptResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stIntercerptResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stIntercerptResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stIntercerptResult_eResult stIntercerptResult::result() const {
  return static_cast< ::MiscProto::stIntercerptResult_eResult >(result_);
}
inline void stIntercerptResult::set_result(::MiscProto::stIntercerptResult_eResult value) {
  assert(::MiscProto::stIntercerptResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqGuard

// optional uint32 charID = 1;
inline bool stReqGuard::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGuard::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGuard::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGuard::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqGuard::charid() const {
  return charid_;
}
inline void stReqGuard::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetGuardWin

// optional uint32 quality = 1;
inline bool stRetGuardWin::has_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetGuardWin::set_has_quality() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetGuardWin::clear_has_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetGuardWin::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 stRetGuardWin::quality() const {
  return quality_;
}
inline void stRetGuardWin::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// optional uint32 refreshNum = 2;
inline bool stRetGuardWin::has_refreshnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetGuardWin::set_has_refreshnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetGuardWin::clear_has_refreshnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetGuardWin::clear_refreshnum() {
  refreshnum_ = 0u;
  clear_has_refreshnum();
}
inline ::google::protobuf::uint32 stRetGuardWin::refreshnum() const {
  return refreshnum_;
}
inline void stRetGuardWin::set_refreshnum(::google::protobuf::uint32 value) {
  set_has_refreshnum();
  refreshnum_ = value;
}

// optional uint32 buff = 3;
inline bool stRetGuardWin::has_buff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetGuardWin::set_has_buff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetGuardWin::clear_has_buff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetGuardWin::clear_buff() {
  buff_ = 0u;
  clear_has_buff();
}
inline ::google::protobuf::uint32 stRetGuardWin::buff() const {
  return buff_;
}
inline void stRetGuardWin::set_buff(::google::protobuf::uint32 value) {
  set_has_buff();
  buff_ = value;
}

// optional string friendName = 4;
inline bool stRetGuardWin::has_friendname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetGuardWin::set_has_friendname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetGuardWin::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetGuardWin::clear_friendname() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    friendname_->clear();
  }
  clear_has_friendname();
}
inline const ::std::string& stRetGuardWin::friendname() const {
  return *friendname_;
}
inline void stRetGuardWin::set_friendname(const ::std::string& value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void stRetGuardWin::set_friendname(const char* value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void stRetGuardWin::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetGuardWin::mutable_friendname() {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  return friendname_;
}
inline ::std::string* stRetGuardWin::release_friendname() {
  clear_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendname_;
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetGuardWin::set_allocated_friendname(::std::string* friendname) {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (friendname) {
    set_has_friendname();
    friendname_ = friendname;
  } else {
    clear_has_friendname();
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool canFreeRefresh = 5;
inline bool stRetGuardWin::has_canfreerefresh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetGuardWin::set_has_canfreerefresh() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetGuardWin::clear_has_canfreerefresh() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetGuardWin::clear_canfreerefresh() {
  canfreerefresh_ = false;
  clear_has_canfreerefresh();
}
inline bool stRetGuardWin::canfreerefresh() const {
  return canfreerefresh_;
}
inline void stRetGuardWin::set_canfreerefresh(bool value) {
  set_has_canfreerefresh();
  canfreerefresh_ = value;
}

// -------------------------------------------------------------------

// stReqSummonHighQualityGuard

// optional uint32 charID = 1;
inline bool stReqSummonHighQualityGuard::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSummonHighQualityGuard::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSummonHighQualityGuard::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSummonHighQualityGuard::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqSummonHighQualityGuard::charid() const {
  return charid_;
}
inline void stReqSummonHighQualityGuard::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSummonHighQualityGuardResult

// optional .MiscProto.stSummonHighQualityGuardResult.eResult result = 1;
inline bool stSummonHighQualityGuardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSummonHighQualityGuardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSummonHighQualityGuardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSummonHighQualityGuardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stSummonHighQualityGuardResult_eResult stSummonHighQualityGuardResult::result() const {
  return static_cast< ::MiscProto::stSummonHighQualityGuardResult_eResult >(result_);
}
inline void stSummonHighQualityGuardResult::set_result(::MiscProto::stSummonHighQualityGuardResult_eResult value) {
  assert(::MiscProto::stSummonHighQualityGuardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqGuardInspired

// optional uint32 charID = 1;
inline bool stReqGuardInspired::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGuardInspired::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGuardInspired::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGuardInspired::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqGuardInspired::charid() const {
  return charid_;
}
inline void stReqGuardInspired::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGuardInspiredResult

// optional .MiscProto.stGuardInspiredResult.eResult result = 1;
inline bool stGuardInspiredResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuardInspiredResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuardInspiredResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuardInspiredResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stGuardInspiredResult_eResult stGuardInspiredResult::result() const {
  return static_cast< ::MiscProto::stGuardInspiredResult_eResult >(result_);
}
inline void stGuardInspiredResult::set_result(::MiscProto::stGuardInspiredResult_eResult value) {
  assert(::MiscProto::stGuardInspiredResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 num = 2;
inline bool stGuardInspiredResult::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuardInspiredResult::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuardInspiredResult::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuardInspiredResult::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 stGuardInspiredResult::num() const {
  return num_;
}
inline void stGuardInspiredResult::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stReqRefreshGuardQuality

// optional uint32 charID = 1;
inline bool stReqRefreshGuardQuality::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRefreshGuardQuality::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRefreshGuardQuality::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRefreshGuardQuality::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRefreshGuardQuality::charid() const {
  return charid_;
}
inline void stReqRefreshGuardQuality::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetRefreshGuardQualityResult

// optional .MiscProto.stRetRefreshGuardQualityResult.eResult result = 1;
inline bool stRetRefreshGuardQualityResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRefreshGuardQualityResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRefreshGuardQualityResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRefreshGuardQualityResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetRefreshGuardQualityResult_eResult stRetRefreshGuardQualityResult::result() const {
  return static_cast< ::MiscProto::stRetRefreshGuardQualityResult_eResult >(result_);
}
inline void stRetRefreshGuardQualityResult::set_result(::MiscProto::stRetRefreshGuardQualityResult_eResult value) {
  assert(::MiscProto::stRetRefreshGuardQualityResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 quality = 2;
inline bool stRetRefreshGuardQualityResult::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetRefreshGuardQualityResult::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetRefreshGuardQualityResult::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetRefreshGuardQualityResult::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 stRetRefreshGuardQualityResult::quality() const {
  return quality_;
}
inline void stRetRefreshGuardQualityResult::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// stReqCanHelpGuardFriend

// optional uint32 charID = 1;
inline bool stReqCanHelpGuardFriend::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCanHelpGuardFriend::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCanHelpGuardFriend::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCanHelpGuardFriend::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqCanHelpGuardFriend::charid() const {
  return charid_;
}
inline void stReqCanHelpGuardFriend::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stHelpGaurdFriendInfo

// optional uint32 charID = 1;
inline bool stHelpGaurdFriendInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHelpGaurdFriendInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHelpGaurdFriendInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHelpGaurdFriendInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stHelpGaurdFriendInfo::charid() const {
  return charid_;
}
inline void stHelpGaurdFriendInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stHelpGaurdFriendInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHelpGaurdFriendInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHelpGaurdFriendInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHelpGaurdFriendInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stHelpGaurdFriendInfo::name() const {
  return *name_;
}
inline void stHelpGaurdFriendInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stHelpGaurdFriendInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stHelpGaurdFriendInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stHelpGaurdFriendInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stHelpGaurdFriendInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stHelpGaurdFriendInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 remainHelpNum = 3;
inline bool stHelpGaurdFriendInfo::has_remainhelpnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stHelpGaurdFriendInfo::set_has_remainhelpnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stHelpGaurdFriendInfo::clear_has_remainhelpnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stHelpGaurdFriendInfo::clear_remainhelpnum() {
  remainhelpnum_ = 0u;
  clear_has_remainhelpnum();
}
inline ::google::protobuf::uint32 stHelpGaurdFriendInfo::remainhelpnum() const {
  return remainhelpnum_;
}
inline void stHelpGaurdFriendInfo::set_remainhelpnum(::google::protobuf::uint32 value) {
  set_has_remainhelpnum();
  remainhelpnum_ = value;
}

// optional uint32 level = 4;
inline bool stHelpGaurdFriendInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stHelpGaurdFriendInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stHelpGaurdFriendInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stHelpGaurdFriendInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stHelpGaurdFriendInfo::level() const {
  return level_;
}
inline void stHelpGaurdFriendInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// stRetCanHelpGuardFriend

// repeated .MiscProto.stHelpGaurdFriendInfo infos = 1;
inline int stRetCanHelpGuardFriend::infos_size() const {
  return infos_.size();
}
inline void stRetCanHelpGuardFriend::clear_infos() {
  infos_.Clear();
}
inline const ::MiscProto::stHelpGaurdFriendInfo& stRetCanHelpGuardFriend::infos(int index) const {
  return infos_.Get(index);
}
inline ::MiscProto::stHelpGaurdFriendInfo* stRetCanHelpGuardFriend::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::MiscProto::stHelpGaurdFriendInfo* stRetCanHelpGuardFriend::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stHelpGaurdFriendInfo >&
stRetCanHelpGuardFriend::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stHelpGaurdFriendInfo >*
stRetCanHelpGuardFriend::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// stInviteFriendForHelpGuard

// optional uint32 charID = 1;
inline bool stInviteFriendForHelpGuard::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInviteFriendForHelpGuard::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInviteFriendForHelpGuard::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInviteFriendForHelpGuard::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stInviteFriendForHelpGuard::charid() const {
  return charid_;
}
inline void stInviteFriendForHelpGuard::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stInviteFriendForHelpGuardResult

// optional .MiscProto.stInviteFriendForHelpGuardResult.eResult result = 1;
inline bool stInviteFriendForHelpGuardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInviteFriendForHelpGuardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInviteFriendForHelpGuardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInviteFriendForHelpGuardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stInviteFriendForHelpGuardResult_eResult stInviteFriendForHelpGuardResult::result() const {
  return static_cast< ::MiscProto::stInviteFriendForHelpGuardResult_eResult >(result_);
}
inline void stInviteFriendForHelpGuardResult::set_result(::MiscProto::stInviteFriendForHelpGuardResult_eResult value) {
  assert(::MiscProto::stInviteFriendForHelpGuardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stAskFriendHelpGuard

// optional string inviterName = 1;
inline bool stAskFriendHelpGuard::has_invitername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAskFriendHelpGuard::set_has_invitername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAskFriendHelpGuard::clear_has_invitername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAskFriendHelpGuard::clear_invitername() {
  if (invitername_ != &::google::protobuf::internal::kEmptyString) {
    invitername_->clear();
  }
  clear_has_invitername();
}
inline const ::std::string& stAskFriendHelpGuard::invitername() const {
  return *invitername_;
}
inline void stAskFriendHelpGuard::set_invitername(const ::std::string& value) {
  set_has_invitername();
  if (invitername_ == &::google::protobuf::internal::kEmptyString) {
    invitername_ = new ::std::string;
  }
  invitername_->assign(value);
}
inline void stAskFriendHelpGuard::set_invitername(const char* value) {
  set_has_invitername();
  if (invitername_ == &::google::protobuf::internal::kEmptyString) {
    invitername_ = new ::std::string;
  }
  invitername_->assign(value);
}
inline void stAskFriendHelpGuard::set_invitername(const char* value, size_t size) {
  set_has_invitername();
  if (invitername_ == &::google::protobuf::internal::kEmptyString) {
    invitername_ = new ::std::string;
  }
  invitername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stAskFriendHelpGuard::mutable_invitername() {
  set_has_invitername();
  if (invitername_ == &::google::protobuf::internal::kEmptyString) {
    invitername_ = new ::std::string;
  }
  return invitername_;
}
inline ::std::string* stAskFriendHelpGuard::release_invitername() {
  clear_has_invitername();
  if (invitername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invitername_;
    invitername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stAskFriendHelpGuard::set_allocated_invitername(::std::string* invitername) {
  if (invitername_ != &::google::protobuf::internal::kEmptyString) {
    delete invitername_;
  }
  if (invitername) {
    set_has_invitername();
    invitername_ = invitername;
  } else {
    clear_has_invitername();
    invitername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 inviterID = 2;
inline bool stAskFriendHelpGuard::has_inviterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAskFriendHelpGuard::set_has_inviterid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAskFriendHelpGuard::clear_has_inviterid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAskFriendHelpGuard::clear_inviterid() {
  inviterid_ = 0u;
  clear_has_inviterid();
}
inline ::google::protobuf::uint32 stAskFriendHelpGuard::inviterid() const {
  return inviterid_;
}
inline void stAskFriendHelpGuard::set_inviterid(::google::protobuf::uint32 value) {
  set_has_inviterid();
  inviterid_ = value;
}

// -------------------------------------------------------------------

// stReplyHelpGuard

// optional bool agree = 1;
inline bool stReplyHelpGuard::has_agree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReplyHelpGuard::set_has_agree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReplyHelpGuard::clear_has_agree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReplyHelpGuard::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool stReplyHelpGuard::agree() const {
  return agree_;
}
inline void stReplyHelpGuard::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
}

// optional uint32 charID = 2;
inline bool stReplyHelpGuard::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReplyHelpGuard::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReplyHelpGuard::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReplyHelpGuard::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReplyHelpGuard::charid() const {
  return charid_;
}
inline void stReplyHelpGuard::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stReplyHelpGuardResult

// optional .MiscProto.stReplyHelpGuardResult.eResult result = 1;
inline bool stReplyHelpGuardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReplyHelpGuardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReplyHelpGuardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReplyHelpGuardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stReplyHelpGuardResult_eResult stReplyHelpGuardResult::result() const {
  return static_cast< ::MiscProto::stReplyHelpGuardResult_eResult >(result_);
}
inline void stReplyHelpGuardResult::set_result(::MiscProto::stReplyHelpGuardResult_eResult value) {
  assert(::MiscProto::stReplyHelpGuardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stUserAgreeHelpGuard

// optional string name = 1;
inline bool stUserAgreeHelpGuard::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserAgreeHelpGuard::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserAgreeHelpGuard::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserAgreeHelpGuard::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stUserAgreeHelpGuard::name() const {
  return *name_;
}
inline void stUserAgreeHelpGuard::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stUserAgreeHelpGuard::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stUserAgreeHelpGuard::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUserAgreeHelpGuard::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stUserAgreeHelpGuard::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUserAgreeHelpGuard::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID = 2;
inline bool stUserAgreeHelpGuard::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserAgreeHelpGuard::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserAgreeHelpGuard::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserAgreeHelpGuard::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserAgreeHelpGuard::charid() const {
  return charid_;
}
inline void stUserAgreeHelpGuard::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stBeginGuard

// optional uint32 charID = 1;
inline bool stBeginGuard::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBeginGuard::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBeginGuard::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBeginGuard::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stBeginGuard::charid() const {
  return charid_;
}
inline void stBeginGuard::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stBeginGuardResult

// optional .MiscProto.stBeginGuardResult.eResult result = 1;
inline bool stBeginGuardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBeginGuardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBeginGuardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBeginGuardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stBeginGuardResult_eResult stBeginGuardResult::result() const {
  return static_cast< ::MiscProto::stBeginGuardResult_eResult >(result_);
}
inline void stBeginGuardResult::set_result(::MiscProto::stBeginGuardResult_eResult value) {
  assert(::MiscProto::stBeginGuardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stInterceptInfo

// optional uint32 timestamp = 1;
inline bool stInterceptInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInterceptInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInterceptInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInterceptInfo::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 stInterceptInfo::timestamp() const {
  return timestamp_;
}
inline void stInterceptInfo::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional string content = 2;
inline bool stInterceptInfo::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stInterceptInfo::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stInterceptInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stInterceptInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& stInterceptInfo::content() const {
  return *content_;
}
inline void stInterceptInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stInterceptInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stInterceptInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stInterceptInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* stInterceptInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stInterceptInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqInterceptInfo

// optional uint32 charID = 1;
inline bool stReqInterceptInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqInterceptInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqInterceptInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqInterceptInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqInterceptInfo::charid() const {
  return charid_;
}
inline void stReqInterceptInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetInterceptInfo

// repeated .MiscProto.stInterceptInfo infos = 1;
inline int stRetInterceptInfo::infos_size() const {
  return infos_.size();
}
inline void stRetInterceptInfo::clear_infos() {
  infos_.Clear();
}
inline const ::MiscProto::stInterceptInfo& stRetInterceptInfo::infos(int index) const {
  return infos_.Get(index);
}
inline ::MiscProto::stInterceptInfo* stRetInterceptInfo::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::MiscProto::stInterceptInfo* stRetInterceptInfo::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stInterceptInfo >&
stRetInterceptInfo::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stInterceptInfo >*
stRetInterceptInfo::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// stRechargeActivityInfoItem

// optional uint32 id = 1;
inline bool stRechargeActivityInfoItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRechargeActivityInfoItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRechargeActivityInfoItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRechargeActivityInfoItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stRechargeActivityInfoItem::id() const {
  return id_;
}
inline void stRechargeActivityInfoItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 rechargeNum = 2;
inline bool stRechargeActivityInfoItem::has_rechargenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRechargeActivityInfoItem::set_has_rechargenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRechargeActivityInfoItem::clear_has_rechargenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRechargeActivityInfoItem::clear_rechargenum() {
  rechargenum_ = 0u;
  clear_has_rechargenum();
}
inline ::google::protobuf::uint32 stRechargeActivityInfoItem::rechargenum() const {
  return rechargenum_;
}
inline void stRechargeActivityInfoItem::set_rechargenum(::google::protobuf::uint32 value) {
  set_has_rechargenum();
  rechargenum_ = value;
}

// -------------------------------------------------------------------

// stNotifyRechargeActivityInfo

// repeated .MiscProto.stRechargeActivityInfoItem items = 1;
inline int stNotifyRechargeActivityInfo::items_size() const {
  return items_.size();
}
inline void stNotifyRechargeActivityInfo::clear_items() {
  items_.Clear();
}
inline const ::MiscProto::stRechargeActivityInfoItem& stNotifyRechargeActivityInfo::items(int index) const {
  return items_.Get(index);
}
inline ::MiscProto::stRechargeActivityInfoItem* stNotifyRechargeActivityInfo::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::MiscProto::stRechargeActivityInfoItem* stNotifyRechargeActivityInfo::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stRechargeActivityInfoItem >&
stNotifyRechargeActivityInfo::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stRechargeActivityInfoItem >*
stNotifyRechargeActivityInfo::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stLuckShopRefreshResult

// optional uint32 curRefreshVipLv = 1;
inline bool stLuckShopRefreshResult::has_currefreshviplv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLuckShopRefreshResult::set_has_currefreshviplv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLuckShopRefreshResult::clear_has_currefreshviplv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLuckShopRefreshResult::clear_currefreshviplv() {
  currefreshviplv_ = 0u;
  clear_has_currefreshviplv();
}
inline ::google::protobuf::uint32 stLuckShopRefreshResult::currefreshviplv() const {
  return currefreshviplv_;
}
inline void stLuckShopRefreshResult::set_currefreshviplv(::google::protobuf::uint32 value) {
  set_has_currefreshviplv();
  currefreshviplv_ = value;
}

// optional uint32 entryID = 2;
inline bool stLuckShopRefreshResult::has_entryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLuckShopRefreshResult::set_has_entryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLuckShopRefreshResult::clear_has_entryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLuckShopRefreshResult::clear_entryid() {
  entryid_ = 0u;
  clear_has_entryid();
}
inline ::google::protobuf::uint32 stLuckShopRefreshResult::entryid() const {
  return entryid_;
}
inline void stLuckShopRefreshResult::set_entryid(::google::protobuf::uint32 value) {
  set_has_entryid();
  entryid_ = value;
}

// -------------------------------------------------------------------

// stNotifyGuardFinish

// optional uint32 quality = 1;
inline bool stNotifyGuardFinish::has_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyGuardFinish::set_has_quality() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyGuardFinish::clear_has_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyGuardFinish::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 stNotifyGuardFinish::quality() const {
  return quality_;
}
inline void stNotifyGuardFinish::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// optional uint32 beInterceptNum = 2;
inline bool stNotifyGuardFinish::has_beinterceptnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyGuardFinish::set_has_beinterceptnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyGuardFinish::clear_has_beinterceptnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyGuardFinish::clear_beinterceptnum() {
  beinterceptnum_ = 0u;
  clear_has_beinterceptnum();
}
inline ::google::protobuf::uint32 stNotifyGuardFinish::beinterceptnum() const {
  return beinterceptnum_;
}
inline void stNotifyGuardFinish::set_beinterceptnum(::google::protobuf::uint32 value) {
  set_has_beinterceptnum();
  beinterceptnum_ = value;
}

// optional string friendName = 3;
inline bool stNotifyGuardFinish::has_friendname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyGuardFinish::set_has_friendname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyGuardFinish::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyGuardFinish::clear_friendname() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    friendname_->clear();
  }
  clear_has_friendname();
}
inline const ::std::string& stNotifyGuardFinish::friendname() const {
  return *friendname_;
}
inline void stNotifyGuardFinish::set_friendname(const ::std::string& value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void stNotifyGuardFinish::set_friendname(const char* value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void stNotifyGuardFinish::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNotifyGuardFinish::mutable_friendname() {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  return friendname_;
}
inline ::std::string* stNotifyGuardFinish::release_friendname() {
  clear_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendname_;
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNotifyGuardFinish::set_allocated_friendname(::std::string* friendname) {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (friendname) {
    set_has_friendname();
    friendname_ = friendname;
  } else {
    clear_has_friendname();
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 resID1 = 4;
inline bool stNotifyGuardFinish::has_resid1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyGuardFinish::set_has_resid1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyGuardFinish::clear_has_resid1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyGuardFinish::clear_resid1() {
  resid1_ = 0u;
  clear_has_resid1();
}
inline ::google::protobuf::uint32 stNotifyGuardFinish::resid1() const {
  return resid1_;
}
inline void stNotifyGuardFinish::set_resid1(::google::protobuf::uint32 value) {
  set_has_resid1();
  resid1_ = value;
}

// optional uint32 resNum1 = 5;
inline bool stNotifyGuardFinish::has_resnum1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stNotifyGuardFinish::set_has_resnum1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stNotifyGuardFinish::clear_has_resnum1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stNotifyGuardFinish::clear_resnum1() {
  resnum1_ = 0u;
  clear_has_resnum1();
}
inline ::google::protobuf::uint32 stNotifyGuardFinish::resnum1() const {
  return resnum1_;
}
inline void stNotifyGuardFinish::set_resnum1(::google::protobuf::uint32 value) {
  set_has_resnum1();
  resnum1_ = value;
}

// optional uint32 resID2 = 6;
inline bool stNotifyGuardFinish::has_resid2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stNotifyGuardFinish::set_has_resid2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stNotifyGuardFinish::clear_has_resid2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stNotifyGuardFinish::clear_resid2() {
  resid2_ = 0u;
  clear_has_resid2();
}
inline ::google::protobuf::uint32 stNotifyGuardFinish::resid2() const {
  return resid2_;
}
inline void stNotifyGuardFinish::set_resid2(::google::protobuf::uint32 value) {
  set_has_resid2();
  resid2_ = value;
}

// optional uint32 resNum2 = 7;
inline bool stNotifyGuardFinish::has_resnum2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stNotifyGuardFinish::set_has_resnum2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stNotifyGuardFinish::clear_has_resnum2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stNotifyGuardFinish::clear_resnum2() {
  resnum2_ = 0u;
  clear_has_resnum2();
}
inline ::google::protobuf::uint32 stNotifyGuardFinish::resnum2() const {
  return resnum2_;
}
inline void stNotifyGuardFinish::set_resnum2(::google::protobuf::uint32 value) {
  set_has_resnum2();
  resnum2_ = value;
}

// optional uint32 resID3 = 8;
inline bool stNotifyGuardFinish::has_resid3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stNotifyGuardFinish::set_has_resid3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stNotifyGuardFinish::clear_has_resid3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stNotifyGuardFinish::clear_resid3() {
  resid3_ = 0u;
  clear_has_resid3();
}
inline ::google::protobuf::uint32 stNotifyGuardFinish::resid3() const {
  return resid3_;
}
inline void stNotifyGuardFinish::set_resid3(::google::protobuf::uint32 value) {
  set_has_resid3();
  resid3_ = value;
}

// optional uint32 resNum3 = 9;
inline bool stNotifyGuardFinish::has_resnum3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stNotifyGuardFinish::set_has_resnum3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stNotifyGuardFinish::clear_has_resnum3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stNotifyGuardFinish::clear_resnum3() {
  resnum3_ = 0u;
  clear_has_resnum3();
}
inline ::google::protobuf::uint32 stNotifyGuardFinish::resnum3() const {
  return resnum3_;
}
inline void stNotifyGuardFinish::set_resnum3(::google::protobuf::uint32 value) {
  set_has_resnum3();
  resnum3_ = value;
}

// optional uint32 guardID = 10;
inline bool stNotifyGuardFinish::has_guardid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stNotifyGuardFinish::set_has_guardid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stNotifyGuardFinish::clear_has_guardid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stNotifyGuardFinish::clear_guardid() {
  guardid_ = 0u;
  clear_has_guardid();
}
inline ::google::protobuf::uint32 stNotifyGuardFinish::guardid() const {
  return guardid_;
}
inline void stNotifyGuardFinish::set_guardid(::google::protobuf::uint32 value) {
  set_has_guardid();
  guardid_ = value;
}

// -------------------------------------------------------------------

// stNotifyFriendGuardFinish

// optional uint32 quality = 1;
inline bool stNotifyFriendGuardFinish::has_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyFriendGuardFinish::set_has_quality() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyFriendGuardFinish::clear_has_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyFriendGuardFinish::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 stNotifyFriendGuardFinish::quality() const {
  return quality_;
}
inline void stNotifyFriendGuardFinish::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// optional uint32 beInterceptNum = 2;
inline bool stNotifyFriendGuardFinish::has_beinterceptnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyFriendGuardFinish::set_has_beinterceptnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyFriendGuardFinish::clear_has_beinterceptnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyFriendGuardFinish::clear_beinterceptnum() {
  beinterceptnum_ = 0u;
  clear_has_beinterceptnum();
}
inline ::google::protobuf::uint32 stNotifyFriendGuardFinish::beinterceptnum() const {
  return beinterceptnum_;
}
inline void stNotifyFriendGuardFinish::set_beinterceptnum(::google::protobuf::uint32 value) {
  set_has_beinterceptnum();
  beinterceptnum_ = value;
}

// optional string friendName = 3;
inline bool stNotifyFriendGuardFinish::has_friendname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyFriendGuardFinish::set_has_friendname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyFriendGuardFinish::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyFriendGuardFinish::clear_friendname() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    friendname_->clear();
  }
  clear_has_friendname();
}
inline const ::std::string& stNotifyFriendGuardFinish::friendname() const {
  return *friendname_;
}
inline void stNotifyFriendGuardFinish::set_friendname(const ::std::string& value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void stNotifyFriendGuardFinish::set_friendname(const char* value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void stNotifyFriendGuardFinish::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNotifyFriendGuardFinish::mutable_friendname() {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  return friendname_;
}
inline ::std::string* stNotifyFriendGuardFinish::release_friendname() {
  clear_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendname_;
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNotifyFriendGuardFinish::set_allocated_friendname(::std::string* friendname) {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (friendname) {
    set_has_friendname();
    friendname_ = friendname;
  } else {
    clear_has_friendname();
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 resID1 = 4;
inline bool stNotifyFriendGuardFinish::has_resid1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyFriendGuardFinish::set_has_resid1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyFriendGuardFinish::clear_has_resid1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyFriendGuardFinish::clear_resid1() {
  resid1_ = 0u;
  clear_has_resid1();
}
inline ::google::protobuf::uint32 stNotifyFriendGuardFinish::resid1() const {
  return resid1_;
}
inline void stNotifyFriendGuardFinish::set_resid1(::google::protobuf::uint32 value) {
  set_has_resid1();
  resid1_ = value;
}

// optional uint32 resNum1 = 5;
inline bool stNotifyFriendGuardFinish::has_resnum1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stNotifyFriendGuardFinish::set_has_resnum1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stNotifyFriendGuardFinish::clear_has_resnum1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stNotifyFriendGuardFinish::clear_resnum1() {
  resnum1_ = 0u;
  clear_has_resnum1();
}
inline ::google::protobuf::uint32 stNotifyFriendGuardFinish::resnum1() const {
  return resnum1_;
}
inline void stNotifyFriendGuardFinish::set_resnum1(::google::protobuf::uint32 value) {
  set_has_resnum1();
  resnum1_ = value;
}

// optional uint32 resID2 = 6;
inline bool stNotifyFriendGuardFinish::has_resid2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stNotifyFriendGuardFinish::set_has_resid2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stNotifyFriendGuardFinish::clear_has_resid2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stNotifyFriendGuardFinish::clear_resid2() {
  resid2_ = 0u;
  clear_has_resid2();
}
inline ::google::protobuf::uint32 stNotifyFriendGuardFinish::resid2() const {
  return resid2_;
}
inline void stNotifyFriendGuardFinish::set_resid2(::google::protobuf::uint32 value) {
  set_has_resid2();
  resid2_ = value;
}

// optional uint32 resNum2 = 7;
inline bool stNotifyFriendGuardFinish::has_resnum2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stNotifyFriendGuardFinish::set_has_resnum2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stNotifyFriendGuardFinish::clear_has_resnum2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stNotifyFriendGuardFinish::clear_resnum2() {
  resnum2_ = 0u;
  clear_has_resnum2();
}
inline ::google::protobuf::uint32 stNotifyFriendGuardFinish::resnum2() const {
  return resnum2_;
}
inline void stNotifyFriendGuardFinish::set_resnum2(::google::protobuf::uint32 value) {
  set_has_resnum2();
  resnum2_ = value;
}

// optional uint32 guardID = 8;
inline bool stNotifyFriendGuardFinish::has_guardid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stNotifyFriendGuardFinish::set_has_guardid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stNotifyFriendGuardFinish::clear_has_guardid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stNotifyFriendGuardFinish::clear_guardid() {
  guardid_ = 0u;
  clear_has_guardid();
}
inline ::google::protobuf::uint32 stNotifyFriendGuardFinish::guardid() const {
  return guardid_;
}
inline void stNotifyFriendGuardFinish::set_guardid(::google::protobuf::uint32 value) {
  set_has_guardid();
  guardid_ = value;
}

// -------------------------------------------------------------------

// stNotifyInterceptResult

// optional bool win = 1;
inline bool stNotifyInterceptResult::has_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyInterceptResult::set_has_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyInterceptResult::clear_has_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyInterceptResult::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool stNotifyInterceptResult::win() const {
  return win_;
}
inline void stNotifyInterceptResult::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// optional uint32 flag = 2;
inline bool stNotifyInterceptResult::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyInterceptResult::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyInterceptResult::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyInterceptResult::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 stNotifyInterceptResult::flag() const {
  return flag_;
}
inline void stNotifyInterceptResult::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// stReplyNotifyIntercept

// optional uint32 resID1 = 1;
inline bool stReplyNotifyIntercept::has_resid1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReplyNotifyIntercept::set_has_resid1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReplyNotifyIntercept::clear_has_resid1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReplyNotifyIntercept::clear_resid1() {
  resid1_ = 0u;
  clear_has_resid1();
}
inline ::google::protobuf::uint32 stReplyNotifyIntercept::resid1() const {
  return resid1_;
}
inline void stReplyNotifyIntercept::set_resid1(::google::protobuf::uint32 value) {
  set_has_resid1();
  resid1_ = value;
}

// optional uint32 resNum1 = 2;
inline bool stReplyNotifyIntercept::has_resnum1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReplyNotifyIntercept::set_has_resnum1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReplyNotifyIntercept::clear_has_resnum1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReplyNotifyIntercept::clear_resnum1() {
  resnum1_ = 0u;
  clear_has_resnum1();
}
inline ::google::protobuf::uint32 stReplyNotifyIntercept::resnum1() const {
  return resnum1_;
}
inline void stReplyNotifyIntercept::set_resnum1(::google::protobuf::uint32 value) {
  set_has_resnum1();
  resnum1_ = value;
}

// optional uint32 resID2 = 3;
inline bool stReplyNotifyIntercept::has_resid2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReplyNotifyIntercept::set_has_resid2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReplyNotifyIntercept::clear_has_resid2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReplyNotifyIntercept::clear_resid2() {
  resid2_ = 0u;
  clear_has_resid2();
}
inline ::google::protobuf::uint32 stReplyNotifyIntercept::resid2() const {
  return resid2_;
}
inline void stReplyNotifyIntercept::set_resid2(::google::protobuf::uint32 value) {
  set_has_resid2();
  resid2_ = value;
}

// optional uint32 resNum2 = 4;
inline bool stReplyNotifyIntercept::has_resnum2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReplyNotifyIntercept::set_has_resnum2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReplyNotifyIntercept::clear_has_resnum2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReplyNotifyIntercept::clear_resnum2() {
  resnum2_ = 0u;
  clear_has_resnum2();
}
inline ::google::protobuf::uint32 stReplyNotifyIntercept::resnum2() const {
  return resnum2_;
}
inline void stReplyNotifyIntercept::set_resnum2(::google::protobuf::uint32 value) {
  set_has_resnum2();
  resnum2_ = value;
}

// -------------------------------------------------------------------

// stQuickFinishGuard

// optional uint32 charID = 1;
inline bool stQuickFinishGuard::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stQuickFinishGuard::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stQuickFinishGuard::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stQuickFinishGuard::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stQuickFinishGuard::charid() const {
  return charid_;
}
inline void stQuickFinishGuard::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stQuickFinishGuardResult

// optional .MiscProto.stQuickFinishGuardResult.eResult result = 1;
inline bool stQuickFinishGuardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stQuickFinishGuardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stQuickFinishGuardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stQuickFinishGuardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stQuickFinishGuardResult_eResult stQuickFinishGuardResult::result() const {
  return static_cast< ::MiscProto::stQuickFinishGuardResult_eResult >(result_);
}
inline void stQuickFinishGuardResult::set_result(::MiscProto::stQuickFinishGuardResult_eResult value) {
  assert(::MiscProto::stQuickFinishGuardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stNotifyDelTitle

// optional uint32 titleID = 1;
inline bool stNotifyDelTitle::has_titleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyDelTitle::set_has_titleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyDelTitle::clear_has_titleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyDelTitle::clear_titleid() {
  titleid_ = 0u;
  clear_has_titleid();
}
inline ::google::protobuf::uint32 stNotifyDelTitle::titleid() const {
  return titleid_;
}
inline void stNotifyDelTitle::set_titleid(::google::protobuf::uint32 value) {
  set_has_titleid();
  titleid_ = value;
}

// -------------------------------------------------------------------

// stBeInterceptTip

// optional bool win = 1;
inline bool stBeInterceptTip::has_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBeInterceptTip::set_has_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBeInterceptTip::clear_has_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBeInterceptTip::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool stBeInterceptTip::win() const {
  return win_;
}
inline void stBeInterceptTip::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// optional string name = 2;
inline bool stBeInterceptTip::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBeInterceptTip::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBeInterceptTip::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBeInterceptTip::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stBeInterceptTip::name() const {
  return *name_;
}
inline void stBeInterceptTip::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stBeInterceptTip::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stBeInterceptTip::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBeInterceptTip::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stBeInterceptTip::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBeInterceptTip::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 quality = 3;
inline bool stBeInterceptTip::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBeInterceptTip::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBeInterceptTip::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBeInterceptTip::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 stBeInterceptTip::quality() const {
  return quality_;
}
inline void stBeInterceptTip::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// stOnlineNotifyNewInterceptInfo

// optional uint32 num = 1;
inline bool stOnlineNotifyNewInterceptInfo::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOnlineNotifyNewInterceptInfo::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOnlineNotifyNewInterceptInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOnlineNotifyNewInterceptInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stOnlineNotifyNewInterceptInfo::num() const {
  return num_;
}
inline void stOnlineNotifyNewInterceptInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 guardNum = 2;
inline bool stOnlineNotifyNewInterceptInfo::has_guardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOnlineNotifyNewInterceptInfo::set_has_guardnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOnlineNotifyNewInterceptInfo::clear_has_guardnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOnlineNotifyNewInterceptInfo::clear_guardnum() {
  guardnum_ = 0u;
  clear_has_guardnum();
}
inline ::google::protobuf::uint32 stOnlineNotifyNewInterceptInfo::guardnum() const {
  return guardnum_;
}
inline void stOnlineNotifyNewInterceptInfo::set_guardnum(::google::protobuf::uint32 value) {
  set_has_guardnum();
  guardnum_ = value;
}

// optional uint32 intercertNum = 3;
inline bool stOnlineNotifyNewInterceptInfo::has_intercertnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stOnlineNotifyNewInterceptInfo::set_has_intercertnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stOnlineNotifyNewInterceptInfo::clear_has_intercertnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stOnlineNotifyNewInterceptInfo::clear_intercertnum() {
  intercertnum_ = 0u;
  clear_has_intercertnum();
}
inline ::google::protobuf::uint32 stOnlineNotifyNewInterceptInfo::intercertnum() const {
  return intercertnum_;
}
inline void stOnlineNotifyNewInterceptInfo::set_intercertnum(::google::protobuf::uint32 value) {
  set_has_intercertnum();
  intercertnum_ = value;
}

// -------------------------------------------------------------------

// stReqOpenLimitFashionDrawWin

// optional uint32 charID = 1;
inline bool stReqOpenLimitFashionDrawWin::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenLimitFashionDrawWin::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenLimitFashionDrawWin::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenLimitFashionDrawWin::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOpenLimitFashionDrawWin::charid() const {
  return charid_;
}
inline void stReqOpenLimitFashionDrawWin::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetLimitFashionDrawWinInfo

// optional uint32 canDrawNum = 1;
inline bool stRetLimitFashionDrawWinInfo::has_candrawnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetLimitFashionDrawWinInfo::set_has_candrawnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetLimitFashionDrawWinInfo::clear_has_candrawnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetLimitFashionDrawWinInfo::clear_candrawnum() {
  candrawnum_ = 0u;
  clear_has_candrawnum();
}
inline ::google::protobuf::uint32 stRetLimitFashionDrawWinInfo::candrawnum() const {
  return candrawnum_;
}
inline void stRetLimitFashionDrawWinInfo::set_candrawnum(::google::protobuf::uint32 value) {
  set_has_candrawnum();
  candrawnum_ = value;
}

// repeated uint32 hasDrawedID = 2;
inline int stRetLimitFashionDrawWinInfo::hasdrawedid_size() const {
  return hasdrawedid_.size();
}
inline void stRetLimitFashionDrawWinInfo::clear_hasdrawedid() {
  hasdrawedid_.Clear();
}
inline ::google::protobuf::uint32 stRetLimitFashionDrawWinInfo::hasdrawedid(int index) const {
  return hasdrawedid_.Get(index);
}
inline void stRetLimitFashionDrawWinInfo::set_hasdrawedid(int index, ::google::protobuf::uint32 value) {
  hasdrawedid_.Set(index, value);
}
inline void stRetLimitFashionDrawWinInfo::add_hasdrawedid(::google::protobuf::uint32 value) {
  hasdrawedid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stRetLimitFashionDrawWinInfo::hasdrawedid() const {
  return hasdrawedid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stRetLimitFashionDrawWinInfo::mutable_hasdrawedid() {
  return &hasdrawedid_;
}

// -------------------------------------------------------------------

// stReqDrawLimitFashion

// optional uint32 charID = 1;
inline bool stReqDrawLimitFashion::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawLimitFashion::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawLimitFashion::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawLimitFashion::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqDrawLimitFashion::charid() const {
  return charid_;
}
inline void stReqDrawLimitFashion::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stDrawLimitFashionResult

// optional .MiscProto.stDrawLimitFashionResult.eResult result = 1;
inline bool stDrawLimitFashionResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDrawLimitFashionResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDrawLimitFashionResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDrawLimitFashionResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stDrawLimitFashionResult_eResult stDrawLimitFashionResult::result() const {
  return static_cast< ::MiscProto::stDrawLimitFashionResult_eResult >(result_);
}
inline void stDrawLimitFashionResult::set_result(::MiscProto::stDrawLimitFashionResult_eResult value) {
  assert(::MiscProto::stDrawLimitFashionResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 id = 2;
inline bool stDrawLimitFashionResult::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDrawLimitFashionResult::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDrawLimitFashionResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDrawLimitFashionResult::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stDrawLimitFashionResult::id() const {
  return id_;
}
inline void stDrawLimitFashionResult::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stExchangeItem

// optional uint32 itemID = 1;
inline bool stExchangeItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExchangeItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExchangeItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExchangeItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stExchangeItem::itemid() const {
  return itemid_;
}
inline void stExchangeItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stExchangeItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stExchangeItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stExchangeItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stExchangeItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stExchangeItem::num() const {
  return num_;
}
inline void stExchangeItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSynExchangeActivityiStep

// repeated .MiscProto.stExchangeItem needItems = 1;
inline int stSynExchangeActivityiStep::needitems_size() const {
  return needitems_.size();
}
inline void stSynExchangeActivityiStep::clear_needitems() {
  needitems_.Clear();
}
inline const ::MiscProto::stExchangeItem& stSynExchangeActivityiStep::needitems(int index) const {
  return needitems_.Get(index);
}
inline ::MiscProto::stExchangeItem* stSynExchangeActivityiStep::mutable_needitems(int index) {
  return needitems_.Mutable(index);
}
inline ::MiscProto::stExchangeItem* stSynExchangeActivityiStep::add_needitems() {
  return needitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stExchangeItem >&
stSynExchangeActivityiStep::needitems() const {
  return needitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stExchangeItem >*
stSynExchangeActivityiStep::mutable_needitems() {
  return &needitems_;
}

// repeated .MiscProto.stExchangeItem gotItems = 2;
inline int stSynExchangeActivityiStep::gotitems_size() const {
  return gotitems_.size();
}
inline void stSynExchangeActivityiStep::clear_gotitems() {
  gotitems_.Clear();
}
inline const ::MiscProto::stExchangeItem& stSynExchangeActivityiStep::gotitems(int index) const {
  return gotitems_.Get(index);
}
inline ::MiscProto::stExchangeItem* stSynExchangeActivityiStep::mutable_gotitems(int index) {
  return gotitems_.Mutable(index);
}
inline ::MiscProto::stExchangeItem* stSynExchangeActivityiStep::add_gotitems() {
  return gotitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stExchangeItem >&
stSynExchangeActivityiStep::gotitems() const {
  return gotitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stExchangeItem >*
stSynExchangeActivityiStep::mutable_gotitems() {
  return &gotitems_;
}

// optional uint32 hasExchgNum = 3;
inline bool stSynExchangeActivityiStep::has_hasexchgnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynExchangeActivityiStep::set_has_hasexchgnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynExchangeActivityiStep::clear_has_hasexchgnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynExchangeActivityiStep::clear_hasexchgnum() {
  hasexchgnum_ = 0u;
  clear_has_hasexchgnum();
}
inline ::google::protobuf::uint32 stSynExchangeActivityiStep::hasexchgnum() const {
  return hasexchgnum_;
}
inline void stSynExchangeActivityiStep::set_hasexchgnum(::google::protobuf::uint32 value) {
  set_has_hasexchgnum();
  hasexchgnum_ = value;
}

// optional uint32 maxExchgNum = 4;
inline bool stSynExchangeActivityiStep::has_maxexchgnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynExchangeActivityiStep::set_has_maxexchgnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynExchangeActivityiStep::clear_has_maxexchgnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynExchangeActivityiStep::clear_maxexchgnum() {
  maxexchgnum_ = 0u;
  clear_has_maxexchgnum();
}
inline ::google::protobuf::uint32 stSynExchangeActivityiStep::maxexchgnum() const {
  return maxexchgnum_;
}
inline void stSynExchangeActivityiStep::set_maxexchgnum(::google::protobuf::uint32 value) {
  set_has_maxexchgnum();
  maxexchgnum_ = value;
}

// optional uint32 stepID = 5;
inline bool stSynExchangeActivityiStep::has_stepid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynExchangeActivityiStep::set_has_stepid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynExchangeActivityiStep::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynExchangeActivityiStep::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stSynExchangeActivityiStep::stepid() const {
  return stepid_;
}
inline void stSynExchangeActivityiStep::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// optional string desc = 6;
inline bool stSynExchangeActivityiStep::has_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynExchangeActivityiStep::set_has_desc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynExchangeActivityiStep::clear_has_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynExchangeActivityiStep::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& stSynExchangeActivityiStep::desc() const {
  return *desc_;
}
inline void stSynExchangeActivityiStep::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stSynExchangeActivityiStep::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stSynExchangeActivityiStep::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynExchangeActivityiStep::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* stSynExchangeActivityiStep::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynExchangeActivityiStep::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stSynExchangeActivity

// repeated .MiscProto.stSynExchangeActivityiStep step = 1;
inline int stSynExchangeActivity::step_size() const {
  return step_.size();
}
inline void stSynExchangeActivity::clear_step() {
  step_.Clear();
}
inline const ::MiscProto::stSynExchangeActivityiStep& stSynExchangeActivity::step(int index) const {
  return step_.Get(index);
}
inline ::MiscProto::stSynExchangeActivityiStep* stSynExchangeActivity::mutable_step(int index) {
  return step_.Mutable(index);
}
inline ::MiscProto::stSynExchangeActivityiStep* stSynExchangeActivity::add_step() {
  return step_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynExchangeActivityiStep >&
stSynExchangeActivity::step() const {
  return step_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynExchangeActivityiStep >*
stSynExchangeActivity::mutable_step() {
  return &step_;
}

// optional uint32 activityID = 2;
inline bool stSynExchangeActivity::has_activityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynExchangeActivity::set_has_activityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynExchangeActivity::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynExchangeActivity::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stSynExchangeActivity::activityid() const {
  return activityid_;
}
inline void stSynExchangeActivity::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional string titile = 3;
inline bool stSynExchangeActivity::has_titile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynExchangeActivity::set_has_titile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynExchangeActivity::clear_has_titile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynExchangeActivity::clear_titile() {
  if (titile_ != &::google::protobuf::internal::kEmptyString) {
    titile_->clear();
  }
  clear_has_titile();
}
inline const ::std::string& stSynExchangeActivity::titile() const {
  return *titile_;
}
inline void stSynExchangeActivity::set_titile(const ::std::string& value) {
  set_has_titile();
  if (titile_ == &::google::protobuf::internal::kEmptyString) {
    titile_ = new ::std::string;
  }
  titile_->assign(value);
}
inline void stSynExchangeActivity::set_titile(const char* value) {
  set_has_titile();
  if (titile_ == &::google::protobuf::internal::kEmptyString) {
    titile_ = new ::std::string;
  }
  titile_->assign(value);
}
inline void stSynExchangeActivity::set_titile(const char* value, size_t size) {
  set_has_titile();
  if (titile_ == &::google::protobuf::internal::kEmptyString) {
    titile_ = new ::std::string;
  }
  titile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynExchangeActivity::mutable_titile() {
  set_has_titile();
  if (titile_ == &::google::protobuf::internal::kEmptyString) {
    titile_ = new ::std::string;
  }
  return titile_;
}
inline ::std::string* stSynExchangeActivity::release_titile() {
  clear_has_titile();
  if (titile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = titile_;
    titile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynExchangeActivity::set_allocated_titile(::std::string* titile) {
  if (titile_ != &::google::protobuf::internal::kEmptyString) {
    delete titile_;
  }
  if (titile) {
    set_has_titile();
    titile_ = titile;
  } else {
    clear_has_titile();
    titile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string desc = 4;
inline bool stSynExchangeActivity::has_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynExchangeActivity::set_has_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynExchangeActivity::clear_has_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynExchangeActivity::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& stSynExchangeActivity::desc() const {
  return *desc_;
}
inline void stSynExchangeActivity::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stSynExchangeActivity::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stSynExchangeActivity::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynExchangeActivity::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* stSynExchangeActivity::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynExchangeActivity::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool dailyRefresh = 5;
inline bool stSynExchangeActivity::has_dailyrefresh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynExchangeActivity::set_has_dailyrefresh() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynExchangeActivity::clear_has_dailyrefresh() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynExchangeActivity::clear_dailyrefresh() {
  dailyrefresh_ = false;
  clear_has_dailyrefresh();
}
inline bool stSynExchangeActivity::dailyrefresh() const {
  return dailyrefresh_;
}
inline void stSynExchangeActivity::set_dailyrefresh(bool value) {
  set_has_dailyrefresh();
  dailyrefresh_ = value;
}

// -------------------------------------------------------------------

// stRetExchangeActivity

// repeated .MiscProto.stSynExchangeActivity activity = 1;
inline int stRetExchangeActivity::activity_size() const {
  return activity_.size();
}
inline void stRetExchangeActivity::clear_activity() {
  activity_.Clear();
}
inline const ::MiscProto::stSynExchangeActivity& stRetExchangeActivity::activity(int index) const {
  return activity_.Get(index);
}
inline ::MiscProto::stSynExchangeActivity* stRetExchangeActivity::mutable_activity(int index) {
  return activity_.Mutable(index);
}
inline ::MiscProto::stSynExchangeActivity* stRetExchangeActivity::add_activity() {
  return activity_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynExchangeActivity >&
stRetExchangeActivity::activity() const {
  return activity_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynExchangeActivity >*
stRetExchangeActivity::mutable_activity() {
  return &activity_;
}

// -------------------------------------------------------------------

// stReqExchangeItem

// optional uint32 activityID = 1;
inline bool stReqExchangeItem::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqExchangeItem::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqExchangeItem::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqExchangeItem::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stReqExchangeItem::activityid() const {
  return activityid_;
}
inline void stReqExchangeItem::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 stepID = 2;
inline bool stReqExchangeItem::has_stepid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqExchangeItem::set_has_stepid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqExchangeItem::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqExchangeItem::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stReqExchangeItem::stepid() const {
  return stepid_;
}
inline void stReqExchangeItem::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// -------------------------------------------------------------------

// stExchangeItemResult

// optional .MiscProto.stExchangeItemResult.eResult result = 1;
inline bool stExchangeItemResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExchangeItemResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExchangeItemResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExchangeItemResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stExchangeItemResult_eResult stExchangeItemResult::result() const {
  return static_cast< ::MiscProto::stExchangeItemResult_eResult >(result_);
}
inline void stExchangeItemResult::set_result(::MiscProto::stExchangeItemResult_eResult value) {
  assert(::MiscProto::stExchangeItemResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 activityID = 2;
inline bool stExchangeItemResult::has_activityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stExchangeItemResult::set_has_activityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stExchangeItemResult::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stExchangeItemResult::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stExchangeItemResult::activityid() const {
  return activityid_;
}
inline void stExchangeItemResult::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 stepID = 3;
inline bool stExchangeItemResult::has_stepid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stExchangeItemResult::set_has_stepid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stExchangeItemResult::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stExchangeItemResult::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stExchangeItemResult::stepid() const {
  return stepid_;
}
inline void stExchangeItemResult::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// -------------------------------------------------------------------

// stRecycleRechargeActivity

// optional uint32 activityID = 1;
inline bool stRecycleRechargeActivity::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRecycleRechargeActivity::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRecycleRechargeActivity::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRecycleRechargeActivity::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stRecycleRechargeActivity::activityid() const {
  return activityid_;
}
inline void stRecycleRechargeActivity::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional string titile = 2;
inline bool stRecycleRechargeActivity::has_titile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRecycleRechargeActivity::set_has_titile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRecycleRechargeActivity::clear_has_titile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRecycleRechargeActivity::clear_titile() {
  if (titile_ != &::google::protobuf::internal::kEmptyString) {
    titile_->clear();
  }
  clear_has_titile();
}
inline const ::std::string& stRecycleRechargeActivity::titile() const {
  return *titile_;
}
inline void stRecycleRechargeActivity::set_titile(const ::std::string& value) {
  set_has_titile();
  if (titile_ == &::google::protobuf::internal::kEmptyString) {
    titile_ = new ::std::string;
  }
  titile_->assign(value);
}
inline void stRecycleRechargeActivity::set_titile(const char* value) {
  set_has_titile();
  if (titile_ == &::google::protobuf::internal::kEmptyString) {
    titile_ = new ::std::string;
  }
  titile_->assign(value);
}
inline void stRecycleRechargeActivity::set_titile(const char* value, size_t size) {
  set_has_titile();
  if (titile_ == &::google::protobuf::internal::kEmptyString) {
    titile_ = new ::std::string;
  }
  titile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRecycleRechargeActivity::mutable_titile() {
  set_has_titile();
  if (titile_ == &::google::protobuf::internal::kEmptyString) {
    titile_ = new ::std::string;
  }
  return titile_;
}
inline ::std::string* stRecycleRechargeActivity::release_titile() {
  clear_has_titile();
  if (titile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = titile_;
    titile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRecycleRechargeActivity::set_allocated_titile(::std::string* titile) {
  if (titile_ != &::google::protobuf::internal::kEmptyString) {
    delete titile_;
  }
  if (titile) {
    set_has_titile();
    titile_ = titile;
  } else {
    clear_has_titile();
    titile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string desc = 3;
inline bool stRecycleRechargeActivity::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRecycleRechargeActivity::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRecycleRechargeActivity::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRecycleRechargeActivity::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& stRecycleRechargeActivity::desc() const {
  return *desc_;
}
inline void stRecycleRechargeActivity::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stRecycleRechargeActivity::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stRecycleRechargeActivity::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRecycleRechargeActivity::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* stRecycleRechargeActivity::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRecycleRechargeActivity::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 maxRewardNum = 4;
inline bool stRecycleRechargeActivity::has_maxrewardnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRecycleRechargeActivity::set_has_maxrewardnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRecycleRechargeActivity::clear_has_maxrewardnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRecycleRechargeActivity::clear_maxrewardnum() {
  maxrewardnum_ = 0u;
  clear_has_maxrewardnum();
}
inline ::google::protobuf::uint32 stRecycleRechargeActivity::maxrewardnum() const {
  return maxrewardnum_;
}
inline void stRecycleRechargeActivity::set_maxrewardnum(::google::protobuf::uint32 value) {
  set_has_maxrewardnum();
  maxrewardnum_ = value;
}

// optional uint32 gotRewardNum = 5;
inline bool stRecycleRechargeActivity::has_gotrewardnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRecycleRechargeActivity::set_has_gotrewardnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRecycleRechargeActivity::clear_has_gotrewardnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRecycleRechargeActivity::clear_gotrewardnum() {
  gotrewardnum_ = 0u;
  clear_has_gotrewardnum();
}
inline ::google::protobuf::uint32 stRecycleRechargeActivity::gotrewardnum() const {
  return gotrewardnum_;
}
inline void stRecycleRechargeActivity::set_gotrewardnum(::google::protobuf::uint32 value) {
  set_has_gotrewardnum();
  gotrewardnum_ = value;
}

// optional uint32 stepVal = 6;
inline bool stRecycleRechargeActivity::has_stepval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRecycleRechargeActivity::set_has_stepval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRecycleRechargeActivity::clear_has_stepval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRecycleRechargeActivity::clear_stepval() {
  stepval_ = 0u;
  clear_has_stepval();
}
inline ::google::protobuf::uint32 stRecycleRechargeActivity::stepval() const {
  return stepval_;
}
inline void stRecycleRechargeActivity::set_stepval(::google::protobuf::uint32 value) {
  set_has_stepval();
  stepval_ = value;
}

// optional .MiscProto.stSynActivityStepInfo step = 7;
inline bool stRecycleRechargeActivity::has_step() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRecycleRechargeActivity::set_has_step() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRecycleRechargeActivity::clear_has_step() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRecycleRechargeActivity::clear_step() {
  if (step_ != NULL) step_->::MiscProto::stSynActivityStepInfo::Clear();
  clear_has_step();
}
inline const ::MiscProto::stSynActivityStepInfo& stRecycleRechargeActivity::step() const {
  return step_ != NULL ? *step_ : *default_instance_->step_;
}
inline ::MiscProto::stSynActivityStepInfo* stRecycleRechargeActivity::mutable_step() {
  set_has_step();
  if (step_ == NULL) step_ = new ::MiscProto::stSynActivityStepInfo;
  return step_;
}
inline ::MiscProto::stSynActivityStepInfo* stRecycleRechargeActivity::release_step() {
  clear_has_step();
  ::MiscProto::stSynActivityStepInfo* temp = step_;
  step_ = NULL;
  return temp;
}
inline void stRecycleRechargeActivity::set_allocated_step(::MiscProto::stSynActivityStepInfo* step) {
  delete step_;
  step_ = step;
  if (step) {
    set_has_step();
  } else {
    clear_has_step();
  }
}

// -------------------------------------------------------------------

// stSendRecycleRechargeActivity

// repeated .MiscProto.stRecycleRechargeActivity activties = 1;
inline int stSendRecycleRechargeActivity::activties_size() const {
  return activties_.size();
}
inline void stSendRecycleRechargeActivity::clear_activties() {
  activties_.Clear();
}
inline const ::MiscProto::stRecycleRechargeActivity& stSendRecycleRechargeActivity::activties(int index) const {
  return activties_.Get(index);
}
inline ::MiscProto::stRecycleRechargeActivity* stSendRecycleRechargeActivity::mutable_activties(int index) {
  return activties_.Mutable(index);
}
inline ::MiscProto::stRecycleRechargeActivity* stSendRecycleRechargeActivity::add_activties() {
  return activties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stRecycleRechargeActivity >&
stSendRecycleRechargeActivity::activties() const {
  return activties_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stRecycleRechargeActivity >*
stSendRecycleRechargeActivity::mutable_activties() {
  return &activties_;
}

// -------------------------------------------------------------------

// stReqRecycleRechargeActReward

// optional uint32 activityID = 1;
inline bool stReqRecycleRechargeActReward::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRecycleRechargeActReward::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRecycleRechargeActReward::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRecycleRechargeActReward::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stReqRecycleRechargeActReward::activityid() const {
  return activityid_;
}
inline void stReqRecycleRechargeActReward::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 stepID = 2;
inline bool stReqRecycleRechargeActReward::has_stepid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRecycleRechargeActReward::set_has_stepid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRecycleRechargeActReward::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRecycleRechargeActReward::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stReqRecycleRechargeActReward::stepid() const {
  return stepid_;
}
inline void stReqRecycleRechargeActReward::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// -------------------------------------------------------------------

// stRetRecycleRechargeActReward

// optional .MiscProto.stRetRecycleRechargeActReward.eResult result = 1;
inline bool stRetRecycleRechargeActReward::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRecycleRechargeActReward::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRecycleRechargeActReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRecycleRechargeActReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetRecycleRechargeActReward_eResult stRetRecycleRechargeActReward::result() const {
  return static_cast< ::MiscProto::stRetRecycleRechargeActReward_eResult >(result_);
}
inline void stRetRecycleRechargeActReward::set_result(::MiscProto::stRetRecycleRechargeActReward_eResult value) {
  assert(::MiscProto::stRetRecycleRechargeActReward_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 activityID = 2;
inline bool stRetRecycleRechargeActReward::has_activityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetRecycleRechargeActReward::set_has_activityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetRecycleRechargeActReward::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetRecycleRechargeActReward::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stRetRecycleRechargeActReward::activityid() const {
  return activityid_;
}
inline void stRetRecycleRechargeActReward::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// -------------------------------------------------------------------

// stCommonActInfoItem

// optional uint32 id = 1;
inline bool stCommonActInfoItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCommonActInfoItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCommonActInfoItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCommonActInfoItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stCommonActInfoItem::id() const {
  return id_;
}
inline void stCommonActInfoItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 type = 2;
inline bool stCommonActInfoItem::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCommonActInfoItem::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCommonActInfoItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCommonActInfoItem::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 stCommonActInfoItem::type() const {
  return type_;
}
inline void stCommonActInfoItem::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 val = 3;
inline bool stCommonActInfoItem::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCommonActInfoItem::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCommonActInfoItem::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCommonActInfoItem::clear_val() {
  val_ = 0u;
  clear_has_val();
}
inline ::google::protobuf::uint32 stCommonActInfoItem::val() const {
  return val_;
}
inline void stCommonActInfoItem::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// stRefreshCommonActInfo

// repeated .MiscProto.stCommonActInfoItem items = 1;
inline int stRefreshCommonActInfo::items_size() const {
  return items_.size();
}
inline void stRefreshCommonActInfo::clear_items() {
  items_.Clear();
}
inline const ::MiscProto::stCommonActInfoItem& stRefreshCommonActInfo::items(int index) const {
  return items_.Get(index);
}
inline ::MiscProto::stCommonActInfoItem* stRefreshCommonActInfo::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::MiscProto::stCommonActInfoItem* stRefreshCommonActInfo::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stCommonActInfoItem >&
stRefreshCommonActInfo::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stCommonActInfoItem >*
stRefreshCommonActInfo::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stReqAKeyFetchAttach

// repeated uint32 id = 1;
inline int stReqAKeyFetchAttach::id_size() const {
  return id_.size();
}
inline void stReqAKeyFetchAttach::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 stReqAKeyFetchAttach::id(int index) const {
  return id_.Get(index);
}
inline void stReqAKeyFetchAttach::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void stReqAKeyFetchAttach::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stReqAKeyFetchAttach::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stReqAKeyFetchAttach::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// stAKeyFetchAttachResult

// optional .MiscProto.stAKeyFetchAttachResult.Result result = 1;
inline bool stAKeyFetchAttachResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAKeyFetchAttachResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAKeyFetchAttachResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAKeyFetchAttachResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stAKeyFetchAttachResult_Result stAKeyFetchAttachResult::result() const {
  return static_cast< ::MiscProto::stAKeyFetchAttachResult_Result >(result_);
}
inline void stAKeyFetchAttachResult::set_result(::MiscProto::stAKeyFetchAttachResult_Result value) {
  assert(::MiscProto::stAKeyFetchAttachResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqGloryfashion

// optional uint32 charID = 1;
inline bool stReqGloryfashion::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGloryfashion::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGloryfashion::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGloryfashion::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqGloryfashion::charid() const {
  return charid_;
}
inline void stReqGloryfashion::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGloryfashionResult

// optional .MiscProto.stGloryfashionResult.eResult result = 1;
inline bool stGloryfashionResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGloryfashionResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGloryfashionResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGloryfashionResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stGloryfashionResult_eResult stGloryfashionResult::result() const {
  return static_cast< ::MiscProto::stGloryfashionResult_eResult >(result_);
}
inline void stGloryfashionResult::set_result(::MiscProto::stGloryfashionResult_eResult value) {
  assert(::MiscProto::stGloryfashionResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stDevilCallItem

// optional uint32 itemId = 1;
inline bool stDevilCallItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDevilCallItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDevilCallItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDevilCallItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stDevilCallItem::itemid() const {
  return itemid_;
}
inline void stDevilCallItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 bossDrawStatus = 2;
inline bool stDevilCallItem::has_bossdrawstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDevilCallItem::set_has_bossdrawstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDevilCallItem::clear_has_bossdrawstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDevilCallItem::clear_bossdrawstatus() {
  bossdrawstatus_ = 0u;
  clear_has_bossdrawstatus();
}
inline ::google::protobuf::uint32 stDevilCallItem::bossdrawstatus() const {
  return bossdrawstatus_;
}
inline void stDevilCallItem::set_bossdrawstatus(::google::protobuf::uint32 value) {
  set_has_bossdrawstatus();
  bossdrawstatus_ = value;
}

// optional uint32 commonDrawStatus = 3;
inline bool stDevilCallItem::has_commondrawstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDevilCallItem::set_has_commondrawstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDevilCallItem::clear_has_commondrawstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDevilCallItem::clear_commondrawstatus() {
  commondrawstatus_ = 0u;
  clear_has_commondrawstatus();
}
inline ::google::protobuf::uint32 stDevilCallItem::commondrawstatus() const {
  return commondrawstatus_;
}
inline void stDevilCallItem::set_commondrawstatus(::google::protobuf::uint32 value) {
  set_has_commondrawstatus();
  commondrawstatus_ = value;
}

// optional string name1 = 4;
inline bool stDevilCallItem::has_name1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stDevilCallItem::set_has_name1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stDevilCallItem::clear_has_name1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stDevilCallItem::clear_name1() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    name1_->clear();
  }
  clear_has_name1();
}
inline const ::std::string& stDevilCallItem::name1() const {
  return *name1_;
}
inline void stDevilCallItem::set_name1(const ::std::string& value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
}
inline void stDevilCallItem::set_name1(const char* value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
}
inline void stDevilCallItem::set_name1(const char* value, size_t size) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stDevilCallItem::mutable_name1() {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  return name1_;
}
inline ::std::string* stDevilCallItem::release_name1() {
  clear_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name1_;
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stDevilCallItem::set_allocated_name1(::std::string* name1) {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    delete name1_;
  }
  if (name1) {
    set_has_name1();
    name1_ = name1;
  } else {
    clear_has_name1();
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name2 = 5;
inline bool stDevilCallItem::has_name2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stDevilCallItem::set_has_name2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stDevilCallItem::clear_has_name2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stDevilCallItem::clear_name2() {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    name2_->clear();
  }
  clear_has_name2();
}
inline const ::std::string& stDevilCallItem::name2() const {
  return *name2_;
}
inline void stDevilCallItem::set_name2(const ::std::string& value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void stDevilCallItem::set_name2(const char* value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void stDevilCallItem::set_name2(const char* value, size_t size) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stDevilCallItem::mutable_name2() {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  return name2_;
}
inline ::std::string* stDevilCallItem::release_name2() {
  clear_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name2_;
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stDevilCallItem::set_allocated_name2(::std::string* name2) {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (name2) {
    set_has_name2();
    name2_ = name2;
  } else {
    clear_has_name2();
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name3 = 6;
inline bool stDevilCallItem::has_name3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stDevilCallItem::set_has_name3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stDevilCallItem::clear_has_name3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stDevilCallItem::clear_name3() {
  if (name3_ != &::google::protobuf::internal::kEmptyString) {
    name3_->clear();
  }
  clear_has_name3();
}
inline const ::std::string& stDevilCallItem::name3() const {
  return *name3_;
}
inline void stDevilCallItem::set_name3(const ::std::string& value) {
  set_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    name3_ = new ::std::string;
  }
  name3_->assign(value);
}
inline void stDevilCallItem::set_name3(const char* value) {
  set_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    name3_ = new ::std::string;
  }
  name3_->assign(value);
}
inline void stDevilCallItem::set_name3(const char* value, size_t size) {
  set_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    name3_ = new ::std::string;
  }
  name3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stDevilCallItem::mutable_name3() {
  set_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    name3_ = new ::std::string;
  }
  return name3_;
}
inline ::std::string* stDevilCallItem::release_name3() {
  clear_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name3_;
    name3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stDevilCallItem::set_allocated_name3(::std::string* name3) {
  if (name3_ != &::google::protobuf::internal::kEmptyString) {
    delete name3_;
  }
  if (name3) {
    set_has_name3();
    name3_ = name3;
  } else {
    clear_has_name3();
    name3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool hasPass = 7;
inline bool stDevilCallItem::has_haspass() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stDevilCallItem::set_has_haspass() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stDevilCallItem::clear_has_haspass() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stDevilCallItem::clear_haspass() {
  haspass_ = false;
  clear_has_haspass();
}
inline bool stDevilCallItem::haspass() const {
  return haspass_;
}
inline void stDevilCallItem::set_haspass(bool value) {
  set_has_haspass();
  haspass_ = value;
}

// -------------------------------------------------------------------

// stReqAllDevilCall

// optional uint32 charID = 1;
inline bool stReqAllDevilCall::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAllDevilCall::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAllDevilCall::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAllDevilCall::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqAllDevilCall::charid() const {
  return charid_;
}
inline void stReqAllDevilCall::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetAllDevilCall

// optional .MiscProto.stRetAllDevilCall.eResult result = 1;
inline bool stRetAllDevilCall::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetAllDevilCall::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetAllDevilCall::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetAllDevilCall::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetAllDevilCall_eResult stRetAllDevilCall::result() const {
  return static_cast< ::MiscProto::stRetAllDevilCall_eResult >(result_);
}
inline void stRetAllDevilCall::set_result(::MiscProto::stRetAllDevilCall_eResult value) {
  assert(::MiscProto::stRetAllDevilCall_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated .MiscProto.stDevilCallItem item = 2;
inline int stRetAllDevilCall::item_size() const {
  return item_.size();
}
inline void stRetAllDevilCall::clear_item() {
  item_.Clear();
}
inline const ::MiscProto::stDevilCallItem& stRetAllDevilCall::item(int index) const {
  return item_.Get(index);
}
inline ::MiscProto::stDevilCallItem* stRetAllDevilCall::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::MiscProto::stDevilCallItem* stRetAllDevilCall::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stDevilCallItem >&
stRetAllDevilCall::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stDevilCallItem >*
stRetAllDevilCall::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// stReqDevilCallReward

// optional .MiscProto.stReqDevilCallReward.eType rewardType = 1;
inline bool stReqDevilCallReward::has_rewardtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDevilCallReward::set_has_rewardtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDevilCallReward::clear_has_rewardtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDevilCallReward::clear_rewardtype() {
  rewardtype_ = 1;
  clear_has_rewardtype();
}
inline ::MiscProto::stReqDevilCallReward_eType stReqDevilCallReward::rewardtype() const {
  return static_cast< ::MiscProto::stReqDevilCallReward_eType >(rewardtype_);
}
inline void stReqDevilCallReward::set_rewardtype(::MiscProto::stReqDevilCallReward_eType value) {
  assert(::MiscProto::stReqDevilCallReward_eType_IsValid(value));
  set_has_rewardtype();
  rewardtype_ = value;
}

// optional uint32 bossId = 2;
inline bool stReqDevilCallReward::has_bossid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqDevilCallReward::set_has_bossid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqDevilCallReward::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqDevilCallReward::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 stReqDevilCallReward::bossid() const {
  return bossid_;
}
inline void stReqDevilCallReward::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
}

// -------------------------------------------------------------------

// stRetDevilCallReward

// optional .MiscProto.stRetDevilCallReward.eType rewardType = 1;
inline bool stRetDevilCallReward::has_rewardtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDevilCallReward::set_has_rewardtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDevilCallReward::clear_has_rewardtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDevilCallReward::clear_rewardtype() {
  rewardtype_ = 1;
  clear_has_rewardtype();
}
inline ::MiscProto::stRetDevilCallReward_eType stRetDevilCallReward::rewardtype() const {
  return static_cast< ::MiscProto::stRetDevilCallReward_eType >(rewardtype_);
}
inline void stRetDevilCallReward::set_rewardtype(::MiscProto::stRetDevilCallReward_eType value) {
  assert(::MiscProto::stRetDevilCallReward_eType_IsValid(value));
  set_has_rewardtype();
  rewardtype_ = value;
}

// optional .MiscProto.stRetDevilCallReward.eResult result = 2;
inline bool stRetDevilCallReward::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetDevilCallReward::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetDevilCallReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetDevilCallReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetDevilCallReward_eResult stRetDevilCallReward::result() const {
  return static_cast< ::MiscProto::stRetDevilCallReward_eResult >(result_);
}
inline void stRetDevilCallReward::set_result(::MiscProto::stRetDevilCallReward_eResult value) {
  assert(::MiscProto::stRetDevilCallReward_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 bossId = 3;
inline bool stRetDevilCallReward::has_bossid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetDevilCallReward::set_has_bossid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetDevilCallReward::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetDevilCallReward::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 stRetDevilCallReward::bossid() const {
  return bossid_;
}
inline void stRetDevilCallReward::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
}

// -------------------------------------------------------------------

// stReqDevilCall

// optional uint32 bossId = 1;
inline bool stReqDevilCall::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDevilCall::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDevilCall::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDevilCall::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 stReqDevilCall::bossid() const {
  return bossid_;
}
inline void stReqDevilCall::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
}

// -------------------------------------------------------------------

// stRetDevilCall

// optional uint32 id = 1;
inline bool stRetDevilCall::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDevilCall::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDevilCall::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDevilCall::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stRetDevilCall::id() const {
  return id_;
}
inline void stRetDevilCall::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .MiscProto.stRetDevilCall.eResult result = 2;
inline bool stRetDevilCall::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetDevilCall::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetDevilCall::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetDevilCall::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetDevilCall_eResult stRetDevilCall::result() const {
  return static_cast< ::MiscProto::stRetDevilCall_eResult >(result_);
}
inline void stRetDevilCall::set_result(::MiscProto::stRetDevilCall_eResult value) {
  assert(::MiscProto::stRetDevilCall_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated .MiscProto.stSynDrawItem items = 3;
inline int stRetDevilCall::items_size() const {
  return items_.size();
}
inline void stRetDevilCall::clear_items() {
  items_.Clear();
}
inline const ::MiscProto::stSynDrawItem& stRetDevilCall::items(int index) const {
  return items_.Get(index);
}
inline ::MiscProto::stSynDrawItem* stRetDevilCall::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::MiscProto::stSynDrawItem* stRetDevilCall::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynDrawItem >&
stRetDevilCall::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynDrawItem >*
stRetDevilCall::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stReqDevilCallSummary

// optional uint32 charID = 1;
inline bool stReqDevilCallSummary::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDevilCallSummary::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDevilCallSummary::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDevilCallSummary::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqDevilCallSummary::charid() const {
  return charid_;
}
inline void stReqDevilCallSummary::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetDevilCallSummary

// repeated .MiscProto.stDevilCallItem item = 2;
inline int stRetDevilCallSummary::item_size() const {
  return item_.size();
}
inline void stRetDevilCallSummary::clear_item() {
  item_.Clear();
}
inline const ::MiscProto::stDevilCallItem& stRetDevilCallSummary::item(int index) const {
  return item_.Get(index);
}
inline ::MiscProto::stDevilCallItem* stRetDevilCallSummary::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::MiscProto::stDevilCallItem* stRetDevilCallSummary::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stDevilCallItem >&
stRetDevilCallSummary::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stDevilCallItem >*
stRetDevilCallSummary::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// stReqPayType

// optional uint32 charID = 1;
inline bool stReqPayType::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqPayType::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqPayType::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqPayType::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqPayType::charid() const {
  return charid_;
}
inline void stReqPayType::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 itemId = 2;
inline bool stReqPayType::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqPayType::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqPayType::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqPayType::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stReqPayType::itemid() const {
  return itemid_;
}
inline void stReqPayType::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string serverId = 3;
inline bool stReqPayType::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqPayType::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqPayType::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqPayType::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::kEmptyString) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& stReqPayType::serverid() const {
  return *serverid_;
}
inline void stReqPayType::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::kEmptyString) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
}
inline void stReqPayType::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::kEmptyString) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
}
inline void stReqPayType::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::kEmptyString) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqPayType::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::kEmptyString) {
    serverid_ = new ::std::string;
  }
  return serverid_;
}
inline ::std::string* stReqPayType::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqPayType::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::kEmptyString) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isExtend = 4;
inline bool stReqPayType::has_isextend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqPayType::set_has_isextend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqPayType::clear_has_isextend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqPayType::clear_isextend() {
  isextend_ = false;
  clear_has_isextend();
}
inline bool stReqPayType::isextend() const {
  return isextend_;
}
inline void stReqPayType::set_isextend(bool value) {
  set_has_isextend();
  isextend_ = value;
}

// optional string data = 5;
inline bool stReqPayType::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stReqPayType::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stReqPayType::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stReqPayType::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stReqPayType::data() const {
  return *data_;
}
inline void stReqPayType::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stReqPayType::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stReqPayType::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqPayType::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stReqPayType::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqPayType::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stRetPayType

// optional string payType = 1;
inline bool stRetPayType::has_paytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetPayType::set_has_paytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetPayType::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetPayType::clear_paytype() {
  if (paytype_ != &::google::protobuf::internal::kEmptyString) {
    paytype_->clear();
  }
  clear_has_paytype();
}
inline const ::std::string& stRetPayType::paytype() const {
  return *paytype_;
}
inline void stRetPayType::set_paytype(const ::std::string& value) {
  set_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    paytype_ = new ::std::string;
  }
  paytype_->assign(value);
}
inline void stRetPayType::set_paytype(const char* value) {
  set_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    paytype_ = new ::std::string;
  }
  paytype_->assign(value);
}
inline void stRetPayType::set_paytype(const char* value, size_t size) {
  set_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    paytype_ = new ::std::string;
  }
  paytype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetPayType::mutable_paytype() {
  set_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    paytype_ = new ::std::string;
  }
  return paytype_;
}
inline ::std::string* stRetPayType::release_paytype() {
  clear_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paytype_;
    paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetPayType::set_allocated_paytype(::std::string* paytype) {
  if (paytype_ != &::google::protobuf::internal::kEmptyString) {
    delete paytype_;
  }
  if (paytype) {
    set_has_paytype();
    paytype_ = paytype;
  } else {
    clear_has_paytype();
    paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 itemId = 2;
inline bool stRetPayType::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetPayType::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetPayType::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetPayType::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stRetPayType::itemid() const {
  return itemid_;
}
inline void stRetPayType::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string orderId = 3;
inline bool stRetPayType::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetPayType::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetPayType::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetPayType::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& stRetPayType::orderid() const {
  return *orderid_;
}
inline void stRetPayType::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void stRetPayType::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void stRetPayType::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetPayType::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* stRetPayType::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetPayType::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .MiscProto.stRetPayType.eResult res = 4;
inline bool stRetPayType::has_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetPayType::set_has_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetPayType::clear_has_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetPayType::clear_res() {
  res_ = 1;
  clear_has_res();
}
inline ::MiscProto::stRetPayType_eResult stRetPayType::res() const {
  return static_cast< ::MiscProto::stRetPayType_eResult >(res_);
}
inline void stRetPayType::set_res(::MiscProto::stRetPayType_eResult value) {
  assert(::MiscProto::stRetPayType_eResult_IsValid(value));
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// stReqOperateActvity

// optional uint32 charID = 1;
inline bool stReqOperateActvity::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOperateActvity::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOperateActvity::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOperateActvity::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOperateActvity::charid() const {
  return charid_;
}
inline void stReqOperateActvity::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOperateActvityItemInfo

// optional uint32 itemId = 1;
inline bool stOperateActvityItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOperateActvityItemInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOperateActvityItemInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOperateActvityItemInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stOperateActvityItemInfo::itemid() const {
  return itemid_;
}
inline void stOperateActvityItemInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 status = 2;
inline bool stOperateActvityItemInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOperateActvityItemInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOperateActvityItemInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOperateActvityItemInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 stOperateActvityItemInfo::status() const {
  return status_;
}
inline void stOperateActvityItemInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// stOperateActvityItems

// optional uint32 activityId = 1;
inline bool stOperateActvityItems::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOperateActvityItems::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOperateActvityItems::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOperateActvityItems::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stOperateActvityItems::activityid() const {
  return activityid_;
}
inline void stOperateActvityItems::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 condition = 2;
inline bool stOperateActvityItems::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOperateActvityItems::set_has_condition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOperateActvityItems::clear_has_condition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOperateActvityItems::clear_condition() {
  condition_ = 0u;
  clear_has_condition();
}
inline ::google::protobuf::uint32 stOperateActvityItems::condition() const {
  return condition_;
}
inline void stOperateActvityItems::set_condition(::google::protobuf::uint32 value) {
  set_has_condition();
  condition_ = value;
}

// repeated .MiscProto.stOperateActvityItemInfo itemInfo = 3;
inline int stOperateActvityItems::iteminfo_size() const {
  return iteminfo_.size();
}
inline void stOperateActvityItems::clear_iteminfo() {
  iteminfo_.Clear();
}
inline const ::MiscProto::stOperateActvityItemInfo& stOperateActvityItems::iteminfo(int index) const {
  return iteminfo_.Get(index);
}
inline ::MiscProto::stOperateActvityItemInfo* stOperateActvityItems::mutable_iteminfo(int index) {
  return iteminfo_.Mutable(index);
}
inline ::MiscProto::stOperateActvityItemInfo* stOperateActvityItems::add_iteminfo() {
  return iteminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stOperateActvityItemInfo >&
stOperateActvityItems::iteminfo() const {
  return iteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stOperateActvityItemInfo >*
stOperateActvityItems::mutable_iteminfo() {
  return &iteminfo_;
}

// -------------------------------------------------------------------

// stRetOperateActvity

// repeated .MiscProto.stOperateActvityItems items = 1;
inline int stRetOperateActvity::items_size() const {
  return items_.size();
}
inline void stRetOperateActvity::clear_items() {
  items_.Clear();
}
inline const ::MiscProto::stOperateActvityItems& stRetOperateActvity::items(int index) const {
  return items_.Get(index);
}
inline ::MiscProto::stOperateActvityItems* stRetOperateActvity::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::MiscProto::stOperateActvityItems* stRetOperateActvity::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stOperateActvityItems >&
stRetOperateActvity::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stOperateActvityItems >*
stRetOperateActvity::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stReqOperateActvityReward

// optional uint32 activityId = 1;
inline bool stReqOperateActvityReward::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOperateActvityReward::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOperateActvityReward::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOperateActvityReward::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stReqOperateActvityReward::activityid() const {
  return activityid_;
}
inline void stReqOperateActvityReward::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 itemId = 2;
inline bool stReqOperateActvityReward::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqOperateActvityReward::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqOperateActvityReward::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqOperateActvityReward::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stReqOperateActvityReward::itemid() const {
  return itemid_;
}
inline void stReqOperateActvityReward::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// stRetOperateActvityReward

// optional uint32 activityId = 1;
inline bool stRetOperateActvityReward::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetOperateActvityReward::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetOperateActvityReward::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetOperateActvityReward::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stRetOperateActvityReward::activityid() const {
  return activityid_;
}
inline void stRetOperateActvityReward::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 itemId = 2;
inline bool stRetOperateActvityReward::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetOperateActvityReward::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetOperateActvityReward::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetOperateActvityReward::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stRetOperateActvityReward::itemid() const {
  return itemid_;
}
inline void stRetOperateActvityReward::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional .MiscProto.stRetOperateActvityReward.Result res = 3;
inline bool stRetOperateActvityReward::has_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetOperateActvityReward::set_has_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetOperateActvityReward::clear_has_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetOperateActvityReward::clear_res() {
  res_ = 1;
  clear_has_res();
}
inline ::MiscProto::stRetOperateActvityReward_Result stRetOperateActvityReward::res() const {
  return static_cast< ::MiscProto::stRetOperateActvityReward_Result >(res_);
}
inline void stRetOperateActvityReward::set_res(::MiscProto::stRetOperateActvityReward_Result value) {
  assert(::MiscProto::stRetOperateActvityReward_Result_IsValid(value));
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// stReqIllusionSprite

// optional uint32 id = 1;
inline bool stReqIllusionSprite::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqIllusionSprite::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqIllusionSprite::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqIllusionSprite::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqIllusionSprite::id() const {
  return id_;
}
inline void stReqIllusionSprite::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stIllusionSpriteSkillItem

// optional uint32 skillId = 1;
inline bool stIllusionSpriteSkillItem::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stIllusionSpriteSkillItem::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stIllusionSpriteSkillItem::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stIllusionSpriteSkillItem::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stIllusionSpriteSkillItem::skillid() const {
  return skillid_;
}
inline void stIllusionSpriteSkillItem::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 skillLvl = 2;
inline bool stIllusionSpriteSkillItem::has_skilllvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stIllusionSpriteSkillItem::set_has_skilllvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stIllusionSpriteSkillItem::clear_has_skilllvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stIllusionSpriteSkillItem::clear_skilllvl() {
  skilllvl_ = 0u;
  clear_has_skilllvl();
}
inline ::google::protobuf::uint32 stIllusionSpriteSkillItem::skilllvl() const {
  return skilllvl_;
}
inline void stIllusionSpriteSkillItem::set_skilllvl(::google::protobuf::uint32 value) {
  set_has_skilllvl();
  skilllvl_ = value;
}

// -------------------------------------------------------------------

// stRetIllusionSprite

// optional uint32 id = 1;
inline bool stRetIllusionSprite::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetIllusionSprite::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetIllusionSprite::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetIllusionSprite::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stRetIllusionSprite::id() const {
  return id_;
}
inline void stRetIllusionSprite::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 lvl = 2;
inline bool stRetIllusionSprite::has_lvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetIllusionSprite::set_has_lvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetIllusionSprite::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetIllusionSprite::clear_lvl() {
  lvl_ = 0u;
  clear_has_lvl();
}
inline ::google::protobuf::uint32 stRetIllusionSprite::lvl() const {
  return lvl_;
}
inline void stRetIllusionSprite::set_lvl(::google::protobuf::uint32 value) {
  set_has_lvl();
  lvl_ = value;
}

// optional uint32 exp = 3;
inline bool stRetIllusionSprite::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetIllusionSprite::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetIllusionSprite::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetIllusionSprite::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 stRetIllusionSprite::exp() const {
  return exp_;
}
inline void stRetIllusionSprite::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 talentNum = 4;
inline bool stRetIllusionSprite::has_talentnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetIllusionSprite::set_has_talentnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetIllusionSprite::clear_has_talentnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetIllusionSprite::clear_talentnum() {
  talentnum_ = 0u;
  clear_has_talentnum();
}
inline ::google::protobuf::uint32 stRetIllusionSprite::talentnum() const {
  return talentnum_;
}
inline void stRetIllusionSprite::set_talentnum(::google::protobuf::uint32 value) {
  set_has_talentnum();
  talentnum_ = value;
}

// repeated .MiscProto.stIllusionSpriteSkillItem skills = 5;
inline int stRetIllusionSprite::skills_size() const {
  return skills_.size();
}
inline void stRetIllusionSprite::clear_skills() {
  skills_.Clear();
}
inline const ::MiscProto::stIllusionSpriteSkillItem& stRetIllusionSprite::skills(int index) const {
  return skills_.Get(index);
}
inline ::MiscProto::stIllusionSpriteSkillItem* stRetIllusionSprite::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::MiscProto::stIllusionSpriteSkillItem* stRetIllusionSprite::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stIllusionSpriteSkillItem >&
stRetIllusionSprite::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stIllusionSpriteSkillItem >*
stRetIllusionSprite::mutable_skills() {
  return &skills_;
}

// optional .MiscProto.stRetIllusionSprite.eResult res = 6;
inline bool stRetIllusionSprite::has_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetIllusionSprite::set_has_res() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetIllusionSprite::clear_has_res() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetIllusionSprite::clear_res() {
  res_ = 1;
  clear_has_res();
}
inline ::MiscProto::stRetIllusionSprite_eResult stRetIllusionSprite::res() const {
  return static_cast< ::MiscProto::stRetIllusionSprite_eResult >(res_);
}
inline void stRetIllusionSprite::set_res(::MiscProto::stRetIllusionSprite_eResult value) {
  assert(::MiscProto::stRetIllusionSprite_eResult_IsValid(value));
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// illusionSpriteEatItem

// optional uint64 id = 1;
inline bool illusionSpriteEatItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void illusionSpriteEatItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void illusionSpriteEatItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void illusionSpriteEatItem::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 illusionSpriteEatItem::id() const {
  return id_;
}
inline void illusionSpriteEatItem::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 num = 2;
inline bool illusionSpriteEatItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void illusionSpriteEatItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void illusionSpriteEatItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void illusionSpriteEatItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 illusionSpriteEatItem::num() const {
  return num_;
}
inline void illusionSpriteEatItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stReqIllusionSpriteEat

// optional uint32 id = 1;
inline bool stReqIllusionSpriteEat::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqIllusionSpriteEat::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqIllusionSpriteEat::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqIllusionSpriteEat::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqIllusionSpriteEat::id() const {
  return id_;
}
inline void stReqIllusionSpriteEat::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated .MiscProto.illusionSpriteEatItem eatItem = 2;
inline int stReqIllusionSpriteEat::eatitem_size() const {
  return eatitem_.size();
}
inline void stReqIllusionSpriteEat::clear_eatitem() {
  eatitem_.Clear();
}
inline const ::MiscProto::illusionSpriteEatItem& stReqIllusionSpriteEat::eatitem(int index) const {
  return eatitem_.Get(index);
}
inline ::MiscProto::illusionSpriteEatItem* stReqIllusionSpriteEat::mutable_eatitem(int index) {
  return eatitem_.Mutable(index);
}
inline ::MiscProto::illusionSpriteEatItem* stReqIllusionSpriteEat::add_eatitem() {
  return eatitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::illusionSpriteEatItem >&
stReqIllusionSpriteEat::eatitem() const {
  return eatitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::illusionSpriteEatItem >*
stReqIllusionSpriteEat::mutable_eatitem() {
  return &eatitem_;
}

// -------------------------------------------------------------------

// stRetIllusionSpriteEat

// optional uint32 id = 1;
inline bool stRetIllusionSpriteEat::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetIllusionSpriteEat::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetIllusionSpriteEat::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetIllusionSpriteEat::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stRetIllusionSpriteEat::id() const {
  return id_;
}
inline void stRetIllusionSpriteEat::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 lvl = 2;
inline bool stRetIllusionSpriteEat::has_lvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetIllusionSpriteEat::set_has_lvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetIllusionSpriteEat::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetIllusionSpriteEat::clear_lvl() {
  lvl_ = 0u;
  clear_has_lvl();
}
inline ::google::protobuf::uint32 stRetIllusionSpriteEat::lvl() const {
  return lvl_;
}
inline void stRetIllusionSpriteEat::set_lvl(::google::protobuf::uint32 value) {
  set_has_lvl();
  lvl_ = value;
}

// optional uint32 exp = 3;
inline bool stRetIllusionSpriteEat::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetIllusionSpriteEat::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetIllusionSpriteEat::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetIllusionSpriteEat::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 stRetIllusionSpriteEat::exp() const {
  return exp_;
}
inline void stRetIllusionSpriteEat::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 talentNum = 4;
inline bool stRetIllusionSpriteEat::has_talentnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetIllusionSpriteEat::set_has_talentnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetIllusionSpriteEat::clear_has_talentnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetIllusionSpriteEat::clear_talentnum() {
  talentnum_ = 0u;
  clear_has_talentnum();
}
inline ::google::protobuf::uint32 stRetIllusionSpriteEat::talentnum() const {
  return talentnum_;
}
inline void stRetIllusionSpriteEat::set_talentnum(::google::protobuf::uint32 value) {
  set_has_talentnum();
  talentnum_ = value;
}

// optional .MiscProto.stRetIllusionSpriteEat.eResult res = 5;
inline bool stRetIllusionSpriteEat::has_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetIllusionSpriteEat::set_has_res() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetIllusionSpriteEat::clear_has_res() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetIllusionSpriteEat::clear_res() {
  res_ = 1;
  clear_has_res();
}
inline ::MiscProto::stRetIllusionSpriteEat_eResult stRetIllusionSpriteEat::res() const {
  return static_cast< ::MiscProto::stRetIllusionSpriteEat_eResult >(res_);
}
inline void stRetIllusionSpriteEat::set_res(::MiscProto::stRetIllusionSpriteEat_eResult value) {
  assert(::MiscProto::stRetIllusionSpriteEat_eResult_IsValid(value));
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// stReqIllusionSpriteSkillUp

// optional uint32 id = 1;
inline bool stReqIllusionSpriteSkillUp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqIllusionSpriteSkillUp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqIllusionSpriteSkillUp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqIllusionSpriteSkillUp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqIllusionSpriteSkillUp::id() const {
  return id_;
}
inline void stReqIllusionSpriteSkillUp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 skillId = 2;
inline bool stReqIllusionSpriteSkillUp::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqIllusionSpriteSkillUp::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqIllusionSpriteSkillUp::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqIllusionSpriteSkillUp::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stReqIllusionSpriteSkillUp::skillid() const {
  return skillid_;
}
inline void stReqIllusionSpriteSkillUp::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// -------------------------------------------------------------------

// stRetIllusionSpriteSkillUp

// optional uint32 id = 1;
inline bool stRetIllusionSpriteSkillUp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetIllusionSpriteSkillUp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetIllusionSpriteSkillUp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetIllusionSpriteSkillUp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stRetIllusionSpriteSkillUp::id() const {
  return id_;
}
inline void stRetIllusionSpriteSkillUp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 skillId = 2;
inline bool stRetIllusionSpriteSkillUp::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetIllusionSpriteSkillUp::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetIllusionSpriteSkillUp::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetIllusionSpriteSkillUp::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stRetIllusionSpriteSkillUp::skillid() const {
  return skillid_;
}
inline void stRetIllusionSpriteSkillUp::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 skillLvl = 3;
inline bool stRetIllusionSpriteSkillUp::has_skilllvl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetIllusionSpriteSkillUp::set_has_skilllvl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetIllusionSpriteSkillUp::clear_has_skilllvl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetIllusionSpriteSkillUp::clear_skilllvl() {
  skilllvl_ = 0u;
  clear_has_skilllvl();
}
inline ::google::protobuf::uint32 stRetIllusionSpriteSkillUp::skilllvl() const {
  return skilllvl_;
}
inline void stRetIllusionSpriteSkillUp::set_skilllvl(::google::protobuf::uint32 value) {
  set_has_skilllvl();
  skilllvl_ = value;
}

// optional .MiscProto.stRetIllusionSpriteSkillUp.eResult res = 4;
inline bool stRetIllusionSpriteSkillUp::has_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetIllusionSpriteSkillUp::set_has_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetIllusionSpriteSkillUp::clear_has_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetIllusionSpriteSkillUp::clear_res() {
  res_ = 1;
  clear_has_res();
}
inline ::MiscProto::stRetIllusionSpriteSkillUp_eResult stRetIllusionSpriteSkillUp::res() const {
  return static_cast< ::MiscProto::stRetIllusionSpriteSkillUp_eResult >(res_);
}
inline void stRetIllusionSpriteSkillUp::set_res(::MiscProto::stRetIllusionSpriteSkillUp_eResult value) {
  assert(::MiscProto::stRetIllusionSpriteSkillUp_eResult_IsValid(value));
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// stRepOpenDiscoverWindow

// optional uint32 charID = 1;
inline bool stRepOpenDiscoverWindow::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRepOpenDiscoverWindow::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRepOpenDiscoverWindow::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRepOpenDiscoverWindow::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRepOpenDiscoverWindow::charid() const {
  return charid_;
}
inline void stRepOpenDiscoverWindow::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOpenDiscoverWindowResult

// optional uint32 mapID = 1;
inline bool stOpenDiscoverWindowResult::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOpenDiscoverWindowResult::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOpenDiscoverWindowResult::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOpenDiscoverWindowResult::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 stOpenDiscoverWindowResult::mapid() const {
  return mapid_;
}
inline void stOpenDiscoverWindowResult::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional uint32 place = 2;
inline bool stOpenDiscoverWindowResult::has_place() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOpenDiscoverWindowResult::set_has_place() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOpenDiscoverWindowResult::clear_has_place() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOpenDiscoverWindowResult::clear_place() {
  place_ = 0u;
  clear_has_place();
}
inline ::google::protobuf::uint32 stOpenDiscoverWindowResult::place() const {
  return place_;
}
inline void stOpenDiscoverWindowResult::set_place(::google::protobuf::uint32 value) {
  set_has_place();
  place_ = value;
}

// optional uint32 taskID = 3;
inline bool stOpenDiscoverWindowResult::has_taskid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stOpenDiscoverWindowResult::set_has_taskid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stOpenDiscoverWindowResult::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stOpenDiscoverWindowResult::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 stOpenDiscoverWindowResult::taskid() const {
  return taskid_;
}
inline void stOpenDiscoverWindowResult::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional uint32 state = 4;
inline bool stOpenDiscoverWindowResult::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stOpenDiscoverWindowResult::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stOpenDiscoverWindowResult::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stOpenDiscoverWindowResult::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 stOpenDiscoverWindowResult::state() const {
  return state_;
}
inline void stOpenDiscoverWindowResult::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional uint32 battleNum = 5;
inline bool stOpenDiscoverWindowResult::has_battlenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stOpenDiscoverWindowResult::set_has_battlenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stOpenDiscoverWindowResult::clear_has_battlenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stOpenDiscoverWindowResult::clear_battlenum() {
  battlenum_ = 0u;
  clear_has_battlenum();
}
inline ::google::protobuf::uint32 stOpenDiscoverWindowResult::battlenum() const {
  return battlenum_;
}
inline void stOpenDiscoverWindowResult::set_battlenum(::google::protobuf::uint32 value) {
  set_has_battlenum();
  battlenum_ = value;
}

// optional uint32 integral = 6;
inline bool stOpenDiscoverWindowResult::has_integral() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stOpenDiscoverWindowResult::set_has_integral() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stOpenDiscoverWindowResult::clear_has_integral() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stOpenDiscoverWindowResult::clear_integral() {
  integral_ = 0u;
  clear_has_integral();
}
inline ::google::protobuf::uint32 stOpenDiscoverWindowResult::integral() const {
  return integral_;
}
inline void stOpenDiscoverWindowResult::set_integral(::google::protobuf::uint32 value) {
  set_has_integral();
  integral_ = value;
}

// optional uint32 refreshNum = 7;
inline bool stOpenDiscoverWindowResult::has_refreshnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stOpenDiscoverWindowResult::set_has_refreshnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stOpenDiscoverWindowResult::clear_has_refreshnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stOpenDiscoverWindowResult::clear_refreshnum() {
  refreshnum_ = 0u;
  clear_has_refreshnum();
}
inline ::google::protobuf::uint32 stOpenDiscoverWindowResult::refreshnum() const {
  return refreshnum_;
}
inline void stOpenDiscoverWindowResult::set_refreshnum(::google::protobuf::uint32 value) {
  set_has_refreshnum();
  refreshnum_ = value;
}

// optional uint32 playDiceNum = 8;
inline bool stOpenDiscoverWindowResult::has_playdicenum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stOpenDiscoverWindowResult::set_has_playdicenum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stOpenDiscoverWindowResult::clear_has_playdicenum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stOpenDiscoverWindowResult::clear_playdicenum() {
  playdicenum_ = 0u;
  clear_has_playdicenum();
}
inline ::google::protobuf::uint32 stOpenDiscoverWindowResult::playdicenum() const {
  return playdicenum_;
}
inline void stOpenDiscoverWindowResult::set_playdicenum(::google::protobuf::uint32 value) {
  set_has_playdicenum();
  playdicenum_ = value;
}

// optional uint32 canUseNum = 9;
inline bool stOpenDiscoverWindowResult::has_canusenum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stOpenDiscoverWindowResult::set_has_canusenum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stOpenDiscoverWindowResult::clear_has_canusenum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stOpenDiscoverWindowResult::clear_canusenum() {
  canusenum_ = 0u;
  clear_has_canusenum();
}
inline ::google::protobuf::uint32 stOpenDiscoverWindowResult::canusenum() const {
  return canusenum_;
}
inline void stOpenDiscoverWindowResult::set_canusenum(::google::protobuf::uint32 value) {
  set_has_canusenum();
  canusenum_ = value;
}

// optional uint32 hasReceivedIdentify = 10;
inline bool stOpenDiscoverWindowResult::has_hasreceivedidentify() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stOpenDiscoverWindowResult::set_has_hasreceivedidentify() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stOpenDiscoverWindowResult::clear_has_hasreceivedidentify() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stOpenDiscoverWindowResult::clear_hasreceivedidentify() {
  hasreceivedidentify_ = 0u;
  clear_has_hasreceivedidentify();
}
inline ::google::protobuf::uint32 stOpenDiscoverWindowResult::hasreceivedidentify() const {
  return hasreceivedidentify_;
}
inline void stOpenDiscoverWindowResult::set_hasreceivedidentify(::google::protobuf::uint32 value) {
  set_has_hasreceivedidentify();
  hasreceivedidentify_ = value;
}

// -------------------------------------------------------------------

// stReqPlayDice

// optional uint32 charID = 1;
inline bool stReqPlayDice::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqPlayDice::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqPlayDice::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqPlayDice::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqPlayDice::charid() const {
  return charid_;
}
inline void stReqPlayDice::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stPlayDiceResult

// optional .MiscProto.stPlayDiceResult.eResult result = 1;
inline bool stPlayDiceResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPlayDiceResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPlayDiceResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPlayDiceResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stPlayDiceResult_eResult stPlayDiceResult::result() const {
  return static_cast< ::MiscProto::stPlayDiceResult_eResult >(result_);
}
inline void stPlayDiceResult::set_result(::MiscProto::stPlayDiceResult_eResult value) {
  assert(::MiscProto::stPlayDiceResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 point = 2;
inline bool stPlayDiceResult::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stPlayDiceResult::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stPlayDiceResult::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stPlayDiceResult::clear_point() {
  point_ = 0u;
  clear_has_point();
}
inline ::google::protobuf::uint32 stPlayDiceResult::point() const {
  return point_;
}
inline void stPlayDiceResult::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
}

// optional uint32 mapID = 3;
inline bool stPlayDiceResult::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stPlayDiceResult::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stPlayDiceResult::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stPlayDiceResult::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 stPlayDiceResult::mapid() const {
  return mapid_;
}
inline void stPlayDiceResult::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional uint32 taskID = 4;
inline bool stPlayDiceResult::has_taskid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stPlayDiceResult::set_has_taskid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stPlayDiceResult::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stPlayDiceResult::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 stPlayDiceResult::taskid() const {
  return taskid_;
}
inline void stPlayDiceResult::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional uint32 state = 5;
inline bool stPlayDiceResult::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stPlayDiceResult::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stPlayDiceResult::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stPlayDiceResult::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 stPlayDiceResult::state() const {
  return state_;
}
inline void stPlayDiceResult::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// stReqGetOrGiveUpTask

// optional uint32 tag = 1;
inline bool stReqGetOrGiveUpTask::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGetOrGiveUpTask::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGetOrGiveUpTask::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGetOrGiveUpTask::clear_tag() {
  tag_ = 0u;
  clear_has_tag();
}
inline ::google::protobuf::uint32 stReqGetOrGiveUpTask::tag() const {
  return tag_;
}
inline void stReqGetOrGiveUpTask::set_tag(::google::protobuf::uint32 value) {
  set_has_tag();
  tag_ = value;
}

// -------------------------------------------------------------------

// stGetTaskResult

// optional .MiscProto.stGetTaskResult.eResult result = 1;
inline bool stGetTaskResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGetTaskResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGetTaskResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGetTaskResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stGetTaskResult_eResult stGetTaskResult::result() const {
  return static_cast< ::MiscProto::stGetTaskResult_eResult >(result_);
}
inline void stGetTaskResult::set_result(::MiscProto::stGetTaskResult_eResult value) {
  assert(::MiscProto::stGetTaskResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 taskType = 2;
inline bool stGetTaskResult::has_tasktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGetTaskResult::set_has_tasktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGetTaskResult::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGetTaskResult::clear_tasktype() {
  tasktype_ = 0u;
  clear_has_tasktype();
}
inline ::google::protobuf::uint32 stGetTaskResult::tasktype() const {
  return tasktype_;
}
inline void stGetTaskResult::set_tasktype(::google::protobuf::uint32 value) {
  set_has_tasktype();
  tasktype_ = value;
}

// optional uint32 taskID = 3;
inline bool stGetTaskResult::has_taskid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGetTaskResult::set_has_taskid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGetTaskResult::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGetTaskResult::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 stGetTaskResult::taskid() const {
  return taskid_;
}
inline void stGetTaskResult::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// -------------------------------------------------------------------

// stGiveUpTaskResult

// optional .MiscProto.stGiveUpTaskResult.eResult result = 1;
inline bool stGiveUpTaskResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGiveUpTaskResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGiveUpTaskResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGiveUpTaskResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stGiveUpTaskResult_eResult stGiveUpTaskResult::result() const {
  return static_cast< ::MiscProto::stGiveUpTaskResult_eResult >(result_);
}
inline void stGiveUpTaskResult::set_result(::MiscProto::stGiveUpTaskResult_eResult value) {
  assert(::MiscProto::stGiveUpTaskResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRefreshNum

// optional uint32 charID = 1;
inline bool stReqRefreshNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRefreshNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRefreshNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRefreshNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRefreshNum::charid() const {
  return charid_;
}
inline void stReqRefreshNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRefreshNumResult

// optional .MiscProto.stRefreshNumResult.eResult result = 1;
inline bool stRefreshNumResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefreshNumResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefreshNumResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefreshNumResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRefreshNumResult_eResult stRefreshNumResult::result() const {
  return static_cast< ::MiscProto::stRefreshNumResult_eResult >(result_);
}
inline void stRefreshNumResult::set_result(::MiscProto::stRefreshNumResult_eResult value) {
  assert(::MiscProto::stRefreshNumResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 count = 2;
inline bool stRefreshNumResult::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRefreshNumResult::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRefreshNumResult::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRefreshNumResult::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 stRefreshNumResult::count() const {
  return count_;
}
inline void stRefreshNumResult::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// stReqGetIntegralReward

// optional uint32 rewardID = 1;
inline bool stReqGetIntegralReward::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGetIntegralReward::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGetIntegralReward::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGetIntegralReward::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 stReqGetIntegralReward::rewardid() const {
  return rewardid_;
}
inline void stReqGetIntegralReward::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
}

// -------------------------------------------------------------------

// stGetIntegralRewardResult

// optional .MiscProto.stGetIntegralRewardResult.eResult result = 1;
inline bool stGetIntegralRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGetIntegralRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGetIntegralRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGetIntegralRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stGetIntegralRewardResult_eResult stGetIntegralRewardResult::result() const {
  return static_cast< ::MiscProto::stGetIntegralRewardResult_eResult >(result_);
}
inline void stGetIntegralRewardResult::set_result(::MiscProto::stGetIntegralRewardResult_eResult value) {
  assert(::MiscProto::stGetIntegralRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 value = 2;
inline bool stGetIntegralRewardResult::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGetIntegralRewardResult::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGetIntegralRewardResult::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGetIntegralRewardResult::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 stGetIntegralRewardResult::value() const {
  return value_;
}
inline void stGetIntegralRewardResult::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// stReqGiveReward

// optional uint32 tag = 1;
inline bool stReqGiveReward::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGiveReward::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGiveReward::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGiveReward::clear_tag() {
  tag_ = 0u;
  clear_has_tag();
}
inline ::google::protobuf::uint32 stReqGiveReward::tag() const {
  return tag_;
}
inline void stReqGiveReward::set_tag(::google::protobuf::uint32 value) {
  set_has_tag();
  tag_ = value;
}

// -------------------------------------------------------------------

// stGiveRewardResult

// optional .MiscProto.stGiveRewardResult.eResult result = 1;
inline bool stGiveRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGiveRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGiveRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGiveRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stGiveRewardResult_eResult stGiveRewardResult::result() const {
  return static_cast< ::MiscProto::stGiveRewardResult_eResult >(result_);
}
inline void stGiveRewardResult::set_result(::MiscProto::stGiveRewardResult_eResult value) {
  assert(::MiscProto::stGiveRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 integral = 2;
inline bool stGiveRewardResult::has_integral() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGiveRewardResult::set_has_integral() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGiveRewardResult::clear_has_integral() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGiveRewardResult::clear_integral() {
  integral_ = 0u;
  clear_has_integral();
}
inline ::google::protobuf::uint32 stGiveRewardResult::integral() const {
  return integral_;
}
inline void stGiveRewardResult::set_integral(::google::protobuf::uint32 value) {
  set_has_integral();
  integral_ = value;
}

// -------------------------------------------------------------------

// stReqLuckyDraw

// optional uint32 charID = 1;
inline bool stReqLuckyDraw::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLuckyDraw::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLuckyDraw::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLuckyDraw::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqLuckyDraw::charid() const {
  return charid_;
}
inline void stReqLuckyDraw::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stLuckyDrawPointRewardInfo

// optional uint32 id = 1;
inline bool stLuckyDrawPointRewardInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLuckyDrawPointRewardInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLuckyDrawPointRewardInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLuckyDrawPointRewardInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stLuckyDrawPointRewardInfo::id() const {
  return id_;
}
inline void stLuckyDrawPointRewardInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 status = 2;
inline bool stLuckyDrawPointRewardInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLuckyDrawPointRewardInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLuckyDrawPointRewardInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLuckyDrawPointRewardInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 stLuckyDrawPointRewardInfo::status() const {
  return status_;
}
inline void stLuckyDrawPointRewardInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// stLuckyDrawRewardInfo

// optional uint32 id = 1;
inline bool stLuckyDrawRewardInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLuckyDrawRewardInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLuckyDrawRewardInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLuckyDrawRewardInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stLuckyDrawRewardInfo::id() const {
  return id_;
}
inline void stLuckyDrawRewardInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 num = 2;
inline bool stLuckyDrawRewardInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLuckyDrawRewardInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLuckyDrawRewardInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLuckyDrawRewardInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stLuckyDrawRewardInfo::num() const {
  return num_;
}
inline void stLuckyDrawRewardInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stLuckyDrawUserInfo

// optional string name = 1;
inline bool stLuckyDrawUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLuckyDrawUserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLuckyDrawUserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLuckyDrawUserInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stLuckyDrawUserInfo::name() const {
  return *name_;
}
inline void stLuckyDrawUserInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stLuckyDrawUserInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stLuckyDrawUserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stLuckyDrawUserInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stLuckyDrawUserInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stLuckyDrawUserInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 id = 2;
inline bool stLuckyDrawUserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLuckyDrawUserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLuckyDrawUserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLuckyDrawUserInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stLuckyDrawUserInfo::id() const {
  return id_;
}
inline void stLuckyDrawUserInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 num = 3;
inline bool stLuckyDrawUserInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stLuckyDrawUserInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stLuckyDrawUserInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stLuckyDrawUserInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stLuckyDrawUserInfo::num() const {
  return num_;
}
inline void stLuckyDrawUserInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stRetLuckyDraw

// optional uint32 activityid = 1;
inline bool stRetLuckyDraw::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetLuckyDraw::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetLuckyDraw::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetLuckyDraw::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stRetLuckyDraw::activityid() const {
  return activityid_;
}
inline void stRetLuckyDraw::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// repeated .MiscProto.stLuckyDrawPointRewardInfo reward = 2;
inline int stRetLuckyDraw::reward_size() const {
  return reward_.size();
}
inline void stRetLuckyDraw::clear_reward() {
  reward_.Clear();
}
inline const ::MiscProto::stLuckyDrawPointRewardInfo& stRetLuckyDraw::reward(int index) const {
  return reward_.Get(index);
}
inline ::MiscProto::stLuckyDrawPointRewardInfo* stRetLuckyDraw::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::MiscProto::stLuckyDrawPointRewardInfo* stRetLuckyDraw::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawPointRewardInfo >&
stRetLuckyDraw::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawPointRewardInfo >*
stRetLuckyDraw::mutable_reward() {
  return &reward_;
}

// optional uint32 diamond = 3;
inline bool stRetLuckyDraw::has_diamond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetLuckyDraw::set_has_diamond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetLuckyDraw::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetLuckyDraw::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 stRetLuckyDraw::diamond() const {
  return diamond_;
}
inline void stRetLuckyDraw::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// repeated .MiscProto.stLuckyDrawUserInfo player = 4;
inline int stRetLuckyDraw::player_size() const {
  return player_.size();
}
inline void stRetLuckyDraw::clear_player() {
  player_.Clear();
}
inline const ::MiscProto::stLuckyDrawUserInfo& stRetLuckyDraw::player(int index) const {
  return player_.Get(index);
}
inline ::MiscProto::stLuckyDrawUserInfo* stRetLuckyDraw::mutable_player(int index) {
  return player_.Mutable(index);
}
inline ::MiscProto::stLuckyDrawUserInfo* stRetLuckyDraw::add_player() {
  return player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawUserInfo >&
stRetLuckyDraw::player() const {
  return player_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawUserInfo >*
stRetLuckyDraw::mutable_player() {
  return &player_;
}

// optional uint32 lastFreeTime = 5;
inline bool stRetLuckyDraw::has_lastfreetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetLuckyDraw::set_has_lastfreetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetLuckyDraw::clear_has_lastfreetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetLuckyDraw::clear_lastfreetime() {
  lastfreetime_ = 0u;
  clear_has_lastfreetime();
}
inline ::google::protobuf::uint32 stRetLuckyDraw::lastfreetime() const {
  return lastfreetime_;
}
inline void stRetLuckyDraw::set_lastfreetime(::google::protobuf::uint32 value) {
  set_has_lastfreetime();
  lastfreetime_ = value;
}

// -------------------------------------------------------------------

// stReqLuckyDrawReward

// optional uint32 type = 1;
inline bool stReqLuckyDrawReward::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLuckyDrawReward::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLuckyDrawReward::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLuckyDrawReward::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 stReqLuckyDrawReward::type() const {
  return type_;
}
inline void stReqLuckyDrawReward::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 id = 2;
inline bool stReqLuckyDrawReward::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqLuckyDrawReward::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqLuckyDrawReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqLuckyDrawReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqLuckyDrawReward::id() const {
  return id_;
}
inline void stReqLuckyDrawReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stRetLuckyDrawReward

// optional uint32 id = 1;
inline bool stRetLuckyDrawReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetLuckyDrawReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetLuckyDrawReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetLuckyDrawReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stRetLuckyDrawReward::id() const {
  return id_;
}
inline void stRetLuckyDrawReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated .MiscProto.stLuckyDrawRewardInfo reward = 2;
inline int stRetLuckyDrawReward::reward_size() const {
  return reward_.size();
}
inline void stRetLuckyDrawReward::clear_reward() {
  reward_.Clear();
}
inline const ::MiscProto::stLuckyDrawRewardInfo& stRetLuckyDrawReward::reward(int index) const {
  return reward_.Get(index);
}
inline ::MiscProto::stLuckyDrawRewardInfo* stRetLuckyDrawReward::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::MiscProto::stLuckyDrawRewardInfo* stRetLuckyDrawReward::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawRewardInfo >&
stRetLuckyDrawReward::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawRewardInfo >*
stRetLuckyDrawReward::mutable_reward() {
  return &reward_;
}

// repeated .MiscProto.stLuckyDrawUserInfo player = 3;
inline int stRetLuckyDrawReward::player_size() const {
  return player_.size();
}
inline void stRetLuckyDrawReward::clear_player() {
  player_.Clear();
}
inline const ::MiscProto::stLuckyDrawUserInfo& stRetLuckyDrawReward::player(int index) const {
  return player_.Get(index);
}
inline ::MiscProto::stLuckyDrawUserInfo* stRetLuckyDrawReward::mutable_player(int index) {
  return player_.Mutable(index);
}
inline ::MiscProto::stLuckyDrawUserInfo* stRetLuckyDrawReward::add_player() {
  return player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawUserInfo >&
stRetLuckyDrawReward::player() const {
  return player_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stLuckyDrawUserInfo >*
stRetLuckyDrawReward::mutable_player() {
  return &player_;
}

// optional .MiscProto.stRetLuckyDrawReward.eResult result = 4;
inline bool stRetLuckyDrawReward::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetLuckyDrawReward::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetLuckyDrawReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetLuckyDrawReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetLuckyDrawReward_eResult stRetLuckyDrawReward::result() const {
  return static_cast< ::MiscProto::stRetLuckyDrawReward_eResult >(result_);
}
inline void stRetLuckyDrawReward::set_result(::MiscProto::stRetLuckyDrawReward_eResult value) {
  assert(::MiscProto::stRetLuckyDrawReward_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 lastFreeTime = 5;
inline bool stRetLuckyDrawReward::has_lastfreetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetLuckyDrawReward::set_has_lastfreetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetLuckyDrawReward::clear_has_lastfreetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetLuckyDrawReward::clear_lastfreetime() {
  lastfreetime_ = 0u;
  clear_has_lastfreetime();
}
inline ::google::protobuf::uint32 stRetLuckyDrawReward::lastfreetime() const {
  return lastfreetime_;
}
inline void stRetLuckyDrawReward::set_lastfreetime(::google::protobuf::uint32 value) {
  set_has_lastfreetime();
  lastfreetime_ = value;
}

// optional uint32 diamond = 6;
inline bool stRetLuckyDrawReward::has_diamond() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetLuckyDrawReward::set_has_diamond() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetLuckyDrawReward::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetLuckyDrawReward::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 stRetLuckyDrawReward::diamond() const {
  return diamond_;
}
inline void stRetLuckyDrawReward::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// -------------------------------------------------------------------

// stReqLuckyDrawPointReward

// optional uint32 activityid = 1;
inline bool stReqLuckyDrawPointReward::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLuckyDrawPointReward::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLuckyDrawPointReward::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLuckyDrawPointReward::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stReqLuckyDrawPointReward::activityid() const {
  return activityid_;
}
inline void stReqLuckyDrawPointReward::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 pointid = 2;
inline bool stReqLuckyDrawPointReward::has_pointid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqLuckyDrawPointReward::set_has_pointid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqLuckyDrawPointReward::clear_has_pointid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqLuckyDrawPointReward::clear_pointid() {
  pointid_ = 0u;
  clear_has_pointid();
}
inline ::google::protobuf::uint32 stReqLuckyDrawPointReward::pointid() const {
  return pointid_;
}
inline void stReqLuckyDrawPointReward::set_pointid(::google::protobuf::uint32 value) {
  set_has_pointid();
  pointid_ = value;
}

// -------------------------------------------------------------------

// stRetLuckyDrawPointReward

// optional uint32 activityid = 1;
inline bool stRetLuckyDrawPointReward::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetLuckyDrawPointReward::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetLuckyDrawPointReward::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetLuckyDrawPointReward::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stRetLuckyDrawPointReward::activityid() const {
  return activityid_;
}
inline void stRetLuckyDrawPointReward::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional uint32 pointid = 2;
inline bool stRetLuckyDrawPointReward::has_pointid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetLuckyDrawPointReward::set_has_pointid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetLuckyDrawPointReward::clear_has_pointid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetLuckyDrawPointReward::clear_pointid() {
  pointid_ = 0u;
  clear_has_pointid();
}
inline ::google::protobuf::uint32 stRetLuckyDrawPointReward::pointid() const {
  return pointid_;
}
inline void stRetLuckyDrawPointReward::set_pointid(::google::protobuf::uint32 value) {
  set_has_pointid();
  pointid_ = value;
}

// optional .MiscProto.stRetLuckyDrawPointReward.eResult result = 3;
inline bool stRetLuckyDrawPointReward::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetLuckyDrawPointReward::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetLuckyDrawPointReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetLuckyDrawPointReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetLuckyDrawPointReward_eResult stRetLuckyDrawPointReward::result() const {
  return static_cast< ::MiscProto::stRetLuckyDrawPointReward_eResult >(result_);
}
inline void stRetLuckyDrawPointReward::set_result(::MiscProto::stRetLuckyDrawPointReward_eResult value) {
  assert(::MiscProto::stRetLuckyDrawPointReward_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRedPointRuls

// optional uint32 charID = 1;
inline bool stReqRedPointRuls::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRedPointRuls::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRedPointRuls::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRedPointRuls::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRedPointRuls::charid() const {
  return charid_;
}
inline void stReqRedPointRuls::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRedPointRulsResult

// optional bool times = 1;
inline bool stRedPointRulsResult::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRedPointRulsResult::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRedPointRulsResult::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRedPointRulsResult::clear_times() {
  times_ = false;
  clear_has_times();
}
inline bool stRedPointRulsResult::times() const {
  return times_;
}
inline void stRedPointRulsResult::set_times(bool value) {
  set_has_times();
  times_ = value;
}

// optional bool canGetReward = 2;
inline bool stRedPointRulsResult::has_cangetreward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRedPointRulsResult::set_has_cangetreward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRedPointRulsResult::clear_has_cangetreward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRedPointRulsResult::clear_cangetreward() {
  cangetreward_ = false;
  clear_has_cangetreward();
}
inline bool stRedPointRulsResult::cangetreward() const {
  return cangetreward_;
}
inline void stRedPointRulsResult::set_cangetreward(bool value) {
  set_has_cangetreward();
  cangetreward_ = value;
}

// optional bool canOpenIntegalBox = 3;
inline bool stRedPointRulsResult::has_canopenintegalbox() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRedPointRulsResult::set_has_canopenintegalbox() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRedPointRulsResult::clear_has_canopenintegalbox() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRedPointRulsResult::clear_canopenintegalbox() {
  canopenintegalbox_ = false;
  clear_has_canopenintegalbox();
}
inline bool stRedPointRulsResult::canopenintegalbox() const {
  return canopenintegalbox_;
}
inline void stRedPointRulsResult::set_canopenintegalbox(bool value) {
  set_has_canopenintegalbox();
  canopenintegalbox_ = value;
}

// -------------------------------------------------------------------

// stReqInviteFriend

// optional uint32 charID = 1;
inline bool stReqInviteFriend::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqInviteFriend::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqInviteFriend::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqInviteFriend::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqInviteFriend::charid() const {
  return charid_;
}
inline void stReqInviteFriend::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// InviteFriendReward

// optional uint32 id = 1;
inline bool InviteFriendReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteFriendReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteFriendReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteFriendReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 InviteFriendReward::id() const {
  return id_;
}
inline void InviteFriendReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 status = 2;
inline bool InviteFriendReward::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteFriendReward::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteFriendReward::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteFriendReward::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 InviteFriendReward::status() const {
  return status_;
}
inline void InviteFriendReward::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// stRetInviteFriend

// optional string code = 1;
inline bool stRetInviteFriend::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetInviteFriend::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetInviteFriend::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetInviteFriend::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& stRetInviteFriend::code() const {
  return *code_;
}
inline void stRetInviteFriend::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void stRetInviteFriend::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void stRetInviteFriend::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetInviteFriend::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* stRetInviteFriend::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetInviteFriend::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 num = 2;
inline bool stRetInviteFriend::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetInviteFriend::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetInviteFriend::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetInviteFriend::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stRetInviteFriend::num() const {
  return num_;
}
inline void stRetInviteFriend::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional bool useInviteCode = 3;
inline bool stRetInviteFriend::has_useinvitecode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetInviteFriend::set_has_useinvitecode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetInviteFriend::clear_has_useinvitecode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetInviteFriend::clear_useinvitecode() {
  useinvitecode_ = false;
  clear_has_useinvitecode();
}
inline bool stRetInviteFriend::useinvitecode() const {
  return useinvitecode_;
}
inline void stRetInviteFriend::set_useinvitecode(bool value) {
  set_has_useinvitecode();
  useinvitecode_ = value;
}

// repeated .MiscProto.InviteFriendReward reward = 4;
inline int stRetInviteFriend::reward_size() const {
  return reward_.size();
}
inline void stRetInviteFriend::clear_reward() {
  reward_.Clear();
}
inline const ::MiscProto::InviteFriendReward& stRetInviteFriend::reward(int index) const {
  return reward_.Get(index);
}
inline ::MiscProto::InviteFriendReward* stRetInviteFriend::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::MiscProto::InviteFriendReward* stRetInviteFriend::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::InviteFriendReward >&
stRetInviteFriend::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::InviteFriendReward >*
stRetInviteFriend::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// stReqDrawInviteFriend

// optional uint32 id = 1;
inline bool stReqDrawInviteFriend::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawInviteFriend::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawInviteFriend::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawInviteFriend::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqDrawInviteFriend::id() const {
  return id_;
}
inline void stReqDrawInviteFriend::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stRetDrawInviteFriend

// optional uint32 id = 1;
inline bool stRetDrawInviteFriend::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDrawInviteFriend::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDrawInviteFriend::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDrawInviteFriend::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stRetDrawInviteFriend::id() const {
  return id_;
}
inline void stRetDrawInviteFriend::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .MiscProto.stRetDrawInviteFriend.eResult result = 2;
inline bool stRetDrawInviteFriend::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetDrawInviteFriend::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetDrawInviteFriend::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetDrawInviteFriend::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetDrawInviteFriend_eResult stRetDrawInviteFriend::result() const {
  return static_cast< ::MiscProto::stRetDrawInviteFriend_eResult >(result_);
}
inline void stRetDrawInviteFriend::set_result(::MiscProto::stRetDrawInviteFriend_eResult value) {
  assert(::MiscProto::stRetDrawInviteFriend_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqUseInviteCode

// optional string code = 1;
inline bool stReqUseInviteCode::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqUseInviteCode::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqUseInviteCode::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqUseInviteCode::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& stReqUseInviteCode::code() const {
  return *code_;
}
inline void stReqUseInviteCode::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void stReqUseInviteCode::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void stReqUseInviteCode::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqUseInviteCode::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* stReqUseInviteCode::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqUseInviteCode::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stRetUseInviteCode

// optional .MiscProto.stRetUseInviteCode.eResult result = 1;
inline bool stRetUseInviteCode::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetUseInviteCode::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetUseInviteCode::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetUseInviteCode::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetUseInviteCode_eResult stRetUseInviteCode::result() const {
  return static_cast< ::MiscProto::stRetUseInviteCode_eResult >(result_);
}
inline void stRetUseInviteCode::set_result(::MiscProto::stRetUseInviteCode_eResult value) {
  assert(::MiscProto::stRetUseInviteCode_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqShareInvite

// optional uint32 charID = 1;
inline bool stReqShareInvite::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqShareInvite::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqShareInvite::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqShareInvite::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqShareInvite::charid() const {
  return charid_;
}
inline void stReqShareInvite::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetShareInvite

// optional uint32 num = 1;
inline bool stRetShareInvite::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetShareInvite::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetShareInvite::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetShareInvite::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stRetShareInvite::num() const {
  return num_;
}
inline void stRetShareInvite::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stReqDailyShareInvite

// optional uint32 charId = 1;
inline bool stReqDailyShareInvite::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDailyShareInvite::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDailyShareInvite::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDailyShareInvite::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqDailyShareInvite::charid() const {
  return charid_;
}
inline void stReqDailyShareInvite::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetDailyShareInvite

// optional uint32 num = 1;
inline bool stRetDailyShareInvite::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDailyShareInvite::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDailyShareInvite::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDailyShareInvite::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stRetDailyShareInvite::num() const {
  return num_;
}
inline void stRetDailyShareInvite::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// repeated uint32 id = 2;
inline int stRetDailyShareInvite::id_size() const {
  return id_.size();
}
inline void stRetDailyShareInvite::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 stRetDailyShareInvite::id(int index) const {
  return id_.Get(index);
}
inline void stRetDailyShareInvite::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void stRetDailyShareInvite::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stRetDailyShareInvite::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stRetDailyShareInvite::mutable_id() {
  return &id_;
}

// optional bool onceReward = 3;
inline bool stRetDailyShareInvite::has_oncereward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetDailyShareInvite::set_has_oncereward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetDailyShareInvite::clear_has_oncereward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetDailyShareInvite::clear_oncereward() {
  oncereward_ = false;
  clear_has_oncereward();
}
inline bool stRetDailyShareInvite::oncereward() const {
  return oncereward_;
}
inline void stRetDailyShareInvite::set_oncereward(bool value) {
  set_has_oncereward();
  oncereward_ = value;
}

// -------------------------------------------------------------------

// stReqDrawDailyShareReward

// optional uint32 id = 1;
inline bool stReqDrawDailyShareReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawDailyShareReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawDailyShareReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawDailyShareReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqDrawDailyShareReward::id() const {
  return id_;
}
inline void stReqDrawDailyShareReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stRetDrawDailyShareReward

// optional uint32 id = 1;
inline bool stRetDrawDailyShareReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDrawDailyShareReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDrawDailyShareReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDrawDailyShareReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stRetDrawDailyShareReward::id() const {
  return id_;
}
inline void stRetDrawDailyShareReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .MiscProto.stRetDrawDailyShareReward.eResult result = 2;
inline bool stRetDrawDailyShareReward::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetDrawDailyShareReward::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetDrawDailyShareReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetDrawDailyShareReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetDrawDailyShareReward_eResult stRetDrawDailyShareReward::result() const {
  return static_cast< ::MiscProto::stRetDrawDailyShareReward_eResult >(result_);
}
inline void stRetDrawDailyShareReward::set_result(::MiscProto::stRetDrawDailyShareReward_eResult value) {
  assert(::MiscProto::stRetDrawDailyShareReward_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqDrawOnceShareReward

// optional uint32 charID = 1;
inline bool stReqDrawOnceShareReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawOnceShareReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawOnceShareReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawOnceShareReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqDrawOnceShareReward::charid() const {
  return charid_;
}
inline void stReqDrawOnceShareReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetDrawOnceShareReward

// optional .MiscProto.stRetDrawOnceShareReward.eResult result = 1;
inline bool stRetDrawOnceShareReward::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDrawOnceShareReward::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDrawOnceShareReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDrawOnceShareReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetDrawOnceShareReward_eResult stRetDrawOnceShareReward::result() const {
  return static_cast< ::MiscProto::stRetDrawOnceShareReward_eResult >(result_);
}
inline void stRetDrawOnceShareReward::set_result(::MiscProto::stRetDrawOnceShareReward_eResult value) {
  assert(::MiscProto::stRetDrawOnceShareReward_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stNotifyInterceptServerResult

// optional .MiscProto.stNotifyInterceptServerResult.eResult result = 1;
inline bool stNotifyInterceptServerResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyInterceptServerResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyInterceptServerResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyInterceptServerResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stNotifyInterceptServerResult_eResult stNotifyInterceptServerResult::result() const {
  return static_cast< ::MiscProto::stNotifyInterceptServerResult_eResult >(result_);
}
inline void stNotifyInterceptServerResult::set_result(::MiscProto::stNotifyInterceptServerResult_eResult value) {
  assert(::MiscProto::stNotifyInterceptServerResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqReceiveState

// optional uint32 charID = 1;
inline bool stReqReceiveState::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqReceiveState::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqReceiveState::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqReceiveState::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqReceiveState::charid() const {
  return charid_;
}
inline void stReqReceiveState::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stReceiveStateResult

// optional bool isReceive = 1;
inline bool stReceiveStateResult::has_isreceive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReceiveStateResult::set_has_isreceive() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReceiveStateResult::clear_has_isreceive() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReceiveStateResult::clear_isreceive() {
  isreceive_ = false;
  clear_has_isreceive();
}
inline bool stReceiveStateResult::isreceive() const {
  return isreceive_;
}
inline void stReceiveStateResult::set_isreceive(bool value) {
  set_has_isreceive();
  isreceive_ = value;
}

// -------------------------------------------------------------------

// stReqReceiveReward

// optional uint32 charID = 1;
inline bool stReqReceiveReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqReceiveReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqReceiveReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqReceiveReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqReceiveReward::charid() const {
  return charid_;
}
inline void stReqReceiveReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stReceiveRewardResult

// optional .MiscProto.stReceiveRewardResult.eResult result = 1;
inline bool stReceiveRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReceiveRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReceiveRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReceiveRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stReceiveRewardResult_eResult stReceiveRewardResult::result() const {
  return static_cast< ::MiscProto::stReceiveRewardResult_eResult >(result_);
}
inline void stReceiveRewardResult::set_result(::MiscProto::stReceiveRewardResult_eResult value) {
  assert(::MiscProto::stReceiveRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stAcitivityLimitPetItem

// optional uint32 id = 1;
inline bool stAcitivityLimitPetItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAcitivityLimitPetItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAcitivityLimitPetItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAcitivityLimitPetItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stAcitivityLimitPetItem::id() const {
  return id_;
}
inline void stAcitivityLimitPetItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 activiyId = 2;
inline bool stAcitivityLimitPetItem::has_activiyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAcitivityLimitPetItem::set_has_activiyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAcitivityLimitPetItem::clear_has_activiyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAcitivityLimitPetItem::clear_activiyid() {
  activiyid_ = 0u;
  clear_has_activiyid();
}
inline ::google::protobuf::uint32 stAcitivityLimitPetItem::activiyid() const {
  return activiyid_;
}
inline void stAcitivityLimitPetItem::set_activiyid(::google::protobuf::uint32 value) {
  set_has_activiyid();
  activiyid_ = value;
}

// optional uint32 startTime = 3;
inline bool stAcitivityLimitPetItem::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAcitivityLimitPetItem::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAcitivityLimitPetItem::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAcitivityLimitPetItem::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 stAcitivityLimitPetItem::starttime() const {
  return starttime_;
}
inline void stAcitivityLimitPetItem::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
}

// optional uint32 endTime = 4;
inline bool stAcitivityLimitPetItem::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stAcitivityLimitPetItem::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stAcitivityLimitPetItem::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stAcitivityLimitPetItem::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 stAcitivityLimitPetItem::endtime() const {
  return endtime_;
}
inline void stAcitivityLimitPetItem::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
}

// -------------------------------------------------------------------

// stSendAllAcitivityLimitPet

// repeated .MiscProto.stAcitivityLimitPetItem item = 1;
inline int stSendAllAcitivityLimitPet::item_size() const {
  return item_.size();
}
inline void stSendAllAcitivityLimitPet::clear_item() {
  item_.Clear();
}
inline const ::MiscProto::stAcitivityLimitPetItem& stSendAllAcitivityLimitPet::item(int index) const {
  return item_.Get(index);
}
inline ::MiscProto::stAcitivityLimitPetItem* stSendAllAcitivityLimitPet::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::MiscProto::stAcitivityLimitPetItem* stSendAllAcitivityLimitPet::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stAcitivityLimitPetItem >&
stSendAllAcitivityLimitPet::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stAcitivityLimitPetItem >*
stSendAllAcitivityLimitPet::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// stSendLateWalfareActivity

// optional uint32 id = 1;
inline bool stSendLateWalfareActivity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendLateWalfareActivity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendLateWalfareActivity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendLateWalfareActivity::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stSendLateWalfareActivity::id() const {
  return id_;
}
inline void stSendLateWalfareActivity::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 expireTime = 2;
inline bool stSendLateWalfareActivity::has_expiretime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendLateWalfareActivity::set_has_expiretime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendLateWalfareActivity::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendLateWalfareActivity::clear_expiretime() {
  expiretime_ = 0u;
  clear_has_expiretime();
}
inline ::google::protobuf::uint32 stSendLateWalfareActivity::expiretime() const {
  return expiretime_;
}
inline void stSendLateWalfareActivity::set_expiretime(::google::protobuf::uint32 value) {
  set_has_expiretime();
  expiretime_ = value;
}

// repeated uint32 rewardId = 3;
inline int stSendLateWalfareActivity::rewardid_size() const {
  return rewardid_.size();
}
inline void stSendLateWalfareActivity::clear_rewardid() {
  rewardid_.Clear();
}
inline ::google::protobuf::uint32 stSendLateWalfareActivity::rewardid(int index) const {
  return rewardid_.Get(index);
}
inline void stSendLateWalfareActivity::set_rewardid(int index, ::google::protobuf::uint32 value) {
  rewardid_.Set(index, value);
}
inline void stSendLateWalfareActivity::add_rewardid(::google::protobuf::uint32 value) {
  rewardid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stSendLateWalfareActivity::rewardid() const {
  return rewardid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stSendLateWalfareActivity::mutable_rewardid() {
  return &rewardid_;
}

// -------------------------------------------------------------------

// stReqDrawLateWalfare

// optional uint32 rewardId = 1;
inline bool stReqDrawLateWalfare::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawLateWalfare::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawLateWalfare::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawLateWalfare::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 stReqDrawLateWalfare::rewardid() const {
  return rewardid_;
}
inline void stReqDrawLateWalfare::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
}

// -------------------------------------------------------------------

// stRetDrawLateWalfare

// optional uint32 rewardId = 1;
inline bool stRetDrawLateWalfare::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDrawLateWalfare::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDrawLateWalfare::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDrawLateWalfare::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 stRetDrawLateWalfare::rewardid() const {
  return rewardid_;
}
inline void stRetDrawLateWalfare::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
}

// optional .MiscProto.stRetDrawLateWalfare.eResult result = 2;
inline bool stRetDrawLateWalfare::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetDrawLateWalfare::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetDrawLateWalfare::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetDrawLateWalfare::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetDrawLateWalfare_eResult stRetDrawLateWalfare::result() const {
  return static_cast< ::MiscProto::stRetDrawLateWalfare_eResult >(result_);
}
inline void stRetDrawLateWalfare::set_result(::MiscProto::stRetDrawLateWalfare_eResult value) {
  assert(::MiscProto::stRetDrawLateWalfare_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stResGetBackItem

// optional uint32 type = 1;
inline bool stResGetBackItem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResGetBackItem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResGetBackItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResGetBackItem::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 stResGetBackItem::type() const {
  return type_;
}
inline void stResGetBackItem::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 num = 2;
inline bool stResGetBackItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stResGetBackItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stResGetBackItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stResGetBackItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stResGetBackItem::num() const {
  return num_;
}
inline void stResGetBackItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSendAllResGetBack

// repeated .MiscProto.stResGetBackItem item = 1;
inline int stSendAllResGetBack::item_size() const {
  return item_.size();
}
inline void stSendAllResGetBack::clear_item() {
  item_.Clear();
}
inline const ::MiscProto::stResGetBackItem& stSendAllResGetBack::item(int index) const {
  return item_.Get(index);
}
inline ::MiscProto::stResGetBackItem* stSendAllResGetBack::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::MiscProto::stResGetBackItem* stSendAllResGetBack::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stResGetBackItem >&
stSendAllResGetBack::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stResGetBackItem >*
stSendAllResGetBack::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// stReqDrawResGetBack

// optional uint32 type = 1;
inline bool stReqDrawResGetBack::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawResGetBack::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawResGetBack::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawResGetBack::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 stReqDrawResGetBack::type() const {
  return type_;
}
inline void stReqDrawResGetBack::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 num = 2;
inline bool stReqDrawResGetBack::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqDrawResGetBack::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqDrawResGetBack::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqDrawResGetBack::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stReqDrawResGetBack::num() const {
  return num_;
}
inline void stReqDrawResGetBack::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stRetDrawResGetBack

// optional uint32 type = 1;
inline bool stRetDrawResGetBack::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDrawResGetBack::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDrawResGetBack::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDrawResGetBack::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 stRetDrawResGetBack::type() const {
  return type_;
}
inline void stRetDrawResGetBack::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 num = 2;
inline bool stRetDrawResGetBack::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetDrawResGetBack::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetDrawResGetBack::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetDrawResGetBack::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stRetDrawResGetBack::num() const {
  return num_;
}
inline void stRetDrawResGetBack::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional .MiscProto.stRetDrawResGetBack.eResult result = 3;
inline bool stRetDrawResGetBack::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetDrawResGetBack::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetDrawResGetBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetDrawResGetBack::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetDrawResGetBack_eResult stRetDrawResGetBack::result() const {
  return static_cast< ::MiscProto::stRetDrawResGetBack_eResult >(result_);
}
inline void stRetDrawResGetBack::set_result(::MiscProto::stRetDrawResGetBack_eResult value) {
  assert(::MiscProto::stRetDrawResGetBack_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqDrawAllResGetBack

// optional uint32 charId = 1;
inline bool stReqDrawAllResGetBack::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawAllResGetBack::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawAllResGetBack::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawAllResGetBack::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqDrawAllResGetBack::charid() const {
  return charid_;
}
inline void stReqDrawAllResGetBack::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetDrawAllResGetBack

// optional .MiscProto.stRetDrawAllResGetBack.eResult result = 1;
inline bool stRetDrawAllResGetBack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDrawAllResGetBack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDrawAllResGetBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDrawAllResGetBack::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetDrawAllResGetBack_eResult stRetDrawAllResGetBack::result() const {
  return static_cast< ::MiscProto::stRetDrawAllResGetBack_eResult >(result_);
}
inline void stRetDrawAllResGetBack::set_result(::MiscProto::stRetDrawAllResGetBack_eResult value) {
  assert(::MiscProto::stRetDrawAllResGetBack_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqOpenMonsterWindow

// optional uint32 charID = 1;
inline bool stReqOpenMonsterWindow::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenMonsterWindow::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenMonsterWindow::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenMonsterWindow::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOpenMonsterWindow::charid() const {
  return charid_;
}
inline void stReqOpenMonsterWindow::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOpenMonsterWindowResult

// optional uint32 bossLv = 1;
inline bool stOpenMonsterWindowResult::has_bosslv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOpenMonsterWindowResult::set_has_bosslv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOpenMonsterWindowResult::clear_has_bosslv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOpenMonsterWindowResult::clear_bosslv() {
  bosslv_ = 0u;
  clear_has_bosslv();
}
inline ::google::protobuf::uint32 stOpenMonsterWindowResult::bosslv() const {
  return bosslv_;
}
inline void stOpenMonsterWindowResult::set_bosslv(::google::protobuf::uint32 value) {
  set_has_bosslv();
  bosslv_ = value;
}

// optional uint32 bossHp = 2;
inline bool stOpenMonsterWindowResult::has_bosshp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOpenMonsterWindowResult::set_has_bosshp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOpenMonsterWindowResult::clear_has_bosshp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOpenMonsterWindowResult::clear_bosshp() {
  bosshp_ = 0u;
  clear_has_bosshp();
}
inline ::google::protobuf::uint32 stOpenMonsterWindowResult::bosshp() const {
  return bosshp_;
}
inline void stOpenMonsterWindowResult::set_bosshp(::google::protobuf::uint32 value) {
  set_has_bosshp();
  bosshp_ = value;
}

// optional uint32 time = 3;
inline bool stOpenMonsterWindowResult::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stOpenMonsterWindowResult::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stOpenMonsterWindowResult::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stOpenMonsterWindowResult::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 stOpenMonsterWindowResult::time() const {
  return time_;
}
inline void stOpenMonsterWindowResult::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 attackTime = 4;
inline bool stOpenMonsterWindowResult::has_attacktime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stOpenMonsterWindowResult::set_has_attacktime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stOpenMonsterWindowResult::clear_has_attacktime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stOpenMonsterWindowResult::clear_attacktime() {
  attacktime_ = 0u;
  clear_has_attacktime();
}
inline ::google::protobuf::uint32 stOpenMonsterWindowResult::attacktime() const {
  return attacktime_;
}
inline void stOpenMonsterWindowResult::set_attacktime(::google::protobuf::uint32 value) {
  set_has_attacktime();
  attacktime_ = value;
}

// optional uint32 buyTime = 5;
inline bool stOpenMonsterWindowResult::has_buytime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stOpenMonsterWindowResult::set_has_buytime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stOpenMonsterWindowResult::clear_has_buytime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stOpenMonsterWindowResult::clear_buytime() {
  buytime_ = 0u;
  clear_has_buytime();
}
inline ::google::protobuf::uint32 stOpenMonsterWindowResult::buytime() const {
  return buytime_;
}
inline void stOpenMonsterWindowResult::set_buytime(::google::protobuf::uint32 value) {
  set_has_buytime();
  buytime_ = value;
}

// -------------------------------------------------------------------

// stReqAttackMonster

// optional uint32 charID = 1;
inline bool stReqAttackMonster::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAttackMonster::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAttackMonster::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAttackMonster::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqAttackMonster::charid() const {
  return charid_;
}
inline void stReqAttackMonster::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stAttackMonsterResult

// optional .MiscProto.stAttackMonsterResult.eResult result = 1;
inline bool stAttackMonsterResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAttackMonsterResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAttackMonsterResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAttackMonsterResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stAttackMonsterResult_eResult stAttackMonsterResult::result() const {
  return static_cast< ::MiscProto::stAttackMonsterResult_eResult >(result_);
}
inline void stAttackMonsterResult::set_result(::MiscProto::stAttackMonsterResult_eResult value) {
  assert(::MiscProto::stAttackMonsterResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqBuyAttackTime

// optional uint32 charID = 1;
inline bool stReqBuyAttackTime::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBuyAttackTime::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBuyAttackTime::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBuyAttackTime::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqBuyAttackTime::charid() const {
  return charid_;
}
inline void stReqBuyAttackTime::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stBuyAttackTimeResult

// optional .MiscProto.stBuyAttackTimeResult.eResult result = 1;
inline bool stBuyAttackTimeResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuyAttackTimeResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuyAttackTimeResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuyAttackTimeResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stBuyAttackTimeResult_eResult stBuyAttackTimeResult::result() const {
  return static_cast< ::MiscProto::stBuyAttackTimeResult_eResult >(result_);
}
inline void stBuyAttackTimeResult::set_result(::MiscProto::stBuyAttackTimeResult_eResult value) {
  assert(::MiscProto::stBuyAttackTimeResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqAKeyAttackMonster

// optional uint32 charID = 1;
inline bool stReqAKeyAttackMonster::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAKeyAttackMonster::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAKeyAttackMonster::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAKeyAttackMonster::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqAKeyAttackMonster::charid() const {
  return charid_;
}
inline void stReqAKeyAttackMonster::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stAKeyAttackMonsterResult

// optional .MiscProto.stAKeyAttackMonsterResult.eResult result = 1;
inline bool stAKeyAttackMonsterResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAKeyAttackMonsterResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAKeyAttackMonsterResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAKeyAttackMonsterResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stAKeyAttackMonsterResult_eResult stAKeyAttackMonsterResult::result() const {
  return static_cast< ::MiscProto::stAKeyAttackMonsterResult_eResult >(result_);
}
inline void stAKeyAttackMonsterResult::set_result(::MiscProto::stAKeyAttackMonsterResult_eResult value) {
  assert(::MiscProto::stAKeyAttackMonsterResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynTipItem

// optional uint32 itemID = 1;
inline bool stSynTipItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynTipItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynTipItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynTipItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stSynTipItem::itemid() const {
  return itemid_;
}
inline void stSynTipItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stSynTipItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynTipItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynTipItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynTipItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynTipItem::num() const {
  return num_;
}
inline void stSynTipItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stObtainItemTip

// repeated .MiscProto.stSynTipItem getItems = 1;
inline int stObtainItemTip::getitems_size() const {
  return getitems_.size();
}
inline void stObtainItemTip::clear_getitems() {
  getitems_.Clear();
}
inline const ::MiscProto::stSynTipItem& stObtainItemTip::getitems(int index) const {
  return getitems_.Get(index);
}
inline ::MiscProto::stSynTipItem* stObtainItemTip::mutable_getitems(int index) {
  return getitems_.Mutable(index);
}
inline ::MiscProto::stSynTipItem* stObtainItemTip::add_getitems() {
  return getitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynTipItem >&
stObtainItemTip::getitems() const {
  return getitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stSynTipItem >*
stObtainItemTip::mutable_getitems() {
  return &getitems_;
}

// -------------------------------------------------------------------

// stUserOnline

// repeated uint32 mountList = 1;
inline int stUserOnline::mountlist_size() const {
  return mountlist_.size();
}
inline void stUserOnline::clear_mountlist() {
  mountlist_.Clear();
}
inline ::google::protobuf::uint32 stUserOnline::mountlist(int index) const {
  return mountlist_.Get(index);
}
inline void stUserOnline::set_mountlist(int index, ::google::protobuf::uint32 value) {
  mountlist_.Set(index, value);
}
inline void stUserOnline::add_mountlist(::google::protobuf::uint32 value) {
  mountlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stUserOnline::mountlist() const {
  return mountlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stUserOnline::mutable_mountlist() {
  return &mountlist_;
}

// optional uint32 battleMountID = 2;
inline bool stUserOnline::has_battlemountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserOnline::set_has_battlemountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserOnline::clear_has_battlemountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserOnline::clear_battlemountid() {
  battlemountid_ = 0u;
  clear_has_battlemountid();
}
inline ::google::protobuf::uint32 stUserOnline::battlemountid() const {
  return battlemountid_;
}
inline void stUserOnline::set_battlemountid(::google::protobuf::uint32 value) {
  set_has_battlemountid();
  battlemountid_ = value;
}

// optional bool isFollow = 3;
inline bool stUserOnline::has_isfollow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUserOnline::set_has_isfollow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUserOnline::clear_has_isfollow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUserOnline::clear_isfollow() {
  isfollow_ = false;
  clear_has_isfollow();
}
inline bool stUserOnline::isfollow() const {
  return isfollow_;
}
inline void stUserOnline::set_isfollow(bool value) {
  set_has_isfollow();
  isfollow_ = value;
}

// optional uint32 mountLv = 4;
inline bool stUserOnline::has_mountlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUserOnline::set_has_mountlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUserOnline::clear_has_mountlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUserOnline::clear_mountlv() {
  mountlv_ = 0u;
  clear_has_mountlv();
}
inline ::google::protobuf::uint32 stUserOnline::mountlv() const {
  return mountlv_;
}
inline void stUserOnline::set_mountlv(::google::protobuf::uint32 value) {
  set_has_mountlv();
  mountlv_ = value;
}

// -------------------------------------------------------------------

// stConsumeItemInfo

// optional uint64 id = 1;
inline bool stConsumeItemInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stConsumeItemInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stConsumeItemInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stConsumeItemInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 stConsumeItemInfo::id() const {
  return id_;
}
inline void stConsumeItemInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 num = 2;
inline bool stConsumeItemInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stConsumeItemInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stConsumeItemInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stConsumeItemInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stConsumeItemInfo::num() const {
  return num_;
}
inline void stConsumeItemInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stReqMountLevelUp

// optional .MiscProto.eLevelUpType type = 1;
inline bool stReqMountLevelUp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqMountLevelUp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqMountLevelUp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqMountLevelUp::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::MiscProto::eLevelUpType stReqMountLevelUp::type() const {
  return static_cast< ::MiscProto::eLevelUpType >(type_);
}
inline void stReqMountLevelUp::set_type(::MiscProto::eLevelUpType value) {
  assert(::MiscProto::eLevelUpType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .MiscProto.stConsumeItemInfo itemInfo = 2;
inline bool stReqMountLevelUp::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqMountLevelUp::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqMountLevelUp::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqMountLevelUp::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::MiscProto::stConsumeItemInfo::Clear();
  clear_has_iteminfo();
}
inline const ::MiscProto::stConsumeItemInfo& stReqMountLevelUp::iteminfo() const {
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::MiscProto::stConsumeItemInfo* stReqMountLevelUp::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::MiscProto::stConsumeItemInfo;
  return iteminfo_;
}
inline ::MiscProto::stConsumeItemInfo* stReqMountLevelUp::release_iteminfo() {
  clear_has_iteminfo();
  ::MiscProto::stConsumeItemInfo* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void stReqMountLevelUp::set_allocated_iteminfo(::MiscProto::stConsumeItemInfo* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
}

// -------------------------------------------------------------------

// stMountLevelUpResult

// optional .MiscProto.stMountLevelUpResult.eResult result = 1;
inline bool stMountLevelUpResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMountLevelUpResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMountLevelUpResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMountLevelUpResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stMountLevelUpResult_eResult stMountLevelUpResult::result() const {
  return static_cast< ::MiscProto::stMountLevelUpResult_eResult >(result_);
}
inline void stMountLevelUpResult::set_result(::MiscProto::stMountLevelUpResult_eResult value) {
  assert(::MiscProto::stMountLevelUpResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 level = 2;
inline bool stMountLevelUpResult::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMountLevelUpResult::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMountLevelUpResult::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMountLevelUpResult::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stMountLevelUpResult::level() const {
  return level_;
}
inline void stMountLevelUpResult::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 exp = 3;
inline bool stMountLevelUpResult::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stMountLevelUpResult::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stMountLevelUpResult::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stMountLevelUpResult::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 stMountLevelUpResult::exp() const {
  return exp_;
}
inline void stMountLevelUpResult::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// stReqButtleMount

// optional uint32 id = 1;
inline bool stReqButtleMount::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqButtleMount::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqButtleMount::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqButtleMount::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqButtleMount::id() const {
  return id_;
}
inline void stReqButtleMount::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stButtleMountResult

// optional .MiscProto.stButtleMountResult.eResult result = 1;
inline bool stButtleMountResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stButtleMountResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stButtleMountResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stButtleMountResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stButtleMountResult_eResult stButtleMountResult::result() const {
  return static_cast< ::MiscProto::stButtleMountResult_eResult >(result_);
}
inline void stButtleMountResult::set_result(::MiscProto::stButtleMountResult_eResult value) {
  assert(::MiscProto::stButtleMountResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 mountId = 2;
inline bool stButtleMountResult::has_mountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stButtleMountResult::set_has_mountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stButtleMountResult::clear_has_mountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stButtleMountResult::clear_mountid() {
  mountid_ = 0u;
  clear_has_mountid();
}
inline ::google::protobuf::uint32 stButtleMountResult::mountid() const {
  return mountid_;
}
inline void stButtleMountResult::set_mountid(::google::protobuf::uint32 value) {
  set_has_mountid();
  mountid_ = value;
}

// -------------------------------------------------------------------

// stReqMountFollow

// optional uint32 charId = 1;
inline bool stReqMountFollow::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqMountFollow::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqMountFollow::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqMountFollow::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqMountFollow::charid() const {
  return charid_;
}
inline void stReqMountFollow::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stMountFollowResult

// optional .MiscProto.stMountFollowResult.eResult result = 1;
inline bool stMountFollowResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMountFollowResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMountFollowResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMountFollowResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stMountFollowResult_eResult stMountFollowResult::result() const {
  return static_cast< ::MiscProto::stMountFollowResult_eResult >(result_);
}
inline void stMountFollowResult::set_result(::MiscProto::stMountFollowResult_eResult value) {
  assert(::MiscProto::stMountFollowResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional bool isFollow = 2;
inline bool stMountFollowResult::has_isfollow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMountFollowResult::set_has_isfollow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMountFollowResult::clear_has_isfollow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMountFollowResult::clear_isfollow() {
  isfollow_ = false;
  clear_has_isfollow();
}
inline bool stMountFollowResult::isfollow() const {
  return isfollow_;
}
inline void stMountFollowResult::set_isfollow(bool value) {
  set_has_isfollow();
  isfollow_ = value;
}

// -------------------------------------------------------------------

// stReqMountUnreal

// optional uint32 mountId = 1;
inline bool stReqMountUnreal::has_mountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqMountUnreal::set_has_mountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqMountUnreal::clear_has_mountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqMountUnreal::clear_mountid() {
  mountid_ = 0u;
  clear_has_mountid();
}
inline ::google::protobuf::uint32 stReqMountUnreal::mountid() const {
  return mountid_;
}
inline void stReqMountUnreal::set_mountid(::google::protobuf::uint32 value) {
  set_has_mountid();
  mountid_ = value;
}

// -------------------------------------------------------------------

// stMountUnrealResult

// optional .MiscProto.stMountUnrealResult.eResult result = 1;
inline bool stMountUnrealResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMountUnrealResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMountUnrealResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMountUnrealResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stMountUnrealResult_eResult stMountUnrealResult::result() const {
  return static_cast< ::MiscProto::stMountUnrealResult_eResult >(result_);
}
inline void stMountUnrealResult::set_result(::MiscProto::stMountUnrealResult_eResult value) {
  assert(::MiscProto::stMountUnrealResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 mountId = 2;
inline bool stMountUnrealResult::has_mountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMountUnrealResult::set_has_mountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMountUnrealResult::clear_has_mountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMountUnrealResult::clear_mountid() {
  mountid_ = 0u;
  clear_has_mountid();
}
inline ::google::protobuf::uint32 stMountUnrealResult::mountid() const {
  return mountid_;
}
inline void stMountUnrealResult::set_mountid(::google::protobuf::uint32 value) {
  set_has_mountid();
  mountid_ = value;
}

// optional uint32 oldMountId = 3;
inline bool stMountUnrealResult::has_oldmountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stMountUnrealResult::set_has_oldmountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stMountUnrealResult::clear_has_oldmountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stMountUnrealResult::clear_oldmountid() {
  oldmountid_ = 0u;
  clear_has_oldmountid();
}
inline ::google::protobuf::uint32 stMountUnrealResult::oldmountid() const {
  return oldmountid_;
}
inline void stMountUnrealResult::set_oldmountid(::google::protobuf::uint32 value) {
  set_has_oldmountid();
  oldmountid_ = value;
}

// -------------------------------------------------------------------

// stReqOpenMountGrowWindow

// optional uint32 charId = 1;
inline bool stReqOpenMountGrowWindow::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenMountGrowWindow::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenMountGrowWindow::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenMountGrowWindow::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOpenMountGrowWindow::charid() const {
  return charid_;
}
inline void stReqOpenMountGrowWindow::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOpenMountGrowWindowResult

// optional uint32 level = 1;
inline bool stOpenMountGrowWindowResult::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOpenMountGrowWindowResult::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOpenMountGrowWindowResult::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOpenMountGrowWindowResult::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stOpenMountGrowWindowResult::level() const {
  return level_;
}
inline void stOpenMountGrowWindowResult::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 exp = 2;
inline bool stOpenMountGrowWindowResult::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOpenMountGrowWindowResult::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOpenMountGrowWindowResult::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOpenMountGrowWindowResult::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 stOpenMountGrowWindowResult::exp() const {
  return exp_;
}
inline void stOpenMountGrowWindowResult::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 battle = 3;
inline bool stOpenMountGrowWindowResult::has_battle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stOpenMountGrowWindowResult::set_has_battle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stOpenMountGrowWindowResult::clear_has_battle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stOpenMountGrowWindowResult::clear_battle() {
  battle_ = 0u;
  clear_has_battle();
}
inline ::google::protobuf::uint32 stOpenMountGrowWindowResult::battle() const {
  return battle_;
}
inline void stOpenMountGrowWindowResult::set_battle(::google::protobuf::uint32 value) {
  set_has_battle();
  battle_ = value;
}

// -------------------------------------------------------------------

// stRefreshBattle

// optional uint32 battle = 1;
inline bool stRefreshBattle::has_battle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefreshBattle::set_has_battle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefreshBattle::clear_has_battle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefreshBattle::clear_battle() {
  battle_ = 0u;
  clear_has_battle();
}
inline ::google::protobuf::uint32 stRefreshBattle::battle() const {
  return battle_;
}
inline void stRefreshBattle::set_battle(::google::protobuf::uint32 value) {
  set_has_battle();
  battle_ = value;
}

// -------------------------------------------------------------------

// stLevelWflfareInfo

// optional int32 level = 1;
inline bool stLevelWflfareInfo::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLevelWflfareInfo::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLevelWflfareInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLevelWflfareInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 stLevelWflfareInfo::level() const {
  return level_;
}
inline void stLevelWflfareInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 type = 2;
inline bool stLevelWflfareInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLevelWflfareInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLevelWflfareInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLevelWflfareInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 stLevelWflfareInfo::type() const {
  return type_;
}
inline void stLevelWflfareInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// stHasGotRewardWflfareInfo

// repeated .MiscProto.stLevelWflfareInfo info = 1;
inline int stHasGotRewardWflfareInfo::info_size() const {
  return info_.size();
}
inline void stHasGotRewardWflfareInfo::clear_info() {
  info_.Clear();
}
inline const ::MiscProto::stLevelWflfareInfo& stHasGotRewardWflfareInfo::info(int index) const {
  return info_.Get(index);
}
inline ::MiscProto::stLevelWflfareInfo* stHasGotRewardWflfareInfo::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::MiscProto::stLevelWflfareInfo* stHasGotRewardWflfareInfo::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MiscProto::stLevelWflfareInfo >&
stHasGotRewardWflfareInfo::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::MiscProto::stLevelWflfareInfo >*
stHasGotRewardWflfareInfo::mutable_info() {
  return &info_;
}

// optional bool isOpen = 2;
inline bool stHasGotRewardWflfareInfo::has_isopen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHasGotRewardWflfareInfo::set_has_isopen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHasGotRewardWflfareInfo::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHasGotRewardWflfareInfo::clear_isopen() {
  isopen_ = false;
  clear_has_isopen();
}
inline bool stHasGotRewardWflfareInfo::isopen() const {
  return isopen_;
}
inline void stHasGotRewardWflfareInfo::set_isopen(bool value) {
  set_has_isopen();
  isopen_ = value;
}

// -------------------------------------------------------------------

// stReqReceiveWflfare

// optional int32 level = 1;
inline bool stReqReceiveWflfare::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqReceiveWflfare::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqReceiveWflfare::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqReceiveWflfare::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 stReqReceiveWflfare::level() const {
  return level_;
}
inline void stReqReceiveWflfare::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 type = 2;
inline bool stReqReceiveWflfare::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqReceiveWflfare::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqReceiveWflfare::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqReceiveWflfare::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 stReqReceiveWflfare::type() const {
  return type_;
}
inline void stReqReceiveWflfare::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// stReceiveWflfareResult

// optional .MiscProto.stReceiveWflfareResult.eResult result = 1;
inline bool stReceiveWflfareResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReceiveWflfareResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReceiveWflfareResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReceiveWflfareResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stReceiveWflfareResult_eResult stReceiveWflfareResult::result() const {
  return static_cast< ::MiscProto::stReceiveWflfareResult_eResult >(result_);
}
inline void stReceiveWflfareResult::set_result(::MiscProto::stReceiveWflfareResult_eResult value) {
  assert(::MiscProto::stReceiveWflfareResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqPaySign

// optional int32 sdkid = 1;
inline bool stReqPaySign::has_sdkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqPaySign::set_has_sdkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqPaySign::clear_has_sdkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqPaySign::clear_sdkid() {
  sdkid_ = 0;
  clear_has_sdkid();
}
inline ::google::protobuf::int32 stReqPaySign::sdkid() const {
  return sdkid_;
}
inline void stReqPaySign::set_sdkid(::google::protobuf::int32 value) {
  set_has_sdkid();
  sdkid_ = value;
}

// optional string data = 2;
inline bool stReqPaySign::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqPaySign::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqPaySign::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqPaySign::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stReqPaySign::data() const {
  return *data_;
}
inline void stReqPaySign::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stReqPaySign::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stReqPaySign::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqPaySign::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stReqPaySign::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqPaySign::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stRetPaySign

// optional string sign = 1;
inline bool stRetPaySign::has_sign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetPaySign::set_has_sign() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetPaySign::clear_has_sign() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetPaySign::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& stRetPaySign::sign() const {
  return *sign_;
}
inline void stRetPaySign::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void stRetPaySign::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void stRetPaySign::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetPaySign::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* stRetPaySign::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetPaySign::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqServerPay

// optional uint32 sdkid = 1;
inline bool stReqServerPay::has_sdkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqServerPay::set_has_sdkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqServerPay::clear_has_sdkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqServerPay::clear_sdkid() {
  sdkid_ = 0u;
  clear_has_sdkid();
}
inline ::google::protobuf::uint32 stReqServerPay::sdkid() const {
  return sdkid_;
}
inline void stReqServerPay::set_sdkid(::google::protobuf::uint32 value) {
  set_has_sdkid();
  sdkid_ = value;
}

// optional uint32 itemId = 2;
inline bool stReqServerPay::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqServerPay::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqServerPay::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqServerPay::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stReqServerPay::itemid() const {
  return itemid_;
}
inline void stReqServerPay::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 money = 3;
inline bool stReqServerPay::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqServerPay::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqServerPay::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqServerPay::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 stReqServerPay::money() const {
  return money_;
}
inline void stReqServerPay::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// optional string token = 4;
inline bool stReqServerPay::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqServerPay::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqServerPay::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqServerPay::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& stReqServerPay::token() const {
  return *token_;
}
inline void stReqServerPay::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void stReqServerPay::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void stReqServerPay::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqServerPay::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* stReqServerPay::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqServerPay::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stRetServerPay

// optional .MiscProto.stRetServerPay.eResult result = 1;
inline bool stRetServerPay::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetServerPay::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetServerPay::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetServerPay::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRetServerPay_eResult stRetServerPay::result() const {
  return static_cast< ::MiscProto::stRetServerPay_eResult >(result_);
}
inline void stRetServerPay::set_result(::MiscProto::stRetServerPay_eResult value) {
  assert(::MiscProto::stRetServerPay_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string orderId = 2;
inline bool stRetServerPay::has_orderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetServerPay::set_has_orderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetServerPay::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetServerPay::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& stRetServerPay::orderid() const {
  return *orderid_;
}
inline void stRetServerPay::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void stRetServerPay::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void stRetServerPay::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetServerPay::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* stRetServerPay::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetServerPay::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqSummonReward

// optional uint32 countId = 1;
inline bool stReqSummonReward::has_countid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSummonReward::set_has_countid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSummonReward::clear_has_countid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSummonReward::clear_countid() {
  countid_ = 0u;
  clear_has_countid();
}
inline ::google::protobuf::uint32 stReqSummonReward::countid() const {
  return countid_;
}
inline void stReqSummonReward::set_countid(::google::protobuf::uint32 value) {
  set_has_countid();
  countid_ = value;
}

// optional uint32 summonType = 2;
inline bool stReqSummonReward::has_summontype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqSummonReward::set_has_summontype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqSummonReward::clear_has_summontype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqSummonReward::clear_summontype() {
  summontype_ = 0u;
  clear_has_summontype();
}
inline ::google::protobuf::uint32 stReqSummonReward::summontype() const {
  return summontype_;
}
inline void stReqSummonReward::set_summontype(::google::protobuf::uint32 value) {
  set_has_summontype();
  summontype_ = value;
}

// optional uint32 rewardType = 3;
inline bool stReqSummonReward::has_rewardtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqSummonReward::set_has_rewardtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqSummonReward::clear_has_rewardtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqSummonReward::clear_rewardtype() {
  rewardtype_ = 0u;
  clear_has_rewardtype();
}
inline ::google::protobuf::uint32 stReqSummonReward::rewardtype() const {
  return rewardtype_;
}
inline void stReqSummonReward::set_rewardtype(::google::protobuf::uint32 value) {
  set_has_rewardtype();
  rewardtype_ = value;
}

// -------------------------------------------------------------------

// stSummonRewardResult

// optional .MiscProto.stSummonRewardResult.eResult result = 1;
inline bool stSummonRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSummonRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSummonRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSummonRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stSummonRewardResult_eResult stSummonRewardResult::result() const {
  return static_cast< ::MiscProto::stSummonRewardResult_eResult >(result_);
}
inline void stSummonRewardResult::set_result(::MiscProto::stSummonRewardResult_eResult value) {
  assert(::MiscProto::stSummonRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 countId = 2;
inline bool stSummonRewardResult::has_countid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSummonRewardResult::set_has_countid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSummonRewardResult::clear_has_countid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSummonRewardResult::clear_countid() {
  countid_ = 0u;
  clear_has_countid();
}
inline ::google::protobuf::uint32 stSummonRewardResult::countid() const {
  return countid_;
}
inline void stSummonRewardResult::set_countid(::google::protobuf::uint32 value) {
  set_has_countid();
  countid_ = value;
}

// optional uint32 summonType = 3;
inline bool stSummonRewardResult::has_summontype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSummonRewardResult::set_has_summontype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSummonRewardResult::clear_has_summontype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSummonRewardResult::clear_summontype() {
  summontype_ = 0u;
  clear_has_summontype();
}
inline ::google::protobuf::uint32 stSummonRewardResult::summontype() const {
  return summontype_;
}
inline void stSummonRewardResult::set_summontype(::google::protobuf::uint32 value) {
  set_has_summontype();
  summontype_ = value;
}

// optional uint32 rewardType = 4;
inline bool stSummonRewardResult::has_rewardtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSummonRewardResult::set_has_rewardtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSummonRewardResult::clear_has_rewardtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSummonRewardResult::clear_rewardtype() {
  rewardtype_ = 0u;
  clear_has_rewardtype();
}
inline ::google::protobuf::uint32 stSummonRewardResult::rewardtype() const {
  return rewardtype_;
}
inline void stSummonRewardResult::set_rewardtype(::google::protobuf::uint32 value) {
  set_has_rewardtype();
  rewardtype_ = value;
}

// -------------------------------------------------------------------

// stReqSummonData

// optional uint32 summonType = 1;
inline bool stReqSummonData::has_summontype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSummonData::set_has_summontype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSummonData::clear_has_summontype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSummonData::clear_summontype() {
  summontype_ = 0u;
  clear_has_summontype();
}
inline ::google::protobuf::uint32 stReqSummonData::summontype() const {
  return summontype_;
}
inline void stReqSummonData::set_summontype(::google::protobuf::uint32 value) {
  set_has_summontype();
  summontype_ = value;
}

// -------------------------------------------------------------------

// stSummonDataResult

// optional bool hasBuySummonment = 1;
inline bool stSummonDataResult::has_hasbuysummonment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSummonDataResult::set_has_hasbuysummonment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSummonDataResult::clear_has_hasbuysummonment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSummonDataResult::clear_hasbuysummonment() {
  hasbuysummonment_ = false;
  clear_has_hasbuysummonment();
}
inline bool stSummonDataResult::hasbuysummonment() const {
  return hasbuysummonment_;
}
inline void stSummonDataResult::set_hasbuysummonment(bool value) {
  set_has_hasbuysummonment();
  hasbuysummonment_ = value;
}

// repeated uint32 freeSummonRewardList = 2;
inline int stSummonDataResult::freesummonrewardlist_size() const {
  return freesummonrewardlist_.size();
}
inline void stSummonDataResult::clear_freesummonrewardlist() {
  freesummonrewardlist_.Clear();
}
inline ::google::protobuf::uint32 stSummonDataResult::freesummonrewardlist(int index) const {
  return freesummonrewardlist_.Get(index);
}
inline void stSummonDataResult::set_freesummonrewardlist(int index, ::google::protobuf::uint32 value) {
  freesummonrewardlist_.Set(index, value);
}
inline void stSummonDataResult::add_freesummonrewardlist(::google::protobuf::uint32 value) {
  freesummonrewardlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stSummonDataResult::freesummonrewardlist() const {
  return freesummonrewardlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stSummonDataResult::mutable_freesummonrewardlist() {
  return &freesummonrewardlist_;
}

// repeated uint32 rechargeSummonRewardList = 3;
inline int stSummonDataResult::rechargesummonrewardlist_size() const {
  return rechargesummonrewardlist_.size();
}
inline void stSummonDataResult::clear_rechargesummonrewardlist() {
  rechargesummonrewardlist_.Clear();
}
inline ::google::protobuf::uint32 stSummonDataResult::rechargesummonrewardlist(int index) const {
  return rechargesummonrewardlist_.Get(index);
}
inline void stSummonDataResult::set_rechargesummonrewardlist(int index, ::google::protobuf::uint32 value) {
  rechargesummonrewardlist_.Set(index, value);
}
inline void stSummonDataResult::add_rechargesummonrewardlist(::google::protobuf::uint32 value) {
  rechargesummonrewardlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stSummonDataResult::rechargesummonrewardlist() const {
  return rechargesummonrewardlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stSummonDataResult::mutable_rechargesummonrewardlist() {
  return &rechargesummonrewardlist_;
}

// optional uint32 summonType = 4;
inline bool stSummonDataResult::has_summontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSummonDataResult::set_has_summontype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSummonDataResult::clear_has_summontype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSummonDataResult::clear_summontype() {
  summontype_ = 0u;
  clear_has_summontype();
}
inline ::google::protobuf::uint32 stSummonDataResult::summontype() const {
  return summontype_;
}
inline void stSummonDataResult::set_summontype(::google::protobuf::uint32 value) {
  set_has_summontype();
  summontype_ = value;
}

// optional uint32 countId = 5;
inline bool stSummonDataResult::has_countid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSummonDataResult::set_has_countid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSummonDataResult::clear_has_countid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSummonDataResult::clear_countid() {
  countid_ = 0u;
  clear_has_countid();
}
inline ::google::protobuf::uint32 stSummonDataResult::countid() const {
  return countid_;
}
inline void stSummonDataResult::set_countid(::google::protobuf::uint32 value) {
  set_has_countid();
  countid_ = value;
}

// optional uint32 countNum = 6;
inline bool stSummonDataResult::has_countnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSummonDataResult::set_has_countnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSummonDataResult::clear_has_countnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSummonDataResult::clear_countnum() {
  countnum_ = 0u;
  clear_has_countnum();
}
inline ::google::protobuf::uint32 stSummonDataResult::countnum() const {
  return countnum_;
}
inline void stSummonDataResult::set_countnum(::google::protobuf::uint32 value) {
  set_has_countnum();
  countnum_ = value;
}

// optional uint32 beginTime = 7;
inline bool stSummonDataResult::has_begintime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSummonDataResult::set_has_begintime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSummonDataResult::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSummonDataResult::clear_begintime() {
  begintime_ = 0u;
  clear_has_begintime();
}
inline ::google::protobuf::uint32 stSummonDataResult::begintime() const {
  return begintime_;
}
inline void stSummonDataResult::set_begintime(::google::protobuf::uint32 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional uint32 endTime = 8;
inline bool stSummonDataResult::has_endtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSummonDataResult::set_has_endtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSummonDataResult::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSummonDataResult::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 stSummonDataResult::endtime() const {
  return endtime_;
}
inline void stSummonDataResult::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
}

// -------------------------------------------------------------------

// stBuySummonPlanResult

// optional .MiscProto.stBuySummonPlanResult.eResult result = 1;
inline bool stBuySummonPlanResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuySummonPlanResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuySummonPlanResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuySummonPlanResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stBuySummonPlanResult_eResult stBuySummonPlanResult::result() const {
  return static_cast< ::MiscProto::stBuySummonPlanResult_eResult >(result_);
}
inline void stBuySummonPlanResult::set_result(::MiscProto::stBuySummonPlanResult_eResult value) {
  assert(::MiscProto::stBuySummonPlanResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string index = 2;
inline bool stBuySummonPlanResult::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBuySummonPlanResult::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBuySummonPlanResult::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBuySummonPlanResult::clear_index() {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    index_->clear();
  }
  clear_has_index();
}
inline const ::std::string& stBuySummonPlanResult::index() const {
  return *index_;
}
inline void stBuySummonPlanResult::set_index(const ::std::string& value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(value);
}
inline void stBuySummonPlanResult::set_index(const char* value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(value);
}
inline void stBuySummonPlanResult::set_index(const char* value, size_t size) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBuySummonPlanResult::mutable_index() {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  return index_;
}
inline ::std::string* stBuySummonPlanResult::release_index() {
  clear_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = index_;
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBuySummonPlanResult::set_allocated_index(::std::string* index) {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    delete index_;
  }
  if (index) {
    set_has_index();
    index_ = index;
  } else {
    clear_has_index();
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqRechargeCheck

// optional uint32 rechargeId = 1;
inline bool stReqRechargeCheck::has_rechargeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRechargeCheck::set_has_rechargeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRechargeCheck::clear_has_rechargeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRechargeCheck::clear_rechargeid() {
  rechargeid_ = 0u;
  clear_has_rechargeid();
}
inline ::google::protobuf::uint32 stReqRechargeCheck::rechargeid() const {
  return rechargeid_;
}
inline void stReqRechargeCheck::set_rechargeid(::google::protobuf::uint32 value) {
  set_has_rechargeid();
  rechargeid_ = value;
}

// optional uint32 buyCount = 2;
inline bool stReqRechargeCheck::has_buycount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRechargeCheck::set_has_buycount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRechargeCheck::clear_has_buycount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRechargeCheck::clear_buycount() {
  buycount_ = 0u;
  clear_has_buycount();
}
inline ::google::protobuf::uint32 stReqRechargeCheck::buycount() const {
  return buycount_;
}
inline void stReqRechargeCheck::set_buycount(::google::protobuf::uint32 value) {
  set_has_buycount();
  buycount_ = value;
}

// -------------------------------------------------------------------

// stRechargeCheckResult

// optional .MiscProto.stRechargeCheckResult.eResult result = 1;
inline bool stRechargeCheckResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRechargeCheckResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRechargeCheckResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRechargeCheckResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MiscProto::stRechargeCheckResult_eResult stRechargeCheckResult::result() const {
  return static_cast< ::MiscProto::stRechargeCheckResult_eResult >(result_);
}
inline void stRechargeCheckResult::set_result(::MiscProto::stRechargeCheckResult_eResult value) {
  assert(::MiscProto::stRechargeCheckResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MiscProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynAllMail_ProtoModID>() {
  return ::MiscProto::stSynAllMail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynAllMail_ProtoFunID>() {
  return ::MiscProto::stSynAllMail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqReadMail_ProtoModID>() {
  return ::MiscProto::stReqReadMail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqReadMail_ProtoFunID>() {
  return ::MiscProto::stReqReadMail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetMailInfo_ProtoModID>() {
  return ::MiscProto::stRetMailInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetMailInfo_ProtoFunID>() {
  return ::MiscProto::stRetMailInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqFetchAttach_ProtoModID>() {
  return ::MiscProto::stReqFetchAttach_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqFetchAttach_ProtoFunID>() {
  return ::MiscProto::stReqFetchAttach_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stFetchAttachResult_Result>() {
  return ::MiscProto::stFetchAttachResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stFetchAttachResult_ProtoModID>() {
  return ::MiscProto::stFetchAttachResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stFetchAttachResult_ProtoFunID>() {
  return ::MiscProto::stFetchAttachResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReceiveMail_ProtoModID>() {
  return ::MiscProto::stReceiveMail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReceiveMail_ProtoFunID>() {
  return ::MiscProto::stReceiveMail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRewardInfo_ProtoModID>() {
  return ::MiscProto::stReqRewardInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRewardInfo_ProtoFunID>() {
  return ::MiscProto::stReqRewardInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRewardInfo_ProtoModID>() {
  return ::MiscProto::stRetRewardInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRewardInfo_ProtoFunID>() {
  return ::MiscProto::stRetRewardInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqSignReward_ProtoModID>() {
  return ::MiscProto::stReqSignReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqSignReward_ProtoFunID>() {
  return ::MiscProto::stReqSignReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetSignRewardResult_Result>() {
  return ::MiscProto::stGetSignRewardResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetSignRewardResult_ProtoModID>() {
  return ::MiscProto::stGetSignRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetSignRewardResult_ProtoFunID>() {
  return ::MiscProto::stGetSignRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenSvrReward_ProtoModID>() {
  return ::MiscProto::stReqOpenSvrReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenSvrReward_ProtoFunID>() {
  return ::MiscProto::stReqOpenSvrReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetOpenSvrRewardResult_eResult>() {
  return ::MiscProto::stGetOpenSvrRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetOpenSvrRewardResult_ProtoModID>() {
  return ::MiscProto::stGetOpenSvrRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetOpenSvrRewardResult_ProtoFunID>() {
  return ::MiscProto::stGetOpenSvrRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqLvReward_ProtoModID>() {
  return ::MiscProto::stReqLvReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqLvReward_ProtoFunID>() {
  return ::MiscProto::stReqLvReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLvRewardResult_eResult>() {
  return ::MiscProto::stLvRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLvRewardResult_ProtoModID>() {
  return ::MiscProto::stLvRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLvRewardResult_ProtoFunID>() {
  return ::MiscProto::stLvRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOnlineReward_ProtoModID>() {
  return ::MiscProto::stReqOnlineReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOnlineReward_ProtoFunID>() {
  return ::MiscProto::stReqOnlineReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetOnlineRewardResult_eResult>() {
  return ::MiscProto::stGetOnlineRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetOnlineRewardResult_ProtoModID>() {
  return ::MiscProto::stGetOnlineRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetOnlineRewardResult_ProtoFunID>() {
  return ::MiscProto::stGetOnlineRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyStarInfo_ProtoModID>() {
  return ::MiscProto::stBuyStarInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyStarInfo_ProtoFunID>() {
  return ::MiscProto::stBuyStarInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqBuyStar_ProtoModID>() {
  return ::MiscProto::stReqBuyStar_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqBuyStar_ProtoFunID>() {
  return ::MiscProto::stReqBuyStar_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyStarResult_Result>() {
  return ::MiscProto::stBuyStarResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyStarResult_ProtoModID>() {
  return ::MiscProto::stBuyStarResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyStarResult_ProtoFunID>() {
  return ::MiscProto::stBuyStarResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::ReqOpenDrawWindow_ProtoModID>() {
  return ::MiscProto::ReqOpenDrawWindow_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::ReqOpenDrawWindow_ProtoFunID>() {
  return ::MiscProto::ReqOpenDrawWindow_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawWindowInfo_ProtoModID>() {
  return ::MiscProto::stDrawWindowInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawWindowInfo_ProtoFunID>() {
  return ::MiscProto::stDrawWindowInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDraw_ProtoModID>() {
  return ::MiscProto::stReqDraw_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDraw_ProtoFunID>() {
  return ::MiscProto::stReqDraw_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawResult_Result>() {
  return ::MiscProto::stDrawResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawResult_ProtoModID>() {
  return ::MiscProto::stDrawResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawResult_ProtoFunID>() {
  return ::MiscProto::stDrawResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynMyTitle_ProtoModID>() {
  return ::MiscProto::stSynMyTitle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynMyTitle_ProtoFunID>() {
  return ::MiscProto::stSynMyTitle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stActiveOneTitle_ProtoModID>() {
  return ::MiscProto::stActiveOneTitle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stActiveOneTitle_ProtoFunID>() {
  return ::MiscProto::stActiveOneTitle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stActiveTitleResult_eResult>() {
  return ::MiscProto::stActiveTitleResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stActiveTitleResult_ProtoModID>() {
  return ::MiscProto::stActiveTitleResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stActiveTitleResult_ProtoFunID>() {
  return ::MiscProto::stActiveTitleResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stObtainOneTitle_ProtoModID>() {
  return ::MiscProto::stObtainOneTitle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stObtainOneTitle_ProtoFunID>() {
  return ::MiscProto::stObtainOneTitle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyInvestPlan_ProtoModID>() {
  return ::MiscProto::stBuyInvestPlan_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyInvestPlan_ProtoFunID>() {
  return ::MiscProto::stBuyInvestPlan_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyInvestPlanResult_eResult>() {
  return ::MiscProto::stBuyInvestPlanResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyInvestPlanResult_ProtoModID>() {
  return ::MiscProto::stBuyInvestPlanResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyInvestPlanResult_ProtoFunID>() {
  return ::MiscProto::stBuyInvestPlanResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqInvestPlanReward_ProtoModID>() {
  return ::MiscProto::stReqInvestPlanReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqInvestPlanReward_ProtoFunID>() {
  return ::MiscProto::stReqInvestPlanReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stInvestPlanRewardResult_eResult>() {
  return ::MiscProto::stInvestPlanRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stInvestPlanRewardResult_ProtoModID>() {
  return ::MiscProto::stInvestPlanRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stInvestPlanRewardResult_ProtoFunID>() {
  return ::MiscProto::stInvestPlanRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqEatDinner_ProtoModID>() {
  return ::MiscProto::stReqEatDinner_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqEatDinner_ProtoFunID>() {
  return ::MiscProto::stReqEatDinner_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stEatDinnerResult_eResult>() {
  return ::MiscProto::stEatDinnerResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stEatDinnerResult_ProtoModID>() {
  return ::MiscProto::stEatDinnerResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stEatDinnerResult_ProtoFunID>() {
  return ::MiscProto::stEatDinnerResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynActivityData_ProtoModID>() {
  return ::MiscProto::stSynActivityData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynActivityData_ProtoFunID>() {
  return ::MiscProto::stSynActivityData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenCaptureTreasure_ProtoModID>() {
  return ::MiscProto::stReqOpenCaptureTreasure_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenCaptureTreasure_ProtoFunID>() {
  return ::MiscProto::stReqOpenCaptureTreasure_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetCaptureTreasure_ProtoModID>() {
  return ::MiscProto::stRetCaptureTreasure_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetCaptureTreasure_ProtoFunID>() {
  return ::MiscProto::stRetCaptureTreasure_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqCombineTreasure_ProtoModID>() {
  return ::MiscProto::stReqCombineTreasure_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqCombineTreasure_ProtoFunID>() {
  return ::MiscProto::stReqCombineTreasure_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCombineTreasureResult_eResult>() {
  return ::MiscProto::stCombineTreasureResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCombineTreasureResult_ProtoModID>() {
  return ::MiscProto::stCombineTreasureResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCombineTreasureResult_ProtoFunID>() {
  return ::MiscProto::stCombineTreasureResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyPeaceModuleTime_eType>() {
  return ::MiscProto::stBuyPeaceModuleTime_eType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyPeaceModuleTime_ProtoModID>() {
  return ::MiscProto::stBuyPeaceModuleTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyPeaceModuleTime_ProtoFunID>() {
  return ::MiscProto::stBuyPeaceModuleTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyPeaceModuleTimeResult_eResult>() {
  return ::MiscProto::stBuyPeaceModuleTimeResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyPeaceModuleTimeResult_ProtoModID>() {
  return ::MiscProto::stBuyPeaceModuleTimeResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyPeaceModuleTimeResult_ProtoFunID>() {
  return ::MiscProto::stBuyPeaceModuleTimeResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqChallengeUserList_ProtoModID>() {
  return ::MiscProto::stReqChallengeUserList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqChallengeUserList_ProtoFunID>() {
  return ::MiscProto::stReqChallengeUserList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetChallengeUserList_ProtoModID>() {
  return ::MiscProto::stRetChallengeUserList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetChallengeUserList_ProtoFunID>() {
  return ::MiscProto::stRetChallengeUserList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCaptureUserTreasure_ProtoModID>() {
  return ::MiscProto::stCaptureUserTreasure_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCaptureUserTreasure_ProtoFunID>() {
  return ::MiscProto::stCaptureUserTreasure_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCaptureUserTreasureResult_eResult>() {
  return ::MiscProto::stCaptureUserTreasureResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCaptureUserTreasureResult_ProtoModID>() {
  return ::MiscProto::stCaptureUserTreasureResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCaptureUserTreasureResult_ProtoFunID>() {
  return ::MiscProto::stCaptureUserTreasureResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynTreasureNum_ProtoModID>() {
  return ::MiscProto::stSynTreasureNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynTreasureNum_ProtoFunID>() {
  return ::MiscProto::stSynTreasureNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCancelActiveTitle_ProtoModID>() {
  return ::MiscProto::stCancelActiveTitle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCancelActiveTitle_ProtoFunID>() {
  return ::MiscProto::stCancelActiveTitle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCancelActiveTitleResult_ProtoModID>() {
  return ::MiscProto::stCancelActiveTitleResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCancelActiveTitleResult_ProtoFunID>() {
  return ::MiscProto::stCancelActiveTitleResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynAllSprite_ProtoModID>() {
  return ::MiscProto::stSynAllSprite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynAllSprite_ProtoFunID>() {
  return ::MiscProto::stSynAllSprite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqUnlockedSprite_ProtoModID>() {
  return ::MiscProto::stReqUnlockedSprite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqUnlockedSprite_ProtoFunID>() {
  return ::MiscProto::stReqUnlockedSprite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stUnlockedSpriteResult_eResult>() {
  return ::MiscProto::stUnlockedSpriteResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stUnlockedSpriteResult_ProtoModID>() {
  return ::MiscProto::stUnlockedSpriteResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stUnlockedSpriteResult_ProtoFunID>() {
  return ::MiscProto::stUnlockedSpriteResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAddSprite_ProtoModID>() {
  return ::MiscProto::stAddSprite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAddSprite_ProtoFunID>() {
  return ::MiscProto::stAddSprite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqLevelupSprite_ProtoModID>() {
  return ::MiscProto::stReqLevelupSprite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqLevelupSprite_ProtoFunID>() {
  return ::MiscProto::stReqLevelupSprite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLevelupSpriteResult_eResult>() {
  return ::MiscProto::stLevelupSpriteResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLevelupSpriteResult_ProtoModID>() {
  return ::MiscProto::stLevelupSpriteResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLevelupSpriteResult_ProtoFunID>() {
  return ::MiscProto::stLevelupSpriteResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSpriteFollowMaster_ProtoModID>() {
  return ::MiscProto::stSpriteFollowMaster_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSpriteFollowMaster_ProtoFunID>() {
  return ::MiscProto::stSpriteFollowMaster_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSpriteFollowMasterResult_eResult>() {
  return ::MiscProto::stSpriteFollowMasterResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSpriteFollowMasterResult_ProtoModID>() {
  return ::MiscProto::stSpriteFollowMasterResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSpriteFollowMasterResult_ProtoFunID>() {
  return ::MiscProto::stSpriteFollowMasterResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqAvaibleActivity_ProtoModID>() {
  return ::MiscProto::stReqAvaibleActivity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqAvaibleActivity_ProtoFunID>() {
  return ::MiscProto::stReqAvaibleActivity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetAvaibleActivity_ProtoModID>() {
  return ::MiscProto::stRetAvaibleActivity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetAvaibleActivity_ProtoFunID>() {
  return ::MiscProto::stRetAvaibleActivity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqAcitivityReward_ProtoModID>() {
  return ::MiscProto::stReqAcitivityReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqAcitivityReward_ProtoFunID>() {
  return ::MiscProto::stReqAcitivityReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stActivityRewardResult_eResult>() {
  return ::MiscProto::stActivityRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stActivityRewardResult_ProtoModID>() {
  return ::MiscProto::stActivityRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stActivityRewardResult_ProtoFunID>() {
  return ::MiscProto::stActivityRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqWorldBossDamageRank_ProtoModID>() {
  return ::MiscProto::stReqWorldBossDamageRank_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqWorldBossDamageRank_ProtoFunID>() {
  return ::MiscProto::stReqWorldBossDamageRank_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetWorldBossDamageRank_ProtoModID>() {
  return ::MiscProto::stRetWorldBossDamageRank_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetWorldBossDamageRank_ProtoFunID>() {
  return ::MiscProto::stRetWorldBossDamageRank_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenWorldBossWin_ProtoModID>() {
  return ::MiscProto::stReqOpenWorldBossWin_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenWorldBossWin_ProtoFunID>() {
  return ::MiscProto::stReqOpenWorldBossWin_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetOpenWorldBossWin_ProtoModID>() {
  return ::MiscProto::stRetOpenWorldBossWin_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetOpenWorldBossWin_ProtoFunID>() {
  return ::MiscProto::stRetOpenWorldBossWin_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqBossWorldMatch_ProtoModID>() {
  return ::MiscProto::stReqBossWorldMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqBossWorldMatch_ProtoFunID>() {
  return ::MiscProto::stReqBossWorldMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetBossWorldMatch_eResult>() {
  return ::MiscProto::stRetBossWorldMatch_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetBossWorldMatch_ProtoModID>() {
  return ::MiscProto::stRetBossWorldMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetBossWorldMatch_ProtoFunID>() {
  return ::MiscProto::stRetBossWorldMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqClearWorldBossActivityCD_ProtoModID>() {
  return ::MiscProto::stReqClearWorldBossActivityCD_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqClearWorldBossActivityCD_ProtoFunID>() {
  return ::MiscProto::stReqClearWorldBossActivityCD_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stClearWorldBossActivityCDResult_eResult>() {
  return ::MiscProto::stClearWorldBossActivityCDResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stClearWorldBossActivityCDResult_ProtoModID>() {
  return ::MiscProto::stClearWorldBossActivityCDResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stClearWorldBossActivityCDResult_ProtoFunID>() {
  return ::MiscProto::stClearWorldBossActivityCDResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRaiseDamageInWorldBoss_ProtoModID>() {
  return ::MiscProto::stReqRaiseDamageInWorldBoss_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRaiseDamageInWorldBoss_ProtoFunID>() {
  return ::MiscProto::stReqRaiseDamageInWorldBoss_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRaiseDamageInWorldBossResult_eResult>() {
  return ::MiscProto::stRaiseDamageInWorldBossResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRaiseDamageInWorldBossResult_ProtoModID>() {
  return ::MiscProto::stRaiseDamageInWorldBossResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRaiseDamageInWorldBossResult_ProtoFunID>() {
  return ::MiscProto::stRaiseDamageInWorldBossResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCancelWorldBossMatch_ProtoModID>() {
  return ::MiscProto::stCancelWorldBossMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCancelWorldBossMatch_ProtoFunID>() {
  return ::MiscProto::stCancelWorldBossMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCancelWorldBossMatchResult_eResult>() {
  return ::MiscProto::stCancelWorldBossMatchResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCancelWorldBossMatchResult_ProtoModID>() {
  return ::MiscProto::stCancelWorldBossMatchResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stCancelWorldBossMatchResult_ProtoFunID>() {
  return ::MiscProto::stCancelWorldBossMatchResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stQueryDrawHeroActivity_ProtoModID>() {
  return ::MiscProto::stQueryDrawHeroActivity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stQueryDrawHeroActivity_ProtoFunID>() {
  return ::MiscProto::stQueryDrawHeroActivity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawHeroActivityInfo_ProtoModID>() {
  return ::MiscProto::stRetDrawHeroActivityInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawHeroActivityInfo_ProtoFunID>() {
  return ::MiscProto::stRetDrawHeroActivityInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawHeroScoreReward_ProtoModID>() {
  return ::MiscProto::stReqDrawHeroScoreReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawHeroScoreReward_ProtoFunID>() {
  return ::MiscProto::stReqDrawHeroScoreReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawHeroScoreRewardRet_eResult>() {
  return ::MiscProto::stDrawHeroScoreRewardRet_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawHeroScoreRewardRet_ProtoModID>() {
  return ::MiscProto::stDrawHeroScoreRewardRet_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawHeroScoreRewardRet_ProtoFunID>() {
  return ::MiscProto::stDrawHeroScoreRewardRet_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawHeroRankReward_ProtoModID>() {
  return ::MiscProto::stReqDrawHeroRankReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawHeroRankReward_ProtoFunID>() {
  return ::MiscProto::stReqDrawHeroRankReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawHeroRankReward_eResult>() {
  return ::MiscProto::stDrawHeroRankReward_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawHeroRankReward_ProtoModID>() {
  return ::MiscProto::stDrawHeroRankReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawHeroRankReward_ProtoFunID>() {
  return ::MiscProto::stDrawHeroRankReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqCompensationList_ProtoModID>() {
  return ::MiscProto::stReqCompensationList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqCompensationList_ProtoFunID>() {
  return ::MiscProto::stReqCompensationList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetCompensationList_ProtoModID>() {
  return ::MiscProto::stRetCompensationList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetCompensationList_ProtoFunID>() {
  return ::MiscProto::stRetCompensationList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGotCompensation_ProtoModID>() {
  return ::MiscProto::stReqGotCompensation_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGotCompensation_ProtoFunID>() {
  return ::MiscProto::stReqGotCompensation_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGotCompensationResult_eResult>() {
  return ::MiscProto::stGotCompensationResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGotCompensationResult_ProtoModID>() {
  return ::MiscProto::stGotCompensationResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGotCompensationResult_ProtoFunID>() {
  return ::MiscProto::stGotCompensationResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReq7DayActivityInfo_ProtoModID>() {
  return ::MiscProto::stReq7DayActivityInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReq7DayActivityInfo_ProtoFunID>() {
  return ::MiscProto::stReq7DayActivityInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRet7DayActivityInfo_ProtoModID>() {
  return ::MiscProto::stRet7DayActivityInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRet7DayActivityInfo_ProtoFunID>() {
  return ::MiscProto::stRet7DayActivityInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqSevenDayReward_ProtoModID>() {
  return ::MiscProto::stReqSevenDayReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqSevenDayReward_ProtoFunID>() {
  return ::MiscProto::stReqSevenDayReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSevenDayRewardRet_eResult>() {
  return ::MiscProto::stSevenDayRewardRet_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSevenDayRewardRet_ProtoModID>() {
  return ::MiscProto::stSevenDayRewardRet_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSevenDayRewardRet_ProtoFunID>() {
  return ::MiscProto::stSevenDayRewardRet_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSevenDayHasRewardTip_ProtoModID>() {
  return ::MiscProto::stSevenDayHasRewardTip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSevenDayHasRewardTip_ProtoFunID>() {
  return ::MiscProto::stSevenDayHasRewardTip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAppStoreCfg_ProtoModID>() {
  return ::MiscProto::stAppStoreCfg_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAppStoreCfg_ProtoFunID>() {
  return ::MiscProto::stAppStoreCfg_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stOpenWindowTip_eAction>() {
  return ::MiscProto::stOpenWindowTip_eAction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stOpenWindowTip_ProtoModID>() {
  return ::MiscProto::stOpenWindowTip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stOpenWindowTip_ProtoFunID>() {
  return ::MiscProto::stOpenWindowTip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRechargeActivityList_ProtoModID>() {
  return ::MiscProto::stReqRechargeActivityList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRechargeActivityList_ProtoFunID>() {
  return ::MiscProto::stReqRechargeActivityList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRechargeActivityList_ProtoModID>() {
  return ::MiscProto::stRetRechargeActivityList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRechargeActivityList_ProtoFunID>() {
  return ::MiscProto::stRetRechargeActivityList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRechargeActivtiyReward_ProtoModID>() {
  return ::MiscProto::stReqRechargeActivtiyReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRechargeActivtiyReward_ProtoFunID>() {
  return ::MiscProto::stReqRechargeActivtiyReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRechargeActivityReward_eResult>() {
  return ::MiscProto::stRetRechargeActivityReward_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRechargeActivityReward_ProtoModID>() {
  return ::MiscProto::stRetRechargeActivityReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRechargeActivityReward_ProtoFunID>() {
  return ::MiscProto::stRetRechargeActivityReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynAllInvestigation_ProtoModID>() {
  return ::MiscProto::stSynAllInvestigation_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynAllInvestigation_ProtoFunID>() {
  return ::MiscProto::stSynAllInvestigation_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqInvestgationReward_ProtoModID>() {
  return ::MiscProto::stReqInvestgationReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqInvestgationReward_ProtoFunID>() {
  return ::MiscProto::stReqInvestgationReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stInvestgationRewardResult_eResult>() {
  return ::MiscProto::stInvestgationRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stInvestgationRewardResult_ProtoModID>() {
  return ::MiscProto::stInvestgationRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stInvestgationRewardResult_ProtoFunID>() {
  return ::MiscProto::stInvestgationRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqActivityShop_ProtoModID>() {
  return ::MiscProto::stReqActivityShop_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqActivityShop_ProtoFunID>() {
  return ::MiscProto::stReqActivityShop_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stActivityShopList_ProtoModID>() {
  return ::MiscProto::stActivityShopList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stActivityShopList_ProtoFunID>() {
  return ::MiscProto::stActivityShopList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLuchShopInfo_ProtoModID>() {
  return ::MiscProto::stLuchShopInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLuchShopInfo_ProtoFunID>() {
  return ::MiscProto::stLuchShopInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynLuckShopTodayRecharge_ProtoModID>() {
  return ::MiscProto::stSynLuckShopTodayRecharge_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSynLuckShopTodayRecharge_ProtoFunID>() {
  return ::MiscProto::stSynLuckShopTodayRecharge_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqLuckShopReward_ProtoModID>() {
  return ::MiscProto::stReqLuckShopReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqLuckShopReward_ProtoFunID>() {
  return ::MiscProto::stReqLuckShopReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLuckShopRewardResult_eResult>() {
  return ::MiscProto::stLuckShopRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLuckShopRewardResult_ProtoModID>() {
  return ::MiscProto::stLuckShopRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLuckShopRewardResult_ProtoFunID>() {
  return ::MiscProto::stLuckShopRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSaveOpenLuckShopWinTime_ProtoModID>() {
  return ::MiscProto::stSaveOpenLuckShopWinTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSaveOpenLuckShopWinTime_ProtoFunID>() {
  return ::MiscProto::stSaveOpenLuckShopWinTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLuckShopRechargeMeetCondTime_ProtoModID>() {
  return ::MiscProto::stLuckShopRechargeMeetCondTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLuckShopRechargeMeetCondTime_ProtoFunID>() {
  return ::MiscProto::stLuckShopRechargeMeetCondTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenGuardWin_ProtoModID>() {
  return ::MiscProto::stReqOpenGuardWin_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenGuardWin_ProtoFunID>() {
  return ::MiscProto::stReqOpenGuardWin_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGuardWinInfo_ProtoModID>() {
  return ::MiscProto::stGuardWinInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGuardWinInfo_ProtoFunID>() {
  return ::MiscProto::stGuardWinInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stResetInterceptCD_ProtoModID>() {
  return ::MiscProto::stResetInterceptCD_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stResetInterceptCD_ProtoFunID>() {
  return ::MiscProto::stResetInterceptCD_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stResetInterceptCDResult_eResult>() {
  return ::MiscProto::stResetInterceptCDResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stResetInterceptCDResult_ProtoModID>() {
  return ::MiscProto::stResetInterceptCDResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stResetInterceptCDResult_ProtoFunID>() {
  return ::MiscProto::stResetInterceptCDResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stResetInterceptNum_ProtoModID>() {
  return ::MiscProto::stResetInterceptNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stResetInterceptNum_ProtoFunID>() {
  return ::MiscProto::stResetInterceptNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stResetInterceptNumResult_eResult>() {
  return ::MiscProto::stResetInterceptNumResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stResetInterceptNumResult_ProtoModID>() {
  return ::MiscProto::stResetInterceptNumResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stResetInterceptNumResult_ProtoFunID>() {
  return ::MiscProto::stResetInterceptNumResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGuardDetailInfo_ProtoModID>() {
  return ::MiscProto::stReqGuardDetailInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGuardDetailInfo_ProtoFunID>() {
  return ::MiscProto::stReqGuardDetailInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetGuardDetailInfo_ProtoModID>() {
  return ::MiscProto::stRetGuardDetailInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetGuardDetailInfo_ProtoFunID>() {
  return ::MiscProto::stRetGuardDetailInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqIntercept_ProtoModID>() {
  return ::MiscProto::stReqIntercept_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqIntercept_ProtoFunID>() {
  return ::MiscProto::stReqIntercept_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stIntercerptResult_eResult>() {
  return ::MiscProto::stIntercerptResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stIntercerptResult_ProtoModID>() {
  return ::MiscProto::stIntercerptResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stIntercerptResult_ProtoFunID>() {
  return ::MiscProto::stIntercerptResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGuard_ProtoModID>() {
  return ::MiscProto::stReqGuard_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGuard_ProtoFunID>() {
  return ::MiscProto::stReqGuard_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetGuardWin_ProtoModID>() {
  return ::MiscProto::stRetGuardWin_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetGuardWin_ProtoFunID>() {
  return ::MiscProto::stRetGuardWin_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqSummonHighQualityGuard_ProtoModID>() {
  return ::MiscProto::stReqSummonHighQualityGuard_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqSummonHighQualityGuard_ProtoFunID>() {
  return ::MiscProto::stReqSummonHighQualityGuard_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSummonHighQualityGuardResult_eResult>() {
  return ::MiscProto::stSummonHighQualityGuardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSummonHighQualityGuardResult_ProtoModID>() {
  return ::MiscProto::stSummonHighQualityGuardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSummonHighQualityGuardResult_ProtoFunID>() {
  return ::MiscProto::stSummonHighQualityGuardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGuardInspired_ProtoModID>() {
  return ::MiscProto::stReqGuardInspired_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGuardInspired_ProtoFunID>() {
  return ::MiscProto::stReqGuardInspired_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGuardInspiredResult_eResult>() {
  return ::MiscProto::stGuardInspiredResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGuardInspiredResult_ProtoModID>() {
  return ::MiscProto::stGuardInspiredResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGuardInspiredResult_ProtoFunID>() {
  return ::MiscProto::stGuardInspiredResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRefreshGuardQuality_ProtoModID>() {
  return ::MiscProto::stReqRefreshGuardQuality_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRefreshGuardQuality_ProtoFunID>() {
  return ::MiscProto::stReqRefreshGuardQuality_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRefreshGuardQualityResult_eResult>() {
  return ::MiscProto::stRetRefreshGuardQualityResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRefreshGuardQualityResult_ProtoModID>() {
  return ::MiscProto::stRetRefreshGuardQualityResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRefreshGuardQualityResult_ProtoFunID>() {
  return ::MiscProto::stRetRefreshGuardQualityResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqCanHelpGuardFriend_ProtoModID>() {
  return ::MiscProto::stReqCanHelpGuardFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqCanHelpGuardFriend_ProtoFunID>() {
  return ::MiscProto::stReqCanHelpGuardFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetCanHelpGuardFriend_ProtoModID>() {
  return ::MiscProto::stRetCanHelpGuardFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetCanHelpGuardFriend_ProtoFunID>() {
  return ::MiscProto::stRetCanHelpGuardFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stInviteFriendForHelpGuard_ProtoModID>() {
  return ::MiscProto::stInviteFriendForHelpGuard_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stInviteFriendForHelpGuard_ProtoFunID>() {
  return ::MiscProto::stInviteFriendForHelpGuard_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stInviteFriendForHelpGuardResult_eResult>() {
  return ::MiscProto::stInviteFriendForHelpGuardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stInviteFriendForHelpGuardResult_ProtoModID>() {
  return ::MiscProto::stInviteFriendForHelpGuardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stInviteFriendForHelpGuardResult_ProtoFunID>() {
  return ::MiscProto::stInviteFriendForHelpGuardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAskFriendHelpGuard_ProtoModID>() {
  return ::MiscProto::stAskFriendHelpGuard_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAskFriendHelpGuard_ProtoFunID>() {
  return ::MiscProto::stAskFriendHelpGuard_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReplyHelpGuard_ProtoModID>() {
  return ::MiscProto::stReplyHelpGuard_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReplyHelpGuard_ProtoFunID>() {
  return ::MiscProto::stReplyHelpGuard_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReplyHelpGuardResult_eResult>() {
  return ::MiscProto::stReplyHelpGuardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReplyHelpGuardResult_ProtoModID>() {
  return ::MiscProto::stReplyHelpGuardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReplyHelpGuardResult_ProtoFunID>() {
  return ::MiscProto::stReplyHelpGuardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stUserAgreeHelpGuard_ProtoModID>() {
  return ::MiscProto::stUserAgreeHelpGuard_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stUserAgreeHelpGuard_ProtoFunID>() {
  return ::MiscProto::stUserAgreeHelpGuard_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBeginGuard_ProtoModID>() {
  return ::MiscProto::stBeginGuard_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBeginGuard_ProtoFunID>() {
  return ::MiscProto::stBeginGuard_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBeginGuardResult_eResult>() {
  return ::MiscProto::stBeginGuardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBeginGuardResult_ProtoModID>() {
  return ::MiscProto::stBeginGuardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBeginGuardResult_ProtoFunID>() {
  return ::MiscProto::stBeginGuardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqInterceptInfo_ProtoModID>() {
  return ::MiscProto::stReqInterceptInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqInterceptInfo_ProtoFunID>() {
  return ::MiscProto::stReqInterceptInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetInterceptInfo_ProtoModID>() {
  return ::MiscProto::stRetInterceptInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetInterceptInfo_ProtoFunID>() {
  return ::MiscProto::stRetInterceptInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyRechargeActivityInfo_ProtoModID>() {
  return ::MiscProto::stNotifyRechargeActivityInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyRechargeActivityInfo_ProtoFunID>() {
  return ::MiscProto::stNotifyRechargeActivityInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLuckShopRefreshResult_ProtoModID>() {
  return ::MiscProto::stLuckShopRefreshResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stLuckShopRefreshResult_ProtoFunID>() {
  return ::MiscProto::stLuckShopRefreshResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyGuardFinish_ProtoModID>() {
  return ::MiscProto::stNotifyGuardFinish_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyGuardFinish_ProtoFunID>() {
  return ::MiscProto::stNotifyGuardFinish_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyFriendGuardFinish_ProtoModID>() {
  return ::MiscProto::stNotifyFriendGuardFinish_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyFriendGuardFinish_ProtoFunID>() {
  return ::MiscProto::stNotifyFriendGuardFinish_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyInterceptResult_ProtoModID>() {
  return ::MiscProto::stNotifyInterceptResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyInterceptResult_ProtoFunID>() {
  return ::MiscProto::stNotifyInterceptResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReplyNotifyIntercept_ProtoModID>() {
  return ::MiscProto::stReplyNotifyIntercept_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReplyNotifyIntercept_ProtoFunID>() {
  return ::MiscProto::stReplyNotifyIntercept_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stQuickFinishGuard_ProtoModID>() {
  return ::MiscProto::stQuickFinishGuard_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stQuickFinishGuard_ProtoFunID>() {
  return ::MiscProto::stQuickFinishGuard_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stQuickFinishGuardResult_eResult>() {
  return ::MiscProto::stQuickFinishGuardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stQuickFinishGuardResult_ProtoModID>() {
  return ::MiscProto::stQuickFinishGuardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stQuickFinishGuardResult_ProtoFunID>() {
  return ::MiscProto::stQuickFinishGuardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyDelTitle_ProtoModID>() {
  return ::MiscProto::stNotifyDelTitle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyDelTitle_ProtoFunID>() {
  return ::MiscProto::stNotifyDelTitle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBeInterceptTip_ProtoModID>() {
  return ::MiscProto::stBeInterceptTip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBeInterceptTip_ProtoFunID>() {
  return ::MiscProto::stBeInterceptTip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stOnlineNotifyNewInterceptInfo_ProtoModID>() {
  return ::MiscProto::stOnlineNotifyNewInterceptInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stOnlineNotifyNewInterceptInfo_ProtoFunID>() {
  return ::MiscProto::stOnlineNotifyNewInterceptInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenLimitFashionDrawWin_ProtoModID>() {
  return ::MiscProto::stReqOpenLimitFashionDrawWin_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenLimitFashionDrawWin_ProtoFunID>() {
  return ::MiscProto::stReqOpenLimitFashionDrawWin_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetLimitFashionDrawWinInfo_ProtoModID>() {
  return ::MiscProto::stRetLimitFashionDrawWinInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetLimitFashionDrawWinInfo_ProtoFunID>() {
  return ::MiscProto::stRetLimitFashionDrawWinInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawLimitFashion_ProtoModID>() {
  return ::MiscProto::stReqDrawLimitFashion_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawLimitFashion_ProtoFunID>() {
  return ::MiscProto::stReqDrawLimitFashion_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawLimitFashionResult_eResult>() {
  return ::MiscProto::stDrawLimitFashionResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawLimitFashionResult_ProtoModID>() {
  return ::MiscProto::stDrawLimitFashionResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDrawLimitFashionResult_ProtoFunID>() {
  return ::MiscProto::stDrawLimitFashionResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetExchangeActivity_ProtoModID>() {
  return ::MiscProto::stRetExchangeActivity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetExchangeActivity_ProtoFunID>() {
  return ::MiscProto::stRetExchangeActivity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqExchangeItem_ProtoModID>() {
  return ::MiscProto::stReqExchangeItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqExchangeItem_ProtoFunID>() {
  return ::MiscProto::stReqExchangeItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stExchangeItemResult_eResult>() {
  return ::MiscProto::stExchangeItemResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stExchangeItemResult_ProtoModID>() {
  return ::MiscProto::stExchangeItemResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stExchangeItemResult_ProtoFunID>() {
  return ::MiscProto::stExchangeItemResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSendRecycleRechargeActivity_ProtoModID>() {
  return ::MiscProto::stSendRecycleRechargeActivity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSendRecycleRechargeActivity_ProtoFunID>() {
  return ::MiscProto::stSendRecycleRechargeActivity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRecycleRechargeActReward_ProtoModID>() {
  return ::MiscProto::stReqRecycleRechargeActReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRecycleRechargeActReward_ProtoFunID>() {
  return ::MiscProto::stReqRecycleRechargeActReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRecycleRechargeActReward_eResult>() {
  return ::MiscProto::stRetRecycleRechargeActReward_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRecycleRechargeActReward_ProtoModID>() {
  return ::MiscProto::stRetRecycleRechargeActReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetRecycleRechargeActReward_ProtoFunID>() {
  return ::MiscProto::stRetRecycleRechargeActReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRefreshCommonActInfo_ProtoModID>() {
  return ::MiscProto::stRefreshCommonActInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRefreshCommonActInfo_ProtoFunID>() {
  return ::MiscProto::stRefreshCommonActInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqAKeyFetchAttach_ProtoModID>() {
  return ::MiscProto::stReqAKeyFetchAttach_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqAKeyFetchAttach_ProtoFunID>() {
  return ::MiscProto::stReqAKeyFetchAttach_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAKeyFetchAttachResult_Result>() {
  return ::MiscProto::stAKeyFetchAttachResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAKeyFetchAttachResult_ProtoModID>() {
  return ::MiscProto::stAKeyFetchAttachResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAKeyFetchAttachResult_ProtoFunID>() {
  return ::MiscProto::stAKeyFetchAttachResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGloryfashion_ProtoModID>() {
  return ::MiscProto::stReqGloryfashion_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGloryfashion_ProtoFunID>() {
  return ::MiscProto::stReqGloryfashion_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGloryfashionResult_eResult>() {
  return ::MiscProto::stGloryfashionResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGloryfashionResult_ProtoModID>() {
  return ::MiscProto::stGloryfashionResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGloryfashionResult_ProtoFunID>() {
  return ::MiscProto::stGloryfashionResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stDevilCallItem_eRewardStatus>() {
  return ::MiscProto::stDevilCallItem_eRewardStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqAllDevilCall_ProtoModID>() {
  return ::MiscProto::stReqAllDevilCall_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqAllDevilCall_ProtoFunID>() {
  return ::MiscProto::stReqAllDevilCall_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetAllDevilCall_eResult>() {
  return ::MiscProto::stRetAllDevilCall_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetAllDevilCall_ProtoModID>() {
  return ::MiscProto::stRetAllDevilCall_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetAllDevilCall_ProtoFunID>() {
  return ::MiscProto::stRetAllDevilCall_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDevilCallReward_eType>() {
  return ::MiscProto::stReqDevilCallReward_eType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDevilCallReward_ProtoModID>() {
  return ::MiscProto::stReqDevilCallReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDevilCallReward_ProtoFunID>() {
  return ::MiscProto::stReqDevilCallReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDevilCallReward_eType>() {
  return ::MiscProto::stRetDevilCallReward_eType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDevilCallReward_eResult>() {
  return ::MiscProto::stRetDevilCallReward_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDevilCallReward_ProtoModID>() {
  return ::MiscProto::stRetDevilCallReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDevilCallReward_ProtoFunID>() {
  return ::MiscProto::stRetDevilCallReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDevilCall_ProtoModID>() {
  return ::MiscProto::stReqDevilCall_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDevilCall_ProtoFunID>() {
  return ::MiscProto::stReqDevilCall_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDevilCall_eResult>() {
  return ::MiscProto::stRetDevilCall_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDevilCall_ProtoModID>() {
  return ::MiscProto::stRetDevilCall_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDevilCall_ProtoFunID>() {
  return ::MiscProto::stRetDevilCall_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDevilCallSummary_ProtoModID>() {
  return ::MiscProto::stReqDevilCallSummary_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDevilCallSummary_ProtoFunID>() {
  return ::MiscProto::stReqDevilCallSummary_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDevilCallSummary_ProtoModID>() {
  return ::MiscProto::stRetDevilCallSummary_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDevilCallSummary_ProtoFunID>() {
  return ::MiscProto::stRetDevilCallSummary_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqPayType_ProtoModID>() {
  return ::MiscProto::stReqPayType_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqPayType_ProtoFunID>() {
  return ::MiscProto::stReqPayType_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetPayType_eResult>() {
  return ::MiscProto::stRetPayType_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetPayType_ProtoModID>() {
  return ::MiscProto::stRetPayType_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetPayType_ProtoFunID>() {
  return ::MiscProto::stRetPayType_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOperateActvity_ProtoModID>() {
  return ::MiscProto::stReqOperateActvity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOperateActvity_ProtoFunID>() {
  return ::MiscProto::stReqOperateActvity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetOperateActvity_ProtoModID>() {
  return ::MiscProto::stRetOperateActvity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetOperateActvity_ProtoFunID>() {
  return ::MiscProto::stRetOperateActvity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOperateActvityReward_ProtoModID>() {
  return ::MiscProto::stReqOperateActvityReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOperateActvityReward_ProtoFunID>() {
  return ::MiscProto::stReqOperateActvityReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetOperateActvityReward_Result>() {
  return ::MiscProto::stRetOperateActvityReward_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetOperateActvityReward_ProtoModID>() {
  return ::MiscProto::stRetOperateActvityReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetOperateActvityReward_ProtoFunID>() {
  return ::MiscProto::stRetOperateActvityReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqIllusionSprite_ProtoModID>() {
  return ::MiscProto::stReqIllusionSprite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqIllusionSprite_ProtoFunID>() {
  return ::MiscProto::stReqIllusionSprite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetIllusionSprite_eResult>() {
  return ::MiscProto::stRetIllusionSprite_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetIllusionSprite_ProtoModID>() {
  return ::MiscProto::stRetIllusionSprite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetIllusionSprite_ProtoFunID>() {
  return ::MiscProto::stRetIllusionSprite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqIllusionSpriteEat_ProtoModID>() {
  return ::MiscProto::stReqIllusionSpriteEat_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqIllusionSpriteEat_ProtoFunID>() {
  return ::MiscProto::stReqIllusionSpriteEat_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetIllusionSpriteEat_eResult>() {
  return ::MiscProto::stRetIllusionSpriteEat_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetIllusionSpriteEat_ProtoModID>() {
  return ::MiscProto::stRetIllusionSpriteEat_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetIllusionSpriteEat_ProtoFunID>() {
  return ::MiscProto::stRetIllusionSpriteEat_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqIllusionSpriteSkillUp_ProtoModID>() {
  return ::MiscProto::stReqIllusionSpriteSkillUp_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqIllusionSpriteSkillUp_ProtoFunID>() {
  return ::MiscProto::stReqIllusionSpriteSkillUp_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetIllusionSpriteSkillUp_eResult>() {
  return ::MiscProto::stRetIllusionSpriteSkillUp_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetIllusionSpriteSkillUp_ProtoModID>() {
  return ::MiscProto::stRetIllusionSpriteSkillUp_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetIllusionSpriteSkillUp_ProtoFunID>() {
  return ::MiscProto::stRetIllusionSpriteSkillUp_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRepOpenDiscoverWindow_ProtoModID>() {
  return ::MiscProto::stRepOpenDiscoverWindow_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRepOpenDiscoverWindow_ProtoFunID>() {
  return ::MiscProto::stRepOpenDiscoverWindow_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stOpenDiscoverWindowResult_ProtoModID>() {
  return ::MiscProto::stOpenDiscoverWindowResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stOpenDiscoverWindowResult_ProtoFunID>() {
  return ::MiscProto::stOpenDiscoverWindowResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqPlayDice_ProtoModID>() {
  return ::MiscProto::stReqPlayDice_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqPlayDice_ProtoFunID>() {
  return ::MiscProto::stReqPlayDice_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stPlayDiceResult_eResult>() {
  return ::MiscProto::stPlayDiceResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stPlayDiceResult_ProtoModID>() {
  return ::MiscProto::stPlayDiceResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stPlayDiceResult_ProtoFunID>() {
  return ::MiscProto::stPlayDiceResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGetOrGiveUpTask_ProtoModID>() {
  return ::MiscProto::stReqGetOrGiveUpTask_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGetOrGiveUpTask_ProtoFunID>() {
  return ::MiscProto::stReqGetOrGiveUpTask_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetTaskResult_eResult>() {
  return ::MiscProto::stGetTaskResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetTaskResult_ProtoModID>() {
  return ::MiscProto::stGetTaskResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetTaskResult_ProtoFunID>() {
  return ::MiscProto::stGetTaskResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGiveUpTaskResult_eResult>() {
  return ::MiscProto::stGiveUpTaskResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGiveUpTaskResult_ProtoModID>() {
  return ::MiscProto::stGiveUpTaskResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGiveUpTaskResult_ProtoFunID>() {
  return ::MiscProto::stGiveUpTaskResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRefreshNum_ProtoModID>() {
  return ::MiscProto::stReqRefreshNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRefreshNum_ProtoFunID>() {
  return ::MiscProto::stReqRefreshNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRefreshNumResult_eResult>() {
  return ::MiscProto::stRefreshNumResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRefreshNumResult_ProtoModID>() {
  return ::MiscProto::stRefreshNumResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRefreshNumResult_ProtoFunID>() {
  return ::MiscProto::stRefreshNumResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGetIntegralReward_ProtoModID>() {
  return ::MiscProto::stReqGetIntegralReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGetIntegralReward_ProtoFunID>() {
  return ::MiscProto::stReqGetIntegralReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetIntegralRewardResult_eResult>() {
  return ::MiscProto::stGetIntegralRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetIntegralRewardResult_ProtoModID>() {
  return ::MiscProto::stGetIntegralRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGetIntegralRewardResult_ProtoFunID>() {
  return ::MiscProto::stGetIntegralRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGiveReward_ProtoModID>() {
  return ::MiscProto::stReqGiveReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqGiveReward_ProtoFunID>() {
  return ::MiscProto::stReqGiveReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGiveRewardResult_eResult>() {
  return ::MiscProto::stGiveRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGiveRewardResult_ProtoModID>() {
  return ::MiscProto::stGiveRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stGiveRewardResult_ProtoFunID>() {
  return ::MiscProto::stGiveRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqLuckyDraw_ProtoModID>() {
  return ::MiscProto::stReqLuckyDraw_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqLuckyDraw_ProtoFunID>() {
  return ::MiscProto::stReqLuckyDraw_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetLuckyDraw_ProtoModID>() {
  return ::MiscProto::stRetLuckyDraw_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetLuckyDraw_ProtoFunID>() {
  return ::MiscProto::stRetLuckyDraw_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqLuckyDrawReward_ProtoModID>() {
  return ::MiscProto::stReqLuckyDrawReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqLuckyDrawReward_ProtoFunID>() {
  return ::MiscProto::stReqLuckyDrawReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetLuckyDrawReward_eResult>() {
  return ::MiscProto::stRetLuckyDrawReward_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetLuckyDrawReward_ProtoModID>() {
  return ::MiscProto::stRetLuckyDrawReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetLuckyDrawReward_ProtoFunID>() {
  return ::MiscProto::stRetLuckyDrawReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqLuckyDrawPointReward_ProtoModID>() {
  return ::MiscProto::stReqLuckyDrawPointReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqLuckyDrawPointReward_ProtoFunID>() {
  return ::MiscProto::stReqLuckyDrawPointReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetLuckyDrawPointReward_eResult>() {
  return ::MiscProto::stRetLuckyDrawPointReward_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetLuckyDrawPointReward_ProtoModID>() {
  return ::MiscProto::stRetLuckyDrawPointReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetLuckyDrawPointReward_ProtoFunID>() {
  return ::MiscProto::stRetLuckyDrawPointReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRedPointRuls_ProtoModID>() {
  return ::MiscProto::stReqRedPointRuls_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRedPointRuls_ProtoFunID>() {
  return ::MiscProto::stReqRedPointRuls_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRedPointRulsResult_ProtoModID>() {
  return ::MiscProto::stRedPointRulsResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRedPointRulsResult_ProtoFunID>() {
  return ::MiscProto::stRedPointRulsResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqInviteFriend_ProtoModID>() {
  return ::MiscProto::stReqInviteFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqInviteFriend_ProtoFunID>() {
  return ::MiscProto::stReqInviteFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetInviteFriend_ProtoModID>() {
  return ::MiscProto::stRetInviteFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetInviteFriend_ProtoFunID>() {
  return ::MiscProto::stRetInviteFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawInviteFriend_ProtoModID>() {
  return ::MiscProto::stReqDrawInviteFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawInviteFriend_ProtoFunID>() {
  return ::MiscProto::stReqDrawInviteFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawInviteFriend_eResult>() {
  return ::MiscProto::stRetDrawInviteFriend_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawInviteFriend_ProtoModID>() {
  return ::MiscProto::stRetDrawInviteFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawInviteFriend_ProtoFunID>() {
  return ::MiscProto::stRetDrawInviteFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqUseInviteCode_ProtoModID>() {
  return ::MiscProto::stReqUseInviteCode_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqUseInviteCode_ProtoFunID>() {
  return ::MiscProto::stReqUseInviteCode_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetUseInviteCode_eResult>() {
  return ::MiscProto::stRetUseInviteCode_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetUseInviteCode_ProtoModID>() {
  return ::MiscProto::stRetUseInviteCode_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetUseInviteCode_ProtoFunID>() {
  return ::MiscProto::stRetUseInviteCode_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqShareInvite_ProtoModID>() {
  return ::MiscProto::stReqShareInvite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqShareInvite_ProtoFunID>() {
  return ::MiscProto::stReqShareInvite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetShareInvite_ProtoModID>() {
  return ::MiscProto::stRetShareInvite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetShareInvite_ProtoFunID>() {
  return ::MiscProto::stRetShareInvite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDailyShareInvite_ProtoModID>() {
  return ::MiscProto::stReqDailyShareInvite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDailyShareInvite_ProtoFunID>() {
  return ::MiscProto::stReqDailyShareInvite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDailyShareInvite_ProtoModID>() {
  return ::MiscProto::stRetDailyShareInvite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDailyShareInvite_ProtoFunID>() {
  return ::MiscProto::stRetDailyShareInvite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawDailyShareReward_ProtoModID>() {
  return ::MiscProto::stReqDrawDailyShareReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawDailyShareReward_ProtoFunID>() {
  return ::MiscProto::stReqDrawDailyShareReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawDailyShareReward_eResult>() {
  return ::MiscProto::stRetDrawDailyShareReward_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawDailyShareReward_ProtoModID>() {
  return ::MiscProto::stRetDrawDailyShareReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawDailyShareReward_ProtoFunID>() {
  return ::MiscProto::stRetDrawDailyShareReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawOnceShareReward_ProtoModID>() {
  return ::MiscProto::stReqDrawOnceShareReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawOnceShareReward_ProtoFunID>() {
  return ::MiscProto::stReqDrawOnceShareReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawOnceShareReward_eResult>() {
  return ::MiscProto::stRetDrawOnceShareReward_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawOnceShareReward_ProtoModID>() {
  return ::MiscProto::stRetDrawOnceShareReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawOnceShareReward_ProtoFunID>() {
  return ::MiscProto::stRetDrawOnceShareReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyInterceptServerResult_eResult>() {
  return ::MiscProto::stNotifyInterceptServerResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyInterceptServerResult_ProtoModID>() {
  return ::MiscProto::stNotifyInterceptServerResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stNotifyInterceptServerResult_ProtoFunID>() {
  return ::MiscProto::stNotifyInterceptServerResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqReceiveState_ProtoModID>() {
  return ::MiscProto::stReqReceiveState_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqReceiveState_ProtoFunID>() {
  return ::MiscProto::stReqReceiveState_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReceiveStateResult_ProtoModID>() {
  return ::MiscProto::stReceiveStateResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReceiveStateResult_ProtoFunID>() {
  return ::MiscProto::stReceiveStateResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqReceiveReward_ProtoModID>() {
  return ::MiscProto::stReqReceiveReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqReceiveReward_ProtoFunID>() {
  return ::MiscProto::stReqReceiveReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReceiveRewardResult_eResult>() {
  return ::MiscProto::stReceiveRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReceiveRewardResult_ProtoModID>() {
  return ::MiscProto::stReceiveRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReceiveRewardResult_ProtoFunID>() {
  return ::MiscProto::stReceiveRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSendAllAcitivityLimitPet_ProtoModID>() {
  return ::MiscProto::stSendAllAcitivityLimitPet_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSendAllAcitivityLimitPet_ProtoFunID>() {
  return ::MiscProto::stSendAllAcitivityLimitPet_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSendLateWalfareActivity_ProtoModID>() {
  return ::MiscProto::stSendLateWalfareActivity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSendLateWalfareActivity_ProtoFunID>() {
  return ::MiscProto::stSendLateWalfareActivity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawLateWalfare_ProtoModID>() {
  return ::MiscProto::stReqDrawLateWalfare_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawLateWalfare_ProtoFunID>() {
  return ::MiscProto::stReqDrawLateWalfare_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawLateWalfare_eResult>() {
  return ::MiscProto::stRetDrawLateWalfare_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawLateWalfare_ProtoModID>() {
  return ::MiscProto::stRetDrawLateWalfare_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawLateWalfare_ProtoFunID>() {
  return ::MiscProto::stRetDrawLateWalfare_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSendAllResGetBack_ProtoModID>() {
  return ::MiscProto::stSendAllResGetBack_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSendAllResGetBack_ProtoFunID>() {
  return ::MiscProto::stSendAllResGetBack_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawResGetBack_ProtoModID>() {
  return ::MiscProto::stReqDrawResGetBack_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawResGetBack_ProtoFunID>() {
  return ::MiscProto::stReqDrawResGetBack_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawResGetBack_eResult>() {
  return ::MiscProto::stRetDrawResGetBack_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawResGetBack_ProtoModID>() {
  return ::MiscProto::stRetDrawResGetBack_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawResGetBack_ProtoFunID>() {
  return ::MiscProto::stRetDrawResGetBack_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawAllResGetBack_ProtoModID>() {
  return ::MiscProto::stReqDrawAllResGetBack_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqDrawAllResGetBack_ProtoFunID>() {
  return ::MiscProto::stReqDrawAllResGetBack_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawAllResGetBack_eResult>() {
  return ::MiscProto::stRetDrawAllResGetBack_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawAllResGetBack_ProtoModID>() {
  return ::MiscProto::stRetDrawAllResGetBack_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetDrawAllResGetBack_ProtoFunID>() {
  return ::MiscProto::stRetDrawAllResGetBack_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenMonsterWindow_ProtoModID>() {
  return ::MiscProto::stReqOpenMonsterWindow_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenMonsterWindow_ProtoFunID>() {
  return ::MiscProto::stReqOpenMonsterWindow_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stOpenMonsterWindowResult_ProtoModID>() {
  return ::MiscProto::stOpenMonsterWindowResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stOpenMonsterWindowResult_ProtoFunID>() {
  return ::MiscProto::stOpenMonsterWindowResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqAttackMonster_ProtoModID>() {
  return ::MiscProto::stReqAttackMonster_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqAttackMonster_ProtoFunID>() {
  return ::MiscProto::stReqAttackMonster_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAttackMonsterResult_eResult>() {
  return ::MiscProto::stAttackMonsterResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAttackMonsterResult_ProtoModID>() {
  return ::MiscProto::stAttackMonsterResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAttackMonsterResult_ProtoFunID>() {
  return ::MiscProto::stAttackMonsterResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqBuyAttackTime_ProtoModID>() {
  return ::MiscProto::stReqBuyAttackTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqBuyAttackTime_ProtoFunID>() {
  return ::MiscProto::stReqBuyAttackTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyAttackTimeResult_eResult>() {
  return ::MiscProto::stBuyAttackTimeResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyAttackTimeResult_ProtoModID>() {
  return ::MiscProto::stBuyAttackTimeResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuyAttackTimeResult_ProtoFunID>() {
  return ::MiscProto::stBuyAttackTimeResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqAKeyAttackMonster_ProtoModID>() {
  return ::MiscProto::stReqAKeyAttackMonster_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqAKeyAttackMonster_ProtoFunID>() {
  return ::MiscProto::stReqAKeyAttackMonster_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAKeyAttackMonsterResult_eResult>() {
  return ::MiscProto::stAKeyAttackMonsterResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAKeyAttackMonsterResult_ProtoModID>() {
  return ::MiscProto::stAKeyAttackMonsterResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stAKeyAttackMonsterResult_ProtoFunID>() {
  return ::MiscProto::stAKeyAttackMonsterResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stObtainItemTip_ProtoModID>() {
  return ::MiscProto::stObtainItemTip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stObtainItemTip_ProtoFunID>() {
  return ::MiscProto::stObtainItemTip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stUserOnline_ProtoModID>() {
  return ::MiscProto::stUserOnline_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stUserOnline_ProtoFunID>() {
  return ::MiscProto::stUserOnline_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqMountLevelUp_ProtoModID>() {
  return ::MiscProto::stReqMountLevelUp_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqMountLevelUp_ProtoFunID>() {
  return ::MiscProto::stReqMountLevelUp_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stMountLevelUpResult_eResult>() {
  return ::MiscProto::stMountLevelUpResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stMountLevelUpResult_ProtoModID>() {
  return ::MiscProto::stMountLevelUpResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stMountLevelUpResult_ProtoFunID>() {
  return ::MiscProto::stMountLevelUpResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqButtleMount_ProtoModID>() {
  return ::MiscProto::stReqButtleMount_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqButtleMount_ProtoFunID>() {
  return ::MiscProto::stReqButtleMount_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stButtleMountResult_eResult>() {
  return ::MiscProto::stButtleMountResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stButtleMountResult_ProtoModID>() {
  return ::MiscProto::stButtleMountResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stButtleMountResult_ProtoFunID>() {
  return ::MiscProto::stButtleMountResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqMountFollow_ProtoModID>() {
  return ::MiscProto::stReqMountFollow_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqMountFollow_ProtoFunID>() {
  return ::MiscProto::stReqMountFollow_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stMountFollowResult_eResult>() {
  return ::MiscProto::stMountFollowResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stMountFollowResult_ProtoModID>() {
  return ::MiscProto::stMountFollowResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stMountFollowResult_ProtoFunID>() {
  return ::MiscProto::stMountFollowResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqMountUnreal_ProtoModID>() {
  return ::MiscProto::stReqMountUnreal_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqMountUnreal_ProtoFunID>() {
  return ::MiscProto::stReqMountUnreal_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stMountUnrealResult_eResult>() {
  return ::MiscProto::stMountUnrealResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stMountUnrealResult_ProtoModID>() {
  return ::MiscProto::stMountUnrealResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stMountUnrealResult_ProtoFunID>() {
  return ::MiscProto::stMountUnrealResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenMountGrowWindow_ProtoModID>() {
  return ::MiscProto::stReqOpenMountGrowWindow_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqOpenMountGrowWindow_ProtoFunID>() {
  return ::MiscProto::stReqOpenMountGrowWindow_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stOpenMountGrowWindowResult_ProtoModID>() {
  return ::MiscProto::stOpenMountGrowWindowResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stOpenMountGrowWindowResult_ProtoFunID>() {
  return ::MiscProto::stOpenMountGrowWindowResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRefreshBattle_ProtoModID>() {
  return ::MiscProto::stRefreshBattle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRefreshBattle_ProtoFunID>() {
  return ::MiscProto::stRefreshBattle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stHasGotRewardWflfareInfo_ProtoModID>() {
  return ::MiscProto::stHasGotRewardWflfareInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stHasGotRewardWflfareInfo_ProtoFunID>() {
  return ::MiscProto::stHasGotRewardWflfareInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqReceiveWflfare_ProtoModID>() {
  return ::MiscProto::stReqReceiveWflfare_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqReceiveWflfare_ProtoFunID>() {
  return ::MiscProto::stReqReceiveWflfare_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReceiveWflfareResult_eResult>() {
  return ::MiscProto::stReceiveWflfareResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReceiveWflfareResult_ProtoModID>() {
  return ::MiscProto::stReceiveWflfareResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReceiveWflfareResult_ProtoFunID>() {
  return ::MiscProto::stReceiveWflfareResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqPaySign_ProtoModID>() {
  return ::MiscProto::stReqPaySign_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqPaySign_ProtoFunID>() {
  return ::MiscProto::stReqPaySign_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetPaySign_ProtoModID>() {
  return ::MiscProto::stRetPaySign_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetPaySign_ProtoFunID>() {
  return ::MiscProto::stRetPaySign_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqServerPay_ProtoModID>() {
  return ::MiscProto::stReqServerPay_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqServerPay_ProtoFunID>() {
  return ::MiscProto::stReqServerPay_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetServerPay_eResult>() {
  return ::MiscProto::stRetServerPay_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetServerPay_ProtoModID>() {
  return ::MiscProto::stRetServerPay_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRetServerPay_ProtoFunID>() {
  return ::MiscProto::stRetServerPay_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqSummonReward_ProtoModID>() {
  return ::MiscProto::stReqSummonReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqSummonReward_ProtoFunID>() {
  return ::MiscProto::stReqSummonReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSummonRewardResult_eResult>() {
  return ::MiscProto::stSummonRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSummonRewardResult_ProtoModID>() {
  return ::MiscProto::stSummonRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSummonRewardResult_ProtoFunID>() {
  return ::MiscProto::stSummonRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqSummonData_ProtoModID>() {
  return ::MiscProto::stReqSummonData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqSummonData_ProtoFunID>() {
  return ::MiscProto::stReqSummonData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSummonDataResult_ProtoModID>() {
  return ::MiscProto::stSummonDataResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stSummonDataResult_ProtoFunID>() {
  return ::MiscProto::stSummonDataResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuySummonPlanResult_eResult>() {
  return ::MiscProto::stBuySummonPlanResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuySummonPlanResult_ProtoModID>() {
  return ::MiscProto::stBuySummonPlanResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stBuySummonPlanResult_ProtoFunID>() {
  return ::MiscProto::stBuySummonPlanResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRechargeCheck_ProtoModID>() {
  return ::MiscProto::stReqRechargeCheck_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stReqRechargeCheck_ProtoFunID>() {
  return ::MiscProto::stReqRechargeCheck_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRechargeCheckResult_eResult>() {
  return ::MiscProto::stRechargeCheckResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRechargeCheckResult_ProtoModID>() {
  return ::MiscProto::stRechargeCheckResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::stRechargeCheckResult_ProtoFunID>() {
  return ::MiscProto::stRechargeCheckResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::eAttachStatus>() {
  return ::MiscProto::eAttachStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::eMailType>() {
  return ::MiscProto::eMailType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::eDrawType>() {
  return ::MiscProto::eDrawType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::eTreasureType>() {
  return ::MiscProto::eTreasureType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::eCombineItem>() {
  return ::MiscProto::eCombineItem_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::eCaptureType>() {
  return ::MiscProto::eCaptureType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::eActivityType>() {
  return ::MiscProto::eActivityType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::eSevenDayGoalType>() {
  return ::MiscProto::eSevenDayGoalType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::eSevenDayGoal>() {
  return ::MiscProto::eSevenDayGoal_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiscProto::eLevelUpType>() {
  return ::MiscProto::eLevelUpType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Misc_2eproto__INCLUDED
