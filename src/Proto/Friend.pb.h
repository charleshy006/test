// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Friend.proto

#ifndef PROTOBUF_Friend_2eproto__INCLUDED
#define PROTOBUF_Friend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ModID.pb.h"
// @@protoc_insertion_point(includes)

namespace FriendProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Friend_2eproto();
void protobuf_AssignDesc_Friend_2eproto();
void protobuf_ShutdownFile_Friend_2eproto();

class stSynFriendInfo;
class stSynAllFriend;
class stReqAddOneFriend;
class stNotifyAddOneFriend;
class stAddFriendTip;
class stDelFriend;
class stFindAndAddFriend;
class stFindAndAddFriendResult;
class stReqApplyAddFriendList;
class stSynApplyerInfo;
class stRetApplyAddFriendList;
class stNotifyFriend;
class stSynRecommondChar;
class stReqRecommondFriend;
class stRecommondFriendList;
class stGiveLilian2Friend;
class stGiveLilianResult;
class stReqReceiveLilian;
class stReceiveLilianList;
class stFetchLilian;
class stFetchLilianResult;
class stReqAdd2ApplyList;
class stAdd2ApplyListResult;
class stRefuseAddFriend;
class stInvitePKWithFriend;
class stAskAgreePKWithFriend;
class stReplyFriendPKInvite;
class stInvitePKResult;
class stReplyFriendPKInviteResult;
class stSomeOneApplyAddFriend;
class MarryObjInfo;
class stReqPropose;
class RejectMarry;
class ProposeResult;
class stReqAgreeMarry;
class stReqCancelMarry;
class NotifyCancelMarry;
class NotifyAgree;

enum stSynAllFriend_ProtoModID {
  stSynAllFriend_ProtoModID_ModID = 5
};
bool stSynAllFriend_ProtoModID_IsValid(int value);
const stSynAllFriend_ProtoModID stSynAllFriend_ProtoModID_ProtoModID_MIN = stSynAllFriend_ProtoModID_ModID;
const stSynAllFriend_ProtoModID stSynAllFriend_ProtoModID_ProtoModID_MAX = stSynAllFriend_ProtoModID_ModID;
const int stSynAllFriend_ProtoModID_ProtoModID_ARRAYSIZE = stSynAllFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAllFriend_ProtoModID_descriptor();
inline const ::std::string& stSynAllFriend_ProtoModID_Name(stSynAllFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAllFriend_ProtoModID_descriptor(), value);
}
inline bool stSynAllFriend_ProtoModID_Parse(
    const ::std::string& name, stSynAllFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAllFriend_ProtoModID>(
    stSynAllFriend_ProtoModID_descriptor(), name, value);
}
enum stSynAllFriend_ProtoFunID {
  stSynAllFriend_ProtoFunID_FunID = 1
};
bool stSynAllFriend_ProtoFunID_IsValid(int value);
const stSynAllFriend_ProtoFunID stSynAllFriend_ProtoFunID_ProtoFunID_MIN = stSynAllFriend_ProtoFunID_FunID;
const stSynAllFriend_ProtoFunID stSynAllFriend_ProtoFunID_ProtoFunID_MAX = stSynAllFriend_ProtoFunID_FunID;
const int stSynAllFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynAllFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAllFriend_ProtoFunID_descriptor();
inline const ::std::string& stSynAllFriend_ProtoFunID_Name(stSynAllFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAllFriend_ProtoFunID_descriptor(), value);
}
inline bool stSynAllFriend_ProtoFunID_Parse(
    const ::std::string& name, stSynAllFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAllFriend_ProtoFunID>(
    stSynAllFriend_ProtoFunID_descriptor(), name, value);
}
enum stReqAddOneFriend_ProtoModID {
  stReqAddOneFriend_ProtoModID_ModID = 5
};
bool stReqAddOneFriend_ProtoModID_IsValid(int value);
const stReqAddOneFriend_ProtoModID stReqAddOneFriend_ProtoModID_ProtoModID_MIN = stReqAddOneFriend_ProtoModID_ModID;
const stReqAddOneFriend_ProtoModID stReqAddOneFriend_ProtoModID_ProtoModID_MAX = stReqAddOneFriend_ProtoModID_ModID;
const int stReqAddOneFriend_ProtoModID_ProtoModID_ARRAYSIZE = stReqAddOneFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAddOneFriend_ProtoModID_descriptor();
inline const ::std::string& stReqAddOneFriend_ProtoModID_Name(stReqAddOneFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAddOneFriend_ProtoModID_descriptor(), value);
}
inline bool stReqAddOneFriend_ProtoModID_Parse(
    const ::std::string& name, stReqAddOneFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAddOneFriend_ProtoModID>(
    stReqAddOneFriend_ProtoModID_descriptor(), name, value);
}
enum stReqAddOneFriend_ProtoFunID {
  stReqAddOneFriend_ProtoFunID_FunID = 2
};
bool stReqAddOneFriend_ProtoFunID_IsValid(int value);
const stReqAddOneFriend_ProtoFunID stReqAddOneFriend_ProtoFunID_ProtoFunID_MIN = stReqAddOneFriend_ProtoFunID_FunID;
const stReqAddOneFriend_ProtoFunID stReqAddOneFriend_ProtoFunID_ProtoFunID_MAX = stReqAddOneFriend_ProtoFunID_FunID;
const int stReqAddOneFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAddOneFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAddOneFriend_ProtoFunID_descriptor();
inline const ::std::string& stReqAddOneFriend_ProtoFunID_Name(stReqAddOneFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAddOneFriend_ProtoFunID_descriptor(), value);
}
inline bool stReqAddOneFriend_ProtoFunID_Parse(
    const ::std::string& name, stReqAddOneFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAddOneFriend_ProtoFunID>(
    stReqAddOneFriend_ProtoFunID_descriptor(), name, value);
}
enum stNotifyAddOneFriend_ProtoModID {
  stNotifyAddOneFriend_ProtoModID_ModID = 5
};
bool stNotifyAddOneFriend_ProtoModID_IsValid(int value);
const stNotifyAddOneFriend_ProtoModID stNotifyAddOneFriend_ProtoModID_ProtoModID_MIN = stNotifyAddOneFriend_ProtoModID_ModID;
const stNotifyAddOneFriend_ProtoModID stNotifyAddOneFriend_ProtoModID_ProtoModID_MAX = stNotifyAddOneFriend_ProtoModID_ModID;
const int stNotifyAddOneFriend_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyAddOneFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyAddOneFriend_ProtoModID_descriptor();
inline const ::std::string& stNotifyAddOneFriend_ProtoModID_Name(stNotifyAddOneFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyAddOneFriend_ProtoModID_descriptor(), value);
}
inline bool stNotifyAddOneFriend_ProtoModID_Parse(
    const ::std::string& name, stNotifyAddOneFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyAddOneFriend_ProtoModID>(
    stNotifyAddOneFriend_ProtoModID_descriptor(), name, value);
}
enum stNotifyAddOneFriend_ProtoFunID {
  stNotifyAddOneFriend_ProtoFunID_FunID = 3
};
bool stNotifyAddOneFriend_ProtoFunID_IsValid(int value);
const stNotifyAddOneFriend_ProtoFunID stNotifyAddOneFriend_ProtoFunID_ProtoFunID_MIN = stNotifyAddOneFriend_ProtoFunID_FunID;
const stNotifyAddOneFriend_ProtoFunID stNotifyAddOneFriend_ProtoFunID_ProtoFunID_MAX = stNotifyAddOneFriend_ProtoFunID_FunID;
const int stNotifyAddOneFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyAddOneFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyAddOneFriend_ProtoFunID_descriptor();
inline const ::std::string& stNotifyAddOneFriend_ProtoFunID_Name(stNotifyAddOneFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyAddOneFriend_ProtoFunID_descriptor(), value);
}
inline bool stNotifyAddOneFriend_ProtoFunID_Parse(
    const ::std::string& name, stNotifyAddOneFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyAddOneFriend_ProtoFunID>(
    stNotifyAddOneFriend_ProtoFunID_descriptor(), name, value);
}
enum stAddFriendTip_ProtoModID {
  stAddFriendTip_ProtoModID_ModID = 5
};
bool stAddFriendTip_ProtoModID_IsValid(int value);
const stAddFriendTip_ProtoModID stAddFriendTip_ProtoModID_ProtoModID_MIN = stAddFriendTip_ProtoModID_ModID;
const stAddFriendTip_ProtoModID stAddFriendTip_ProtoModID_ProtoModID_MAX = stAddFriendTip_ProtoModID_ModID;
const int stAddFriendTip_ProtoModID_ProtoModID_ARRAYSIZE = stAddFriendTip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddFriendTip_ProtoModID_descriptor();
inline const ::std::string& stAddFriendTip_ProtoModID_Name(stAddFriendTip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddFriendTip_ProtoModID_descriptor(), value);
}
inline bool stAddFriendTip_ProtoModID_Parse(
    const ::std::string& name, stAddFriendTip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddFriendTip_ProtoModID>(
    stAddFriendTip_ProtoModID_descriptor(), name, value);
}
enum stAddFriendTip_ProtoFunID {
  stAddFriendTip_ProtoFunID_FunID = 4
};
bool stAddFriendTip_ProtoFunID_IsValid(int value);
const stAddFriendTip_ProtoFunID stAddFriendTip_ProtoFunID_ProtoFunID_MIN = stAddFriendTip_ProtoFunID_FunID;
const stAddFriendTip_ProtoFunID stAddFriendTip_ProtoFunID_ProtoFunID_MAX = stAddFriendTip_ProtoFunID_FunID;
const int stAddFriendTip_ProtoFunID_ProtoFunID_ARRAYSIZE = stAddFriendTip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddFriendTip_ProtoFunID_descriptor();
inline const ::std::string& stAddFriendTip_ProtoFunID_Name(stAddFriendTip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddFriendTip_ProtoFunID_descriptor(), value);
}
inline bool stAddFriendTip_ProtoFunID_Parse(
    const ::std::string& name, stAddFriendTip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddFriendTip_ProtoFunID>(
    stAddFriendTip_ProtoFunID_descriptor(), name, value);
}
enum stDelFriend_ProtoModID {
  stDelFriend_ProtoModID_ModID = 5
};
bool stDelFriend_ProtoModID_IsValid(int value);
const stDelFriend_ProtoModID stDelFriend_ProtoModID_ProtoModID_MIN = stDelFriend_ProtoModID_ModID;
const stDelFriend_ProtoModID stDelFriend_ProtoModID_ProtoModID_MAX = stDelFriend_ProtoModID_ModID;
const int stDelFriend_ProtoModID_ProtoModID_ARRAYSIZE = stDelFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDelFriend_ProtoModID_descriptor();
inline const ::std::string& stDelFriend_ProtoModID_Name(stDelFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDelFriend_ProtoModID_descriptor(), value);
}
inline bool stDelFriend_ProtoModID_Parse(
    const ::std::string& name, stDelFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDelFriend_ProtoModID>(
    stDelFriend_ProtoModID_descriptor(), name, value);
}
enum stDelFriend_ProtoFunID {
  stDelFriend_ProtoFunID_FunID = 5
};
bool stDelFriend_ProtoFunID_IsValid(int value);
const stDelFriend_ProtoFunID stDelFriend_ProtoFunID_ProtoFunID_MIN = stDelFriend_ProtoFunID_FunID;
const stDelFriend_ProtoFunID stDelFriend_ProtoFunID_ProtoFunID_MAX = stDelFriend_ProtoFunID_FunID;
const int stDelFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stDelFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDelFriend_ProtoFunID_descriptor();
inline const ::std::string& stDelFriend_ProtoFunID_Name(stDelFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDelFriend_ProtoFunID_descriptor(), value);
}
inline bool stDelFriend_ProtoFunID_Parse(
    const ::std::string& name, stDelFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDelFriend_ProtoFunID>(
    stDelFriend_ProtoFunID_descriptor(), name, value);
}
enum stFindAndAddFriend_ProtoModID {
  stFindAndAddFriend_ProtoModID_ModID = 5
};
bool stFindAndAddFriend_ProtoModID_IsValid(int value);
const stFindAndAddFriend_ProtoModID stFindAndAddFriend_ProtoModID_ProtoModID_MIN = stFindAndAddFriend_ProtoModID_ModID;
const stFindAndAddFriend_ProtoModID stFindAndAddFriend_ProtoModID_ProtoModID_MAX = stFindAndAddFriend_ProtoModID_ModID;
const int stFindAndAddFriend_ProtoModID_ProtoModID_ARRAYSIZE = stFindAndAddFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFindAndAddFriend_ProtoModID_descriptor();
inline const ::std::string& stFindAndAddFriend_ProtoModID_Name(stFindAndAddFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFindAndAddFriend_ProtoModID_descriptor(), value);
}
inline bool stFindAndAddFriend_ProtoModID_Parse(
    const ::std::string& name, stFindAndAddFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFindAndAddFriend_ProtoModID>(
    stFindAndAddFriend_ProtoModID_descriptor(), name, value);
}
enum stFindAndAddFriend_ProtoFunID {
  stFindAndAddFriend_ProtoFunID_FunID = 6
};
bool stFindAndAddFriend_ProtoFunID_IsValid(int value);
const stFindAndAddFriend_ProtoFunID stFindAndAddFriend_ProtoFunID_ProtoFunID_MIN = stFindAndAddFriend_ProtoFunID_FunID;
const stFindAndAddFriend_ProtoFunID stFindAndAddFriend_ProtoFunID_ProtoFunID_MAX = stFindAndAddFriend_ProtoFunID_FunID;
const int stFindAndAddFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stFindAndAddFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFindAndAddFriend_ProtoFunID_descriptor();
inline const ::std::string& stFindAndAddFriend_ProtoFunID_Name(stFindAndAddFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFindAndAddFriend_ProtoFunID_descriptor(), value);
}
inline bool stFindAndAddFriend_ProtoFunID_Parse(
    const ::std::string& name, stFindAndAddFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFindAndAddFriend_ProtoFunID>(
    stFindAndAddFriend_ProtoFunID_descriptor(), name, value);
}
enum stFindAndAddFriendResult_ProtoModID {
  stFindAndAddFriendResult_ProtoModID_ModID = 5
};
bool stFindAndAddFriendResult_ProtoModID_IsValid(int value);
const stFindAndAddFriendResult_ProtoModID stFindAndAddFriendResult_ProtoModID_ProtoModID_MIN = stFindAndAddFriendResult_ProtoModID_ModID;
const stFindAndAddFriendResult_ProtoModID stFindAndAddFriendResult_ProtoModID_ProtoModID_MAX = stFindAndAddFriendResult_ProtoModID_ModID;
const int stFindAndAddFriendResult_ProtoModID_ProtoModID_ARRAYSIZE = stFindAndAddFriendResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFindAndAddFriendResult_ProtoModID_descriptor();
inline const ::std::string& stFindAndAddFriendResult_ProtoModID_Name(stFindAndAddFriendResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFindAndAddFriendResult_ProtoModID_descriptor(), value);
}
inline bool stFindAndAddFriendResult_ProtoModID_Parse(
    const ::std::string& name, stFindAndAddFriendResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFindAndAddFriendResult_ProtoModID>(
    stFindAndAddFriendResult_ProtoModID_descriptor(), name, value);
}
enum stFindAndAddFriendResult_ProtoFunID {
  stFindAndAddFriendResult_ProtoFunID_FunID = 7
};
bool stFindAndAddFriendResult_ProtoFunID_IsValid(int value);
const stFindAndAddFriendResult_ProtoFunID stFindAndAddFriendResult_ProtoFunID_ProtoFunID_MIN = stFindAndAddFriendResult_ProtoFunID_FunID;
const stFindAndAddFriendResult_ProtoFunID stFindAndAddFriendResult_ProtoFunID_ProtoFunID_MAX = stFindAndAddFriendResult_ProtoFunID_FunID;
const int stFindAndAddFriendResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stFindAndAddFriendResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFindAndAddFriendResult_ProtoFunID_descriptor();
inline const ::std::string& stFindAndAddFriendResult_ProtoFunID_Name(stFindAndAddFriendResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFindAndAddFriendResult_ProtoFunID_descriptor(), value);
}
inline bool stFindAndAddFriendResult_ProtoFunID_Parse(
    const ::std::string& name, stFindAndAddFriendResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFindAndAddFriendResult_ProtoFunID>(
    stFindAndAddFriendResult_ProtoFunID_descriptor(), name, value);
}
enum stReqApplyAddFriendList_ProtoModID {
  stReqApplyAddFriendList_ProtoModID_ModID = 5
};
bool stReqApplyAddFriendList_ProtoModID_IsValid(int value);
const stReqApplyAddFriendList_ProtoModID stReqApplyAddFriendList_ProtoModID_ProtoModID_MIN = stReqApplyAddFriendList_ProtoModID_ModID;
const stReqApplyAddFriendList_ProtoModID stReqApplyAddFriendList_ProtoModID_ProtoModID_MAX = stReqApplyAddFriendList_ProtoModID_ModID;
const int stReqApplyAddFriendList_ProtoModID_ProtoModID_ARRAYSIZE = stReqApplyAddFriendList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqApplyAddFriendList_ProtoModID_descriptor();
inline const ::std::string& stReqApplyAddFriendList_ProtoModID_Name(stReqApplyAddFriendList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqApplyAddFriendList_ProtoModID_descriptor(), value);
}
inline bool stReqApplyAddFriendList_ProtoModID_Parse(
    const ::std::string& name, stReqApplyAddFriendList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqApplyAddFriendList_ProtoModID>(
    stReqApplyAddFriendList_ProtoModID_descriptor(), name, value);
}
enum stReqApplyAddFriendList_ProtoFunID {
  stReqApplyAddFriendList_ProtoFunID_FunID = 8
};
bool stReqApplyAddFriendList_ProtoFunID_IsValid(int value);
const stReqApplyAddFriendList_ProtoFunID stReqApplyAddFriendList_ProtoFunID_ProtoFunID_MIN = stReqApplyAddFriendList_ProtoFunID_FunID;
const stReqApplyAddFriendList_ProtoFunID stReqApplyAddFriendList_ProtoFunID_ProtoFunID_MAX = stReqApplyAddFriendList_ProtoFunID_FunID;
const int stReqApplyAddFriendList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqApplyAddFriendList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqApplyAddFriendList_ProtoFunID_descriptor();
inline const ::std::string& stReqApplyAddFriendList_ProtoFunID_Name(stReqApplyAddFriendList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqApplyAddFriendList_ProtoFunID_descriptor(), value);
}
inline bool stReqApplyAddFriendList_ProtoFunID_Parse(
    const ::std::string& name, stReqApplyAddFriendList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqApplyAddFriendList_ProtoFunID>(
    stReqApplyAddFriendList_ProtoFunID_descriptor(), name, value);
}
enum stRetApplyAddFriendList_ProtoModID {
  stRetApplyAddFriendList_ProtoModID_ModID = 5
};
bool stRetApplyAddFriendList_ProtoModID_IsValid(int value);
const stRetApplyAddFriendList_ProtoModID stRetApplyAddFriendList_ProtoModID_ProtoModID_MIN = stRetApplyAddFriendList_ProtoModID_ModID;
const stRetApplyAddFriendList_ProtoModID stRetApplyAddFriendList_ProtoModID_ProtoModID_MAX = stRetApplyAddFriendList_ProtoModID_ModID;
const int stRetApplyAddFriendList_ProtoModID_ProtoModID_ARRAYSIZE = stRetApplyAddFriendList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetApplyAddFriendList_ProtoModID_descriptor();
inline const ::std::string& stRetApplyAddFriendList_ProtoModID_Name(stRetApplyAddFriendList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetApplyAddFriendList_ProtoModID_descriptor(), value);
}
inline bool stRetApplyAddFriendList_ProtoModID_Parse(
    const ::std::string& name, stRetApplyAddFriendList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetApplyAddFriendList_ProtoModID>(
    stRetApplyAddFriendList_ProtoModID_descriptor(), name, value);
}
enum stRetApplyAddFriendList_ProtoFunID {
  stRetApplyAddFriendList_ProtoFunID_FunID = 8
};
bool stRetApplyAddFriendList_ProtoFunID_IsValid(int value);
const stRetApplyAddFriendList_ProtoFunID stRetApplyAddFriendList_ProtoFunID_ProtoFunID_MIN = stRetApplyAddFriendList_ProtoFunID_FunID;
const stRetApplyAddFriendList_ProtoFunID stRetApplyAddFriendList_ProtoFunID_ProtoFunID_MAX = stRetApplyAddFriendList_ProtoFunID_FunID;
const int stRetApplyAddFriendList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetApplyAddFriendList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetApplyAddFriendList_ProtoFunID_descriptor();
inline const ::std::string& stRetApplyAddFriendList_ProtoFunID_Name(stRetApplyAddFriendList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetApplyAddFriendList_ProtoFunID_descriptor(), value);
}
inline bool stRetApplyAddFriendList_ProtoFunID_Parse(
    const ::std::string& name, stRetApplyAddFriendList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetApplyAddFriendList_ProtoFunID>(
    stRetApplyAddFriendList_ProtoFunID_descriptor(), name, value);
}
enum stNotifyFriend_ProtoModID {
  stNotifyFriend_ProtoModID_ModID = 5
};
bool stNotifyFriend_ProtoModID_IsValid(int value);
const stNotifyFriend_ProtoModID stNotifyFriend_ProtoModID_ProtoModID_MIN = stNotifyFriend_ProtoModID_ModID;
const stNotifyFriend_ProtoModID stNotifyFriend_ProtoModID_ProtoModID_MAX = stNotifyFriend_ProtoModID_ModID;
const int stNotifyFriend_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyFriend_ProtoModID_descriptor();
inline const ::std::string& stNotifyFriend_ProtoModID_Name(stNotifyFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyFriend_ProtoModID_descriptor(), value);
}
inline bool stNotifyFriend_ProtoModID_Parse(
    const ::std::string& name, stNotifyFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyFriend_ProtoModID>(
    stNotifyFriend_ProtoModID_descriptor(), name, value);
}
enum stNotifyFriend_ProtoFunID {
  stNotifyFriend_ProtoFunID_FunID = 9
};
bool stNotifyFriend_ProtoFunID_IsValid(int value);
const stNotifyFriend_ProtoFunID stNotifyFriend_ProtoFunID_ProtoFunID_MIN = stNotifyFriend_ProtoFunID_FunID;
const stNotifyFriend_ProtoFunID stNotifyFriend_ProtoFunID_ProtoFunID_MAX = stNotifyFriend_ProtoFunID_FunID;
const int stNotifyFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyFriend_ProtoFunID_descriptor();
inline const ::std::string& stNotifyFriend_ProtoFunID_Name(stNotifyFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyFriend_ProtoFunID_descriptor(), value);
}
inline bool stNotifyFriend_ProtoFunID_Parse(
    const ::std::string& name, stNotifyFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyFriend_ProtoFunID>(
    stNotifyFriend_ProtoFunID_descriptor(), name, value);
}
enum stReqRecommondFriend_ProtoModID {
  stReqRecommondFriend_ProtoModID_ModID = 5
};
bool stReqRecommondFriend_ProtoModID_IsValid(int value);
const stReqRecommondFriend_ProtoModID stReqRecommondFriend_ProtoModID_ProtoModID_MIN = stReqRecommondFriend_ProtoModID_ModID;
const stReqRecommondFriend_ProtoModID stReqRecommondFriend_ProtoModID_ProtoModID_MAX = stReqRecommondFriend_ProtoModID_ModID;
const int stReqRecommondFriend_ProtoModID_ProtoModID_ARRAYSIZE = stReqRecommondFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecommondFriend_ProtoModID_descriptor();
inline const ::std::string& stReqRecommondFriend_ProtoModID_Name(stReqRecommondFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecommondFriend_ProtoModID_descriptor(), value);
}
inline bool stReqRecommondFriend_ProtoModID_Parse(
    const ::std::string& name, stReqRecommondFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecommondFriend_ProtoModID>(
    stReqRecommondFriend_ProtoModID_descriptor(), name, value);
}
enum stReqRecommondFriend_ProtoFunID {
  stReqRecommondFriend_ProtoFunID_FunID = 10
};
bool stReqRecommondFriend_ProtoFunID_IsValid(int value);
const stReqRecommondFriend_ProtoFunID stReqRecommondFriend_ProtoFunID_ProtoFunID_MIN = stReqRecommondFriend_ProtoFunID_FunID;
const stReqRecommondFriend_ProtoFunID stReqRecommondFriend_ProtoFunID_ProtoFunID_MAX = stReqRecommondFriend_ProtoFunID_FunID;
const int stReqRecommondFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRecommondFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecommondFriend_ProtoFunID_descriptor();
inline const ::std::string& stReqRecommondFriend_ProtoFunID_Name(stReqRecommondFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecommondFriend_ProtoFunID_descriptor(), value);
}
inline bool stReqRecommondFriend_ProtoFunID_Parse(
    const ::std::string& name, stReqRecommondFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecommondFriend_ProtoFunID>(
    stReqRecommondFriend_ProtoFunID_descriptor(), name, value);
}
enum stRecommondFriendList_ProtoModID {
  stRecommondFriendList_ProtoModID_ModID = 5
};
bool stRecommondFriendList_ProtoModID_IsValid(int value);
const stRecommondFriendList_ProtoModID stRecommondFriendList_ProtoModID_ProtoModID_MIN = stRecommondFriendList_ProtoModID_ModID;
const stRecommondFriendList_ProtoModID stRecommondFriendList_ProtoModID_ProtoModID_MAX = stRecommondFriendList_ProtoModID_ModID;
const int stRecommondFriendList_ProtoModID_ProtoModID_ARRAYSIZE = stRecommondFriendList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRecommondFriendList_ProtoModID_descriptor();
inline const ::std::string& stRecommondFriendList_ProtoModID_Name(stRecommondFriendList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRecommondFriendList_ProtoModID_descriptor(), value);
}
inline bool stRecommondFriendList_ProtoModID_Parse(
    const ::std::string& name, stRecommondFriendList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRecommondFriendList_ProtoModID>(
    stRecommondFriendList_ProtoModID_descriptor(), name, value);
}
enum stRecommondFriendList_ProtoFunID {
  stRecommondFriendList_ProtoFunID_FunID = 11
};
bool stRecommondFriendList_ProtoFunID_IsValid(int value);
const stRecommondFriendList_ProtoFunID stRecommondFriendList_ProtoFunID_ProtoFunID_MIN = stRecommondFriendList_ProtoFunID_FunID;
const stRecommondFriendList_ProtoFunID stRecommondFriendList_ProtoFunID_ProtoFunID_MAX = stRecommondFriendList_ProtoFunID_FunID;
const int stRecommondFriendList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRecommondFriendList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRecommondFriendList_ProtoFunID_descriptor();
inline const ::std::string& stRecommondFriendList_ProtoFunID_Name(stRecommondFriendList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRecommondFriendList_ProtoFunID_descriptor(), value);
}
inline bool stRecommondFriendList_ProtoFunID_Parse(
    const ::std::string& name, stRecommondFriendList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRecommondFriendList_ProtoFunID>(
    stRecommondFriendList_ProtoFunID_descriptor(), name, value);
}
enum stGiveLilian2Friend_ProtoModID {
  stGiveLilian2Friend_ProtoModID_ModID = 5
};
bool stGiveLilian2Friend_ProtoModID_IsValid(int value);
const stGiveLilian2Friend_ProtoModID stGiveLilian2Friend_ProtoModID_ProtoModID_MIN = stGiveLilian2Friend_ProtoModID_ModID;
const stGiveLilian2Friend_ProtoModID stGiveLilian2Friend_ProtoModID_ProtoModID_MAX = stGiveLilian2Friend_ProtoModID_ModID;
const int stGiveLilian2Friend_ProtoModID_ProtoModID_ARRAYSIZE = stGiveLilian2Friend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveLilian2Friend_ProtoModID_descriptor();
inline const ::std::string& stGiveLilian2Friend_ProtoModID_Name(stGiveLilian2Friend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveLilian2Friend_ProtoModID_descriptor(), value);
}
inline bool stGiveLilian2Friend_ProtoModID_Parse(
    const ::std::string& name, stGiveLilian2Friend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveLilian2Friend_ProtoModID>(
    stGiveLilian2Friend_ProtoModID_descriptor(), name, value);
}
enum stGiveLilian2Friend_ProtoFunID {
  stGiveLilian2Friend_ProtoFunID_FunID = 12
};
bool stGiveLilian2Friend_ProtoFunID_IsValid(int value);
const stGiveLilian2Friend_ProtoFunID stGiveLilian2Friend_ProtoFunID_ProtoFunID_MIN = stGiveLilian2Friend_ProtoFunID_FunID;
const stGiveLilian2Friend_ProtoFunID stGiveLilian2Friend_ProtoFunID_ProtoFunID_MAX = stGiveLilian2Friend_ProtoFunID_FunID;
const int stGiveLilian2Friend_ProtoFunID_ProtoFunID_ARRAYSIZE = stGiveLilian2Friend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveLilian2Friend_ProtoFunID_descriptor();
inline const ::std::string& stGiveLilian2Friend_ProtoFunID_Name(stGiveLilian2Friend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveLilian2Friend_ProtoFunID_descriptor(), value);
}
inline bool stGiveLilian2Friend_ProtoFunID_Parse(
    const ::std::string& name, stGiveLilian2Friend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveLilian2Friend_ProtoFunID>(
    stGiveLilian2Friend_ProtoFunID_descriptor(), name, value);
}
enum stGiveLilianResult_eResult {
  stGiveLilianResult_eResult_eSUCCESS = 1,
  stGiveLilianResult_eResult_eFAIL = 2
};
bool stGiveLilianResult_eResult_IsValid(int value);
const stGiveLilianResult_eResult stGiveLilianResult_eResult_eResult_MIN = stGiveLilianResult_eResult_eSUCCESS;
const stGiveLilianResult_eResult stGiveLilianResult_eResult_eResult_MAX = stGiveLilianResult_eResult_eFAIL;
const int stGiveLilianResult_eResult_eResult_ARRAYSIZE = stGiveLilianResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveLilianResult_eResult_descriptor();
inline const ::std::string& stGiveLilianResult_eResult_Name(stGiveLilianResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveLilianResult_eResult_descriptor(), value);
}
inline bool stGiveLilianResult_eResult_Parse(
    const ::std::string& name, stGiveLilianResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveLilianResult_eResult>(
    stGiveLilianResult_eResult_descriptor(), name, value);
}
enum stGiveLilianResult_ProtoModID {
  stGiveLilianResult_ProtoModID_ModID = 5
};
bool stGiveLilianResult_ProtoModID_IsValid(int value);
const stGiveLilianResult_ProtoModID stGiveLilianResult_ProtoModID_ProtoModID_MIN = stGiveLilianResult_ProtoModID_ModID;
const stGiveLilianResult_ProtoModID stGiveLilianResult_ProtoModID_ProtoModID_MAX = stGiveLilianResult_ProtoModID_ModID;
const int stGiveLilianResult_ProtoModID_ProtoModID_ARRAYSIZE = stGiveLilianResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveLilianResult_ProtoModID_descriptor();
inline const ::std::string& stGiveLilianResult_ProtoModID_Name(stGiveLilianResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveLilianResult_ProtoModID_descriptor(), value);
}
inline bool stGiveLilianResult_ProtoModID_Parse(
    const ::std::string& name, stGiveLilianResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveLilianResult_ProtoModID>(
    stGiveLilianResult_ProtoModID_descriptor(), name, value);
}
enum stGiveLilianResult_ProtoFunID {
  stGiveLilianResult_ProtoFunID_FunID = 13
};
bool stGiveLilianResult_ProtoFunID_IsValid(int value);
const stGiveLilianResult_ProtoFunID stGiveLilianResult_ProtoFunID_ProtoFunID_MIN = stGiveLilianResult_ProtoFunID_FunID;
const stGiveLilianResult_ProtoFunID stGiveLilianResult_ProtoFunID_ProtoFunID_MAX = stGiveLilianResult_ProtoFunID_FunID;
const int stGiveLilianResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGiveLilianResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveLilianResult_ProtoFunID_descriptor();
inline const ::std::string& stGiveLilianResult_ProtoFunID_Name(stGiveLilianResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveLilianResult_ProtoFunID_descriptor(), value);
}
inline bool stGiveLilianResult_ProtoFunID_Parse(
    const ::std::string& name, stGiveLilianResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveLilianResult_ProtoFunID>(
    stGiveLilianResult_ProtoFunID_descriptor(), name, value);
}
enum stReqReceiveLilian_ProtoModID {
  stReqReceiveLilian_ProtoModID_ModID = 5
};
bool stReqReceiveLilian_ProtoModID_IsValid(int value);
const stReqReceiveLilian_ProtoModID stReqReceiveLilian_ProtoModID_ProtoModID_MIN = stReqReceiveLilian_ProtoModID_ModID;
const stReqReceiveLilian_ProtoModID stReqReceiveLilian_ProtoModID_ProtoModID_MAX = stReqReceiveLilian_ProtoModID_ModID;
const int stReqReceiveLilian_ProtoModID_ProtoModID_ARRAYSIZE = stReqReceiveLilian_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReceiveLilian_ProtoModID_descriptor();
inline const ::std::string& stReqReceiveLilian_ProtoModID_Name(stReqReceiveLilian_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReceiveLilian_ProtoModID_descriptor(), value);
}
inline bool stReqReceiveLilian_ProtoModID_Parse(
    const ::std::string& name, stReqReceiveLilian_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReceiveLilian_ProtoModID>(
    stReqReceiveLilian_ProtoModID_descriptor(), name, value);
}
enum stReqReceiveLilian_ProtoFunID {
  stReqReceiveLilian_ProtoFunID_FunID = 14
};
bool stReqReceiveLilian_ProtoFunID_IsValid(int value);
const stReqReceiveLilian_ProtoFunID stReqReceiveLilian_ProtoFunID_ProtoFunID_MIN = stReqReceiveLilian_ProtoFunID_FunID;
const stReqReceiveLilian_ProtoFunID stReqReceiveLilian_ProtoFunID_ProtoFunID_MAX = stReqReceiveLilian_ProtoFunID_FunID;
const int stReqReceiveLilian_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqReceiveLilian_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReceiveLilian_ProtoFunID_descriptor();
inline const ::std::string& stReqReceiveLilian_ProtoFunID_Name(stReqReceiveLilian_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReceiveLilian_ProtoFunID_descriptor(), value);
}
inline bool stReqReceiveLilian_ProtoFunID_Parse(
    const ::std::string& name, stReqReceiveLilian_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReceiveLilian_ProtoFunID>(
    stReqReceiveLilian_ProtoFunID_descriptor(), name, value);
}
enum stReceiveLilianList_ProtoModID {
  stReceiveLilianList_ProtoModID_ModID = 5
};
bool stReceiveLilianList_ProtoModID_IsValid(int value);
const stReceiveLilianList_ProtoModID stReceiveLilianList_ProtoModID_ProtoModID_MIN = stReceiveLilianList_ProtoModID_ModID;
const stReceiveLilianList_ProtoModID stReceiveLilianList_ProtoModID_ProtoModID_MAX = stReceiveLilianList_ProtoModID_ModID;
const int stReceiveLilianList_ProtoModID_ProtoModID_ARRAYSIZE = stReceiveLilianList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReceiveLilianList_ProtoModID_descriptor();
inline const ::std::string& stReceiveLilianList_ProtoModID_Name(stReceiveLilianList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReceiveLilianList_ProtoModID_descriptor(), value);
}
inline bool stReceiveLilianList_ProtoModID_Parse(
    const ::std::string& name, stReceiveLilianList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReceiveLilianList_ProtoModID>(
    stReceiveLilianList_ProtoModID_descriptor(), name, value);
}
enum stReceiveLilianList_ProtoFunID {
  stReceiveLilianList_ProtoFunID_FunID = 15
};
bool stReceiveLilianList_ProtoFunID_IsValid(int value);
const stReceiveLilianList_ProtoFunID stReceiveLilianList_ProtoFunID_ProtoFunID_MIN = stReceiveLilianList_ProtoFunID_FunID;
const stReceiveLilianList_ProtoFunID stReceiveLilianList_ProtoFunID_ProtoFunID_MAX = stReceiveLilianList_ProtoFunID_FunID;
const int stReceiveLilianList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReceiveLilianList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReceiveLilianList_ProtoFunID_descriptor();
inline const ::std::string& stReceiveLilianList_ProtoFunID_Name(stReceiveLilianList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReceiveLilianList_ProtoFunID_descriptor(), value);
}
inline bool stReceiveLilianList_ProtoFunID_Parse(
    const ::std::string& name, stReceiveLilianList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReceiveLilianList_ProtoFunID>(
    stReceiveLilianList_ProtoFunID_descriptor(), name, value);
}
enum stFetchLilian_ProtoModID {
  stFetchLilian_ProtoModID_ModID = 5
};
bool stFetchLilian_ProtoModID_IsValid(int value);
const stFetchLilian_ProtoModID stFetchLilian_ProtoModID_ProtoModID_MIN = stFetchLilian_ProtoModID_ModID;
const stFetchLilian_ProtoModID stFetchLilian_ProtoModID_ProtoModID_MAX = stFetchLilian_ProtoModID_ModID;
const int stFetchLilian_ProtoModID_ProtoModID_ARRAYSIZE = stFetchLilian_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFetchLilian_ProtoModID_descriptor();
inline const ::std::string& stFetchLilian_ProtoModID_Name(stFetchLilian_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFetchLilian_ProtoModID_descriptor(), value);
}
inline bool stFetchLilian_ProtoModID_Parse(
    const ::std::string& name, stFetchLilian_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFetchLilian_ProtoModID>(
    stFetchLilian_ProtoModID_descriptor(), name, value);
}
enum stFetchLilian_ProtoFunID {
  stFetchLilian_ProtoFunID_FunID = 16
};
bool stFetchLilian_ProtoFunID_IsValid(int value);
const stFetchLilian_ProtoFunID stFetchLilian_ProtoFunID_ProtoFunID_MIN = stFetchLilian_ProtoFunID_FunID;
const stFetchLilian_ProtoFunID stFetchLilian_ProtoFunID_ProtoFunID_MAX = stFetchLilian_ProtoFunID_FunID;
const int stFetchLilian_ProtoFunID_ProtoFunID_ARRAYSIZE = stFetchLilian_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFetchLilian_ProtoFunID_descriptor();
inline const ::std::string& stFetchLilian_ProtoFunID_Name(stFetchLilian_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFetchLilian_ProtoFunID_descriptor(), value);
}
inline bool stFetchLilian_ProtoFunID_Parse(
    const ::std::string& name, stFetchLilian_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFetchLilian_ProtoFunID>(
    stFetchLilian_ProtoFunID_descriptor(), name, value);
}
enum stFetchLilianResult_eResult {
  stFetchLilianResult_eResult_eSUCCESS = 1,
  stFetchLilianResult_eResult_eNUM_USE_OUT = 2,
  stFetchLilianResult_eResult_eNOT_GIVE_LILIAN = 3
};
bool stFetchLilianResult_eResult_IsValid(int value);
const stFetchLilianResult_eResult stFetchLilianResult_eResult_eResult_MIN = stFetchLilianResult_eResult_eSUCCESS;
const stFetchLilianResult_eResult stFetchLilianResult_eResult_eResult_MAX = stFetchLilianResult_eResult_eNOT_GIVE_LILIAN;
const int stFetchLilianResult_eResult_eResult_ARRAYSIZE = stFetchLilianResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFetchLilianResult_eResult_descriptor();
inline const ::std::string& stFetchLilianResult_eResult_Name(stFetchLilianResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFetchLilianResult_eResult_descriptor(), value);
}
inline bool stFetchLilianResult_eResult_Parse(
    const ::std::string& name, stFetchLilianResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFetchLilianResult_eResult>(
    stFetchLilianResult_eResult_descriptor(), name, value);
}
enum stFetchLilianResult_ProtoModID {
  stFetchLilianResult_ProtoModID_ModID = 5
};
bool stFetchLilianResult_ProtoModID_IsValid(int value);
const stFetchLilianResult_ProtoModID stFetchLilianResult_ProtoModID_ProtoModID_MIN = stFetchLilianResult_ProtoModID_ModID;
const stFetchLilianResult_ProtoModID stFetchLilianResult_ProtoModID_ProtoModID_MAX = stFetchLilianResult_ProtoModID_ModID;
const int stFetchLilianResult_ProtoModID_ProtoModID_ARRAYSIZE = stFetchLilianResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFetchLilianResult_ProtoModID_descriptor();
inline const ::std::string& stFetchLilianResult_ProtoModID_Name(stFetchLilianResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFetchLilianResult_ProtoModID_descriptor(), value);
}
inline bool stFetchLilianResult_ProtoModID_Parse(
    const ::std::string& name, stFetchLilianResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFetchLilianResult_ProtoModID>(
    stFetchLilianResult_ProtoModID_descriptor(), name, value);
}
enum stFetchLilianResult_ProtoFunID {
  stFetchLilianResult_ProtoFunID_FunID = 16
};
bool stFetchLilianResult_ProtoFunID_IsValid(int value);
const stFetchLilianResult_ProtoFunID stFetchLilianResult_ProtoFunID_ProtoFunID_MIN = stFetchLilianResult_ProtoFunID_FunID;
const stFetchLilianResult_ProtoFunID stFetchLilianResult_ProtoFunID_ProtoFunID_MAX = stFetchLilianResult_ProtoFunID_FunID;
const int stFetchLilianResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stFetchLilianResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFetchLilianResult_ProtoFunID_descriptor();
inline const ::std::string& stFetchLilianResult_ProtoFunID_Name(stFetchLilianResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFetchLilianResult_ProtoFunID_descriptor(), value);
}
inline bool stFetchLilianResult_ProtoFunID_Parse(
    const ::std::string& name, stFetchLilianResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFetchLilianResult_ProtoFunID>(
    stFetchLilianResult_ProtoFunID_descriptor(), name, value);
}
enum stReqAdd2ApplyList_ProtoModID {
  stReqAdd2ApplyList_ProtoModID_ModID = 5
};
bool stReqAdd2ApplyList_ProtoModID_IsValid(int value);
const stReqAdd2ApplyList_ProtoModID stReqAdd2ApplyList_ProtoModID_ProtoModID_MIN = stReqAdd2ApplyList_ProtoModID_ModID;
const stReqAdd2ApplyList_ProtoModID stReqAdd2ApplyList_ProtoModID_ProtoModID_MAX = stReqAdd2ApplyList_ProtoModID_ModID;
const int stReqAdd2ApplyList_ProtoModID_ProtoModID_ARRAYSIZE = stReqAdd2ApplyList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAdd2ApplyList_ProtoModID_descriptor();
inline const ::std::string& stReqAdd2ApplyList_ProtoModID_Name(stReqAdd2ApplyList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAdd2ApplyList_ProtoModID_descriptor(), value);
}
inline bool stReqAdd2ApplyList_ProtoModID_Parse(
    const ::std::string& name, stReqAdd2ApplyList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAdd2ApplyList_ProtoModID>(
    stReqAdd2ApplyList_ProtoModID_descriptor(), name, value);
}
enum stReqAdd2ApplyList_ProtoFunID {
  stReqAdd2ApplyList_ProtoFunID_FunID = 17
};
bool stReqAdd2ApplyList_ProtoFunID_IsValid(int value);
const stReqAdd2ApplyList_ProtoFunID stReqAdd2ApplyList_ProtoFunID_ProtoFunID_MIN = stReqAdd2ApplyList_ProtoFunID_FunID;
const stReqAdd2ApplyList_ProtoFunID stReqAdd2ApplyList_ProtoFunID_ProtoFunID_MAX = stReqAdd2ApplyList_ProtoFunID_FunID;
const int stReqAdd2ApplyList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAdd2ApplyList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAdd2ApplyList_ProtoFunID_descriptor();
inline const ::std::string& stReqAdd2ApplyList_ProtoFunID_Name(stReqAdd2ApplyList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAdd2ApplyList_ProtoFunID_descriptor(), value);
}
inline bool stReqAdd2ApplyList_ProtoFunID_Parse(
    const ::std::string& name, stReqAdd2ApplyList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAdd2ApplyList_ProtoFunID>(
    stReqAdd2ApplyList_ProtoFunID_descriptor(), name, value);
}
enum stAdd2ApplyListResult_eResult {
  stAdd2ApplyListResult_eResult_eSUCCESS = 1,
  stAdd2ApplyListResult_eResult_eFAIL = 2
};
bool stAdd2ApplyListResult_eResult_IsValid(int value);
const stAdd2ApplyListResult_eResult stAdd2ApplyListResult_eResult_eResult_MIN = stAdd2ApplyListResult_eResult_eSUCCESS;
const stAdd2ApplyListResult_eResult stAdd2ApplyListResult_eResult_eResult_MAX = stAdd2ApplyListResult_eResult_eFAIL;
const int stAdd2ApplyListResult_eResult_eResult_ARRAYSIZE = stAdd2ApplyListResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAdd2ApplyListResult_eResult_descriptor();
inline const ::std::string& stAdd2ApplyListResult_eResult_Name(stAdd2ApplyListResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAdd2ApplyListResult_eResult_descriptor(), value);
}
inline bool stAdd2ApplyListResult_eResult_Parse(
    const ::std::string& name, stAdd2ApplyListResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAdd2ApplyListResult_eResult>(
    stAdd2ApplyListResult_eResult_descriptor(), name, value);
}
enum stAdd2ApplyListResult_ProtoModID {
  stAdd2ApplyListResult_ProtoModID_ModID = 5
};
bool stAdd2ApplyListResult_ProtoModID_IsValid(int value);
const stAdd2ApplyListResult_ProtoModID stAdd2ApplyListResult_ProtoModID_ProtoModID_MIN = stAdd2ApplyListResult_ProtoModID_ModID;
const stAdd2ApplyListResult_ProtoModID stAdd2ApplyListResult_ProtoModID_ProtoModID_MAX = stAdd2ApplyListResult_ProtoModID_ModID;
const int stAdd2ApplyListResult_ProtoModID_ProtoModID_ARRAYSIZE = stAdd2ApplyListResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAdd2ApplyListResult_ProtoModID_descriptor();
inline const ::std::string& stAdd2ApplyListResult_ProtoModID_Name(stAdd2ApplyListResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAdd2ApplyListResult_ProtoModID_descriptor(), value);
}
inline bool stAdd2ApplyListResult_ProtoModID_Parse(
    const ::std::string& name, stAdd2ApplyListResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAdd2ApplyListResult_ProtoModID>(
    stAdd2ApplyListResult_ProtoModID_descriptor(), name, value);
}
enum stAdd2ApplyListResult_ProtoFunID {
  stAdd2ApplyListResult_ProtoFunID_FunID = 18
};
bool stAdd2ApplyListResult_ProtoFunID_IsValid(int value);
const stAdd2ApplyListResult_ProtoFunID stAdd2ApplyListResult_ProtoFunID_ProtoFunID_MIN = stAdd2ApplyListResult_ProtoFunID_FunID;
const stAdd2ApplyListResult_ProtoFunID stAdd2ApplyListResult_ProtoFunID_ProtoFunID_MAX = stAdd2ApplyListResult_ProtoFunID_FunID;
const int stAdd2ApplyListResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stAdd2ApplyListResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAdd2ApplyListResult_ProtoFunID_descriptor();
inline const ::std::string& stAdd2ApplyListResult_ProtoFunID_Name(stAdd2ApplyListResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAdd2ApplyListResult_ProtoFunID_descriptor(), value);
}
inline bool stAdd2ApplyListResult_ProtoFunID_Parse(
    const ::std::string& name, stAdd2ApplyListResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAdd2ApplyListResult_ProtoFunID>(
    stAdd2ApplyListResult_ProtoFunID_descriptor(), name, value);
}
enum stRefuseAddFriend_ProtoModID {
  stRefuseAddFriend_ProtoModID_ModID = 5
};
bool stRefuseAddFriend_ProtoModID_IsValid(int value);
const stRefuseAddFriend_ProtoModID stRefuseAddFriend_ProtoModID_ProtoModID_MIN = stRefuseAddFriend_ProtoModID_ModID;
const stRefuseAddFriend_ProtoModID stRefuseAddFriend_ProtoModID_ProtoModID_MAX = stRefuseAddFriend_ProtoModID_ModID;
const int stRefuseAddFriend_ProtoModID_ProtoModID_ARRAYSIZE = stRefuseAddFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefuseAddFriend_ProtoModID_descriptor();
inline const ::std::string& stRefuseAddFriend_ProtoModID_Name(stRefuseAddFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefuseAddFriend_ProtoModID_descriptor(), value);
}
inline bool stRefuseAddFriend_ProtoModID_Parse(
    const ::std::string& name, stRefuseAddFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefuseAddFriend_ProtoModID>(
    stRefuseAddFriend_ProtoModID_descriptor(), name, value);
}
enum stRefuseAddFriend_ProtoFunID {
  stRefuseAddFriend_ProtoFunID_FunID = 19
};
bool stRefuseAddFriend_ProtoFunID_IsValid(int value);
const stRefuseAddFriend_ProtoFunID stRefuseAddFriend_ProtoFunID_ProtoFunID_MIN = stRefuseAddFriend_ProtoFunID_FunID;
const stRefuseAddFriend_ProtoFunID stRefuseAddFriend_ProtoFunID_ProtoFunID_MAX = stRefuseAddFriend_ProtoFunID_FunID;
const int stRefuseAddFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefuseAddFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefuseAddFriend_ProtoFunID_descriptor();
inline const ::std::string& stRefuseAddFriend_ProtoFunID_Name(stRefuseAddFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefuseAddFriend_ProtoFunID_descriptor(), value);
}
inline bool stRefuseAddFriend_ProtoFunID_Parse(
    const ::std::string& name, stRefuseAddFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefuseAddFriend_ProtoFunID>(
    stRefuseAddFriend_ProtoFunID_descriptor(), name, value);
}
enum stInvitePKWithFriend_ProtoModID {
  stInvitePKWithFriend_ProtoModID_ModID = 5
};
bool stInvitePKWithFriend_ProtoModID_IsValid(int value);
const stInvitePKWithFriend_ProtoModID stInvitePKWithFriend_ProtoModID_ProtoModID_MIN = stInvitePKWithFriend_ProtoModID_ModID;
const stInvitePKWithFriend_ProtoModID stInvitePKWithFriend_ProtoModID_ProtoModID_MAX = stInvitePKWithFriend_ProtoModID_ModID;
const int stInvitePKWithFriend_ProtoModID_ProtoModID_ARRAYSIZE = stInvitePKWithFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInvitePKWithFriend_ProtoModID_descriptor();
inline const ::std::string& stInvitePKWithFriend_ProtoModID_Name(stInvitePKWithFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInvitePKWithFriend_ProtoModID_descriptor(), value);
}
inline bool stInvitePKWithFriend_ProtoModID_Parse(
    const ::std::string& name, stInvitePKWithFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInvitePKWithFriend_ProtoModID>(
    stInvitePKWithFriend_ProtoModID_descriptor(), name, value);
}
enum stInvitePKWithFriend_ProtoFunID {
  stInvitePKWithFriend_ProtoFunID_FunID = 20
};
bool stInvitePKWithFriend_ProtoFunID_IsValid(int value);
const stInvitePKWithFriend_ProtoFunID stInvitePKWithFriend_ProtoFunID_ProtoFunID_MIN = stInvitePKWithFriend_ProtoFunID_FunID;
const stInvitePKWithFriend_ProtoFunID stInvitePKWithFriend_ProtoFunID_ProtoFunID_MAX = stInvitePKWithFriend_ProtoFunID_FunID;
const int stInvitePKWithFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stInvitePKWithFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInvitePKWithFriend_ProtoFunID_descriptor();
inline const ::std::string& stInvitePKWithFriend_ProtoFunID_Name(stInvitePKWithFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInvitePKWithFriend_ProtoFunID_descriptor(), value);
}
inline bool stInvitePKWithFriend_ProtoFunID_Parse(
    const ::std::string& name, stInvitePKWithFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInvitePKWithFriend_ProtoFunID>(
    stInvitePKWithFriend_ProtoFunID_descriptor(), name, value);
}
enum stAskAgreePKWithFriend_ProtoModID {
  stAskAgreePKWithFriend_ProtoModID_ModID = 5
};
bool stAskAgreePKWithFriend_ProtoModID_IsValid(int value);
const stAskAgreePKWithFriend_ProtoModID stAskAgreePKWithFriend_ProtoModID_ProtoModID_MIN = stAskAgreePKWithFriend_ProtoModID_ModID;
const stAskAgreePKWithFriend_ProtoModID stAskAgreePKWithFriend_ProtoModID_ProtoModID_MAX = stAskAgreePKWithFriend_ProtoModID_ModID;
const int stAskAgreePKWithFriend_ProtoModID_ProtoModID_ARRAYSIZE = stAskAgreePKWithFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAskAgreePKWithFriend_ProtoModID_descriptor();
inline const ::std::string& stAskAgreePKWithFriend_ProtoModID_Name(stAskAgreePKWithFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAskAgreePKWithFriend_ProtoModID_descriptor(), value);
}
inline bool stAskAgreePKWithFriend_ProtoModID_Parse(
    const ::std::string& name, stAskAgreePKWithFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAskAgreePKWithFriend_ProtoModID>(
    stAskAgreePKWithFriend_ProtoModID_descriptor(), name, value);
}
enum stAskAgreePKWithFriend_ProtoFunID {
  stAskAgreePKWithFriend_ProtoFunID_FunID = 21
};
bool stAskAgreePKWithFriend_ProtoFunID_IsValid(int value);
const stAskAgreePKWithFriend_ProtoFunID stAskAgreePKWithFriend_ProtoFunID_ProtoFunID_MIN = stAskAgreePKWithFriend_ProtoFunID_FunID;
const stAskAgreePKWithFriend_ProtoFunID stAskAgreePKWithFriend_ProtoFunID_ProtoFunID_MAX = stAskAgreePKWithFriend_ProtoFunID_FunID;
const int stAskAgreePKWithFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stAskAgreePKWithFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAskAgreePKWithFriend_ProtoFunID_descriptor();
inline const ::std::string& stAskAgreePKWithFriend_ProtoFunID_Name(stAskAgreePKWithFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAskAgreePKWithFriend_ProtoFunID_descriptor(), value);
}
inline bool stAskAgreePKWithFriend_ProtoFunID_Parse(
    const ::std::string& name, stAskAgreePKWithFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAskAgreePKWithFriend_ProtoFunID>(
    stAskAgreePKWithFriend_ProtoFunID_descriptor(), name, value);
}
enum stReplyFriendPKInvite_ProtoModID {
  stReplyFriendPKInvite_ProtoModID_ModID = 5
};
bool stReplyFriendPKInvite_ProtoModID_IsValid(int value);
const stReplyFriendPKInvite_ProtoModID stReplyFriendPKInvite_ProtoModID_ProtoModID_MIN = stReplyFriendPKInvite_ProtoModID_ModID;
const stReplyFriendPKInvite_ProtoModID stReplyFriendPKInvite_ProtoModID_ProtoModID_MAX = stReplyFriendPKInvite_ProtoModID_ModID;
const int stReplyFriendPKInvite_ProtoModID_ProtoModID_ARRAYSIZE = stReplyFriendPKInvite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyFriendPKInvite_ProtoModID_descriptor();
inline const ::std::string& stReplyFriendPKInvite_ProtoModID_Name(stReplyFriendPKInvite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyFriendPKInvite_ProtoModID_descriptor(), value);
}
inline bool stReplyFriendPKInvite_ProtoModID_Parse(
    const ::std::string& name, stReplyFriendPKInvite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyFriendPKInvite_ProtoModID>(
    stReplyFriendPKInvite_ProtoModID_descriptor(), name, value);
}
enum stReplyFriendPKInvite_ProtoFunID {
  stReplyFriendPKInvite_ProtoFunID_FunID = 22
};
bool stReplyFriendPKInvite_ProtoFunID_IsValid(int value);
const stReplyFriendPKInvite_ProtoFunID stReplyFriendPKInvite_ProtoFunID_ProtoFunID_MIN = stReplyFriendPKInvite_ProtoFunID_FunID;
const stReplyFriendPKInvite_ProtoFunID stReplyFriendPKInvite_ProtoFunID_ProtoFunID_MAX = stReplyFriendPKInvite_ProtoFunID_FunID;
const int stReplyFriendPKInvite_ProtoFunID_ProtoFunID_ARRAYSIZE = stReplyFriendPKInvite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyFriendPKInvite_ProtoFunID_descriptor();
inline const ::std::string& stReplyFriendPKInvite_ProtoFunID_Name(stReplyFriendPKInvite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyFriendPKInvite_ProtoFunID_descriptor(), value);
}
inline bool stReplyFriendPKInvite_ProtoFunID_Parse(
    const ::std::string& name, stReplyFriendPKInvite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyFriendPKInvite_ProtoFunID>(
    stReplyFriendPKInvite_ProtoFunID_descriptor(), name, value);
}
enum stInvitePKResult_eResult {
  stInvitePKResult_eResult_eRefuse = 1,
  stInvitePKResult_eResult_eAgree = 2,
  stInvitePKResult_eResult_eNotYourFriend = 3,
  stInvitePKResult_eResult_eNotOnline = 4,
  stInvitePKResult_eResult_eInviteSuccess = 5
};
bool stInvitePKResult_eResult_IsValid(int value);
const stInvitePKResult_eResult stInvitePKResult_eResult_eResult_MIN = stInvitePKResult_eResult_eRefuse;
const stInvitePKResult_eResult stInvitePKResult_eResult_eResult_MAX = stInvitePKResult_eResult_eInviteSuccess;
const int stInvitePKResult_eResult_eResult_ARRAYSIZE = stInvitePKResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInvitePKResult_eResult_descriptor();
inline const ::std::string& stInvitePKResult_eResult_Name(stInvitePKResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInvitePKResult_eResult_descriptor(), value);
}
inline bool stInvitePKResult_eResult_Parse(
    const ::std::string& name, stInvitePKResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInvitePKResult_eResult>(
    stInvitePKResult_eResult_descriptor(), name, value);
}
enum stInvitePKResult_ProtoModID {
  stInvitePKResult_ProtoModID_ModID = 5
};
bool stInvitePKResult_ProtoModID_IsValid(int value);
const stInvitePKResult_ProtoModID stInvitePKResult_ProtoModID_ProtoModID_MIN = stInvitePKResult_ProtoModID_ModID;
const stInvitePKResult_ProtoModID stInvitePKResult_ProtoModID_ProtoModID_MAX = stInvitePKResult_ProtoModID_ModID;
const int stInvitePKResult_ProtoModID_ProtoModID_ARRAYSIZE = stInvitePKResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInvitePKResult_ProtoModID_descriptor();
inline const ::std::string& stInvitePKResult_ProtoModID_Name(stInvitePKResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInvitePKResult_ProtoModID_descriptor(), value);
}
inline bool stInvitePKResult_ProtoModID_Parse(
    const ::std::string& name, stInvitePKResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInvitePKResult_ProtoModID>(
    stInvitePKResult_ProtoModID_descriptor(), name, value);
}
enum stInvitePKResult_ProtoFunID {
  stInvitePKResult_ProtoFunID_FunID = 22
};
bool stInvitePKResult_ProtoFunID_IsValid(int value);
const stInvitePKResult_ProtoFunID stInvitePKResult_ProtoFunID_ProtoFunID_MIN = stInvitePKResult_ProtoFunID_FunID;
const stInvitePKResult_ProtoFunID stInvitePKResult_ProtoFunID_ProtoFunID_MAX = stInvitePKResult_ProtoFunID_FunID;
const int stInvitePKResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stInvitePKResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInvitePKResult_ProtoFunID_descriptor();
inline const ::std::string& stInvitePKResult_ProtoFunID_Name(stInvitePKResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInvitePKResult_ProtoFunID_descriptor(), value);
}
inline bool stInvitePKResult_ProtoFunID_Parse(
    const ::std::string& name, stInvitePKResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInvitePKResult_ProtoFunID>(
    stInvitePKResult_ProtoFunID_descriptor(), name, value);
}
enum stReplyFriendPKInviteResult_eResult {
  stReplyFriendPKInviteResult_eResult_eNot_Invited_Has_Enter = 1
};
bool stReplyFriendPKInviteResult_eResult_IsValid(int value);
const stReplyFriendPKInviteResult_eResult stReplyFriendPKInviteResult_eResult_eResult_MIN = stReplyFriendPKInviteResult_eResult_eNot_Invited_Has_Enter;
const stReplyFriendPKInviteResult_eResult stReplyFriendPKInviteResult_eResult_eResult_MAX = stReplyFriendPKInviteResult_eResult_eNot_Invited_Has_Enter;
const int stReplyFriendPKInviteResult_eResult_eResult_ARRAYSIZE = stReplyFriendPKInviteResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyFriendPKInviteResult_eResult_descriptor();
inline const ::std::string& stReplyFriendPKInviteResult_eResult_Name(stReplyFriendPKInviteResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyFriendPKInviteResult_eResult_descriptor(), value);
}
inline bool stReplyFriendPKInviteResult_eResult_Parse(
    const ::std::string& name, stReplyFriendPKInviteResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyFriendPKInviteResult_eResult>(
    stReplyFriendPKInviteResult_eResult_descriptor(), name, value);
}
enum stReplyFriendPKInviteResult_ProtoModID {
  stReplyFriendPKInviteResult_ProtoModID_ModID = 5
};
bool stReplyFriendPKInviteResult_ProtoModID_IsValid(int value);
const stReplyFriendPKInviteResult_ProtoModID stReplyFriendPKInviteResult_ProtoModID_ProtoModID_MIN = stReplyFriendPKInviteResult_ProtoModID_ModID;
const stReplyFriendPKInviteResult_ProtoModID stReplyFriendPKInviteResult_ProtoModID_ProtoModID_MAX = stReplyFriendPKInviteResult_ProtoModID_ModID;
const int stReplyFriendPKInviteResult_ProtoModID_ProtoModID_ARRAYSIZE = stReplyFriendPKInviteResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyFriendPKInviteResult_ProtoModID_descriptor();
inline const ::std::string& stReplyFriendPKInviteResult_ProtoModID_Name(stReplyFriendPKInviteResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyFriendPKInviteResult_ProtoModID_descriptor(), value);
}
inline bool stReplyFriendPKInviteResult_ProtoModID_Parse(
    const ::std::string& name, stReplyFriendPKInviteResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyFriendPKInviteResult_ProtoModID>(
    stReplyFriendPKInviteResult_ProtoModID_descriptor(), name, value);
}
enum stReplyFriendPKInviteResult_ProtoFunID {
  stReplyFriendPKInviteResult_ProtoFunID_FunID = 23
};
bool stReplyFriendPKInviteResult_ProtoFunID_IsValid(int value);
const stReplyFriendPKInviteResult_ProtoFunID stReplyFriendPKInviteResult_ProtoFunID_ProtoFunID_MIN = stReplyFriendPKInviteResult_ProtoFunID_FunID;
const stReplyFriendPKInviteResult_ProtoFunID stReplyFriendPKInviteResult_ProtoFunID_ProtoFunID_MAX = stReplyFriendPKInviteResult_ProtoFunID_FunID;
const int stReplyFriendPKInviteResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stReplyFriendPKInviteResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyFriendPKInviteResult_ProtoFunID_descriptor();
inline const ::std::string& stReplyFriendPKInviteResult_ProtoFunID_Name(stReplyFriendPKInviteResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyFriendPKInviteResult_ProtoFunID_descriptor(), value);
}
inline bool stReplyFriendPKInviteResult_ProtoFunID_Parse(
    const ::std::string& name, stReplyFriendPKInviteResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyFriendPKInviteResult_ProtoFunID>(
    stReplyFriendPKInviteResult_ProtoFunID_descriptor(), name, value);
}
enum stSomeOneApplyAddFriend_ProtoModID {
  stSomeOneApplyAddFriend_ProtoModID_ModID = 5
};
bool stSomeOneApplyAddFriend_ProtoModID_IsValid(int value);
const stSomeOneApplyAddFriend_ProtoModID stSomeOneApplyAddFriend_ProtoModID_ProtoModID_MIN = stSomeOneApplyAddFriend_ProtoModID_ModID;
const stSomeOneApplyAddFriend_ProtoModID stSomeOneApplyAddFriend_ProtoModID_ProtoModID_MAX = stSomeOneApplyAddFriend_ProtoModID_ModID;
const int stSomeOneApplyAddFriend_ProtoModID_ProtoModID_ARRAYSIZE = stSomeOneApplyAddFriend_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSomeOneApplyAddFriend_ProtoModID_descriptor();
inline const ::std::string& stSomeOneApplyAddFriend_ProtoModID_Name(stSomeOneApplyAddFriend_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSomeOneApplyAddFriend_ProtoModID_descriptor(), value);
}
inline bool stSomeOneApplyAddFriend_ProtoModID_Parse(
    const ::std::string& name, stSomeOneApplyAddFriend_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSomeOneApplyAddFriend_ProtoModID>(
    stSomeOneApplyAddFriend_ProtoModID_descriptor(), name, value);
}
enum stSomeOneApplyAddFriend_ProtoFunID {
  stSomeOneApplyAddFriend_ProtoFunID_FunID = 24
};
bool stSomeOneApplyAddFriend_ProtoFunID_IsValid(int value);
const stSomeOneApplyAddFriend_ProtoFunID stSomeOneApplyAddFriend_ProtoFunID_ProtoFunID_MIN = stSomeOneApplyAddFriend_ProtoFunID_FunID;
const stSomeOneApplyAddFriend_ProtoFunID stSomeOneApplyAddFriend_ProtoFunID_ProtoFunID_MAX = stSomeOneApplyAddFriend_ProtoFunID_FunID;
const int stSomeOneApplyAddFriend_ProtoFunID_ProtoFunID_ARRAYSIZE = stSomeOneApplyAddFriend_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSomeOneApplyAddFriend_ProtoFunID_descriptor();
inline const ::std::string& stSomeOneApplyAddFriend_ProtoFunID_Name(stSomeOneApplyAddFriend_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSomeOneApplyAddFriend_ProtoFunID_descriptor(), value);
}
inline bool stSomeOneApplyAddFriend_ProtoFunID_Parse(
    const ::std::string& name, stSomeOneApplyAddFriend_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSomeOneApplyAddFriend_ProtoFunID>(
    stSomeOneApplyAddFriend_ProtoFunID_descriptor(), name, value);
}
enum stReqPropose_ProtoModID {
  stReqPropose_ProtoModID_ModID = 5
};
bool stReqPropose_ProtoModID_IsValid(int value);
const stReqPropose_ProtoModID stReqPropose_ProtoModID_ProtoModID_MIN = stReqPropose_ProtoModID_ModID;
const stReqPropose_ProtoModID stReqPropose_ProtoModID_ProtoModID_MAX = stReqPropose_ProtoModID_ModID;
const int stReqPropose_ProtoModID_ProtoModID_ARRAYSIZE = stReqPropose_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPropose_ProtoModID_descriptor();
inline const ::std::string& stReqPropose_ProtoModID_Name(stReqPropose_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPropose_ProtoModID_descriptor(), value);
}
inline bool stReqPropose_ProtoModID_Parse(
    const ::std::string& name, stReqPropose_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPropose_ProtoModID>(
    stReqPropose_ProtoModID_descriptor(), name, value);
}
enum stReqPropose_ProtoFunID {
  stReqPropose_ProtoFunID_FunID = 25
};
bool stReqPropose_ProtoFunID_IsValid(int value);
const stReqPropose_ProtoFunID stReqPropose_ProtoFunID_ProtoFunID_MIN = stReqPropose_ProtoFunID_FunID;
const stReqPropose_ProtoFunID stReqPropose_ProtoFunID_ProtoFunID_MAX = stReqPropose_ProtoFunID_FunID;
const int stReqPropose_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqPropose_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPropose_ProtoFunID_descriptor();
inline const ::std::string& stReqPropose_ProtoFunID_Name(stReqPropose_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPropose_ProtoFunID_descriptor(), value);
}
inline bool stReqPropose_ProtoFunID_Parse(
    const ::std::string& name, stReqPropose_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPropose_ProtoFunID>(
    stReqPropose_ProtoFunID_descriptor(), name, value);
}
enum RejectMarry_Result {
  RejectMarry_Result_RESULT_SUCCESS = 1,
  RejectMarry_Result_RESULT_ERROR_FRIEND = 2,
  RejectMarry_Result_RESULT_ERROR_ONLINE = 3,
  RejectMarry_Result_RESULT_ERROR_SEX = 4,
  RejectMarry_Result_RESULT_ERROR_MARRIED = 5,
  RejectMarry_Result_RESULT_ERROR_TICK1 = 6,
  RejectMarry_Result_RESULT_ERROR_TICK2 = 7
};
bool RejectMarry_Result_IsValid(int value);
const RejectMarry_Result RejectMarry_Result_Result_MIN = RejectMarry_Result_RESULT_SUCCESS;
const RejectMarry_Result RejectMarry_Result_Result_MAX = RejectMarry_Result_RESULT_ERROR_TICK2;
const int RejectMarry_Result_Result_ARRAYSIZE = RejectMarry_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* RejectMarry_Result_descriptor();
inline const ::std::string& RejectMarry_Result_Name(RejectMarry_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    RejectMarry_Result_descriptor(), value);
}
inline bool RejectMarry_Result_Parse(
    const ::std::string& name, RejectMarry_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RejectMarry_Result>(
    RejectMarry_Result_descriptor(), name, value);
}
enum RejectMarry_ProtoModID {
  RejectMarry_ProtoModID_ModID = 5
};
bool RejectMarry_ProtoModID_IsValid(int value);
const RejectMarry_ProtoModID RejectMarry_ProtoModID_ProtoModID_MIN = RejectMarry_ProtoModID_ModID;
const RejectMarry_ProtoModID RejectMarry_ProtoModID_ProtoModID_MAX = RejectMarry_ProtoModID_ModID;
const int RejectMarry_ProtoModID_ProtoModID_ARRAYSIZE = RejectMarry_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* RejectMarry_ProtoModID_descriptor();
inline const ::std::string& RejectMarry_ProtoModID_Name(RejectMarry_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    RejectMarry_ProtoModID_descriptor(), value);
}
inline bool RejectMarry_ProtoModID_Parse(
    const ::std::string& name, RejectMarry_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RejectMarry_ProtoModID>(
    RejectMarry_ProtoModID_descriptor(), name, value);
}
enum RejectMarry_ProtoFunID {
  RejectMarry_ProtoFunID_FunID = 26
};
bool RejectMarry_ProtoFunID_IsValid(int value);
const RejectMarry_ProtoFunID RejectMarry_ProtoFunID_ProtoFunID_MIN = RejectMarry_ProtoFunID_FunID;
const RejectMarry_ProtoFunID RejectMarry_ProtoFunID_ProtoFunID_MAX = RejectMarry_ProtoFunID_FunID;
const int RejectMarry_ProtoFunID_ProtoFunID_ARRAYSIZE = RejectMarry_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* RejectMarry_ProtoFunID_descriptor();
inline const ::std::string& RejectMarry_ProtoFunID_Name(RejectMarry_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    RejectMarry_ProtoFunID_descriptor(), value);
}
inline bool RejectMarry_ProtoFunID_Parse(
    const ::std::string& name, RejectMarry_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RejectMarry_ProtoFunID>(
    RejectMarry_ProtoFunID_descriptor(), name, value);
}
enum ProposeResult_Result {
  ProposeResult_Result_RESULT_SUCCESS = 1,
  ProposeResult_Result_RESULT_REFUSE = 2
};
bool ProposeResult_Result_IsValid(int value);
const ProposeResult_Result ProposeResult_Result_Result_MIN = ProposeResult_Result_RESULT_SUCCESS;
const ProposeResult_Result ProposeResult_Result_Result_MAX = ProposeResult_Result_RESULT_REFUSE;
const int ProposeResult_Result_Result_ARRAYSIZE = ProposeResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProposeResult_Result_descriptor();
inline const ::std::string& ProposeResult_Result_Name(ProposeResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProposeResult_Result_descriptor(), value);
}
inline bool ProposeResult_Result_Parse(
    const ::std::string& name, ProposeResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProposeResult_Result>(
    ProposeResult_Result_descriptor(), name, value);
}
enum ProposeResult_ProtoModID {
  ProposeResult_ProtoModID_ModID = 5
};
bool ProposeResult_ProtoModID_IsValid(int value);
const ProposeResult_ProtoModID ProposeResult_ProtoModID_ProtoModID_MIN = ProposeResult_ProtoModID_ModID;
const ProposeResult_ProtoModID ProposeResult_ProtoModID_ProtoModID_MAX = ProposeResult_ProtoModID_ModID;
const int ProposeResult_ProtoModID_ProtoModID_ARRAYSIZE = ProposeResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProposeResult_ProtoModID_descriptor();
inline const ::std::string& ProposeResult_ProtoModID_Name(ProposeResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProposeResult_ProtoModID_descriptor(), value);
}
inline bool ProposeResult_ProtoModID_Parse(
    const ::std::string& name, ProposeResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProposeResult_ProtoModID>(
    ProposeResult_ProtoModID_descriptor(), name, value);
}
enum ProposeResult_ProtoFunID {
  ProposeResult_ProtoFunID_FunID = 27
};
bool ProposeResult_ProtoFunID_IsValid(int value);
const ProposeResult_ProtoFunID ProposeResult_ProtoFunID_ProtoFunID_MIN = ProposeResult_ProtoFunID_FunID;
const ProposeResult_ProtoFunID ProposeResult_ProtoFunID_ProtoFunID_MAX = ProposeResult_ProtoFunID_FunID;
const int ProposeResult_ProtoFunID_ProtoFunID_ARRAYSIZE = ProposeResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProposeResult_ProtoFunID_descriptor();
inline const ::std::string& ProposeResult_ProtoFunID_Name(ProposeResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProposeResult_ProtoFunID_descriptor(), value);
}
inline bool ProposeResult_ProtoFunID_Parse(
    const ::std::string& name, ProposeResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProposeResult_ProtoFunID>(
    ProposeResult_ProtoFunID_descriptor(), name, value);
}
enum stReqAgreeMarry_Result {
  stReqAgreeMarry_Result_RESULT_AGREE = 1,
  stReqAgreeMarry_Result_RESULT_REFUSE = 2
};
bool stReqAgreeMarry_Result_IsValid(int value);
const stReqAgreeMarry_Result stReqAgreeMarry_Result_Result_MIN = stReqAgreeMarry_Result_RESULT_AGREE;
const stReqAgreeMarry_Result stReqAgreeMarry_Result_Result_MAX = stReqAgreeMarry_Result_RESULT_REFUSE;
const int stReqAgreeMarry_Result_Result_ARRAYSIZE = stReqAgreeMarry_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_Result_descriptor();
inline const ::std::string& stReqAgreeMarry_Result_Name(stReqAgreeMarry_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAgreeMarry_Result_descriptor(), value);
}
inline bool stReqAgreeMarry_Result_Parse(
    const ::std::string& name, stReqAgreeMarry_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAgreeMarry_Result>(
    stReqAgreeMarry_Result_descriptor(), name, value);
}
enum stReqAgreeMarry_ProtoModID {
  stReqAgreeMarry_ProtoModID_ModID = 5
};
bool stReqAgreeMarry_ProtoModID_IsValid(int value);
const stReqAgreeMarry_ProtoModID stReqAgreeMarry_ProtoModID_ProtoModID_MIN = stReqAgreeMarry_ProtoModID_ModID;
const stReqAgreeMarry_ProtoModID stReqAgreeMarry_ProtoModID_ProtoModID_MAX = stReqAgreeMarry_ProtoModID_ModID;
const int stReqAgreeMarry_ProtoModID_ProtoModID_ARRAYSIZE = stReqAgreeMarry_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_ProtoModID_descriptor();
inline const ::std::string& stReqAgreeMarry_ProtoModID_Name(stReqAgreeMarry_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAgreeMarry_ProtoModID_descriptor(), value);
}
inline bool stReqAgreeMarry_ProtoModID_Parse(
    const ::std::string& name, stReqAgreeMarry_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAgreeMarry_ProtoModID>(
    stReqAgreeMarry_ProtoModID_descriptor(), name, value);
}
enum stReqAgreeMarry_ProtoFunID {
  stReqAgreeMarry_ProtoFunID_FunID = 28
};
bool stReqAgreeMarry_ProtoFunID_IsValid(int value);
const stReqAgreeMarry_ProtoFunID stReqAgreeMarry_ProtoFunID_ProtoFunID_MIN = stReqAgreeMarry_ProtoFunID_FunID;
const stReqAgreeMarry_ProtoFunID stReqAgreeMarry_ProtoFunID_ProtoFunID_MAX = stReqAgreeMarry_ProtoFunID_FunID;
const int stReqAgreeMarry_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAgreeMarry_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_ProtoFunID_descriptor();
inline const ::std::string& stReqAgreeMarry_ProtoFunID_Name(stReqAgreeMarry_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAgreeMarry_ProtoFunID_descriptor(), value);
}
inline bool stReqAgreeMarry_ProtoFunID_Parse(
    const ::std::string& name, stReqAgreeMarry_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAgreeMarry_ProtoFunID>(
    stReqAgreeMarry_ProtoFunID_descriptor(), name, value);
}
enum stReqCancelMarry_ProtoModID {
  stReqCancelMarry_ProtoModID_ModID = 5
};
bool stReqCancelMarry_ProtoModID_IsValid(int value);
const stReqCancelMarry_ProtoModID stReqCancelMarry_ProtoModID_ProtoModID_MIN = stReqCancelMarry_ProtoModID_ModID;
const stReqCancelMarry_ProtoModID stReqCancelMarry_ProtoModID_ProtoModID_MAX = stReqCancelMarry_ProtoModID_ModID;
const int stReqCancelMarry_ProtoModID_ProtoModID_ARRAYSIZE = stReqCancelMarry_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCancelMarry_ProtoModID_descriptor();
inline const ::std::string& stReqCancelMarry_ProtoModID_Name(stReqCancelMarry_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCancelMarry_ProtoModID_descriptor(), value);
}
inline bool stReqCancelMarry_ProtoModID_Parse(
    const ::std::string& name, stReqCancelMarry_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCancelMarry_ProtoModID>(
    stReqCancelMarry_ProtoModID_descriptor(), name, value);
}
enum stReqCancelMarry_ProtoFunID {
  stReqCancelMarry_ProtoFunID_FunID = 29
};
bool stReqCancelMarry_ProtoFunID_IsValid(int value);
const stReqCancelMarry_ProtoFunID stReqCancelMarry_ProtoFunID_ProtoFunID_MIN = stReqCancelMarry_ProtoFunID_FunID;
const stReqCancelMarry_ProtoFunID stReqCancelMarry_ProtoFunID_ProtoFunID_MAX = stReqCancelMarry_ProtoFunID_FunID;
const int stReqCancelMarry_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCancelMarry_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCancelMarry_ProtoFunID_descriptor();
inline const ::std::string& stReqCancelMarry_ProtoFunID_Name(stReqCancelMarry_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCancelMarry_ProtoFunID_descriptor(), value);
}
inline bool stReqCancelMarry_ProtoFunID_Parse(
    const ::std::string& name, stReqCancelMarry_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCancelMarry_ProtoFunID>(
    stReqCancelMarry_ProtoFunID_descriptor(), name, value);
}
enum NotifyCancelMarry_ProtoModID {
  NotifyCancelMarry_ProtoModID_ModID = 5
};
bool NotifyCancelMarry_ProtoModID_IsValid(int value);
const NotifyCancelMarry_ProtoModID NotifyCancelMarry_ProtoModID_ProtoModID_MIN = NotifyCancelMarry_ProtoModID_ModID;
const NotifyCancelMarry_ProtoModID NotifyCancelMarry_ProtoModID_ProtoModID_MAX = NotifyCancelMarry_ProtoModID_ModID;
const int NotifyCancelMarry_ProtoModID_ProtoModID_ARRAYSIZE = NotifyCancelMarry_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyCancelMarry_ProtoModID_descriptor();
inline const ::std::string& NotifyCancelMarry_ProtoModID_Name(NotifyCancelMarry_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyCancelMarry_ProtoModID_descriptor(), value);
}
inline bool NotifyCancelMarry_ProtoModID_Parse(
    const ::std::string& name, NotifyCancelMarry_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyCancelMarry_ProtoModID>(
    NotifyCancelMarry_ProtoModID_descriptor(), name, value);
}
enum NotifyCancelMarry_ProtoFunID {
  NotifyCancelMarry_ProtoFunID_FunID = 30
};
bool NotifyCancelMarry_ProtoFunID_IsValid(int value);
const NotifyCancelMarry_ProtoFunID NotifyCancelMarry_ProtoFunID_ProtoFunID_MIN = NotifyCancelMarry_ProtoFunID_FunID;
const NotifyCancelMarry_ProtoFunID NotifyCancelMarry_ProtoFunID_ProtoFunID_MAX = NotifyCancelMarry_ProtoFunID_FunID;
const int NotifyCancelMarry_ProtoFunID_ProtoFunID_ARRAYSIZE = NotifyCancelMarry_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyCancelMarry_ProtoFunID_descriptor();
inline const ::std::string& NotifyCancelMarry_ProtoFunID_Name(NotifyCancelMarry_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyCancelMarry_ProtoFunID_descriptor(), value);
}
inline bool NotifyCancelMarry_ProtoFunID_Parse(
    const ::std::string& name, NotifyCancelMarry_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyCancelMarry_ProtoFunID>(
    NotifyCancelMarry_ProtoFunID_descriptor(), name, value);
}
enum NotifyAgree_Result {
  NotifyAgree_Result_RESULT_SUCCESS = 1,
  NotifyAgree_Result_RESULT_ONLINE = 2,
  NotifyAgree_Result_RESULT_CANCEL = 3,
  NotifyAgree_Result_RESULT_WEDDING = 4
};
bool NotifyAgree_Result_IsValid(int value);
const NotifyAgree_Result NotifyAgree_Result_Result_MIN = NotifyAgree_Result_RESULT_SUCCESS;
const NotifyAgree_Result NotifyAgree_Result_Result_MAX = NotifyAgree_Result_RESULT_WEDDING;
const int NotifyAgree_Result_Result_ARRAYSIZE = NotifyAgree_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyAgree_Result_descriptor();
inline const ::std::string& NotifyAgree_Result_Name(NotifyAgree_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyAgree_Result_descriptor(), value);
}
inline bool NotifyAgree_Result_Parse(
    const ::std::string& name, NotifyAgree_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyAgree_Result>(
    NotifyAgree_Result_descriptor(), name, value);
}
enum NotifyAgree_ProtoModID {
  NotifyAgree_ProtoModID_ModID = 5
};
bool NotifyAgree_ProtoModID_IsValid(int value);
const NotifyAgree_ProtoModID NotifyAgree_ProtoModID_ProtoModID_MIN = NotifyAgree_ProtoModID_ModID;
const NotifyAgree_ProtoModID NotifyAgree_ProtoModID_ProtoModID_MAX = NotifyAgree_ProtoModID_ModID;
const int NotifyAgree_ProtoModID_ProtoModID_ARRAYSIZE = NotifyAgree_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyAgree_ProtoModID_descriptor();
inline const ::std::string& NotifyAgree_ProtoModID_Name(NotifyAgree_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyAgree_ProtoModID_descriptor(), value);
}
inline bool NotifyAgree_ProtoModID_Parse(
    const ::std::string& name, NotifyAgree_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyAgree_ProtoModID>(
    NotifyAgree_ProtoModID_descriptor(), name, value);
}
enum NotifyAgree_ProtoFunID {
  NotifyAgree_ProtoFunID_FunID = 31
};
bool NotifyAgree_ProtoFunID_IsValid(int value);
const NotifyAgree_ProtoFunID NotifyAgree_ProtoFunID_ProtoFunID_MIN = NotifyAgree_ProtoFunID_FunID;
const NotifyAgree_ProtoFunID NotifyAgree_ProtoFunID_ProtoFunID_MAX = NotifyAgree_ProtoFunID_FunID;
const int NotifyAgree_ProtoFunID_ProtoFunID_ARRAYSIZE = NotifyAgree_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyAgree_ProtoFunID_descriptor();
inline const ::std::string& NotifyAgree_ProtoFunID_Name(NotifyAgree_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyAgree_ProtoFunID_descriptor(), value);
}
inline bool NotifyAgree_ProtoFunID_Parse(
    const ::std::string& name, NotifyAgree_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyAgree_ProtoFunID>(
    NotifyAgree_ProtoFunID_descriptor(), name, value);
}
enum NotifyFriendType {
  NOTIFY_ONLINE = 1,
  NOTIFY_OFFLINE = 2
};
bool NotifyFriendType_IsValid(int value);
const NotifyFriendType NotifyFriendType_MIN = NOTIFY_ONLINE;
const NotifyFriendType NotifyFriendType_MAX = NOTIFY_OFFLINE;
const int NotifyFriendType_ARRAYSIZE = NotifyFriendType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyFriendType_descriptor();
inline const ::std::string& NotifyFriendType_Name(NotifyFriendType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyFriendType_descriptor(), value);
}
inline bool NotifyFriendType_Parse(
    const ::std::string& name, NotifyFriendType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyFriendType>(
    NotifyFriendType_descriptor(), name, value);
}
enum eFetchLilianType {
  FETCH_ONE = 1,
  FETCH_ALL = 2
};
bool eFetchLilianType_IsValid(int value);
const eFetchLilianType eFetchLilianType_MIN = FETCH_ONE;
const eFetchLilianType eFetchLilianType_MAX = FETCH_ALL;
const int eFetchLilianType_ARRAYSIZE = eFetchLilianType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eFetchLilianType_descriptor();
inline const ::std::string& eFetchLilianType_Name(eFetchLilianType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eFetchLilianType_descriptor(), value);
}
inline bool eFetchLilianType_Parse(
    const ::std::string& name, eFetchLilianType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eFetchLilianType>(
    eFetchLilianType_descriptor(), name, value);
}
// ===================================================================

class stSynFriendInfo : public ::google::protobuf::Message {
 public:
  stSynFriendInfo();
  virtual ~stSynFriendInfo();

  stSynFriendInfo(const stSynFriendInfo& from);

  inline stSynFriendInfo& operator=(const stSynFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynFriendInfo& default_instance();

  void Swap(stSynFriendInfo* other);

  // implements Message ----------------------------------------------

  stSynFriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynFriendInfo& from);
  void MergeFrom(const stSynFriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional bool online = 6;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 6;
  inline bool online() const;
  inline void set_online(bool value);

  // optional uint32 battlePower = 7;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 7;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional string lastLoginTime = 8;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 8;
  inline const ::std::string& lastlogintime() const;
  inline void set_lastlogintime(const ::std::string& value);
  inline void set_lastlogintime(const char* value);
  inline void set_lastlogintime(const char* value, size_t size);
  inline ::std::string* mutable_lastlogintime();
  inline ::std::string* release_lastlogintime();
  inline void set_allocated_lastlogintime(::std::string* lastlogintime);

  // optional uint32 photoID = 9;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 9;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stSynFriendInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  bool online_;
  ::google::protobuf::uint32 battlepower_;
  ::std::string* lastlogintime_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stSynFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynAllFriend : public ::google::protobuf::Message {
 public:
  stSynAllFriend();
  virtual ~stSynAllFriend();

  stSynAllFriend(const stSynAllFriend& from);

  inline stSynAllFriend& operator=(const stSynAllFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynAllFriend& default_instance();

  void Swap(stSynAllFriend* other);

  // implements Message ----------------------------------------------

  stSynAllFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynAllFriend& from);
  void MergeFrom(const stSynAllFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynAllFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynAllFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynAllFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynAllFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynAllFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynAllFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynAllFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynAllFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynAllFriend_ProtoModID_Parse(name, value);
  }

  typedef stSynAllFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynAllFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynAllFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynAllFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynAllFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynAllFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynAllFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynAllFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynAllFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .FriendProto.stSynFriendInfo allFriend = 1;
  inline int allfriend_size() const;
  inline void clear_allfriend();
  static const int kAllFriendFieldNumber = 1;
  inline const ::FriendProto::stSynFriendInfo& allfriend(int index) const;
  inline ::FriendProto::stSynFriendInfo* mutable_allfriend(int index);
  inline ::FriendProto::stSynFriendInfo* add_allfriend();
  inline const ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynFriendInfo >&
      allfriend() const;
  inline ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynFriendInfo >*
      mutable_allfriend();

  // optional uint32 fetchLilianNum = 2;
  inline bool has_fetchliliannum() const;
  inline void clear_fetchliliannum();
  static const int kFetchLilianNumFieldNumber = 2;
  inline ::google::protobuf::uint32 fetchliliannum() const;
  inline void set_fetchliliannum(::google::protobuf::uint32 value);

  // repeated uint32 hasGiveLilianCharID = 3;
  inline int hasgiveliliancharid_size() const;
  inline void clear_hasgiveliliancharid();
  static const int kHasGiveLilianCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 hasgiveliliancharid(int index) const;
  inline void set_hasgiveliliancharid(int index, ::google::protobuf::uint32 value);
  inline void add_hasgiveliliancharid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hasgiveliliancharid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hasgiveliliancharid();

  // @@protoc_insertion_point(class_scope:FriendProto.stSynAllFriend)
 private:
  inline void set_has_fetchliliannum();
  inline void clear_has_fetchliliannum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynFriendInfo > allfriend_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hasgiveliliancharid_;
  ::google::protobuf::uint32 fetchliliannum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stSynAllFriend* default_instance_;
};
// -------------------------------------------------------------------

class stReqAddOneFriend : public ::google::protobuf::Message {
 public:
  stReqAddOneFriend();
  virtual ~stReqAddOneFriend();

  stReqAddOneFriend(const stReqAddOneFriend& from);

  inline stReqAddOneFriend& operator=(const stReqAddOneFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAddOneFriend& default_instance();

  void Swap(stReqAddOneFriend* other);

  // implements Message ----------------------------------------------

  stReqAddOneFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAddOneFriend& from);
  void MergeFrom(const stReqAddOneFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAddOneFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAddOneFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAddOneFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAddOneFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAddOneFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAddOneFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAddOneFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAddOneFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAddOneFriend_ProtoModID_Parse(name, value);
  }

  typedef stReqAddOneFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAddOneFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAddOneFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAddOneFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAddOneFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAddOneFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAddOneFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAddOneFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAddOneFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stReqAddOneFriend)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stReqAddOneFriend* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyAddOneFriend : public ::google::protobuf::Message {
 public:
  stNotifyAddOneFriend();
  virtual ~stNotifyAddOneFriend();

  stNotifyAddOneFriend(const stNotifyAddOneFriend& from);

  inline stNotifyAddOneFriend& operator=(const stNotifyAddOneFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyAddOneFriend& default_instance();

  void Swap(stNotifyAddOneFriend* other);

  // implements Message ----------------------------------------------

  stNotifyAddOneFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyAddOneFriend& from);
  void MergeFrom(const stNotifyAddOneFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyAddOneFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyAddOneFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyAddOneFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyAddOneFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyAddOneFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyAddOneFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyAddOneFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyAddOneFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyAddOneFriend_ProtoModID_Parse(name, value);
  }

  typedef stNotifyAddOneFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyAddOneFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyAddOneFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyAddOneFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyAddOneFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyAddOneFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyAddOneFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyAddOneFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyAddOneFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .FriendProto.stSynFriendInfo data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::FriendProto::stSynFriendInfo& data() const;
  inline ::FriendProto::stSynFriendInfo* mutable_data();
  inline ::FriendProto::stSynFriendInfo* release_data();
  inline void set_allocated_data(::FriendProto::stSynFriendInfo* data);

  // @@protoc_insertion_point(class_scope:FriendProto.stNotifyAddOneFriend)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::FriendProto::stSynFriendInfo* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stNotifyAddOneFriend* default_instance_;
};
// -------------------------------------------------------------------

class stAddFriendTip : public ::google::protobuf::Message {
 public:
  stAddFriendTip();
  virtual ~stAddFriendTip();

  stAddFriendTip(const stAddFriendTip& from);

  inline stAddFriendTip& operator=(const stAddFriendTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddFriendTip& default_instance();

  void Swap(stAddFriendTip* other);

  // implements Message ----------------------------------------------

  stAddFriendTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddFriendTip& from);
  void MergeFrom(const stAddFriendTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAddFriendTip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAddFriendTip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAddFriendTip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAddFriendTip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAddFriendTip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAddFriendTip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAddFriendTip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAddFriendTip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAddFriendTip_ProtoModID_Parse(name, value);
  }

  typedef stAddFriendTip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAddFriendTip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAddFriendTip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAddFriendTip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAddFriendTip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAddFriendTip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAddFriendTip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAddFriendTip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAddFriendTip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:FriendProto.stAddFriendTip)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stAddFriendTip* default_instance_;
};
// -------------------------------------------------------------------

class stDelFriend : public ::google::protobuf::Message {
 public:
  stDelFriend();
  virtual ~stDelFriend();

  stDelFriend(const stDelFriend& from);

  inline stDelFriend& operator=(const stDelFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDelFriend& default_instance();

  void Swap(stDelFriend* other);

  // implements Message ----------------------------------------------

  stDelFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDelFriend& from);
  void MergeFrom(const stDelFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDelFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDelFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDelFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDelFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDelFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDelFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDelFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDelFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDelFriend_ProtoModID_Parse(name, value);
  }

  typedef stDelFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDelFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDelFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDelFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDelFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDelFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDelFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDelFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDelFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stDelFriend)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stDelFriend* default_instance_;
};
// -------------------------------------------------------------------

class stFindAndAddFriend : public ::google::protobuf::Message {
 public:
  stFindAndAddFriend();
  virtual ~stFindAndAddFriend();

  stFindAndAddFriend(const stFindAndAddFriend& from);

  inline stFindAndAddFriend& operator=(const stFindAndAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFindAndAddFriend& default_instance();

  void Swap(stFindAndAddFriend* other);

  // implements Message ----------------------------------------------

  stFindAndAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFindAndAddFriend& from);
  void MergeFrom(const stFindAndAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stFindAndAddFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stFindAndAddFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stFindAndAddFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stFindAndAddFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stFindAndAddFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stFindAndAddFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stFindAndAddFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stFindAndAddFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stFindAndAddFriend_ProtoModID_Parse(name, value);
  }

  typedef stFindAndAddFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stFindAndAddFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stFindAndAddFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stFindAndAddFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stFindAndAddFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stFindAndAddFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stFindAndAddFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stFindAndAddFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stFindAndAddFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:FriendProto.stFindAndAddFriend)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stFindAndAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class stFindAndAddFriendResult : public ::google::protobuf::Message {
 public:
  stFindAndAddFriendResult();
  virtual ~stFindAndAddFriendResult();

  stFindAndAddFriendResult(const stFindAndAddFriendResult& from);

  inline stFindAndAddFriendResult& operator=(const stFindAndAddFriendResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFindAndAddFriendResult& default_instance();

  void Swap(stFindAndAddFriendResult* other);

  // implements Message ----------------------------------------------

  stFindAndAddFriendResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFindAndAddFriendResult& from);
  void MergeFrom(const stFindAndAddFriendResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stFindAndAddFriendResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stFindAndAddFriendResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stFindAndAddFriendResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stFindAndAddFriendResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stFindAndAddFriendResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stFindAndAddFriendResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stFindAndAddFriendResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stFindAndAddFriendResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stFindAndAddFriendResult_ProtoModID_Parse(name, value);
  }

  typedef stFindAndAddFriendResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stFindAndAddFriendResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stFindAndAddFriendResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stFindAndAddFriendResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stFindAndAddFriendResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stFindAndAddFriendResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stFindAndAddFriendResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stFindAndAddFriendResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stFindAndAddFriendResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:FriendProto.stFindAndAddFriendResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stFindAndAddFriendResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqApplyAddFriendList : public ::google::protobuf::Message {
 public:
  stReqApplyAddFriendList();
  virtual ~stReqApplyAddFriendList();

  stReqApplyAddFriendList(const stReqApplyAddFriendList& from);

  inline stReqApplyAddFriendList& operator=(const stReqApplyAddFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqApplyAddFriendList& default_instance();

  void Swap(stReqApplyAddFriendList* other);

  // implements Message ----------------------------------------------

  stReqApplyAddFriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqApplyAddFriendList& from);
  void MergeFrom(const stReqApplyAddFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqApplyAddFriendList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqApplyAddFriendList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqApplyAddFriendList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqApplyAddFriendList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqApplyAddFriendList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqApplyAddFriendList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqApplyAddFriendList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqApplyAddFriendList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqApplyAddFriendList_ProtoModID_Parse(name, value);
  }

  typedef stReqApplyAddFriendList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqApplyAddFriendList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqApplyAddFriendList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqApplyAddFriendList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqApplyAddFriendList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqApplyAddFriendList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqApplyAddFriendList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqApplyAddFriendList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqApplyAddFriendList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stReqApplyAddFriendList)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stReqApplyAddFriendList* default_instance_;
};
// -------------------------------------------------------------------

class stSynApplyerInfo : public ::google::protobuf::Message {
 public:
  stSynApplyerInfo();
  virtual ~stSynApplyerInfo();

  stSynApplyerInfo(const stSynApplyerInfo& from);

  inline stSynApplyerInfo& operator=(const stSynApplyerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynApplyerInfo& default_instance();

  void Swap(stSynApplyerInfo* other);

  // implements Message ----------------------------------------------

  stSynApplyerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynApplyerInfo& from);
  void MergeFrom(const stSynApplyerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 applyDiffTime = 6;
  inline bool has_applydifftime() const;
  inline void clear_applydifftime();
  static const int kApplyDiffTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 applydifftime() const;
  inline void set_applydifftime(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 7;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 7;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 photoID = 8;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 8;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stSynApplyerInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_applydifftime();
  inline void clear_has_applydifftime();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 applydifftime_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stSynApplyerInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetApplyAddFriendList : public ::google::protobuf::Message {
 public:
  stRetApplyAddFriendList();
  virtual ~stRetApplyAddFriendList();

  stRetApplyAddFriendList(const stRetApplyAddFriendList& from);

  inline stRetApplyAddFriendList& operator=(const stRetApplyAddFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetApplyAddFriendList& default_instance();

  void Swap(stRetApplyAddFriendList* other);

  // implements Message ----------------------------------------------

  stRetApplyAddFriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetApplyAddFriendList& from);
  void MergeFrom(const stRetApplyAddFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetApplyAddFriendList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetApplyAddFriendList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetApplyAddFriendList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetApplyAddFriendList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetApplyAddFriendList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetApplyAddFriendList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetApplyAddFriendList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetApplyAddFriendList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetApplyAddFriendList_ProtoModID_Parse(name, value);
  }

  typedef stRetApplyAddFriendList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetApplyAddFriendList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetApplyAddFriendList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetApplyAddFriendList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetApplyAddFriendList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetApplyAddFriendList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetApplyAddFriendList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetApplyAddFriendList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetApplyAddFriendList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .FriendProto.stSynApplyerInfo applyerList = 1;
  inline int applyerlist_size() const;
  inline void clear_applyerlist();
  static const int kApplyerListFieldNumber = 1;
  inline const ::FriendProto::stSynApplyerInfo& applyerlist(int index) const;
  inline ::FriendProto::stSynApplyerInfo* mutable_applyerlist(int index);
  inline ::FriendProto::stSynApplyerInfo* add_applyerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynApplyerInfo >&
      applyerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynApplyerInfo >*
      mutable_applyerlist();

  // @@protoc_insertion_point(class_scope:FriendProto.stRetApplyAddFriendList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynApplyerInfo > applyerlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stRetApplyAddFriendList* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyFriend : public ::google::protobuf::Message {
 public:
  stNotifyFriend();
  virtual ~stNotifyFriend();

  stNotifyFriend(const stNotifyFriend& from);

  inline stNotifyFriend& operator=(const stNotifyFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyFriend& default_instance();

  void Swap(stNotifyFriend* other);

  // implements Message ----------------------------------------------

  stNotifyFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyFriend& from);
  void MergeFrom(const stNotifyFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyFriend_ProtoModID_Parse(name, value);
  }

  typedef stNotifyFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional .FriendProto.NotifyFriendType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::FriendProto::NotifyFriendType type() const;
  inline void set_type(::FriendProto::NotifyFriendType value);

  // @@protoc_insertion_point(class_scope:FriendProto.stNotifyFriend)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stNotifyFriend* default_instance_;
};
// -------------------------------------------------------------------

class stSynRecommondChar : public ::google::protobuf::Message {
 public:
  stSynRecommondChar();
  virtual ~stSynRecommondChar();

  stSynRecommondChar(const stSynRecommondChar& from);

  inline stSynRecommondChar& operator=(const stSynRecommondChar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRecommondChar& default_instance();

  void Swap(stSynRecommondChar* other);

  // implements Message ----------------------------------------------

  stSynRecommondChar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRecommondChar& from);
  void MergeFrom(const stSynRecommondChar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 5;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 5;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 photoID = 7;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 7;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stSynRecommondChar)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stSynRecommondChar* default_instance_;
};
// -------------------------------------------------------------------

class stReqRecommondFriend : public ::google::protobuf::Message {
 public:
  stReqRecommondFriend();
  virtual ~stReqRecommondFriend();

  stReqRecommondFriend(const stReqRecommondFriend& from);

  inline stReqRecommondFriend& operator=(const stReqRecommondFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRecommondFriend& default_instance();

  void Swap(stReqRecommondFriend* other);

  // implements Message ----------------------------------------------

  stReqRecommondFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRecommondFriend& from);
  void MergeFrom(const stReqRecommondFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRecommondFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRecommondFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRecommondFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRecommondFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRecommondFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRecommondFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRecommondFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRecommondFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRecommondFriend_ProtoModID_Parse(name, value);
  }

  typedef stReqRecommondFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRecommondFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRecommondFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRecommondFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRecommondFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRecommondFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRecommondFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRecommondFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRecommondFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stReqRecommondFriend)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stReqRecommondFriend* default_instance_;
};
// -------------------------------------------------------------------

class stRecommondFriendList : public ::google::protobuf::Message {
 public:
  stRecommondFriendList();
  virtual ~stRecommondFriendList();

  stRecommondFriendList(const stRecommondFriendList& from);

  inline stRecommondFriendList& operator=(const stRecommondFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRecommondFriendList& default_instance();

  void Swap(stRecommondFriendList* other);

  // implements Message ----------------------------------------------

  stRecommondFriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRecommondFriendList& from);
  void MergeFrom(const stRecommondFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRecommondFriendList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRecommondFriendList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRecommondFriendList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRecommondFriendList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRecommondFriendList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRecommondFriendList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRecommondFriendList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRecommondFriendList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRecommondFriendList_ProtoModID_Parse(name, value);
  }

  typedef stRecommondFriendList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRecommondFriendList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRecommondFriendList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRecommondFriendList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRecommondFriendList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRecommondFriendList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRecommondFriendList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRecommondFriendList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRecommondFriendList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .FriendProto.stSynRecommondChar charList = 1;
  inline int charlist_size() const;
  inline void clear_charlist();
  static const int kCharListFieldNumber = 1;
  inline const ::FriendProto::stSynRecommondChar& charlist(int index) const;
  inline ::FriendProto::stSynRecommondChar* mutable_charlist(int index);
  inline ::FriendProto::stSynRecommondChar* add_charlist();
  inline const ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynRecommondChar >&
      charlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynRecommondChar >*
      mutable_charlist();

  // @@protoc_insertion_point(class_scope:FriendProto.stRecommondFriendList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynRecommondChar > charlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stRecommondFriendList* default_instance_;
};
// -------------------------------------------------------------------

class stGiveLilian2Friend : public ::google::protobuf::Message {
 public:
  stGiveLilian2Friend();
  virtual ~stGiveLilian2Friend();

  stGiveLilian2Friend(const stGiveLilian2Friend& from);

  inline stGiveLilian2Friend& operator=(const stGiveLilian2Friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGiveLilian2Friend& default_instance();

  void Swap(stGiveLilian2Friend* other);

  // implements Message ----------------------------------------------

  stGiveLilian2Friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGiveLilian2Friend& from);
  void MergeFrom(const stGiveLilian2Friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGiveLilian2Friend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGiveLilian2Friend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGiveLilian2Friend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGiveLilian2Friend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGiveLilian2Friend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGiveLilian2Friend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGiveLilian2Friend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGiveLilian2Friend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGiveLilian2Friend_ProtoModID_Parse(name, value);
  }

  typedef stGiveLilian2Friend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGiveLilian2Friend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGiveLilian2Friend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGiveLilian2Friend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGiveLilian2Friend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGiveLilian2Friend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGiveLilian2Friend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGiveLilian2Friend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGiveLilian2Friend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stGiveLilian2Friend)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stGiveLilian2Friend* default_instance_;
};
// -------------------------------------------------------------------

class stGiveLilianResult : public ::google::protobuf::Message {
 public:
  stGiveLilianResult();
  virtual ~stGiveLilianResult();

  stGiveLilianResult(const stGiveLilianResult& from);

  inline stGiveLilianResult& operator=(const stGiveLilianResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGiveLilianResult& default_instance();

  void Swap(stGiveLilianResult* other);

  // implements Message ----------------------------------------------

  stGiveLilianResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGiveLilianResult& from);
  void MergeFrom(const stGiveLilianResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGiveLilianResult_eResult eResult;
  static const eResult eSUCCESS = stGiveLilianResult_eResult_eSUCCESS;
  static const eResult eFAIL = stGiveLilianResult_eResult_eFAIL;
  static inline bool eResult_IsValid(int value) {
    return stGiveLilianResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGiveLilianResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGiveLilianResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGiveLilianResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGiveLilianResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGiveLilianResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGiveLilianResult_eResult_Parse(name, value);
  }

  typedef stGiveLilianResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGiveLilianResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGiveLilianResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGiveLilianResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGiveLilianResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGiveLilianResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGiveLilianResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGiveLilianResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGiveLilianResult_ProtoModID_Parse(name, value);
  }

  typedef stGiveLilianResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGiveLilianResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGiveLilianResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGiveLilianResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGiveLilianResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGiveLilianResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGiveLilianResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGiveLilianResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGiveLilianResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional .FriendProto.stGiveLilianResult.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::FriendProto::stGiveLilianResult_eResult result() const;
  inline void set_result(::FriendProto::stGiveLilianResult_eResult value);

  // @@protoc_insertion_point(class_scope:FriendProto.stGiveLilianResult)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stGiveLilianResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqReceiveLilian : public ::google::protobuf::Message {
 public:
  stReqReceiveLilian();
  virtual ~stReqReceiveLilian();

  stReqReceiveLilian(const stReqReceiveLilian& from);

  inline stReqReceiveLilian& operator=(const stReqReceiveLilian& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqReceiveLilian& default_instance();

  void Swap(stReqReceiveLilian* other);

  // implements Message ----------------------------------------------

  stReqReceiveLilian* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqReceiveLilian& from);
  void MergeFrom(const stReqReceiveLilian& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqReceiveLilian_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqReceiveLilian_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqReceiveLilian_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqReceiveLilian_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqReceiveLilian_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqReceiveLilian_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqReceiveLilian_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqReceiveLilian_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqReceiveLilian_ProtoModID_Parse(name, value);
  }

  typedef stReqReceiveLilian_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqReceiveLilian_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqReceiveLilian_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqReceiveLilian_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqReceiveLilian_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqReceiveLilian_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqReceiveLilian_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqReceiveLilian_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqReceiveLilian_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stReqReceiveLilian)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stReqReceiveLilian* default_instance_;
};
// -------------------------------------------------------------------

class stReceiveLilianList : public ::google::protobuf::Message {
 public:
  stReceiveLilianList();
  virtual ~stReceiveLilianList();

  stReceiveLilianList(const stReceiveLilianList& from);

  inline stReceiveLilianList& operator=(const stReceiveLilianList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReceiveLilianList& default_instance();

  void Swap(stReceiveLilianList* other);

  // implements Message ----------------------------------------------

  stReceiveLilianList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReceiveLilianList& from);
  void MergeFrom(const stReceiveLilianList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReceiveLilianList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReceiveLilianList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReceiveLilianList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReceiveLilianList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReceiveLilianList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReceiveLilianList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReceiveLilianList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReceiveLilianList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReceiveLilianList_ProtoModID_Parse(name, value);
  }

  typedef stReceiveLilianList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReceiveLilianList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReceiveLilianList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReceiveLilianList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReceiveLilianList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReceiveLilianList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReceiveLilianList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReceiveLilianList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReceiveLilianList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 charIDs = 1;
  inline int charids_size() const;
  inline void clear_charids();
  static const int kCharIDsFieldNumber = 1;
  inline ::google::protobuf::uint32 charids(int index) const;
  inline void set_charids(int index, ::google::protobuf::uint32 value);
  inline void add_charids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      charids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_charids();

  // @@protoc_insertion_point(class_scope:FriendProto.stReceiveLilianList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > charids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stReceiveLilianList* default_instance_;
};
// -------------------------------------------------------------------

class stFetchLilian : public ::google::protobuf::Message {
 public:
  stFetchLilian();
  virtual ~stFetchLilian();

  stFetchLilian(const stFetchLilian& from);

  inline stFetchLilian& operator=(const stFetchLilian& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFetchLilian& default_instance();

  void Swap(stFetchLilian* other);

  // implements Message ----------------------------------------------

  stFetchLilian* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFetchLilian& from);
  void MergeFrom(const stFetchLilian& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stFetchLilian_ProtoModID ProtoModID;
  static const ProtoModID ModID = stFetchLilian_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stFetchLilian_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stFetchLilian_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stFetchLilian_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stFetchLilian_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stFetchLilian_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stFetchLilian_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stFetchLilian_ProtoModID_Parse(name, value);
  }

  typedef stFetchLilian_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stFetchLilian_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stFetchLilian_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stFetchLilian_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stFetchLilian_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stFetchLilian_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stFetchLilian_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stFetchLilian_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stFetchLilian_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .FriendProto.eFetchLilianType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::FriendProto::eFetchLilianType type() const;
  inline void set_type(::FriendProto::eFetchLilianType value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stFetchLilian)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stFetchLilian* default_instance_;
};
// -------------------------------------------------------------------

class stFetchLilianResult : public ::google::protobuf::Message {
 public:
  stFetchLilianResult();
  virtual ~stFetchLilianResult();

  stFetchLilianResult(const stFetchLilianResult& from);

  inline stFetchLilianResult& operator=(const stFetchLilianResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFetchLilianResult& default_instance();

  void Swap(stFetchLilianResult* other);

  // implements Message ----------------------------------------------

  stFetchLilianResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFetchLilianResult& from);
  void MergeFrom(const stFetchLilianResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stFetchLilianResult_eResult eResult;
  static const eResult eSUCCESS = stFetchLilianResult_eResult_eSUCCESS;
  static const eResult eNUM_USE_OUT = stFetchLilianResult_eResult_eNUM_USE_OUT;
  static const eResult eNOT_GIVE_LILIAN = stFetchLilianResult_eResult_eNOT_GIVE_LILIAN;
  static inline bool eResult_IsValid(int value) {
    return stFetchLilianResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stFetchLilianResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stFetchLilianResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stFetchLilianResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stFetchLilianResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stFetchLilianResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stFetchLilianResult_eResult_Parse(name, value);
  }

  typedef stFetchLilianResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stFetchLilianResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stFetchLilianResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stFetchLilianResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stFetchLilianResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stFetchLilianResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stFetchLilianResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stFetchLilianResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stFetchLilianResult_ProtoModID_Parse(name, value);
  }

  typedef stFetchLilianResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stFetchLilianResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stFetchLilianResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stFetchLilianResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stFetchLilianResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stFetchLilianResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stFetchLilianResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stFetchLilianResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stFetchLilianResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional .FriendProto.eFetchLilianType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::FriendProto::eFetchLilianType type() const;
  inline void set_type(::FriendProto::eFetchLilianType value);

  // @@protoc_insertion_point(class_scope:FriendProto.stFetchLilianResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 charid_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stFetchLilianResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqAdd2ApplyList : public ::google::protobuf::Message {
 public:
  stReqAdd2ApplyList();
  virtual ~stReqAdd2ApplyList();

  stReqAdd2ApplyList(const stReqAdd2ApplyList& from);

  inline stReqAdd2ApplyList& operator=(const stReqAdd2ApplyList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAdd2ApplyList& default_instance();

  void Swap(stReqAdd2ApplyList* other);

  // implements Message ----------------------------------------------

  stReqAdd2ApplyList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAdd2ApplyList& from);
  void MergeFrom(const stReqAdd2ApplyList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAdd2ApplyList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAdd2ApplyList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAdd2ApplyList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAdd2ApplyList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAdd2ApplyList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAdd2ApplyList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAdd2ApplyList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAdd2ApplyList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAdd2ApplyList_ProtoModID_Parse(name, value);
  }

  typedef stReqAdd2ApplyList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAdd2ApplyList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAdd2ApplyList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAdd2ApplyList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAdd2ApplyList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAdd2ApplyList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAdd2ApplyList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAdd2ApplyList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAdd2ApplyList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 otherID = 1;
  inline bool has_otherid() const;
  inline void clear_otherid();
  static const int kOtherIDFieldNumber = 1;
  inline ::google::protobuf::uint32 otherid() const;
  inline void set_otherid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stReqAdd2ApplyList)
 private:
  inline void set_has_otherid();
  inline void clear_has_otherid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 otherid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stReqAdd2ApplyList* default_instance_;
};
// -------------------------------------------------------------------

class stAdd2ApplyListResult : public ::google::protobuf::Message {
 public:
  stAdd2ApplyListResult();
  virtual ~stAdd2ApplyListResult();

  stAdd2ApplyListResult(const stAdd2ApplyListResult& from);

  inline stAdd2ApplyListResult& operator=(const stAdd2ApplyListResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAdd2ApplyListResult& default_instance();

  void Swap(stAdd2ApplyListResult* other);

  // implements Message ----------------------------------------------

  stAdd2ApplyListResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAdd2ApplyListResult& from);
  void MergeFrom(const stAdd2ApplyListResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAdd2ApplyListResult_eResult eResult;
  static const eResult eSUCCESS = stAdd2ApplyListResult_eResult_eSUCCESS;
  static const eResult eFAIL = stAdd2ApplyListResult_eResult_eFAIL;
  static inline bool eResult_IsValid(int value) {
    return stAdd2ApplyListResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stAdd2ApplyListResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stAdd2ApplyListResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stAdd2ApplyListResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stAdd2ApplyListResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stAdd2ApplyListResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stAdd2ApplyListResult_eResult_Parse(name, value);
  }

  typedef stAdd2ApplyListResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAdd2ApplyListResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAdd2ApplyListResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAdd2ApplyListResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAdd2ApplyListResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAdd2ApplyListResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAdd2ApplyListResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAdd2ApplyListResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAdd2ApplyListResult_ProtoModID_Parse(name, value);
  }

  typedef stAdd2ApplyListResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAdd2ApplyListResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAdd2ApplyListResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAdd2ApplyListResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAdd2ApplyListResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAdd2ApplyListResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAdd2ApplyListResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAdd2ApplyListResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAdd2ApplyListResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .FriendProto.stAdd2ApplyListResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::FriendProto::stAdd2ApplyListResult_eResult result() const;
  inline void set_result(::FriendProto::stAdd2ApplyListResult_eResult value);

  // @@protoc_insertion_point(class_scope:FriendProto.stAdd2ApplyListResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stAdd2ApplyListResult* default_instance_;
};
// -------------------------------------------------------------------

class stRefuseAddFriend : public ::google::protobuf::Message {
 public:
  stRefuseAddFriend();
  virtual ~stRefuseAddFriend();

  stRefuseAddFriend(const stRefuseAddFriend& from);

  inline stRefuseAddFriend& operator=(const stRefuseAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefuseAddFriend& default_instance();

  void Swap(stRefuseAddFriend* other);

  // implements Message ----------------------------------------------

  stRefuseAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefuseAddFriend& from);
  void MergeFrom(const stRefuseAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefuseAddFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefuseAddFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefuseAddFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefuseAddFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefuseAddFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefuseAddFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefuseAddFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefuseAddFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefuseAddFriend_ProtoModID_Parse(name, value);
  }

  typedef stRefuseAddFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefuseAddFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefuseAddFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefuseAddFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefuseAddFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefuseAddFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefuseAddFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefuseAddFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefuseAddFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stRefuseAddFriend)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stRefuseAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class stInvitePKWithFriend : public ::google::protobuf::Message {
 public:
  stInvitePKWithFriend();
  virtual ~stInvitePKWithFriend();

  stInvitePKWithFriend(const stInvitePKWithFriend& from);

  inline stInvitePKWithFriend& operator=(const stInvitePKWithFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInvitePKWithFriend& default_instance();

  void Swap(stInvitePKWithFriend* other);

  // implements Message ----------------------------------------------

  stInvitePKWithFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInvitePKWithFriend& from);
  void MergeFrom(const stInvitePKWithFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInvitePKWithFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInvitePKWithFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInvitePKWithFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInvitePKWithFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInvitePKWithFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInvitePKWithFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInvitePKWithFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInvitePKWithFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInvitePKWithFriend_ProtoModID_Parse(name, value);
  }

  typedef stInvitePKWithFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInvitePKWithFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInvitePKWithFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInvitePKWithFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInvitePKWithFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInvitePKWithFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInvitePKWithFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInvitePKWithFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInvitePKWithFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stInvitePKWithFriend)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stInvitePKWithFriend* default_instance_;
};
// -------------------------------------------------------------------

class stAskAgreePKWithFriend : public ::google::protobuf::Message {
 public:
  stAskAgreePKWithFriend();
  virtual ~stAskAgreePKWithFriend();

  stAskAgreePKWithFriend(const stAskAgreePKWithFriend& from);

  inline stAskAgreePKWithFriend& operator=(const stAskAgreePKWithFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAskAgreePKWithFriend& default_instance();

  void Swap(stAskAgreePKWithFriend* other);

  // implements Message ----------------------------------------------

  stAskAgreePKWithFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAskAgreePKWithFriend& from);
  void MergeFrom(const stAskAgreePKWithFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAskAgreePKWithFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAskAgreePKWithFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAskAgreePKWithFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAskAgreePKWithFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAskAgreePKWithFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAskAgreePKWithFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAskAgreePKWithFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAskAgreePKWithFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAskAgreePKWithFriend_ProtoModID_Parse(name, value);
  }

  typedef stAskAgreePKWithFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAskAgreePKWithFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAskAgreePKWithFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAskAgreePKWithFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAskAgreePKWithFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAskAgreePKWithFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAskAgreePKWithFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAskAgreePKWithFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAskAgreePKWithFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:FriendProto.stAskAgreePKWithFriend)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stAskAgreePKWithFriend* default_instance_;
};
// -------------------------------------------------------------------

class stReplyFriendPKInvite : public ::google::protobuf::Message {
 public:
  stReplyFriendPKInvite();
  virtual ~stReplyFriendPKInvite();

  stReplyFriendPKInvite(const stReplyFriendPKInvite& from);

  inline stReplyFriendPKInvite& operator=(const stReplyFriendPKInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReplyFriendPKInvite& default_instance();

  void Swap(stReplyFriendPKInvite* other);

  // implements Message ----------------------------------------------

  stReplyFriendPKInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReplyFriendPKInvite& from);
  void MergeFrom(const stReplyFriendPKInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReplyFriendPKInvite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReplyFriendPKInvite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReplyFriendPKInvite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReplyFriendPKInvite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReplyFriendPKInvite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReplyFriendPKInvite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReplyFriendPKInvite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReplyFriendPKInvite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReplyFriendPKInvite_ProtoModID_Parse(name, value);
  }

  typedef stReplyFriendPKInvite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReplyFriendPKInvite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReplyFriendPKInvite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReplyFriendPKInvite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReplyFriendPKInvite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReplyFriendPKInvite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReplyFriendPKInvite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReplyFriendPKInvite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReplyFriendPKInvite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool agree = 1;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 1;
  inline bool agree() const;
  inline void set_agree(bool value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stReplyFriendPKInvite)
 private:
  inline void set_has_agree();
  inline void clear_has_agree();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool agree_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stReplyFriendPKInvite* default_instance_;
};
// -------------------------------------------------------------------

class stInvitePKResult : public ::google::protobuf::Message {
 public:
  stInvitePKResult();
  virtual ~stInvitePKResult();

  stInvitePKResult(const stInvitePKResult& from);

  inline stInvitePKResult& operator=(const stInvitePKResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInvitePKResult& default_instance();

  void Swap(stInvitePKResult* other);

  // implements Message ----------------------------------------------

  stInvitePKResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInvitePKResult& from);
  void MergeFrom(const stInvitePKResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInvitePKResult_eResult eResult;
  static const eResult eRefuse = stInvitePKResult_eResult_eRefuse;
  static const eResult eAgree = stInvitePKResult_eResult_eAgree;
  static const eResult eNotYourFriend = stInvitePKResult_eResult_eNotYourFriend;
  static const eResult eNotOnline = stInvitePKResult_eResult_eNotOnline;
  static const eResult eInviteSuccess = stInvitePKResult_eResult_eInviteSuccess;
  static inline bool eResult_IsValid(int value) {
    return stInvitePKResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stInvitePKResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stInvitePKResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stInvitePKResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stInvitePKResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stInvitePKResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stInvitePKResult_eResult_Parse(name, value);
  }

  typedef stInvitePKResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInvitePKResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInvitePKResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInvitePKResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInvitePKResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInvitePKResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInvitePKResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInvitePKResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInvitePKResult_ProtoModID_Parse(name, value);
  }

  typedef stInvitePKResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInvitePKResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInvitePKResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInvitePKResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInvitePKResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInvitePKResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInvitePKResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInvitePKResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInvitePKResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .FriendProto.stInvitePKResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::FriendProto::stInvitePKResult_eResult result() const;
  inline void set_result(::FriendProto::stInvitePKResult_eResult value);

  // @@protoc_insertion_point(class_scope:FriendProto.stInvitePKResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stInvitePKResult* default_instance_;
};
// -------------------------------------------------------------------

class stReplyFriendPKInviteResult : public ::google::protobuf::Message {
 public:
  stReplyFriendPKInviteResult();
  virtual ~stReplyFriendPKInviteResult();

  stReplyFriendPKInviteResult(const stReplyFriendPKInviteResult& from);

  inline stReplyFriendPKInviteResult& operator=(const stReplyFriendPKInviteResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReplyFriendPKInviteResult& default_instance();

  void Swap(stReplyFriendPKInviteResult* other);

  // implements Message ----------------------------------------------

  stReplyFriendPKInviteResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReplyFriendPKInviteResult& from);
  void MergeFrom(const stReplyFriendPKInviteResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReplyFriendPKInviteResult_eResult eResult;
  static const eResult eNot_Invited_Has_Enter = stReplyFriendPKInviteResult_eResult_eNot_Invited_Has_Enter;
  static inline bool eResult_IsValid(int value) {
    return stReplyFriendPKInviteResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stReplyFriendPKInviteResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stReplyFriendPKInviteResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stReplyFriendPKInviteResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stReplyFriendPKInviteResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stReplyFriendPKInviteResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stReplyFriendPKInviteResult_eResult_Parse(name, value);
  }

  typedef stReplyFriendPKInviteResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReplyFriendPKInviteResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReplyFriendPKInviteResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReplyFriendPKInviteResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReplyFriendPKInviteResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReplyFriendPKInviteResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReplyFriendPKInviteResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReplyFriendPKInviteResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReplyFriendPKInviteResult_ProtoModID_Parse(name, value);
  }

  typedef stReplyFriendPKInviteResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReplyFriendPKInviteResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReplyFriendPKInviteResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReplyFriendPKInviteResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReplyFriendPKInviteResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReplyFriendPKInviteResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReplyFriendPKInviteResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReplyFriendPKInviteResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReplyFriendPKInviteResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .FriendProto.stReplyFriendPKInviteResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::FriendProto::stReplyFriendPKInviteResult_eResult result() const;
  inline void set_result(::FriendProto::stReplyFriendPKInviteResult_eResult value);

  // @@protoc_insertion_point(class_scope:FriendProto.stReplyFriendPKInviteResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stReplyFriendPKInviteResult* default_instance_;
};
// -------------------------------------------------------------------

class stSomeOneApplyAddFriend : public ::google::protobuf::Message {
 public:
  stSomeOneApplyAddFriend();
  virtual ~stSomeOneApplyAddFriend();

  stSomeOneApplyAddFriend(const stSomeOneApplyAddFriend& from);

  inline stSomeOneApplyAddFriend& operator=(const stSomeOneApplyAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSomeOneApplyAddFriend& default_instance();

  void Swap(stSomeOneApplyAddFriend* other);

  // implements Message ----------------------------------------------

  stSomeOneApplyAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSomeOneApplyAddFriend& from);
  void MergeFrom(const stSomeOneApplyAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSomeOneApplyAddFriend_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSomeOneApplyAddFriend_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSomeOneApplyAddFriend_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSomeOneApplyAddFriend_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSomeOneApplyAddFriend_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSomeOneApplyAddFriend_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSomeOneApplyAddFriend_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSomeOneApplyAddFriend_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSomeOneApplyAddFriend_ProtoModID_Parse(name, value);
  }

  typedef stSomeOneApplyAddFriend_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSomeOneApplyAddFriend_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSomeOneApplyAddFriend_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSomeOneApplyAddFriend_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSomeOneApplyAddFriend_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSomeOneApplyAddFriend_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSomeOneApplyAddFriend_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSomeOneApplyAddFriend_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSomeOneApplyAddFriend_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .FriendProto.stSynApplyerInfo one = 1;
  inline bool has_one() const;
  inline void clear_one();
  static const int kOneFieldNumber = 1;
  inline const ::FriendProto::stSynApplyerInfo& one() const;
  inline ::FriendProto::stSynApplyerInfo* mutable_one();
  inline ::FriendProto::stSynApplyerInfo* release_one();
  inline void set_allocated_one(::FriendProto::stSynApplyerInfo* one);

  // @@protoc_insertion_point(class_scope:FriendProto.stSomeOneApplyAddFriend)
 private:
  inline void set_has_one();
  inline void clear_has_one();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::FriendProto::stSynApplyerInfo* one_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stSomeOneApplyAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class MarryObjInfo : public ::google::protobuf::Message {
 public:
  MarryObjInfo();
  virtual ~MarryObjInfo();

  MarryObjInfo(const MarryObjInfo& from);

  inline MarryObjInfo& operator=(const MarryObjInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryObjInfo& default_instance();

  void Swap(MarryObjInfo* other);

  // implements Message ----------------------------------------------

  MarryObjInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryObjInfo& from);
  void MergeFrom(const MarryObjInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 6;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 6;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 headID = 7;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 7;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 8;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 8;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 9;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 9;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 10;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 10;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 11;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 11;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 12;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 12;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 13;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 13;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 14;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 14;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 15;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 15;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 16;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 16;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 17;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 17;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 18;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 18;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 effectID = 19;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 19;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 20;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 20;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // optional uint32 fashionWingID = 21;
  inline bool has_fashionwingid() const;
  inline void clear_fashionwingid();
  static const int kFashionWingIDFieldNumber = 21;
  inline ::google::protobuf::uint32 fashionwingid() const;
  inline void set_fashionwingid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.MarryObjInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();
  inline void set_has_fashionwingid();
  inline void clear_has_fashionwingid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;
  ::google::protobuf::uint32 fashionwingid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static MarryObjInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqPropose : public ::google::protobuf::Message {
 public:
  stReqPropose();
  virtual ~stReqPropose();

  stReqPropose(const stReqPropose& from);

  inline stReqPropose& operator=(const stReqPropose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqPropose& default_instance();

  void Swap(stReqPropose* other);

  // implements Message ----------------------------------------------

  stReqPropose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqPropose& from);
  void MergeFrom(const stReqPropose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqPropose_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqPropose_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqPropose_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqPropose_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqPropose_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqPropose_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqPropose_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqPropose_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqPropose_ProtoModID_Parse(name, value);
  }

  typedef stReqPropose_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqPropose_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqPropose_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqPropose_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqPropose_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqPropose_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqPropose_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqPropose_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqPropose_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .FriendProto.MarryObjInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::FriendProto::MarryObjInfo& info() const;
  inline ::FriendProto::MarryObjInfo* mutable_info();
  inline ::FriendProto::MarryObjInfo* release_info();
  inline void set_allocated_info(::FriendProto::MarryObjInfo* info);

  // @@protoc_insertion_point(class_scope:FriendProto.stReqPropose)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::FriendProto::MarryObjInfo* info_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stReqPropose* default_instance_;
};
// -------------------------------------------------------------------

class RejectMarry : public ::google::protobuf::Message {
 public:
  RejectMarry();
  virtual ~RejectMarry();

  RejectMarry(const RejectMarry& from);

  inline RejectMarry& operator=(const RejectMarry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RejectMarry& default_instance();

  void Swap(RejectMarry* other);

  // implements Message ----------------------------------------------

  RejectMarry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RejectMarry& from);
  void MergeFrom(const RejectMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RejectMarry_Result Result;
  static const Result RESULT_SUCCESS = RejectMarry_Result_RESULT_SUCCESS;
  static const Result RESULT_ERROR_FRIEND = RejectMarry_Result_RESULT_ERROR_FRIEND;
  static const Result RESULT_ERROR_ONLINE = RejectMarry_Result_RESULT_ERROR_ONLINE;
  static const Result RESULT_ERROR_SEX = RejectMarry_Result_RESULT_ERROR_SEX;
  static const Result RESULT_ERROR_MARRIED = RejectMarry_Result_RESULT_ERROR_MARRIED;
  static const Result RESULT_ERROR_TICK1 = RejectMarry_Result_RESULT_ERROR_TICK1;
  static const Result RESULT_ERROR_TICK2 = RejectMarry_Result_RESULT_ERROR_TICK2;
  static inline bool Result_IsValid(int value) {
    return RejectMarry_Result_IsValid(value);
  }
  static const Result Result_MIN =
    RejectMarry_Result_Result_MIN;
  static const Result Result_MAX =
    RejectMarry_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    RejectMarry_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return RejectMarry_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return RejectMarry_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return RejectMarry_Result_Parse(name, value);
  }

  typedef RejectMarry_ProtoModID ProtoModID;
  static const ProtoModID ModID = RejectMarry_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return RejectMarry_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    RejectMarry_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    RejectMarry_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    RejectMarry_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return RejectMarry_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return RejectMarry_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return RejectMarry_ProtoModID_Parse(name, value);
  }

  typedef RejectMarry_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = RejectMarry_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return RejectMarry_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    RejectMarry_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    RejectMarry_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    RejectMarry_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return RejectMarry_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return RejectMarry_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return RejectMarry_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .FriendProto.RejectMarry.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::FriendProto::RejectMarry_Result result() const;
  inline void set_result(::FriendProto::RejectMarry_Result value);

  // optional uint32 tick1 = 2;
  inline bool has_tick1() const;
  inline void clear_tick1();
  static const int kTick1FieldNumber = 2;
  inline ::google::protobuf::uint32 tick1() const;
  inline void set_tick1(::google::protobuf::uint32 value);

  // optional uint32 tick2 = 3;
  inline bool has_tick2() const;
  inline void clear_tick2();
  static const int kTick2FieldNumber = 3;
  inline ::google::protobuf::uint32 tick2() const;
  inline void set_tick2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.RejectMarry)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_tick1();
  inline void clear_has_tick1();
  inline void set_has_tick2();
  inline void clear_has_tick2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 tick1_;
  ::google::protobuf::uint32 tick2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static RejectMarry* default_instance_;
};
// -------------------------------------------------------------------

class ProposeResult : public ::google::protobuf::Message {
 public:
  ProposeResult();
  virtual ~ProposeResult();

  ProposeResult(const ProposeResult& from);

  inline ProposeResult& operator=(const ProposeResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProposeResult& default_instance();

  void Swap(ProposeResult* other);

  // implements Message ----------------------------------------------

  ProposeResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProposeResult& from);
  void MergeFrom(const ProposeResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProposeResult_Result Result;
  static const Result RESULT_SUCCESS = ProposeResult_Result_RESULT_SUCCESS;
  static const Result RESULT_REFUSE = ProposeResult_Result_RESULT_REFUSE;
  static inline bool Result_IsValid(int value) {
    return ProposeResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    ProposeResult_Result_Result_MIN;
  static const Result Result_MAX =
    ProposeResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    ProposeResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return ProposeResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return ProposeResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return ProposeResult_Result_Parse(name, value);
  }

  typedef ProposeResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = ProposeResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ProposeResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ProposeResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ProposeResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ProposeResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ProposeResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ProposeResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ProposeResult_ProtoModID_Parse(name, value);
  }

  typedef ProposeResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ProposeResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ProposeResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ProposeResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ProposeResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ProposeResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ProposeResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ProposeResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ProposeResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .FriendProto.ProposeResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::FriendProto::ProposeResult_Result result() const;
  inline void set_result(::FriendProto::ProposeResult_Result value);

  // optional .FriendProto.MarryObjInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::FriendProto::MarryObjInfo& info() const;
  inline ::FriendProto::MarryObjInfo* mutable_info();
  inline ::FriendProto::MarryObjInfo* release_info();
  inline void set_allocated_info(::FriendProto::MarryObjInfo* info);

  // @@protoc_insertion_point(class_scope:FriendProto.ProposeResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::FriendProto::MarryObjInfo* info_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static ProposeResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqAgreeMarry : public ::google::protobuf::Message {
 public:
  stReqAgreeMarry();
  virtual ~stReqAgreeMarry();

  stReqAgreeMarry(const stReqAgreeMarry& from);

  inline stReqAgreeMarry& operator=(const stReqAgreeMarry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAgreeMarry& default_instance();

  void Swap(stReqAgreeMarry* other);

  // implements Message ----------------------------------------------

  stReqAgreeMarry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAgreeMarry& from);
  void MergeFrom(const stReqAgreeMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAgreeMarry_Result Result;
  static const Result RESULT_AGREE = stReqAgreeMarry_Result_RESULT_AGREE;
  static const Result RESULT_REFUSE = stReqAgreeMarry_Result_RESULT_REFUSE;
  static inline bool Result_IsValid(int value) {
    return stReqAgreeMarry_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stReqAgreeMarry_Result_Result_MIN;
  static const Result Result_MAX =
    stReqAgreeMarry_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stReqAgreeMarry_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stReqAgreeMarry_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stReqAgreeMarry_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stReqAgreeMarry_Result_Parse(name, value);
  }

  typedef stReqAgreeMarry_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAgreeMarry_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAgreeMarry_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAgreeMarry_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAgreeMarry_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAgreeMarry_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAgreeMarry_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAgreeMarry_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAgreeMarry_ProtoModID_Parse(name, value);
  }

  typedef stReqAgreeMarry_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAgreeMarry_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAgreeMarry_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAgreeMarry_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAgreeMarry_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAgreeMarry_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAgreeMarry_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAgreeMarry_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAgreeMarry_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .FriendProto.stReqAgreeMarry.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::FriendProto::stReqAgreeMarry_Result result() const;
  inline void set_result(::FriendProto::stReqAgreeMarry_Result value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stReqAgreeMarry)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stReqAgreeMarry* default_instance_;
};
// -------------------------------------------------------------------

class stReqCancelMarry : public ::google::protobuf::Message {
 public:
  stReqCancelMarry();
  virtual ~stReqCancelMarry();

  stReqCancelMarry(const stReqCancelMarry& from);

  inline stReqCancelMarry& operator=(const stReqCancelMarry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCancelMarry& default_instance();

  void Swap(stReqCancelMarry* other);

  // implements Message ----------------------------------------------

  stReqCancelMarry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCancelMarry& from);
  void MergeFrom(const stReqCancelMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCancelMarry_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCancelMarry_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCancelMarry_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCancelMarry_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCancelMarry_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCancelMarry_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCancelMarry_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCancelMarry_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCancelMarry_ProtoModID_Parse(name, value);
  }

  typedef stReqCancelMarry_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCancelMarry_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCancelMarry_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCancelMarry_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCancelMarry_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCancelMarry_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCancelMarry_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCancelMarry_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCancelMarry_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.stReqCancelMarry)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static stReqCancelMarry* default_instance_;
};
// -------------------------------------------------------------------

class NotifyCancelMarry : public ::google::protobuf::Message {
 public:
  NotifyCancelMarry();
  virtual ~NotifyCancelMarry();

  NotifyCancelMarry(const NotifyCancelMarry& from);

  inline NotifyCancelMarry& operator=(const NotifyCancelMarry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyCancelMarry& default_instance();

  void Swap(NotifyCancelMarry* other);

  // implements Message ----------------------------------------------

  NotifyCancelMarry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyCancelMarry& from);
  void MergeFrom(const NotifyCancelMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NotifyCancelMarry_ProtoModID ProtoModID;
  static const ProtoModID ModID = NotifyCancelMarry_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return NotifyCancelMarry_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    NotifyCancelMarry_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    NotifyCancelMarry_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    NotifyCancelMarry_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return NotifyCancelMarry_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return NotifyCancelMarry_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return NotifyCancelMarry_ProtoModID_Parse(name, value);
  }

  typedef NotifyCancelMarry_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = NotifyCancelMarry_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return NotifyCancelMarry_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    NotifyCancelMarry_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    NotifyCancelMarry_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    NotifyCancelMarry_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return NotifyCancelMarry_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return NotifyCancelMarry_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return NotifyCancelMarry_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FriendProto.NotifyCancelMarry)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static NotifyCancelMarry* default_instance_;
};
// -------------------------------------------------------------------

class NotifyAgree : public ::google::protobuf::Message {
 public:
  NotifyAgree();
  virtual ~NotifyAgree();

  NotifyAgree(const NotifyAgree& from);

  inline NotifyAgree& operator=(const NotifyAgree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyAgree& default_instance();

  void Swap(NotifyAgree* other);

  // implements Message ----------------------------------------------

  NotifyAgree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyAgree& from);
  void MergeFrom(const NotifyAgree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NotifyAgree_Result Result;
  static const Result RESULT_SUCCESS = NotifyAgree_Result_RESULT_SUCCESS;
  static const Result RESULT_ONLINE = NotifyAgree_Result_RESULT_ONLINE;
  static const Result RESULT_CANCEL = NotifyAgree_Result_RESULT_CANCEL;
  static const Result RESULT_WEDDING = NotifyAgree_Result_RESULT_WEDDING;
  static inline bool Result_IsValid(int value) {
    return NotifyAgree_Result_IsValid(value);
  }
  static const Result Result_MIN =
    NotifyAgree_Result_Result_MIN;
  static const Result Result_MAX =
    NotifyAgree_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    NotifyAgree_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return NotifyAgree_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return NotifyAgree_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return NotifyAgree_Result_Parse(name, value);
  }

  typedef NotifyAgree_ProtoModID ProtoModID;
  static const ProtoModID ModID = NotifyAgree_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return NotifyAgree_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    NotifyAgree_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    NotifyAgree_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    NotifyAgree_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return NotifyAgree_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return NotifyAgree_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return NotifyAgree_ProtoModID_Parse(name, value);
  }

  typedef NotifyAgree_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = NotifyAgree_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return NotifyAgree_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    NotifyAgree_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    NotifyAgree_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    NotifyAgree_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return NotifyAgree_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return NotifyAgree_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return NotifyAgree_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .FriendProto.NotifyAgree.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::FriendProto::NotifyAgree_Result result() const;
  inline void set_result(::FriendProto::NotifyAgree_Result value);

  // @@protoc_insertion_point(class_scope:FriendProto.NotifyAgree)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Friend_2eproto();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static NotifyAgree* default_instance_;
};
// ===================================================================


// ===================================================================

// stSynFriendInfo

// optional uint32 charID = 1;
inline bool stSynFriendInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynFriendInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynFriendInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynFriendInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynFriendInfo::charid() const {
  return charid_;
}
inline void stSynFriendInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynFriendInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynFriendInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynFriendInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynFriendInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynFriendInfo::name() const {
  return *name_;
}
inline void stSynFriendInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynFriendInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynFriendInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynFriendInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynFriendInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynFriendInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool stSynFriendInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynFriendInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynFriendInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynFriendInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynFriendInfo::level() const {
  return level_;
}
inline void stSynFriendInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 4;
inline bool stSynFriendInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynFriendInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynFriendInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynFriendInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynFriendInfo::job() const {
  return job_;
}
inline void stSynFriendInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stSynFriendInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynFriendInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynFriendInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynFriendInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynFriendInfo::sex() const {
  return sex_;
}
inline void stSynFriendInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional bool online = 6;
inline bool stSynFriendInfo::has_online() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynFriendInfo::set_has_online() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynFriendInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynFriendInfo::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool stSynFriendInfo::online() const {
  return online_;
}
inline void stSynFriendInfo::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// optional uint32 battlePower = 7;
inline bool stSynFriendInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynFriendInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynFriendInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynFriendInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynFriendInfo::battlepower() const {
  return battlepower_;
}
inline void stSynFriendInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional string lastLoginTime = 8;
inline bool stSynFriendInfo::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynFriendInfo::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynFriendInfo::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynFriendInfo::clear_lastlogintime() {
  if (lastlogintime_ != &::google::protobuf::internal::kEmptyString) {
    lastlogintime_->clear();
  }
  clear_has_lastlogintime();
}
inline const ::std::string& stSynFriendInfo::lastlogintime() const {
  return *lastlogintime_;
}
inline void stSynFriendInfo::set_lastlogintime(const ::std::string& value) {
  set_has_lastlogintime();
  if (lastlogintime_ == &::google::protobuf::internal::kEmptyString) {
    lastlogintime_ = new ::std::string;
  }
  lastlogintime_->assign(value);
}
inline void stSynFriendInfo::set_lastlogintime(const char* value) {
  set_has_lastlogintime();
  if (lastlogintime_ == &::google::protobuf::internal::kEmptyString) {
    lastlogintime_ = new ::std::string;
  }
  lastlogintime_->assign(value);
}
inline void stSynFriendInfo::set_lastlogintime(const char* value, size_t size) {
  set_has_lastlogintime();
  if (lastlogintime_ == &::google::protobuf::internal::kEmptyString) {
    lastlogintime_ = new ::std::string;
  }
  lastlogintime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynFriendInfo::mutable_lastlogintime() {
  set_has_lastlogintime();
  if (lastlogintime_ == &::google::protobuf::internal::kEmptyString) {
    lastlogintime_ = new ::std::string;
  }
  return lastlogintime_;
}
inline ::std::string* stSynFriendInfo::release_lastlogintime() {
  clear_has_lastlogintime();
  if (lastlogintime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastlogintime_;
    lastlogintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynFriendInfo::set_allocated_lastlogintime(::std::string* lastlogintime) {
  if (lastlogintime_ != &::google::protobuf::internal::kEmptyString) {
    delete lastlogintime_;
  }
  if (lastlogintime) {
    set_has_lastlogintime();
    lastlogintime_ = lastlogintime;
  } else {
    clear_has_lastlogintime();
    lastlogintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 photoID = 9;
inline bool stSynFriendInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSynFriendInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSynFriendInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSynFriendInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynFriendInfo::photoid() const {
  return photoid_;
}
inline void stSynFriendInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stSynAllFriend

// repeated .FriendProto.stSynFriendInfo allFriend = 1;
inline int stSynAllFriend::allfriend_size() const {
  return allfriend_.size();
}
inline void stSynAllFriend::clear_allfriend() {
  allfriend_.Clear();
}
inline const ::FriendProto::stSynFriendInfo& stSynAllFriend::allfriend(int index) const {
  return allfriend_.Get(index);
}
inline ::FriendProto::stSynFriendInfo* stSynAllFriend::mutable_allfriend(int index) {
  return allfriend_.Mutable(index);
}
inline ::FriendProto::stSynFriendInfo* stSynAllFriend::add_allfriend() {
  return allfriend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynFriendInfo >&
stSynAllFriend::allfriend() const {
  return allfriend_;
}
inline ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynFriendInfo >*
stSynAllFriend::mutable_allfriend() {
  return &allfriend_;
}

// optional uint32 fetchLilianNum = 2;
inline bool stSynAllFriend::has_fetchliliannum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynAllFriend::set_has_fetchliliannum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynAllFriend::clear_has_fetchliliannum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynAllFriend::clear_fetchliliannum() {
  fetchliliannum_ = 0u;
  clear_has_fetchliliannum();
}
inline ::google::protobuf::uint32 stSynAllFriend::fetchliliannum() const {
  return fetchliliannum_;
}
inline void stSynAllFriend::set_fetchliliannum(::google::protobuf::uint32 value) {
  set_has_fetchliliannum();
  fetchliliannum_ = value;
}

// repeated uint32 hasGiveLilianCharID = 3;
inline int stSynAllFriend::hasgiveliliancharid_size() const {
  return hasgiveliliancharid_.size();
}
inline void stSynAllFriend::clear_hasgiveliliancharid() {
  hasgiveliliancharid_.Clear();
}
inline ::google::protobuf::uint32 stSynAllFriend::hasgiveliliancharid(int index) const {
  return hasgiveliliancharid_.Get(index);
}
inline void stSynAllFriend::set_hasgiveliliancharid(int index, ::google::protobuf::uint32 value) {
  hasgiveliliancharid_.Set(index, value);
}
inline void stSynAllFriend::add_hasgiveliliancharid(::google::protobuf::uint32 value) {
  hasgiveliliancharid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stSynAllFriend::hasgiveliliancharid() const {
  return hasgiveliliancharid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stSynAllFriend::mutable_hasgiveliliancharid() {
  return &hasgiveliliancharid_;
}

// -------------------------------------------------------------------

// stReqAddOneFriend

// optional uint32 charID = 1;
inline bool stReqAddOneFriend::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAddOneFriend::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAddOneFriend::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAddOneFriend::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqAddOneFriend::charid() const {
  return charid_;
}
inline void stReqAddOneFriend::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stNotifyAddOneFriend

// optional .FriendProto.stSynFriendInfo data = 1;
inline bool stNotifyAddOneFriend::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyAddOneFriend::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyAddOneFriend::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyAddOneFriend::clear_data() {
  if (data_ != NULL) data_->::FriendProto::stSynFriendInfo::Clear();
  clear_has_data();
}
inline const ::FriendProto::stSynFriendInfo& stNotifyAddOneFriend::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::FriendProto::stSynFriendInfo* stNotifyAddOneFriend::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::FriendProto::stSynFriendInfo;
  return data_;
}
inline ::FriendProto::stSynFriendInfo* stNotifyAddOneFriend::release_data() {
  clear_has_data();
  ::FriendProto::stSynFriendInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void stNotifyAddOneFriend::set_allocated_data(::FriendProto::stSynFriendInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// stAddFriendTip

// optional uint32 charID = 1;
inline bool stAddFriendTip::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddFriendTip::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddFriendTip::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddFriendTip::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stAddFriendTip::charid() const {
  return charid_;
}
inline void stAddFriendTip::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stAddFriendTip::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAddFriendTip::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAddFriendTip::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAddFriendTip::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stAddFriendTip::name() const {
  return *name_;
}
inline void stAddFriendTip::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stAddFriendTip::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stAddFriendTip::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stAddFriendTip::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stAddFriendTip::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stAddFriendTip::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stDelFriend

// optional uint32 charID = 1;
inline bool stDelFriend::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDelFriend::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDelFriend::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDelFriend::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDelFriend::charid() const {
  return charid_;
}
inline void stDelFriend::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stFindAndAddFriend

// optional string name = 1;
inline bool stFindAndAddFriend::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFindAndAddFriend::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFindAndAddFriend::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFindAndAddFriend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stFindAndAddFriend::name() const {
  return *name_;
}
inline void stFindAndAddFriend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stFindAndAddFriend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stFindAndAddFriend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stFindAndAddFriend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stFindAndAddFriend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stFindAndAddFriend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stFindAndAddFriendResult

// optional uint32 result = 1;
inline bool stFindAndAddFriendResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFindAndAddFriendResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFindAndAddFriendResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFindAndAddFriendResult::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 stFindAndAddFriendResult::result() const {
  return result_;
}
inline void stFindAndAddFriendResult::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional string name = 2;
inline bool stFindAndAddFriendResult::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stFindAndAddFriendResult::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stFindAndAddFriendResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stFindAndAddFriendResult::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stFindAndAddFriendResult::name() const {
  return *name_;
}
inline void stFindAndAddFriendResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stFindAndAddFriendResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stFindAndAddFriendResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stFindAndAddFriendResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stFindAndAddFriendResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stFindAndAddFriendResult::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqApplyAddFriendList

// optional uint32 flag = 1;
inline bool stReqApplyAddFriendList::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqApplyAddFriendList::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqApplyAddFriendList::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqApplyAddFriendList::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 stReqApplyAddFriendList::flag() const {
  return flag_;
}
inline void stReqApplyAddFriendList::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// stSynApplyerInfo

// optional uint32 charID = 1;
inline bool stSynApplyerInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynApplyerInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynApplyerInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynApplyerInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynApplyerInfo::charid() const {
  return charid_;
}
inline void stSynApplyerInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynApplyerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynApplyerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynApplyerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynApplyerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynApplyerInfo::name() const {
  return *name_;
}
inline void stSynApplyerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynApplyerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynApplyerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynApplyerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynApplyerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynApplyerInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool stSynApplyerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynApplyerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynApplyerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynApplyerInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynApplyerInfo::level() const {
  return level_;
}
inline void stSynApplyerInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 4;
inline bool stSynApplyerInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynApplyerInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynApplyerInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynApplyerInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynApplyerInfo::job() const {
  return job_;
}
inline void stSynApplyerInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stSynApplyerInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynApplyerInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynApplyerInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynApplyerInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynApplyerInfo::sex() const {
  return sex_;
}
inline void stSynApplyerInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 applyDiffTime = 6;
inline bool stSynApplyerInfo::has_applydifftime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynApplyerInfo::set_has_applydifftime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynApplyerInfo::clear_has_applydifftime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynApplyerInfo::clear_applydifftime() {
  applydifftime_ = 0u;
  clear_has_applydifftime();
}
inline ::google::protobuf::uint32 stSynApplyerInfo::applydifftime() const {
  return applydifftime_;
}
inline void stSynApplyerInfo::set_applydifftime(::google::protobuf::uint32 value) {
  set_has_applydifftime();
  applydifftime_ = value;
}

// optional uint32 battlePower = 7;
inline bool stSynApplyerInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynApplyerInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynApplyerInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynApplyerInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynApplyerInfo::battlepower() const {
  return battlepower_;
}
inline void stSynApplyerInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 photoID = 8;
inline bool stSynApplyerInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynApplyerInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynApplyerInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynApplyerInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynApplyerInfo::photoid() const {
  return photoid_;
}
inline void stSynApplyerInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stRetApplyAddFriendList

// repeated .FriendProto.stSynApplyerInfo applyerList = 1;
inline int stRetApplyAddFriendList::applyerlist_size() const {
  return applyerlist_.size();
}
inline void stRetApplyAddFriendList::clear_applyerlist() {
  applyerlist_.Clear();
}
inline const ::FriendProto::stSynApplyerInfo& stRetApplyAddFriendList::applyerlist(int index) const {
  return applyerlist_.Get(index);
}
inline ::FriendProto::stSynApplyerInfo* stRetApplyAddFriendList::mutable_applyerlist(int index) {
  return applyerlist_.Mutable(index);
}
inline ::FriendProto::stSynApplyerInfo* stRetApplyAddFriendList::add_applyerlist() {
  return applyerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynApplyerInfo >&
stRetApplyAddFriendList::applyerlist() const {
  return applyerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynApplyerInfo >*
stRetApplyAddFriendList::mutable_applyerlist() {
  return &applyerlist_;
}

// -------------------------------------------------------------------

// stNotifyFriend

// optional uint32 charID = 1;
inline bool stNotifyFriend::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyFriend::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyFriend::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyFriend::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyFriend::charid() const {
  return charid_;
}
inline void stNotifyFriend::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional .FriendProto.NotifyFriendType type = 2;
inline bool stNotifyFriend::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyFriend::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyFriend::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyFriend::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::FriendProto::NotifyFriendType stNotifyFriend::type() const {
  return static_cast< ::FriendProto::NotifyFriendType >(type_);
}
inline void stNotifyFriend::set_type(::FriendProto::NotifyFriendType value) {
  assert(::FriendProto::NotifyFriendType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// stSynRecommondChar

// optional uint32 charID = 1;
inline bool stSynRecommondChar::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynRecommondChar::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynRecommondChar::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynRecommondChar::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynRecommondChar::charid() const {
  return charid_;
}
inline void stSynRecommondChar::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynRecommondChar::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynRecommondChar::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynRecommondChar::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynRecommondChar::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynRecommondChar::name() const {
  return *name_;
}
inline void stSynRecommondChar::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynRecommondChar::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynRecommondChar::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynRecommondChar::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynRecommondChar::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynRecommondChar::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 3;
inline bool stSynRecommondChar::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynRecommondChar::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynRecommondChar::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynRecommondChar::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynRecommondChar::job() const {
  return job_;
}
inline void stSynRecommondChar::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 4;
inline bool stSynRecommondChar::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynRecommondChar::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynRecommondChar::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynRecommondChar::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynRecommondChar::sex() const {
  return sex_;
}
inline void stSynRecommondChar::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 battlePower = 5;
inline bool stSynRecommondChar::has_battlepower() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynRecommondChar::set_has_battlepower() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynRecommondChar::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynRecommondChar::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynRecommondChar::battlepower() const {
  return battlepower_;
}
inline void stSynRecommondChar::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 level = 6;
inline bool stSynRecommondChar::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynRecommondChar::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynRecommondChar::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynRecommondChar::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynRecommondChar::level() const {
  return level_;
}
inline void stSynRecommondChar::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 photoID = 7;
inline bool stSynRecommondChar::has_photoid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynRecommondChar::set_has_photoid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynRecommondChar::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynRecommondChar::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynRecommondChar::photoid() const {
  return photoid_;
}
inline void stSynRecommondChar::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stReqRecommondFriend

// optional uint32 charID = 1;
inline bool stReqRecommondFriend::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRecommondFriend::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRecommondFriend::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRecommondFriend::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRecommondFriend::charid() const {
  return charid_;
}
inline void stReqRecommondFriend::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRecommondFriendList

// repeated .FriendProto.stSynRecommondChar charList = 1;
inline int stRecommondFriendList::charlist_size() const {
  return charlist_.size();
}
inline void stRecommondFriendList::clear_charlist() {
  charlist_.Clear();
}
inline const ::FriendProto::stSynRecommondChar& stRecommondFriendList::charlist(int index) const {
  return charlist_.Get(index);
}
inline ::FriendProto::stSynRecommondChar* stRecommondFriendList::mutable_charlist(int index) {
  return charlist_.Mutable(index);
}
inline ::FriendProto::stSynRecommondChar* stRecommondFriendList::add_charlist() {
  return charlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynRecommondChar >&
stRecommondFriendList::charlist() const {
  return charlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::FriendProto::stSynRecommondChar >*
stRecommondFriendList::mutable_charlist() {
  return &charlist_;
}

// -------------------------------------------------------------------

// stGiveLilian2Friend

// optional uint32 charID = 1;
inline bool stGiveLilian2Friend::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGiveLilian2Friend::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGiveLilian2Friend::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGiveLilian2Friend::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGiveLilian2Friend::charid() const {
  return charid_;
}
inline void stGiveLilian2Friend::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGiveLilianResult

// optional uint32 charID = 1;
inline bool stGiveLilianResult::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGiveLilianResult::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGiveLilianResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGiveLilianResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGiveLilianResult::charid() const {
  return charid_;
}
inline void stGiveLilianResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional .FriendProto.stGiveLilianResult.eResult result = 2;
inline bool stGiveLilianResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGiveLilianResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGiveLilianResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGiveLilianResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::FriendProto::stGiveLilianResult_eResult stGiveLilianResult::result() const {
  return static_cast< ::FriendProto::stGiveLilianResult_eResult >(result_);
}
inline void stGiveLilianResult::set_result(::FriendProto::stGiveLilianResult_eResult value) {
  assert(::FriendProto::stGiveLilianResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqReceiveLilian

// optional uint32 charID = 1;
inline bool stReqReceiveLilian::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqReceiveLilian::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqReceiveLilian::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqReceiveLilian::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqReceiveLilian::charid() const {
  return charid_;
}
inline void stReqReceiveLilian::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stReceiveLilianList

// repeated uint32 charIDs = 1;
inline int stReceiveLilianList::charids_size() const {
  return charids_.size();
}
inline void stReceiveLilianList::clear_charids() {
  charids_.Clear();
}
inline ::google::protobuf::uint32 stReceiveLilianList::charids(int index) const {
  return charids_.Get(index);
}
inline void stReceiveLilianList::set_charids(int index, ::google::protobuf::uint32 value) {
  charids_.Set(index, value);
}
inline void stReceiveLilianList::add_charids(::google::protobuf::uint32 value) {
  charids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stReceiveLilianList::charids() const {
  return charids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stReceiveLilianList::mutable_charids() {
  return &charids_;
}

// -------------------------------------------------------------------

// stFetchLilian

// optional .FriendProto.eFetchLilianType type = 1;
inline bool stFetchLilian::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFetchLilian::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFetchLilian::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFetchLilian::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::FriendProto::eFetchLilianType stFetchLilian::type() const {
  return static_cast< ::FriendProto::eFetchLilianType >(type_);
}
inline void stFetchLilian::set_type(::FriendProto::eFetchLilianType value) {
  assert(::FriendProto::eFetchLilianType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 charID = 2;
inline bool stFetchLilian::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stFetchLilian::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stFetchLilian::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stFetchLilian::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stFetchLilian::charid() const {
  return charid_;
}
inline void stFetchLilian::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stFetchLilianResult

// optional uint32 result = 1;
inline bool stFetchLilianResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFetchLilianResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFetchLilianResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFetchLilianResult::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 stFetchLilianResult::result() const {
  return result_;
}
inline void stFetchLilianResult::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional uint32 charID = 2;
inline bool stFetchLilianResult::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stFetchLilianResult::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stFetchLilianResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stFetchLilianResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stFetchLilianResult::charid() const {
  return charid_;
}
inline void stFetchLilianResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional .FriendProto.eFetchLilianType type = 3;
inline bool stFetchLilianResult::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stFetchLilianResult::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stFetchLilianResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stFetchLilianResult::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::FriendProto::eFetchLilianType stFetchLilianResult::type() const {
  return static_cast< ::FriendProto::eFetchLilianType >(type_);
}
inline void stFetchLilianResult::set_type(::FriendProto::eFetchLilianType value) {
  assert(::FriendProto::eFetchLilianType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// stReqAdd2ApplyList

// optional uint32 otherID = 1;
inline bool stReqAdd2ApplyList::has_otherid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAdd2ApplyList::set_has_otherid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAdd2ApplyList::clear_has_otherid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAdd2ApplyList::clear_otherid() {
  otherid_ = 0u;
  clear_has_otherid();
}
inline ::google::protobuf::uint32 stReqAdd2ApplyList::otherid() const {
  return otherid_;
}
inline void stReqAdd2ApplyList::set_otherid(::google::protobuf::uint32 value) {
  set_has_otherid();
  otherid_ = value;
}

// -------------------------------------------------------------------

// stAdd2ApplyListResult

// optional .FriendProto.stAdd2ApplyListResult.eResult result = 1;
inline bool stAdd2ApplyListResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAdd2ApplyListResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAdd2ApplyListResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAdd2ApplyListResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::FriendProto::stAdd2ApplyListResult_eResult stAdd2ApplyListResult::result() const {
  return static_cast< ::FriendProto::stAdd2ApplyListResult_eResult >(result_);
}
inline void stAdd2ApplyListResult::set_result(::FriendProto::stAdd2ApplyListResult_eResult value) {
  assert(::FriendProto::stAdd2ApplyListResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stRefuseAddFriend

// optional uint32 charID = 1;
inline bool stRefuseAddFriend::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefuseAddFriend::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefuseAddFriend::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefuseAddFriend::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRefuseAddFriend::charid() const {
  return charid_;
}
inline void stRefuseAddFriend::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stInvitePKWithFriend

// optional uint32 charID = 1;
inline bool stInvitePKWithFriend::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInvitePKWithFriend::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInvitePKWithFriend::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInvitePKWithFriend::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stInvitePKWithFriend::charid() const {
  return charid_;
}
inline void stInvitePKWithFriend::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stAskAgreePKWithFriend

// optional uint32 charID = 1;
inline bool stAskAgreePKWithFriend::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAskAgreePKWithFriend::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAskAgreePKWithFriend::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAskAgreePKWithFriend::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stAskAgreePKWithFriend::charid() const {
  return charid_;
}
inline void stAskAgreePKWithFriend::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stAskAgreePKWithFriend::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAskAgreePKWithFriend::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAskAgreePKWithFriend::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAskAgreePKWithFriend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stAskAgreePKWithFriend::name() const {
  return *name_;
}
inline void stAskAgreePKWithFriend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stAskAgreePKWithFriend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stAskAgreePKWithFriend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stAskAgreePKWithFriend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stAskAgreePKWithFriend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stAskAgreePKWithFriend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReplyFriendPKInvite

// optional bool agree = 1;
inline bool stReplyFriendPKInvite::has_agree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReplyFriendPKInvite::set_has_agree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReplyFriendPKInvite::clear_has_agree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReplyFriendPKInvite::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool stReplyFriendPKInvite::agree() const {
  return agree_;
}
inline void stReplyFriendPKInvite::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
}

// optional uint32 charID = 2;
inline bool stReplyFriendPKInvite::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReplyFriendPKInvite::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReplyFriendPKInvite::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReplyFriendPKInvite::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReplyFriendPKInvite::charid() const {
  return charid_;
}
inline void stReplyFriendPKInvite::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stInvitePKResult

// optional .FriendProto.stInvitePKResult.eResult result = 1;
inline bool stInvitePKResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInvitePKResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInvitePKResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInvitePKResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::FriendProto::stInvitePKResult_eResult stInvitePKResult::result() const {
  return static_cast< ::FriendProto::stInvitePKResult_eResult >(result_);
}
inline void stInvitePKResult::set_result(::FriendProto::stInvitePKResult_eResult value) {
  assert(::FriendProto::stInvitePKResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReplyFriendPKInviteResult

// optional .FriendProto.stReplyFriendPKInviteResult.eResult result = 1;
inline bool stReplyFriendPKInviteResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReplyFriendPKInviteResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReplyFriendPKInviteResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReplyFriendPKInviteResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::FriendProto::stReplyFriendPKInviteResult_eResult stReplyFriendPKInviteResult::result() const {
  return static_cast< ::FriendProto::stReplyFriendPKInviteResult_eResult >(result_);
}
inline void stReplyFriendPKInviteResult::set_result(::FriendProto::stReplyFriendPKInviteResult_eResult value) {
  assert(::FriendProto::stReplyFriendPKInviteResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSomeOneApplyAddFriend

// optional .FriendProto.stSynApplyerInfo one = 1;
inline bool stSomeOneApplyAddFriend::has_one() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSomeOneApplyAddFriend::set_has_one() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSomeOneApplyAddFriend::clear_has_one() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSomeOneApplyAddFriend::clear_one() {
  if (one_ != NULL) one_->::FriendProto::stSynApplyerInfo::Clear();
  clear_has_one();
}
inline const ::FriendProto::stSynApplyerInfo& stSomeOneApplyAddFriend::one() const {
  return one_ != NULL ? *one_ : *default_instance_->one_;
}
inline ::FriendProto::stSynApplyerInfo* stSomeOneApplyAddFriend::mutable_one() {
  set_has_one();
  if (one_ == NULL) one_ = new ::FriendProto::stSynApplyerInfo;
  return one_;
}
inline ::FriendProto::stSynApplyerInfo* stSomeOneApplyAddFriend::release_one() {
  clear_has_one();
  ::FriendProto::stSynApplyerInfo* temp = one_;
  one_ = NULL;
  return temp;
}
inline void stSomeOneApplyAddFriend::set_allocated_one(::FriendProto::stSynApplyerInfo* one) {
  delete one_;
  one_ = one;
  if (one) {
    set_has_one();
  } else {
    clear_has_one();
  }
}

// -------------------------------------------------------------------

// MarryObjInfo

// optional uint32 charID = 1;
inline bool MarryObjInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryObjInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryObjInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryObjInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 MarryObjInfo::charid() const {
  return charid_;
}
inline void MarryObjInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool MarryObjInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarryObjInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarryObjInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarryObjInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MarryObjInfo::name() const {
  return *name_;
}
inline void MarryObjInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MarryObjInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MarryObjInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarryObjInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MarryObjInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarryObjInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool MarryObjInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarryObjInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarryObjInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarryObjInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 MarryObjInfo::level() const {
  return level_;
}
inline void MarryObjInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 4;
inline bool MarryObjInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarryObjInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarryObjInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarryObjInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 MarryObjInfo::job() const {
  return job_;
}
inline void MarryObjInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool MarryObjInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarryObjInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarryObjInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarryObjInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 MarryObjInfo::sex() const {
  return sex_;
}
inline void MarryObjInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 battlePower = 6;
inline bool MarryObjInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarryObjInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarryObjInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarryObjInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 MarryObjInfo::battlepower() const {
  return battlepower_;
}
inline void MarryObjInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 headID = 7;
inline bool MarryObjInfo::has_headid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarryObjInfo::set_has_headid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarryObjInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarryObjInfo::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 MarryObjInfo::headid() const {
  return headid_;
}
inline void MarryObjInfo::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 8;
inline bool MarryObjInfo::has_bodyid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarryObjInfo::set_has_bodyid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarryObjInfo::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarryObjInfo::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 MarryObjInfo::bodyid() const {
  return bodyid_;
}
inline void MarryObjInfo::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 9;
inline bool MarryObjInfo::has_weaponid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MarryObjInfo::set_has_weaponid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MarryObjInfo::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MarryObjInfo::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 MarryObjInfo::weaponid() const {
  return weaponid_;
}
inline void MarryObjInfo::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 10;
inline bool MarryObjInfo::has_cloackid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MarryObjInfo::set_has_cloackid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MarryObjInfo::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MarryObjInfo::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 MarryObjInfo::cloackid() const {
  return cloackid_;
}
inline void MarryObjInfo::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 11;
inline bool MarryObjInfo::has_wingid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MarryObjInfo::set_has_wingid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MarryObjInfo::clear_has_wingid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MarryObjInfo::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 MarryObjInfo::wingid() const {
  return wingid_;
}
inline void MarryObjInfo::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 12;
inline bool MarryObjInfo::has_shoeid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MarryObjInfo::set_has_shoeid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MarryObjInfo::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MarryObjInfo::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 MarryObjInfo::shoeid() const {
  return shoeid_;
}
inline void MarryObjInfo::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 13;
inline bool MarryObjInfo::has_fashionhair() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MarryObjInfo::set_has_fashionhair() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MarryObjInfo::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MarryObjInfo::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashionhair() const {
  return fashionhair_;
}
inline void MarryObjInfo::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 14;
inline bool MarryObjInfo::has_fashionface() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MarryObjInfo::set_has_fashionface() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MarryObjInfo::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MarryObjInfo::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashionface() const {
  return fashionface_;
}
inline void MarryObjInfo::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 15;
inline bool MarryObjInfo::has_fashionbody() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MarryObjInfo::set_has_fashionbody() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MarryObjInfo::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MarryObjInfo::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashionbody() const {
  return fashionbody_;
}
inline void MarryObjInfo::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 16;
inline bool MarryObjInfo::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MarryObjInfo::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MarryObjInfo::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MarryObjInfo::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashionweapon() const {
  return fashionweapon_;
}
inline void MarryObjInfo::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 17;
inline bool MarryObjInfo::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MarryObjInfo::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MarryObjInfo::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MarryObjInfo::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashionshoe() const {
  return fashionshoe_;
}
inline void MarryObjInfo::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 18;
inline bool MarryObjInfo::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MarryObjInfo::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MarryObjInfo::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MarryObjInfo::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashiondecoration() const {
  return fashiondecoration_;
}
inline void MarryObjInfo::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 effectID = 19;
inline bool MarryObjInfo::has_effectid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MarryObjInfo::set_has_effectid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MarryObjInfo::clear_has_effectid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MarryObjInfo::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 MarryObjInfo::effectid() const {
  return effectid_;
}
inline void MarryObjInfo::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 20;
inline bool MarryObjInfo::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MarryObjInfo::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MarryObjInfo::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MarryObjInfo::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 MarryObjInfo::wingbreaklv() const {
  return wingbreaklv_;
}
inline void MarryObjInfo::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// optional uint32 fashionWingID = 21;
inline bool MarryObjInfo::has_fashionwingid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MarryObjInfo::set_has_fashionwingid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MarryObjInfo::clear_has_fashionwingid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MarryObjInfo::clear_fashionwingid() {
  fashionwingid_ = 0u;
  clear_has_fashionwingid();
}
inline ::google::protobuf::uint32 MarryObjInfo::fashionwingid() const {
  return fashionwingid_;
}
inline void MarryObjInfo::set_fashionwingid(::google::protobuf::uint32 value) {
  set_has_fashionwingid();
  fashionwingid_ = value;
}

// -------------------------------------------------------------------

// stReqPropose

// optional uint32 id = 1;
inline bool stReqPropose::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqPropose::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqPropose::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqPropose::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqPropose::id() const {
  return id_;
}
inline void stReqPropose::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .FriendProto.MarryObjInfo info = 2;
inline bool stReqPropose::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqPropose::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqPropose::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqPropose::clear_info() {
  if (info_ != NULL) info_->::FriendProto::MarryObjInfo::Clear();
  clear_has_info();
}
inline const ::FriendProto::MarryObjInfo& stReqPropose::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::FriendProto::MarryObjInfo* stReqPropose::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::FriendProto::MarryObjInfo;
  return info_;
}
inline ::FriendProto::MarryObjInfo* stReqPropose::release_info() {
  clear_has_info();
  ::FriendProto::MarryObjInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void stReqPropose::set_allocated_info(::FriendProto::MarryObjInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// RejectMarry

// optional .FriendProto.RejectMarry.Result result = 1;
inline bool RejectMarry::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RejectMarry::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RejectMarry::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RejectMarry::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::FriendProto::RejectMarry_Result RejectMarry::result() const {
  return static_cast< ::FriendProto::RejectMarry_Result >(result_);
}
inline void RejectMarry::set_result(::FriendProto::RejectMarry_Result value) {
  assert(::FriendProto::RejectMarry_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 tick1 = 2;
inline bool RejectMarry::has_tick1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RejectMarry::set_has_tick1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RejectMarry::clear_has_tick1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RejectMarry::clear_tick1() {
  tick1_ = 0u;
  clear_has_tick1();
}
inline ::google::protobuf::uint32 RejectMarry::tick1() const {
  return tick1_;
}
inline void RejectMarry::set_tick1(::google::protobuf::uint32 value) {
  set_has_tick1();
  tick1_ = value;
}

// optional uint32 tick2 = 3;
inline bool RejectMarry::has_tick2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RejectMarry::set_has_tick2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RejectMarry::clear_has_tick2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RejectMarry::clear_tick2() {
  tick2_ = 0u;
  clear_has_tick2();
}
inline ::google::protobuf::uint32 RejectMarry::tick2() const {
  return tick2_;
}
inline void RejectMarry::set_tick2(::google::protobuf::uint32 value) {
  set_has_tick2();
  tick2_ = value;
}

// -------------------------------------------------------------------

// ProposeResult

// optional .FriendProto.ProposeResult.Result result = 1;
inline bool ProposeResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProposeResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProposeResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProposeResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::FriendProto::ProposeResult_Result ProposeResult::result() const {
  return static_cast< ::FriendProto::ProposeResult_Result >(result_);
}
inline void ProposeResult::set_result(::FriendProto::ProposeResult_Result value) {
  assert(::FriendProto::ProposeResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .FriendProto.MarryObjInfo info = 2;
inline bool ProposeResult::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProposeResult::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProposeResult::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProposeResult::clear_info() {
  if (info_ != NULL) info_->::FriendProto::MarryObjInfo::Clear();
  clear_has_info();
}
inline const ::FriendProto::MarryObjInfo& ProposeResult::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::FriendProto::MarryObjInfo* ProposeResult::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::FriendProto::MarryObjInfo;
  return info_;
}
inline ::FriendProto::MarryObjInfo* ProposeResult::release_info() {
  clear_has_info();
  ::FriendProto::MarryObjInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ProposeResult::set_allocated_info(::FriendProto::MarryObjInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// stReqAgreeMarry

// optional .FriendProto.stReqAgreeMarry.Result result = 1;
inline bool stReqAgreeMarry::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAgreeMarry::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAgreeMarry::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAgreeMarry::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::FriendProto::stReqAgreeMarry_Result stReqAgreeMarry::result() const {
  return static_cast< ::FriendProto::stReqAgreeMarry_Result >(result_);
}
inline void stReqAgreeMarry::set_result(::FriendProto::stReqAgreeMarry_Result value) {
  assert(::FriendProto::stReqAgreeMarry_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 id = 2;
inline bool stReqAgreeMarry::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqAgreeMarry::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqAgreeMarry::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqAgreeMarry::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqAgreeMarry::id() const {
  return id_;
}
inline void stReqAgreeMarry::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stReqCancelMarry

// optional uint32 id = 1;
inline bool stReqCancelMarry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCancelMarry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCancelMarry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCancelMarry::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqCancelMarry::id() const {
  return id_;
}
inline void stReqCancelMarry::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NotifyCancelMarry

// optional uint32 id = 1;
inline bool NotifyCancelMarry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyCancelMarry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyCancelMarry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyCancelMarry::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 NotifyCancelMarry::id() const {
  return id_;
}
inline void NotifyCancelMarry::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NotifyAgree

// optional .FriendProto.NotifyAgree.Result result = 1;
inline bool NotifyAgree::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyAgree::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyAgree::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyAgree::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::FriendProto::NotifyAgree_Result NotifyAgree::result() const {
  return static_cast< ::FriendProto::NotifyAgree_Result >(result_);
}
inline void NotifyAgree::set_result(::FriendProto::NotifyAgree_Result value) {
  assert(::FriendProto::NotifyAgree_Result_IsValid(value));
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FriendProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stSynAllFriend_ProtoModID>() {
  return ::FriendProto::stSynAllFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stSynAllFriend_ProtoFunID>() {
  return ::FriendProto::stSynAllFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqAddOneFriend_ProtoModID>() {
  return ::FriendProto::stReqAddOneFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqAddOneFriend_ProtoFunID>() {
  return ::FriendProto::stReqAddOneFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stNotifyAddOneFriend_ProtoModID>() {
  return ::FriendProto::stNotifyAddOneFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stNotifyAddOneFriend_ProtoFunID>() {
  return ::FriendProto::stNotifyAddOneFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stAddFriendTip_ProtoModID>() {
  return ::FriendProto::stAddFriendTip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stAddFriendTip_ProtoFunID>() {
  return ::FriendProto::stAddFriendTip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stDelFriend_ProtoModID>() {
  return ::FriendProto::stDelFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stDelFriend_ProtoFunID>() {
  return ::FriendProto::stDelFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stFindAndAddFriend_ProtoModID>() {
  return ::FriendProto::stFindAndAddFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stFindAndAddFriend_ProtoFunID>() {
  return ::FriendProto::stFindAndAddFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stFindAndAddFriendResult_ProtoModID>() {
  return ::FriendProto::stFindAndAddFriendResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stFindAndAddFriendResult_ProtoFunID>() {
  return ::FriendProto::stFindAndAddFriendResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqApplyAddFriendList_ProtoModID>() {
  return ::FriendProto::stReqApplyAddFriendList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqApplyAddFriendList_ProtoFunID>() {
  return ::FriendProto::stReqApplyAddFriendList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stRetApplyAddFriendList_ProtoModID>() {
  return ::FriendProto::stRetApplyAddFriendList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stRetApplyAddFriendList_ProtoFunID>() {
  return ::FriendProto::stRetApplyAddFriendList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stNotifyFriend_ProtoModID>() {
  return ::FriendProto::stNotifyFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stNotifyFriend_ProtoFunID>() {
  return ::FriendProto::stNotifyFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqRecommondFriend_ProtoModID>() {
  return ::FriendProto::stReqRecommondFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqRecommondFriend_ProtoFunID>() {
  return ::FriendProto::stReqRecommondFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stRecommondFriendList_ProtoModID>() {
  return ::FriendProto::stRecommondFriendList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stRecommondFriendList_ProtoFunID>() {
  return ::FriendProto::stRecommondFriendList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stGiveLilian2Friend_ProtoModID>() {
  return ::FriendProto::stGiveLilian2Friend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stGiveLilian2Friend_ProtoFunID>() {
  return ::FriendProto::stGiveLilian2Friend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stGiveLilianResult_eResult>() {
  return ::FriendProto::stGiveLilianResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stGiveLilianResult_ProtoModID>() {
  return ::FriendProto::stGiveLilianResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stGiveLilianResult_ProtoFunID>() {
  return ::FriendProto::stGiveLilianResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqReceiveLilian_ProtoModID>() {
  return ::FriendProto::stReqReceiveLilian_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqReceiveLilian_ProtoFunID>() {
  return ::FriendProto::stReqReceiveLilian_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReceiveLilianList_ProtoModID>() {
  return ::FriendProto::stReceiveLilianList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReceiveLilianList_ProtoFunID>() {
  return ::FriendProto::stReceiveLilianList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stFetchLilian_ProtoModID>() {
  return ::FriendProto::stFetchLilian_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stFetchLilian_ProtoFunID>() {
  return ::FriendProto::stFetchLilian_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stFetchLilianResult_eResult>() {
  return ::FriendProto::stFetchLilianResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stFetchLilianResult_ProtoModID>() {
  return ::FriendProto::stFetchLilianResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stFetchLilianResult_ProtoFunID>() {
  return ::FriendProto::stFetchLilianResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqAdd2ApplyList_ProtoModID>() {
  return ::FriendProto::stReqAdd2ApplyList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqAdd2ApplyList_ProtoFunID>() {
  return ::FriendProto::stReqAdd2ApplyList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stAdd2ApplyListResult_eResult>() {
  return ::FriendProto::stAdd2ApplyListResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stAdd2ApplyListResult_ProtoModID>() {
  return ::FriendProto::stAdd2ApplyListResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stAdd2ApplyListResult_ProtoFunID>() {
  return ::FriendProto::stAdd2ApplyListResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stRefuseAddFriend_ProtoModID>() {
  return ::FriendProto::stRefuseAddFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stRefuseAddFriend_ProtoFunID>() {
  return ::FriendProto::stRefuseAddFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stInvitePKWithFriend_ProtoModID>() {
  return ::FriendProto::stInvitePKWithFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stInvitePKWithFriend_ProtoFunID>() {
  return ::FriendProto::stInvitePKWithFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stAskAgreePKWithFriend_ProtoModID>() {
  return ::FriendProto::stAskAgreePKWithFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stAskAgreePKWithFriend_ProtoFunID>() {
  return ::FriendProto::stAskAgreePKWithFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReplyFriendPKInvite_ProtoModID>() {
  return ::FriendProto::stReplyFriendPKInvite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReplyFriendPKInvite_ProtoFunID>() {
  return ::FriendProto::stReplyFriendPKInvite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stInvitePKResult_eResult>() {
  return ::FriendProto::stInvitePKResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stInvitePKResult_ProtoModID>() {
  return ::FriendProto::stInvitePKResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stInvitePKResult_ProtoFunID>() {
  return ::FriendProto::stInvitePKResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReplyFriendPKInviteResult_eResult>() {
  return ::FriendProto::stReplyFriendPKInviteResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReplyFriendPKInviteResult_ProtoModID>() {
  return ::FriendProto::stReplyFriendPKInviteResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReplyFriendPKInviteResult_ProtoFunID>() {
  return ::FriendProto::stReplyFriendPKInviteResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stSomeOneApplyAddFriend_ProtoModID>() {
  return ::FriendProto::stSomeOneApplyAddFriend_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stSomeOneApplyAddFriend_ProtoFunID>() {
  return ::FriendProto::stSomeOneApplyAddFriend_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqPropose_ProtoModID>() {
  return ::FriendProto::stReqPropose_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqPropose_ProtoFunID>() {
  return ::FriendProto::stReqPropose_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::RejectMarry_Result>() {
  return ::FriendProto::RejectMarry_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::RejectMarry_ProtoModID>() {
  return ::FriendProto::RejectMarry_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::RejectMarry_ProtoFunID>() {
  return ::FriendProto::RejectMarry_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::ProposeResult_Result>() {
  return ::FriendProto::ProposeResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::ProposeResult_ProtoModID>() {
  return ::FriendProto::ProposeResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::ProposeResult_ProtoFunID>() {
  return ::FriendProto::ProposeResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqAgreeMarry_Result>() {
  return ::FriendProto::stReqAgreeMarry_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqAgreeMarry_ProtoModID>() {
  return ::FriendProto::stReqAgreeMarry_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqAgreeMarry_ProtoFunID>() {
  return ::FriendProto::stReqAgreeMarry_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqCancelMarry_ProtoModID>() {
  return ::FriendProto::stReqCancelMarry_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::stReqCancelMarry_ProtoFunID>() {
  return ::FriendProto::stReqCancelMarry_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::NotifyCancelMarry_ProtoModID>() {
  return ::FriendProto::NotifyCancelMarry_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::NotifyCancelMarry_ProtoFunID>() {
  return ::FriendProto::NotifyCancelMarry_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::NotifyAgree_Result>() {
  return ::FriendProto::NotifyAgree_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::NotifyAgree_ProtoModID>() {
  return ::FriendProto::NotifyAgree_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::NotifyAgree_ProtoFunID>() {
  return ::FriendProto::NotifyAgree_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::NotifyFriendType>() {
  return ::FriendProto::NotifyFriendType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendProto::eFetchLilianType>() {
  return ::FriendProto::eFetchLilianType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Friend_2eproto__INCLUDED
